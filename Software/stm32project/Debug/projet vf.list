
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016744  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000024b0  080168d8  080168d8  000268d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018d88  08018d88  00030314  2**0
                  CONTENTS
  4 .ARM          00000008  08018d88  08018d88  00028d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018d90  08018d90  00030314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018d90  08018d90  00028d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018d94  08018d94  00028d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  08018d98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c0  20000318  080190ac  00030318  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015d8  080190ac  000315d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030314  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030344  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024753  00000000  00000000  00030387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e93  00000000  00000000  00054ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e60  00000000  00000000  00059970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001777  00000000  00000000  0005b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027bc2  00000000  00000000  0005cf47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002734b  00000000  00000000  00084b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5170  00000000  00000000  000abe54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009a94  00000000  00000000  00190fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0019aa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000318 	.word	0x20000318
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080168bc 	.word	0x080168bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000031c 	.word	0x2000031c
 80001cc:	080168bc 	.word	0x080168bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001000:	d104      	bne.n	800100c <HAL_GPIO_EXTI_Callback+0x1c>
//		ssd1306_SetCursor(33, 44);
//		ssd1306_WriteString("btna", Font_6x8, White);
//		ssd1306_UpdateScreen();
		BTN_A++;//sert à reconnaitre lorsque le bouto na est appuyer, cette variable est mise à 1 par un e interruption.
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3301      	adds	r3, #1
 8001008:	4a08      	ldr	r2, [pc, #32]	; (800102c <HAL_GPIO_EXTI_Callback+0x3c>)
 800100a:	6013      	str	r3, [r2, #0]


	}
	if(GPIO_Pin==GPIO_PIN_15){
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001012:	d104      	bne.n	800101e <HAL_GPIO_EXTI_Callback+0x2e>
		//ssd1306_SetCursor(33, 44);
		//ssd1306_WriteString("btnb", Font_6x8, White);
		//ssd1306_UpdateScreen();
		BTN_B++;//de meme pour le bouton b
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_GPIO_EXTI_Callback+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <HAL_GPIO_EXTI_Callback+0x40>)
 800101c:	6013      	str	r3, [r2, #0]

	}
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000820 	.word	0x20000820
 8001030:	20000824 	.word	0x20000824

08001034 <HAL_UART_RxCpltCallback>:

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 800103c:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <HAL_UART_RxCpltCallback+0xc4>)
 800103e:	881a      	ldrh	r2, [r3, #0]
 8001040:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <HAL_UART_RxCpltCallback+0xc8>)
 8001042:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <HAL_UART_RxCpltCallback+0xc8>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800104c:	d922      	bls.n	8001094 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <HAL_UART_RxCpltCallback+0xc8>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001056:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <HAL_UART_RxCpltCallback+0xc8>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <HAL_UART_RxCpltCallback+0xcc>)
 8001060:	4413      	add	r3, r2
 8001062:	89fa      	ldrh	r2, [r7, #14]
 8001064:	4927      	ldr	r1, [pc, #156]	; (8001104 <HAL_UART_RxCpltCallback+0xd0>)
 8001066:	4618      	mov	r0, r3
 8001068:	f011 fe13 	bl	8012c92 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 800106c:	4b23      	ldr	r3, [pc, #140]	; (80010fc <HAL_UART_RxCpltCallback+0xc8>)
 800106e:	2200      	movs	r2, #0
 8001070:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	4a23      	ldr	r2, [pc, #140]	; (8001104 <HAL_UART_RxCpltCallback+0xd0>)
 8001076:	1899      	adds	r1, r3, r2
 8001078:	89fb      	ldrh	r3, [r7, #14]
 800107a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800107e:	461a      	mov	r2, r3
 8001080:	481f      	ldr	r0, [pc, #124]	; (8001100 <HAL_UART_RxCpltCallback+0xcc>)
 8001082:	f011 fe06 	bl	8012c92 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8001086:	89fb      	ldrh	r3, [r7, #14]
 8001088:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800108c:	b29a      	uxth	r2, r3
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_UART_RxCpltCallback+0xc4>)
 8001090:	801a      	strh	r2, [r3, #0]
 8001092:	e01b      	b.n	80010cc <HAL_UART_RxCpltCallback+0x98>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8001094:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_UART_RxCpltCallback+0xc8>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_UART_RxCpltCallback+0xcc>)
 800109c:	4413      	add	r3, r2
 800109e:	4a19      	ldr	r2, [pc, #100]	; (8001104 <HAL_UART_RxCpltCallback+0xd0>)
 80010a0:	4614      	mov	r4, r2
 80010a2:	469c      	mov	ip, r3
 80010a4:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 80010a8:	4665      	mov	r5, ip
 80010aa:	4626      	mov	r6, r4
 80010ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010ae:	6028      	str	r0, [r5, #0]
 80010b0:	6069      	str	r1, [r5, #4]
 80010b2:	60aa      	str	r2, [r5, #8]
 80010b4:	60eb      	str	r3, [r5, #12]
 80010b6:	3410      	adds	r4, #16
 80010b8:	f10c 0c10 	add.w	ip, ip, #16
 80010bc:	4574      	cmp	r4, lr
 80010be:	d1f3      	bne.n	80010a8 <HAL_UART_RxCpltCallback+0x74>
				newPos = 64+oldPos; //update buffer position
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_UART_RxCpltCallback+0xc8>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	3340      	adds	r3, #64	; 0x40
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_UART_RxCpltCallback+0xc4>)
 80010ca:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 80010cc:	2240      	movs	r2, #64	; 0x40
 80010ce:	490d      	ldr	r1, [pc, #52]	; (8001104 <HAL_UART_RxCpltCallback+0xd0>)
 80010d0:	480d      	ldr	r0, [pc, #52]	; (8001108 <HAL_UART_RxCpltCallback+0xd4>)
 80010d2:	f009 fcd3 	bl	800aa7c <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <HAL_UART_RxCpltCallback+0xd8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_UART_RxCpltCallback+0xd8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0204 	bic.w	r2, r2, #4
 80010e4:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 80010e6:	2240      	movs	r2, #64	; 0x40
 80010e8:	4906      	ldr	r1, [pc, #24]	; (8001104 <HAL_UART_RxCpltCallback+0xd0>)
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <HAL_UART_RxCpltCallback+0xd4>)
 80010ec:	f009 fcc6 	bl	800aa7c <HAL_UART_Receive_DMA>
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f8:	2000059e 	.word	0x2000059e
 80010fc:	2000059c 	.word	0x2000059c
 8001100:	200005e0 	.word	0x200005e0
 8001104:	200005a0 	.word	0x200005a0
 8001108:	20000434 	.word	0x20000434
 800110c:	200004bc 	.word	0x200004bc

08001110 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001110:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a3c      	ldr	r2, [pc, #240]	; (8001210 <HAL_ADC_ConvCpltCallback+0x100>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d166      	bne.n	80011f2 <HAL_ADC_ConvCpltCallback+0xe2>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 8001124:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <HAL_ADC_ConvCpltCallback+0x104>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9fb 	bl	8000524 <__aeabi_i2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	a135      	add	r1, pc, #212	; (adr r1, 8001208 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001138:	f7ff fb88 	bl	800084c <__aeabi_ddiv>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	f7ff fd50 	bl	8000be8 <__aeabi_d2f>
 8001148:	4603      	mov	r3, r0
 800114a:	4a33      	ldr	r2, [pc, #204]	; (8001218 <HAL_ADC_ConvCpltCallback+0x108>)
 800114c:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 800114e:	4b33      	ldr	r3, [pc, #204]	; (800121c <HAL_ADC_ConvCpltCallback+0x10c>)
 8001150:	ed93 7a00 	vldr	s14, [r3]
 8001154:	4b32      	ldr	r3, [pc, #200]	; (8001220 <HAL_ADC_ConvCpltCallback+0x110>)
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115e:	ee17 0a90 	vmov	r0, s15
 8001162:	f7ff f9f1 	bl	8000548 <__aeabi_f2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	492d      	ldr	r1, [pc, #180]	; (8001224 <HAL_ADC_ConvCpltCallback+0x114>)
 8001170:	f7ff fb6c 	bl	800084c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4690      	mov	r8, r2
 800117a:	4699      	mov	r9, r3
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <HAL_ADC_ConvCpltCallback+0x104>)
 800117e:	885b      	ldrh	r3, [r3, #2]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9cf 	bl	8000524 <__aeabi_i2d>
 8001186:	4604      	mov	r4, r0
 8001188:	460d      	mov	r5, r1
 800118a:	4b23      	ldr	r3, [pc, #140]	; (8001218 <HAL_ADC_ConvCpltCallback+0x108>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9da 	bl	8000548 <__aeabi_f2d>
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <HAL_ADC_ConvCpltCallback+0x118>)
 800119a:	f7ff fb57 	bl	800084c <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4620      	mov	r0, r4
 80011a4:	4629      	mov	r1, r5
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4614      	mov	r4, r2
 80011b0:	461d      	mov	r5, r3
 80011b2:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_ADC_ConvCpltCallback+0x110>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9c6 	bl	8000548 <__aeabi_f2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff f860 	bl	8000288 <__aeabi_dsub>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4640      	mov	r0, r8
 80011ce:	4649      	mov	r1, r9
 80011d0:	f7ff fa12 	bl	80005f8 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	f7ff fd04 	bl	8000be8 <__aeabi_d2f>
 80011e0:	ee07 0a10 	vmov	s14, r0
 80011e4:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_ADC_ConvCpltCallback+0x11c>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 2);
 80011f2:	2202      	movs	r2, #2
 80011f4:	4907      	ldr	r1, [pc, #28]	; (8001214 <HAL_ADC_ConvCpltCallback+0x104>)
 80011f6:	480e      	ldr	r0, [pc, #56]	; (8001230 <HAL_ADC_ConvCpltCallback+0x120>)
 80011f8:	f003 fd2c 	bl	8004c54 <HAL_ADC_Start_DMA>



}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001206:	bf00      	nop
 8001208:	d70a3d70 	.word	0xd70a3d70
 800120c:	40b36323 	.word	0x40b36323
 8001210:	50040000 	.word	0x50040000
 8001214:	20000830 	.word	0x20000830
 8001218:	20000838 	.word	0x20000838
 800121c:	20000000 	.word	0x20000000
 8001220:	20000004 	.word	0x20000004
 8001224:	40590000 	.word	0x40590000
 8001228:	40080000 	.word	0x40080000
 800122c:	20000834 	.word	0x20000834
 8001230:	20000334 	.word	0x20000334

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123a:	f003 f956 	bl	80044ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123e:	f000 f859 	bl	80012f4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001242:	f000 f8aa 	bl	800139a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001246:	f000 fa75 	bl	8001734 <MX_GPIO_Init>
  MX_DMA_Init();
 800124a:	f000 fa41 	bl	80016d0 <MX_DMA_Init>
  MX_I2C3_Init();
 800124e:	f000 f949 	bl	80014e4 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001252:	f000 f98b 	bl	800156c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001256:	f000 f8cf 	bl	80013f8 <MX_ADC1_Init>
  MX_TIM2_Init();
 800125a:	f000 f9b3 	bl	80015c4 <MX_TIM2_Init>
  MX_TIM7_Init();
 800125e:	f000 f9ff 	bl	8001660 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8001262:	f00e ffc5 	bl	80101f0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */



	ssd1306_Init();
 8001266:	f000 fecb 	bl	8002000 <ssd1306_Init>

	HAL_Delay(100);
 800126a:	2064      	movs	r0, #100	; 0x64
 800126c:	f003 f9b2 	bl	80045d4 <HAL_Delay>
	ssd1306_Fill(Black);
 8001270:	2000      	movs	r0, #0
 8001272:	f000 ff2f 	bl	80020d4 <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);
 8001276:	2301      	movs	r3, #1
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2340      	movs	r3, #64	; 0x40
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2340      	movs	r3, #64	; 0x40
 8001280:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <main+0xa4>)
 8001282:	2120      	movs	r1, #32
 8001284:	2020      	movs	r0, #32
 8001286:	f001 f9f7 	bl	8002678 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 800128a:	f000 ff3b 	bl	8002104 <ssd1306_UpdateScreen>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	2102      	movs	r1, #2
 8001292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001296:	f005 faed 	bl	8006874 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800129a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800129e:	f003 f999 	bl	80045d4 <HAL_Delay>

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 2);
 80012a2:	2202      	movs	r2, #2
 80012a4:	490d      	ldr	r1, [pc, #52]	; (80012dc <main+0xa8>)
 80012a6:	480e      	ldr	r0, [pc, #56]	; (80012e0 <main+0xac>)
 80012a8:	f003 fcd4 	bl	8004c54 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <main+0xb0>)
 80012ae:	f008 ff2f 	bl	800a110 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim7);
 80012b2:	480d      	ldr	r0, [pc, #52]	; (80012e8 <main+0xb4>)
 80012b4:	f008 ff2c 	bl	800a110 <HAL_TIM_Base_Start>

	HAL_UART_Abort(&hlpuart1);
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <main+0xb8>)
 80012ba:	f009 fc2b 	bl	800ab14 <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//lancement du dma pour le gps
 80012be:	2240      	movs	r2, #64	; 0x40
 80012c0:	490b      	ldr	r1, [pc, #44]	; (80012f0 <main+0xbc>)
 80012c2:	480a      	ldr	r0, [pc, #40]	; (80012ec <main+0xb8>)
 80012c4:	f009 fbda 	bl	800aa7c <HAL_UART_Receive_DMA>

	ssd1306_Fill(Black);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f000 ff03 	bl	80020d4 <ssd1306_Fill>

    /* USER CODE BEGIN 3 */



		statemachine();
 80012ce:	f001 fa5f 	bl	8002790 <statemachine>
		ssd1306_UpdateScreen();
 80012d2:	f000 ff17 	bl	8002104 <ssd1306_UpdateScreen>
		statemachine();
 80012d6:	e7fa      	b.n	80012ce <main+0x9a>
 80012d8:	08016b14 	.word	0x08016b14
 80012dc:	20000830 	.word	0x20000830
 80012e0:	20000334 	.word	0x20000334
 80012e4:	20000504 	.word	0x20000504
 80012e8:	20000550 	.word	0x20000550
 80012ec:	20000434 	.word	0x20000434
 80012f0:	200005a0 	.word	0x200005a0

080012f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b096      	sub	sp, #88	; 0x58
 80012f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	2244      	movs	r2, #68	; 0x44
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f011 fba9 	bl	8012a5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001308:	463b      	mov	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001316:	f44f 7000 	mov.w	r0, #512	; 0x200
 800131a:	f007 fd1b 	bl	8008d54 <HAL_PWREx_ControlVoltageScaling>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001324:	f000 fa68 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001328:	2310      	movs	r3, #16
 800132a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800132c:	2301      	movs	r3, #1
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001334:	2360      	movs	r3, #96	; 0x60
 8001336:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2302      	movs	r3, #2
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800133c:	2301      	movs	r3, #1
 800133e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001344:	2314      	movs	r3, #20
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001348:	2307      	movs	r3, #7
 800134a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800134c:	2302      	movs	r3, #2
 800134e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001350:	2302      	movs	r3, #2
 8001352:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4618      	mov	r0, r3
 800135a:	f007 fd61 	bl	8008e20 <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001364:	f000 fa48 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	230f      	movs	r3, #15
 800136a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136c:	2303      	movs	r3, #3
 800136e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001374:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001378:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	2102      	movs	r1, #2
 8001382:	4618      	mov	r0, r3
 8001384:	f008 f960 	bl	8009648 <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800138e:	f000 fa33 	bl	80017f8 <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3758      	adds	r7, #88	; 0x58
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b096      	sub	sp, #88	; 0x58
 800139e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2254      	movs	r2, #84	; 0x54
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f011 fb57 	bl	8012a5a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80013ac:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80013b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80013b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80013b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013bc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013be:	2301      	movs	r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013c2:	2301      	movs	r3, #1
 80013c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80013c6:	2318      	movs	r3, #24
 80013c8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013ca:	2307      	movs	r3, #7
 80013cc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013ce:	2302      	movs	r3, #2
 80013d0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80013d6:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80013da:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4618      	mov	r0, r3
 80013e0:	f008 fb56 	bl	8009a90 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80013ea:	f000 fa05 	bl	80017f8 <Error_Handler>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3758      	adds	r7, #88	; 0x58
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013fe:	463b      	mov	r3, r7
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
 800140c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <MX_ADC1_Init+0xdc>)
 8001410:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <MX_ADC1_Init+0xe0>)
 8001412:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001414:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <MX_ADC1_Init+0xdc>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <MX_ADC1_Init+0xdc>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001420:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <MX_ADC1_Init+0xdc>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <MX_ADC1_Init+0xdc>)
 8001428:	2201      	movs	r2, #1
 800142a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <MX_ADC1_Init+0xdc>)
 800142e:	2204      	movs	r2, #4
 8001430:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <MX_ADC1_Init+0xdc>)
 8001434:	2200      	movs	r2, #0
 8001436:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <MX_ADC1_Init+0xdc>)
 800143a:	2201      	movs	r2, #1
 800143c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800143e:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <MX_ADC1_Init+0xdc>)
 8001440:	2202      	movs	r2, #2
 8001442:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001444:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <MX_ADC1_Init+0xdc>)
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800144c:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <MX_ADC1_Init+0xdc>)
 800144e:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_ADC1_Init+0xdc>)
 8001456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_ADC1_Init+0xdc>)
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MX_ADC1_Init+0xdc>)
 8001466:	2200      	movs	r2, #0
 8001468:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_ADC1_Init+0xdc>)
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001472:	4818      	ldr	r0, [pc, #96]	; (80014d4 <MX_ADC1_Init+0xdc>)
 8001474:	f003 faac 	bl	80049d0 <HAL_ADC_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800147e:	f000 f9bb 	bl	80017f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_ADC1_Init+0xe4>)
 8001484:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001486:	2306      	movs	r3, #6
 8001488:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800148a:	2307      	movs	r3, #7
 800148c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800148e:	237f      	movs	r3, #127	; 0x7f
 8001490:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001492:	2304      	movs	r3, #4
 8001494:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149a:	463b      	mov	r3, r7
 800149c:	4619      	mov	r1, r3
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_ADC1_Init+0xdc>)
 80014a0:	f003 fe2e 	bl	8005100 <HAL_ADC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80014aa:	f000 f9a5 	bl	80017f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <MX_ADC1_Init+0xe8>)
 80014b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014b2:	230c      	movs	r3, #12
 80014b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b6:	463b      	mov	r3, r7
 80014b8:	4619      	mov	r1, r3
 80014ba:	4806      	ldr	r0, [pc, #24]	; (80014d4 <MX_ADC1_Init+0xdc>)
 80014bc:	f003 fe20 	bl	8005100 <HAL_ADC_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80014c6:	f000 f997 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000334 	.word	0x20000334
 80014d8:	50040000 	.word	0x50040000
 80014dc:	80000001 	.word	0x80000001
 80014e0:	c7520000 	.word	0xc7520000

080014e4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <MX_I2C3_Init+0x7c>)
 80014ea:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <MX_I2C3_Init+0x80>)
 80014ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100618;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <MX_I2C3_Init+0x7c>)
 80014f0:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <MX_I2C3_Init+0x84>)
 80014f2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <MX_I2C3_Init+0x7c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_I2C3_Init+0x7c>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_I2C3_Init+0x7c>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001506:	4b16      	ldr	r3, [pc, #88]	; (8001560 <MX_I2C3_Init+0x7c>)
 8001508:	2200      	movs	r2, #0
 800150a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_I2C3_Init+0x7c>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001512:	4b13      	ldr	r3, [pc, #76]	; (8001560 <MX_I2C3_Init+0x7c>)
 8001514:	2200      	movs	r2, #0
 8001516:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_I2C3_Init+0x7c>)
 800151a:	2200      	movs	r2, #0
 800151c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800151e:	4810      	ldr	r0, [pc, #64]	; (8001560 <MX_I2C3_Init+0x7c>)
 8001520:	f005 f9d8 	bl	80068d4 <HAL_I2C_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800152a:	f000 f965 	bl	80017f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800152e:	2100      	movs	r1, #0
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <MX_I2C3_Init+0x7c>)
 8001532:	f005 fde3 	bl	80070fc <HAL_I2CEx_ConfigAnalogFilter>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800153c:	f000 f95c 	bl	80017f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001540:	2100      	movs	r1, #0
 8001542:	4807      	ldr	r0, [pc, #28]	; (8001560 <MX_I2C3_Init+0x7c>)
 8001544:	f005 fe25 	bl	8007192 <HAL_I2CEx_ConfigDigitalFilter>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800154e:	f000 f953 	bl	80017f8 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8001552:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001556:	f005 fe69 	bl	800722c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200003e0 	.word	0x200003e0
 8001564:	40005c00 	.word	0x40005c00
 8001568:	00100618 	.word	0x00100618

0800156c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_LPUART1_UART_Init+0x50>)
 8001572:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <MX_LPUART1_UART_Init+0x54>)
 8001574:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_LPUART1_UART_Init+0x50>)
 8001578:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800157c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_LPUART1_UART_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <MX_LPUART1_UART_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_LPUART1_UART_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <MX_LPUART1_UART_Init+0x50>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_LPUART1_UART_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <MX_LPUART1_UART_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_LPUART1_UART_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <MX_LPUART1_UART_Init+0x50>)
 80015aa:	f009 f97d 	bl	800a8a8 <HAL_UART_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80015b4:	f000 f920 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000434 	.word	0x20000434
 80015c0:	40008000 	.word	0x40008000

080015c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_TIM2_Init+0x98>)
 80015e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <MX_TIM2_Init+0x98>)
 80015ec:	f240 128f 	movw	r2, #399	; 0x18f
 80015f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	; (800165c <MX_TIM2_Init+0x98>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <MX_TIM2_Init+0x98>)
 80015fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80015fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001600:	4b16      	ldr	r3, [pc, #88]	; (800165c <MX_TIM2_Init+0x98>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <MX_TIM2_Init+0x98>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800160c:	4813      	ldr	r0, [pc, #76]	; (800165c <MX_TIM2_Init+0x98>)
 800160e:	f008 fd27 	bl	800a060 <HAL_TIM_Base_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001618:	f000 f8ee 	bl	80017f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001620:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	4619      	mov	r1, r3
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <MX_TIM2_Init+0x98>)
 800162a:	f008 febf 	bl	800a3ac <HAL_TIM_ConfigClockSource>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001634:	f000 f8e0 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001638:	2320      	movs	r3, #32
 800163a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <MX_TIM2_Init+0x98>)
 8001646:	f009 f8ab 	bl	800a7a0 <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001650:	f000 f8d2 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	3720      	adds	r7, #32
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000504 	.word	0x20000504

08001660 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <MX_TIM7_Init+0x68>)
 8001672:	4a16      	ldr	r2, [pc, #88]	; (80016cc <MX_TIM7_Init+0x6c>)
 8001674:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000-1;
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_TIM7_Init+0x68>)
 8001678:	f242 720f 	movw	r2, #9999	; 0x270f
 800167c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_TIM7_Init+0x68>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8000-1;
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <MX_TIM7_Init+0x68>)
 8001686:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800168a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_TIM7_Init+0x68>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001692:	480d      	ldr	r0, [pc, #52]	; (80016c8 <MX_TIM7_Init+0x68>)
 8001694:	f008 fce4 	bl	800a060 <HAL_TIM_Base_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800169e:	f000 f8ab 	bl	80017f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	; (80016c8 <MX_TIM7_Init+0x68>)
 80016b0:	f009 f876 	bl	800a7a0 <HAL_TIMEx_MasterConfigSynchronization>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80016ba:	f000 f89d 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000550 	.word	0x20000550
 80016cc:	40001400 	.word	0x40001400

080016d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_DMA_Init+0x60>)
 80016d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016da:	4a15      	ldr	r2, [pc, #84]	; (8001730 <MX_DMA_Init+0x60>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6493      	str	r3, [r2, #72]	; 0x48
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_DMA_Init+0x60>)
 80016e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <MX_DMA_Init+0x60>)
 80016f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <MX_DMA_Init+0x60>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6493      	str	r3, [r2, #72]	; 0x48
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <MX_DMA_Init+0x60>)
 80016fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	200b      	movs	r0, #11
 800170c:	f004 fb25 	bl	8005d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001710:	200b      	movs	r0, #11
 8001712:	f004 fb3e 	bl	8005d92 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2045      	movs	r0, #69	; 0x45
 800171c:	f004 fb1d 	bl	8005d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001720:	2045      	movs	r0, #69	; 0x45
 8001722:	f004 fb36 	bl	8005d92 <HAL_NVIC_EnableIRQ>

}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000

08001734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174a:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <MX_GPIO_Init+0xbc>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	4a28      	ldr	r2, [pc, #160]	; (80017f0 <MX_GPIO_Init+0xbc>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <MX_GPIO_Init+0xbc>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <MX_GPIO_Init+0xbc>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <MX_GPIO_Init+0xbc>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <MX_GPIO_Init+0xbc>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <MX_GPIO_Init+0xbc>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	4a1c      	ldr	r2, [pc, #112]	; (80017f0 <MX_GPIO_Init+0xbc>)
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_GPIO_Init+0xbc>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2102      	movs	r1, #2
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f005 f86b 	bl	8006874 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800179e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80017a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	4619      	mov	r1, r3
 80017b4:	480f      	ldr	r0, [pc, #60]	; (80017f4 <MX_GPIO_Init+0xc0>)
 80017b6:	f004 fe29 	bl	800640c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017ba:	2302      	movs	r3, #2
 80017bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f004 fe1a 	bl	800640c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2028      	movs	r0, #40	; 0x28
 80017de:	f004 fabc 	bl	8005d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017e2:	2028      	movs	r0, #40	; 0x28
 80017e4:	f004 fad5 	bl	8005d92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017e8:	bf00      	nop
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	48000800 	.word	0x48000800

080017f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001800:	e7fe      	b.n	8001800 <Error_Handler+0x8>

08001802 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7fe fd30 	bl	8000270 <strlen>
 8001810:	4603      	mov	r3, r0
 8001812:	2b04      	cmp	r3, #4
 8001814:	d801      	bhi.n	800181a <gps_checksum+0x18>
 8001816:	2300      	movs	r3, #0
 8001818:	e038      	b.n	800188c <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7fe fd28 	bl	8000270 <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	3b04      	subs	r3, #4
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7fe fd1f 	bl	8000270 <strlen>
 8001832:	4603      	mov	r3, r0
 8001834:	3b03      	subs	r3, #3
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	e00a      	b.n	800185e <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	4053      	eors	r3, r2
 8001856:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	3301      	adds	r3, #1
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7fe fd06 	bl	8000270 <strlen>
 8001864:	4603      	mov	r3, r0
 8001866:	1f5a      	subs	r2, r3, #5
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	429a      	cmp	r2, r3
 800186c:	d8ec      	bhi.n	8001848 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 800186e:	f107 0308 	add.w	r3, r7, #8
 8001872:	2210      	movs	r2, #16
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f010 f916 	bl	8011aa8 <strtol>
 800187c:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	429a      	cmp	r2, r3
 8001884:	d101      	bne.n	800188a <gps_checksum+0x88>
        return 1;
 8001886:	2301      	movs	r3, #1
 8001888:	e000      	b.n	800188c <gps_checksum+0x8a>
    }
    else{
        return 0;
 800188a:	2300      	movs	r3, #0
    }
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b0b7      	sub	sp, #220	; 0xdc
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 80018a4:	f107 0320 	add.w	r3, r7, #32
 80018a8:	2264      	movs	r2, #100	; 0x64
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f011 f8d4 	bl	8012a5a <memset>
    char *marker = strtok(inputString, ",");
 80018b2:	49c2      	ldr	r1, [pc, #776]	; (8001bbc <nmea_GPGGA+0x328>)
 80018b4:	6838      	ldr	r0, [r7, #0]
 80018b6:	f011 f8eb 	bl	8012a90 <strtok>
 80018ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80018be:	e027      	b.n	8001910 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80018c0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80018c4:	f7fe fcd4 	bl	8000270 <strlen>
 80018c8:	4603      	mov	r3, r0
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 80018d0:	1c63      	adds	r3, r4, #1
 80018d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018d6:	4610      	mov	r0, r2
 80018d8:	f00f f92c 	bl	8010b34 <malloc>
 80018dc:	4603      	mov	r3, r0
 80018de:	461a      	mov	r2, r3
 80018e0:	00a3      	lsls	r3, r4, #2
 80018e2:	33d8      	adds	r3, #216	; 0xd8
 80018e4:	443b      	add	r3, r7
 80018e6:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 80018ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018ee:	3b01      	subs	r3, #1
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	33d8      	adds	r3, #216	; 0xd8
 80018f4:	443b      	add	r3, r7
 80018f6:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80018fa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80018fe:	4618      	mov	r0, r3
 8001900:	f011 f9bf 	bl	8012c82 <strcpy>
        marker = strtok(NULL, ",");
 8001904:	49ad      	ldr	r1, [pc, #692]	; (8001bbc <nmea_GPGGA+0x328>)
 8001906:	2000      	movs	r0, #0
 8001908:	f011 f8c2 	bl	8012a90 <strtok>
 800190c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001910:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1d3      	bne.n	80018c0 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	332c      	adds	r3, #44	; 0x2c
 800192c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f011 f9a6 	bl	8012c82 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001936:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800193a:	2b53      	cmp	r3, #83	; 0x53
 800193c:	d004      	beq.n	8001948 <nmea_GPGGA+0xb4>
 800193e:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001942:	2b4e      	cmp	r3, #78	; 0x4e
 8001944:	f040 8159 	bne.w	8001bfa <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800194e:	e010      	b.n	8001972 <nmea_GPGGA+0xde>
 8001950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001952:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001956:	4413      	add	r3, r2
 8001958:	7819      	ldrb	r1, [r3, #0]
 800195a:	f107 021c 	add.w	r2, r7, #28
 800195e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001962:	4413      	add	r3, r2
 8001964:	460a      	mov	r2, r1
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800196c:	3301      	adds	r3, #1
 800196e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001972:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001976:	2b01      	cmp	r3, #1
 8001978:	ddea      	ble.n	8001950 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 800197a:	2300      	movs	r3, #0
 800197c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001980:	e011      	b.n	80019a6 <nmea_GPGGA+0x112>
 8001982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001984:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001988:	3302      	adds	r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	7819      	ldrb	r1, [r3, #0]
 800198e:	f107 0214 	add.w	r2, r7, #20
 8001992:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001996:	4413      	add	r3, r2
 8001998:	460a      	mov	r2, r1
 800199a:	701a      	strb	r2, [r3, #0]
 800199c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019a0:	3301      	adds	r3, #1
 80019a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80019a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80019aa:	2b05      	cmp	r3, #5
 80019ac:	dde9      	ble.n	8001982 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	220a      	movs	r2, #10
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f010 f876 	bl	8011aa8 <strtol>
 80019bc:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f00f ff84 	bl	80118d4 <strtof>
 80019cc:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80019d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019dc:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 80019e0:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001bc0 <nmea_GPGGA+0x32c>
 80019e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ec:	ee17 0a90 	vmov	r0, s15
 80019f0:	f7fe fdaa 	bl	8000548 <__aeabi_f2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 80019fc:	2300      	movs	r3, #0
 80019fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001a02:	e010      	b.n	8001a26 <nmea_GPGGA+0x192>
 8001a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a0a:	4413      	add	r3, r2
 8001a0c:	7819      	ldrb	r1, [r3, #0]
 8001a0e:	f107 0210 	add.w	r2, r7, #16
 8001a12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a16:	4413      	add	r3, r2
 8001a18:	460a      	mov	r2, r1
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a20:	3301      	adds	r3, #1
 8001a22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001a26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	ddea      	ble.n	8001a04 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001a34:	e011      	b.n	8001a5a <nmea_GPGGA+0x1c6>
 8001a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a3c:	3303      	adds	r3, #3
 8001a3e:	4413      	add	r3, r2
 8001a40:	7819      	ldrb	r1, [r3, #0]
 8001a42:	f107 0208 	add.w	r2, r7, #8
 8001a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a4a:	4413      	add	r3, r2
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a54:	3301      	adds	r3, #1
 8001a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001a5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	dde9      	ble.n	8001a36 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001a62:	f107 0310 	add.w	r3, r7, #16
 8001a66:	220a      	movs	r2, #10
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f010 f81c 	bl	8011aa8 <strtol>
 8001a70:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f00f ff2a 	bl	80118d4 <strtof>
 8001a80:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a90:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001a94:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001bc0 <nmea_GPGGA+0x32c>
 8001a98:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa0:	ee17 0a90 	vmov	r0, s15
 8001aa4:	f7fe fd50 	bl	8000548 <__aeabi_f2d>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001abc:	f7ff f804 	bl	8000ac8 <__aeabi_dcmpeq>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d176      	bne.n	8001bb4 <nmea_GPGGA+0x320>
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001ad2:	f7fe fff9 	bl	8000ac8 <__aeabi_dcmpeq>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d16b      	bne.n	8001bb4 <nmea_GPGGA+0x320>
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <nmea_GPGGA+0x330>)
 8001ae2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001ae6:	f7fe fff9 	bl	8000adc <__aeabi_dcmplt>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d061      	beq.n	8001bb4 <nmea_GPGGA+0x320>
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <nmea_GPGGA+0x334>)
 8001af6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001afa:	f7fe ffef 	bl	8000adc <__aeabi_dcmplt>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d057      	beq.n	8001bb4 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001b0a:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001b14:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001b1c:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001b26:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8001b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00f fed1 	bl	80118d4 <strtof>
 8001b32:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8001b36:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001b3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b42:	d102      	bne.n	8001b4a <nmea_GPGGA+0x2b6>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	e001      	b.n	8001b4e <nmea_GPGGA+0x2ba>
 8001b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8001b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b54:	220a      	movs	r2, #10
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f00f ffa5 	bl	8011aa8 <strtol>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8001b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b66:	220a      	movs	r2, #10
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f00f ff9c 	bl	8011aa8 <strtol>
 8001b70:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8001b74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bfcc      	ite	gt
 8001b7c:	2301      	movgt	r3, #1
 8001b7e:	2300      	movle	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f00f fea1 	bl	80118d4 <strtof>
 8001b92:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001b96:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	d102      	bne.n	8001baa <nmea_GPGGA+0x316>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	e001      	b.n	8001bae <nmea_GPGGA+0x31a>
 8001baa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001bb2:	e022      	b.n	8001bfa <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001bba:	e016      	b.n	8001bea <nmea_GPGGA+0x356>
 8001bbc:	080168d8 	.word	0x080168d8
 8001bc0:	42700000 	.word	0x42700000
 8001bc4:	40568000 	.word	0x40568000
 8001bc8:	40668000 	.word	0x40668000
 8001bcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	33d8      	adds	r3, #216	; 0xd8
 8001bd4:	443b      	add	r3, r7
 8001bd6:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f00e ffb2 	bl	8010b44 <free>
 8001be0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001be4:	3301      	adds	r3, #1
 8001be6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001bea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	dbea      	blt.n	8001bcc <nmea_GPGGA+0x338>
            return 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e019      	b.n	8001c2e <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c00:	e00e      	b.n	8001c20 <nmea_GPGGA+0x38c>
 8001c02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	33d8      	adds	r3, #216	; 0xd8
 8001c0a:	443b      	add	r3, r7
 8001c0c:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f00e ff97 	bl	8010b44 <free>
 8001c16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001c24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	dbea      	blt.n	8001c02 <nmea_GPGGA+0x36e>
    return 1;
 8001c2c:	2301      	movs	r3, #1
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	37dc      	adds	r7, #220	; 0xdc
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd90      	pop	{r4, r7, pc}
 8001c36:	bf00      	nop

08001c38 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b0a3      	sub	sp, #140	; 0x8c
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	2264      	movs	r2, #100	; 0x64
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f010 ff02 	bl	8012a5a <memset>
    char *marker = strtok(inputString, ",");
 8001c56:	493b      	ldr	r1, [pc, #236]	; (8001d44 <nmea_GPGSA+0x10c>)
 8001c58:	6838      	ldr	r0, [r7, #0]
 8001c5a:	f010 ff19 	bl	8012a90 <strtok>
 8001c5e:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001c62:	e027      	b.n	8001cb4 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001c64:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001c68:	f7fe fb02 	bl	8000270 <strlen>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001c74:	1c63      	adds	r3, r4, #1
 8001c76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	f00e ff5a 	bl	8010b34 <malloc>
 8001c80:	4603      	mov	r3, r0
 8001c82:	461a      	mov	r2, r3
 8001c84:	00a3      	lsls	r3, r4, #2
 8001c86:	3388      	adds	r3, #136	; 0x88
 8001c88:	443b      	add	r3, r7
 8001c8a:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c92:	3b01      	subs	r3, #1
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	3388      	adds	r3, #136	; 0x88
 8001c98:	443b      	add	r3, r7
 8001c9a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001c9e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f010 ffed 	bl	8012c82 <strcpy>
        marker = strtok(NULL, ",");
 8001ca8:	4926      	ldr	r1, [pc, #152]	; (8001d44 <nmea_GPGSA+0x10c>)
 8001caa:	2000      	movs	r0, #0
 8001cac:	f010 fef0 	bl	8012a90 <strtok>
 8001cb0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1d3      	bne.n	8001c64 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	220a      	movs	r2, #10
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f00f fef0 	bl	8011aa8 <strtol>
 8001cc8:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	bfcc      	ite	gt
 8001cd0:	2301      	movgt	r3, #1
 8001cd2:	2300      	movle	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ce4:	e00e      	b.n	8001d04 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	3388      	adds	r3, #136	; 0x88
 8001cec:	443b      	add	r3, r7
 8001cee:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001cf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001cfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d00:	3301      	adds	r3, #1
 8001d02:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d06:	2b0e      	cmp	r3, #14
 8001d08:	dded      	ble.n	8001ce6 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001d10:	2300      	movs	r3, #0
 8001d12:	677b      	str	r3, [r7, #116]	; 0x74
 8001d14:	e00b      	b.n	8001d2e <nmea_GPGSA+0xf6>
 8001d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	3388      	adds	r3, #136	; 0x88
 8001d1c:	443b      	add	r3, r7
 8001d1e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f00e ff0e 	bl	8010b44 <free>
 8001d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	677b      	str	r3, [r7, #116]	; 0x74
 8001d2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dbee      	blt.n	8001d16 <nmea_GPGSA+0xde>
    return 1;
 8001d38:	2301      	movs	r3, #1
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	378c      	adds	r7, #140	; 0x8c
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd90      	pop	{r4, r7, pc}
 8001d42:	bf00      	nop
 8001d44:	080168d8 	.word	0x080168d8

08001d48 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b0a1      	sub	sp, #132	; 0x84
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	2264      	movs	r2, #100	; 0x64
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f010 fe7b 	bl	8012a5a <memset>
    char *marker = strtok(inputString, ",");
 8001d64:	4930      	ldr	r1, [pc, #192]	; (8001e28 <nmea_GNRMC+0xe0>)
 8001d66:	6838      	ldr	r0, [r7, #0]
 8001d68:	f010 fe92 	bl	8012a90 <strtok>
 8001d6c:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001d6e:	e021      	b.n	8001db4 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001d70:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001d72:	f7fe fa7d 	bl	8000270 <strlen>
 8001d76:	4603      	mov	r3, r0
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001d7c:	1c63      	adds	r3, r4, #1
 8001d7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d80:	4610      	mov	r0, r2
 8001d82:	f00e fed7 	bl	8010b34 <malloc>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
 8001d8a:	00a3      	lsls	r3, r4, #2
 8001d8c:	3380      	adds	r3, #128	; 0x80
 8001d8e:	443b      	add	r3, r7
 8001d90:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8001d94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d96:	3b01      	subs	r3, #1
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	3380      	adds	r3, #128	; 0x80
 8001d9c:	443b      	add	r3, r7
 8001d9e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001da2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001da4:	4618      	mov	r0, r3
 8001da6:	f010 ff6c 	bl	8012c82 <strcpy>
        marker = strtok(NULL, ",");
 8001daa:	491f      	ldr	r1, [pc, #124]	; (8001e28 <nmea_GNRMC+0xe0>)
 8001dac:	2000      	movs	r0, #0
 8001dae:	f010 fe6f 	bl	8012a90 <strtok>
 8001db2:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1da      	bne.n	8001d70 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8001dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f00f fd88 	bl	80118d4 <strtof>
 8001dc4:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8001dc8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001dca:	f7fe fbbd 	bl	8000548 <__aeabi_f2d>
 8001dce:	a314      	add	r3, pc, #80	; (adr r3, 8001e20 <nmea_GNRMC+0xd8>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe fd3a 	bl	800084c <__aeabi_ddiv>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7fe ff02 	bl	8000be8 <__aeabi_d2f>
 8001de4:	4602      	mov	r2, r0
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8001dea:	2300      	movs	r3, #0
 8001dec:	677b      	str	r3, [r7, #116]	; 0x74
 8001dee:	e00b      	b.n	8001e08 <nmea_GNRMC+0xc0>
 8001df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	3380      	adds	r3, #128	; 0x80
 8001df6:	443b      	add	r3, r7
 8001df8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f00e fea1 	bl	8010b44 <free>
 8001e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e04:	3301      	adds	r3, #1
 8001e06:	677b      	str	r3, [r7, #116]	; 0x74
 8001e08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001e0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	dbef      	blt.n	8001df0 <nmea_GNRMC+0xa8>
    return 1;
 8001e10:	2301      	movs	r3, #1
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3784      	adds	r7, #132	; 0x84
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd90      	pop	{r4, r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	f3af 8000 	nop.w
 8001e20:	be76c8b4 	.word	0xbe76c8b4
 8001e24:	3fff1a9f 	.word	0x3fff1a9f
 8001e28:	080168d8 	.word	0x080168d8

08001e2c <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8001e36:	223c      	movs	r2, #60	; 0x3c
 8001e38:	2100      	movs	r1, #0
 8001e3a:	484e      	ldr	r0, [pc, #312]	; (8001f74 <nmea_parse+0x148>)
 8001e3c:	f010 fe0d 	bl	8012a5a <memset>
    char * token = strtok(buffer, "$");
 8001e40:	494d      	ldr	r1, [pc, #308]	; (8001f78 <nmea_parse+0x14c>)
 8001e42:	6838      	ldr	r0, [r7, #0]
 8001e44:	f010 fe24 	bl	8012a90 <strtok>
 8001e48:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8001e4e:	e01d      	b.n	8001e8c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8001e50:	6978      	ldr	r0, [r7, #20]
 8001e52:	f7fe fa0d 	bl	8000270 <strlen>
 8001e56:	4603      	mov	r3, r0
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	693c      	ldr	r4, [r7, #16]
 8001e5c:	1c63      	adds	r3, r4, #1
 8001e5e:	613b      	str	r3, [r7, #16]
 8001e60:	4610      	mov	r0, r2
 8001e62:	f00e fe67 	bl	8010b34 <malloc>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b42      	ldr	r3, [pc, #264]	; (8001f74 <nmea_parse+0x148>)
 8001e6c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	4a3f      	ldr	r2, [pc, #252]	; (8001f74 <nmea_parse+0x148>)
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	6979      	ldr	r1, [r7, #20]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f010 ff00 	bl	8012c82 <strcpy>
        token = strtok(NULL, "$");
 8001e82:	493d      	ldr	r1, [pc, #244]	; (8001f78 <nmea_parse+0x14c>)
 8001e84:	2000      	movs	r0, #0
 8001e86:	f010 fe03 	bl	8012a90 <strtok>
 8001e8a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1de      	bne.n	8001e50 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	e052      	b.n	8001f3e <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8001e98:	4a36      	ldr	r2, [pc, #216]	; (8001f74 <nmea_parse+0x148>)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea0:	4936      	ldr	r1, [pc, #216]	; (8001f7c <nmea_parse+0x150>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f010 fe50 	bl	8012b48 <strstr>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d044      	beq.n	8001f38 <nmea_parse+0x10c>
 8001eae:	4a31      	ldr	r2, [pc, #196]	; (8001f74 <nmea_parse+0x148>)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fca3 	bl	8001802 <gps_checksum>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d03a      	beq.n	8001f38 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 8001ec2:	4a2c      	ldr	r2, [pc, #176]	; (8001f74 <nmea_parse+0x148>)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eca:	492d      	ldr	r1, [pc, #180]	; (8001f80 <nmea_parse+0x154>)
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f010 fe3b 	bl	8012b48 <strstr>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d008      	beq.n	8001eea <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8001ed8:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <nmea_parse+0x148>)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ff30 	bl	8001d48 <nmea_GNRMC>
 8001ee8:	e026      	b.n	8001f38 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8001eea:	4a22      	ldr	r2, [pc, #136]	; (8001f74 <nmea_parse+0x148>)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	4924      	ldr	r1, [pc, #144]	; (8001f84 <nmea_parse+0x158>)
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f010 fe27 	bl	8012b48 <strstr>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d008      	beq.n	8001f12 <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8001f00:	4a1c      	ldr	r2, [pc, #112]	; (8001f74 <nmea_parse+0x148>)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fe94 	bl	8001c38 <nmea_GPGSA>
 8001f10:	e012      	b.n	8001f38 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 8001f12:	4a18      	ldr	r2, [pc, #96]	; (8001f74 <nmea_parse+0x148>)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1a:	491b      	ldr	r1, [pc, #108]	; (8001f88 <nmea_parse+0x15c>)
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f010 fe13 	bl	8012b48 <strstr>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8001f28:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <nmea_parse+0x148>)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f30:	4619      	mov	r1, r3
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff fcae 	bl	8001894 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	dba8      	blt.n	8001e98 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	e009      	b.n	8001f60 <nmea_parse+0x134>
 8001f4c:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <nmea_parse+0x148>)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00e fdf5 	bl	8010b44 <free>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dbf1      	blt.n	8001f4c <nmea_parse+0x120>


}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	2000083c 	.word	0x2000083c
 8001f78:	080168dc 	.word	0x080168dc
 8001f7c:	080168e0 	.word	0x080168e0
 8001f80:	080168e4 	.word	0x080168e4
 8001f84:	080168ec 	.word	0x080168ec
 8001f88:	080168f4 	.word	0x080168f4

08001f8c <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy


void ssd1306_Reset(void) {
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
	...

08001f9c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af04      	add	r7, sp, #16
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	9302      	str	r3, [sp, #8]
 8001fac:	2301      	movs	r3, #1
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	1dfb      	adds	r3, r7, #7
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2178      	movs	r1, #120	; 0x78
 8001fba:	4803      	ldr	r0, [pc, #12]	; (8001fc8 <ssd1306_WriteCommand+0x2c>)
 8001fbc:	f004 fd26 	bl	8006a0c <HAL_I2C_Mem_Write>
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200003e0 	.word	0x200003e0

08001fcc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af04      	add	r7, sp, #16
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	f04f 32ff 	mov.w	r2, #4294967295
 8001fde:	9202      	str	r2, [sp, #8]
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	2240      	movs	r2, #64	; 0x40
 8001fea:	2178      	movs	r1, #120	; 0x78
 8001fec:	4803      	ldr	r0, [pc, #12]	; (8001ffc <ssd1306_WriteData+0x30>)
 8001fee:	f004 fd0d 	bl	8006a0c <HAL_I2C_Mem_Write>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	200003e0 	.word	0x200003e0

08002000 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002004:	f7ff ffc2 	bl	8001f8c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002008:	2064      	movs	r0, #100	; 0x64
 800200a:	f002 fae3 	bl	80045d4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800200e:	2000      	movs	r0, #0
 8002010:	f000 fba0 	bl	8002754 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002014:	2020      	movs	r0, #32
 8002016:	f7ff ffc1 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800201a:	2000      	movs	r0, #0
 800201c:	f7ff ffbe 	bl	8001f9c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002020:	20b0      	movs	r0, #176	; 0xb0
 8002022:	f7ff ffbb 	bl	8001f9c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002026:	20c8      	movs	r0, #200	; 0xc8
 8002028:	f7ff ffb8 	bl	8001f9c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800202c:	2000      	movs	r0, #0
 800202e:	f7ff ffb5 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002032:	2010      	movs	r0, #16
 8002034:	f7ff ffb2 	bl	8001f9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002038:	2040      	movs	r0, #64	; 0x40
 800203a:	f7ff ffaf 	bl	8001f9c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800203e:	20ff      	movs	r0, #255	; 0xff
 8002040:	f000 fb75 	bl	800272e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002044:	20a1      	movs	r0, #161	; 0xa1
 8002046:	f7ff ffa9 	bl	8001f9c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800204a:	20a6      	movs	r0, #166	; 0xa6
 800204c:	f7ff ffa6 	bl	8001f9c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002050:	20a8      	movs	r0, #168	; 0xa8
 8002052:	f7ff ffa3 	bl	8001f9c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002056:	203f      	movs	r0, #63	; 0x3f
 8002058:	f7ff ffa0 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800205c:	20a4      	movs	r0, #164	; 0xa4
 800205e:	f7ff ff9d 	bl	8001f9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002062:	20d3      	movs	r0, #211	; 0xd3
 8002064:	f7ff ff9a 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002068:	2000      	movs	r0, #0
 800206a:	f7ff ff97 	bl	8001f9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800206e:	20d5      	movs	r0, #213	; 0xd5
 8002070:	f7ff ff94 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002074:	20f0      	movs	r0, #240	; 0xf0
 8002076:	f7ff ff91 	bl	8001f9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800207a:	20d9      	movs	r0, #217	; 0xd9
 800207c:	f7ff ff8e 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002080:	2022      	movs	r0, #34	; 0x22
 8002082:	f7ff ff8b 	bl	8001f9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002086:	20da      	movs	r0, #218	; 0xda
 8002088:	f7ff ff88 	bl	8001f9c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800208c:	2012      	movs	r0, #18
 800208e:	f7ff ff85 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002092:	20db      	movs	r0, #219	; 0xdb
 8002094:	f7ff ff82 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002098:	2020      	movs	r0, #32
 800209a:	f7ff ff7f 	bl	8001f9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800209e:	208d      	movs	r0, #141	; 0x8d
 80020a0:	f7ff ff7c 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80020a4:	2014      	movs	r0, #20
 80020a6:	f7ff ff79 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80020aa:	2001      	movs	r0, #1
 80020ac:	f000 fb52 	bl	8002754 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f000 f80f 	bl	80020d4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80020b6:	f000 f825 	bl	8002104 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <ssd1306_Init+0xd0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <ssd1306_Init+0xd0>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80020c6:	4b02      	ldr	r3, [pc, #8]	; (80020d0 <ssd1306_Init+0xd0>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	711a      	strb	r2, [r3, #4]
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000c78 	.word	0x20000c78

080020d4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <ssd1306_Fill+0x14>
 80020e4:	2300      	movs	r3, #0
 80020e6:	e000      	b.n	80020ea <ssd1306_Fill+0x16>
 80020e8:	23ff      	movs	r3, #255	; 0xff
 80020ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ee:	4619      	mov	r1, r3
 80020f0:	4803      	ldr	r0, [pc, #12]	; (8002100 <ssd1306_Fill+0x2c>)
 80020f2:	f010 fcb2 	bl	8012a5a <memset>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000878 	.word	0x20000878

08002104 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800210a:	2300      	movs	r3, #0
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	e016      	b.n	800213e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	3b50      	subs	r3, #80	; 0x50
 8002114:	b2db      	uxtb	r3, r3
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff40 	bl	8001f9c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800211c:	2000      	movs	r0, #0
 800211e:	f7ff ff3d 	bl	8001f9c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002122:	2010      	movs	r0, #16
 8002124:	f7ff ff3a 	bl	8001f9c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	01db      	lsls	r3, r3, #7
 800212c:	4a08      	ldr	r2, [pc, #32]	; (8002150 <ssd1306_UpdateScreen+0x4c>)
 800212e:	4413      	add	r3, r2
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff4a 	bl	8001fcc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	3301      	adds	r3, #1
 800213c:	71fb      	strb	r3, [r7, #7]
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	2b07      	cmp	r3, #7
 8002142:	d9e5      	bls.n	8002110 <ssd1306_UpdateScreen+0xc>
    }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000878 	.word	0x20000878

08002154 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
 800215e:	460b      	mov	r3, r1
 8002160:	71bb      	strb	r3, [r7, #6]
 8002162:	4613      	mov	r3, r2
 8002164:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	db3d      	blt.n	80021ea <ssd1306_DrawPixel+0x96>
 800216e:	79bb      	ldrb	r3, [r7, #6]
 8002170:	2b3f      	cmp	r3, #63	; 0x3f
 8002172:	d83a      	bhi.n	80021ea <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002174:	797b      	ldrb	r3, [r7, #5]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d11a      	bne.n	80021b0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800217a:	79fa      	ldrb	r2, [r7, #7]
 800217c:	79bb      	ldrb	r3, [r7, #6]
 800217e:	08db      	lsrs	r3, r3, #3
 8002180:	b2d8      	uxtb	r0, r3
 8002182:	4603      	mov	r3, r0
 8002184:	01db      	lsls	r3, r3, #7
 8002186:	4413      	add	r3, r2
 8002188:	4a1b      	ldr	r2, [pc, #108]	; (80021f8 <ssd1306_DrawPixel+0xa4>)
 800218a:	5cd3      	ldrb	r3, [r2, r3]
 800218c:	b25a      	sxtb	r2, r3
 800218e:	79bb      	ldrb	r3, [r7, #6]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	2101      	movs	r1, #1
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	b25b      	sxtb	r3, r3
 800219c:	4313      	orrs	r3, r2
 800219e:	b259      	sxtb	r1, r3
 80021a0:	79fa      	ldrb	r2, [r7, #7]
 80021a2:	4603      	mov	r3, r0
 80021a4:	01db      	lsls	r3, r3, #7
 80021a6:	4413      	add	r3, r2
 80021a8:	b2c9      	uxtb	r1, r1
 80021aa:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <ssd1306_DrawPixel+0xa4>)
 80021ac:	54d1      	strb	r1, [r2, r3]
 80021ae:	e01d      	b.n	80021ec <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80021b0:	79fa      	ldrb	r2, [r7, #7]
 80021b2:	79bb      	ldrb	r3, [r7, #6]
 80021b4:	08db      	lsrs	r3, r3, #3
 80021b6:	b2d8      	uxtb	r0, r3
 80021b8:	4603      	mov	r3, r0
 80021ba:	01db      	lsls	r3, r3, #7
 80021bc:	4413      	add	r3, r2
 80021be:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <ssd1306_DrawPixel+0xa4>)
 80021c0:	5cd3      	ldrb	r3, [r2, r3]
 80021c2:	b25a      	sxtb	r2, r3
 80021c4:	79bb      	ldrb	r3, [r7, #6]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	2101      	movs	r1, #1
 80021cc:	fa01 f303 	lsl.w	r3, r1, r3
 80021d0:	b25b      	sxtb	r3, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	4013      	ands	r3, r2
 80021d8:	b259      	sxtb	r1, r3
 80021da:	79fa      	ldrb	r2, [r7, #7]
 80021dc:	4603      	mov	r3, r0
 80021de:	01db      	lsls	r3, r3, #7
 80021e0:	4413      	add	r3, r2
 80021e2:	b2c9      	uxtb	r1, r1
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <ssd1306_DrawPixel+0xa4>)
 80021e6:	54d1      	strb	r1, [r2, r3]
 80021e8:	e000      	b.n	80021ec <ssd1306_DrawPixel+0x98>
        return;
 80021ea:	bf00      	nop
    }
}
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000878 	.word	0x20000878

080021fc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	4604      	mov	r4, r0
 8002204:	1d38      	adds	r0, r7, #4
 8002206:	e880 0006 	stmia.w	r0, {r1, r2}
 800220a:	461a      	mov	r2, r3
 800220c:	4623      	mov	r3, r4
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	4613      	mov	r3, r2
 8002212:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b1f      	cmp	r3, #31
 8002218:	d902      	bls.n	8002220 <ssd1306_WriteChar+0x24>
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	2b7e      	cmp	r3, #126	; 0x7e
 800221e:	d901      	bls.n	8002224 <ssd1306_WriteChar+0x28>
        return 0;
 8002220:	2300      	movs	r3, #0
 8002222:	e06d      	b.n	8002300 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002224:	4b38      	ldr	r3, [pc, #224]	; (8002308 <ssd1306_WriteChar+0x10c>)
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	793b      	ldrb	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	2b80      	cmp	r3, #128	; 0x80
 8002230:	dc06      	bgt.n	8002240 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002232:	4b35      	ldr	r3, [pc, #212]	; (8002308 <ssd1306_WriteChar+0x10c>)
 8002234:	885b      	ldrh	r3, [r3, #2]
 8002236:	461a      	mov	r2, r3
 8002238:	797b      	ldrb	r3, [r7, #5]
 800223a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800223c:	2b40      	cmp	r3, #64	; 0x40
 800223e:	dd01      	ble.n	8002244 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002240:	2300      	movs	r3, #0
 8002242:	e05d      	b.n	8002300 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	e04c      	b.n	80022e4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	7bfb      	ldrb	r3, [r7, #15]
 800224e:	3b20      	subs	r3, #32
 8002250:	7979      	ldrb	r1, [r7, #5]
 8002252:	fb01 f303 	mul.w	r3, r1, r3
 8002256:	4619      	mov	r1, r3
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	440b      	add	r3, r1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	e034      	b.n	80022d4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d012      	beq.n	80022a0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800227a:	4b23      	ldr	r3, [pc, #140]	; (8002308 <ssd1306_WriteChar+0x10c>)
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	4413      	add	r3, r2
 8002286:	b2d8      	uxtb	r0, r3
 8002288:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <ssd1306_WriteChar+0x10c>)
 800228a:	885b      	ldrh	r3, [r3, #2]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	4413      	add	r3, r2
 8002294:	b2db      	uxtb	r3, r3
 8002296:	7bba      	ldrb	r2, [r7, #14]
 8002298:	4619      	mov	r1, r3
 800229a:	f7ff ff5b 	bl	8002154 <ssd1306_DrawPixel>
 800229e:	e016      	b.n	80022ce <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <ssd1306_WriteChar+0x10c>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	b2d8      	uxtb	r0, r3
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <ssd1306_WriteChar+0x10c>)
 80022b0:	885b      	ldrh	r3, [r3, #2]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	b2d9      	uxtb	r1, r3
 80022bc:	7bbb      	ldrb	r3, [r7, #14]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bf0c      	ite	eq
 80022c2:	2301      	moveq	r3, #1
 80022c4:	2300      	movne	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	f7ff ff43 	bl	8002154 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	793b      	ldrb	r3, [r7, #4]
 80022d6:	461a      	mov	r2, r3
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	4293      	cmp	r3, r2
 80022dc:	d3c5      	bcc.n	800226a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3301      	adds	r3, #1
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	797b      	ldrb	r3, [r7, #5]
 80022e6:	461a      	mov	r2, r3
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d3ad      	bcc.n	800224a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <ssd1306_WriteChar+0x10c>)
 80022f0:	881a      	ldrh	r2, [r3, #0]
 80022f2:	793b      	ldrb	r3, [r7, #4]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	4413      	add	r3, r2
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	4b03      	ldr	r3, [pc, #12]	; (8002308 <ssd1306_WriteChar+0x10c>)
 80022fc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3724      	adds	r7, #36	; 0x24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd90      	pop	{r4, r7, pc}
 8002308:	20000c78 	.word	0x20000c78

0800230c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	1d38      	adds	r0, r7, #4
 8002316:	e880 0006 	stmia.w	r0, {r1, r2}
 800231a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800231c:	e012      	b.n	8002344 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	7818      	ldrb	r0, [r3, #0]
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	1d3a      	adds	r2, r7, #4
 8002326:	ca06      	ldmia	r2, {r1, r2}
 8002328:	f7ff ff68 	bl	80021fc <ssd1306_WriteChar>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d002      	beq.n	800233e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	e008      	b.n	8002350 <ssd1306_WriteString+0x44>
        }
        str++;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	3301      	adds	r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1e8      	bne.n	800231e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	781b      	ldrb	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	460a      	mov	r2, r1
 8002362:	71fb      	strb	r3, [r7, #7]
 8002364:	4613      	mov	r3, r2
 8002366:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	b29a      	uxth	r2, r3
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <ssd1306_SetCursor+0x2c>)
 800236e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002370:	79bb      	ldrb	r3, [r7, #6]
 8002372:	b29a      	uxth	r2, r3
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <ssd1306_SetCursor+0x2c>)
 8002376:	805a      	strh	r2, [r3, #2]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	20000c78 	.word	0x20000c78

08002388 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	4604      	mov	r4, r0
 8002390:	4608      	mov	r0, r1
 8002392:	4611      	mov	r1, r2
 8002394:	461a      	mov	r2, r3
 8002396:	4623      	mov	r3, r4
 8002398:	71fb      	strb	r3, [r7, #7]
 800239a:	4603      	mov	r3, r0
 800239c:	71bb      	strb	r3, [r7, #6]
 800239e:	460b      	mov	r3, r1
 80023a0:	717b      	strb	r3, [r7, #5]
 80023a2:	4613      	mov	r3, r2
 80023a4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80023a6:	797a      	ldrb	r2, [r7, #5]
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bfb8      	it	lt
 80023b0:	425b      	neglt	r3, r3
 80023b2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80023b4:	793a      	ldrb	r2, [r7, #4]
 80023b6:	79bb      	ldrb	r3, [r7, #6]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	bfb8      	it	lt
 80023be:	425b      	neglt	r3, r3
 80023c0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80023c2:	79fa      	ldrb	r2, [r7, #7]
 80023c4:	797b      	ldrb	r3, [r7, #5]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d201      	bcs.n	80023ce <ssd1306_Line+0x46>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e001      	b.n	80023d2 <ssd1306_Line+0x4a>
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
 80023d2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80023d4:	79ba      	ldrb	r2, [r7, #6]
 80023d6:	793b      	ldrb	r3, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d201      	bcs.n	80023e0 <ssd1306_Line+0x58>
 80023dc:	2301      	movs	r3, #1
 80023de:	e001      	b.n	80023e4 <ssd1306_Line+0x5c>
 80023e0:	f04f 33ff 	mov.w	r3, #4294967295
 80023e4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80023ee:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80023f2:	7939      	ldrb	r1, [r7, #4]
 80023f4:	797b      	ldrb	r3, [r7, #5]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff feac 	bl	8002154 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80023fc:	e024      	b.n	8002448 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80023fe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002402:	79b9      	ldrb	r1, [r7, #6]
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fea4 	bl	8002154 <ssd1306_DrawPixel>
        error2 = error * 2;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	425b      	negs	r3, r3
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	429a      	cmp	r2, r3
 800241a:	dd08      	ble.n	800242e <ssd1306_Line+0xa6>
            error -= deltaY;
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	4413      	add	r3, r2
 800242c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	429a      	cmp	r2, r3
 8002434:	da08      	bge.n	8002448 <ssd1306_Line+0xc0>
            error += deltaX;
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	4413      	add	r3, r2
 800243c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	79bb      	ldrb	r3, [r7, #6]
 8002444:	4413      	add	r3, r2
 8002446:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	797b      	ldrb	r3, [r7, #5]
 800244c:	429a      	cmp	r2, r3
 800244e:	d1d6      	bne.n	80023fe <ssd1306_Line+0x76>
 8002450:	79ba      	ldrb	r2, [r7, #6]
 8002452:	793b      	ldrb	r3, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	d1d2      	bne.n	80023fe <ssd1306_Line+0x76>
        }
    }
    return;
 8002458:	bf00      	nop
}
 800245a:	3724      	adds	r7, #36	; 0x24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd90      	pop	{r4, r7, pc}

08002460 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
 8002466:	4604      	mov	r4, r0
 8002468:	4608      	mov	r0, r1
 800246a:	4611      	mov	r1, r2
 800246c:	461a      	mov	r2, r3
 800246e:	4623      	mov	r3, r4
 8002470:	71fb      	strb	r3, [r7, #7]
 8002472:	4603      	mov	r3, r0
 8002474:	71bb      	strb	r3, [r7, #6]
 8002476:	460b      	mov	r3, r1
 8002478:	717b      	strb	r3, [r7, #5]
 800247a:	4613      	mov	r3, r2
 800247c:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 800247e:	797b      	ldrb	r3, [r7, #5]
 8002480:	425b      	negs	r3, r3
 8002482:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002488:	797b      	ldrb	r3, [r7, #5]
 800248a:	f1c3 0301 	rsb	r3, r3, #1
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	2b00      	cmp	r3, #0
 8002498:	db65      	blt.n	8002566 <ssd1306_DrawCircle+0x106>
 800249a:	79bb      	ldrb	r3, [r7, #6]
 800249c:	2b3f      	cmp	r3, #63	; 0x3f
 800249e:	d862      	bhi.n	8002566 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	79fa      	ldrb	r2, [r7, #7]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	b2d8      	uxtb	r0, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	79bb      	ldrb	r3, [r7, #6]
 80024b0:	4413      	add	r3, r2
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	793a      	ldrb	r2, [r7, #4]
 80024b6:	4619      	mov	r1, r3
 80024b8:	f7ff fe4c 	bl	8002154 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	4413      	add	r3, r2
 80024c4:	b2d8      	uxtb	r0, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	79bb      	ldrb	r3, [r7, #6]
 80024cc:	4413      	add	r3, r2
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	793a      	ldrb	r2, [r7, #4]
 80024d2:	4619      	mov	r1, r3
 80024d4:	f7ff fe3e 	bl	8002154 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	79fb      	ldrb	r3, [r7, #7]
 80024de:	4413      	add	r3, r2
 80024e0:	b2d8      	uxtb	r0, r3
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	79ba      	ldrb	r2, [r7, #6]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	793a      	ldrb	r2, [r7, #4]
 80024ee:	4619      	mov	r1, r3
 80024f0:	f7ff fe30 	bl	8002154 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	79fa      	ldrb	r2, [r7, #7]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	b2d8      	uxtb	r0, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	79ba      	ldrb	r2, [r7, #6]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	793a      	ldrb	r2, [r7, #4]
 800250a:	4619      	mov	r1, r3
 800250c:	f7ff fe22 	bl	8002154 <ssd1306_DrawPixel>
        e2 = err;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	429a      	cmp	r2, r3
 800251a:	dc13      	bgt.n	8002544 <ssd1306_DrawCircle+0xe4>
            y++;
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	3301      	adds	r3, #1
 8002520:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	3301      	adds	r3, #1
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	425b      	negs	r3, r3
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	429a      	cmp	r2, r3
 8002536:	d105      	bne.n	8002544 <ssd1306_DrawCircle+0xe4>
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	429a      	cmp	r2, r3
 800253e:	dc01      	bgt.n	8002544 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	429a      	cmp	r2, r3
 800254a:	dd08      	ble.n	800255e <ssd1306_DrawCircle+0xfe>
            x++;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	3301      	adds	r3, #1
 8002550:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	3301      	adds	r3, #1
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4413      	add	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b00      	cmp	r3, #0
 8002562:	dd9d      	ble.n	80024a0 <ssd1306_DrawCircle+0x40>

    return;
 8002564:	e000      	b.n	8002568 <ssd1306_DrawCircle+0x108>
        return;
 8002566:	bf00      	nop
}
 8002568:	371c      	adds	r7, #28
 800256a:	46bd      	mov	sp, r7
 800256c:	bd90      	pop	{r4, r7, pc}

0800256e <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800256e:	b590      	push	{r4, r7, lr}
 8002570:	b085      	sub	sp, #20
 8002572:	af02      	add	r7, sp, #8
 8002574:	4604      	mov	r4, r0
 8002576:	4608      	mov	r0, r1
 8002578:	4611      	mov	r1, r2
 800257a:	461a      	mov	r2, r3
 800257c:	4623      	mov	r3, r4
 800257e:	71fb      	strb	r3, [r7, #7]
 8002580:	4603      	mov	r3, r0
 8002582:	71bb      	strb	r3, [r7, #6]
 8002584:	460b      	mov	r3, r1
 8002586:	717b      	strb	r3, [r7, #5]
 8002588:	4613      	mov	r3, r2
 800258a:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800258c:	79bc      	ldrb	r4, [r7, #6]
 800258e:	797a      	ldrb	r2, [r7, #5]
 8002590:	79b9      	ldrb	r1, [r7, #6]
 8002592:	79f8      	ldrb	r0, [r7, #7]
 8002594:	7e3b      	ldrb	r3, [r7, #24]
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	4623      	mov	r3, r4
 800259a:	f7ff fef5 	bl	8002388 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 800259e:	793c      	ldrb	r4, [r7, #4]
 80025a0:	797a      	ldrb	r2, [r7, #5]
 80025a2:	79b9      	ldrb	r1, [r7, #6]
 80025a4:	7978      	ldrb	r0, [r7, #5]
 80025a6:	7e3b      	ldrb	r3, [r7, #24]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	4623      	mov	r3, r4
 80025ac:	f7ff feec 	bl	8002388 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80025b0:	793c      	ldrb	r4, [r7, #4]
 80025b2:	79fa      	ldrb	r2, [r7, #7]
 80025b4:	7939      	ldrb	r1, [r7, #4]
 80025b6:	7978      	ldrb	r0, [r7, #5]
 80025b8:	7e3b      	ldrb	r3, [r7, #24]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	4623      	mov	r3, r4
 80025be:	f7ff fee3 	bl	8002388 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80025c2:	79bc      	ldrb	r4, [r7, #6]
 80025c4:	79fa      	ldrb	r2, [r7, #7]
 80025c6:	7939      	ldrb	r1, [r7, #4]
 80025c8:	79f8      	ldrb	r0, [r7, #7]
 80025ca:	7e3b      	ldrb	r3, [r7, #24]
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	4623      	mov	r3, r4
 80025d0:	f7ff feda 	bl	8002388 <ssd1306_Line>

    return;
 80025d4:	bf00      	nop
}
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd90      	pop	{r4, r7, pc}

080025dc <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4604      	mov	r4, r0
 80025e4:	4608      	mov	r0, r1
 80025e6:	4611      	mov	r1, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	4623      	mov	r3, r4
 80025ec:	71fb      	strb	r3, [r7, #7]
 80025ee:	4603      	mov	r3, r0
 80025f0:	71bb      	strb	r3, [r7, #6]
 80025f2:	460b      	mov	r3, r1
 80025f4:	717b      	strb	r3, [r7, #5]
 80025f6:	4613      	mov	r3, r2
 80025f8:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80025fa:	79fa      	ldrb	r2, [r7, #7]
 80025fc:	797b      	ldrb	r3, [r7, #5]
 80025fe:	4293      	cmp	r3, r2
 8002600:	bf28      	it	cs
 8002602:	4613      	movcs	r3, r2
 8002604:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002606:	797a      	ldrb	r2, [r7, #5]
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	4293      	cmp	r3, r2
 800260c:	bf38      	it	cc
 800260e:	4613      	movcc	r3, r2
 8002610:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002612:	79ba      	ldrb	r2, [r7, #6]
 8002614:	793b      	ldrb	r3, [r7, #4]
 8002616:	4293      	cmp	r3, r2
 8002618:	bf28      	it	cs
 800261a:	4613      	movcs	r3, r2
 800261c:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800261e:	793a      	ldrb	r2, [r7, #4]
 8002620:	79bb      	ldrb	r3, [r7, #6]
 8002622:	4293      	cmp	r3, r2
 8002624:	bf38      	it	cc
 8002626:	4613      	movcc	r3, r2
 8002628:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800262a:	7afb      	ldrb	r3, [r7, #11]
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e017      	b.n	8002660 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002630:	7b7b      	ldrb	r3, [r7, #13]
 8002632:	73bb      	strb	r3, [r7, #14]
 8002634:	e009      	b.n	800264a <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002636:	f897 2020 	ldrb.w	r2, [r7, #32]
 800263a:	7bf9      	ldrb	r1, [r7, #15]
 800263c:	7bbb      	ldrb	r3, [r7, #14]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fd88 	bl	8002154 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002644:	7bbb      	ldrb	r3, [r7, #14]
 8002646:	3301      	adds	r3, #1
 8002648:	73bb      	strb	r3, [r7, #14]
 800264a:	7bba      	ldrb	r2, [r7, #14]
 800264c:	7b3b      	ldrb	r3, [r7, #12]
 800264e:	429a      	cmp	r2, r3
 8002650:	d803      	bhi.n	800265a <ssd1306_FillRectangle+0x7e>
 8002652:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002656:	2b00      	cmp	r3, #0
 8002658:	daed      	bge.n	8002636 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	3301      	adds	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	7abb      	ldrb	r3, [r7, #10]
 8002664:	429a      	cmp	r2, r3
 8002666:	d803      	bhi.n	8002670 <ssd1306_FillRectangle+0x94>
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	2b3f      	cmp	r3, #63	; 0x3f
 800266c:	d9e0      	bls.n	8002630 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 800266e:	bf00      	nop
 8002670:	bf00      	nop
}
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bd90      	pop	{r4, r7, pc}

08002678 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	603a      	str	r2, [r7, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
 8002686:	460b      	mov	r3, r1
 8002688:	71bb      	strb	r3, [r7, #6]
 800268a:	4613      	mov	r3, r2
 800268c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800268e:	797b      	ldrb	r3, [r7, #5]
 8002690:	3307      	adds	r3, #7
 8002692:	2b00      	cmp	r3, #0
 8002694:	da00      	bge.n	8002698 <ssd1306_DrawBitmap+0x20>
 8002696:	3307      	adds	r3, #7
 8002698:	10db      	asrs	r3, r3, #3
 800269a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db3e      	blt.n	8002726 <ssd1306_DrawBitmap+0xae>
 80026a8:	79bb      	ldrb	r3, [r7, #6]
 80026aa:	2b3f      	cmp	r3, #63	; 0x3f
 80026ac:	d83b      	bhi.n	8002726 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80026ae:	2300      	movs	r3, #0
 80026b0:	73bb      	strb	r3, [r7, #14]
 80026b2:	e033      	b.n	800271c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80026b4:	2300      	movs	r3, #0
 80026b6:	737b      	strb	r3, [r7, #13]
 80026b8:	e026      	b.n	8002708 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80026ba:	7b7b      	ldrb	r3, [r7, #13]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	e00d      	b.n	80026e8 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80026cc:	7bbb      	ldrb	r3, [r7, #14]
 80026ce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	7b7a      	ldrb	r2, [r7, #13]
 80026d8:	08d2      	lsrs	r2, r2, #3
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	4413      	add	r3, r2
 80026de:	461a      	mov	r2, r3
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80026e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	da08      	bge.n	8002702 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80026f0:	79fa      	ldrb	r2, [r7, #7]
 80026f2:	7b7b      	ldrb	r3, [r7, #13]
 80026f4:	4413      	add	r3, r2
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	7f3a      	ldrb	r2, [r7, #28]
 80026fa:	79b9      	ldrb	r1, [r7, #6]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fd29 	bl	8002154 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8002702:	7b7b      	ldrb	r3, [r7, #13]
 8002704:	3301      	adds	r3, #1
 8002706:	737b      	strb	r3, [r7, #13]
 8002708:	7b7a      	ldrb	r2, [r7, #13]
 800270a:	797b      	ldrb	r3, [r7, #5]
 800270c:	429a      	cmp	r2, r3
 800270e:	d3d4      	bcc.n	80026ba <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002710:	7bbb      	ldrb	r3, [r7, #14]
 8002712:	3301      	adds	r3, #1
 8002714:	73bb      	strb	r3, [r7, #14]
 8002716:	79bb      	ldrb	r3, [r7, #6]
 8002718:	3301      	adds	r3, #1
 800271a:	71bb      	strb	r3, [r7, #6]
 800271c:	7bba      	ldrb	r2, [r7, #14]
 800271e:	7e3b      	ldrb	r3, [r7, #24]
 8002720:	429a      	cmp	r2, r3
 8002722:	d3c7      	bcc.n	80026b4 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002724:	e000      	b.n	8002728 <ssd1306_DrawBitmap+0xb0>
        return;
 8002726:	bf00      	nop
}
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800272e:	b580      	push	{r7, lr}
 8002730:	b084      	sub	sp, #16
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002738:	2381      	movs	r3, #129	; 0x81
 800273a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fc2c 	bl	8001f9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fc28 	bl	8001f9c <ssd1306_WriteCommand>
}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002764:	23af      	movs	r3, #175	; 0xaf
 8002766:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <ssd1306_SetDisplayOn+0x38>)
 800276a:	2201      	movs	r2, #1
 800276c:	715a      	strb	r2, [r3, #5]
 800276e:	e004      	b.n	800277a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002770:	23ae      	movs	r3, #174	; 0xae
 8002772:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <ssd1306_SetDisplayOn+0x38>)
 8002776:	2200      	movs	r2, #0
 8002778:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fc0d 	bl	8001f9c <ssd1306_WriteCommand>
}
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000c78 	.word	0x20000c78

08002790 <statemachine>:
extern DMA_HandleTypeDef hdma_lpuart_rx;



//le code qui permet d'avoir les ecran de donnée que l'on souhaite, changeable a souhait on peut d'ailleur rajouter des état ou rajouter des fonctionnalité au sein de chaque état, pas encore décidé de la version définitive.
void statemachine(void){
 8002790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002792:	ed2d 8b02 	vpush	{d8}
 8002796:	b0b3      	sub	sp, #204	; 0xcc
 8002798:	af04      	add	r7, sp, #16
	switch(state){
 800279a:	4bc7      	ldr	r3, [pc, #796]	; (8002ab8 <statemachine+0x328>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b05      	cmp	r3, #5
 80027a0:	f201 82df 	bhi.w	8003d62 <statemachine+0x15d2>
 80027a4:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <statemachine+0x1c>)
 80027a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027aa:	bf00      	nop
 80027ac:	080027c5 	.word	0x080027c5
 80027b0:	08002c43 	.word	0x08002c43
 80027b4:	08003195 	.word	0x08003195
 80027b8:	0800383b 	.word	0x0800383b
 80027bc:	080039d9 	.word	0x080039d9
 80027c0:	08003c75 	.word	0x08003c75
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7ff fc85 	bl	80020d4 <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 80027ca:	2120      	movs	r1, #32
 80027cc:	2020      	movs	r0, #32
 80027ce:	f7ff fdc3 	bl	8002358 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 80027d2:	49ba      	ldr	r1, [pc, #744]	; (8002abc <statemachine+0x32c>)
 80027d4:	48ba      	ldr	r0, [pc, #744]	; (8002ac0 <statemachine+0x330>)
 80027d6:	f7ff fb29 	bl	8001e2c <nmea_parse>
				 if(myData.speed>=vitmax){
 80027da:	4bb9      	ldr	r3, [pc, #740]	; (8002ac0 <statemachine+0x330>)
 80027dc:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80027e0:	4bb8      	ldr	r3, [pc, #736]	; (8002ac4 <statemachine+0x334>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ee:	db03      	blt.n	80027f8 <statemachine+0x68>
									 vitmax=myData.speed;
 80027f0:	4bb3      	ldr	r3, [pc, #716]	; (8002ac0 <statemachine+0x330>)
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f4:	4ab3      	ldr	r2, [pc, #716]	; (8002ac4 <statemachine+0x334>)
 80027f6:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
								 float sec=0;
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
								 if (myData.speed!=0){
 8002808:	4bad      	ldr	r3, [pc, #692]	; (8002ac0 <statemachine+0x330>)
 800280a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800280e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002816:	d035      	beq.n	8002884 <statemachine+0xf4>
									 pace=1000/(60*myData.speed);
 8002818:	4ba9      	ldr	r3, [pc, #676]	; (8002ac0 <statemachine+0x330>)
 800281a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800281e:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8002ac8 <statemachine+0x338>
 8002822:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002826:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8002acc <statemachine+0x33c>
 800282a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800282e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
									 sec=(pace-floor(pace))*60;
 8002832:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002836:	f7fd fe87 	bl	8000548 <__aeabi_f2d>
 800283a:	4604      	mov	r4, r0
 800283c:	460d      	mov	r5, r1
 800283e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002842:	f7fd fe81 	bl	8000548 <__aeabi_f2d>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	ec43 2b10 	vmov	d0, r2, r3
 800284e:	f012 ff5f 	bl	8015710 <floor>
 8002852:	ec53 2b10 	vmov	r2, r3, d0
 8002856:	4620      	mov	r0, r4
 8002858:	4629      	mov	r1, r5
 800285a:	f7fd fd15 	bl	8000288 <__aeabi_dsub>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	4b99      	ldr	r3, [pc, #612]	; (8002ad0 <statemachine+0x340>)
 800286c:	f7fd fec4 	bl	80005f8 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f7fe f9b6 	bl	8000be8 <__aeabi_d2f>
 800287c:	4603      	mov	r3, r0
 800287e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002882:	e002      	b.n	800288a <statemachine+0xfa>
								 }
								 else {
									 pace=9999;//en cas de division par 0, techniquement le temps devient infini mais ce n'est pas intérréssant
 8002884:	4b93      	ldr	r3, [pc, #588]	; (8002ad4 <statemachine+0x344>)
 8002886:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
								 }


				  switch(spdstate){
 800288a:	4b93      	ldr	r3, [pc, #588]	; (8002ad8 <statemachine+0x348>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b02      	cmp	r3, #2
 8002890:	f000 815e 	beq.w	8002b50 <statemachine+0x3c0>
 8002894:	2b02      	cmp	r3, #2
 8002896:	f300 81c4 	bgt.w	8002c22 <statemachine+0x492>
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <statemachine+0x116>
 800289e:	2b01      	cmp	r3, #1
 80028a0:	f000 80a2 	beq.w	80029e8 <statemachine+0x258>
 80028a4:	e1bd      	b.n	8002c22 <statemachine+0x492>


				 case STATE_SUMMARY:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 80028a6:	4b86      	ldr	r3, [pc, #536]	; (8002ac0 <statemachine+0x330>)
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d171      	bne.n	8002992 <statemachine+0x202>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 80028ae:	2014      	movs	r0, #20
 80028b0:	f00e f940 	bl	8010b34 <malloc>
 80028b4:	4603      	mov	r3, r0
 80028b6:	65bb      	str	r3, [r7, #88]	; 0x58
					 				 						snprintf(str,15, "MaxV=%.1f",vitmax*3.6);//amélioration possible la stocker en eeprom
 80028b8:	4b82      	ldr	r3, [pc, #520]	; (8002ac4 <statemachine+0x334>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fd fe43 	bl	8000548 <__aeabi_f2d>
 80028c2:	a379      	add	r3, pc, #484	; (adr r3, 8002aa8 <statemachine+0x318>)
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	f7fd fe96 	bl	80005f8 <__aeabi_dmul>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	e9cd 2300 	strd	r2, r3, [sp]
 80028d4:	4a81      	ldr	r2, [pc, #516]	; (8002adc <statemachine+0x34c>)
 80028d6:	210f      	movs	r1, #15
 80028d8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80028da:	f010 f827 	bl	801292c <sniprintf>
					 				 						ssd1306_SetCursor(32, 32);
 80028de:	2120      	movs	r1, #32
 80028e0:	2020      	movs	r0, #32
 80028e2:	f7ff fd39 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 80028e6:	4a7e      	ldr	r2, [pc, #504]	; (8002ae0 <statemachine+0x350>)
 80028e8:	2301      	movs	r3, #1
 80028ea:	ca06      	ldmia	r2, {r1, r2}
 80028ec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80028ee:	f7ff fd0d 	bl	800230c <ssd1306_WriteString>
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 80028f2:	4b73      	ldr	r3, [pc, #460]	; (8002ac0 <statemachine+0x330>)
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fd fe26 	bl	8000548 <__aeabi_f2d>
 80028fc:	a36a      	add	r3, pc, #424	; (adr r3, 8002aa8 <statemachine+0x318>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	f7fd fe79 	bl	80005f8 <__aeabi_dmul>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	e9cd 2300 	strd	r2, r3, [sp]
 800290e:	4a75      	ldr	r2, [pc, #468]	; (8002ae4 <statemachine+0x354>)
 8002910:	210f      	movs	r1, #15
 8002912:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002914:	f010 f80a 	bl	801292c <sniprintf>
					 				 						ssd1306_SetCursor(32, 42);
 8002918:	212a      	movs	r1, #42	; 0x2a
 800291a:	2020      	movs	r0, #32
 800291c:	f7ff fd1c 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002920:	4a6f      	ldr	r2, [pc, #444]	; (8002ae0 <statemachine+0x350>)
 8002922:	2301      	movs	r3, #1
 8002924:	ca06      	ldmia	r2, {r1, r2}
 8002926:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002928:	f7ff fcf0 	bl	800230c <ssd1306_WriteString>
					 				 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));//affichage au format minute puis seconde
 800292c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8002930:	f7fd fe0a 	bl	8000548 <__aeabi_f2d>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	ec43 2b10 	vmov	d0, r2, r3
 800293c:	f012 fee8 	bl	8015710 <floor>
 8002940:	eeb0 8a40 	vmov.f32	s16, s0
 8002944:	eef0 8a60 	vmov.f32	s17, s1
 8002948:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800294c:	f7fd fdfc 	bl	8000548 <__aeabi_f2d>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	ec43 2b10 	vmov	d0, r2, r3
 8002958:	f012 feda 	bl	8015710 <floor>
 800295c:	eeb0 7a40 	vmov.f32	s14, s0
 8002960:	eef0 7a60 	vmov.f32	s15, s1
 8002964:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002968:	ed8d 8b00 	vstr	d8, [sp]
 800296c:	4a5e      	ldr	r2, [pc, #376]	; (8002ae8 <statemachine+0x358>)
 800296e:	210f      	movs	r1, #15
 8002970:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002972:	f00f ffdb 	bl	801292c <sniprintf>
					 				 						ssd1306_SetCursor(32, 52);
 8002976:	2134      	movs	r1, #52	; 0x34
 8002978:	2020      	movs	r0, #32
 800297a:	f7ff fced 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 800297e:	4a58      	ldr	r2, [pc, #352]	; (8002ae0 <statemachine+0x350>)
 8002980:	2301      	movs	r3, #1
 8002982:	ca06      	ldmia	r2, {r1, r2}
 8002984:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002986:	f7ff fcc1 	bl	800230c <ssd1306_WriteString>
					 				 						free(str);
 800298a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800298c:	f00e f8da 	bl	8010b44 <free>
 8002990:	e01b      	b.n	80029ca <statemachine+0x23a>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002992:	2014      	movs	r0, #20
 8002994:	f00e f8ce 	bl	8010b34 <malloc>
 8002998:	4603      	mov	r3, r0
 800299a:	65fb      	str	r3, [r7, #92]	; 0x5c
					 				 						ssd1306_SetCursor(32, 32);
 800299c:	2120      	movs	r1, #32
 800299e:	2020      	movs	r0, #32
 80029a0:	f7ff fcda 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 1", Font_6x8, White);
 80029a4:	4a4e      	ldr	r2, [pc, #312]	; (8002ae0 <statemachine+0x350>)
 80029a6:	2301      	movs	r3, #1
 80029a8:	ca06      	ldmia	r2, {r1, r2}
 80029aa:	4850      	ldr	r0, [pc, #320]	; (8002aec <statemachine+0x35c>)
 80029ac:	f7ff fcae 	bl	800230c <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	2020      	movs	r0, #32
 80029b4:	f7ff fcd0 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80029b8:	4a49      	ldr	r2, [pc, #292]	; (8002ae0 <statemachine+0x350>)
 80029ba:	2301      	movs	r3, #1
 80029bc:	ca06      	ldmia	r2, {r1, r2}
 80029be:	484c      	ldr	r0, [pc, #304]	; (8002af0 <statemachine+0x360>)
 80029c0:	f7ff fca4 	bl	800230c <ssd1306_WriteString>
					 				 						free(str);
 80029c4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80029c6:	f00e f8bd 	bl	8010b44 <free>
					 				 					}
					 if(BTN_B>=1){
 80029ca:	4b4a      	ldr	r3, [pc, #296]	; (8002af4 <statemachine+0x364>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f340 8122 	ble.w	8002c18 <statemachine+0x488>
					 					 				 					spdstate++;
 80029d4:	4b40      	ldr	r3, [pc, #256]	; (8002ad8 <statemachine+0x348>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	3301      	adds	r3, #1
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	4b3e      	ldr	r3, [pc, #248]	; (8002ad8 <statemachine+0x348>)
 80029de:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 80029e0:	4b44      	ldr	r3, [pc, #272]	; (8002af4 <statemachine+0x364>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
					 					 				  	}



					 break;
 80029e6:	e117      	b.n	8002c18 <statemachine+0x488>
				 case STATE_COMPTEUR:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 80029e8:	4b35      	ldr	r3, [pc, #212]	; (8002ac0 <statemachine+0x330>)
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	f040 8085 	bne.w	8002afc <statemachine+0x36c>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 80029f2:	2014      	movs	r0, #20
 80029f4:	f00e f89e 	bl	8010b34 <malloc>
 80029f8:	4603      	mov	r3, r0
 80029fa:	663b      	str	r3, [r7, #96]	; 0x60
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 80029fc:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <statemachine+0x330>)
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fda1 	bl	8000548 <__aeabi_f2d>
 8002a06:	a328      	add	r3, pc, #160	; (adr r3, 8002aa8 <statemachine+0x318>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fdf4 	bl	80005f8 <__aeabi_dmul>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	e9cd 2300 	strd	r2, r3, [sp]
 8002a18:	4a32      	ldr	r2, [pc, #200]	; (8002ae4 <statemachine+0x354>)
 8002a1a:	210f      	movs	r1, #15
 8002a1c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002a1e:	f00f ff85 	bl	801292c <sniprintf>
					 				 						ssd1306_SetCursor(32, 54);
 8002a22:	2136      	movs	r1, #54	; 0x36
 8002a24:	2020      	movs	r0, #32
 8002a26:	f7ff fc97 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002a2a:	4a2d      	ldr	r2, [pc, #180]	; (8002ae0 <statemachine+0x350>)
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	ca06      	ldmia	r2, {r1, r2}
 8002a30:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002a32:	f7ff fc6b 	bl	800230c <ssd1306_WriteString>
					 				 						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 8002a36:	2301      	movs	r3, #1
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	2335      	movs	r3, #53	; 0x35
 8002a3c:	225f      	movs	r2, #95	; 0x5f
 8002a3e:	2126      	movs	r1, #38	; 0x26
 8002a40:	2020      	movs	r0, #32
 8002a42:	f7ff fd94 	bl	800256e <ssd1306_DrawRectangle>
					 				 						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <statemachine+0x330>)
 8002a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fd fd7c 	bl	8000548 <__aeabi_f2d>
 8002a50:	a317      	add	r3, pc, #92	; (adr r3, 8002ab0 <statemachine+0x320>)
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	f7fd fdcf 	bl	80005f8 <__aeabi_dmul>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4619      	mov	r1, r3
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <statemachine+0x368>)
 8002a68:	f7fd fc10 	bl	800028c <__adddf3>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	ec43 2b17 	vmov	d7, r2, r3
 8002a74:	eeb0 0a47 	vmov.f32	s0, s14
 8002a78:	eef0 0a67 	vmov.f32	s1, s15
 8002a7c:	f012 fe48 	bl	8015710 <floor>
 8002a80:	ec53 2b10 	vmov	r2, r3, d0
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7fe f866 	bl	8000b58 <__aeabi_d2iz>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	2301      	movs	r3, #1
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	2335      	movs	r3, #53	; 0x35
 8002a96:	2126      	movs	r1, #38	; 0x26
 8002a98:	2020      	movs	r0, #32
 8002a9a:	f7ff fd9f 	bl	80025dc <ssd1306_FillRectangle>

					 				 						free(str);
 8002a9e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002aa0:	f00e f850 	bl	8010b44 <free>
 8002aa4:	e046      	b.n	8002b34 <statemachine+0x3a4>
 8002aa6:	bf00      	nop
 8002aa8:	cccccccd 	.word	0xcccccccd
 8002aac:	400ccccc 	.word	0x400ccccc
 8002ab0:	c28f5c29 	.word	0xc28f5c29
 8002ab4:	3fe428f5 	.word	0x3fe428f5
 8002ab8:	20000828 	.word	0x20000828
 8002abc:	200005e0 	.word	0x200005e0
 8002ac0:	200007e0 	.word	0x200007e0
 8002ac4:	20000c80 	.word	0x20000c80
 8002ac8:	42700000 	.word	0x42700000
 8002acc:	447a0000 	.word	0x447a0000
 8002ad0:	404e0000 	.word	0x404e0000
 8002ad4:	461c3c00 	.word	0x461c3c00
 8002ad8:	2000082a 	.word	0x2000082a
 8002adc:	080168fc 	.word	0x080168fc
 8002ae0:	20000008 	.word	0x20000008
 8002ae4:	08016908 	.word	0x08016908
 8002ae8:	08016910 	.word	0x08016910
 8002aec:	08016924 	.word	0x08016924
 8002af0:	0801692c 	.word	0x0801692c
 8002af4:	20000824 	.word	0x20000824
 8002af8:	40400000 	.word	0x40400000
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002afc:	2014      	movs	r0, #20
 8002afe:	f00e f819 	bl	8010b34 <malloc>
 8002b02:	4603      	mov	r3, r0
 8002b04:	667b      	str	r3, [r7, #100]	; 0x64
					 				 						ssd1306_SetCursor(32, 32);
 8002b06:	2120      	movs	r1, #32
 8002b08:	2020      	movs	r0, #32
 8002b0a:	f7ff fc25 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 2", Font_6x8, White);
 8002b0e:	4a9a      	ldr	r2, [pc, #616]	; (8002d78 <statemachine+0x5e8>)
 8002b10:	2301      	movs	r3, #1
 8002b12:	ca06      	ldmia	r2, {r1, r2}
 8002b14:	4899      	ldr	r0, [pc, #612]	; (8002d7c <statemachine+0x5ec>)
 8002b16:	f7ff fbf9 	bl	800230c <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8002b1a:	212c      	movs	r1, #44	; 0x2c
 8002b1c:	2020      	movs	r0, #32
 8002b1e:	f7ff fc1b 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002b22:	4a95      	ldr	r2, [pc, #596]	; (8002d78 <statemachine+0x5e8>)
 8002b24:	2301      	movs	r3, #1
 8002b26:	ca06      	ldmia	r2, {r1, r2}
 8002b28:	4895      	ldr	r0, [pc, #596]	; (8002d80 <statemachine+0x5f0>)
 8002b2a:	f7ff fbef 	bl	800230c <ssd1306_WriteString>
					 				 						free(str);
 8002b2e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002b30:	f00e f808 	bl	8010b44 <free>
					 				 					}
					 if(BTN_B>=1){
 8002b34:	4b93      	ldr	r3, [pc, #588]	; (8002d84 <statemachine+0x5f4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	dd6f      	ble.n	8002c1c <statemachine+0x48c>
					 				 					spdstate++;
 8002b3c:	4b92      	ldr	r3, [pc, #584]	; (8002d88 <statemachine+0x5f8>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	3301      	adds	r3, #1
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	4b90      	ldr	r3, [pc, #576]	; (8002d88 <statemachine+0x5f8>)
 8002b46:	701a      	strb	r2, [r3, #0]
					 				 					BTN_B=0;
 8002b48:	4b8e      	ldr	r3, [pc, #568]	; (8002d84 <statemachine+0x5f4>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 8002b4e:	e065      	b.n	8002c1c <statemachine+0x48c>
				 case STATE_GRAPH:
					 if(myData.fix == 1){
 8002b50:	4b8e      	ldr	r3, [pc, #568]	; (8002d8c <statemachine+0x5fc>)
 8002b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d12f      	bne.n	8002bb8 <statemachine+0x428>
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002b58:	2014      	movs	r0, #20
 8002b5a:	f00d ffeb 	bl	8010b34 <malloc>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	66bb      	str	r3, [r7, #104]	; 0x68

					 				 						ssd1306_SetCursor(32, 32);
 8002b62:	2120      	movs	r1, #32
 8002b64:	2020      	movs	r0, #32
 8002b66:	f7ff fbf7 	bl	8002358 <ssd1306_SetCursor>
					 				 						snprintf(str,15, "%0.1f",(myData.speed)*3.6);
 8002b6a:	4b88      	ldr	r3, [pc, #544]	; (8002d8c <statemachine+0x5fc>)
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fd fcea 	bl	8000548 <__aeabi_f2d>
 8002b74:	a37e      	add	r3, pc, #504	; (adr r3, 8002d70 <statemachine+0x5e0>)
 8002b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7a:	f7fd fd3d 	bl	80005f8 <__aeabi_dmul>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	e9cd 2300 	strd	r2, r3, [sp]
 8002b86:	4a82      	ldr	r2, [pc, #520]	; (8002d90 <statemachine+0x600>)
 8002b88:	210f      	movs	r1, #15
 8002b8a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002b8c:	f00f fece 	bl	801292c <sniprintf>
					 				 						ssd1306_WriteString(str, Font_11x18, White);
 8002b90:	4a80      	ldr	r2, [pc, #512]	; (8002d94 <statemachine+0x604>)
 8002b92:	2301      	movs	r3, #1
 8002b94:	ca06      	ldmia	r2, {r1, r2}
 8002b96:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002b98:	f7ff fbb8 	bl	800230c <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 54);
 8002b9c:	2136      	movs	r1, #54	; 0x36
 8002b9e:	2020      	movs	r0, #32
 8002ba0:	f7ff fbda 	bl	8002358 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("kmh", Font_6x8, White);
 8002ba4:	4a74      	ldr	r2, [pc, #464]	; (8002d78 <statemachine+0x5e8>)
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	ca06      	ldmia	r2, {r1, r2}
 8002baa:	487b      	ldr	r0, [pc, #492]	; (8002d98 <statemachine+0x608>)
 8002bac:	f7ff fbae 	bl	800230c <ssd1306_WriteString>

					 				 						free(str);
 8002bb0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002bb2:	f00d ffc7 	bl	8010b44 <free>
 8002bb6:	e01b      	b.n	8002bf0 <statemachine+0x460>
					 }
					 else{
						 char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002bb8:	2014      	movs	r0, #20
 8002bba:	f00d ffbb 	bl	8010b34 <malloc>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	66fb      	str	r3, [r7, #108]	; 0x6c
						 ssd1306_SetCursor(32, 32);
 8002bc2:	2120      	movs	r1, #32
 8002bc4:	2020      	movs	r0, #32
 8002bc6:	f7ff fbc7 	bl	8002358 <ssd1306_SetCursor>
						 ssd1306_WriteString("Speed 3", Font_6x8, White);
 8002bca:	4a6b      	ldr	r2, [pc, #428]	; (8002d78 <statemachine+0x5e8>)
 8002bcc:	2301      	movs	r3, #1
 8002bce:	ca06      	ldmia	r2, {r1, r2}
 8002bd0:	4872      	ldr	r0, [pc, #456]	; (8002d9c <statemachine+0x60c>)
 8002bd2:	f7ff fb9b 	bl	800230c <ssd1306_WriteString>
						 ssd1306_SetCursor(32, 44);
 8002bd6:	212c      	movs	r1, #44	; 0x2c
 8002bd8:	2020      	movs	r0, #32
 8002bda:	f7ff fbbd 	bl	8002358 <ssd1306_SetCursor>
						 ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002bde:	4a66      	ldr	r2, [pc, #408]	; (8002d78 <statemachine+0x5e8>)
 8002be0:	2301      	movs	r3, #1
 8002be2:	ca06      	ldmia	r2, {r1, r2}
 8002be4:	4866      	ldr	r0, [pc, #408]	; (8002d80 <statemachine+0x5f0>)
 8002be6:	f7ff fb91 	bl	800230c <ssd1306_WriteString>
						 free(str);
 8002bea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002bec:	f00d ffaa 	bl	8010b44 <free>
					 }

					 if(BTN_B>=1){
 8002bf0:	4b64      	ldr	r3, [pc, #400]	; (8002d84 <statemachine+0x5f4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	dd13      	ble.n	8002c20 <statemachine+0x490>
					 					 				 					spdstate--;
 8002bf8:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <statemachine+0x5f8>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	4b61      	ldr	r3, [pc, #388]	; (8002d88 <statemachine+0x5f8>)
 8002c02:	701a      	strb	r2, [r3, #0]
					 					 				 					spdstate--;
 8002c04:	4b60      	ldr	r3, [pc, #384]	; (8002d88 <statemachine+0x5f8>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	4b5e      	ldr	r3, [pc, #376]	; (8002d88 <statemachine+0x5f8>)
 8002c0e:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8002c10:	4b5c      	ldr	r3, [pc, #368]	; (8002d84 <statemachine+0x5f4>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 8002c16:	e003      	b.n	8002c20 <statemachine+0x490>
					 break;
 8002c18:	bf00      	nop
 8002c1a:	e002      	b.n	8002c22 <statemachine+0x492>
					 break;
 8002c1c:	bf00      	nop
 8002c1e:	e000      	b.n	8002c22 <statemachine+0x492>
					 break;
 8002c20:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 8002c22:	4b5f      	ldr	r3, [pc, #380]	; (8002da0 <statemachine+0x610>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f341 808f 	ble.w	8003d4a <statemachine+0x15ba>
				 					state++;
 8002c2c:	4b5d      	ldr	r3, [pc, #372]	; (8002da4 <statemachine+0x614>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	4b5b      	ldr	r3, [pc, #364]	; (8002da4 <statemachine+0x614>)
 8002c36:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 8002c38:	4b59      	ldr	r3, [pc, #356]	; (8002da0 <statemachine+0x610>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
				  	}
				  break;
 8002c3e:	f001 b884 	b.w	8003d4a <statemachine+0x15ba>


	case STATE_POS:
			  ssd1306_Fill(Black);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7ff fa46 	bl	80020d4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8002c48:	4957      	ldr	r1, [pc, #348]	; (8002da8 <statemachine+0x618>)
 8002c4a:	4850      	ldr	r0, [pc, #320]	; (8002d8c <statemachine+0x5fc>)
 8002c4c:	f7ff f8ee 	bl	8001e2c <nmea_parse>
			  switch(posstate){
 8002c50:	4b56      	ldr	r3, [pc, #344]	; (8002dac <statemachine+0x61c>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	f200 828d 	bhi.w	8003174 <statemachine+0x9e4>
 8002c5a:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <statemachine+0x4d0>)
 8002c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002dc1 	.word	0x08002dc1
 8002c68:	08002eb7 	.word	0x08002eb7
 8002c6c:	08002ff9 	.word	0x08002ff9

			  case STATE_SUMMARY1:
				  if(myData.fix == 1){
 8002c70:	4b46      	ldr	r3, [pc, #280]	; (8002d8c <statemachine+0x5fc>)
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d14e      	bne.n	8002d16 <statemachine+0x586>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002c78:	2014      	movs	r0, #20
 8002c7a:	f00d ff5b 	bl	8010b34 <malloc>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	673b      	str	r3, [r7, #112]	; 0x70
				  						ssd1306_SetCursor(32, 32);
 8002c82:	2120      	movs	r1, #32
 8002c84:	2020      	movs	r0, #32
 8002c86:	f7ff fb67 	bl	8002358 <ssd1306_SetCursor>
				  						snprintf(str,15, "Latitude:");
 8002c8a:	4a49      	ldr	r2, [pc, #292]	; (8002db0 <statemachine+0x620>)
 8002c8c:	210f      	movs	r1, #15
 8002c8e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002c90:	f00f fe4c 	bl	801292c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002c94:	4a38      	ldr	r2, [pc, #224]	; (8002d78 <statemachine+0x5e8>)
 8002c96:	2301      	movs	r3, #1
 8002c98:	ca06      	ldmia	r2, {r1, r2}
 8002c9a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002c9c:	f7ff fb36 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8002ca0:	4b3a      	ldr	r3, [pc, #232]	; (8002d8c <statemachine+0x5fc>)
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	e9cd 2300 	strd	r2, r3, [sp]
 8002caa:	4a42      	ldr	r2, [pc, #264]	; (8002db4 <statemachine+0x624>)
 8002cac:	210f      	movs	r1, #15
 8002cae:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002cb0:	f00f fe3c 	bl	801292c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8002cb4:	2128      	movs	r1, #40	; 0x28
 8002cb6:	2020      	movs	r0, #32
 8002cb8:	f7ff fb4e 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002cbc:	4a2e      	ldr	r2, [pc, #184]	; (8002d78 <statemachine+0x5e8>)
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	ca06      	ldmia	r2, {r1, r2}
 8002cc2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002cc4:	f7ff fb22 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8002cc8:	4a3b      	ldr	r2, [pc, #236]	; (8002db8 <statemachine+0x628>)
 8002cca:	210f      	movs	r1, #15
 8002ccc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002cce:	f00f fe2d 	bl	801292c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8002cd2:	2130      	movs	r1, #48	; 0x30
 8002cd4:	2020      	movs	r0, #32
 8002cd6:	f7ff fb3f 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002cda:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <statemachine+0x5e8>)
 8002cdc:	2301      	movs	r3, #1
 8002cde:	ca06      	ldmia	r2, {r1, r2}
 8002ce0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002ce2:	f7ff fb13 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8002ce6:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <statemachine+0x5fc>)
 8002ce8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cec:	e9cd 2300 	strd	r2, r3, [sp]
 8002cf0:	4a30      	ldr	r2, [pc, #192]	; (8002db4 <statemachine+0x624>)
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002cf6:	f00f fe19 	bl	801292c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8002cfa:	2138      	movs	r1, #56	; 0x38
 8002cfc:	2020      	movs	r0, #32
 8002cfe:	f7ff fb2b 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002d02:	4a1d      	ldr	r2, [pc, #116]	; (8002d78 <statemachine+0x5e8>)
 8002d04:	2301      	movs	r3, #1
 8002d06:	ca06      	ldmia	r2, {r1, r2}
 8002d08:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002d0a:	f7ff faff 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 8002d0e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002d10:	f00d ff18 	bl	8010b44 <free>
 8002d14:	e01b      	b.n	8002d4e <statemachine+0x5be>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8002d16:	2014      	movs	r0, #20
 8002d18:	f00d ff0c 	bl	8010b34 <malloc>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	677b      	str	r3, [r7, #116]	; 0x74
				  						ssd1306_SetCursor(32, 32);
 8002d20:	2120      	movs	r1, #32
 8002d22:	2020      	movs	r0, #32
 8002d24:	f7ff fb18 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos1", Font_6x8, White);
 8002d28:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <statemachine+0x5e8>)
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	ca06      	ldmia	r2, {r1, r2}
 8002d2e:	4823      	ldr	r0, [pc, #140]	; (8002dbc <statemachine+0x62c>)
 8002d30:	f7ff faec 	bl	800230c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	2020      	movs	r0, #32
 8002d38:	f7ff fb0e 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002d3c:	4a0e      	ldr	r2, [pc, #56]	; (8002d78 <statemachine+0x5e8>)
 8002d3e:	2301      	movs	r3, #1
 8002d40:	ca06      	ldmia	r2, {r1, r2}
 8002d42:	480f      	ldr	r0, [pc, #60]	; (8002d80 <statemachine+0x5f0>)
 8002d44:	f7ff fae2 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 8002d48:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002d4a:	f00d fefb 	bl	8010b44 <free>
				  					}
				  if(BTN_B>=1){
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <statemachine+0x5f4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f340 8207 	ble.w	8003166 <statemachine+0x9d6>
					  posstate++;
 8002d58:	4b14      	ldr	r3, [pc, #80]	; (8002dac <statemachine+0x61c>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <statemachine+0x61c>)
 8002d62:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <statemachine+0x5f4>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]





				  break;
 8002d6a:	e1fc      	b.n	8003166 <statemachine+0x9d6>
 8002d6c:	f3af 8000 	nop.w
 8002d70:	cccccccd 	.word	0xcccccccd
 8002d74:	400ccccc 	.word	0x400ccccc
 8002d78:	20000008 	.word	0x20000008
 8002d7c:	08016938 	.word	0x08016938
 8002d80:	0801692c 	.word	0x0801692c
 8002d84:	20000824 	.word	0x20000824
 8002d88:	2000082a 	.word	0x2000082a
 8002d8c:	200007e0 	.word	0x200007e0
 8002d90:	08016940 	.word	0x08016940
 8002d94:	20000018 	.word	0x20000018
 8002d98:	08016948 	.word	0x08016948
 8002d9c:	0801694c 	.word	0x0801694c
 8002da0:	20000820 	.word	0x20000820
 8002da4:	20000828 	.word	0x20000828
 8002da8:	200005e0 	.word	0x200005e0
 8002dac:	2000082b 	.word	0x2000082b
 8002db0:	08016954 	.word	0x08016954
 8002db4:	08016960 	.word	0x08016960
 8002db8:	08016968 	.word	0x08016968
 8002dbc:	08016974 	.word	0x08016974
			  case STATE_LAT:
				  if(myData.fix == 1){
 8002dc0:	4b80      	ldr	r3, [pc, #512]	; (8002fc4 <statemachine+0x834>)
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d14b      	bne.n	8002e60 <statemachine+0x6d0>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002dc8:	2014      	movs	r0, #20
 8002dca:	f00d feb3 	bl	8010b34 <malloc>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	67bb      	str	r3, [r7, #120]	; 0x78
				  						ssd1306_SetCursor(32, 32);
 8002dd2:	2120      	movs	r1, #32
 8002dd4:	2020      	movs	r0, #32
 8002dd6:	f7ff fabf 	bl	8002358 <ssd1306_SetCursor>
				  						snprintf(str,15, "LatSide:");
 8002dda:	4a7b      	ldr	r2, [pc, #492]	; (8002fc8 <statemachine+0x838>)
 8002ddc:	210f      	movs	r1, #15
 8002dde:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002de0:	f00f fda4 	bl	801292c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002de4:	4a79      	ldr	r2, [pc, #484]	; (8002fcc <statemachine+0x83c>)
 8002de6:	2301      	movs	r3, #1
 8002de8:	ca06      	ldmia	r2, {r1, r2}
 8002dea:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002dec:	f7ff fa8e 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8002df0:	4b74      	ldr	r3, [pc, #464]	; (8002fc4 <statemachine+0x834>)
 8002df2:	7a1b      	ldrb	r3, [r3, #8]
 8002df4:	4a76      	ldr	r2, [pc, #472]	; (8002fd0 <statemachine+0x840>)
 8002df6:	210f      	movs	r1, #15
 8002df8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002dfa:	f00f fd97 	bl	801292c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8002dfe:	2128      	movs	r1, #40	; 0x28
 8002e00:	2020      	movs	r0, #32
 8002e02:	f7ff faa9 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002e06:	4a71      	ldr	r2, [pc, #452]	; (8002fcc <statemachine+0x83c>)
 8002e08:	2301      	movs	r3, #1
 8002e0a:	ca06      	ldmia	r2, {r1, r2}
 8002e0c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e0e:	f7ff fa7d 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "Latitude:");
 8002e12:	4a70      	ldr	r2, [pc, #448]	; (8002fd4 <statemachine+0x844>)
 8002e14:	210f      	movs	r1, #15
 8002e16:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e18:	f00f fd88 	bl	801292c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8002e1c:	2130      	movs	r1, #48	; 0x30
 8002e1e:	2020      	movs	r0, #32
 8002e20:	f7ff fa9a 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002e24:	4a69      	ldr	r2, [pc, #420]	; (8002fcc <statemachine+0x83c>)
 8002e26:	2301      	movs	r3, #1
 8002e28:	ca06      	ldmia	r2, {r1, r2}
 8002e2a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e2c:	f7ff fa6e 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);
 8002e30:	4b64      	ldr	r3, [pc, #400]	; (8002fc4 <statemachine+0x834>)
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	e9cd 2300 	strd	r2, r3, [sp]
 8002e3a:	4a67      	ldr	r2, [pc, #412]	; (8002fd8 <statemachine+0x848>)
 8002e3c:	210f      	movs	r1, #15
 8002e3e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e40:	f00f fd74 	bl	801292c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8002e44:	2138      	movs	r1, #56	; 0x38
 8002e46:	2020      	movs	r0, #32
 8002e48:	f7ff fa86 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002e4c:	4a5f      	ldr	r2, [pc, #380]	; (8002fcc <statemachine+0x83c>)
 8002e4e:	2301      	movs	r3, #1
 8002e50:	ca06      	ldmia	r2, {r1, r2}
 8002e52:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e54:	f7ff fa5a 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 8002e58:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002e5a:	f00d fe73 	bl	8010b44 <free>
 8002e5e:	e01b      	b.n	8002e98 <statemachine+0x708>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8002e60:	2014      	movs	r0, #20
 8002e62:	f00d fe67 	bl	8010b34 <malloc>
 8002e66:	4603      	mov	r3, r0
 8002e68:	67fb      	str	r3, [r7, #124]	; 0x7c
				  						ssd1306_SetCursor(32, 32);
 8002e6a:	2120      	movs	r1, #32
 8002e6c:	2020      	movs	r0, #32
 8002e6e:	f7ff fa73 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos2", Font_6x8, White);
 8002e72:	4a56      	ldr	r2, [pc, #344]	; (8002fcc <statemachine+0x83c>)
 8002e74:	2301      	movs	r3, #1
 8002e76:	ca06      	ldmia	r2, {r1, r2}
 8002e78:	4858      	ldr	r0, [pc, #352]	; (8002fdc <statemachine+0x84c>)
 8002e7a:	f7ff fa47 	bl	800230c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	2020      	movs	r0, #32
 8002e82:	f7ff fa69 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002e86:	4a51      	ldr	r2, [pc, #324]	; (8002fcc <statemachine+0x83c>)
 8002e88:	2301      	movs	r3, #1
 8002e8a:	ca06      	ldmia	r2, {r1, r2}
 8002e8c:	4854      	ldr	r0, [pc, #336]	; (8002fe0 <statemachine+0x850>)
 8002e8e:	f7ff fa3d 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 8002e92:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002e94:	f00d fe56 	bl	8010b44 <free>
				  					}
				  if(BTN_B>=1){
 8002e98:	4b52      	ldr	r3, [pc, #328]	; (8002fe4 <statemachine+0x854>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f340 8164 	ble.w	800316a <statemachine+0x9da>
				  					  posstate++;
 8002ea2:	4b51      	ldr	r3, [pc, #324]	; (8002fe8 <statemachine+0x858>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4b4f      	ldr	r3, [pc, #316]	; (8002fe8 <statemachine+0x858>)
 8002eac:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8002eae:	4b4d      	ldr	r3, [pc, #308]	; (8002fe4 <statemachine+0x854>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
				  				  }



				  break;
 8002eb4:	e159      	b.n	800316a <statemachine+0x9da>
			  case STATE_LONG:
				  if(myData.fix == 1){
 8002eb6:	4b43      	ldr	r3, [pc, #268]	; (8002fc4 <statemachine+0x834>)
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d155      	bne.n	8002f6a <statemachine+0x7da>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002ebe:	2014      	movs	r0, #20
 8002ec0:	f00d fe38 	bl	8010b34 <malloc>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				  						ssd1306_SetCursor(32, 32);
 8002eca:	2120      	movs	r1, #32
 8002ecc:	2020      	movs	r0, #32
 8002ece:	f7ff fa43 	bl	8002358 <ssd1306_SetCursor>
				  						snprintf(str,15, "LonSide:");
 8002ed2:	4a46      	ldr	r2, [pc, #280]	; (8002fec <statemachine+0x85c>)
 8002ed4:	210f      	movs	r1, #15
 8002ed6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002eda:	f00f fd27 	bl	801292c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002ede:	4a3b      	ldr	r2, [pc, #236]	; (8002fcc <statemachine+0x83c>)
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	ca06      	ldmia	r2, {r1, r2}
 8002ee4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002ee8:	f7ff fa10 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8002eec:	4b35      	ldr	r3, [pc, #212]	; (8002fc4 <statemachine+0x834>)
 8002eee:	7e1b      	ldrb	r3, [r3, #24]
 8002ef0:	4a37      	ldr	r2, [pc, #220]	; (8002fd0 <statemachine+0x840>)
 8002ef2:	210f      	movs	r1, #15
 8002ef4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002ef8:	f00f fd18 	bl	801292c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8002efc:	2128      	movs	r1, #40	; 0x28
 8002efe:	2020      	movs	r0, #32
 8002f00:	f7ff fa2a 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002f04:	4a31      	ldr	r2, [pc, #196]	; (8002fcc <statemachine+0x83c>)
 8002f06:	2301      	movs	r3, #1
 8002f08:	ca06      	ldmia	r2, {r1, r2}
 8002f0a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002f0e:	f7ff f9fd 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8002f12:	4a37      	ldr	r2, [pc, #220]	; (8002ff0 <statemachine+0x860>)
 8002f14:	210f      	movs	r1, #15
 8002f16:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002f1a:	f00f fd07 	bl	801292c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8002f1e:	2130      	movs	r1, #48	; 0x30
 8002f20:	2020      	movs	r0, #32
 8002f22:	f7ff fa19 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002f26:	4a29      	ldr	r2, [pc, #164]	; (8002fcc <statemachine+0x83c>)
 8002f28:	2301      	movs	r3, #1
 8002f2a:	ca06      	ldmia	r2, {r1, r2}
 8002f2c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002f30:	f7ff f9ec 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8002f34:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <statemachine+0x834>)
 8002f36:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f3a:	e9cd 2300 	strd	r2, r3, [sp]
 8002f3e:	4a26      	ldr	r2, [pc, #152]	; (8002fd8 <statemachine+0x848>)
 8002f40:	210f      	movs	r1, #15
 8002f42:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002f46:	f00f fcf1 	bl	801292c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8002f4a:	2138      	movs	r1, #56	; 0x38
 8002f4c:	2020      	movs	r0, #32
 8002f4e:	f7ff fa03 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002f52:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <statemachine+0x83c>)
 8002f54:	2301      	movs	r3, #1
 8002f56:	ca06      	ldmia	r2, {r1, r2}
 8002f58:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002f5c:	f7ff f9d6 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 8002f60:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002f64:	f00d fdee 	bl	8010b44 <free>
 8002f68:	e01d      	b.n	8002fa6 <statemachine+0x816>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8002f6a:	2014      	movs	r0, #20
 8002f6c:	f00d fde2 	bl	8010b34 <malloc>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				  						ssd1306_SetCursor(32, 32);
 8002f76:	2120      	movs	r1, #32
 8002f78:	2020      	movs	r0, #32
 8002f7a:	f7ff f9ed 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos3", Font_6x8, White);
 8002f7e:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <statemachine+0x83c>)
 8002f80:	2301      	movs	r3, #1
 8002f82:	ca06      	ldmia	r2, {r1, r2}
 8002f84:	481b      	ldr	r0, [pc, #108]	; (8002ff4 <statemachine+0x864>)
 8002f86:	f7ff f9c1 	bl	800230c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	2020      	movs	r0, #32
 8002f8e:	f7ff f9e3 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002f92:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <statemachine+0x83c>)
 8002f94:	2301      	movs	r3, #1
 8002f96:	ca06      	ldmia	r2, {r1, r2}
 8002f98:	4811      	ldr	r0, [pc, #68]	; (8002fe0 <statemachine+0x850>)
 8002f9a:	f7ff f9b7 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 8002f9e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002fa2:	f00d fdcf 	bl	8010b44 <free>
				  					}
				  if(BTN_B>=1){
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <statemachine+0x854>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f340 80df 	ble.w	800316e <statemachine+0x9de>
				  					  posstate++;
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <statemachine+0x858>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <statemachine+0x858>)
 8002fba:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8002fbc:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <statemachine+0x854>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
				  				  }


				  break;
 8002fc2:	e0d4      	b.n	800316e <statemachine+0x9de>
 8002fc4:	200007e0 	.word	0x200007e0
 8002fc8:	0801697c 	.word	0x0801697c
 8002fcc:	20000008 	.word	0x20000008
 8002fd0:	08016988 	.word	0x08016988
 8002fd4:	08016954 	.word	0x08016954
 8002fd8:	08016960 	.word	0x08016960
 8002fdc:	0801698c 	.word	0x0801698c
 8002fe0:	0801692c 	.word	0x0801692c
 8002fe4:	20000824 	.word	0x20000824
 8002fe8:	2000082b 	.word	0x2000082b
 8002fec:	08016994 	.word	0x08016994
 8002ff0:	08016968 	.word	0x08016968
 8002ff4:	080169a0 	.word	0x080169a0
			  case STATE_ALT:
				  if(myData.fix == 1){
 8002ff8:	4bbd      	ldr	r3, [pc, #756]	; (80032f0 <statemachine+0xb60>)
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d17a      	bne.n	80030f6 <statemachine+0x966>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003000:	2014      	movs	r0, #20
 8003002:	f00d fd97 	bl	8010b34 <malloc>
 8003006:	4603      	mov	r3, r0
 8003008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				  						ssd1306_SetCursor(32, 32);
 800300c:	2120      	movs	r1, #32
 800300e:	2020      	movs	r0, #32
 8003010:	f7ff f9a2 	bl	8002358 <ssd1306_SetCursor>
				  						snprintf(str,15, "altitude:");
 8003014:	4ab7      	ldr	r2, [pc, #732]	; (80032f4 <statemachine+0xb64>)
 8003016:	210f      	movs	r1, #15
 8003018:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800301c:	f00f fc86 	bl	801292c <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003020:	4ab5      	ldr	r2, [pc, #724]	; (80032f8 <statemachine+0xb68>)
 8003022:	2301      	movs	r3, #1
 8003024:	ca06      	ldmia	r2, {r1, r2}
 8003026:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800302a:	f7ff f96f 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 800302e:	4bb0      	ldr	r3, [pc, #704]	; (80032f0 <statemachine+0xb60>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd fa88 	bl	8000548 <__aeabi_f2d>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	e9cd 2300 	strd	r2, r3, [sp]
 8003040:	4aae      	ldr	r2, [pc, #696]	; (80032fc <statemachine+0xb6c>)
 8003042:	210f      	movs	r1, #15
 8003044:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8003048:	f00f fc70 	bl	801292c <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 800304c:	2128      	movs	r1, #40	; 0x28
 800304e:	2020      	movs	r0, #32
 8003050:	f7ff f982 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003054:	4aa8      	ldr	r2, [pc, #672]	; (80032f8 <statemachine+0xb68>)
 8003056:	2301      	movs	r3, #1
 8003058:	ca06      	ldmia	r2, {r1, r2}
 800305a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800305e:	f7ff f955 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "Pressure:");
 8003062:	4aa7      	ldr	r2, [pc, #668]	; (8003300 <statemachine+0xb70>)
 8003064:	210f      	movs	r1, #15
 8003066:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800306a:	f00f fc5f 	bl	801292c <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 800306e:	2130      	movs	r1, #48	; 0x30
 8003070:	2020      	movs	r0, #32
 8003072:	f7ff f971 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003076:	4aa0      	ldr	r2, [pc, #640]	; (80032f8 <statemachine+0xb68>)
 8003078:	2301      	movs	r3, #1
 800307a:	ca06      	ldmia	r2, {r1, r2}
 800307c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8003080:	f7ff f944 	bl	800230c <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 8003084:	4b9a      	ldr	r3, [pc, #616]	; (80032f0 <statemachine+0xb60>)
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fd fa5d 	bl	8000548 <__aeabi_f2d>
 800308e:	a396      	add	r3, pc, #600	; (adr r3, 80032e8 <statemachine+0xb58>)
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f7fd fab0 	bl	80005f8 <__aeabi_dmul>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fda2 	bl	8000be8 <__aeabi_d2f>
 80030a4:	4603      	mov	r3, r0
 80030a6:	ee00 3a10 	vmov	s0, r3
 80030aa:	f012 faed 	bl	8015688 <expf>
 80030ae:	eef0 7a40 	vmov.f32	s15, s0
 80030b2:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8003304 <statemachine+0xb74>
 80030b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ba:	ee17 0a90 	vmov	r0, s15
 80030be:	f7fd fa43 	bl	8000548 <__aeabi_f2d>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	e9cd 2300 	strd	r2, r3, [sp]
 80030ca:	4a8f      	ldr	r2, [pc, #572]	; (8003308 <statemachine+0xb78>)
 80030cc:	210f      	movs	r1, #15
 80030ce:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80030d2:	f00f fc2b 	bl	801292c <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80030d6:	2138      	movs	r1, #56	; 0x38
 80030d8:	2020      	movs	r0, #32
 80030da:	f7ff f93d 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80030de:	4a86      	ldr	r2, [pc, #536]	; (80032f8 <statemachine+0xb68>)
 80030e0:	2301      	movs	r3, #1
 80030e2:	ca06      	ldmia	r2, {r1, r2}
 80030e4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80030e8:	f7ff f910 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 80030ec:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80030f0:	f00d fd28 	bl	8010b44 <free>
 80030f4:	e01d      	b.n	8003132 <statemachine+0x9a2>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 80030f6:	2014      	movs	r0, #20
 80030f8:	f00d fd1c 	bl	8010b34 <malloc>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				  						ssd1306_SetCursor(32, 32);
 8003102:	2120      	movs	r1, #32
 8003104:	2020      	movs	r0, #32
 8003106:	f7ff f927 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos4", Font_6x8, White);
 800310a:	4a7b      	ldr	r2, [pc, #492]	; (80032f8 <statemachine+0xb68>)
 800310c:	2301      	movs	r3, #1
 800310e:	ca06      	ldmia	r2, {r1, r2}
 8003110:	487e      	ldr	r0, [pc, #504]	; (800330c <statemachine+0xb7c>)
 8003112:	f7ff f8fb 	bl	800230c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003116:	212c      	movs	r1, #44	; 0x2c
 8003118:	2020      	movs	r0, #32
 800311a:	f7ff f91d 	bl	8002358 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800311e:	4a76      	ldr	r2, [pc, #472]	; (80032f8 <statemachine+0xb68>)
 8003120:	2301      	movs	r3, #1
 8003122:	ca06      	ldmia	r2, {r1, r2}
 8003124:	487a      	ldr	r0, [pc, #488]	; (8003310 <statemachine+0xb80>)
 8003126:	f7ff f8f1 	bl	800230c <ssd1306_WriteString>
				  						free(str);
 800312a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800312e:	f00d fd09 	bl	8010b44 <free>
				  					}
				  if(BTN_B>=1){
 8003132:	4b78      	ldr	r3, [pc, #480]	; (8003314 <statemachine+0xb84>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	dd1b      	ble.n	8003172 <statemachine+0x9e2>
				  					posstate--;
 800313a:	4b77      	ldr	r3, [pc, #476]	; (8003318 <statemachine+0xb88>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	3b01      	subs	r3, #1
 8003140:	b2da      	uxtb	r2, r3
 8003142:	4b75      	ldr	r3, [pc, #468]	; (8003318 <statemachine+0xb88>)
 8003144:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003146:	4b74      	ldr	r3, [pc, #464]	; (8003318 <statemachine+0xb88>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	3b01      	subs	r3, #1
 800314c:	b2da      	uxtb	r2, r3
 800314e:	4b72      	ldr	r3, [pc, #456]	; (8003318 <statemachine+0xb88>)
 8003150:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003152:	4b71      	ldr	r3, [pc, #452]	; (8003318 <statemachine+0xb88>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	3b01      	subs	r3, #1
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4b6f      	ldr	r3, [pc, #444]	; (8003318 <statemachine+0xb88>)
 800315c:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 800315e:	4b6d      	ldr	r3, [pc, #436]	; (8003314 <statemachine+0xb84>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
				  				  }
				  break;
 8003164:	e005      	b.n	8003172 <statemachine+0x9e2>
				  break;
 8003166:	bf00      	nop
 8003168:	e004      	b.n	8003174 <statemachine+0x9e4>
				  break;
 800316a:	bf00      	nop
 800316c:	e002      	b.n	8003174 <statemachine+0x9e4>
				  break;
 800316e:	bf00      	nop
 8003170:	e000      	b.n	8003174 <statemachine+0x9e4>
				  break;
 8003172:	bf00      	nop
			  }

					if(BTN_A>=1){
 8003174:	4b69      	ldr	r3, [pc, #420]	; (800331c <statemachine+0xb8c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f340 85e8 	ble.w	8003d4e <statemachine+0x15be>
							state++;
 800317e:	4b68      	ldr	r3, [pc, #416]	; (8003320 <statemachine+0xb90>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	3301      	adds	r3, #1
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4b66      	ldr	r3, [pc, #408]	; (8003320 <statemachine+0xb90>)
 8003188:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 800318a:	4b64      	ldr	r3, [pc, #400]	; (800331c <statemachine+0xb8c>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
						}
			  break;
 8003190:	f000 bddd 	b.w	8003d4e <statemachine+0x15be>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 8003194:	2000      	movs	r0, #0
 8003196:	f7fe ff9d 	bl	80020d4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 800319a:	4962      	ldr	r1, [pc, #392]	; (8003324 <statemachine+0xb94>)
 800319c:	4854      	ldr	r0, [pc, #336]	; (80032f0 <statemachine+0xb60>)
 800319e:	f7fe fe45 	bl	8001e2c <nmea_parse>
			  int heure=0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			  heure=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 80031a8:	4b51      	ldr	r3, [pc, #324]	; (80032f0 <statemachine+0xb60>)
 80031aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80031ae:	f003 020f 	and.w	r2, r3, #15
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b4c      	ldr	r3, [pc, #304]	; (80032f0 <statemachine+0xb60>)
 80031be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	4413      	add	r3, r2
 80031c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			  if((heure+2)>=24){
 80031cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031d0:	2b15      	cmp	r3, #21
 80031d2:	dd05      	ble.n	80031e0 <statemachine+0xa50>
				  heure=heure-22;
 80031d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031d8:	3b16      	subs	r3, #22
 80031da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031de:	e004      	b.n	80031ea <statemachine+0xa5a>
			  }
			  else{
				  heure=heure+2;
 80031e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031e4:	3302      	adds	r3, #2
 80031e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			  }

			  if(myData.fix == 1){
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <statemachine+0xb60>)
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	f040 82f9 	bne.w	80037e6 <statemachine+0x1056>

				  switch(hrstate){
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <statemachine+0xb98>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <statemachine+0xa74>
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	f000 809f 	beq.w	8003340 <statemachine+0xbb0>
 8003202:	e308      	b.n	8003816 <statemachine+0x1086>
				  case STATE_DIGIT:
					  char * str = (char*)malloc(sizeof(char)*20);
 8003204:	2014      	movs	r0, #20
 8003206:	f00d fc95 	bl	8010b34 <malloc>
 800320a:	4603      	mov	r3, r0
 800320c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
					  ssd1306_SetCursor(32, 32);
 8003210:	2120      	movs	r1, #32
 8003212:	2020      	movs	r0, #32
 8003214:	f7ff f8a0 	bl	8002358 <ssd1306_SetCursor>
					  ssd1306_WriteString("hr GMT+2:", Font_6x8, White);
 8003218:	4a37      	ldr	r2, [pc, #220]	; (80032f8 <statemachine+0xb68>)
 800321a:	2301      	movs	r3, #1
 800321c:	ca06      	ldmia	r2, {r1, r2}
 800321e:	4843      	ldr	r0, [pc, #268]	; (800332c <statemachine+0xb9c>)
 8003220:	f7ff f874 	bl	800230c <ssd1306_WriteString>
					 ssd1306_SetCursor(34, 42);
 8003224:	212a      	movs	r1, #42	; 0x2a
 8003226:	2022      	movs	r0, #34	; 0x22
 8003228:	f7ff f896 	bl	8002358 <ssd1306_SetCursor>
					 if(heure>=10){
 800322c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003230:	2b09      	cmp	r3, #9
 8003232:	dd11      	ble.n	8003258 <statemachine+0xac8>
					snprintf(str,15, "%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8003234:	4b2e      	ldr	r3, [pc, #184]	; (80032f0 <statemachine+0xb60>)
 8003236:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800323a:	461a      	mov	r2, r3
 800323c:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <statemachine+0xb60>)
 800323e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003242:	9301      	str	r3, [sp, #4]
 8003244:	9200      	str	r2, [sp, #0]
 8003246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800324a:	4a39      	ldr	r2, [pc, #228]	; (8003330 <statemachine+0xba0>)
 800324c:	210f      	movs	r1, #15
 800324e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003252:	f00f fb6b 	bl	801292c <sniprintf>
 8003256:	e010      	b.n	800327a <statemachine+0xaea>
					}
					else{
					 	snprintf(str,15, "0%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8003258:	4b25      	ldr	r3, [pc, #148]	; (80032f0 <statemachine+0xb60>)
 800325a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800325e:	461a      	mov	r2, r3
 8003260:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <statemachine+0xb60>)
 8003262:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003266:	9301      	str	r3, [sp, #4]
 8003268:	9200      	str	r2, [sp, #0]
 800326a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800326e:	4a31      	ldr	r2, [pc, #196]	; (8003334 <statemachine+0xba4>)
 8003270:	210f      	movs	r1, #15
 8003272:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003276:	f00f fb59 	bl	801292c <sniprintf>
					}
					ssd1306_WriteString(str, Font_7x10, White);
 800327a:	4a2f      	ldr	r2, [pc, #188]	; (8003338 <statemachine+0xba8>)
 800327c:	2301      	movs	r3, #1
 800327e:	ca06      	ldmia	r2, {r1, r2}
 8003280:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003284:	f7ff f842 	bl	800230c <ssd1306_WriteString>
					ssd1306_SetCursor(34, 52);
 8003288:	2134      	movs	r1, #52	; 0x34
 800328a:	2022      	movs	r0, #34	; 0x22
 800328c:	f7ff f864 	bl	8002358 <ssd1306_SetCursor>
					snprintf(str,15, "%c%c sec",myData.lastMeasure[4],myData.lastMeasure[5]);
 8003290:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <statemachine+0xb60>)
 8003292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003296:	461a      	mov	r2, r3
 8003298:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <statemachine+0xb60>)
 800329a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	4a26      	ldr	r2, [pc, #152]	; (800333c <statemachine+0xbac>)
 80032a4:	210f      	movs	r1, #15
 80032a6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80032aa:	f00f fb3f 	bl	801292c <sniprintf>
					ssd1306_WriteString(str, Font_6x8, White);
 80032ae:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <statemachine+0xb68>)
 80032b0:	2301      	movs	r3, #1
 80032b2:	ca06      	ldmia	r2, {r1, r2}
 80032b4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80032b8:	f7ff f828 	bl	800230c <ssd1306_WriteString>
					free(str);
 80032bc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80032c0:	f00d fc40 	bl	8010b44 <free>
					if(BTN_B>=1){
 80032c4:	4b13      	ldr	r3, [pc, #76]	; (8003314 <statemachine+0xb84>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f340 82a1 	ble.w	8003810 <statemachine+0x1080>
												hrstate++;
 80032ce:	4b16      	ldr	r3, [pc, #88]	; (8003328 <statemachine+0xb98>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	3301      	adds	r3, #1
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4b14      	ldr	r3, [pc, #80]	; (8003328 <statemachine+0xb98>)
 80032d8:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <statemachine+0xb84>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
											}




					  break;
 80032e0:	e296      	b.n	8003810 <statemachine+0x1080>
 80032e2:	bf00      	nop
 80032e4:	f3af 8000 	nop.w
 80032e8:	fb798882 	.word	0xfb798882
 80032ec:	bf1e1818 	.word	0xbf1e1818
 80032f0:	200007e0 	.word	0x200007e0
 80032f4:	080169a8 	.word	0x080169a8
 80032f8:	20000008 	.word	0x20000008
 80032fc:	080169b4 	.word	0x080169b4
 8003300:	080169bc 	.word	0x080169bc
 8003304:	447a0000 	.word	0x447a0000
 8003308:	080169c8 	.word	0x080169c8
 800330c:	080169d4 	.word	0x080169d4
 8003310:	0801692c 	.word	0x0801692c
 8003314:	20000824 	.word	0x20000824
 8003318:	2000082b 	.word	0x2000082b
 800331c:	20000820 	.word	0x20000820
 8003320:	20000828 	.word	0x20000828
 8003324:	200005e0 	.word	0x200005e0
 8003328:	20000829 	.word	0x20000829
 800332c:	080169dc 	.word	0x080169dc
 8003330:	080169e8 	.word	0x080169e8
 8003334:	080169f0 	.word	0x080169f0
 8003338:	20000010 	.word	0x20000010
 800333c:	080169fc 	.word	0x080169fc
				  case STATE_OLD:
					  if(heure>12){
 8003340:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003344:	2b0c      	cmp	r3, #12
 8003346:	dd04      	ble.n	8003352 <statemachine+0xbc2>
						  heure=heure-12;
 8003348:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800334c:	3b0c      	subs	r3, #12
 800334e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
					  }
					  int minute=0;
 8003352:	2300      	movs	r3, #0
 8003354:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					  minute=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8003358:	4b95      	ldr	r3, [pc, #596]	; (80035b0 <statemachine+0xe20>)
 800335a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800335e:	f003 020f 	and.w	r2, r3, #15
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	461a      	mov	r2, r3
 800336c:	4b90      	ldr	r3, [pc, #576]	; (80035b0 <statemachine+0xe20>)
 800336e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	4413      	add	r3, r2
 8003378:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					  ssd1306_DrawCircle(64, 48, 12, White);
 800337c:	2301      	movs	r3, #1
 800337e:	220c      	movs	r2, #12
 8003380:	2130      	movs	r1, #48	; 0x30
 8003382:	2040      	movs	r0, #64	; 0x40
 8003384:	f7ff f86c 	bl	8002460 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-heure)*M_PI/6)),48-floor(6*sin((3-heure)*M_PI/6)),White);
 8003388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800338c:	f1c3 0303 	rsb	r3, r3, #3
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd f8c7 	bl	8000524 <__aeabi_i2d>
 8003396:	a384      	add	r3, pc, #528	; (adr r3, 80035a8 <statemachine+0xe18>)
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	f7fd f92c 	bl	80005f8 <__aeabi_dmul>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4610      	mov	r0, r2
 80033a6:	4619      	mov	r1, r3
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	4b81      	ldr	r3, [pc, #516]	; (80035b4 <statemachine+0xe24>)
 80033ae:	f7fd fa4d 	bl	800084c <__aeabi_ddiv>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	ec43 2b17 	vmov	d7, r2, r3
 80033ba:	eeb0 0a47 	vmov.f32	s0, s14
 80033be:	eef0 0a67 	vmov.f32	s1, s15
 80033c2:	f012 f8b5 	bl	8015530 <cos>
 80033c6:	ec51 0b10 	vmov	r0, r1, d0
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	4b79      	ldr	r3, [pc, #484]	; (80035b4 <statemachine+0xe24>)
 80033d0:	f7fd f912 	bl	80005f8 <__aeabi_dmul>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	ec43 2b17 	vmov	d7, r2, r3
 80033dc:	eeb0 0a47 	vmov.f32	s0, s14
 80033e0:	eef0 0a67 	vmov.f32	s1, s15
 80033e4:	f012 f994 	bl	8015710 <floor>
 80033e8:	ec51 0b10 	vmov	r0, r1, d0
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	4b71      	ldr	r3, [pc, #452]	; (80035b8 <statemachine+0xe28>)
 80033f2:	f7fc ff4b 	bl	800028c <__adddf3>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4610      	mov	r0, r2
 80033fc:	4619      	mov	r1, r3
 80033fe:	f7fd fbd3 	bl	8000ba8 <__aeabi_d2uiz>
 8003402:	4603      	mov	r3, r0
 8003404:	b2dc      	uxtb	r4, r3
 8003406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800340a:	f1c3 0303 	rsb	r3, r3, #3
 800340e:	4618      	mov	r0, r3
 8003410:	f7fd f888 	bl	8000524 <__aeabi_i2d>
 8003414:	a364      	add	r3, pc, #400	; (adr r3, 80035a8 <statemachine+0xe18>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd f8ed 	bl	80005f8 <__aeabi_dmul>
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	4b62      	ldr	r3, [pc, #392]	; (80035b4 <statemachine+0xe24>)
 800342c:	f7fd fa0e 	bl	800084c <__aeabi_ddiv>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	ec43 2b17 	vmov	d7, r2, r3
 8003438:	eeb0 0a47 	vmov.f32	s0, s14
 800343c:	eef0 0a67 	vmov.f32	s1, s15
 8003440:	f012 f8ca 	bl	80155d8 <sin>
 8003444:	ec51 0b10 	vmov	r0, r1, d0
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	4b59      	ldr	r3, [pc, #356]	; (80035b4 <statemachine+0xe24>)
 800344e:	f7fd f8d3 	bl	80005f8 <__aeabi_dmul>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	ec43 2b17 	vmov	d7, r2, r3
 800345a:	eeb0 0a47 	vmov.f32	s0, s14
 800345e:	eef0 0a67 	vmov.f32	s1, s15
 8003462:	f012 f955 	bl	8015710 <floor>
 8003466:	ec53 2b10 	vmov	r2, r3, d0
 800346a:	f04f 0000 	mov.w	r0, #0
 800346e:	4953      	ldr	r1, [pc, #332]	; (80035bc <statemachine+0xe2c>)
 8003470:	f7fc ff0a 	bl	8000288 <__aeabi_dsub>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	f7fd fb94 	bl	8000ba8 <__aeabi_d2uiz>
 8003480:	4603      	mov	r3, r0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2201      	movs	r2, #1
 8003486:	9200      	str	r2, [sp, #0]
 8003488:	4622      	mov	r2, r4
 800348a:	2130      	movs	r1, #48	; 0x30
 800348c:	2040      	movs	r0, #64	; 0x40
 800348e:	f7fe ff7b 	bl	8002388 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-minute)*M_PI/30)),48-floor(12*sin((15-minute)*M_PI/30)),White);
 8003492:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003496:	f1c3 030f 	rsb	r3, r3, #15
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd f842 	bl	8000524 <__aeabi_i2d>
 80034a0:	a341      	add	r3, pc, #260	; (adr r3, 80035a8 <statemachine+0xe18>)
 80034a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a6:	f7fd f8a7 	bl	80005f8 <__aeabi_dmul>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	4b42      	ldr	r3, [pc, #264]	; (80035c0 <statemachine+0xe30>)
 80034b8:	f7fd f9c8 	bl	800084c <__aeabi_ddiv>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	ec43 2b17 	vmov	d7, r2, r3
 80034c4:	eeb0 0a47 	vmov.f32	s0, s14
 80034c8:	eef0 0a67 	vmov.f32	s1, s15
 80034cc:	f012 f830 	bl	8015530 <cos>
 80034d0:	ec51 0b10 	vmov	r0, r1, d0
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	4b3a      	ldr	r3, [pc, #232]	; (80035c4 <statemachine+0xe34>)
 80034da:	f7fd f88d 	bl	80005f8 <__aeabi_dmul>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	ec43 2b17 	vmov	d7, r2, r3
 80034e6:	eeb0 0a47 	vmov.f32	s0, s14
 80034ea:	eef0 0a67 	vmov.f32	s1, s15
 80034ee:	f012 f90f 	bl	8015710 <floor>
 80034f2:	ec51 0b10 	vmov	r0, r1, d0
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <statemachine+0xe28>)
 80034fc:	f7fc fec6 	bl	800028c <__adddf3>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4610      	mov	r0, r2
 8003506:	4619      	mov	r1, r3
 8003508:	f7fd fb4e 	bl	8000ba8 <__aeabi_d2uiz>
 800350c:	4603      	mov	r3, r0
 800350e:	b2dc      	uxtb	r4, r3
 8003510:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003514:	f1c3 030f 	rsb	r3, r3, #15
 8003518:	4618      	mov	r0, r3
 800351a:	f7fd f803 	bl	8000524 <__aeabi_i2d>
 800351e:	a322      	add	r3, pc, #136	; (adr r3, 80035a8 <statemachine+0xe18>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fd f868 	bl	80005f8 <__aeabi_dmul>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <statemachine+0xe30>)
 8003536:	f7fd f989 	bl	800084c <__aeabi_ddiv>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	ec43 2b17 	vmov	d7, r2, r3
 8003542:	eeb0 0a47 	vmov.f32	s0, s14
 8003546:	eef0 0a67 	vmov.f32	s1, s15
 800354a:	f012 f845 	bl	80155d8 <sin>
 800354e:	ec51 0b10 	vmov	r0, r1, d0
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <statemachine+0xe34>)
 8003558:	f7fd f84e 	bl	80005f8 <__aeabi_dmul>
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	ec43 2b17 	vmov	d7, r2, r3
 8003564:	eeb0 0a47 	vmov.f32	s0, s14
 8003568:	eef0 0a67 	vmov.f32	s1, s15
 800356c:	f012 f8d0 	bl	8015710 <floor>
 8003570:	ec53 2b10 	vmov	r2, r3, d0
 8003574:	f04f 0000 	mov.w	r0, #0
 8003578:	4910      	ldr	r1, [pc, #64]	; (80035bc <statemachine+0xe2c>)
 800357a:	f7fc fe85 	bl	8000288 <__aeabi_dsub>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4610      	mov	r0, r2
 8003584:	4619      	mov	r1, r3
 8003586:	f7fd fb0f 	bl	8000ba8 <__aeabi_d2uiz>
 800358a:	4603      	mov	r3, r0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2201      	movs	r2, #1
 8003590:	9200      	str	r2, [sp, #0]
 8003592:	4622      	mov	r2, r4
 8003594:	2130      	movs	r1, #48	; 0x30
 8003596:	2040      	movs	r0, #64	; 0x40
 8003598:	f7fe fef6 	bl	8002388 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 800359c:	2300      	movs	r3, #0
 800359e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035a2:	e10d      	b.n	80037c0 <statemachine+0x1030>
 80035a4:	f3af 8000 	nop.w
 80035a8:	54442d18 	.word	0x54442d18
 80035ac:	400921fb 	.word	0x400921fb
 80035b0:	200007e0 	.word	0x200007e0
 80035b4:	40180000 	.word	0x40180000
 80035b8:	40500000 	.word	0x40500000
 80035bc:	40480000 	.word	0x40480000
 80035c0:	403e0000 	.word	0x403e0000
 80035c4:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 80035c8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80035cc:	f7fc ffaa 	bl	8000524 <__aeabi_i2d>
 80035d0:	a3c9      	add	r3, pc, #804	; (adr r3, 80038f8 <statemachine+0x1168>)
 80035d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d6:	f7fd f80f 	bl	80005f8 <__aeabi_dmul>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	4bc6      	ldr	r3, [pc, #792]	; (8003900 <statemachine+0x1170>)
 80035e8:	f7fd f930 	bl	800084c <__aeabi_ddiv>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	ec43 2b17 	vmov	d7, r2, r3
 80035f4:	eeb0 0a47 	vmov.f32	s0, s14
 80035f8:	eef0 0a67 	vmov.f32	s1, s15
 80035fc:	f011 ff98 	bl	8015530 <cos>
 8003600:	ec51 0b10 	vmov	r0, r1, d0
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	4bbe      	ldr	r3, [pc, #760]	; (8003904 <statemachine+0x1174>)
 800360a:	f7fc fff5 	bl	80005f8 <__aeabi_dmul>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	ec43 2b17 	vmov	d7, r2, r3
 8003616:	eeb0 0a47 	vmov.f32	s0, s14
 800361a:	eef0 0a67 	vmov.f32	s1, s15
 800361e:	f012 f877 	bl	8015710 <floor>
 8003622:	ec51 0b10 	vmov	r0, r1, d0
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	4bb7      	ldr	r3, [pc, #732]	; (8003908 <statemachine+0x1178>)
 800362c:	f7fc fe2e 	bl	800028c <__adddf3>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4610      	mov	r0, r2
 8003636:	4619      	mov	r1, r3
 8003638:	f7fd fab6 	bl	8000ba8 <__aeabi_d2uiz>
 800363c:	4603      	mov	r3, r0
 800363e:	b2dc      	uxtb	r4, r3
 8003640:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003644:	f7fc ff6e 	bl	8000524 <__aeabi_i2d>
 8003648:	a3ab      	add	r3, pc, #684	; (adr r3, 80038f8 <statemachine+0x1168>)
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f7fc ffd3 	bl	80005f8 <__aeabi_dmul>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	4ba8      	ldr	r3, [pc, #672]	; (8003900 <statemachine+0x1170>)
 8003660:	f7fd f8f4 	bl	800084c <__aeabi_ddiv>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	ec43 2b17 	vmov	d7, r2, r3
 800366c:	eeb0 0a47 	vmov.f32	s0, s14
 8003670:	eef0 0a67 	vmov.f32	s1, s15
 8003674:	f011 ffb0 	bl	80155d8 <sin>
 8003678:	ec51 0b10 	vmov	r0, r1, d0
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	4ba0      	ldr	r3, [pc, #640]	; (8003904 <statemachine+0x1174>)
 8003682:	f7fc ffb9 	bl	80005f8 <__aeabi_dmul>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	ec43 2b17 	vmov	d7, r2, r3
 800368e:	eeb0 0a47 	vmov.f32	s0, s14
 8003692:	eef0 0a67 	vmov.f32	s1, s15
 8003696:	f012 f83b 	bl	8015710 <floor>
 800369a:	ec51 0b10 	vmov	r0, r1, d0
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	4b9a      	ldr	r3, [pc, #616]	; (800390c <statemachine+0x117c>)
 80036a4:	f7fc fdf2 	bl	800028c <__adddf3>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4610      	mov	r0, r2
 80036ae:	4619      	mov	r1, r3
 80036b0:	f7fd fa7a 	bl	8000ba8 <__aeabi_d2uiz>
 80036b4:	4603      	mov	r3, r0
 80036b6:	b2dd      	uxtb	r5, r3
 80036b8:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80036bc:	f7fc ff32 	bl	8000524 <__aeabi_i2d>
 80036c0:	a38d      	add	r3, pc, #564	; (adr r3, 80038f8 <statemachine+0x1168>)
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	f7fc ff97 	bl	80005f8 <__aeabi_dmul>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	4b8a      	ldr	r3, [pc, #552]	; (8003900 <statemachine+0x1170>)
 80036d8:	f7fd f8b8 	bl	800084c <__aeabi_ddiv>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	ec43 2b17 	vmov	d7, r2, r3
 80036e4:	eeb0 0a47 	vmov.f32	s0, s14
 80036e8:	eef0 0a67 	vmov.f32	s1, s15
 80036ec:	f011 ff20 	bl	8015530 <cos>
 80036f0:	ec51 0b10 	vmov	r0, r1, d0
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	4b85      	ldr	r3, [pc, #532]	; (8003910 <statemachine+0x1180>)
 80036fa:	f7fc ff7d 	bl	80005f8 <__aeabi_dmul>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	ec43 2b17 	vmov	d7, r2, r3
 8003706:	eeb0 0a47 	vmov.f32	s0, s14
 800370a:	eef0 0a67 	vmov.f32	s1, s15
 800370e:	f011 ffff 	bl	8015710 <floor>
 8003712:	ec51 0b10 	vmov	r0, r1, d0
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	4b7b      	ldr	r3, [pc, #492]	; (8003908 <statemachine+0x1178>)
 800371c:	f7fc fdb6 	bl	800028c <__adddf3>
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	f7fd fa3e 	bl	8000ba8 <__aeabi_d2uiz>
 800372c:	4603      	mov	r3, r0
 800372e:	b2de      	uxtb	r6, r3
 8003730:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003734:	f7fc fef6 	bl	8000524 <__aeabi_i2d>
 8003738:	a36f      	add	r3, pc, #444	; (adr r3, 80038f8 <statemachine+0x1168>)
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	f7fc ff5b 	bl	80005f8 <__aeabi_dmul>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4610      	mov	r0, r2
 8003748:	4619      	mov	r1, r3
 800374a:	f04f 0200 	mov.w	r2, #0
 800374e:	4b6c      	ldr	r3, [pc, #432]	; (8003900 <statemachine+0x1170>)
 8003750:	f7fd f87c 	bl	800084c <__aeabi_ddiv>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	ec43 2b17 	vmov	d7, r2, r3
 800375c:	eeb0 0a47 	vmov.f32	s0, s14
 8003760:	eef0 0a67 	vmov.f32	s1, s15
 8003764:	f011 ff38 	bl	80155d8 <sin>
 8003768:	ec51 0b10 	vmov	r0, r1, d0
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	4b67      	ldr	r3, [pc, #412]	; (8003910 <statemachine+0x1180>)
 8003772:	f7fc ff41 	bl	80005f8 <__aeabi_dmul>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	ec43 2b17 	vmov	d7, r2, r3
 800377e:	eeb0 0a47 	vmov.f32	s0, s14
 8003782:	eef0 0a67 	vmov.f32	s1, s15
 8003786:	f011 ffc3 	bl	8015710 <floor>
 800378a:	ec51 0b10 	vmov	r0, r1, d0
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	4b5e      	ldr	r3, [pc, #376]	; (800390c <statemachine+0x117c>)
 8003794:	f7fc fd7a 	bl	800028c <__adddf3>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4610      	mov	r0, r2
 800379e:	4619      	mov	r1, r3
 80037a0:	f7fd fa02 	bl	8000ba8 <__aeabi_d2uiz>
 80037a4:	4603      	mov	r3, r0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2201      	movs	r2, #1
 80037aa:	9200      	str	r2, [sp, #0]
 80037ac:	4632      	mov	r2, r6
 80037ae:	4629      	mov	r1, r5
 80037b0:	4620      	mov	r0, r4
 80037b2:	f7fe fde9 	bl	8002388 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 80037b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037ba:	3301      	adds	r3, #1
 80037bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037c4:	2b0c      	cmp	r3, #12
 80037c6:	f77f aeff 	ble.w	80035c8 <statemachine+0xe38>
					  }
					  if(BTN_B>=1){
 80037ca:	4b52      	ldr	r3, [pc, #328]	; (8003914 <statemachine+0x1184>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	dd20      	ble.n	8003814 <statemachine+0x1084>
					  	hrstate--;
 80037d2:	4b51      	ldr	r3, [pc, #324]	; (8003918 <statemachine+0x1188>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <statemachine+0x1188>)
 80037dc:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 80037de:	4b4d      	ldr	r3, [pc, #308]	; (8003914 <statemachine+0x1184>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]
					  }


					  break;
 80037e4:	e016      	b.n	8003814 <statemachine+0x1084>

				  }

			  			 					}
			  			 	else{ //if the GPS doesn't have a fix, print a message
			  			 						char *str = (char*)malloc(sizeof(char)*20);
 80037e6:	2014      	movs	r0, #20
 80037e8:	f00d f9a4 	bl	8010b34 <malloc>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			  			 						ssd1306_SetCursor(32, 44);
 80037f2:	212c      	movs	r1, #44	; 0x2c
 80037f4:	2020      	movs	r0, #32
 80037f6:	f7fe fdaf 	bl	8002358 <ssd1306_SetCursor>
			  			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 80037fa:	4a48      	ldr	r2, [pc, #288]	; (800391c <statemachine+0x118c>)
 80037fc:	2301      	movs	r3, #1
 80037fe:	ca06      	ldmia	r2, {r1, r2}
 8003800:	4847      	ldr	r0, [pc, #284]	; (8003920 <statemachine+0x1190>)
 8003802:	f7fe fd83 	bl	800230c <ssd1306_WriteString>
			  			 						free(str);
 8003806:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800380a:	f00d f99b 	bl	8010b44 <free>
 800380e:	e002      	b.n	8003816 <statemachine+0x1086>
					  break;
 8003810:	bf00      	nop
 8003812:	e000      	b.n	8003816 <statemachine+0x1086>
					  break;
 8003814:	bf00      	nop
			  			 	}
				  if(BTN_A>=1){
 8003816:	4b43      	ldr	r3, [pc, #268]	; (8003924 <statemachine+0x1194>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f340 8299 	ble.w	8003d52 <statemachine+0x15c2>
			  		state++;
 8003820:	4b41      	ldr	r3, [pc, #260]	; (8003928 <statemachine+0x1198>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	3301      	adds	r3, #1
 8003826:	b2da      	uxtb	r2, r3
 8003828:	4b3f      	ldr	r3, [pc, #252]	; (8003928 <statemachine+0x1198>)
 800382a:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 800382c:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <statemachine+0x1194>)
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8003832:	4b38      	ldr	r3, [pc, #224]	; (8003914 <statemachine+0x1184>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8003838:	e28b      	b.n	8003d52 <statemachine+0x15c2>
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 800383a:	2000      	movs	r0, #0
 800383c:	f7fe fc4a 	bl	80020d4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003840:	493a      	ldr	r1, [pc, #232]	; (800392c <statemachine+0x119c>)
 8003842:	483b      	ldr	r0, [pc, #236]	; (8003930 <statemachine+0x11a0>)
 8003844:	f7fe faf2 	bl	8001e2c <nmea_parse>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8003848:	4b39      	ldr	r3, [pc, #228]	; (8003930 <statemachine+0x11a0>)
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	2b01      	cmp	r3, #1
 800384e:	d179      	bne.n	8003944 <statemachine+0x11b4>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 8003850:	2014      	movs	r0, #20
 8003852:	f00d f96f 	bl	8010b34 <malloc>
 8003856:	4603      	mov	r3, r0
 8003858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 800385c:	4b34      	ldr	r3, [pc, #208]	; (8003930 <statemachine+0x11a0>)
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	4618      	mov	r0, r3
 8003862:	f7fc fe71 	bl	8000548 <__aeabi_f2d>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	e9cd 2300 	strd	r2, r3, [sp]
 800386e:	4a31      	ldr	r2, [pc, #196]	; (8003934 <statemachine+0x11a4>)
 8003870:	210f      	movs	r1, #15
 8003872:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8003876:	f00f f859 	bl	801292c <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 800387a:	2120      	movs	r1, #32
 800387c:	2020      	movs	r0, #32
 800387e:	f7fe fd6b 	bl	8002358 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8003882:	4a26      	ldr	r2, [pc, #152]	; (800391c <statemachine+0x118c>)
 8003884:	2301      	movs	r3, #1
 8003886:	ca06      	ldmia	r2, {r1, r2}
 8003888:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800388c:	f7fe fd3e 	bl	800230c <ssd1306_WriteString>
			 			 						snprintf(str,15, "SatNb :%d",myData.satelliteCount);
 8003890:	4b27      	ldr	r3, [pc, #156]	; (8003930 <statemachine+0x11a0>)
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	4a28      	ldr	r2, [pc, #160]	; (8003938 <statemachine+0x11a8>)
 8003896:	210f      	movs	r1, #15
 8003898:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800389c:	f00f f846 	bl	801292c <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 80038a0:	212a      	movs	r1, #42	; 0x2a
 80038a2:	2020      	movs	r0, #32
 80038a4:	f7fe fd58 	bl	8002358 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80038a8:	4a1c      	ldr	r2, [pc, #112]	; (800391c <statemachine+0x118c>)
 80038aa:	2301      	movs	r3, #1
 80038ac:	ca06      	ldmia	r2, {r1, r2}
 80038ae:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80038b2:	f7fe fd2b 	bl	800230c <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 80038b6:	2132      	movs	r1, #50	; 0x32
 80038b8:	2020      	movs	r0, #32
 80038ba:	f7fe fd4d 	bl	8002358 <ssd1306_SetCursor>
			 			 						snprintf(str,15,  "T=%0.2fC",temp);
 80038be:	4b1f      	ldr	r3, [pc, #124]	; (800393c <statemachine+0x11ac>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fc fe40 	bl	8000548 <__aeabi_f2d>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	e9cd 2300 	strd	r2, r3, [sp]
 80038d0:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <statemachine+0x11b0>)
 80038d2:	210f      	movs	r1, #15
 80038d4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80038d8:	f00f f828 	bl	801292c <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80038dc:	4a0f      	ldr	r2, [pc, #60]	; (800391c <statemachine+0x118c>)
 80038de:	2301      	movs	r3, #1
 80038e0:	ca06      	ldmia	r2, {r1, r2}
 80038e2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80038e6:	f7fe fd11 	bl	800230c <ssd1306_WriteString>
			 			 						free(str);
 80038ea:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80038ee:	f00d f929 	bl	8010b44 <free>
 80038f2:	e05f      	b.n	80039b4 <statemachine+0x1224>
 80038f4:	f3af 8000 	nop.w
 80038f8:	54442d18 	.word	0x54442d18
 80038fc:	400921fb 	.word	0x400921fb
 8003900:	40180000 	.word	0x40180000
 8003904:	40240000 	.word	0x40240000
 8003908:	40500000 	.word	0x40500000
 800390c:	40480000 	.word	0x40480000
 8003910:	40280000 	.word	0x40280000
 8003914:	20000824 	.word	0x20000824
 8003918:	20000829 	.word	0x20000829
 800391c:	20000008 	.word	0x20000008
 8003920:	0801692c 	.word	0x0801692c
 8003924:	20000820 	.word	0x20000820
 8003928:	20000828 	.word	0x20000828
 800392c:	200005e0 	.word	0x200005e0
 8003930:	200007e0 	.word	0x200007e0
 8003934:	08016a08 	.word	0x08016a08
 8003938:	08016a14 	.word	0x08016a14
 800393c:	20000834 	.word	0x20000834
 8003940:	08016a20 	.word	0x08016a20
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 8003944:	2014      	movs	r0, #20
 8003946:	f00d f8f5 	bl	8010b34 <malloc>
 800394a:	4603      	mov	r3, r0
 800394c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			 			 						ssd1306_SetCursor(32, 32);
 8003950:	2120      	movs	r1, #32
 8003952:	2020      	movs	r0, #32
 8003954:	f7fe fd00 	bl	8002358 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("INFO", Font_6x8, White);
 8003958:	4a55      	ldr	r2, [pc, #340]	; (8003ab0 <statemachine+0x1320>)
 800395a:	2301      	movs	r3, #1
 800395c:	ca06      	ldmia	r2, {r1, r2}
 800395e:	4855      	ldr	r0, [pc, #340]	; (8003ab4 <statemachine+0x1324>)
 8003960:	f7fe fcd4 	bl	800230c <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 41);
 8003964:	2129      	movs	r1, #41	; 0x29
 8003966:	2020      	movs	r0, #32
 8003968:	f7fe fcf6 	bl	8002358 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800396c:	4a50      	ldr	r2, [pc, #320]	; (8003ab0 <statemachine+0x1320>)
 800396e:	2301      	movs	r3, #1
 8003970:	ca06      	ldmia	r2, {r1, r2}
 8003972:	4851      	ldr	r0, [pc, #324]	; (8003ab8 <statemachine+0x1328>)
 8003974:	f7fe fcca 	bl	800230c <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 8003978:	2132      	movs	r1, #50	; 0x32
 800397a:	2020      	movs	r0, #32
 800397c:	f7fe fcec 	bl	8002358 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "T=%0.2fC",temp);
 8003980:	4b4e      	ldr	r3, [pc, #312]	; (8003abc <statemachine+0x132c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f7fc fddf 	bl	8000548 <__aeabi_f2d>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	e9cd 2300 	strd	r2, r3, [sp]
 8003992:	4a4b      	ldr	r2, [pc, #300]	; (8003ac0 <statemachine+0x1330>)
 8003994:	210f      	movs	r1, #15
 8003996:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800399a:	f00e ffc7 	bl	801292c <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 800399e:	4a44      	ldr	r2, [pc, #272]	; (8003ab0 <statemachine+0x1320>)
 80039a0:	2301      	movs	r3, #1
 80039a2:	ca06      	ldmia	r2, {r1, r2}
 80039a4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80039a8:	f7fe fcb0 	bl	800230c <ssd1306_WriteString>
			 			 						free(str);
 80039ac:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80039b0:	f00d f8c8 	bl	8010b44 <free>
			 			 					}
			  if(BTN_A>=1){
 80039b4:	4b43      	ldr	r3, [pc, #268]	; (8003ac4 <statemachine+0x1334>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f340 81cc 	ble.w	8003d56 <statemachine+0x15c6>
			  		state++;
 80039be:	4b42      	ldr	r3, [pc, #264]	; (8003ac8 <statemachine+0x1338>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	3301      	adds	r3, #1
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	4b40      	ldr	r3, [pc, #256]	; (8003ac8 <statemachine+0x1338>)
 80039c8:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 80039ca:	4b3e      	ldr	r3, [pc, #248]	; (8003ac4 <statemachine+0x1334>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 80039d0:	4b3e      	ldr	r3, [pc, #248]	; (8003acc <statemachine+0x133c>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 80039d6:	e1be      	b.n	8003d56 <statemachine+0x15c6>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 80039d8:	2000      	movs	r0, #0
 80039da:	f7fe fb7b 	bl	80020d4 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 80039de:	2120      	movs	r1, #32
 80039e0:	2020      	movs	r0, #32
 80039e2:	f7fe fcb9 	bl	8002358 <ssd1306_SetCursor>
			  char *str = (char*)malloc(sizeof(char)*20);
 80039e6:	2014      	movs	r0, #20
 80039e8:	f00d f8a4 	bl	8010b34 <malloc>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			  ssd1306_WriteString("chrono", Font_6x8, White);
 80039f2:	4a2f      	ldr	r2, [pc, #188]	; (8003ab0 <statemachine+0x1320>)
 80039f4:	2301      	movs	r3, #1
 80039f6:	ca06      	ldmia	r2, {r1, r2}
 80039f8:	4835      	ldr	r0, [pc, #212]	; (8003ad0 <statemachine+0x1340>)
 80039fa:	f7fe fc87 	bl	800230c <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 80039fe:	2128      	movs	r1, #40	; 0x28
 8003a00:	2020      	movs	r0, #32
 8003a02:	f7fe fca9 	bl	8002358 <ssd1306_SetCursor>

			  switch(chronostate){
 8003a06:	4b33      	ldr	r3, [pc, #204]	; (8003ad4 <statemachine+0x1344>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d038      	beq.n	8003a80 <statemachine+0x12f0>
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	dc6d      	bgt.n	8003aee <statemachine+0x135e>
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <statemachine+0x128c>
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d01d      	beq.n	8003a56 <statemachine+0x12c6>
 8003a1a:	e068      	b.n	8003aee <statemachine+0x135e>
			  case STATE_RESET:
				  min=0;
 8003a1c:	4b2e      	ldr	r3, [pc, #184]	; (8003ad8 <statemachine+0x1348>)
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8003a24:	4b2d      	ldr	r3, [pc, #180]	; (8003adc <statemachine+0x134c>)
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8003a2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ae0 <statemachine+0x1350>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
				  	 if(BTN_B>=1){
 8003a32:	4b26      	ldr	r3, [pc, #152]	; (8003acc <statemachine+0x133c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	dd36      	ble.n	8003aa8 <statemachine+0x1318>
				  		chronostate++;
 8003a3a:	4b26      	ldr	r3, [pc, #152]	; (8003ad4 <statemachine+0x1344>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <statemachine+0x1344>)
 8003a44:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8003a46:	4b21      	ldr	r3, [pc, #132]	; (8003acc <statemachine+0x133c>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8003a4c:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <statemachine+0x1354>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a25      	ldr	r2, [pc, #148]	; (8003ae8 <statemachine+0x1358>)
 8003a52:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8003a54:	e028      	b.n	8003aa8 <statemachine+0x1318>
			  case STATE_RUN:
				  calctime=uwTick-starttime;
 8003a56:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <statemachine+0x1354>)
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <statemachine+0x1358>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	4a1f      	ldr	r2, [pc, #124]	; (8003ae0 <statemachine+0x1350>)
 8003a62:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8003a64:	4b19      	ldr	r3, [pc, #100]	; (8003acc <statemachine+0x133c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	dd1f      	ble.n	8003aac <statemachine+0x131c>
				  		chronostate++;
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <statemachine+0x1344>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	3301      	adds	r3, #1
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <statemachine+0x1344>)
 8003a76:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8003a78:	4b14      	ldr	r3, [pc, #80]	; (8003acc <statemachine+0x133c>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8003a7e:	e015      	b.n	8003aac <statemachine+0x131c>
			  case STATE_PAUSE:
				  if(BTN_B>=1){
 8003a80:	4b12      	ldr	r3, [pc, #72]	; (8003acc <statemachine+0x133c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	dd31      	ble.n	8003aec <statemachine+0x135c>
				  			chronostate--;
 8003a88:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <statemachine+0x1344>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b2da      	uxtb	r2, r3
 8003a90:	4b10      	ldr	r3, [pc, #64]	; (8003ad4 <statemachine+0x1344>)
 8003a92:	701a      	strb	r2, [r3, #0]
				  			chronostate--;
 8003a94:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <statemachine+0x1344>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <statemachine+0x1344>)
 8003a9e:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <statemachine+0x133c>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
			 }

				  break;
 8003aa6:	e021      	b.n	8003aec <statemachine+0x135c>
				  break;
 8003aa8:	bf00      	nop
 8003aaa:	e020      	b.n	8003aee <statemachine+0x135e>
				  break;
 8003aac:	bf00      	nop
 8003aae:	e01e      	b.n	8003aee <statemachine+0x135e>
 8003ab0:	20000008 	.word	0x20000008
 8003ab4:	08016a2c 	.word	0x08016a2c
 8003ab8:	0801692c 	.word	0x0801692c
 8003abc:	20000834 	.word	0x20000834
 8003ac0:	08016a20 	.word	0x08016a20
 8003ac4:	20000820 	.word	0x20000820
 8003ac8:	20000828 	.word	0x20000828
 8003acc:	20000824 	.word	0x20000824
 8003ad0:	08016a34 	.word	0x08016a34
 8003ad4:	2000082c 	.word	0x2000082c
 8003ad8:	20000c88 	.word	0x20000c88
 8003adc:	20000c84 	.word	0x20000c84
 8003ae0:	20000c90 	.word	0x20000c90
 8003ae4:	20000c9c 	.word	0x20000c9c
 8003ae8:	20000c8c 	.word	0x20000c8c
				  break;
 8003aec:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8003aee:	4ba0      	ldr	r3, [pc, #640]	; (8003d70 <statemachine+0x15e0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afa:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003d74 <statemachine+0x15e4>
 8003afe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b02:	ee16 0a90 	vmov	r0, s13
 8003b06:	f7fc fd1f 	bl	8000548 <__aeabi_f2d>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	ec43 2b10 	vmov	d0, r2, r3
 8003b12:	f011 fdfd 	bl	8015710 <floor>
 8003b16:	ec53 2b10 	vmov	r2, r3, d0
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f7fd f863 	bl	8000be8 <__aeabi_d2f>
 8003b22:	4603      	mov	r3, r0
 8003b24:	4a94      	ldr	r2, [pc, #592]	; (8003d78 <statemachine+0x15e8>)
 8003b26:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8003b28:	4b91      	ldr	r3, [pc, #580]	; (8003d70 <statemachine+0x15e0>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b34:	4b90      	ldr	r3, [pc, #576]	; (8003d78 <statemachine+0x15e8>)
 8003b36:	edd3 7a00 	vldr	s15, [r3]
 8003b3a:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8003d74 <statemachine+0x15e4>
 8003b3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b46:	eddf 6a8d 	vldr	s13, [pc, #564]	; 8003d7c <statemachine+0x15ec>
 8003b4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b4e:	4b8c      	ldr	r3, [pc, #560]	; (8003d80 <statemachine+0x15f0>)
 8003b50:	edc3 7a00 	vstr	s15, [r3]
			  snprintf(str,15, "%0.0fmin",min);
 8003b54:	4b88      	ldr	r3, [pc, #544]	; (8003d78 <statemachine+0x15e8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fc fcf5 	bl	8000548 <__aeabi_f2d>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	e9cd 2300 	strd	r2, r3, [sp]
 8003b66:	4a87      	ldr	r2, [pc, #540]	; (8003d84 <statemachine+0x15f4>)
 8003b68:	210f      	movs	r1, #15
 8003b6a:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003b6e:	f00e fedd 	bl	801292c <sniprintf>
			  ssd1306_WriteString(str, Font_7x10, White);
 8003b72:	4a85      	ldr	r2, [pc, #532]	; (8003d88 <statemachine+0x15f8>)
 8003b74:	2301      	movs	r3, #1
 8003b76:	ca06      	ldmia	r2, {r1, r2}
 8003b78:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003b7c:	f7fe fbc6 	bl	800230c <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8003b80:	2132      	movs	r1, #50	; 0x32
 8003b82:	2020      	movs	r0, #32
 8003b84:	f7fe fbe8 	bl	8002358 <ssd1306_SetCursor>
			  snprintf(str,15, "%0.3fsec",seconde);
 8003b88:	4b7d      	ldr	r3, [pc, #500]	; (8003d80 <statemachine+0x15f0>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fc fcdb 	bl	8000548 <__aeabi_f2d>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	e9cd 2300 	strd	r2, r3, [sp]
 8003b9a:	4a7c      	ldr	r2, [pc, #496]	; (8003d8c <statemachine+0x15fc>)
 8003b9c:	210f      	movs	r1, #15
 8003b9e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003ba2:	f00e fec3 	bl	801292c <sniprintf>
			  ssd1306_WriteString(str, Font_6x8, White);
 8003ba6:	4a7a      	ldr	r2, [pc, #488]	; (8003d90 <statemachine+0x1600>)
 8003ba8:	2301      	movs	r3, #1
 8003baa:	ca06      	ldmia	r2, {r1, r2}
 8003bac:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003bb0:	f7fe fbac 	bl	800230c <ssd1306_WriteString>
			  free(str);
 8003bb4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003bb8:	f00c ffc4 	bl	8010b44 <free>


			  if(BTN_A>=1){
 8003bbc:	4b75      	ldr	r3, [pc, #468]	; (8003d94 <statemachine+0x1604>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f340 80ca 	ble.w	8003d5a <statemachine+0x15ca>
				  state++;
 8003bc6:	4b74      	ldr	r3, [pc, #464]	; (8003d98 <statemachine+0x1608>)
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4b72      	ldr	r3, [pc, #456]	; (8003d98 <statemachine+0x1608>)
 8003bd0:	701a      	strb	r2, [r3, #0]
				  				  				  				  			uint8_t baudchange[]={0x24, 0x50, 0x4D, 0x54,0x4B ,0x32, 0x35 ,0x31 ,0x2C ,0x33, 0x38, 0x34 ,0x30, 0x30 ,0x2A, 0x32 ,0x37, 0x0A};
 8003bd2:	4b72      	ldr	r3, [pc, #456]	; (8003d9c <statemachine+0x160c>)
 8003bd4:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8003bd8:	461d      	mov	r5, r3
 8003bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bde:	682b      	ldr	r3, [r5, #0]
 8003be0:	8023      	strh	r3, [r4, #0]
				  				  				  				  		__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);
 8003be2:	4b6f      	ldr	r3, [pc, #444]	; (8003da0 <statemachine+0x1610>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4b6d      	ldr	r3, [pc, #436]	; (8003da0 <statemachine+0x1610>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0204 	bic.w	r2, r2, #4
 8003bf0:	601a      	str	r2, [r3, #0]
				  				  				  				  	HAL_UART_Transmit_IT(&hlpuart1,(uint8_t *)baudchange,18);
 8003bf2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003bf6:	2212      	movs	r2, #18
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	486a      	ldr	r0, [pc, #424]	; (8003da4 <statemachine+0x1614>)
 8003bfc:	f006 fee0 	bl	800a9c0 <HAL_UART_Transmit_IT>
				  				  				  				  			uint8_t disablenmea[]={0x24, 0x50, 0x4D, 0x54, 0x4B, 0x33, 0x31, 0x34, 0x2C, 0x30, 0x2C, 0x31, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30,
 8003c00:	4b69      	ldr	r3, [pc, #420]	; (8003da8 <statemachine+0x1618>)
 8003c02:	463c      	mov	r4, r7
 8003c04:	461d      	mov	r5, r3
 8003c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	7023      	strb	r3, [r4, #0]
				  				  				  				  					0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2C, 0x30, 0x2A, 0x32, 0x39};//$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29
				  				  				  				  		HAL_UART_Transmit_IT(&hlpuart1,(uint8_t *)disablenmea,49);
 8003c16:	463b      	mov	r3, r7
 8003c18:	2231      	movs	r2, #49	; 0x31
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4861      	ldr	r0, [pc, #388]	; (8003da4 <statemachine+0x1614>)
 8003c1e:	f006 fecf 	bl	800a9c0 <HAL_UART_Transmit_IT>
				  				  				  				  		uint8_t updaterate[]={0x24, 0x50, 0x4D, 0x54, 0x4B, 0x32, 0x32, 0x30, 0x2C, 0x20, 0x32, 0x30, 0x30, 0x2A, 0x32, 0x43};//$PMTK220, 200*2C
 8003c22:	4b62      	ldr	r3, [pc, #392]	; (8003dac <statemachine+0x161c>)
 8003c24:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8003c28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				  				  				  				  	HAL_UART_Transmit_IT(&hlpuart1,(uint8_t *)updaterate,16);
 8003c2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c32:	2210      	movs	r2, #16
 8003c34:	4619      	mov	r1, r3
 8003c36:	485b      	ldr	r0, [pc, #364]	; (8003da4 <statemachine+0x1614>)
 8003c38:	f006 fec2 	bl	800a9c0 <HAL_UART_Transmit_IT>
				  				  				  				  		HAL_UART_Abort(&hlpuart1);
 8003c3c:	4859      	ldr	r0, [pc, #356]	; (8003da4 <statemachine+0x1614>)
 8003c3e:	f006 ff69 	bl	800ab14 <HAL_UART_Abort>
				  				  				  				  			HAL_UART_DeInit(&hlpuart1);
 8003c42:	4858      	ldr	r0, [pc, #352]	; (8003da4 <statemachine+0x1614>)
 8003c44:	f006 fe7e 	bl	800a944 <HAL_UART_DeInit>
				  				  				  				  			hlpuart1.Init.BaudRate = 38400;
 8003c48:	4b56      	ldr	r3, [pc, #344]	; (8003da4 <statemachine+0x1614>)
 8003c4a:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003c4e:	605a      	str	r2, [r3, #4]
				  				  				  				  			HAL_UART_Init(&hlpuart1);
 8003c50:	4854      	ldr	r0, [pc, #336]	; (8003da4 <statemachine+0x1614>)
 8003c52:	f006 fe29 	bl	800a8a8 <HAL_UART_Init>
				  				  				  				  			HAL_UART_Abort(&hlpuart1);
 8003c56:	4853      	ldr	r0, [pc, #332]	; (8003da4 <statemachine+0x1614>)
 8003c58:	f006 ff5c 	bl	800ab14 <HAL_UART_Abort>
				  				  				  				  			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8003c5c:	2240      	movs	r2, #64	; 0x40
 8003c5e:	4954      	ldr	r1, [pc, #336]	; (8003db0 <statemachine+0x1620>)
 8003c60:	4850      	ldr	r0, [pc, #320]	; (8003da4 <statemachine+0x1614>)
 8003c62:	f006 ff0b 	bl	800aa7c <HAL_UART_Receive_DMA>
			 	BTN_A=0;
 8003c66:	4b4b      	ldr	r3, [pc, #300]	; (8003d94 <statemachine+0x1604>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8003c6c:	4b51      	ldr	r3, [pc, #324]	; (8003db4 <statemachine+0x1624>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]


	}
			  break;
 8003c72:	e072      	b.n	8003d5a <statemachine+0x15ca>
			  case STATE_MEMTEST:
				  ssd1306_Fill(Black);
 8003c74:	2000      	movs	r0, #0
 8003c76:	f7fe fa2d 	bl	80020d4 <ssd1306_Fill>
				  ssd1306_SetCursor(32, 32);
 8003c7a:	2120      	movs	r1, #32
 8003c7c:	2020      	movs	r0, #32
 8003c7e:	f7fe fb6b 	bl	8002358 <ssd1306_SetCursor>
				  ssd1306_WriteString("test", Font_6x8, White);
 8003c82:	4a43      	ldr	r2, [pc, #268]	; (8003d90 <statemachine+0x1600>)
 8003c84:	2301      	movs	r3, #1
 8003c86:	ca06      	ldmia	r2, {r1, r2}
 8003c88:	484b      	ldr	r0, [pc, #300]	; (8003db8 <statemachine+0x1628>)
 8003c8a:	f7fe fb3f 	bl	800230c <ssd1306_WriteString>
				 nmea_parse(&myData, DataBuffer);
 8003c8e:	494b      	ldr	r1, [pc, #300]	; (8003dbc <statemachine+0x162c>)
 8003c90:	484b      	ldr	r0, [pc, #300]	; (8003dc0 <statemachine+0x1630>)
 8003c92:	f7fe f8cb 	bl	8001e2c <nmea_parse>

				 			 			 						snprintf(str,15, "spd=%.1f",myData.speed);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8003c96:	4b4a      	ldr	r3, [pc, #296]	; (8003dc0 <statemachine+0x1630>)
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fc fc54 	bl	8000548 <__aeabi_f2d>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	e9cd 2300 	strd	r2, r3, [sp]
 8003ca8:	4a46      	ldr	r2, [pc, #280]	; (8003dc4 <statemachine+0x1634>)
 8003caa:	210f      	movs	r1, #15
 8003cac:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003cb0:	f00e fe3c 	bl	801292c <sniprintf>
				 			 			 						ssd1306_SetCursor(32, 40);
 8003cb4:	2128      	movs	r1, #40	; 0x28
 8003cb6:	2020      	movs	r0, #32
 8003cb8:	f7fe fb4e 	bl	8002358 <ssd1306_SetCursor>
				 			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8003cbc:	4a34      	ldr	r2, [pc, #208]	; (8003d90 <statemachine+0x1600>)
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	ca06      	ldmia	r2, {r1, r2}
 8003cc2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003cc6:	f7fe fb21 	bl	800230c <ssd1306_WriteString>
				 			 			 						snprintf(str,15, "SatNb :%d",myData.satelliteCount);
 8003cca:	4b3d      	ldr	r3, [pc, #244]	; (8003dc0 <statemachine+0x1630>)
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	4a3e      	ldr	r2, [pc, #248]	; (8003dc8 <statemachine+0x1638>)
 8003cd0:	210f      	movs	r1, #15
 8003cd2:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003cd6:	f00e fe29 	bl	801292c <sniprintf>
				 			 			 						ssd1306_SetCursor(32, 48);
 8003cda:	2130      	movs	r1, #48	; 0x30
 8003cdc:	2020      	movs	r0, #32
 8003cde:	f7fe fb3b 	bl	8002358 <ssd1306_SetCursor>
				 			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8003ce2:	4a2b      	ldr	r2, [pc, #172]	; (8003d90 <statemachine+0x1600>)
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	ca06      	ldmia	r2, {r1, r2}
 8003ce8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003cec:	f7fe fb0e 	bl	800230c <ssd1306_WriteString>
				 			 			 						free(str);
 8003cf0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8003cf4:	f00c ff26 	bl	8010b44 <free>



				  if(BTN_A>=1){
 8003cf8:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <statemachine+0x1604>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	dd2e      	ble.n	8003d5e <statemachine+0x15ce>
				  				  			 	state--;
 8003d00:	4b25      	ldr	r3, [pc, #148]	; (8003d98 <statemachine+0x1608>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	4b23      	ldr	r3, [pc, #140]	; (8003d98 <statemachine+0x1608>)
 8003d0a:	701a      	strb	r2, [r3, #0]
				  				  			 	state--;
 8003d0c:	4b22      	ldr	r3, [pc, #136]	; (8003d98 <statemachine+0x1608>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <statemachine+0x1608>)
 8003d16:	701a      	strb	r2, [r3, #0]
				  				  			 	state--;
 8003d18:	4b1f      	ldr	r3, [pc, #124]	; (8003d98 <statemachine+0x1608>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	4b1d      	ldr	r3, [pc, #116]	; (8003d98 <statemachine+0x1608>)
 8003d22:	701a      	strb	r2, [r3, #0]
				  				  			 	state--;
 8003d24:	4b1c      	ldr	r3, [pc, #112]	; (8003d98 <statemachine+0x1608>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	4b1a      	ldr	r3, [pc, #104]	; (8003d98 <statemachine+0x1608>)
 8003d2e:	701a      	strb	r2, [r3, #0]
				  				  			 	state--;
 8003d30:	4b19      	ldr	r3, [pc, #100]	; (8003d98 <statemachine+0x1608>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <statemachine+0x1608>)
 8003d3a:	701a      	strb	r2, [r3, #0]
				  				  			 	BTN_A=0;
 8003d3c:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <statemachine+0x1604>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
				  				  			 	BTN_B=0;
 8003d42:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <statemachine+0x1624>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
				  				  	}




				  break;
 8003d48:	e009      	b.n	8003d5e <statemachine+0x15ce>
				  break;
 8003d4a:	bf00      	nop
 8003d4c:	e008      	b.n	8003d60 <statemachine+0x15d0>
			  break;
 8003d4e:	bf00      	nop
 8003d50:	e006      	b.n	8003d60 <statemachine+0x15d0>
			  break;
 8003d52:	bf00      	nop
 8003d54:	e004      	b.n	8003d60 <statemachine+0x15d0>
			  break;
 8003d56:	bf00      	nop
 8003d58:	e002      	b.n	8003d60 <statemachine+0x15d0>
			  break;
 8003d5a:	bf00      	nop
 8003d5c:	e000      	b.n	8003d60 <statemachine+0x15d0>
				  break;
 8003d5e:	bf00      	nop


	}

return ;
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
}
 8003d64:	37bc      	adds	r7, #188	; 0xbc
 8003d66:	46bd      	mov	sp, r7
 8003d68:	ecbd 8b02 	vpop	{d8}
 8003d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000c90 	.word	0x20000c90
 8003d74:	476a6000 	.word	0x476a6000
 8003d78:	20000c88 	.word	0x20000c88
 8003d7c:	447a0000 	.word	0x447a0000
 8003d80:	20000c84 	.word	0x20000c84
 8003d84:	08016a3c 	.word	0x08016a3c
 8003d88:	20000010 	.word	0x20000010
 8003d8c:	08016a48 	.word	0x08016a48
 8003d90:	20000008 	.word	0x20000008
 8003d94:	20000820 	.word	0x20000820
 8003d98:	20000828 	.word	0x20000828
 8003d9c:	08016a68 	.word	0x08016a68
 8003da0:	200004bc 	.word	0x200004bc
 8003da4:	20000434 	.word	0x20000434
 8003da8:	08016a7c 	.word	0x08016a7c
 8003dac:	08016ab0 	.word	0x08016ab0
 8003db0:	200005a0 	.word	0x200005a0
 8003db4:	20000824 	.word	0x20000824
 8003db8:	08016a54 	.word	0x08016a54
 8003dbc:	200005e0 	.word	0x200005e0
 8003dc0:	200007e0 	.word	0x200007e0
 8003dc4:	08016a5c 	.word	0x08016a5c
 8003dc8:	08016a14 	.word	0x08016a14

08003dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dd2:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <HAL_MspInit+0x44>)
 8003dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd6:	4a0e      	ldr	r2, [pc, #56]	; (8003e10 <HAL_MspInit+0x44>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	6613      	str	r3, [r2, #96]	; 0x60
 8003dde:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <HAL_MspInit+0x44>)
 8003de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	607b      	str	r3, [r7, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dea:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <HAL_MspInit+0x44>)
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	4a08      	ldr	r2, [pc, #32]	; (8003e10 <HAL_MspInit+0x44>)
 8003df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df4:	6593      	str	r3, [r2, #88]	; 0x58
 8003df6:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <HAL_MspInit+0x44>)
 8003df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000

08003e14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08a      	sub	sp, #40	; 0x28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e1c:	f107 0314 	add.w	r3, r7, #20
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	60da      	str	r2, [r3, #12]
 8003e2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a2f      	ldr	r2, [pc, #188]	; (8003ef0 <HAL_ADC_MspInit+0xdc>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d157      	bne.n	8003ee6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003e36:	4b2f      	ldr	r3, [pc, #188]	; (8003ef4 <HAL_ADC_MspInit+0xe0>)
 8003e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3a:	4a2e      	ldr	r2, [pc, #184]	; (8003ef4 <HAL_ADC_MspInit+0xe0>)
 8003e3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e42:	4b2c      	ldr	r3, [pc, #176]	; (8003ef4 <HAL_ADC_MspInit+0xe0>)
 8003e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4e:	4b29      	ldr	r3, [pc, #164]	; (8003ef4 <HAL_ADC_MspInit+0xe0>)
 8003e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e52:	4a28      	ldr	r2, [pc, #160]	; (8003ef4 <HAL_ADC_MspInit+0xe0>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e5a:	4b26      	ldr	r3, [pc, #152]	; (8003ef4 <HAL_ADC_MspInit+0xe0>)
 8003e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e66:	2310      	movs	r3, #16
 8003e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003e6a:	230b      	movs	r3, #11
 8003e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e72:	f107 0314 	add.w	r3, r7, #20
 8003e76:	4619      	mov	r1, r3
 8003e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e7c:	f002 fac6 	bl	800640c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003e80:	4b1d      	ldr	r3, [pc, #116]	; (8003ef8 <HAL_ADC_MspInit+0xe4>)
 8003e82:	4a1e      	ldr	r2, [pc, #120]	; (8003efc <HAL_ADC_MspInit+0xe8>)
 8003e84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003e86:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <HAL_ADC_MspInit+0xe4>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <HAL_ADC_MspInit+0xe4>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e92:	4b19      	ldr	r3, [pc, #100]	; (8003ef8 <HAL_ADC_MspInit+0xe4>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003e98:	4b17      	ldr	r3, [pc, #92]	; (8003ef8 <HAL_ADC_MspInit+0xe4>)
 8003e9a:	2280      	movs	r2, #128	; 0x80
 8003e9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e9e:	4b16      	ldr	r3, [pc, #88]	; (8003ef8 <HAL_ADC_MspInit+0xe4>)
 8003ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ea4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <HAL_ADC_MspInit+0xe4>)
 8003ea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003eac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <HAL_ADC_MspInit+0xe4>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003eb4:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <HAL_ADC_MspInit+0xe4>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003eba:	480f      	ldr	r0, [pc, #60]	; (8003ef8 <HAL_ADC_MspInit+0xe4>)
 8003ebc:	f001 ff92 	bl	8005de4 <HAL_DMA_Init>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8003ec6:	f7fd fc97 	bl	80017f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a0a      	ldr	r2, [pc, #40]	; (8003ef8 <HAL_ADC_MspInit+0xe4>)
 8003ece:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ed0:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <HAL_ADC_MspInit+0xe4>)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2100      	movs	r1, #0
 8003eda:	2012      	movs	r0, #18
 8003edc:	f001 ff3d 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003ee0:	2012      	movs	r0, #18
 8003ee2:	f001 ff56 	bl	8005d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ee6:	bf00      	nop
 8003ee8:	3728      	adds	r7, #40	; 0x28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	50040000 	.word	0x50040000
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	20000398 	.word	0x20000398
 8003efc:	40020008 	.word	0x40020008

08003f00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b0a0      	sub	sp, #128	; 0x80
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f18:	f107 0318 	add.w	r3, r7, #24
 8003f1c:	2254      	movs	r2, #84	; 0x54
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f00e fd9a 	bl	8012a5a <memset>
  if(hi2c->Instance==I2C3)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a2e      	ldr	r2, [pc, #184]	; (8003fe4 <HAL_I2C_MspInit+0xe4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d154      	bne.n	8003fda <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f34:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 8003f36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f3a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f3c:	f107 0318 	add.w	r3, r7, #24
 8003f40:	4618      	mov	r0, r3
 8003f42:	f005 fda5 	bl	8009a90 <HAL_RCCEx_PeriphCLKConfig>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8003f4c:	f7fd fc54 	bl	80017f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f50:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <HAL_I2C_MspInit+0xe8>)
 8003f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f54:	4a24      	ldr	r2, [pc, #144]	; (8003fe8 <HAL_I2C_MspInit+0xe8>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f5c:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <HAL_I2C_MspInit+0xe8>)
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f68:	4b1f      	ldr	r3, [pc, #124]	; (8003fe8 <HAL_I2C_MspInit+0xe8>)
 8003f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6c:	4a1e      	ldr	r2, [pc, #120]	; (8003fe8 <HAL_I2C_MspInit+0xe8>)
 8003f6e:	f043 0302 	orr.w	r3, r3, #2
 8003f72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f74:	4b1c      	ldr	r3, [pc, #112]	; (8003fe8 <HAL_I2C_MspInit+0xe8>)
 8003f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003f80:	2380      	movs	r3, #128	; 0x80
 8003f82:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f84:	2312      	movs	r3, #18
 8003f86:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f90:	2304      	movs	r3, #4
 8003f92:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f98:	4619      	mov	r1, r3
 8003f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f9e:	f002 fa35 	bl	800640c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003fa2:	2310      	movs	r3, #16
 8003fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fa6:	2312      	movs	r3, #18
 8003fa8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fb6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003fba:	4619      	mov	r1, r3
 8003fbc:	480b      	ldr	r0, [pc, #44]	; (8003fec <HAL_I2C_MspInit+0xec>)
 8003fbe:	f002 fa25 	bl	800640c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003fc2:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <HAL_I2C_MspInit+0xe8>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc6:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <HAL_I2C_MspInit+0xe8>)
 8003fc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <HAL_I2C_MspInit+0xe8>)
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003fda:	bf00      	nop
 8003fdc:	3780      	adds	r7, #128	; 0x80
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40005c00 	.word	0x40005c00
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	48000400 	.word	0x48000400

08003ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b09e      	sub	sp, #120	; 0x78
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	60da      	str	r2, [r3, #12]
 8004006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004008:	f107 0310 	add.w	r3, r7, #16
 800400c:	2254      	movs	r2, #84	; 0x54
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f00e fd22 	bl	8012a5a <memset>
  if(huart->Instance==LPUART1)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a37      	ldr	r2, [pc, #220]	; (80040f8 <HAL_UART_MspInit+0x108>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d167      	bne.n	80040f0 <HAL_UART_MspInit+0x100>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004020:	2320      	movs	r3, #32
 8004022:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004024:	2300      	movs	r3, #0
 8004026:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004028:	f107 0310 	add.w	r3, r7, #16
 800402c:	4618      	mov	r0, r3
 800402e:	f005 fd2f 	bl	8009a90 <HAL_RCCEx_PeriphCLKConfig>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004038:	f7fd fbde 	bl	80017f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800403c:	4b2f      	ldr	r3, [pc, #188]	; (80040fc <HAL_UART_MspInit+0x10c>)
 800403e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004040:	4a2e      	ldr	r2, [pc, #184]	; (80040fc <HAL_UART_MspInit+0x10c>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004048:	4b2c      	ldr	r3, [pc, #176]	; (80040fc <HAL_UART_MspInit+0x10c>)
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004054:	4b29      	ldr	r3, [pc, #164]	; (80040fc <HAL_UART_MspInit+0x10c>)
 8004056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004058:	4a28      	ldr	r2, [pc, #160]	; (80040fc <HAL_UART_MspInit+0x10c>)
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004060:	4b26      	ldr	r3, [pc, #152]	; (80040fc <HAL_UART_MspInit+0x10c>)
 8004062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800406c:	230c      	movs	r3, #12
 800406e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004070:	2302      	movs	r3, #2
 8004072:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004074:	2300      	movs	r3, #0
 8004076:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004078:	2303      	movs	r3, #3
 800407a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800407c:	2308      	movs	r3, #8
 800407e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004080:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004084:	4619      	mov	r1, r3
 8004086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800408a:	f002 f9bf 	bl	800640c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 800408e:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <HAL_UART_MspInit+0x110>)
 8004090:	4a1c      	ldr	r2, [pc, #112]	; (8004104 <HAL_UART_MspInit+0x114>)
 8004092:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 8004094:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <HAL_UART_MspInit+0x110>)
 8004096:	2204      	movs	r2, #4
 8004098:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800409a:	4b19      	ldr	r3, [pc, #100]	; (8004100 <HAL_UART_MspInit+0x110>)
 800409c:	2200      	movs	r2, #0
 800409e:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040a0:	4b17      	ldr	r3, [pc, #92]	; (8004100 <HAL_UART_MspInit+0x110>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <HAL_UART_MspInit+0x110>)
 80040a8:	2280      	movs	r2, #128	; 0x80
 80040aa:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040ac:	4b14      	ldr	r3, [pc, #80]	; (8004100 <HAL_UART_MspInit+0x110>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <HAL_UART_MspInit+0x110>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 80040b8:	4b11      	ldr	r3, [pc, #68]	; (8004100 <HAL_UART_MspInit+0x110>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <HAL_UART_MspInit+0x110>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 80040c4:	480e      	ldr	r0, [pc, #56]	; (8004100 <HAL_UART_MspInit+0x110>)
 80040c6:	f001 fe8d 	bl	8005de4 <HAL_DMA_Init>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80040d0:	f7fd fb92 	bl	80017f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart_rx);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <HAL_UART_MspInit+0x110>)
 80040d8:	675a      	str	r2, [r3, #116]	; 0x74
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <HAL_UART_MspInit+0x110>)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80040e0:	2200      	movs	r2, #0
 80040e2:	2100      	movs	r1, #0
 80040e4:	2046      	movs	r0, #70	; 0x46
 80040e6:	f001 fe38 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80040ea:	2046      	movs	r0, #70	; 0x46
 80040ec:	f001 fe51 	bl	8005d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80040f0:	bf00      	nop
 80040f2:	3778      	adds	r7, #120	; 0x78
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40008000 	.word	0x40008000
 80040fc:	40021000 	.word	0x40021000
 8004100:	200004bc 	.word	0x200004bc
 8004104:	40020480 	.word	0x40020480

08004108 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a0c      	ldr	r2, [pc, #48]	; (8004148 <HAL_UART_MspDeInit+0x40>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d112      	bne.n	8004140 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800411a:	4b0c      	ldr	r3, [pc, #48]	; (800414c <HAL_UART_MspDeInit+0x44>)
 800411c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411e:	4a0b      	ldr	r2, [pc, #44]	; (800414c <HAL_UART_MspDeInit+0x44>)
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	65d3      	str	r3, [r2, #92]	; 0x5c

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8004126:	210c      	movs	r1, #12
 8004128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800412c:	f002 fad8 	bl	80066e0 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004134:	4618      	mov	r0, r3
 8004136:	f001 ff0d 	bl	8005f54 <HAL_DMA_DeInit>

    /* LPUART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 800413a:	2046      	movs	r0, #70	; 0x46
 800413c:	f001 fe37 	bl	8005dae <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }

}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40008000 	.word	0x40008000
 800414c:	40021000 	.word	0x40021000

08004150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004160:	d10c      	bne.n	800417c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <HAL_TIM_Base_MspInit+0x68>)
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	4a14      	ldr	r2, [pc, #80]	; (80041b8 <HAL_TIM_Base_MspInit+0x68>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	6593      	str	r3, [r2, #88]	; 0x58
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <HAL_TIM_Base_MspInit+0x68>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800417a:	e018      	b.n	80041ae <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a0e      	ldr	r2, [pc, #56]	; (80041bc <HAL_TIM_Base_MspInit+0x6c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d113      	bne.n	80041ae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <HAL_TIM_Base_MspInit+0x68>)
 8004188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418a:	4a0b      	ldr	r2, [pc, #44]	; (80041b8 <HAL_TIM_Base_MspInit+0x68>)
 800418c:	f043 0320 	orr.w	r3, r3, #32
 8004190:	6593      	str	r3, [r2, #88]	; 0x58
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_TIM_Base_MspInit+0x68>)
 8004194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800419e:	2200      	movs	r2, #0
 80041a0:	2100      	movs	r1, #0
 80041a2:	2037      	movs	r0, #55	; 0x37
 80041a4:	f001 fdd9 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80041a8:	2037      	movs	r0, #55	; 0x37
 80041aa:	f001 fdf2 	bl	8005d92 <HAL_NVIC_EnableIRQ>
}
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40001400 	.word	0x40001400

080041c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041c4:	e7fe      	b.n	80041c4 <NMI_Handler+0x4>
	...

080041c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_Fill(Black);
 80041cc:	2000      	movs	r0, #0
 80041ce:	f7fd ff81 	bl	80020d4 <ssd1306_Fill>
	  ssd1306_SetCursor(33, 36);
 80041d2:	2124      	movs	r1, #36	; 0x24
 80041d4:	2021      	movs	r0, #33	; 0x21
 80041d6:	f7fe f8bf 	bl	8002358 <ssd1306_SetCursor>
	  ssd1306_WriteString("hard_fault", Font_6x8, White);
 80041da:	4a04      	ldr	r2, [pc, #16]	; (80041ec <HardFault_Handler+0x24>)
 80041dc:	2301      	movs	r3, #1
 80041de:	ca06      	ldmia	r2, {r1, r2}
 80041e0:	4803      	ldr	r0, [pc, #12]	; (80041f0 <HardFault_Handler+0x28>)
 80041e2:	f7fe f893 	bl	800230c <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80041e6:	f7fd ff8d 	bl	8002104 <ssd1306_UpdateScreen>
	  ssd1306_Fill(Black);
 80041ea:	e7ef      	b.n	80041cc <HardFault_Handler+0x4>
 80041ec:	20000008 	.word	0x20000008
 80041f0:	08016ac0 	.word	0x08016ac0

080041f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041f8:	e7fe      	b.n	80041f8 <MemManage_Handler+0x4>

080041fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041fa:	b480      	push	{r7}
 80041fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041fe:	e7fe      	b.n	80041fe <BusFault_Handler+0x4>

08004200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004204:	e7fe      	b.n	8004204 <UsageFault_Handler+0x4>

08004206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004206:	b480      	push	{r7}
 8004208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800420a:	bf00      	nop
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004218:	bf00      	nop
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004222:	b480      	push	{r7}
 8004224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004226:	bf00      	nop
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	distanceparcouru+=1;
 8004234:	4b04      	ldr	r3, [pc, #16]	; (8004248 <SysTick_Handler+0x18>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3301      	adds	r3, #1
 800423a:	4a03      	ldr	r2, [pc, #12]	; (8004248 <SysTick_Handler+0x18>)
 800423c:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800423e:	f000 f9a9 	bl	8004594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000c94 	.word	0x20000c94

0800424c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004250:	4802      	ldr	r0, [pc, #8]	; (800425c <DMA1_Channel1_IRQHandler+0x10>)
 8004252:	f001 fff0 	bl	8006236 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004256:	bf00      	nop
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000398 	.word	0x20000398

08004260 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004264:	4802      	ldr	r0, [pc, #8]	; (8004270 <ADC1_IRQHandler+0x10>)
 8004266:	f000 fd79 	bl	8004d5c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000334 	.word	0x20000334

08004274 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004278:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800427c:	f002 fb12 	bl	80068a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004280:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004284:	f002 fb0e 	bl	80068a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004288:	bf00      	nop
 800428a:	bd80      	pop	{r7, pc}

0800428c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	distanceparcouru+=1;
 8004290:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <TIM7_IRQHandler+0x18>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3301      	adds	r3, #1
 8004296:	4a03      	ldr	r2, [pc, #12]	; (80042a4 <TIM7_IRQHandler+0x18>)
 8004298:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800429a:	4803      	ldr	r0, [pc, #12]	; (80042a8 <TIM7_IRQHandler+0x1c>)
 800429c:	f005 ff84 	bl	800a1a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80042a0:	bf00      	nop
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20000c94 	.word	0x20000c94
 80042a8:	20000550 	.word	0x20000550

080042ac <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80042b0:	4802      	ldr	r0, [pc, #8]	; (80042bc <USB_IRQHandler+0x10>)
 80042b2:	f003 f903 	bl	80074bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20001180 	.word	0x20001180

080042c0 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 80042c4:	4802      	ldr	r0, [pc, #8]	; (80042d0 <DMA2_Channel7_IRQHandler+0x10>)
 80042c6:	f001 ffb6 	bl	8006236 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	200004bc 	.word	0x200004bc

080042d4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80042d8:	4802      	ldr	r0, [pc, #8]	; (80042e4 <LPUART1_IRQHandler+0x10>)
 80042da:	f006 fd17 	bl	800ad0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80042de:	bf00      	nop
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000434 	.word	0x20000434

080042e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return 1;
 80042ec:	2301      	movs	r3, #1
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <_kill>:

int _kill(int pid, int sig)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004302:	f00e fc91 	bl	8012c28 <__errno>
 8004306:	4603      	mov	r3, r0
 8004308:	2216      	movs	r2, #22
 800430a:	601a      	str	r2, [r3, #0]
  return -1;
 800430c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <_exit>:

void _exit (int status)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004320:	f04f 31ff 	mov.w	r1, #4294967295
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ffe7 	bl	80042f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800432a:	e7fe      	b.n	800432a <_exit+0x12>

0800432c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e00a      	b.n	8004354 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800433e:	f3af 8000 	nop.w
 8004342:	4601      	mov	r1, r0
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	60ba      	str	r2, [r7, #8]
 800434a:	b2ca      	uxtb	r2, r1
 800434c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	3301      	adds	r3, #1
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	429a      	cmp	r2, r3
 800435a:	dbf0      	blt.n	800433e <_read+0x12>
  }

  return len;
 800435c:	687b      	ldr	r3, [r7, #4]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3718      	adds	r7, #24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b086      	sub	sp, #24
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	e009      	b.n	800438c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	60ba      	str	r2, [r7, #8]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	3301      	adds	r3, #1
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	dbf1      	blt.n	8004378 <_write+0x12>
  }
  return len;
 8004394:	687b      	ldr	r3, [r7, #4]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <_close>:

int _close(int file)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b083      	sub	sp, #12
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043c6:	605a      	str	r2, [r3, #4]
  return 0;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <_isatty>:

int _isatty(int file)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b083      	sub	sp, #12
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043de:	2301      	movs	r3, #1
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004410:	4a14      	ldr	r2, [pc, #80]	; (8004464 <_sbrk+0x5c>)
 8004412:	4b15      	ldr	r3, [pc, #84]	; (8004468 <_sbrk+0x60>)
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800441c:	4b13      	ldr	r3, [pc, #76]	; (800446c <_sbrk+0x64>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d102      	bne.n	800442a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004424:	4b11      	ldr	r3, [pc, #68]	; (800446c <_sbrk+0x64>)
 8004426:	4a12      	ldr	r2, [pc, #72]	; (8004470 <_sbrk+0x68>)
 8004428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800442a:	4b10      	ldr	r3, [pc, #64]	; (800446c <_sbrk+0x64>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4413      	add	r3, r2
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	429a      	cmp	r2, r3
 8004436:	d207      	bcs.n	8004448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004438:	f00e fbf6 	bl	8012c28 <__errno>
 800443c:	4603      	mov	r3, r0
 800443e:	220c      	movs	r2, #12
 8004440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004442:	f04f 33ff 	mov.w	r3, #4294967295
 8004446:	e009      	b.n	800445c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004448:	4b08      	ldr	r3, [pc, #32]	; (800446c <_sbrk+0x64>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800444e:	4b07      	ldr	r3, [pc, #28]	; (800446c <_sbrk+0x64>)
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4413      	add	r3, r2
 8004456:	4a05      	ldr	r2, [pc, #20]	; (800446c <_sbrk+0x64>)
 8004458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800445a:	68fb      	ldr	r3, [r7, #12]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20010000 	.word	0x20010000
 8004468:	00000400 	.word	0x00000400
 800446c:	20000c98 	.word	0x20000c98
 8004470:	200015d8 	.word	0x200015d8

08004474 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004478:	4b06      	ldr	r3, [pc, #24]	; (8004494 <SystemInit+0x20>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	4a05      	ldr	r2, [pc, #20]	; (8004494 <SystemInit+0x20>)
 8004480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	e000ed00 	.word	0xe000ed00

08004498 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800449c:	f7ff ffea 	bl	8004474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044a0:	480c      	ldr	r0, [pc, #48]	; (80044d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80044a2:	490d      	ldr	r1, [pc, #52]	; (80044d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044a4:	4a0d      	ldr	r2, [pc, #52]	; (80044dc <LoopForever+0xe>)
  movs r3, #0
 80044a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044a8:	e002      	b.n	80044b0 <LoopCopyDataInit>

080044aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044ae:	3304      	adds	r3, #4

080044b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044b4:	d3f9      	bcc.n	80044aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044b6:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80044b8:	4c0a      	ldr	r4, [pc, #40]	; (80044e4 <LoopForever+0x16>)
  movs r3, #0
 80044ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044bc:	e001      	b.n	80044c2 <LoopFillZerobss>

080044be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044c0:	3204      	adds	r2, #4

080044c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044c4:	d3fb      	bcc.n	80044be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044c6:	f00e fbb5 	bl	8012c34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044ca:	f7fc feb3 	bl	8001234 <main>

080044ce <LoopForever>:

LoopForever:
    b LoopForever
 80044ce:	e7fe      	b.n	80044ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80044d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80044d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044d8:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 80044dc:	08018d98 	.word	0x08018d98
  ldr r2, =_sbss
 80044e0:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 80044e4:	200015d8 	.word	0x200015d8

080044e8 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80044e8:	e7fe      	b.n	80044e8 <CAN1_RX0_IRQHandler>

080044ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044f4:	2003      	movs	r0, #3
 80044f6:	f001 fc25 	bl	8005d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044fa:	200f      	movs	r0, #15
 80044fc:	f000 f80e 	bl	800451c <HAL_InitTick>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	71fb      	strb	r3, [r7, #7]
 800450a:	e001      	b.n	8004510 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800450c:	f7ff fc5e 	bl	8003dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004510:	79fb      	ldrb	r3, [r7, #7]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
	...

0800451c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004528:	4b17      	ldr	r3, [pc, #92]	; (8004588 <HAL_InitTick+0x6c>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d023      	beq.n	8004578 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004530:	4b16      	ldr	r3, [pc, #88]	; (800458c <HAL_InitTick+0x70>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4b14      	ldr	r3, [pc, #80]	; (8004588 <HAL_InitTick+0x6c>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	4619      	mov	r1, r3
 800453a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800453e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	4618      	mov	r0, r3
 8004548:	f001 fc3f 	bl	8005dca <HAL_SYSTICK_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10f      	bne.n	8004572 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b0f      	cmp	r3, #15
 8004556:	d809      	bhi.n	800456c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004558:	2200      	movs	r2, #0
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	f001 fbfb 	bl	8005d5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004564:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <HAL_InitTick+0x74>)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e007      	b.n	800457c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	73fb      	strb	r3, [r7, #15]
 8004570:	e004      	b.n	800457c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	73fb      	strb	r3, [r7, #15]
 8004576:	e001      	b.n	800457c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800457c:	7bfb      	ldrb	r3, [r7, #15]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000028 	.word	0x20000028
 800458c:	20000020 	.word	0x20000020
 8004590:	20000024 	.word	0x20000024

08004594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <HAL_IncTick+0x20>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <HAL_IncTick+0x24>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4413      	add	r3, r2
 80045a4:	4a04      	ldr	r2, [pc, #16]	; (80045b8 <HAL_IncTick+0x24>)
 80045a6:	6013      	str	r3, [r2, #0]
}
 80045a8:	bf00      	nop
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	20000028 	.word	0x20000028
 80045b8:	20000c9c 	.word	0x20000c9c

080045bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return uwTick;
 80045c0:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <HAL_GetTick+0x14>)
 80045c2:	681b      	ldr	r3, [r3, #0]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000c9c 	.word	0x20000c9c

080045d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045dc:	f7ff ffee 	bl	80045bc <HAL_GetTick>
 80045e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ec:	d005      	beq.n	80045fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <HAL_Delay+0x44>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045fa:	bf00      	nop
 80045fc:	f7ff ffde 	bl	80045bc <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	429a      	cmp	r2, r3
 800460a:	d8f7      	bhi.n	80045fc <HAL_Delay+0x28>
  {
  }
}
 800460c:	bf00      	nop
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	20000028 	.word	0x20000028

0800461c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	609a      	str	r2, [r3, #8]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	609a      	str	r2, [r3, #8]
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
 8004690:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3360      	adds	r3, #96	; 0x60
 8004696:	461a      	mov	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <LL_ADC_SetOffset+0x44>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80046bc:	bf00      	nop
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	03fff000 	.word	0x03fff000

080046cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3360      	adds	r3, #96	; 0x60
 80046da:	461a      	mov	r2, r3
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3360      	adds	r3, #96	; 0x60
 8004708:	461a      	mov	r2, r3
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	431a      	orrs	r2, r3
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3330      	adds	r3, #48	; 0x30
 8004764:	461a      	mov	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	0a1b      	lsrs	r3, r3, #8
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	f003 030c 	and.w	r3, r3, #12
 8004770:	4413      	add	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	211f      	movs	r1, #31
 8004780:	fa01 f303 	lsl.w	r3, r1, r3
 8004784:	43db      	mvns	r3, r3
 8004786:	401a      	ands	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	0e9b      	lsrs	r3, r3, #26
 800478c:	f003 011f 	and.w	r1, r3, #31
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	fa01 f303 	lsl.w	r3, r1, r3
 800479a:	431a      	orrs	r2, r3
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80047a0:	bf00      	nop
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b087      	sub	sp, #28
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3314      	adds	r3, #20
 80047e2:	461a      	mov	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	0e5b      	lsrs	r3, r3, #25
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	4413      	add	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	0d1b      	lsrs	r3, r3, #20
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	2107      	movs	r1, #7
 8004800:	fa01 f303 	lsl.w	r3, r1, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	401a      	ands	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	0d1b      	lsrs	r3, r3, #20
 800480c:	f003 031f 	and.w	r3, r3, #31
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	fa01 f303 	lsl.w	r3, r1, r3
 8004816:	431a      	orrs	r2, r3
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800481c:	bf00      	nop
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004840:	43db      	mvns	r3, r3
 8004842:	401a      	ands	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f003 0318 	and.w	r3, r3, #24
 800484a:	4908      	ldr	r1, [pc, #32]	; (800486c <LL_ADC_SetChannelSingleDiff+0x44>)
 800484c:	40d9      	lsrs	r1, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	400b      	ands	r3, r1
 8004852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004856:	431a      	orrs	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800485e:	bf00      	nop
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	0007ffff 	.word	0x0007ffff

08004870 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004880:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6093      	str	r3, [r2, #8]
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048a8:	d101      	bne.n	80048ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80048cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80048d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048f8:	d101      	bne.n	80048fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800491c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004920:	f043 0201 	orr.w	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <LL_ADC_IsEnabled+0x18>
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <LL_ADC_IsEnabled+0x1a>
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800496a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800496e:	f043 0204 	orr.w	r2, r3, #4
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b04      	cmp	r3, #4
 8004994:	d101      	bne.n	800499a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d101      	bne.n	80049c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
	...

080049d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80049dc:	2300      	movs	r3, #0
 80049de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e126      	b.n	8004c38 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d109      	bne.n	8004a0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff fa0b 	bl	8003e14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff ff3f 	bl	8004894 <LL_ADC_IsDeepPowerDownEnabled>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d004      	beq.n	8004a26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ff25 	bl	8004870 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff ff5a 	bl	80048e4 <LL_ADC_IsInternalRegulatorEnabled>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d115      	bne.n	8004a62 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff ff3e 	bl	80048bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a40:	4b7f      	ldr	r3, [pc, #508]	; (8004c40 <HAL_ADC_Init+0x270>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	099b      	lsrs	r3, r3, #6
 8004a46:	4a7f      	ldr	r2, [pc, #508]	; (8004c44 <HAL_ADC_Init+0x274>)
 8004a48:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4c:	099b      	lsrs	r3, r3, #6
 8004a4e:	3301      	adds	r3, #1
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a54:	e002      	b.n	8004a5c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f9      	bne.n	8004a56 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff ff3c 	bl	80048e4 <LL_ADC_IsInternalRegulatorEnabled>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10d      	bne.n	8004a8e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a76:	f043 0210 	orr.w	r2, r3, #16
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a82:	f043 0201 	orr.w	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff ff75 	bl	8004982 <LL_ADC_REG_IsConversionOngoing>
 8004a98:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f040 80bf 	bne.w	8004c26 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f040 80bb 	bne.w	8004c26 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004ab8:	f043 0202 	orr.w	r2, r3, #2
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff ff35 	bl	8004934 <LL_ADC_IsEnabled>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10b      	bne.n	8004ae8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ad0:	485d      	ldr	r0, [pc, #372]	; (8004c48 <HAL_ADC_Init+0x278>)
 8004ad2:	f7ff ff2f 	bl	8004934 <LL_ADC_IsEnabled>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	485a      	ldr	r0, [pc, #360]	; (8004c4c <HAL_ADC_Init+0x27c>)
 8004ae4:	f7ff fd9a 	bl	800461c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	7e5b      	ldrb	r3, [r3, #25]
 8004aec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004af2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004af8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004afe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b06:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d106      	bne.n	8004b24 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	045b      	lsls	r3, r3, #17
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d009      	beq.n	8004b40 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	4b42      	ldr	r3, [pc, #264]	; (8004c50 <HAL_ADC_Init+0x280>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	69b9      	ldr	r1, [r7, #24]
 8004b50:	430b      	orrs	r3, r1
 8004b52:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff ff25 	bl	80049a8 <LL_ADC_INJ_IsConversionOngoing>
 8004b5e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d13d      	bne.n	8004be2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d13a      	bne.n	8004be2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004b70:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b78:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b88:	f023 0302 	bic.w	r3, r3, #2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	69b9      	ldr	r1, [r7, #24]
 8004b92:	430b      	orrs	r3, r1
 8004b94:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d118      	bne.n	8004bd2 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004baa:	f023 0304 	bic.w	r3, r3, #4
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bb6:	4311      	orrs	r1, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004bbc:	4311      	orrs	r1, r2
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0201 	orr.w	r2, r2, #1
 8004bce:	611a      	str	r2, [r3, #16]
 8004bd0:	e007      	b.n	8004be2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691a      	ldr	r2, [r3, #16]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0201 	bic.w	r2, r2, #1
 8004be0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d10c      	bne.n	8004c04 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf0:	f023 010f 	bic.w	r1, r3, #15
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	1e5a      	subs	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
 8004c02:	e007      	b.n	8004c14 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 020f 	bic.w	r2, r2, #15
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c18:	f023 0303 	bic.w	r3, r3, #3
 8004c1c:	f043 0201 	orr.w	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54
 8004c24:	e007      	b.n	8004c36 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2a:	f043 0210 	orr.w	r2, r3, #16
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c36:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20000020 	.word	0x20000020
 8004c44:	053e2d63 	.word	0x053e2d63
 8004c48:	50040000 	.word	0x50040000
 8004c4c:	50040300 	.word	0x50040300
 8004c50:	fff0c007 	.word	0xfff0c007

08004c54 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7ff fe8c 	bl	8004982 <LL_ADC_REG_IsConversionOngoing>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d167      	bne.n	8004d40 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <HAL_ADC_Start_DMA+0x2a>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e063      	b.n	8004d46 <HAL_ADC_Start_DMA+0xf2>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fe1c 	bl	80058c4 <ADC_Enable>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d14f      	bne.n	8004d36 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c9e:	f023 0301 	bic.w	r3, r3, #1
 8004ca2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d006      	beq.n	8004cc4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cba:	f023 0206 	bic.w	r2, r3, #6
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	659a      	str	r2, [r3, #88]	; 0x58
 8004cc2:	e002      	b.n	8004cca <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cce:	4a20      	ldr	r2, [pc, #128]	; (8004d50 <HAL_ADC_Start_DMA+0xfc>)
 8004cd0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd6:	4a1f      	ldr	r2, [pc, #124]	; (8004d54 <HAL_ADC_Start_DMA+0x100>)
 8004cd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cde:	4a1e      	ldr	r2, [pc, #120]	; (8004d58 <HAL_ADC_Start_DMA+0x104>)
 8004ce0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	221c      	movs	r2, #28
 8004ce8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0210 	orr.w	r2, r2, #16
 8004d00:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0201 	orr.w	r2, r2, #1
 8004d10:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3340      	adds	r3, #64	; 0x40
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f001 f9a9 	bl	8006078 <HAL_DMA_Start_IT>
 8004d26:	4603      	mov	r3, r0
 8004d28:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff fe13 	bl	800495a <LL_ADC_REG_StartConversion>
 8004d34:	e006      	b.n	8004d44 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d3e:	e001      	b.n	8004d44 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d40:	2302      	movs	r3, #2
 8004d42:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	080059d1 	.word	0x080059d1
 8004d54:	08005aa9 	.word	0x08005aa9
 8004d58:	08005ac5 	.word	0x08005ac5

08004d5c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004d64:	2300      	movs	r3, #0
 8004d66:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d017      	beq.n	8004db2 <HAL_ADC_IRQHandler+0x56>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d012      	beq.n	8004db2 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d105      	bne.n	8004da4 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fecf 	bl	8005b48 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2202      	movs	r2, #2
 8004db0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <HAL_ADC_IRQHandler+0x6a>
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d05e      	beq.n	8004e8e <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f003 0308 	and.w	r3, r3, #8
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d059      	beq.n	8004e8e <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d105      	bne.n	8004df2 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff fc99 	bl	800472e <LL_ADC_REG_IsTriggerSourceSWStart>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d03e      	beq.n	8004e80 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d135      	bne.n	8004e80 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d12e      	bne.n	8004e80 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff fdab 	bl	8004982 <LL_ADC_REG_IsConversionOngoing>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d11a      	bne.n	8004e68 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 020c 	bic.w	r2, r2, #12
 8004e40:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d112      	bne.n	8004e80 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	f043 0201 	orr.w	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	655a      	str	r2, [r3, #84]	; 0x54
 8004e66:	e00b      	b.n	8004e80 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	f043 0210 	orr.w	r2, r3, #16
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e78:	f043 0201 	orr.w	r2, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7fc f945 	bl	8001110 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	220c      	movs	r2, #12
 8004e8c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d004      	beq.n	8004ea2 <HAL_ADC_IRQHandler+0x146>
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d072      	beq.n	8004f92 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d06d      	beq.n	8004f92 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff fc6a 	bl	80047ac <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004ed8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fc25 	bl	800472e <LL_ADC_REG_IsTriggerSourceSWStart>
 8004ee4:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d047      	beq.n	8004f84 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_ADC_IRQHandler+0x1b2>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d03f      	beq.n	8004f84 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d13a      	bne.n	8004f84 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f18:	2b40      	cmp	r3, #64	; 0x40
 8004f1a:	d133      	bne.n	8004f84 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d12e      	bne.n	8004f84 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fd3c 	bl	80049a8 <LL_ADC_INJ_IsConversionOngoing>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d11a      	bne.n	8004f6c <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f44:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d112      	bne.n	8004f84 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f62:	f043 0201 	orr.w	r2, r3, #1
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	655a      	str	r2, [r3, #84]	; 0x54
 8004f6a:	e00b      	b.n	8004f84 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f70:	f043 0210 	orr.w	r2, r3, #16
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f7c:	f043 0201 	orr.w	r2, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fdb7 	bl	8005af8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2260      	movs	r2, #96	; 0x60
 8004f90:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d011      	beq.n	8004fc0 <HAL_ADC_IRQHandler+0x264>
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00c      	beq.n	8004fc0 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004faa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f890 	bl	80050d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2280      	movs	r2, #128	; 0x80
 8004fbe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d012      	beq.n	8004ff0 <HAL_ADC_IRQHandler+0x294>
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00d      	beq.n	8004ff0 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fd9d 	bl	8005b20 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d012      	beq.n	8005020 <HAL_ADC_IRQHandler+0x2c4>
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00d      	beq.n	8005020 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005008:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fd8f 	bl	8005b34 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800501e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b00      	cmp	r3, #0
 8005028:	d02a      	beq.n	8005080 <HAL_ADC_IRQHandler+0x324>
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f003 0310 	and.w	r3, r3, #16
 8005030:	2b00      	cmp	r3, #0
 8005032:	d025      	beq.n	8005080 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800503c:	2301      	movs	r3, #1
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	e008      	b.n	8005054 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8005050:	2301      	movs	r3, #1
 8005052:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d10e      	bne.n	8005078 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	f043 0202 	orr.w	r2, r3, #2
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f83a 	bl	80050ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2210      	movs	r2, #16
 800507e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005086:	2b00      	cmp	r3, #0
 8005088:	d018      	beq.n	80050bc <HAL_ADC_IRQHandler+0x360>
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005090:	2b00      	cmp	r3, #0
 8005092:	d013      	beq.n	80050bc <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a4:	f043 0208 	orr.w	r2, r3, #8
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050b4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fd28 	bl	8005b0c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80050bc:	bf00      	nop
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b0b6      	sub	sp, #216	; 0xd8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005110:	2300      	movs	r3, #0
 8005112:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_ADC_ConfigChannel+0x22>
 800511e:	2302      	movs	r3, #2
 8005120:	e3bb      	b.n	800589a <HAL_ADC_ConfigChannel+0x79a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff fc27 	bl	8004982 <LL_ADC_REG_IsConversionOngoing>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	f040 83a0 	bne.w	800587c <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2b05      	cmp	r3, #5
 800514a:	d824      	bhi.n	8005196 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	3b02      	subs	r3, #2
 8005152:	2b03      	cmp	r3, #3
 8005154:	d81b      	bhi.n	800518e <HAL_ADC_ConfigChannel+0x8e>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <HAL_ADC_ConfigChannel+0x5c>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	0800516d 	.word	0x0800516d
 8005160:	08005175 	.word	0x08005175
 8005164:	0800517d 	.word	0x0800517d
 8005168:	08005185 	.word	0x08005185
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800516c:	230c      	movs	r3, #12
 800516e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005172:	e010      	b.n	8005196 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005174:	2312      	movs	r3, #18
 8005176:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800517a:	e00c      	b.n	8005196 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800517c:	2318      	movs	r3, #24
 800517e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005182:	e008      	b.n	8005196 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005188:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800518c:	e003      	b.n	8005196 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800518e:	2306      	movs	r3, #6
 8005190:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8005194:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80051a4:	f7ff fad6 	bl	8004754 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff fbe8 	bl	8004982 <LL_ADC_REG_IsConversionOngoing>
 80051b2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff fbf4 	bl	80049a8 <LL_ADC_INJ_IsConversionOngoing>
 80051c0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f040 81a4 	bne.w	8005516 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f040 819f 	bne.w	8005516 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	6819      	ldr	r1, [r3, #0]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	461a      	mov	r2, r3
 80051e6:	f7ff faf4 	bl	80047d2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	695a      	ldr	r2, [r3, #20]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	08db      	lsrs	r3, r3, #3
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b04      	cmp	r3, #4
 800520a:	d00a      	beq.n	8005222 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	6919      	ldr	r1, [r3, #16]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800521c:	f7ff fa32 	bl	8004684 <LL_ADC_SetOffset>
 8005220:	e179      	b.n	8005516 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2100      	movs	r1, #0
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff fa4f 	bl	80046cc <LL_ADC_GetOffsetChannel>
 800522e:	4603      	mov	r3, r0
 8005230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10a      	bne.n	800524e <HAL_ADC_ConfigChannel+0x14e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff fa44 	bl	80046cc <LL_ADC_GetOffsetChannel>
 8005244:	4603      	mov	r3, r0
 8005246:	0e9b      	lsrs	r3, r3, #26
 8005248:	f003 021f 	and.w	r2, r3, #31
 800524c:	e01e      	b.n	800528c <HAL_ADC_ConfigChannel+0x18c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2100      	movs	r1, #0
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff fa39 	bl	80046cc <LL_ADC_GetOffsetChannel>
 800525a:	4603      	mov	r3, r0
 800525c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005260:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005264:	fa93 f3a3 	rbit	r3, r3
 8005268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800526c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005270:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005274:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800527c:	2320      	movs	r3, #32
 800527e:	e004      	b.n	800528a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8005280:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005284:	fab3 f383 	clz	r3, r3
 8005288:	b2db      	uxtb	r3, r3
 800528a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005294:	2b00      	cmp	r3, #0
 8005296:	d105      	bne.n	80052a4 <HAL_ADC_ConfigChannel+0x1a4>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	0e9b      	lsrs	r3, r3, #26
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	e018      	b.n	80052d6 <HAL_ADC_ConfigChannel+0x1d6>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052b0:	fa93 f3a3 	rbit	r3, r3
 80052b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80052b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80052bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80052c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80052c8:	2320      	movs	r3, #32
 80052ca:	e004      	b.n	80052d6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80052cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80052d0:	fab3 f383 	clz	r3, r3
 80052d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d106      	bne.n	80052e8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2200      	movs	r2, #0
 80052e0:	2100      	movs	r1, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff fa08 	bl	80046f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2101      	movs	r1, #1
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff f9ec 	bl	80046cc <LL_ADC_GetOffsetChannel>
 80052f4:	4603      	mov	r3, r0
 80052f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10a      	bne.n	8005314 <HAL_ADC_ConfigChannel+0x214>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2101      	movs	r1, #1
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff f9e1 	bl	80046cc <LL_ADC_GetOffsetChannel>
 800530a:	4603      	mov	r3, r0
 800530c:	0e9b      	lsrs	r3, r3, #26
 800530e:	f003 021f 	and.w	r2, r3, #31
 8005312:	e01e      	b.n	8005352 <HAL_ADC_ConfigChannel+0x252>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2101      	movs	r1, #1
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff f9d6 	bl	80046cc <LL_ADC_GetOffsetChannel>
 8005320:	4603      	mov	r3, r0
 8005322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800532a:	fa93 f3a3 	rbit	r3, r3
 800532e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8005332:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800533a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8005342:	2320      	movs	r3, #32
 8005344:	e004      	b.n	8005350 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8005346:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800534a:	fab3 f383 	clz	r3, r3
 800534e:	b2db      	uxtb	r3, r3
 8005350:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800535a:	2b00      	cmp	r3, #0
 800535c:	d105      	bne.n	800536a <HAL_ADC_ConfigChannel+0x26a>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	0e9b      	lsrs	r3, r3, #26
 8005364:	f003 031f 	and.w	r3, r3, #31
 8005368:	e018      	b.n	800539c <HAL_ADC_ConfigChannel+0x29c>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005372:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005376:	fa93 f3a3 	rbit	r3, r3
 800537a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800537e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005382:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8005386:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800538e:	2320      	movs	r3, #32
 8005390:	e004      	b.n	800539c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8005392:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005396:	fab3 f383 	clz	r3, r3
 800539a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800539c:	429a      	cmp	r2, r3
 800539e:	d106      	bne.n	80053ae <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2200      	movs	r2, #0
 80053a6:	2101      	movs	r1, #1
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff f9a5 	bl	80046f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2102      	movs	r1, #2
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7ff f989 	bl	80046cc <LL_ADC_GetOffsetChannel>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <HAL_ADC_ConfigChannel+0x2da>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2102      	movs	r1, #2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff f97e 	bl	80046cc <LL_ADC_GetOffsetChannel>
 80053d0:	4603      	mov	r3, r0
 80053d2:	0e9b      	lsrs	r3, r3, #26
 80053d4:	f003 021f 	and.w	r2, r3, #31
 80053d8:	e01e      	b.n	8005418 <HAL_ADC_ConfigChannel+0x318>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2102      	movs	r1, #2
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff f973 	bl	80046cc <LL_ADC_GetOffsetChannel>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053f0:	fa93 f3a3 	rbit	r3, r3
 80053f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80053f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005400:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8005408:	2320      	movs	r3, #32
 800540a:	e004      	b.n	8005416 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800540c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005410:	fab3 f383 	clz	r3, r3
 8005414:	b2db      	uxtb	r3, r3
 8005416:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005420:	2b00      	cmp	r3, #0
 8005422:	d105      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x330>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	0e9b      	lsrs	r3, r3, #26
 800542a:	f003 031f 	and.w	r3, r3, #31
 800542e:	e014      	b.n	800545a <HAL_ADC_ConfigChannel+0x35a>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005436:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005438:	fa93 f3a3 	rbit	r3, r3
 800543c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800543e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005440:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8005444:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800544c:	2320      	movs	r3, #32
 800544e:	e004      	b.n	800545a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8005450:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005454:	fab3 f383 	clz	r3, r3
 8005458:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800545a:	429a      	cmp	r2, r3
 800545c:	d106      	bne.n	800546c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2200      	movs	r2, #0
 8005464:	2102      	movs	r1, #2
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff f946 	bl	80046f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2103      	movs	r1, #3
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff f92a 	bl	80046cc <LL_ADC_GetOffsetChannel>
 8005478:	4603      	mov	r3, r0
 800547a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <HAL_ADC_ConfigChannel+0x398>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2103      	movs	r1, #3
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff f91f 	bl	80046cc <LL_ADC_GetOffsetChannel>
 800548e:	4603      	mov	r3, r0
 8005490:	0e9b      	lsrs	r3, r3, #26
 8005492:	f003 021f 	and.w	r2, r3, #31
 8005496:	e017      	b.n	80054c8 <HAL_ADC_ConfigChannel+0x3c8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2103      	movs	r1, #3
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff f914 	bl	80046cc <LL_ADC_GetOffsetChannel>
 80054a4:	4603      	mov	r3, r0
 80054a6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80054b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80054b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80054ba:	2320      	movs	r3, #32
 80054bc:	e003      	b.n	80054c6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80054be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054c0:	fab3 f383 	clz	r3, r3
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d105      	bne.n	80054e0 <HAL_ADC_ConfigChannel+0x3e0>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	0e9b      	lsrs	r3, r3, #26
 80054da:	f003 031f 	and.w	r3, r3, #31
 80054de:	e011      	b.n	8005504 <HAL_ADC_ConfigChannel+0x404>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054e8:	fa93 f3a3 	rbit	r3, r3
 80054ec:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80054ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054f0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80054f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80054f8:	2320      	movs	r3, #32
 80054fa:	e003      	b.n	8005504 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80054fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054fe:	fab3 f383 	clz	r3, r3
 8005502:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005504:	429a      	cmp	r2, r3
 8005506:	d106      	bne.n	8005516 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2200      	movs	r2, #0
 800550e:	2103      	movs	r1, #3
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff f8f1 	bl	80046f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff fa0a 	bl	8004934 <LL_ADC_IsEnabled>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	f040 8140 	bne.w	80057a8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6819      	ldr	r1, [r3, #0]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	461a      	mov	r2, r3
 8005536:	f7ff f977 	bl	8004828 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	4a8f      	ldr	r2, [pc, #572]	; (800577c <HAL_ADC_ConfigChannel+0x67c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	f040 8131 	bne.w	80057a8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10b      	bne.n	800556e <HAL_ADC_ConfigChannel+0x46e>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	0e9b      	lsrs	r3, r3, #26
 800555c:	3301      	adds	r3, #1
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	2b09      	cmp	r3, #9
 8005564:	bf94      	ite	ls
 8005566:	2301      	movls	r3, #1
 8005568:	2300      	movhi	r3, #0
 800556a:	b2db      	uxtb	r3, r3
 800556c:	e019      	b.n	80055a2 <HAL_ADC_ConfigChannel+0x4a2>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005574:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005576:	fa93 f3a3 	rbit	r3, r3
 800557a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800557c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8005580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8005586:	2320      	movs	r3, #32
 8005588:	e003      	b.n	8005592 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800558a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800558c:	fab3 f383 	clz	r3, r3
 8005590:	b2db      	uxtb	r3, r3
 8005592:	3301      	adds	r3, #1
 8005594:	f003 031f 	and.w	r3, r3, #31
 8005598:	2b09      	cmp	r3, #9
 800559a:	bf94      	ite	ls
 800559c:	2301      	movls	r3, #1
 800559e:	2300      	movhi	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d079      	beq.n	800569a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d107      	bne.n	80055c2 <HAL_ADC_ConfigChannel+0x4c2>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	0e9b      	lsrs	r3, r3, #26
 80055b8:	3301      	adds	r3, #1
 80055ba:	069b      	lsls	r3, r3, #26
 80055bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055c0:	e015      	b.n	80055ee <HAL_ADC_ConfigChannel+0x4ee>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ca:	fa93 f3a3 	rbit	r3, r3
 80055ce:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80055d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80055d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80055da:	2320      	movs	r3, #32
 80055dc:	e003      	b.n	80055e6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80055de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e0:	fab3 f383 	clz	r3, r3
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	3301      	adds	r3, #1
 80055e8:	069b      	lsls	r3, r3, #26
 80055ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d109      	bne.n	800560e <HAL_ADC_ConfigChannel+0x50e>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	0e9b      	lsrs	r3, r3, #26
 8005600:	3301      	adds	r3, #1
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	2101      	movs	r1, #1
 8005608:	fa01 f303 	lsl.w	r3, r1, r3
 800560c:	e017      	b.n	800563e <HAL_ADC_ConfigChannel+0x53e>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005616:	fa93 f3a3 	rbit	r3, r3
 800561a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800561c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005626:	2320      	movs	r3, #32
 8005628:	e003      	b.n	8005632 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800562a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800562c:	fab3 f383 	clz	r3, r3
 8005630:	b2db      	uxtb	r3, r3
 8005632:	3301      	adds	r3, #1
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	2101      	movs	r1, #1
 800563a:	fa01 f303 	lsl.w	r3, r1, r3
 800563e:	ea42 0103 	orr.w	r1, r2, r3
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <HAL_ADC_ConfigChannel+0x564>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	0e9b      	lsrs	r3, r3, #26
 8005654:	3301      	adds	r3, #1
 8005656:	f003 021f 	and.w	r2, r3, #31
 800565a:	4613      	mov	r3, r2
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	4413      	add	r3, r2
 8005660:	051b      	lsls	r3, r3, #20
 8005662:	e018      	b.n	8005696 <HAL_ADC_ConfigChannel+0x596>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566c:	fa93 f3a3 	rbit	r3, r3
 8005670:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800567c:	2320      	movs	r3, #32
 800567e:	e003      	b.n	8005688 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8005680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005682:	fab3 f383 	clz	r3, r3
 8005686:	b2db      	uxtb	r3, r3
 8005688:	3301      	adds	r3, #1
 800568a:	f003 021f 	and.w	r2, r3, #31
 800568e:	4613      	mov	r3, r2
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	4413      	add	r3, r2
 8005694:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005696:	430b      	orrs	r3, r1
 8005698:	e081      	b.n	800579e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d107      	bne.n	80056b6 <HAL_ADC_ConfigChannel+0x5b6>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	0e9b      	lsrs	r3, r3, #26
 80056ac:	3301      	adds	r3, #1
 80056ae:	069b      	lsls	r3, r3, #26
 80056b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056b4:	e015      	b.n	80056e2 <HAL_ADC_ConfigChannel+0x5e2>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	fa93 f3a3 	rbit	r3, r3
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80056c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80056ce:	2320      	movs	r3, #32
 80056d0:	e003      	b.n	80056da <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	fab3 f383 	clz	r3, r3
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	3301      	adds	r3, #1
 80056dc:	069b      	lsls	r3, r3, #26
 80056de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d109      	bne.n	8005702 <HAL_ADC_ConfigChannel+0x602>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	0e9b      	lsrs	r3, r3, #26
 80056f4:	3301      	adds	r3, #1
 80056f6:	f003 031f 	and.w	r3, r3, #31
 80056fa:	2101      	movs	r1, #1
 80056fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005700:	e017      	b.n	8005732 <HAL_ADC_ConfigChannel+0x632>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	fa93 f3a3 	rbit	r3, r3
 800570e:	61bb      	str	r3, [r7, #24]
  return result;
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800571a:	2320      	movs	r3, #32
 800571c:	e003      	b.n	8005726 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	fab3 f383 	clz	r3, r3
 8005724:	b2db      	uxtb	r3, r3
 8005726:	3301      	adds	r3, #1
 8005728:	f003 031f 	and.w	r3, r3, #31
 800572c:	2101      	movs	r1, #1
 800572e:	fa01 f303 	lsl.w	r3, r1, r3
 8005732:	ea42 0103 	orr.w	r1, r2, r3
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10d      	bne.n	800575e <HAL_ADC_ConfigChannel+0x65e>
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	0e9b      	lsrs	r3, r3, #26
 8005748:	3301      	adds	r3, #1
 800574a:	f003 021f 	and.w	r2, r3, #31
 800574e:	4613      	mov	r3, r2
 8005750:	005b      	lsls	r3, r3, #1
 8005752:	4413      	add	r3, r2
 8005754:	3b1e      	subs	r3, #30
 8005756:	051b      	lsls	r3, r3, #20
 8005758:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800575c:	e01e      	b.n	800579c <HAL_ADC_ConfigChannel+0x69c>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	fa93 f3a3 	rbit	r3, r3
 800576a:	60fb      	str	r3, [r7, #12]
  return result;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d104      	bne.n	8005780 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8005776:	2320      	movs	r3, #32
 8005778:	e006      	b.n	8005788 <HAL_ADC_ConfigChannel+0x688>
 800577a:	bf00      	nop
 800577c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	fab3 f383 	clz	r3, r3
 8005786:	b2db      	uxtb	r3, r3
 8005788:	3301      	adds	r3, #1
 800578a:	f003 021f 	and.w	r2, r3, #31
 800578e:	4613      	mov	r3, r2
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	4413      	add	r3, r2
 8005794:	3b1e      	subs	r3, #30
 8005796:	051b      	lsls	r3, r3, #20
 8005798:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800579c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057a2:	4619      	mov	r1, r3
 80057a4:	f7ff f815 	bl	80047d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4b3d      	ldr	r3, [pc, #244]	; (80058a4 <HAL_ADC_ConfigChannel+0x7a4>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d06c      	beq.n	800588e <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057b4:	483c      	ldr	r0, [pc, #240]	; (80058a8 <HAL_ADC_ConfigChannel+0x7a8>)
 80057b6:	f7fe ff57 	bl	8004668 <LL_ADC_GetCommonPathInternalCh>
 80057ba:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a3a      	ldr	r2, [pc, #232]	; (80058ac <HAL_ADC_ConfigChannel+0x7ac>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d127      	bne.n	8005818 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80057c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d121      	bne.n	8005818 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a35      	ldr	r2, [pc, #212]	; (80058b0 <HAL_ADC_ConfigChannel+0x7b0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d157      	bne.n	800588e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80057de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057e6:	4619      	mov	r1, r3
 80057e8:	482f      	ldr	r0, [pc, #188]	; (80058a8 <HAL_ADC_ConfigChannel+0x7a8>)
 80057ea:	f7fe ff2a 	bl	8004642 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057ee:	4b31      	ldr	r3, [pc, #196]	; (80058b4 <HAL_ADC_ConfigChannel+0x7b4>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	099b      	lsrs	r3, r3, #6
 80057f4:	4a30      	ldr	r2, [pc, #192]	; (80058b8 <HAL_ADC_ConfigChannel+0x7b8>)
 80057f6:	fba2 2303 	umull	r2, r3, r2, r3
 80057fa:	099b      	lsrs	r3, r3, #6
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	4613      	mov	r3, r2
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	4413      	add	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005808:	e002      	b.n	8005810 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	3b01      	subs	r3, #1
 800580e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f9      	bne.n	800580a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005816:	e03a      	b.n	800588e <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a27      	ldr	r2, [pc, #156]	; (80058bc <HAL_ADC_ConfigChannel+0x7bc>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d113      	bne.n	800584a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005822:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10d      	bne.n	800584a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <HAL_ADC_ConfigChannel+0x7b0>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d12a      	bne.n	800588e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005838:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800583c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005840:	4619      	mov	r1, r3
 8005842:	4819      	ldr	r0, [pc, #100]	; (80058a8 <HAL_ADC_ConfigChannel+0x7a8>)
 8005844:	f7fe fefd 	bl	8004642 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005848:	e021      	b.n	800588e <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1c      	ldr	r2, [pc, #112]	; (80058c0 <HAL_ADC_ConfigChannel+0x7c0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d11c      	bne.n	800588e <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005854:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d116      	bne.n	800588e <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a12      	ldr	r2, [pc, #72]	; (80058b0 <HAL_ADC_ConfigChannel+0x7b0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d111      	bne.n	800588e <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800586a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800586e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005872:	4619      	mov	r1, r3
 8005874:	480c      	ldr	r0, [pc, #48]	; (80058a8 <HAL_ADC_ConfigChannel+0x7a8>)
 8005876:	f7fe fee4 	bl	8004642 <LL_ADC_SetCommonPathInternalCh>
 800587a:	e008      	b.n	800588e <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005880:	f043 0220 	orr.w	r2, r3, #32
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005896:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800589a:	4618      	mov	r0, r3
 800589c:	37d8      	adds	r7, #216	; 0xd8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	80080000 	.word	0x80080000
 80058a8:	50040300 	.word	0x50040300
 80058ac:	c7520000 	.word	0xc7520000
 80058b0:	50040000 	.word	0x50040000
 80058b4:	20000020 	.word	0x20000020
 80058b8:	053e2d63 	.word	0x053e2d63
 80058bc:	cb840000 	.word	0xcb840000
 80058c0:	80000001 	.word	0x80000001

080058c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff f82d 	bl	8004934 <LL_ADC_IsEnabled>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d169      	bne.n	80059b4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	4b36      	ldr	r3, [pc, #216]	; (80059c0 <ADC_Enable+0xfc>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00d      	beq.n	800590a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f2:	f043 0210 	orr.w	r2, r3, #16
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fe:	f043 0201 	orr.w	r2, r3, #1
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e055      	b.n	80059b6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe fffc 	bl	800490c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005914:	482b      	ldr	r0, [pc, #172]	; (80059c4 <ADC_Enable+0x100>)
 8005916:	f7fe fea7 	bl	8004668 <LL_ADC_GetCommonPathInternalCh>
 800591a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800591c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005920:	2b00      	cmp	r3, #0
 8005922:	d013      	beq.n	800594c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005924:	4b28      	ldr	r3, [pc, #160]	; (80059c8 <ADC_Enable+0x104>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	099b      	lsrs	r3, r3, #6
 800592a:	4a28      	ldr	r2, [pc, #160]	; (80059cc <ADC_Enable+0x108>)
 800592c:	fba2 2303 	umull	r2, r3, r2, r3
 8005930:	099b      	lsrs	r3, r3, #6
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	4613      	mov	r3, r2
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800593e:	e002      	b.n	8005946 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	3b01      	subs	r3, #1
 8005944:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1f9      	bne.n	8005940 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800594c:	f7fe fe36 	bl	80045bc <HAL_GetTick>
 8005950:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005952:	e028      	b.n	80059a6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f7fe ffeb 	bl	8004934 <LL_ADC_IsEnabled>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d104      	bne.n	800596e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe ffcf 	bl	800490c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800596e:	f7fe fe25 	bl	80045bc <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d914      	bls.n	80059a6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b01      	cmp	r3, #1
 8005988:	d00d      	beq.n	80059a6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598e:	f043 0210 	orr.w	r2, r3, #16
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599a:	f043 0201 	orr.w	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e007      	b.n	80059b6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d1cf      	bne.n	8005954 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	8000003f 	.word	0x8000003f
 80059c4:	50040300 	.word	0x50040300
 80059c8:	20000020 	.word	0x20000020
 80059cc:	053e2d63 	.word	0x053e2d63

080059d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d14b      	bne.n	8005a82 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d021      	beq.n	8005a48 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fe fe90 	bl	800472e <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d032      	beq.n	8005a7a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d12b      	bne.n	8005a7a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d11f      	bne.n	8005a7a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3e:	f043 0201 	orr.w	r2, r3, #1
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54
 8005a46:	e018      	b.n	8005a7a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d111      	bne.n	8005a7a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d105      	bne.n	8005a7a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a72:	f043 0201 	orr.w	r2, r3, #1
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f7fb fb48 	bl	8001110 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005a80:	e00e      	b.n	8005aa0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a86:	f003 0310 	and.w	r3, r3, #16
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f7ff fb2c 	bl	80050ec <HAL_ADC_ErrorCallback>
}
 8005a94:	e004      	b.n	8005aa0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	4798      	blx	r3
}
 8005aa0:	bf00      	nop
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f7ff fb04 	bl	80050c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005abc:	bf00      	nop
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae2:	f043 0204 	orr.w	r2, r3, #4
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff fafe 	bl	80050ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005af0:	bf00      	nop
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b78:	4013      	ands	r3, r2
 8005b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b8e:	4a04      	ldr	r2, [pc, #16]	; (8005ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	60d3      	str	r3, [r2, #12]
}
 8005b94:	bf00      	nop
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	e000ed00 	.word	0xe000ed00

08005ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ba8:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <__NVIC_GetPriorityGrouping+0x18>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	0a1b      	lsrs	r3, r3, #8
 8005bae:	f003 0307 	and.w	r3, r3, #7
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	e000ed00 	.word	0xe000ed00

08005bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	db0b      	blt.n	8005bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bd2:	79fb      	ldrb	r3, [r7, #7]
 8005bd4:	f003 021f 	and.w	r2, r3, #31
 8005bd8:	4907      	ldr	r1, [pc, #28]	; (8005bf8 <__NVIC_EnableIRQ+0x38>)
 8005bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bde:	095b      	lsrs	r3, r3, #5
 8005be0:	2001      	movs	r0, #1
 8005be2:	fa00 f202 	lsl.w	r2, r0, r2
 8005be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	e000e100 	.word	0xe000e100

08005bfc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	4603      	mov	r3, r0
 8005c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	db12      	blt.n	8005c34 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	f003 021f 	and.w	r2, r3, #31
 8005c14:	490a      	ldr	r1, [pc, #40]	; (8005c40 <__NVIC_DisableIRQ+0x44>)
 8005c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8005c22:	3320      	adds	r3, #32
 8005c24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005c28:	f3bf 8f4f 	dsb	sy
}
 8005c2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005c2e:	f3bf 8f6f 	isb	sy
}
 8005c32:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	e000e100 	.word	0xe000e100

08005c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	6039      	str	r1, [r7, #0]
 8005c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	db0a      	blt.n	8005c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	490c      	ldr	r1, [pc, #48]	; (8005c90 <__NVIC_SetPriority+0x4c>)
 8005c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c62:	0112      	lsls	r2, r2, #4
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	440b      	add	r3, r1
 8005c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c6c:	e00a      	b.n	8005c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	4908      	ldr	r1, [pc, #32]	; (8005c94 <__NVIC_SetPriority+0x50>)
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	3b04      	subs	r3, #4
 8005c7c:	0112      	lsls	r2, r2, #4
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	440b      	add	r3, r1
 8005c82:	761a      	strb	r2, [r3, #24]
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	e000e100 	.word	0xe000e100
 8005c94:	e000ed00 	.word	0xe000ed00

08005c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b089      	sub	sp, #36	; 0x24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f1c3 0307 	rsb	r3, r3, #7
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	bf28      	it	cs
 8005cb6:	2304      	movcs	r3, #4
 8005cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	2b06      	cmp	r3, #6
 8005cc0:	d902      	bls.n	8005cc8 <NVIC_EncodePriority+0x30>
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	3b03      	subs	r3, #3
 8005cc6:	e000      	b.n	8005cca <NVIC_EncodePriority+0x32>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	43da      	mvns	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	401a      	ands	r2, r3
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cea:	43d9      	mvns	r1, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cf0:	4313      	orrs	r3, r2
         );
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3724      	adds	r7, #36	; 0x24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d10:	d301      	bcc.n	8005d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d12:	2301      	movs	r3, #1
 8005d14:	e00f      	b.n	8005d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d16:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <SysTick_Config+0x40>)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d1e:	210f      	movs	r1, #15
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	f7ff ff8e 	bl	8005c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <SysTick_Config+0x40>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d2e:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <SysTick_Config+0x40>)
 8005d30:	2207      	movs	r2, #7
 8005d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	e000e010 	.word	0xe000e010

08005d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff ff05 	bl	8005b5c <__NVIC_SetPriorityGrouping>
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	4603      	mov	r3, r0
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
 8005d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d6c:	f7ff ff1a 	bl	8005ba4 <__NVIC_GetPriorityGrouping>
 8005d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	6978      	ldr	r0, [r7, #20]
 8005d78:	f7ff ff8e 	bl	8005c98 <NVIC_EncodePriority>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d82:	4611      	mov	r1, r2
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff ff5d 	bl	8005c44 <__NVIC_SetPriority>
}
 8005d8a:	bf00      	nop
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	4603      	mov	r3, r0
 8005d9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff ff0d 	bl	8005bc0 <__NVIC_EnableIRQ>
}
 8005da6:	bf00      	nop
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	4603      	mov	r3, r0
 8005db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff ff1d 	bl	8005bfc <__NVIC_DisableIRQ>
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b082      	sub	sp, #8
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff ff94 	bl	8005d00 <SysTick_Config>
 8005dd8:	4603      	mov	r3, r0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e098      	b.n	8005f28 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	4b4d      	ldr	r3, [pc, #308]	; (8005f34 <HAL_DMA_Init+0x150>)
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d80f      	bhi.n	8005e22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	4b4b      	ldr	r3, [pc, #300]	; (8005f38 <HAL_DMA_Init+0x154>)
 8005e0a:	4413      	add	r3, r2
 8005e0c:	4a4b      	ldr	r2, [pc, #300]	; (8005f3c <HAL_DMA_Init+0x158>)
 8005e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e12:	091b      	lsrs	r3, r3, #4
 8005e14:	009a      	lsls	r2, r3, #2
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a48      	ldr	r2, [pc, #288]	; (8005f40 <HAL_DMA_Init+0x15c>)
 8005e1e:	641a      	str	r2, [r3, #64]	; 0x40
 8005e20:	e00e      	b.n	8005e40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	461a      	mov	r2, r3
 8005e28:	4b46      	ldr	r3, [pc, #280]	; (8005f44 <HAL_DMA_Init+0x160>)
 8005e2a:	4413      	add	r3, r2
 8005e2c:	4a43      	ldr	r2, [pc, #268]	; (8005f3c <HAL_DMA_Init+0x158>)
 8005e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e32:	091b      	lsrs	r3, r3, #4
 8005e34:	009a      	lsls	r2, r3, #2
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a42      	ldr	r2, [pc, #264]	; (8005f48 <HAL_DMA_Init+0x164>)
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e9a:	d039      	beq.n	8005f10 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea0:	4a27      	ldr	r2, [pc, #156]	; (8005f40 <HAL_DMA_Init+0x15c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d11a      	bne.n	8005edc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005ea6:	4b29      	ldr	r3, [pc, #164]	; (8005f4c <HAL_DMA_Init+0x168>)
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	f003 031c 	and.w	r3, r3, #28
 8005eb2:	210f      	movs	r1, #15
 8005eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	4924      	ldr	r1, [pc, #144]	; (8005f4c <HAL_DMA_Init+0x168>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005ec0:	4b22      	ldr	r3, [pc, #136]	; (8005f4c <HAL_DMA_Init+0x168>)
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6859      	ldr	r1, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ecc:	f003 031c 	and.w	r3, r3, #28
 8005ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed4:	491d      	ldr	r1, [pc, #116]	; (8005f4c <HAL_DMA_Init+0x168>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	600b      	str	r3, [r1, #0]
 8005eda:	e019      	b.n	8005f10 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005edc:	4b1c      	ldr	r3, [pc, #112]	; (8005f50 <HAL_DMA_Init+0x16c>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee4:	f003 031c 	and.w	r3, r3, #28
 8005ee8:	210f      	movs	r1, #15
 8005eea:	fa01 f303 	lsl.w	r3, r1, r3
 8005eee:	43db      	mvns	r3, r3
 8005ef0:	4917      	ldr	r1, [pc, #92]	; (8005f50 <HAL_DMA_Init+0x16c>)
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005ef6:	4b16      	ldr	r3, [pc, #88]	; (8005f50 <HAL_DMA_Init+0x16c>)
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6859      	ldr	r1, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f02:	f003 031c 	and.w	r3, r3, #28
 8005f06:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0a:	4911      	ldr	r1, [pc, #68]	; (8005f50 <HAL_DMA_Init+0x16c>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	40020407 	.word	0x40020407
 8005f38:	bffdfff8 	.word	0xbffdfff8
 8005f3c:	cccccccd 	.word	0xcccccccd
 8005f40:	40020000 	.word	0x40020000
 8005f44:	bffdfbf8 	.word	0xbffdfbf8
 8005f48:	40020400 	.word	0x40020400
 8005f4c:	400200a8 	.word	0x400200a8
 8005f50:	400204a8 	.word	0x400204a8

08005f54 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e072      	b.n	800604c <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0201 	bic.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	4b36      	ldr	r3, [pc, #216]	; (8006058 <HAL_DMA_DeInit+0x104>)
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d80f      	bhi.n	8005fa2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	461a      	mov	r2, r3
 8005f88:	4b34      	ldr	r3, [pc, #208]	; (800605c <HAL_DMA_DeInit+0x108>)
 8005f8a:	4413      	add	r3, r2
 8005f8c:	4a34      	ldr	r2, [pc, #208]	; (8006060 <HAL_DMA_DeInit+0x10c>)
 8005f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f92:	091b      	lsrs	r3, r3, #4
 8005f94:	009a      	lsls	r2, r3, #2
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a31      	ldr	r2, [pc, #196]	; (8006064 <HAL_DMA_DeInit+0x110>)
 8005f9e:	641a      	str	r2, [r3, #64]	; 0x40
 8005fa0:	e00e      	b.n	8005fc0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	4b2f      	ldr	r3, [pc, #188]	; (8006068 <HAL_DMA_DeInit+0x114>)
 8005faa:	4413      	add	r3, r2
 8005fac:	4a2c      	ldr	r2, [pc, #176]	; (8006060 <HAL_DMA_DeInit+0x10c>)
 8005fae:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb2:	091b      	lsrs	r3, r3, #4
 8005fb4:	009a      	lsls	r2, r3, #2
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2b      	ldr	r2, [pc, #172]	; (800606c <HAL_DMA_DeInit+0x118>)
 8005fbe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fcc:	f003 021c 	and.w	r2, r3, #28
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8005fda:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	4a20      	ldr	r2, [pc, #128]	; (8006064 <HAL_DMA_DeInit+0x110>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d10d      	bne.n	8006002 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005fe6:	4b22      	ldr	r3, [pc, #136]	; (8006070 <HAL_DMA_DeInit+0x11c>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fee:	f003 031c 	and.w	r3, r3, #28
 8005ff2:	210f      	movs	r1, #15
 8005ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	491d      	ldr	r1, [pc, #116]	; (8006070 <HAL_DMA_DeInit+0x11c>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	600b      	str	r3, [r1, #0]
 8006000:	e00c      	b.n	800601c <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006002:	4b1c      	ldr	r3, [pc, #112]	; (8006074 <HAL_DMA_DeInit+0x120>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600a:	f003 031c 	and.w	r3, r3, #28
 800600e:	210f      	movs	r1, #15
 8006010:	fa01 f303 	lsl.w	r3, r1, r3
 8006014:	43db      	mvns	r3, r3
 8006016:	4917      	ldr	r1, [pc, #92]	; (8006074 <HAL_DMA_DeInit+0x120>)
 8006018:	4013      	ands	r3, r2
 800601a:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	40020407 	.word	0x40020407
 800605c:	bffdfff8 	.word	0xbffdfff8
 8006060:	cccccccd 	.word	0xcccccccd
 8006064:	40020000 	.word	0x40020000
 8006068:	bffdfbf8 	.word	0xbffdfbf8
 800606c:	40020400 	.word	0x40020400
 8006070:	400200a8 	.word	0x400200a8
 8006074:	400204a8 	.word	0x400204a8

08006078 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006090:	2b01      	cmp	r3, #1
 8006092:	d101      	bne.n	8006098 <HAL_DMA_Start_IT+0x20>
 8006094:	2302      	movs	r3, #2
 8006096:	e04b      	b.n	8006130 <HAL_DMA_Start_IT+0xb8>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d13a      	bne.n	8006122 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0201 	bic.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	68b9      	ldr	r1, [r7, #8]
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 f96b 	bl	80063ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d008      	beq.n	80060f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 020e 	orr.w	r2, r2, #14
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	e00f      	b.n	8006110 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0204 	bic.w	r2, r2, #4
 80060fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 020a 	orr.w	r2, r2, #10
 800610e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	e005      	b.n	800612e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800612a:	2302      	movs	r3, #2
 800612c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800612e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006140:	2300      	movs	r3, #0
 8006142:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d008      	beq.n	8006162 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2204      	movs	r2, #4
 8006154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e022      	b.n	80061a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 020e 	bic.w	r2, r2, #14
 8006170:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0201 	bic.w	r2, r2, #1
 8006180:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006186:	f003 021c 	and.w	r2, r3, #28
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	2101      	movs	r1, #1
 8006190:	fa01 f202 	lsl.w	r2, r1, r2
 8006194:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d005      	beq.n	80061d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2204      	movs	r2, #4
 80061d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	73fb      	strb	r3, [r7, #15]
 80061d6:	e029      	b.n	800622c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 020e 	bic.w	r2, r2, #14
 80061e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0201 	bic.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061fc:	f003 021c 	and.w	r2, r3, #28
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	2101      	movs	r1, #1
 8006206:	fa01 f202 	lsl.w	r2, r1, r2
 800620a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	4798      	blx	r3
    }
  }
  return status;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006252:	f003 031c 	and.w	r3, r3, #28
 8006256:	2204      	movs	r2, #4
 8006258:	409a      	lsls	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4013      	ands	r3, r2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d026      	beq.n	80062b0 <HAL_DMA_IRQHandler+0x7a>
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d021      	beq.n	80062b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d107      	bne.n	800628a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0204 	bic.w	r2, r2, #4
 8006288:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628e:	f003 021c 	and.w	r2, r3, #28
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	2104      	movs	r1, #4
 8006298:	fa01 f202 	lsl.w	r2, r1, r2
 800629c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d071      	beq.n	800638a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80062ae:	e06c      	b.n	800638a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b4:	f003 031c 	and.w	r3, r3, #28
 80062b8:	2202      	movs	r2, #2
 80062ba:	409a      	lsls	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4013      	ands	r3, r2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d02e      	beq.n	8006322 <HAL_DMA_IRQHandler+0xec>
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d029      	beq.n	8006322 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0320 	and.w	r3, r3, #32
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10b      	bne.n	80062f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 020a 	bic.w	r2, r2, #10
 80062ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f8:	f003 021c 	and.w	r2, r3, #28
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	2102      	movs	r1, #2
 8006302:	fa01 f202 	lsl.w	r2, r1, r2
 8006306:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	2b00      	cmp	r3, #0
 8006316:	d038      	beq.n	800638a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006320:	e033      	b.n	800638a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006326:	f003 031c 	and.w	r3, r3, #28
 800632a:	2208      	movs	r2, #8
 800632c:	409a      	lsls	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4013      	ands	r3, r2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d02a      	beq.n	800638c <HAL_DMA_IRQHandler+0x156>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f003 0308 	and.w	r3, r3, #8
 800633c:	2b00      	cmp	r3, #0
 800633e:	d025      	beq.n	800638c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 020e 	bic.w	r2, r2, #14
 800634e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006354:	f003 021c 	and.w	r2, r3, #28
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	2101      	movs	r1, #1
 800635e:	fa01 f202 	lsl.w	r2, r1, r2
 8006362:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637e:	2b00      	cmp	r3, #0
 8006380:	d004      	beq.n	800638c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800638a:	bf00      	nop
 800638c:	bf00      	nop
}
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063be:	f003 021c 	and.w	r2, r3, #28
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	2101      	movs	r1, #1
 80063c8:	fa01 f202 	lsl.w	r2, r1, r2
 80063cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	2b10      	cmp	r3, #16
 80063dc:	d108      	bne.n	80063f0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80063ee:	e007      	b.n	8006400 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	60da      	str	r2, [r3, #12]
}
 8006400:	bf00      	nop
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800641a:	e148      	b.n	80066ae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	2101      	movs	r1, #1
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	fa01 f303 	lsl.w	r3, r1, r3
 8006428:	4013      	ands	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 813a 	beq.w	80066a8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f003 0303 	and.w	r3, r3, #3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d005      	beq.n	800644c <HAL_GPIO_Init+0x40>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f003 0303 	and.w	r3, r3, #3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d130      	bne.n	80064ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	2203      	movs	r2, #3
 8006458:	fa02 f303 	lsl.w	r3, r2, r3
 800645c:	43db      	mvns	r3, r3
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4013      	ands	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006482:	2201      	movs	r2, #1
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	fa02 f303 	lsl.w	r3, r2, r3
 800648a:	43db      	mvns	r3, r3
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	4013      	ands	r3, r2
 8006490:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	091b      	lsrs	r3, r3, #4
 8006498:	f003 0201 	and.w	r2, r3, #1
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f003 0303 	and.w	r3, r3, #3
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d017      	beq.n	80064ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	2203      	movs	r2, #3
 80064c6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ca:	43db      	mvns	r3, r3
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4013      	ands	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	fa02 f303 	lsl.w	r3, r2, r3
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d123      	bne.n	800653e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	08da      	lsrs	r2, r3, #3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3208      	adds	r2, #8
 80064fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006502:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	220f      	movs	r2, #15
 800650e:	fa02 f303 	lsl.w	r3, r2, r3
 8006512:	43db      	mvns	r3, r3
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4013      	ands	r3, r2
 8006518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	691a      	ldr	r2, [r3, #16]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f003 0307 	and.w	r3, r3, #7
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	08da      	lsrs	r2, r3, #3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3208      	adds	r2, #8
 8006538:	6939      	ldr	r1, [r7, #16]
 800653a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	2203      	movs	r2, #3
 800654a:	fa02 f303 	lsl.w	r3, r2, r3
 800654e:	43db      	mvns	r3, r3
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4013      	ands	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f003 0203 	and.w	r2, r3, #3
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	fa02 f303 	lsl.w	r3, r2, r3
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 8094 	beq.w	80066a8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006580:	4b52      	ldr	r3, [pc, #328]	; (80066cc <HAL_GPIO_Init+0x2c0>)
 8006582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006584:	4a51      	ldr	r2, [pc, #324]	; (80066cc <HAL_GPIO_Init+0x2c0>)
 8006586:	f043 0301 	orr.w	r3, r3, #1
 800658a:	6613      	str	r3, [r2, #96]	; 0x60
 800658c:	4b4f      	ldr	r3, [pc, #316]	; (80066cc <HAL_GPIO_Init+0x2c0>)
 800658e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	60bb      	str	r3, [r7, #8]
 8006596:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006598:	4a4d      	ldr	r2, [pc, #308]	; (80066d0 <HAL_GPIO_Init+0x2c4>)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	089b      	lsrs	r3, r3, #2
 800659e:	3302      	adds	r3, #2
 80065a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f003 0303 	and.w	r3, r3, #3
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	220f      	movs	r2, #15
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	43db      	mvns	r3, r3
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4013      	ands	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80065c2:	d00d      	beq.n	80065e0 <HAL_GPIO_Init+0x1d4>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a43      	ldr	r2, [pc, #268]	; (80066d4 <HAL_GPIO_Init+0x2c8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d007      	beq.n	80065dc <HAL_GPIO_Init+0x1d0>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a42      	ldr	r2, [pc, #264]	; (80066d8 <HAL_GPIO_Init+0x2cc>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d101      	bne.n	80065d8 <HAL_GPIO_Init+0x1cc>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e004      	b.n	80065e2 <HAL_GPIO_Init+0x1d6>
 80065d8:	2307      	movs	r3, #7
 80065da:	e002      	b.n	80065e2 <HAL_GPIO_Init+0x1d6>
 80065dc:	2301      	movs	r3, #1
 80065de:	e000      	b.n	80065e2 <HAL_GPIO_Init+0x1d6>
 80065e0:	2300      	movs	r3, #0
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	f002 0203 	and.w	r2, r2, #3
 80065e8:	0092      	lsls	r2, r2, #2
 80065ea:	4093      	lsls	r3, r2
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80065f2:	4937      	ldr	r1, [pc, #220]	; (80066d0 <HAL_GPIO_Init+0x2c4>)
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	089b      	lsrs	r3, r3, #2
 80065f8:	3302      	adds	r3, #2
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006600:	4b36      	ldr	r3, [pc, #216]	; (80066dc <HAL_GPIO_Init+0x2d0>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	43db      	mvns	r3, r3
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4013      	ands	r3, r2
 800660e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006624:	4a2d      	ldr	r2, [pc, #180]	; (80066dc <HAL_GPIO_Init+0x2d0>)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800662a:	4b2c      	ldr	r3, [pc, #176]	; (80066dc <HAL_GPIO_Init+0x2d0>)
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	43db      	mvns	r3, r3
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4013      	ands	r3, r2
 8006638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800664e:	4a23      	ldr	r2, [pc, #140]	; (80066dc <HAL_GPIO_Init+0x2d0>)
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006654:	4b21      	ldr	r3, [pc, #132]	; (80066dc <HAL_GPIO_Init+0x2d0>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	43db      	mvns	r3, r3
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4013      	ands	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4313      	orrs	r3, r2
 8006676:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006678:	4a18      	ldr	r2, [pc, #96]	; (80066dc <HAL_GPIO_Init+0x2d0>)
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800667e:	4b17      	ldr	r3, [pc, #92]	; (80066dc <HAL_GPIO_Init+0x2d0>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	43db      	mvns	r3, r3
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4013      	ands	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80066a2:	4a0e      	ldr	r2, [pc, #56]	; (80066dc <HAL_GPIO_Init+0x2d0>)
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	3301      	adds	r3, #1
 80066ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	fa22 f303 	lsr.w	r3, r2, r3
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f47f aeaf 	bne.w	800641c <HAL_GPIO_Init+0x10>
  }
}
 80066be:	bf00      	nop
 80066c0:	bf00      	nop
 80066c2:	371c      	adds	r7, #28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	40021000 	.word	0x40021000
 80066d0:	40010000 	.word	0x40010000
 80066d4:	48000400 	.word	0x48000400
 80066d8:	48000800 	.word	0x48000800
 80066dc:	40010400 	.word	0x40010400

080066e0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80066ea:	2300      	movs	r3, #0
 80066ec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80066ee:	e0ab      	b.n	8006848 <HAL_GPIO_DeInit+0x168>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80066f0:	2201      	movs	r2, #1
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	fa02 f303 	lsl.w	r3, r2, r3
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	4013      	ands	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 809e 	beq.w	8006842 <HAL_GPIO_DeInit+0x162>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006706:	4a57      	ldr	r2, [pc, #348]	; (8006864 <HAL_GPIO_DeInit+0x184>)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	089b      	lsrs	r3, r3, #2
 800670c:	3302      	adds	r3, #2
 800670e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006712:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	220f      	movs	r2, #15
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4013      	ands	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800672e:	d00d      	beq.n	800674c <HAL_GPIO_DeInit+0x6c>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a4d      	ldr	r2, [pc, #308]	; (8006868 <HAL_GPIO_DeInit+0x188>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d007      	beq.n	8006748 <HAL_GPIO_DeInit+0x68>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a4c      	ldr	r2, [pc, #304]	; (800686c <HAL_GPIO_DeInit+0x18c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d101      	bne.n	8006744 <HAL_GPIO_DeInit+0x64>
 8006740:	2302      	movs	r3, #2
 8006742:	e004      	b.n	800674e <HAL_GPIO_DeInit+0x6e>
 8006744:	2307      	movs	r3, #7
 8006746:	e002      	b.n	800674e <HAL_GPIO_DeInit+0x6e>
 8006748:	2301      	movs	r3, #1
 800674a:	e000      	b.n	800674e <HAL_GPIO_DeInit+0x6e>
 800674c:	2300      	movs	r3, #0
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	f002 0203 	and.w	r2, r2, #3
 8006754:	0092      	lsls	r2, r2, #2
 8006756:	4093      	lsls	r3, r2
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	429a      	cmp	r2, r3
 800675c:	d132      	bne.n	80067c4 <HAL_GPIO_DeInit+0xe4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800675e:	4b44      	ldr	r3, [pc, #272]	; (8006870 <HAL_GPIO_DeInit+0x190>)
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	43db      	mvns	r3, r3
 8006766:	4942      	ldr	r1, [pc, #264]	; (8006870 <HAL_GPIO_DeInit+0x190>)
 8006768:	4013      	ands	r3, r2
 800676a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800676c:	4b40      	ldr	r3, [pc, #256]	; (8006870 <HAL_GPIO_DeInit+0x190>)
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	43db      	mvns	r3, r3
 8006774:	493e      	ldr	r1, [pc, #248]	; (8006870 <HAL_GPIO_DeInit+0x190>)
 8006776:	4013      	ands	r3, r2
 8006778:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800677a:	4b3d      	ldr	r3, [pc, #244]	; (8006870 <HAL_GPIO_DeInit+0x190>)
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	43db      	mvns	r3, r3
 8006782:	493b      	ldr	r1, [pc, #236]	; (8006870 <HAL_GPIO_DeInit+0x190>)
 8006784:	4013      	ands	r3, r2
 8006786:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006788:	4b39      	ldr	r3, [pc, #228]	; (8006870 <HAL_GPIO_DeInit+0x190>)
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	43db      	mvns	r3, r3
 8006790:	4937      	ldr	r1, [pc, #220]	; (8006870 <HAL_GPIO_DeInit+0x190>)
 8006792:	4013      	ands	r3, r2
 8006794:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f003 0303 	and.w	r3, r3, #3
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	220f      	movs	r2, #15
 80067a0:	fa02 f303 	lsl.w	r3, r2, r3
 80067a4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80067a6:	4a2f      	ldr	r2, [pc, #188]	; (8006864 <HAL_GPIO_DeInit+0x184>)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	089b      	lsrs	r3, r3, #2
 80067ac:	3302      	adds	r3, #2
 80067ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	43da      	mvns	r2, r3
 80067b6:	482b      	ldr	r0, [pc, #172]	; (8006864 <HAL_GPIO_DeInit+0x184>)
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	089b      	lsrs	r3, r3, #2
 80067bc:	400a      	ands	r2, r1
 80067be:	3302      	adds	r3, #2
 80067c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	2103      	movs	r1, #3
 80067ce:	fa01 f303 	lsl.w	r3, r1, r3
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	08da      	lsrs	r2, r3, #3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3208      	adds	r2, #8
 80067e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	220f      	movs	r2, #15
 80067ee:	fa02 f303 	lsl.w	r3, r2, r3
 80067f2:	43db      	mvns	r3, r3
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	08d2      	lsrs	r2, r2, #3
 80067f8:	4019      	ands	r1, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3208      	adds	r2, #8
 80067fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	2103      	movs	r1, #3
 800680c:	fa01 f303 	lsl.w	r3, r1, r3
 8006810:	43db      	mvns	r3, r3
 8006812:	401a      	ands	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	2101      	movs	r1, #1
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	fa01 f303 	lsl.w	r3, r1, r3
 8006824:	43db      	mvns	r3, r3
 8006826:	401a      	ands	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68da      	ldr	r2, [r3, #12]
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	2103      	movs	r1, #3
 8006836:	fa01 f303 	lsl.w	r3, r1, r3
 800683a:	43db      	mvns	r3, r3
 800683c:	401a      	ands	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	3301      	adds	r3, #1
 8006846:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	fa22 f303 	lsr.w	r3, r2, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	f47f af4d 	bne.w	80066f0 <HAL_GPIO_DeInit+0x10>
  }
}
 8006856:	bf00      	nop
 8006858:	bf00      	nop
 800685a:	371c      	adds	r7, #28
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	40010000 	.word	0x40010000
 8006868:	48000400 	.word	0x48000400
 800686c:	48000800 	.word	0x48000800
 8006870:	40010400 	.word	0x40010400

08006874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	807b      	strh	r3, [r7, #2]
 8006880:	4613      	mov	r3, r2
 8006882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006884:	787b      	ldrb	r3, [r7, #1]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800688a:	887a      	ldrh	r2, [r7, #2]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006890:	e002      	b.n	8006898 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006892:	887a      	ldrh	r2, [r7, #2]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	4603      	mov	r3, r0
 80068ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80068ae:	4b08      	ldr	r3, [pc, #32]	; (80068d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068b0:	695a      	ldr	r2, [r3, #20]
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	4013      	ands	r3, r2
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d006      	beq.n	80068c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80068ba:	4a05      	ldr	r2, [pc, #20]	; (80068d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068bc:	88fb      	ldrh	r3, [r7, #6]
 80068be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80068c0:	88fb      	ldrh	r3, [r7, #6]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fa fb94 	bl	8000ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	40010400 	.word	0x40010400

080068d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e08d      	b.n	8006a02 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d106      	bne.n	8006900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fd fb00 	bl	8003f00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2224      	movs	r2, #36	; 0x24
 8006904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0201 	bic.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006924:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006934:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d107      	bne.n	800694e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689a      	ldr	r2, [r3, #8]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800694a:	609a      	str	r2, [r3, #8]
 800694c:	e006      	b.n	800695c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800695a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	2b02      	cmp	r3, #2
 8006962:	d108      	bne.n	8006976 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006972:	605a      	str	r2, [r3, #4]
 8006974:	e007      	b.n	8006986 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006984:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6812      	ldr	r2, [r2, #0]
 8006990:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006998:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691a      	ldr	r2, [r3, #16]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	69d9      	ldr	r1, [r3, #28]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1a      	ldr	r2, [r3, #32]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0201 	orr.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	4608      	mov	r0, r1
 8006a16:	4611      	mov	r1, r2
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	817b      	strh	r3, [r7, #10]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	813b      	strh	r3, [r7, #8]
 8006a22:	4613      	mov	r3, r2
 8006a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b20      	cmp	r3, #32
 8006a30:	f040 80f9 	bne.w	8006c26 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d002      	beq.n	8006a40 <HAL_I2C_Mem_Write+0x34>
 8006a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d105      	bne.n	8006a4c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a46:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e0ed      	b.n	8006c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_I2C_Mem_Write+0x4e>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e0e6      	b.n	8006c28 <HAL_I2C_Mem_Write+0x21c>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a62:	f7fd fdab 	bl	80045bc <HAL_GetTick>
 8006a66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	2319      	movs	r3, #25
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f955 	bl	8006d24 <I2C_WaitOnFlagUntilTimeout>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e0d1      	b.n	8006c28 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2221      	movs	r2, #33	; 0x21
 8006a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2240      	movs	r2, #64	; 0x40
 8006a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a3a      	ldr	r2, [r7, #32]
 8006a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006aac:	88f8      	ldrh	r0, [r7, #6]
 8006aae:	893a      	ldrh	r2, [r7, #8]
 8006ab0:	8979      	ldrh	r1, [r7, #10]
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	9301      	str	r3, [sp, #4]
 8006ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	4603      	mov	r3, r0
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f8b9 	bl	8006c34 <I2C_RequestMemoryWrite>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0a9      	b.n	8006c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2bff      	cmp	r3, #255	; 0xff
 8006adc:	d90e      	bls.n	8006afc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	22ff      	movs	r2, #255	; 0xff
 8006ae2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	8979      	ldrh	r1, [r7, #10]
 8006aec:	2300      	movs	r3, #0
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 facf 	bl	8007098 <I2C_TransferConfig>
 8006afa:	e00f      	b.n	8006b1c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	8979      	ldrh	r1, [r7, #10]
 8006b0e:	2300      	movs	r3, #0
 8006b10:	9300      	str	r3, [sp, #0]
 8006b12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 fabe 	bl	8007098 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 f94e 	bl	8006dc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e07b      	b.n	8006c28 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	781a      	ldrb	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d034      	beq.n	8006bd4 <HAL_I2C_Mem_Write+0x1c8>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d130      	bne.n	8006bd4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2180      	movs	r1, #128	; 0x80
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f8d1 	bl	8006d24 <I2C_WaitOnFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e04d      	b.n	8006c28 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2bff      	cmp	r3, #255	; 0xff
 8006b94:	d90e      	bls.n	8006bb4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	22ff      	movs	r2, #255	; 0xff
 8006b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	8979      	ldrh	r1, [r7, #10]
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 fa73 	bl	8007098 <I2C_TransferConfig>
 8006bb2:	e00f      	b.n	8006bd4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	8979      	ldrh	r1, [r7, #10]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 fa62 	bl	8007098 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d19e      	bne.n	8006b1c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 f934 	bl	8006e50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e01a      	b.n	8006c28 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6859      	ldr	r1, [r3, #4]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <HAL_I2C_Mem_Write+0x224>)
 8006c06:	400b      	ands	r3, r1
 8006c08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2220      	movs	r2, #32
 8006c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	e000      	b.n	8006c28 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006c26:	2302      	movs	r3, #2
  }
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	fe00e800 	.word	0xfe00e800

08006c34 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	4608      	mov	r0, r1
 8006c3e:	4611      	mov	r1, r2
 8006c40:	461a      	mov	r2, r3
 8006c42:	4603      	mov	r3, r0
 8006c44:	817b      	strh	r3, [r7, #10]
 8006c46:	460b      	mov	r3, r1
 8006c48:	813b      	strh	r3, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c4e:	88fb      	ldrh	r3, [r7, #6]
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	8979      	ldrh	r1, [r7, #10]
 8006c54:	4b20      	ldr	r3, [pc, #128]	; (8006cd8 <I2C_RequestMemoryWrite+0xa4>)
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 fa1b 	bl	8007098 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	69b9      	ldr	r1, [r7, #24]
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f8ab 	bl	8006dc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e02c      	b.n	8006cd0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c76:	88fb      	ldrh	r3, [r7, #6]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d105      	bne.n	8006c88 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c7c:	893b      	ldrh	r3, [r7, #8]
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	629a      	str	r2, [r3, #40]	; 0x28
 8006c86:	e015      	b.n	8006cb4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c88:	893b      	ldrh	r3, [r7, #8]
 8006c8a:	0a1b      	lsrs	r3, r3, #8
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	69b9      	ldr	r1, [r7, #24]
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 f891 	bl	8006dc2 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e012      	b.n	8006cd0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006caa:	893b      	ldrh	r3, [r7, #8]
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	2180      	movs	r1, #128	; 0x80
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 f830 	bl	8006d24 <I2C_WaitOnFlagUntilTimeout>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e000      	b.n	8006cd0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	80002000 	.word	0x80002000

08006cdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d103      	bne.n	8006cfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d007      	beq.n	8006d18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f042 0201 	orr.w	r2, r2, #1
 8006d16:	619a      	str	r2, [r3, #24]
  }
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	603b      	str	r3, [r7, #0]
 8006d30:	4613      	mov	r3, r2
 8006d32:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d34:	e031      	b.n	8006d9a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3c:	d02d      	beq.n	8006d9a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d3e:	f7fd fc3d 	bl	80045bc <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d302      	bcc.n	8006d54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d122      	bne.n	8006d9a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	bf0c      	ite	eq
 8006d64:	2301      	moveq	r3, #1
 8006d66:	2300      	movne	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	79fb      	ldrb	r3, [r7, #7]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d113      	bne.n	8006d9a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d76:	f043 0220 	orr.w	r2, r3, #32
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2220      	movs	r2, #32
 8006d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e00f      	b.n	8006dba <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	699a      	ldr	r2, [r3, #24]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	4013      	ands	r3, r2
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	bf0c      	ite	eq
 8006daa:	2301      	moveq	r3, #1
 8006dac:	2300      	movne	r3, #0
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	79fb      	ldrb	r3, [r7, #7]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d0be      	beq.n	8006d36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006dce:	e033      	b.n	8006e38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	68b9      	ldr	r1, [r7, #8]
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f87f 	bl	8006ed8 <I2C_IsErrorOccurred>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e031      	b.n	8006e48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dea:	d025      	beq.n	8006e38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dec:	f7fd fbe6 	bl	80045bc <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d302      	bcc.n	8006e02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d11a      	bne.n	8006e38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	f003 0302 	and.w	r3, r3, #2
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d013      	beq.n	8006e38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e14:	f043 0220 	orr.w	r2, r3, #32
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e007      	b.n	8006e48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d1c4      	bne.n	8006dd0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e5c:	e02f      	b.n	8006ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	68b9      	ldr	r1, [r7, #8]
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 f838 	bl	8006ed8 <I2C_IsErrorOccurred>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e02d      	b.n	8006ece <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e72:	f7fd fba3 	bl	80045bc <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d302      	bcc.n	8006e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d11a      	bne.n	8006ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b20      	cmp	r3, #32
 8006e94:	d013      	beq.n	8006ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9a:	f043 0220 	orr.w	r2, r3, #32
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e007      	b.n	8006ece <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	f003 0320 	and.w	r3, r3, #32
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	d1c8      	bne.n	8006e5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
	...

08006ed8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b08a      	sub	sp, #40	; 0x28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	f003 0310 	and.w	r3, r3, #16
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d068      	beq.n	8006fd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2210      	movs	r2, #16
 8006f0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f0c:	e049      	b.n	8006fa2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d045      	beq.n	8006fa2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f16:	f7fd fb51 	bl	80045bc <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d302      	bcc.n	8006f2c <I2C_IsErrorOccurred+0x54>
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d13a      	bne.n	8006fa2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f4e:	d121      	bne.n	8006f94 <I2C_IsErrorOccurred+0xbc>
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f56:	d01d      	beq.n	8006f94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006f58:	7cfb      	ldrb	r3, [r7, #19]
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d01a      	beq.n	8006f94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006f6e:	f7fd fb25 	bl	80045bc <HAL_GetTick>
 8006f72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f74:	e00e      	b.n	8006f94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006f76:	f7fd fb21 	bl	80045bc <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b19      	cmp	r3, #25
 8006f82:	d907      	bls.n	8006f94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	f043 0320 	orr.w	r3, r3, #32
 8006f8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006f92:	e006      	b.n	8006fa2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	d1e9      	bne.n	8006f76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b20      	cmp	r3, #32
 8006fae:	d003      	beq.n	8006fb8 <I2C_IsErrorOccurred+0xe0>
 8006fb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0aa      	beq.n	8006f0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d103      	bne.n	8006fc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	f043 0304 	orr.w	r3, r3, #4
 8006fce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	f043 0301 	orr.w	r3, r3, #1
 8006fee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ff8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00b      	beq.n	8007022 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	f043 0308 	orr.w	r3, r3, #8
 8007010:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800701a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00b      	beq.n	8007044 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	f043 0302 	orr.w	r3, r3, #2
 8007032:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800703c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007048:	2b00      	cmp	r3, #0
 800704a:	d01c      	beq.n	8007086 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f7ff fe45 	bl	8006cdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6859      	ldr	r1, [r3, #4]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <I2C_IsErrorOccurred+0x1bc>)
 800705e:	400b      	ands	r3, r1
 8007060:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	431a      	orrs	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007086:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800708a:	4618      	mov	r0, r3
 800708c:	3728      	adds	r7, #40	; 0x28
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	fe00e800 	.word	0xfe00e800

08007098 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	607b      	str	r3, [r7, #4]
 80070a2:	460b      	mov	r3, r1
 80070a4:	817b      	strh	r3, [r7, #10]
 80070a6:	4613      	mov	r3, r2
 80070a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070aa:	897b      	ldrh	r3, [r7, #10]
 80070ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070b0:	7a7b      	ldrb	r3, [r7, #9]
 80070b2:	041b      	lsls	r3, r3, #16
 80070b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070be:	6a3b      	ldr	r3, [r7, #32]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	0d5b      	lsrs	r3, r3, #21
 80070d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80070d6:	4b08      	ldr	r3, [pc, #32]	; (80070f8 <I2C_TransferConfig+0x60>)
 80070d8:	430b      	orrs	r3, r1
 80070da:	43db      	mvns	r3, r3
 80070dc:	ea02 0103 	and.w	r1, r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80070ea:	bf00      	nop
 80070ec:	371c      	adds	r7, #28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	03ff63ff 	.word	0x03ff63ff

080070fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b20      	cmp	r3, #32
 8007110:	d138      	bne.n	8007184 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007118:	2b01      	cmp	r3, #1
 800711a:	d101      	bne.n	8007120 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800711c:	2302      	movs	r3, #2
 800711e:	e032      	b.n	8007186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2224      	movs	r2, #36	; 0x24
 800712c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0201 	bic.w	r2, r2, #1
 800713e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800714e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6819      	ldr	r1, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	683a      	ldr	r2, [r7, #0]
 800715c:	430a      	orrs	r2, r1
 800715e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0201 	orr.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2220      	movs	r2, #32
 8007174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	e000      	b.n	8007186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007184:	2302      	movs	r3, #2
  }
}
 8007186:	4618      	mov	r0, r3
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007192:	b480      	push	{r7}
 8007194:	b085      	sub	sp, #20
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	d139      	bne.n	800721c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d101      	bne.n	80071b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80071b2:	2302      	movs	r3, #2
 80071b4:	e033      	b.n	800721e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2224      	movs	r2, #36	; 0x24
 80071c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0201 	bic.w	r2, r2, #1
 80071d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80071e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	021b      	lsls	r3, r3, #8
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	e000      	b.n	800721e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800721c:	2302      	movs	r3, #2
  }
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
	...

0800722c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007234:	4b0b      	ldr	r3, [pc, #44]	; (8007264 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007238:	4a0a      	ldr	r2, [pc, #40]	; (8007264 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	6613      	str	r3, [r2, #96]	; 0x60
 8007240:	4b08      	ldr	r3, [pc, #32]	; (8007264 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	60fb      	str	r3, [r7, #12]
 800724a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800724c:	4b06      	ldr	r3, [pc, #24]	; (8007268 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	4905      	ldr	r1, [pc, #20]	; (8007268 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4313      	orrs	r3, r2
 8007256:	604b      	str	r3, [r1, #4]
}
 8007258:	bf00      	nop
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	40021000 	.word	0x40021000
 8007268:	40010000 	.word	0x40010000

0800726c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800726c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800726e:	b08b      	sub	sp, #44	; 0x2c
 8007270:	af06      	add	r7, sp, #24
 8007272:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e0f8      	b.n	8007470 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f009 f8f4 	bl	8010480 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2203      	movs	r2, #3
 800729c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f004 ff6f 	bl	800c188 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	687e      	ldr	r6, [r7, #4]
 80072b2:	466d      	mov	r5, sp
 80072b4:	f106 0410 	add.w	r4, r6, #16
 80072b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	602b      	str	r3, [r5, #0]
 80072c0:	1d33      	adds	r3, r6, #4
 80072c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072c4:	6838      	ldr	r0, [r7, #0]
 80072c6:	f004 ff37 	bl	800c138 <USB_CoreInit>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d005      	beq.n	80072dc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e0c9      	b.n	8007470 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2100      	movs	r1, #0
 80072e2:	4618      	mov	r0, r3
 80072e4:	f004 ff6b 	bl	800c1be <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072e8:	2300      	movs	r3, #0
 80072ea:	73fb      	strb	r3, [r7, #15]
 80072ec:	e040      	b.n	8007370 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
 80072f0:	6879      	ldr	r1, [r7, #4]
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	4613      	mov	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	00db      	lsls	r3, r3, #3
 80072fc:	440b      	add	r3, r1
 80072fe:	3301      	adds	r3, #1
 8007300:	2201      	movs	r2, #1
 8007302:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	00db      	lsls	r3, r3, #3
 8007312:	440b      	add	r3, r1
 8007314:	7bfa      	ldrb	r2, [r7, #15]
 8007316:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	6879      	ldr	r1, [r7, #4]
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	440b      	add	r3, r1
 8007328:	3303      	adds	r3, #3
 800732a:	2200      	movs	r2, #0
 800732c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800732e:	7bfa      	ldrb	r2, [r7, #15]
 8007330:	6879      	ldr	r1, [r7, #4]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	00db      	lsls	r3, r3, #3
 800733a:	440b      	add	r3, r1
 800733c:	3338      	adds	r3, #56	; 0x38
 800733e:	2200      	movs	r2, #0
 8007340:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007342:	7bfa      	ldrb	r2, [r7, #15]
 8007344:	6879      	ldr	r1, [r7, #4]
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	440b      	add	r3, r1
 8007350:	333c      	adds	r3, #60	; 0x3c
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007356:	7bfa      	ldrb	r2, [r7, #15]
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	4613      	mov	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	440b      	add	r3, r1
 8007364:	3340      	adds	r3, #64	; 0x40
 8007366:	2200      	movs	r2, #0
 8007368:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	3301      	adds	r3, #1
 800736e:	73fb      	strb	r3, [r7, #15]
 8007370:	7bfa      	ldrb	r2, [r7, #15]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	429a      	cmp	r2, r3
 8007378:	d3b9      	bcc.n	80072ee <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800737a:	2300      	movs	r3, #0
 800737c:	73fb      	strb	r3, [r7, #15]
 800737e:	e044      	b.n	800740a <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007380:	7bfa      	ldrb	r2, [r7, #15]
 8007382:	6879      	ldr	r1, [r7, #4]
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	00db      	lsls	r3, r3, #3
 800738c:	440b      	add	r3, r1
 800738e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8007392:	2200      	movs	r2, #0
 8007394:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007396:	7bfa      	ldrb	r2, [r7, #15]
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	00db      	lsls	r3, r3, #3
 80073a2:	440b      	add	r3, r1
 80073a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80073a8:	7bfa      	ldrb	r2, [r7, #15]
 80073aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80073ac:	7bfa      	ldrb	r2, [r7, #15]
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	440b      	add	r3, r1
 80073ba:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80073be:	2200      	movs	r2, #0
 80073c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80073c2:	7bfa      	ldrb	r2, [r7, #15]
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	4613      	mov	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	440b      	add	r3, r1
 80073d0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80073d8:	7bfa      	ldrb	r2, [r7, #15]
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	4613      	mov	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	440b      	add	r3, r1
 80073e6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80073ee:	7bfa      	ldrb	r2, [r7, #15]
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	440b      	add	r3, r1
 80073fc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	3301      	adds	r3, #1
 8007408:	73fb      	strb	r3, [r7, #15]
 800740a:	7bfa      	ldrb	r2, [r7, #15]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	429a      	cmp	r2, r3
 8007412:	d3b5      	bcc.n	8007380 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	603b      	str	r3, [r7, #0]
 800741a:	687e      	ldr	r6, [r7, #4]
 800741c:	466d      	mov	r5, sp
 800741e:	f106 0410 	add.w	r4, r6, #16
 8007422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	602b      	str	r3, [r5, #0]
 800742a:	1d33      	adds	r3, r6, #4
 800742c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800742e:	6838      	ldr	r0, [r7, #0]
 8007430:	f004 fed2 	bl	800c1d8 <USB_DevInit>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d005      	beq.n	8007446 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2202      	movs	r2, #2
 800743e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e014      	b.n	8007470 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d102      	bne.n	8007464 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f001 fc40 	bl	8008ce4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4618      	mov	r0, r3
 800746a:	f007 f963 	bl	800e734 <USB_DevDisconnect>

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007478 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_PCD_Start+0x16>
 800748a:	2302      	movs	r3, #2
 800748c:	e012      	b.n	80074b4 <HAL_PCD_Start+0x3c>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f004 fe5d 	bl	800c15a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f007 f92e 	bl	800e706 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f007 f948 	bl	800e75e <USB_ReadInterrupts>
 80074ce:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fafb 	bl	8007ad6 <PCD_EP_ISR_Handler>

    return;
 80074e0:	e110      	b.n	8007704 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d013      	beq.n	8007514 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074fe:	b292      	uxth	r2, r2
 8007500:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f009 f836 	bl	8010576 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800750a:	2100      	movs	r1, #0
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f8fc 	bl	800770a <HAL_PCD_SetAddress>

    return;
 8007512:	e0f7      	b.n	8007704 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00c      	beq.n	8007538 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007526:	b29a      	uxth	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007530:	b292      	uxth	r2, r2
 8007532:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007536:	e0e5      	b.n	8007704 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00c      	beq.n	800755c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800754a:	b29a      	uxth	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007554:	b292      	uxth	r2, r2
 8007556:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800755a:	e0d3      	b.n	8007704 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d034      	beq.n	80075d0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800756e:	b29a      	uxth	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0204 	bic.w	r2, r2, #4
 8007578:	b292      	uxth	r2, r2
 800757a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007586:	b29a      	uxth	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 0208 	bic.w	r2, r2, #8
 8007590:	b292      	uxth	r2, r2
 8007592:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800759c:	2b01      	cmp	r3, #1
 800759e:	d107      	bne.n	80075b0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80075a8:	2100      	movs	r1, #0
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f009 fa6e 	bl	8010a8c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f009 f819 	bl	80105e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075be:	b29a      	uxth	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80075c8:	b292      	uxth	r2, r2
 80075ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80075ce:	e099      	b.n	8007704 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d027      	beq.n	800762a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0208 	orr.w	r2, r2, #8
 80075ec:	b292      	uxth	r2, r2
 80075ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007604:	b292      	uxth	r2, r2
 8007606:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007612:	b29a      	uxth	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f042 0204 	orr.w	r2, r2, #4
 800761c:	b292      	uxth	r2, r2
 800761e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f008 ffc6 	bl	80105b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007628:	e06c      	b.n	8007704 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007630:	2b00      	cmp	r3, #0
 8007632:	d040      	beq.n	80076b6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800763c:	b29a      	uxth	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007646:	b292      	uxth	r2, r2
 8007648:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d12b      	bne.n	80076ae <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800765e:	b29a      	uxth	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f042 0204 	orr.w	r2, r2, #4
 8007668:	b292      	uxth	r2, r2
 800766a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007676:	b29a      	uxth	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f042 0208 	orr.w	r2, r2, #8
 8007680:	b292      	uxth	r2, r2
 8007682:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007696:	b29b      	uxth	r3, r3
 8007698:	089b      	lsrs	r3, r3, #2
 800769a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80076a4:	2101      	movs	r1, #1
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f009 f9f0 	bl	8010a8c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80076ac:	e02a      	b.n	8007704 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f008 ff80 	bl	80105b4 <HAL_PCD_SuspendCallback>
    return;
 80076b4:	e026      	b.n	8007704 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00f      	beq.n	80076e0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80076d2:	b292      	uxth	r2, r2
 80076d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f008 ff3e 	bl	801055a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80076de:	e011      	b.n	8007704 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00c      	beq.n	8007704 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076fc:	b292      	uxth	r2, r2
 80076fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007702:	bf00      	nop
  }
}
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	460b      	mov	r3, r1
 8007714:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_PCD_SetAddress+0x1a>
 8007720:	2302      	movs	r3, #2
 8007722:	e013      	b.n	800774c <HAL_PCD_SetAddress+0x42>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	78fa      	ldrb	r2, [r7, #3]
 8007730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	78fa      	ldrb	r2, [r7, #3]
 800773a:	4611      	mov	r1, r2
 800773c:	4618      	mov	r0, r3
 800773e:	f006 ffce 	bl	800e6de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	4608      	mov	r0, r1
 800775e:	4611      	mov	r1, r2
 8007760:	461a      	mov	r2, r3
 8007762:	4603      	mov	r3, r0
 8007764:	70fb      	strb	r3, [r7, #3]
 8007766:	460b      	mov	r3, r1
 8007768:	803b      	strh	r3, [r7, #0]
 800776a:	4613      	mov	r3, r2
 800776c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007772:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007776:	2b00      	cmp	r3, #0
 8007778:	da0e      	bge.n	8007798 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800777a:	78fb      	ldrb	r3, [r7, #3]
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	00db      	lsls	r3, r3, #3
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2201      	movs	r2, #1
 8007794:	705a      	strb	r2, [r3, #1]
 8007796:	e00e      	b.n	80077b6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007798:	78fb      	ldrb	r3, [r7, #3]
 800779a:	f003 0207 	and.w	r2, r3, #7
 800779e:	4613      	mov	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	00db      	lsls	r3, r3, #3
 80077a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	4413      	add	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2200      	movs	r2, #0
 80077b4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80077b6:	78fb      	ldrb	r3, [r7, #3]
 80077b8:	f003 0307 	and.w	r3, r3, #7
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80077c2:	883a      	ldrh	r2, [r7, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	78ba      	ldrb	r2, [r7, #2]
 80077cc:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80077ce:	78bb      	ldrb	r3, [r7, #2]
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d102      	bne.n	80077da <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d101      	bne.n	80077e8 <HAL_PCD_EP_Open+0x94>
 80077e4:	2302      	movs	r3, #2
 80077e6:	e00e      	b.n	8007806 <HAL_PCD_EP_Open+0xb2>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68f9      	ldr	r1, [r7, #12]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f004 fd10 	bl	800c21c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8007804:	7afb      	ldrb	r3, [r7, #11]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800781a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800781e:	2b00      	cmp	r3, #0
 8007820:	da0e      	bge.n	8007840 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007822:	78fb      	ldrb	r3, [r7, #3]
 8007824:	f003 0307 	and.w	r3, r3, #7
 8007828:	1c5a      	adds	r2, r3, #1
 800782a:	4613      	mov	r3, r2
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	4413      	add	r3, r2
 8007836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2201      	movs	r2, #1
 800783c:	705a      	strb	r2, [r3, #1]
 800783e:	e00e      	b.n	800785e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007840:	78fb      	ldrb	r3, [r7, #3]
 8007842:	f003 0207 	and.w	r2, r3, #7
 8007846:	4613      	mov	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	4413      	add	r3, r2
 800784c:	00db      	lsls	r3, r3, #3
 800784e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	4413      	add	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	f003 0307 	and.w	r3, r3, #7
 8007864:	b2da      	uxtb	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007870:	2b01      	cmp	r3, #1
 8007872:	d101      	bne.n	8007878 <HAL_PCD_EP_Close+0x6a>
 8007874:	2302      	movs	r3, #2
 8007876:	e00e      	b.n	8007896 <HAL_PCD_EP_Close+0x88>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68f9      	ldr	r1, [r7, #12]
 8007886:	4618      	mov	r0, r3
 8007888:	f005 f88c 	bl	800c9a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b086      	sub	sp, #24
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
 80078aa:	460b      	mov	r3, r1
 80078ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078ae:	7afb      	ldrb	r3, [r7, #11]
 80078b0:	f003 0207 	and.w	r2, r3, #7
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2200      	movs	r2, #0
 80078d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	2200      	movs	r2, #0
 80078dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078de:	7afb      	ldrb	r3, [r7, #11]
 80078e0:	f003 0307 	and.w	r3, r3, #7
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	6979      	ldr	r1, [r7, #20]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f005 fa44 	bl	800cd7e <USB_EPStartXfer>

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	607a      	str	r2, [r7, #4]
 800790a:	603b      	str	r3, [r7, #0]
 800790c:	460b      	mov	r3, r1
 800790e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007910:	7afb      	ldrb	r3, [r7, #11]
 8007912:	f003 0307 	and.w	r3, r3, #7
 8007916:	1c5a      	adds	r2, r3, #1
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	00db      	lsls	r3, r3, #3
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	4413      	add	r3, r2
 8007924:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2200      	movs	r2, #0
 8007944:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2201      	movs	r2, #1
 800794a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800794c:	7afb      	ldrb	r3, [r7, #11]
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	b2da      	uxtb	r2, r3
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6979      	ldr	r1, [r7, #20]
 800795e:	4618      	mov	r0, r3
 8007960:	f005 fa0d 	bl	800cd7e <USB_EPStartXfer>

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b084      	sub	sp, #16
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	460b      	mov	r3, r1
 8007978:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800797a:	78fb      	ldrb	r3, [r7, #3]
 800797c:	f003 0207 	and.w	r2, r3, #7
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	429a      	cmp	r2, r3
 8007986:	d901      	bls.n	800798c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e04c      	b.n	8007a26 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800798c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007990:	2b00      	cmp	r3, #0
 8007992:	da0e      	bge.n	80079b2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	4413      	add	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2201      	movs	r2, #1
 80079ae:	705a      	strb	r2, [r3, #1]
 80079b0:	e00c      	b.n	80079cc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80079b2:	78fa      	ldrb	r2, [r7, #3]
 80079b4:	4613      	mov	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4413      	add	r3, r2
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	4413      	add	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079d2:	78fb      	ldrb	r3, [r7, #3]
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d101      	bne.n	80079ec <HAL_PCD_EP_SetStall+0x7e>
 80079e8:	2302      	movs	r3, #2
 80079ea:	e01c      	b.n	8007a26 <HAL_PCD_EP_SetStall+0xb8>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68f9      	ldr	r1, [r7, #12]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f006 fd70 	bl	800e4e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	f003 0307 	and.w	r3, r3, #7
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d108      	bne.n	8007a1c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007a14:	4619      	mov	r1, r3
 8007a16:	4610      	mov	r0, r2
 8007a18:	f006 feb1 	bl	800e77e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	460b      	mov	r3, r1
 8007a38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007a3a:	78fb      	ldrb	r3, [r7, #3]
 8007a3c:	f003 020f 	and.w	r2, r3, #15
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d901      	bls.n	8007a4c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e040      	b.n	8007ace <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	da0e      	bge.n	8007a72 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a54:	78fb      	ldrb	r3, [r7, #3]
 8007a56:	f003 0307 	and.w	r3, r3, #7
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	4413      	add	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	705a      	strb	r2, [r3, #1]
 8007a70:	e00e      	b.n	8007a90 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	f003 0207 	and.w	r2, r3, #7
 8007a78:	4613      	mov	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	4413      	add	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a96:	78fb      	ldrb	r3, [r7, #3]
 8007a98:	f003 0307 	and.w	r3, r3, #7
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d101      	bne.n	8007ab0 <HAL_PCD_EP_ClrStall+0x82>
 8007aac:	2302      	movs	r3, #2
 8007aae:	e00e      	b.n	8007ace <HAL_PCD_EP_ClrStall+0xa0>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68f9      	ldr	r1, [r7, #12]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f006 fd5f 	bl	800e582 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b096      	sub	sp, #88	; 0x58
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007ade:	e3b1      	b.n	8008244 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ae8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007aec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	f003 030f 	and.w	r3, r3, #15
 8007af6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8007afa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f040 8173 	bne.w	8007dea <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b08:	f003 0310 	and.w	r3, r3, #16
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d150      	bne.n	8007bb2 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b20:	81fb      	strh	r3, [r7, #14]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	89fb      	ldrh	r3, [r7, #14]
 8007b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3328      	adds	r3, #40	; 0x28
 8007b38:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	461a      	mov	r2, r3
 8007b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	00db      	lsls	r3, r3, #3
 8007b4c:	4413      	add	r3, r2
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	6812      	ldr	r2, [r2, #0]
 8007b52:	4413      	add	r3, r2
 8007b54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b64:	695a      	ldr	r2, [r3, #20]
 8007b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	441a      	add	r2, r3
 8007b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b6e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007b70:	2100      	movs	r1, #0
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f008 fcd7 	bl	8010526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 835f 	beq.w	8008244 <PCD_EP_ISR_Handler+0x76e>
 8007b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 835a 	bne.w	8008244 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	b292      	uxth	r2, r2
 8007ba4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007bb0:	e348      	b.n	8008244 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007bb8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007bc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d032      	beq.n	8007c36 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	461a      	mov	r2, r3
 8007bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	4413      	add	r3, r2
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6812      	ldr	r2, [r2, #0]
 8007be8:	4413      	add	r3, r2
 8007bea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bf6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8007c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c04:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c08:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	f006 fe05 	bl	800e81a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	881b      	ldrh	r3, [r3, #0]
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	823b      	strh	r3, [r7, #16]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	8a3a      	ldrh	r2, [r7, #16]
 8007c26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c2a:	b292      	uxth	r2, r2
 8007c2c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f008 fc4c 	bl	80104cc <HAL_PCD_SetupStageCallback>
 8007c34:	e306      	b.n	8008244 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007c36:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f280 8302 	bge.w	8008244 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	83fb      	strh	r3, [r7, #30]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	8bfa      	ldrh	r2, [r7, #30]
 8007c56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c5a:	b292      	uxth	r2, r2
 8007c5c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	461a      	mov	r2, r3
 8007c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	4413      	add	r3, r2
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	6812      	ldr	r2, [r2, #0]
 8007c76:	4413      	add	r3, r2
 8007c78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c84:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c88:	69db      	ldr	r3, [r3, #28]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d019      	beq.n	8007cc2 <PCD_EP_ISR_Handler+0x1ec>
 8007c8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d015      	beq.n	8007cc2 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6818      	ldr	r0, [r3, #0]
 8007c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c9c:	6959      	ldr	r1, [r3, #20]
 8007c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ca0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ca4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	f006 fdb7 	bl	800e81a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cae:	695a      	ldr	r2, [r3, #20]
 8007cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cb2:	69db      	ldr	r3, [r3, #28]
 8007cb4:	441a      	add	r2, r3
 8007cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cb8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007cba:	2100      	movs	r1, #0
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f008 fc17 	bl	80104f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007ccc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f040 82b5 	bne.w	8008244 <PCD_EP_ISR_Handler+0x76e>
 8007cda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007cde:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007ce2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ce6:	f000 82ad 	beq.w	8008244 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	61bb      	str	r3, [r7, #24]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	4413      	add	r3, r2
 8007d00:	61bb      	str	r3, [r7, #24]
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d08:	617b      	str	r3, [r7, #20]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	881b      	ldrh	r3, [r3, #0]
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	801a      	strh	r2, [r3, #0]
 8007d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8007d20:	d91d      	bls.n	8007d5e <PCD_EP_ISR_Handler+0x288>
 8007d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	095b      	lsrs	r3, r3, #5
 8007d28:	647b      	str	r3, [r7, #68]	; 0x44
 8007d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f003 031f 	and.w	r3, r3, #31
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d102      	bne.n	8007d3c <PCD_EP_ISR_Handler+0x266>
 8007d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	881b      	ldrh	r3, [r3, #0]
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	029b      	lsls	r3, r3, #10
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	801a      	strh	r2, [r3, #0]
 8007d5c:	e026      	b.n	8007dac <PCD_EP_ISR_Handler+0x2d6>
 8007d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10a      	bne.n	8007d7c <PCD_EP_ISR_Handler+0x2a6>
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	801a      	strh	r2, [r3, #0]
 8007d7a:	e017      	b.n	8007dac <PCD_EP_ISR_Handler+0x2d6>
 8007d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	085b      	lsrs	r3, r3, #1
 8007d82:	647b      	str	r3, [r7, #68]	; 0x44
 8007d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d002      	beq.n	8007d96 <PCD_EP_ISR_Handler+0x2c0>
 8007d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d92:	3301      	adds	r3, #1
 8007d94:	647b      	str	r3, [r7, #68]	; 0x44
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	029b      	lsls	r3, r3, #10
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4313      	orrs	r3, r2
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dbc:	827b      	strh	r3, [r7, #18]
 8007dbe:	8a7b      	ldrh	r3, [r7, #18]
 8007dc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007dc4:	827b      	strh	r3, [r7, #18]
 8007dc6:	8a7b      	ldrh	r3, [r7, #18]
 8007dc8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007dcc:	827b      	strh	r3, [r7, #18]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	8a7b      	ldrh	r3, [r7, #18]
 8007dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	8013      	strh	r3, [r2, #0]
 8007de8:	e22c      	b.n	8008244 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007dfe:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f280 80f6 	bge.w	8007ff4 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007e1e:	4013      	ands	r3, r2
 8007e20:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007e36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e3a:	b292      	uxth	r2, r2
 8007e3c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007e3e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	4413      	add	r3, r2
 8007e52:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e56:	7b1b      	ldrb	r3, [r3, #12]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d123      	bne.n	8007ea4 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	461a      	mov	r2, r3
 8007e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	00db      	lsls	r3, r3, #3
 8007e6e:	4413      	add	r3, r2
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6812      	ldr	r2, [r2, #0]
 8007e74:	4413      	add	r3, r2
 8007e76:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e80:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8007e84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 808e 	beq.w	8007faa <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6818      	ldr	r0, [r3, #0]
 8007e92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e94:	6959      	ldr	r1, [r3, #20]
 8007e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e98:	88da      	ldrh	r2, [r3, #6]
 8007e9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007e9e:	f006 fcbc 	bl	800e81a <USB_ReadPMA>
 8007ea2:	e082      	b.n	8007faa <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ea6:	78db      	ldrb	r3, [r3, #3]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d10a      	bne.n	8007ec2 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007eac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f9d3 	bl	8008260 <HAL_PCD_EP_DB_Receive>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8007ec0:	e073      	b.n	8007faa <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007edc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	441a      	add	r2, r3
 8007eee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007efe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d022      	beq.n	8007f66 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	00db      	lsls	r3, r3, #3
 8007f32:	4413      	add	r3, r2
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	6812      	ldr	r2, [r2, #0]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f44:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007f48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d02c      	beq.n	8007faa <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f56:	6959      	ldr	r1, [r3, #20]
 8007f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f5a:	891a      	ldrh	r2, [r3, #8]
 8007f5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007f60:	f006 fc5b 	bl	800e81a <USB_ReadPMA>
 8007f64:	e021      	b.n	8007faa <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	461a      	mov	r2, r3
 8007f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	4413      	add	r3, r2
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f84:	881b      	ldrh	r3, [r3, #0]
 8007f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f8a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007f8e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d009      	beq.n	8007faa <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6818      	ldr	r0, [r3, #0]
 8007f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f9c:	6959      	ldr	r1, [r3, #20]
 8007f9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fa0:	895a      	ldrh	r2, [r3, #10]
 8007fa2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007fa6:	f006 fc38 	bl	800e81a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fac:	69da      	ldr	r2, [r3, #28]
 8007fae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007fb2:	441a      	add	r2, r3
 8007fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fb6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fba:	695a      	ldr	r2, [r3, #20]
 8007fbc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007fc0:	441a      	add	r2, r3
 8007fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fc4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d005      	beq.n	8007fda <PCD_EP_ISR_Handler+0x504>
 8007fce:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8007fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d206      	bcs.n	8007fe8 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f008 fa85 	bl	80104f0 <HAL_PCD_DataOutStageCallback>
 8007fe6:	e005      	b.n	8007ff4 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f004 fec5 	bl	800cd7e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007ff4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 8121 	beq.w	8008244 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8008002:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	4613      	mov	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	00db      	lsls	r3, r3, #3
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	4413      	add	r3, r2
 8008014:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	b29b      	uxth	r3, r3
 8008028:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800802c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008030:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	461a      	mov	r2, r3
 800803a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	441a      	add	r2, r3
 8008042:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800804a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800804e:	b29b      	uxth	r3, r3
 8008050:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008054:	78db      	ldrb	r3, [r3, #3]
 8008056:	2b01      	cmp	r3, #1
 8008058:	f040 80a2 	bne.w	80081a0 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 800805c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800805e:	2200      	movs	r2, #0
 8008060:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008064:	7b1b      	ldrb	r3, [r3, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 8093 	beq.w	8008192 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800806c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008074:	2b00      	cmp	r3, #0
 8008076:	d046      	beq.n	8008106 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800807a:	785b      	ldrb	r3, [r3, #1]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d126      	bne.n	80080ce <PCD_EP_ISR_Handler+0x5f8>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800808e:	b29b      	uxth	r3, r3
 8008090:	461a      	mov	r2, r3
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	4413      	add	r3, r2
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
 8008098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	00da      	lsls	r2, r3, #3
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	4413      	add	r3, r2
 80080a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080a6:	623b      	str	r3, [r7, #32]
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	6a3b      	ldr	r3, [r7, #32]
 80080b6:	801a      	strh	r2, [r3, #0]
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	801a      	strh	r2, [r3, #0]
 80080cc:	e061      	b.n	8008192 <PCD_EP_ISR_Handler+0x6bc>
 80080ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d15d      	bne.n	8008192 <PCD_EP_ISR_Handler+0x6bc>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	461a      	mov	r2, r3
 80080e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ea:	4413      	add	r3, r2
 80080ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	00da      	lsls	r2, r3, #3
 80080f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f6:	4413      	add	r3, r2
 80080f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	2200      	movs	r2, #0
 8008102:	801a      	strh	r2, [r3, #0]
 8008104:	e045      	b.n	8008192 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800810c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800810e:	785b      	ldrb	r3, [r3, #1]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d126      	bne.n	8008162 <PCD_EP_ISR_Handler+0x68c>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	637b      	str	r3, [r7, #52]	; 0x34
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008122:	b29b      	uxth	r3, r3
 8008124:	461a      	mov	r2, r3
 8008126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008128:	4413      	add	r3, r2
 800812a:	637b      	str	r3, [r7, #52]	; 0x34
 800812c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	00da      	lsls	r2, r3, #3
 8008132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008134:	4413      	add	r3, r2
 8008136:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800813a:	633b      	str	r3, [r7, #48]	; 0x30
 800813c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	b29b      	uxth	r3, r3
 8008142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008146:	b29a      	uxth	r2, r3
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	801a      	strh	r2, [r3, #0]
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	b29b      	uxth	r3, r3
 8008152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800815a:	b29a      	uxth	r2, r3
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	801a      	strh	r2, [r3, #0]
 8008160:	e017      	b.n	8008192 <PCD_EP_ISR_Handler+0x6bc>
 8008162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d113      	bne.n	8008192 <PCD_EP_ISR_Handler+0x6bc>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008172:	b29b      	uxth	r3, r3
 8008174:	461a      	mov	r2, r3
 8008176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008178:	4413      	add	r3, r2
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800817c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	00da      	lsls	r2, r3, #3
 8008182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008184:	4413      	add	r3, r2
 8008186:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800818a:	63bb      	str	r3, [r7, #56]	; 0x38
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	2200      	movs	r2, #0
 8008190:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f008 f9c4 	bl	8010526 <HAL_PCD_DataInStageCallback>
 800819e:	e051      	b.n	8008244 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80081a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80081a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d144      	bne.n	8008236 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	461a      	mov	r2, r3
 80081b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	00db      	lsls	r3, r3, #3
 80081be:	4413      	add	r3, r2
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	4413      	add	r3, r2
 80081c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081ca:	881b      	ldrh	r3, [r3, #0]
 80081cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081d0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80081d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081d6:	699a      	ldr	r2, [r3, #24]
 80081d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80081dc:	429a      	cmp	r2, r3
 80081de:	d907      	bls.n	80081f0 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 80081e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081e2:	699a      	ldr	r2, [r3, #24]
 80081e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80081e8:	1ad2      	subs	r2, r2, r3
 80081ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081ec:	619a      	str	r2, [r3, #24]
 80081ee:	e002      	b.n	80081f6 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 80081f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081f2:	2200      	movs	r2, #0
 80081f4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80081f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d106      	bne.n	800820c <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80081fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f008 f98e 	bl	8010526 <HAL_PCD_DataInStageCallback>
 800820a:	e01b      	b.n	8008244 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800820c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800820e:	695a      	ldr	r2, [r3, #20]
 8008210:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008214:	441a      	add	r2, r3
 8008216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008218:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800821a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800821c:	69da      	ldr	r2, [r3, #28]
 800821e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008222:	441a      	add	r2, r3
 8008224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008226:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800822e:	4618      	mov	r0, r3
 8008230:	f004 fda5 	bl	800cd7e <USB_EPStartXfer>
 8008234:	e006      	b.n	8008244 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008236:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800823a:	461a      	mov	r2, r3
 800823c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f917 	bl	8008472 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800824c:	b29b      	uxth	r3, r3
 800824e:	b21b      	sxth	r3, r3
 8008250:	2b00      	cmp	r3, #0
 8008252:	f6ff ac45 	blt.w	8007ae0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3758      	adds	r7, #88	; 0x58
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b088      	sub	sp, #32
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	4613      	mov	r3, r2
 800826c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800826e:	88fb      	ldrh	r3, [r7, #6]
 8008270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d07c      	beq.n	8008372 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008280:	b29b      	uxth	r3, r3
 8008282:	461a      	mov	r2, r3
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	00db      	lsls	r3, r3, #3
 800828a:	4413      	add	r3, r2
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	6812      	ldr	r2, [r2, #0]
 8008290:	4413      	add	r3, r2
 8008292:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800829c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	699a      	ldr	r2, [r3, #24]
 80082a2:	8b7b      	ldrh	r3, [r7, #26]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d306      	bcc.n	80082b6 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	699a      	ldr	r2, [r3, #24]
 80082ac:	8b7b      	ldrh	r3, [r7, #26]
 80082ae:	1ad2      	subs	r2, r2, r3
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	619a      	str	r2, [r3, #24]
 80082b4:	e002      	b.n	80082bc <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2200      	movs	r2, #0
 80082ba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d123      	bne.n	800830c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082de:	833b      	strh	r3, [r7, #24]
 80082e0:	8b3b      	ldrh	r3, [r7, #24]
 80082e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80082e6:	833b      	strh	r3, [r7, #24]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	461a      	mov	r2, r3
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	441a      	add	r2, r3
 80082f6:	8b3b      	ldrh	r3, [r7, #24]
 80082f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008308:	b29b      	uxth	r3, r3
 800830a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800830c:	88fb      	ldrh	r3, [r7, #6]
 800830e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008312:	2b00      	cmp	r3, #0
 8008314:	d01f      	beq.n	8008356 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	b29b      	uxth	r3, r3
 8008328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800832c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008330:	82fb      	strh	r3, [r7, #22]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	441a      	add	r2, r3
 8008340:	8afb      	ldrh	r3, [r7, #22]
 8008342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800834a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800834e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008352:	b29b      	uxth	r3, r3
 8008354:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008356:	8b7b      	ldrh	r3, [r7, #26]
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 8085 	beq.w	8008468 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	6959      	ldr	r1, [r3, #20]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	891a      	ldrh	r2, [r3, #8]
 800836a:	8b7b      	ldrh	r3, [r7, #26]
 800836c:	f006 fa55 	bl	800e81a <USB_ReadPMA>
 8008370:	e07a      	b.n	8008468 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800837a:	b29b      	uxth	r3, r3
 800837c:	461a      	mov	r2, r3
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	4413      	add	r3, r2
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	6812      	ldr	r2, [r2, #0]
 800838a:	4413      	add	r3, r2
 800838c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008396:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	699a      	ldr	r2, [r3, #24]
 800839c:	8b7b      	ldrh	r3, [r7, #26]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d306      	bcc.n	80083b0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	699a      	ldr	r2, [r3, #24]
 80083a6:	8b7b      	ldrh	r3, [r7, #26]
 80083a8:	1ad2      	subs	r2, r2, r3
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	619a      	str	r2, [r3, #24]
 80083ae:	e002      	b.n	80083b6 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2200      	movs	r2, #0
 80083b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d123      	bne.n	8008406 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d8:	83fb      	strh	r3, [r7, #30]
 80083da:	8bfb      	ldrh	r3, [r7, #30]
 80083dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80083e0:	83fb      	strh	r3, [r7, #30]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	441a      	add	r2, r3
 80083f0:	8bfb      	ldrh	r3, [r7, #30]
 80083f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008402:	b29b      	uxth	r3, r3
 8008404:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008406:	88fb      	ldrh	r3, [r7, #6]
 8008408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840c:	2b00      	cmp	r3, #0
 800840e:	d11f      	bne.n	8008450 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	461a      	mov	r2, r3
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	881b      	ldrh	r3, [r3, #0]
 8008420:	b29b      	uxth	r3, r3
 8008422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800842a:	83bb      	strh	r3, [r7, #28]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	461a      	mov	r2, r3
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	441a      	add	r2, r3
 800843a:	8bbb      	ldrh	r3, [r7, #28]
 800843c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008448:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800844c:	b29b      	uxth	r3, r3
 800844e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008450:	8b7b      	ldrh	r3, [r7, #26]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d008      	beq.n	8008468 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6818      	ldr	r0, [r3, #0]
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	6959      	ldr	r1, [r3, #20]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	895a      	ldrh	r2, [r3, #10]
 8008462:	8b7b      	ldrh	r3, [r7, #26]
 8008464:	f006 f9d9 	bl	800e81a <USB_ReadPMA>
    }
  }

  return count;
 8008468:	8b7b      	ldrh	r3, [r7, #26]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3720      	adds	r7, #32
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b0a4      	sub	sp, #144	; 0x90
 8008476:	af00      	add	r7, sp, #0
 8008478:	60f8      	str	r0, [r7, #12]
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	4613      	mov	r3, r2
 800847e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008480:	88fb      	ldrh	r3, [r7, #6]
 8008482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008486:	2b00      	cmp	r3, #0
 8008488:	f000 81db 	beq.w	8008842 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008494:	b29b      	uxth	r3, r3
 8008496:	461a      	mov	r2, r3
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	00db      	lsls	r3, r3, #3
 800849e:	4413      	add	r3, r2
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	6812      	ldr	r2, [r2, #0]
 80084a4:	4413      	add	r3, r2
 80084a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80084aa:	881b      	ldrh	r3, [r3, #0]
 80084ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084b0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	699a      	ldr	r2, [r3, #24]
 80084b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80084bc:	429a      	cmp	r2, r3
 80084be:	d907      	bls.n	80084d0 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	699a      	ldr	r2, [r3, #24]
 80084c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80084c8:	1ad2      	subs	r2, r2, r3
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	619a      	str	r2, [r3, #24]
 80084ce:	e002      	b.n	80084d6 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2200      	movs	r2, #0
 80084d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f040 80b9 	bne.w	8008652 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d126      	bne.n	8008536 <HAL_PCD_EP_DB_Transmit+0xc4>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	4413      	add	r3, r2
 80084fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	00da      	lsls	r2, r3, #3
 8008506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008508:	4413      	add	r3, r2
 800850a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800850e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	b29b      	uxth	r3, r3
 8008516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800851a:	b29a      	uxth	r2, r3
 800851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851e:	801a      	strh	r2, [r3, #0]
 8008520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	b29b      	uxth	r3, r3
 8008526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800852a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800852e:	b29a      	uxth	r2, r3
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	801a      	strh	r2, [r3, #0]
 8008534:	e01a      	b.n	800856c <HAL_PCD_EP_DB_Transmit+0xfa>
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	785b      	ldrb	r3, [r3, #1]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d116      	bne.n	800856c <HAL_PCD_EP_DB_Transmit+0xfa>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	637b      	str	r3, [r7, #52]	; 0x34
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800854c:	b29b      	uxth	r3, r3
 800854e:	461a      	mov	r2, r3
 8008550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008552:	4413      	add	r3, r2
 8008554:	637b      	str	r3, [r7, #52]	; 0x34
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	00da      	lsls	r2, r3, #3
 800855c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855e:	4413      	add	r3, r2
 8008560:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008564:	633b      	str	r3, [r7, #48]	; 0x30
 8008566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008568:	2200      	movs	r2, #0
 800856a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	627b      	str	r3, [r7, #36]	; 0x24
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	785b      	ldrb	r3, [r3, #1]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d126      	bne.n	80085c8 <HAL_PCD_EP_DB_Transmit+0x156>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	61fb      	str	r3, [r7, #28]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008588:	b29b      	uxth	r3, r3
 800858a:	461a      	mov	r2, r3
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	4413      	add	r3, r2
 8008590:	61fb      	str	r3, [r7, #28]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	00da      	lsls	r2, r3, #3
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	4413      	add	r3, r2
 800859c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085a0:	61bb      	str	r3, [r7, #24]
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	801a      	strh	r2, [r3, #0]
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	801a      	strh	r2, [r3, #0]
 80085c6:	e017      	b.n	80085f8 <HAL_PCD_EP_DB_Transmit+0x186>
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	785b      	ldrb	r3, [r3, #1]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d113      	bne.n	80085f8 <HAL_PCD_EP_DB_Transmit+0x186>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085d8:	b29b      	uxth	r3, r3
 80085da:	461a      	mov	r2, r3
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	4413      	add	r3, r2
 80085e0:	627b      	str	r3, [r7, #36]	; 0x24
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	00da      	lsls	r2, r3, #3
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	4413      	add	r3, r2
 80085ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80085f0:	623b      	str	r3, [r7, #32]
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	2200      	movs	r2, #0
 80085f6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	4619      	mov	r1, r3
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f007 ff91 	bl	8010526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008604:	88fb      	ldrh	r3, [r7, #6]
 8008606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800860a:	2b00      	cmp	r3, #0
 800860c:	f000 82fa 	beq.w	8008c04 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	461a      	mov	r2, r3
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	b29b      	uxth	r3, r3
 8008622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800862a:	82fb      	strh	r3, [r7, #22]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	441a      	add	r2, r3
 800863a:	8afb      	ldrh	r3, [r7, #22]
 800863c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800864c:	b29b      	uxth	r3, r3
 800864e:	8013      	strh	r3, [r2, #0]
 8008650:	e2d8      	b.n	8008c04 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008652:	88fb      	ldrh	r3, [r7, #6]
 8008654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d021      	beq.n	80086a0 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	881b      	ldrh	r3, [r3, #0]
 800866c:	b29b      	uxth	r3, r3
 800866e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008676:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	441a      	add	r2, r3
 8008688:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800868c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800869c:	b29b      	uxth	r3, r3
 800869e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	f040 82ac 	bne.w	8008c04 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	695a      	ldr	r2, [r3, #20]
 80086b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80086b4:	441a      	add	r2, r3
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	69da      	ldr	r2, [r3, #28]
 80086be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80086c2:	441a      	add	r2, r3
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	6a1a      	ldr	r2, [r3, #32]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d30b      	bcc.n	80086ec <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	691b      	ldr	r3, [r3, #16]
 80086d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	6a1a      	ldr	r2, [r3, #32]
 80086e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086e4:	1ad2      	subs	r2, r2, r3
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	621a      	str	r2, [r3, #32]
 80086ea:	e017      	b.n	800871c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	6a1b      	ldr	r3, [r3, #32]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d108      	bne.n	8008706 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80086f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80086f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008704:	e00a      	b.n	800871c <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2200      	movs	r2, #0
 800871a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	785b      	ldrb	r3, [r3, #1]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d165      	bne.n	80087f0 <HAL_PCD_EP_DB_Transmit+0x37e>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008732:	b29b      	uxth	r3, r3
 8008734:	461a      	mov	r2, r3
 8008736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008738:	4413      	add	r3, r2
 800873a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	00da      	lsls	r2, r3, #3
 8008742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008744:	4413      	add	r3, r2
 8008746:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800874a:	63bb      	str	r3, [r7, #56]	; 0x38
 800874c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874e:	881b      	ldrh	r3, [r3, #0]
 8008750:	b29b      	uxth	r3, r3
 8008752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008756:	b29a      	uxth	r2, r3
 8008758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875a:	801a      	strh	r2, [r3, #0]
 800875c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008760:	2b3e      	cmp	r3, #62	; 0x3e
 8008762:	d91d      	bls.n	80087a0 <HAL_PCD_EP_DB_Transmit+0x32e>
 8008764:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008768:	095b      	lsrs	r3, r3, #5
 800876a:	64bb      	str	r3, [r7, #72]	; 0x48
 800876c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008770:	f003 031f 	and.w	r3, r3, #31
 8008774:	2b00      	cmp	r3, #0
 8008776:	d102      	bne.n	800877e <HAL_PCD_EP_DB_Transmit+0x30c>
 8008778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800877a:	3b01      	subs	r3, #1
 800877c:	64bb      	str	r3, [r7, #72]	; 0x48
 800877e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008780:	881b      	ldrh	r3, [r3, #0]
 8008782:	b29a      	uxth	r2, r3
 8008784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008786:	b29b      	uxth	r3, r3
 8008788:	029b      	lsls	r3, r3, #10
 800878a:	b29b      	uxth	r3, r3
 800878c:	4313      	orrs	r3, r2
 800878e:	b29b      	uxth	r3, r3
 8008790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008798:	b29a      	uxth	r2, r3
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	801a      	strh	r2, [r3, #0]
 800879e:	e044      	b.n	800882a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80087a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10a      	bne.n	80087be <HAL_PCD_EP_DB_Transmit+0x34c>
 80087a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	801a      	strh	r2, [r3, #0]
 80087bc:	e035      	b.n	800882a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80087be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087c2:	085b      	lsrs	r3, r3, #1
 80087c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80087c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <HAL_PCD_EP_DB_Transmit+0x366>
 80087d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087d4:	3301      	adds	r3, #1
 80087d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80087d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087da:	881b      	ldrh	r3, [r3, #0]
 80087dc:	b29a      	uxth	r2, r3
 80087de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	029b      	lsls	r3, r3, #10
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	4313      	orrs	r3, r2
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	801a      	strh	r2, [r3, #0]
 80087ee:	e01c      	b.n	800882a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	785b      	ldrb	r3, [r3, #1]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d118      	bne.n	800882a <HAL_PCD_EP_DB_Transmit+0x3b8>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	647b      	str	r3, [r7, #68]	; 0x44
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008806:	b29b      	uxth	r3, r3
 8008808:	461a      	mov	r2, r3
 800880a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800880c:	4413      	add	r3, r2
 800880e:	647b      	str	r3, [r7, #68]	; 0x44
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	00da      	lsls	r2, r3, #3
 8008816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008818:	4413      	add	r3, r2
 800881a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800881e:	643b      	str	r3, [r7, #64]	; 0x40
 8008820:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008824:	b29a      	uxth	r2, r3
 8008826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008828:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6818      	ldr	r0, [r3, #0]
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	6959      	ldr	r1, [r3, #20]
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	891a      	ldrh	r2, [r3, #8]
 8008836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800883a:	b29b      	uxth	r3, r3
 800883c:	f005 ffab 	bl	800e796 <USB_WritePMA>
 8008840:	e1e0      	b.n	8008c04 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800884a:	b29b      	uxth	r3, r3
 800884c:	461a      	mov	r2, r3
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	4413      	add	r3, r2
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	6812      	ldr	r2, [r2, #0]
 800885a:	4413      	add	r3, r2
 800885c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008860:	881b      	ldrh	r3, [r3, #0]
 8008862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008866:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	699a      	ldr	r2, [r3, #24]
 800886e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008872:	429a      	cmp	r2, r3
 8008874:	d307      	bcc.n	8008886 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	699a      	ldr	r2, [r3, #24]
 800887a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800887e:	1ad2      	subs	r2, r2, r3
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	619a      	str	r2, [r3, #24]
 8008884:	e002      	b.n	800888c <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2200      	movs	r2, #0
 800888a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	2b00      	cmp	r3, #0
 8008892:	f040 80c0 	bne.w	8008a16 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	785b      	ldrb	r3, [r3, #1]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d126      	bne.n	80088ec <HAL_PCD_EP_DB_Transmit+0x47a>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	461a      	mov	r2, r3
 80088b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088b2:	4413      	add	r3, r2
 80088b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	781b      	ldrb	r3, [r3, #0]
 80088ba:	00da      	lsls	r2, r3, #3
 80088bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80088be:	4413      	add	r3, r2
 80088c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80088c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80088c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088d4:	801a      	strh	r2, [r3, #0]
 80088d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088d8:	881b      	ldrh	r3, [r3, #0]
 80088da:	b29b      	uxth	r3, r3
 80088dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088e8:	801a      	strh	r2, [r3, #0]
 80088ea:	e01a      	b.n	8008922 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	785b      	ldrb	r3, [r3, #1]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d116      	bne.n	8008922 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	667b      	str	r3, [r7, #100]	; 0x64
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008902:	b29b      	uxth	r3, r3
 8008904:	461a      	mov	r2, r3
 8008906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008908:	4413      	add	r3, r2
 800890a:	667b      	str	r3, [r7, #100]	; 0x64
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	00da      	lsls	r2, r3, #3
 8008912:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008914:	4413      	add	r3, r2
 8008916:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800891a:	663b      	str	r3, [r7, #96]	; 0x60
 800891c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800891e:	2200      	movs	r2, #0
 8008920:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	677b      	str	r3, [r7, #116]	; 0x74
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	785b      	ldrb	r3, [r3, #1]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d12b      	bne.n	8008988 <HAL_PCD_EP_DB_Transmit+0x516>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800893e:	b29b      	uxth	r3, r3
 8008940:	461a      	mov	r2, r3
 8008942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008944:	4413      	add	r3, r2
 8008946:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	00da      	lsls	r2, r3, #3
 800894e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008950:	4413      	add	r3, r2
 8008952:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008956:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800895a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800895e:	881b      	ldrh	r3, [r3, #0]
 8008960:	b29b      	uxth	r3, r3
 8008962:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008966:	b29a      	uxth	r2, r3
 8008968:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800896c:	801a      	strh	r2, [r3, #0]
 800896e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	b29b      	uxth	r3, r3
 8008976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800897a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800897e:	b29a      	uxth	r2, r3
 8008980:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008984:	801a      	strh	r2, [r3, #0]
 8008986:	e017      	b.n	80089b8 <HAL_PCD_EP_DB_Transmit+0x546>
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	785b      	ldrb	r3, [r3, #1]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d113      	bne.n	80089b8 <HAL_PCD_EP_DB_Transmit+0x546>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008998:	b29b      	uxth	r3, r3
 800899a:	461a      	mov	r2, r3
 800899c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800899e:	4413      	add	r3, r2
 80089a0:	677b      	str	r3, [r7, #116]	; 0x74
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	00da      	lsls	r2, r3, #3
 80089a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089aa:	4413      	add	r3, r2
 80089ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089b0:	673b      	str	r3, [r7, #112]	; 0x70
 80089b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80089b4:	2200      	movs	r2, #0
 80089b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	4619      	mov	r1, r3
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f007 fdb1 	bl	8010526 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80089c4:	88fb      	ldrh	r3, [r7, #6]
 80089c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f040 811a 	bne.w	8008c04 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	461a      	mov	r2, r3
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ea:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	441a      	add	r2, r3
 80089fc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8008a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	8013      	strh	r3, [r2, #0]
 8008a14:	e0f6      	b.n	8008c04 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008a16:	88fb      	ldrh	r3, [r7, #6]
 8008a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d121      	bne.n	8008a64 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	461a      	mov	r2, r3
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	441a      	add	r2, r3
 8008a4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	f040 80ca 	bne.w	8008c04 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	695a      	ldr	r2, [r3, #20]
 8008a74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008a78:	441a      	add	r2, r3
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	69da      	ldr	r2, [r3, #28]
 8008a82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008a86:	441a      	add	r2, r3
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	6a1a      	ldr	r2, [r3, #32]
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d30b      	bcc.n	8008ab0 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	6a1a      	ldr	r2, [r3, #32]
 8008aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008aa8:	1ad2      	subs	r2, r2, r3
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	621a      	str	r2, [r3, #32]
 8008aae:	e017      	b.n	8008ae0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	6a1b      	ldr	r3, [r3, #32]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d108      	bne.n	8008aca <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8008ab8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008abc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008ac8:	e00a      	b.n	8008ae0 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	657b      	str	r3, [r7, #84]	; 0x54
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	785b      	ldrb	r3, [r3, #1]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d165      	bne.n	8008bba <HAL_PCD_EP_DB_Transmit+0x748>
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	461a      	mov	r2, r3
 8008b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b02:	4413      	add	r3, r2
 8008b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	00da      	lsls	r2, r3, #3
 8008b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b0e:	4413      	add	r3, r2
 8008b10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b14:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b24:	801a      	strh	r2, [r3, #0]
 8008b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b2a:	2b3e      	cmp	r3, #62	; 0x3e
 8008b2c:	d91d      	bls.n	8008b6a <HAL_PCD_EP_DB_Transmit+0x6f8>
 8008b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b32:	095b      	lsrs	r3, r3, #5
 8008b34:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b3a:	f003 031f 	and.w	r3, r3, #31
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d102      	bne.n	8008b48 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8008b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b44:	3b01      	subs	r3, #1
 8008b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	029b      	lsls	r3, r3, #10
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	4313      	orrs	r3, r2
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b66:	801a      	strh	r2, [r3, #0]
 8008b68:	e041      	b.n	8008bee <HAL_PCD_EP_DB_Transmit+0x77c>
 8008b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10a      	bne.n	8008b88 <HAL_PCD_EP_DB_Transmit+0x716>
 8008b72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b74:	881b      	ldrh	r3, [r3, #0]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b84:	801a      	strh	r2, [r3, #0]
 8008b86:	e032      	b.n	8008bee <HAL_PCD_EP_DB_Transmit+0x77c>
 8008b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b8c:	085b      	lsrs	r3, r3, #1
 8008b8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b94:	f003 0301 	and.w	r3, r3, #1
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d002      	beq.n	8008ba2 <HAL_PCD_EP_DB_Transmit+0x730>
 8008b9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ba4:	881b      	ldrh	r3, [r3, #0]
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	029b      	lsls	r3, r3, #10
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bb6:	801a      	strh	r2, [r3, #0]
 8008bb8:	e019      	b.n	8008bee <HAL_PCD_EP_DB_Transmit+0x77c>
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	785b      	ldrb	r3, [r3, #1]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d115      	bne.n	8008bee <HAL_PCD_EP_DB_Transmit+0x77c>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	461a      	mov	r2, r3
 8008bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bd0:	4413      	add	r3, r2
 8008bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	00da      	lsls	r2, r3, #3
 8008bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bdc:	4413      	add	r3, r2
 8008bde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008be2:	653b      	str	r3, [r7, #80]	; 0x50
 8008be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bec:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	6959      	ldr	r1, [r3, #20]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	895a      	ldrh	r2, [r3, #10]
 8008bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	f005 fdc9 	bl	800e796 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c1e:	82bb      	strh	r3, [r7, #20]
 8008c20:	8abb      	ldrh	r3, [r7, #20]
 8008c22:	f083 0310 	eor.w	r3, r3, #16
 8008c26:	82bb      	strh	r3, [r7, #20]
 8008c28:	8abb      	ldrh	r3, [r7, #20]
 8008c2a:	f083 0320 	eor.w	r3, r3, #32
 8008c2e:	82bb      	strh	r3, [r7, #20]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	441a      	add	r2, r3
 8008c3e:	8abb      	ldrh	r3, [r7, #20]
 8008c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3790      	adds	r7, #144	; 0x90
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b087      	sub	sp, #28
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	607b      	str	r3, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	817b      	strh	r3, [r7, #10]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008c70:	897b      	ldrh	r3, [r7, #10]
 8008c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d00b      	beq.n	8008c94 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c7c:	897b      	ldrh	r3, [r7, #10]
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	4613      	mov	r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	4413      	add	r3, r2
 8008c90:	617b      	str	r3, [r7, #20]
 8008c92:	e009      	b.n	8008ca8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008c94:	897a      	ldrh	r2, [r7, #10]
 8008c96:	4613      	mov	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	00db      	lsls	r3, r3, #3
 8008c9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008ca8:	893b      	ldrh	r3, [r7, #8]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d107      	bne.n	8008cbe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	80da      	strh	r2, [r3, #6]
 8008cbc:	e00b      	b.n	8008cd6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	0c1b      	lsrs	r3, r3, #16
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	371c      	adds	r7, #28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	f043 0301 	orr.w	r3, r3, #1
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	f043 0302 	orr.w	r3, r3, #2
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008d3c:	4b04      	ldr	r3, [pc, #16]	; (8008d50 <HAL_PWREx_GetVoltageRange+0x18>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	40007000 	.word	0x40007000

08008d54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d62:	d130      	bne.n	8008dc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008d64:	4b23      	ldr	r3, [pc, #140]	; (8008df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d70:	d038      	beq.n	8008de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d72:	4b20      	ldr	r3, [pc, #128]	; (8008df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008d7a:	4a1e      	ldr	r2, [pc, #120]	; (8008df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008d82:	4b1d      	ldr	r3, [pc, #116]	; (8008df8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2232      	movs	r2, #50	; 0x32
 8008d88:	fb02 f303 	mul.w	r3, r2, r3
 8008d8c:	4a1b      	ldr	r2, [pc, #108]	; (8008dfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d92:	0c9b      	lsrs	r3, r3, #18
 8008d94:	3301      	adds	r3, #1
 8008d96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d98:	e002      	b.n	8008da0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008da0:	4b14      	ldr	r3, [pc, #80]	; (8008df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dac:	d102      	bne.n	8008db4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1f2      	bne.n	8008d9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008db4:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dc0:	d110      	bne.n	8008de4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e00f      	b.n	8008de6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008dc6:	4b0b      	ldr	r3, [pc, #44]	; (8008df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dd2:	d007      	beq.n	8008de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008dd4:	4b07      	ldr	r3, [pc, #28]	; (8008df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008ddc:	4a05      	ldr	r2, [pc, #20]	; (8008df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008de2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3714      	adds	r7, #20
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	40007000 	.word	0x40007000
 8008df8:	20000020 	.word	0x20000020
 8008dfc:	431bde83 	.word	0x431bde83

08008e00 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008e00:	b480      	push	{r7}
 8008e02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008e04:	4b05      	ldr	r3, [pc, #20]	; (8008e1c <HAL_PWREx_EnableVddUSB+0x1c>)
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	4a04      	ldr	r2, [pc, #16]	; (8008e1c <HAL_PWREx_EnableVddUSB+0x1c>)
 8008e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e0e:	6053      	str	r3, [r2, #4]
}
 8008e10:	bf00      	nop
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	40007000 	.word	0x40007000

08008e20 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d102      	bne.n	8008e34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	f000 bc02 	b.w	8009638 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e34:	4b96      	ldr	r3, [pc, #600]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f003 030c 	and.w	r3, r3, #12
 8008e3c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008e3e:	4b94      	ldr	r3, [pc, #592]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 0310 	and.w	r3, r3, #16
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 80e4 	beq.w	800901e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d007      	beq.n	8008e6c <HAL_RCC_OscConfig+0x4c>
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	2b0c      	cmp	r3, #12
 8008e60:	f040 808b 	bne.w	8008f7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	f040 8087 	bne.w	8008f7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008e6c:	4b88      	ldr	r3, [pc, #544]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0302 	and.w	r3, r3, #2
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d005      	beq.n	8008e84 <HAL_RCC_OscConfig+0x64>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e3d9      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a1a      	ldr	r2, [r3, #32]
 8008e88:	4b81      	ldr	r3, [pc, #516]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0308 	and.w	r3, r3, #8
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d004      	beq.n	8008e9e <HAL_RCC_OscConfig+0x7e>
 8008e94:	4b7e      	ldr	r3, [pc, #504]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e9c:	e005      	b.n	8008eaa <HAL_RCC_OscConfig+0x8a>
 8008e9e:	4b7c      	ldr	r3, [pc, #496]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ea4:	091b      	lsrs	r3, r3, #4
 8008ea6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d223      	bcs.n	8008ef6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 fd8c 	bl	80099d0 <RCC_SetFlashLatencyFromMSIRange>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e3ba      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ec2:	4b73      	ldr	r3, [pc, #460]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a72      	ldr	r2, [pc, #456]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008ec8:	f043 0308 	orr.w	r3, r3, #8
 8008ecc:	6013      	str	r3, [r2, #0]
 8008ece:	4b70      	ldr	r3, [pc, #448]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a1b      	ldr	r3, [r3, #32]
 8008eda:	496d      	ldr	r1, [pc, #436]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008ee0:	4b6b      	ldr	r3, [pc, #428]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	021b      	lsls	r3, r3, #8
 8008eee:	4968      	ldr	r1, [pc, #416]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	604b      	str	r3, [r1, #4]
 8008ef4:	e025      	b.n	8008f42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008ef6:	4b66      	ldr	r3, [pc, #408]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a65      	ldr	r2, [pc, #404]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008efc:	f043 0308 	orr.w	r3, r3, #8
 8008f00:	6013      	str	r3, [r2, #0]
 8008f02:	4b63      	ldr	r3, [pc, #396]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a1b      	ldr	r3, [r3, #32]
 8008f0e:	4960      	ldr	r1, [pc, #384]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008f10:	4313      	orrs	r3, r2
 8008f12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008f14:	4b5e      	ldr	r3, [pc, #376]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	69db      	ldr	r3, [r3, #28]
 8008f20:	021b      	lsls	r3, r3, #8
 8008f22:	495b      	ldr	r1, [pc, #364]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d109      	bne.n	8008f42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a1b      	ldr	r3, [r3, #32]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 fd4c 	bl	80099d0 <RCC_SetFlashLatencyFromMSIRange>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d001      	beq.n	8008f42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e37a      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008f42:	f000 fc81 	bl	8009848 <HAL_RCC_GetSysClockFreq>
 8008f46:	4602      	mov	r2, r0
 8008f48:	4b51      	ldr	r3, [pc, #324]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	091b      	lsrs	r3, r3, #4
 8008f4e:	f003 030f 	and.w	r3, r3, #15
 8008f52:	4950      	ldr	r1, [pc, #320]	; (8009094 <HAL_RCC_OscConfig+0x274>)
 8008f54:	5ccb      	ldrb	r3, [r1, r3]
 8008f56:	f003 031f 	and.w	r3, r3, #31
 8008f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f5e:	4a4e      	ldr	r2, [pc, #312]	; (8009098 <HAL_RCC_OscConfig+0x278>)
 8008f60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008f62:	4b4e      	ldr	r3, [pc, #312]	; (800909c <HAL_RCC_OscConfig+0x27c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7fb fad8 	bl	800451c <HAL_InitTick>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d052      	beq.n	800901c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	e35e      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d032      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008f82:	4b43      	ldr	r3, [pc, #268]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a42      	ldr	r2, [pc, #264]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008f88:	f043 0301 	orr.w	r3, r3, #1
 8008f8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008f8e:	f7fb fb15 	bl	80045bc <HAL_GetTick>
 8008f92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008f94:	e008      	b.n	8008fa8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008f96:	f7fb fb11 	bl	80045bc <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d901      	bls.n	8008fa8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e347      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008fa8:	4b39      	ldr	r3, [pc, #228]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0302 	and.w	r3, r3, #2
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d0f0      	beq.n	8008f96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008fb4:	4b36      	ldr	r3, [pc, #216]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a35      	ldr	r2, [pc, #212]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008fba:	f043 0308 	orr.w	r3, r3, #8
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	4b33      	ldr	r3, [pc, #204]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a1b      	ldr	r3, [r3, #32]
 8008fcc:	4930      	ldr	r1, [pc, #192]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008fd2:	4b2f      	ldr	r3, [pc, #188]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	69db      	ldr	r3, [r3, #28]
 8008fde:	021b      	lsls	r3, r3, #8
 8008fe0:	492b      	ldr	r1, [pc, #172]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	604b      	str	r3, [r1, #4]
 8008fe6:	e01a      	b.n	800901e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008fe8:	4b29      	ldr	r3, [pc, #164]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a28      	ldr	r2, [pc, #160]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8008fee:	f023 0301 	bic.w	r3, r3, #1
 8008ff2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008ff4:	f7fb fae2 	bl	80045bc <HAL_GetTick>
 8008ff8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008ffa:	e008      	b.n	800900e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008ffc:	f7fb fade 	bl	80045bc <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b02      	cmp	r3, #2
 8009008:	d901      	bls.n	800900e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e314      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800900e:	4b20      	ldr	r3, [pc, #128]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1f0      	bne.n	8008ffc <HAL_RCC_OscConfig+0x1dc>
 800901a:	e000      	b.n	800901e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800901c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	d073      	beq.n	8009112 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	2b08      	cmp	r3, #8
 800902e:	d005      	beq.n	800903c <HAL_RCC_OscConfig+0x21c>
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	2b0c      	cmp	r3, #12
 8009034:	d10e      	bne.n	8009054 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	2b03      	cmp	r3, #3
 800903a:	d10b      	bne.n	8009054 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800903c:	4b14      	ldr	r3, [pc, #80]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009044:	2b00      	cmp	r3, #0
 8009046:	d063      	beq.n	8009110 <HAL_RCC_OscConfig+0x2f0>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d15f      	bne.n	8009110 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009050:	2301      	movs	r3, #1
 8009052:	e2f1      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800905c:	d106      	bne.n	800906c <HAL_RCC_OscConfig+0x24c>
 800905e:	4b0c      	ldr	r3, [pc, #48]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a0b      	ldr	r2, [pc, #44]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8009064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	e025      	b.n	80090b8 <HAL_RCC_OscConfig+0x298>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009074:	d114      	bne.n	80090a0 <HAL_RCC_OscConfig+0x280>
 8009076:	4b06      	ldr	r3, [pc, #24]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a05      	ldr	r2, [pc, #20]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 800907c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	4b03      	ldr	r3, [pc, #12]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a02      	ldr	r2, [pc, #8]	; (8009090 <HAL_RCC_OscConfig+0x270>)
 8009088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	e013      	b.n	80090b8 <HAL_RCC_OscConfig+0x298>
 8009090:	40021000 	.word	0x40021000
 8009094:	080186cc 	.word	0x080186cc
 8009098:	20000020 	.word	0x20000020
 800909c:	20000024 	.word	0x20000024
 80090a0:	4ba0      	ldr	r3, [pc, #640]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a9f      	ldr	r2, [pc, #636]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 80090a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090aa:	6013      	str	r3, [r2, #0]
 80090ac:	4b9d      	ldr	r3, [pc, #628]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a9c      	ldr	r2, [pc, #624]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 80090b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d013      	beq.n	80090e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090c0:	f7fb fa7c 	bl	80045bc <HAL_GetTick>
 80090c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090c6:	e008      	b.n	80090da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090c8:	f7fb fa78 	bl	80045bc <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	2b64      	cmp	r3, #100	; 0x64
 80090d4:	d901      	bls.n	80090da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e2ae      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090da:	4b92      	ldr	r3, [pc, #584]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0f0      	beq.n	80090c8 <HAL_RCC_OscConfig+0x2a8>
 80090e6:	e014      	b.n	8009112 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090e8:	f7fb fa68 	bl	80045bc <HAL_GetTick>
 80090ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80090ee:	e008      	b.n	8009102 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090f0:	f7fb fa64 	bl	80045bc <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	2b64      	cmp	r3, #100	; 0x64
 80090fc:	d901      	bls.n	8009102 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e29a      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009102:	4b88      	ldr	r3, [pc, #544]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1f0      	bne.n	80090f0 <HAL_RCC_OscConfig+0x2d0>
 800910e:	e000      	b.n	8009112 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	2b00      	cmp	r3, #0
 800911c:	d060      	beq.n	80091e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	2b04      	cmp	r3, #4
 8009122:	d005      	beq.n	8009130 <HAL_RCC_OscConfig+0x310>
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	2b0c      	cmp	r3, #12
 8009128:	d119      	bne.n	800915e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2b02      	cmp	r3, #2
 800912e:	d116      	bne.n	800915e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009130:	4b7c      	ldr	r3, [pc, #496]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009138:	2b00      	cmp	r3, #0
 800913a:	d005      	beq.n	8009148 <HAL_RCC_OscConfig+0x328>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	68db      	ldr	r3, [r3, #12]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e277      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009148:	4b76      	ldr	r3, [pc, #472]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	061b      	lsls	r3, r3, #24
 8009156:	4973      	ldr	r1, [pc, #460]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 8009158:	4313      	orrs	r3, r2
 800915a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800915c:	e040      	b.n	80091e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d023      	beq.n	80091ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009166:	4b6f      	ldr	r3, [pc, #444]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a6e      	ldr	r2, [pc, #440]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 800916c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009172:	f7fb fa23 	bl	80045bc <HAL_GetTick>
 8009176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009178:	e008      	b.n	800918c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800917a:	f7fb fa1f 	bl	80045bc <HAL_GetTick>
 800917e:	4602      	mov	r2, r0
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	2b02      	cmp	r3, #2
 8009186:	d901      	bls.n	800918c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009188:	2303      	movs	r3, #3
 800918a:	e255      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800918c:	4b65      	ldr	r3, [pc, #404]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009194:	2b00      	cmp	r3, #0
 8009196:	d0f0      	beq.n	800917a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009198:	4b62      	ldr	r3, [pc, #392]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	061b      	lsls	r3, r3, #24
 80091a6:	495f      	ldr	r1, [pc, #380]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 80091a8:	4313      	orrs	r3, r2
 80091aa:	604b      	str	r3, [r1, #4]
 80091ac:	e018      	b.n	80091e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091ae:	4b5d      	ldr	r3, [pc, #372]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a5c      	ldr	r2, [pc, #368]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 80091b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ba:	f7fb f9ff 	bl	80045bc <HAL_GetTick>
 80091be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80091c0:	e008      	b.n	80091d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091c2:	f7fb f9fb 	bl	80045bc <HAL_GetTick>
 80091c6:	4602      	mov	r2, r0
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d901      	bls.n	80091d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e231      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80091d4:	4b53      	ldr	r3, [pc, #332]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1f0      	bne.n	80091c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 0308 	and.w	r3, r3, #8
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d03c      	beq.n	8009266 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	695b      	ldr	r3, [r3, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d01c      	beq.n	800922e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091f4:	4b4b      	ldr	r3, [pc, #300]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 80091f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091fa:	4a4a      	ldr	r2, [pc, #296]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 80091fc:	f043 0301 	orr.w	r3, r3, #1
 8009200:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009204:	f7fb f9da 	bl	80045bc <HAL_GetTick>
 8009208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800920a:	e008      	b.n	800921e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800920c:	f7fb f9d6 	bl	80045bc <HAL_GetTick>
 8009210:	4602      	mov	r2, r0
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	2b02      	cmp	r3, #2
 8009218:	d901      	bls.n	800921e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e20c      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800921e:	4b41      	ldr	r3, [pc, #260]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 8009220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009224:	f003 0302 	and.w	r3, r3, #2
 8009228:	2b00      	cmp	r3, #0
 800922a:	d0ef      	beq.n	800920c <HAL_RCC_OscConfig+0x3ec>
 800922c:	e01b      	b.n	8009266 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800922e:	4b3d      	ldr	r3, [pc, #244]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 8009230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009234:	4a3b      	ldr	r2, [pc, #236]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 8009236:	f023 0301 	bic.w	r3, r3, #1
 800923a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800923e:	f7fb f9bd 	bl	80045bc <HAL_GetTick>
 8009242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009244:	e008      	b.n	8009258 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009246:	f7fb f9b9 	bl	80045bc <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	2b02      	cmp	r3, #2
 8009252:	d901      	bls.n	8009258 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e1ef      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009258:	4b32      	ldr	r3, [pc, #200]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 800925a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1ef      	bne.n	8009246 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0304 	and.w	r3, r3, #4
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 80a6 	beq.w	80093c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009274:	2300      	movs	r3, #0
 8009276:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009278:	4b2a      	ldr	r3, [pc, #168]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 800927a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800927c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10d      	bne.n	80092a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009284:	4b27      	ldr	r3, [pc, #156]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 8009286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009288:	4a26      	ldr	r2, [pc, #152]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 800928a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800928e:	6593      	str	r3, [r2, #88]	; 0x58
 8009290:	4b24      	ldr	r3, [pc, #144]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 8009292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009298:	60bb      	str	r3, [r7, #8]
 800929a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800929c:	2301      	movs	r3, #1
 800929e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092a0:	4b21      	ldr	r3, [pc, #132]	; (8009328 <HAL_RCC_OscConfig+0x508>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d118      	bne.n	80092de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092ac:	4b1e      	ldr	r3, [pc, #120]	; (8009328 <HAL_RCC_OscConfig+0x508>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a1d      	ldr	r2, [pc, #116]	; (8009328 <HAL_RCC_OscConfig+0x508>)
 80092b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092b8:	f7fb f980 	bl	80045bc <HAL_GetTick>
 80092bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092be:	e008      	b.n	80092d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092c0:	f7fb f97c 	bl	80045bc <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d901      	bls.n	80092d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e1b2      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092d2:	4b15      	ldr	r3, [pc, #84]	; (8009328 <HAL_RCC_OscConfig+0x508>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d0f0      	beq.n	80092c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d108      	bne.n	80092f8 <HAL_RCC_OscConfig+0x4d8>
 80092e6:	4b0f      	ldr	r3, [pc, #60]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 80092e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ec:	4a0d      	ldr	r2, [pc, #52]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 80092ee:	f043 0301 	orr.w	r3, r3, #1
 80092f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80092f6:	e029      	b.n	800934c <HAL_RCC_OscConfig+0x52c>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	2b05      	cmp	r3, #5
 80092fe:	d115      	bne.n	800932c <HAL_RCC_OscConfig+0x50c>
 8009300:	4b08      	ldr	r3, [pc, #32]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 8009302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009306:	4a07      	ldr	r2, [pc, #28]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 8009308:	f043 0304 	orr.w	r3, r3, #4
 800930c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009310:	4b04      	ldr	r3, [pc, #16]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 8009312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009316:	4a03      	ldr	r2, [pc, #12]	; (8009324 <HAL_RCC_OscConfig+0x504>)
 8009318:	f043 0301 	orr.w	r3, r3, #1
 800931c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009320:	e014      	b.n	800934c <HAL_RCC_OscConfig+0x52c>
 8009322:	bf00      	nop
 8009324:	40021000 	.word	0x40021000
 8009328:	40007000 	.word	0x40007000
 800932c:	4b9a      	ldr	r3, [pc, #616]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 800932e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009332:	4a99      	ldr	r2, [pc, #612]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 8009334:	f023 0301 	bic.w	r3, r3, #1
 8009338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800933c:	4b96      	ldr	r3, [pc, #600]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 800933e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009342:	4a95      	ldr	r2, [pc, #596]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 8009344:	f023 0304 	bic.w	r3, r3, #4
 8009348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d016      	beq.n	8009382 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009354:	f7fb f932 	bl	80045bc <HAL_GetTick>
 8009358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800935a:	e00a      	b.n	8009372 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800935c:	f7fb f92e 	bl	80045bc <HAL_GetTick>
 8009360:	4602      	mov	r2, r0
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	f241 3288 	movw	r2, #5000	; 0x1388
 800936a:	4293      	cmp	r3, r2
 800936c:	d901      	bls.n	8009372 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800936e:	2303      	movs	r3, #3
 8009370:	e162      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009372:	4b89      	ldr	r3, [pc, #548]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 8009374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009378:	f003 0302 	and.w	r3, r3, #2
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0ed      	beq.n	800935c <HAL_RCC_OscConfig+0x53c>
 8009380:	e015      	b.n	80093ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009382:	f7fb f91b 	bl	80045bc <HAL_GetTick>
 8009386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009388:	e00a      	b.n	80093a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800938a:	f7fb f917 	bl	80045bc <HAL_GetTick>
 800938e:	4602      	mov	r2, r0
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	f241 3288 	movw	r2, #5000	; 0x1388
 8009398:	4293      	cmp	r3, r2
 800939a:	d901      	bls.n	80093a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	e14b      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80093a0:	4b7d      	ldr	r3, [pc, #500]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 80093a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a6:	f003 0302 	and.w	r3, r3, #2
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1ed      	bne.n	800938a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093ae:	7ffb      	ldrb	r3, [r7, #31]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d105      	bne.n	80093c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093b4:	4b78      	ldr	r3, [pc, #480]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 80093b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b8:	4a77      	ldr	r2, [pc, #476]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 80093ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f003 0320 	and.w	r3, r3, #32
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d03c      	beq.n	8009446 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d01c      	beq.n	800940e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80093d4:	4b70      	ldr	r3, [pc, #448]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 80093d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093da:	4a6f      	ldr	r2, [pc, #444]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 80093dc:	f043 0301 	orr.w	r3, r3, #1
 80093e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093e4:	f7fb f8ea 	bl	80045bc <HAL_GetTick>
 80093e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80093ea:	e008      	b.n	80093fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093ec:	f7fb f8e6 	bl	80045bc <HAL_GetTick>
 80093f0:	4602      	mov	r2, r0
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d901      	bls.n	80093fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e11c      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80093fe:	4b66      	ldr	r3, [pc, #408]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 8009400:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d0ef      	beq.n	80093ec <HAL_RCC_OscConfig+0x5cc>
 800940c:	e01b      	b.n	8009446 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800940e:	4b62      	ldr	r3, [pc, #392]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 8009410:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009414:	4a60      	ldr	r2, [pc, #384]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 8009416:	f023 0301 	bic.w	r3, r3, #1
 800941a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800941e:	f7fb f8cd 	bl	80045bc <HAL_GetTick>
 8009422:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009424:	e008      	b.n	8009438 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009426:	f7fb f8c9 	bl	80045bc <HAL_GetTick>
 800942a:	4602      	mov	r2, r0
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	2b02      	cmp	r3, #2
 8009432:	d901      	bls.n	8009438 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009434:	2303      	movs	r3, #3
 8009436:	e0ff      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009438:	4b57      	ldr	r3, [pc, #348]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 800943a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1ef      	bne.n	8009426 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944a:	2b00      	cmp	r3, #0
 800944c:	f000 80f3 	beq.w	8009636 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009454:	2b02      	cmp	r3, #2
 8009456:	f040 80c9 	bne.w	80095ec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800945a:	4b4f      	ldr	r3, [pc, #316]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	f003 0203 	and.w	r2, r3, #3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946a:	429a      	cmp	r2, r3
 800946c:	d12c      	bne.n	80094c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009478:	3b01      	subs	r3, #1
 800947a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800947c:	429a      	cmp	r2, r3
 800947e:	d123      	bne.n	80094c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800948c:	429a      	cmp	r2, r3
 800948e:	d11b      	bne.n	80094c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800949c:	429a      	cmp	r2, r3
 800949e:	d113      	bne.n	80094c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094aa:	085b      	lsrs	r3, r3, #1
 80094ac:	3b01      	subs	r3, #1
 80094ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d109      	bne.n	80094c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094be:	085b      	lsrs	r3, r3, #1
 80094c0:	3b01      	subs	r3, #1
 80094c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d06b      	beq.n	80095a0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	2b0c      	cmp	r3, #12
 80094cc:	d062      	beq.n	8009594 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80094ce:	4b32      	ldr	r3, [pc, #200]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e0ac      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80094de:	4b2e      	ldr	r3, [pc, #184]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a2d      	ldr	r2, [pc, #180]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 80094e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80094ea:	f7fb f867 	bl	80045bc <HAL_GetTick>
 80094ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094f0:	e008      	b.n	8009504 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094f2:	f7fb f863 	bl	80045bc <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d901      	bls.n	8009504 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e099      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009504:	4b24      	ldr	r3, [pc, #144]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1f0      	bne.n	80094f2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009510:	4b21      	ldr	r3, [pc, #132]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 8009512:	68da      	ldr	r2, [r3, #12]
 8009514:	4b21      	ldr	r3, [pc, #132]	; (800959c <HAL_RCC_OscConfig+0x77c>)
 8009516:	4013      	ands	r3, r2
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009520:	3a01      	subs	r2, #1
 8009522:	0112      	lsls	r2, r2, #4
 8009524:	4311      	orrs	r1, r2
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800952a:	0212      	lsls	r2, r2, #8
 800952c:	4311      	orrs	r1, r2
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009532:	0852      	lsrs	r2, r2, #1
 8009534:	3a01      	subs	r2, #1
 8009536:	0552      	lsls	r2, r2, #21
 8009538:	4311      	orrs	r1, r2
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800953e:	0852      	lsrs	r2, r2, #1
 8009540:	3a01      	subs	r2, #1
 8009542:	0652      	lsls	r2, r2, #25
 8009544:	4311      	orrs	r1, r2
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800954a:	06d2      	lsls	r2, r2, #27
 800954c:	430a      	orrs	r2, r1
 800954e:	4912      	ldr	r1, [pc, #72]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 8009550:	4313      	orrs	r3, r2
 8009552:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009554:	4b10      	ldr	r3, [pc, #64]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a0f      	ldr	r2, [pc, #60]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 800955a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800955e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009560:	4b0d      	ldr	r3, [pc, #52]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	4a0c      	ldr	r2, [pc, #48]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 8009566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800956a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800956c:	f7fb f826 	bl	80045bc <HAL_GetTick>
 8009570:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009572:	e008      	b.n	8009586 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009574:	f7fb f822 	bl	80045bc <HAL_GetTick>
 8009578:	4602      	mov	r2, r0
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	2b02      	cmp	r3, #2
 8009580:	d901      	bls.n	8009586 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8009582:	2303      	movs	r3, #3
 8009584:	e058      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009586:	4b04      	ldr	r3, [pc, #16]	; (8009598 <HAL_RCC_OscConfig+0x778>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d0f0      	beq.n	8009574 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009592:	e050      	b.n	8009636 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e04f      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
 8009598:	40021000 	.word	0x40021000
 800959c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095a0:	4b27      	ldr	r3, [pc, #156]	; (8009640 <HAL_RCC_OscConfig+0x820>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d144      	bne.n	8009636 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80095ac:	4b24      	ldr	r3, [pc, #144]	; (8009640 <HAL_RCC_OscConfig+0x820>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a23      	ldr	r2, [pc, #140]	; (8009640 <HAL_RCC_OscConfig+0x820>)
 80095b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80095b8:	4b21      	ldr	r3, [pc, #132]	; (8009640 <HAL_RCC_OscConfig+0x820>)
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	4a20      	ldr	r2, [pc, #128]	; (8009640 <HAL_RCC_OscConfig+0x820>)
 80095be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80095c4:	f7fa fffa 	bl	80045bc <HAL_GetTick>
 80095c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095ca:	e008      	b.n	80095de <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095cc:	f7fa fff6 	bl	80045bc <HAL_GetTick>
 80095d0:	4602      	mov	r2, r0
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d901      	bls.n	80095de <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80095da:	2303      	movs	r3, #3
 80095dc:	e02c      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80095de:	4b18      	ldr	r3, [pc, #96]	; (8009640 <HAL_RCC_OscConfig+0x820>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d0f0      	beq.n	80095cc <HAL_RCC_OscConfig+0x7ac>
 80095ea:	e024      	b.n	8009636 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	2b0c      	cmp	r3, #12
 80095f0:	d01f      	beq.n	8009632 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095f2:	4b13      	ldr	r3, [pc, #76]	; (8009640 <HAL_RCC_OscConfig+0x820>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a12      	ldr	r2, [pc, #72]	; (8009640 <HAL_RCC_OscConfig+0x820>)
 80095f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095fe:	f7fa ffdd 	bl	80045bc <HAL_GetTick>
 8009602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009604:	e008      	b.n	8009618 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009606:	f7fa ffd9 	bl	80045bc <HAL_GetTick>
 800960a:	4602      	mov	r2, r0
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	2b02      	cmp	r3, #2
 8009612:	d901      	bls.n	8009618 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e00f      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009618:	4b09      	ldr	r3, [pc, #36]	; (8009640 <HAL_RCC_OscConfig+0x820>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1f0      	bne.n	8009606 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8009624:	4b06      	ldr	r3, [pc, #24]	; (8009640 <HAL_RCC_OscConfig+0x820>)
 8009626:	68da      	ldr	r2, [r3, #12]
 8009628:	4905      	ldr	r1, [pc, #20]	; (8009640 <HAL_RCC_OscConfig+0x820>)
 800962a:	4b06      	ldr	r3, [pc, #24]	; (8009644 <HAL_RCC_OscConfig+0x824>)
 800962c:	4013      	ands	r3, r2
 800962e:	60cb      	str	r3, [r1, #12]
 8009630:	e001      	b.n	8009636 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e000      	b.n	8009638 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8009636:	2300      	movs	r3, #0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3720      	adds	r7, #32
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	40021000 	.word	0x40021000
 8009644:	feeefffc 	.word	0xfeeefffc

08009648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e0e7      	b.n	800982c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800965c:	4b75      	ldr	r3, [pc, #468]	; (8009834 <HAL_RCC_ClockConfig+0x1ec>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0307 	and.w	r3, r3, #7
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	429a      	cmp	r2, r3
 8009668:	d910      	bls.n	800968c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800966a:	4b72      	ldr	r3, [pc, #456]	; (8009834 <HAL_RCC_ClockConfig+0x1ec>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f023 0207 	bic.w	r2, r3, #7
 8009672:	4970      	ldr	r1, [pc, #448]	; (8009834 <HAL_RCC_ClockConfig+0x1ec>)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	4313      	orrs	r3, r2
 8009678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800967a:	4b6e      	ldr	r3, [pc, #440]	; (8009834 <HAL_RCC_ClockConfig+0x1ec>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0307 	and.w	r3, r3, #7
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	d001      	beq.n	800968c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e0cf      	b.n	800982c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0302 	and.w	r3, r3, #2
 8009694:	2b00      	cmp	r3, #0
 8009696:	d010      	beq.n	80096ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	689a      	ldr	r2, [r3, #8]
 800969c:	4b66      	ldr	r3, [pc, #408]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d908      	bls.n	80096ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096a8:	4b63      	ldr	r3, [pc, #396]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	4960      	ldr	r1, [pc, #384]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d04c      	beq.n	8009760 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d107      	bne.n	80096de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096ce:	4b5a      	ldr	r3, [pc, #360]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d121      	bne.n	800971e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80096da:	2301      	movs	r3, #1
 80096dc:	e0a6      	b.n	800982c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d107      	bne.n	80096f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096e6:	4b54      	ldr	r3, [pc, #336]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d115      	bne.n	800971e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e09a      	b.n	800982c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d107      	bne.n	800970e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80096fe:	4b4e      	ldr	r3, [pc, #312]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0302 	and.w	r3, r3, #2
 8009706:	2b00      	cmp	r3, #0
 8009708:	d109      	bne.n	800971e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e08e      	b.n	800982c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800970e:	4b4a      	ldr	r3, [pc, #296]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009716:	2b00      	cmp	r3, #0
 8009718:	d101      	bne.n	800971e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e086      	b.n	800982c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800971e:	4b46      	ldr	r3, [pc, #280]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	f023 0203 	bic.w	r2, r3, #3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	4943      	ldr	r1, [pc, #268]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 800972c:	4313      	orrs	r3, r2
 800972e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009730:	f7fa ff44 	bl	80045bc <HAL_GetTick>
 8009734:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009736:	e00a      	b.n	800974e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009738:	f7fa ff40 	bl	80045bc <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	f241 3288 	movw	r2, #5000	; 0x1388
 8009746:	4293      	cmp	r3, r2
 8009748:	d901      	bls.n	800974e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800974a:	2303      	movs	r3, #3
 800974c:	e06e      	b.n	800982c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800974e:	4b3a      	ldr	r3, [pc, #232]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f003 020c 	and.w	r2, r3, #12
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	429a      	cmp	r2, r3
 800975e:	d1eb      	bne.n	8009738 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 0302 	and.w	r3, r3, #2
 8009768:	2b00      	cmp	r3, #0
 800976a:	d010      	beq.n	800978e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689a      	ldr	r2, [r3, #8]
 8009770:	4b31      	ldr	r3, [pc, #196]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009778:	429a      	cmp	r2, r3
 800977a:	d208      	bcs.n	800978e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800977c:	4b2e      	ldr	r3, [pc, #184]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	492b      	ldr	r1, [pc, #172]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 800978a:	4313      	orrs	r3, r2
 800978c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800978e:	4b29      	ldr	r3, [pc, #164]	; (8009834 <HAL_RCC_ClockConfig+0x1ec>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 0307 	and.w	r3, r3, #7
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	429a      	cmp	r2, r3
 800979a:	d210      	bcs.n	80097be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800979c:	4b25      	ldr	r3, [pc, #148]	; (8009834 <HAL_RCC_ClockConfig+0x1ec>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f023 0207 	bic.w	r2, r3, #7
 80097a4:	4923      	ldr	r1, [pc, #140]	; (8009834 <HAL_RCC_ClockConfig+0x1ec>)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097ac:	4b21      	ldr	r3, [pc, #132]	; (8009834 <HAL_RCC_ClockConfig+0x1ec>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0307 	and.w	r3, r3, #7
 80097b4:	683a      	ldr	r2, [r7, #0]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d001      	beq.n	80097be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e036      	b.n	800982c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f003 0304 	and.w	r3, r3, #4
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d008      	beq.n	80097dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097ca:	4b1b      	ldr	r3, [pc, #108]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	4918      	ldr	r1, [pc, #96]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 80097d8:	4313      	orrs	r3, r2
 80097da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0308 	and.w	r3, r3, #8
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d009      	beq.n	80097fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097e8:	4b13      	ldr	r3, [pc, #76]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	00db      	lsls	r3, r3, #3
 80097f6:	4910      	ldr	r1, [pc, #64]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 80097f8:	4313      	orrs	r3, r2
 80097fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80097fc:	f000 f824 	bl	8009848 <HAL_RCC_GetSysClockFreq>
 8009800:	4602      	mov	r2, r0
 8009802:	4b0d      	ldr	r3, [pc, #52]	; (8009838 <HAL_RCC_ClockConfig+0x1f0>)
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	091b      	lsrs	r3, r3, #4
 8009808:	f003 030f 	and.w	r3, r3, #15
 800980c:	490b      	ldr	r1, [pc, #44]	; (800983c <HAL_RCC_ClockConfig+0x1f4>)
 800980e:	5ccb      	ldrb	r3, [r1, r3]
 8009810:	f003 031f 	and.w	r3, r3, #31
 8009814:	fa22 f303 	lsr.w	r3, r2, r3
 8009818:	4a09      	ldr	r2, [pc, #36]	; (8009840 <HAL_RCC_ClockConfig+0x1f8>)
 800981a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800981c:	4b09      	ldr	r3, [pc, #36]	; (8009844 <HAL_RCC_ClockConfig+0x1fc>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4618      	mov	r0, r3
 8009822:	f7fa fe7b 	bl	800451c <HAL_InitTick>
 8009826:	4603      	mov	r3, r0
 8009828:	72fb      	strb	r3, [r7, #11]

  return status;
 800982a:	7afb      	ldrb	r3, [r7, #11]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3710      	adds	r7, #16
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	40022000 	.word	0x40022000
 8009838:	40021000 	.word	0x40021000
 800983c:	080186cc 	.word	0x080186cc
 8009840:	20000020 	.word	0x20000020
 8009844:	20000024 	.word	0x20000024

08009848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009848:	b480      	push	{r7}
 800984a:	b089      	sub	sp, #36	; 0x24
 800984c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	61fb      	str	r3, [r7, #28]
 8009852:	2300      	movs	r3, #0
 8009854:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009856:	4b3e      	ldr	r3, [pc, #248]	; (8009950 <HAL_RCC_GetSysClockFreq+0x108>)
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	f003 030c 	and.w	r3, r3, #12
 800985e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009860:	4b3b      	ldr	r3, [pc, #236]	; (8009950 <HAL_RCC_GetSysClockFreq+0x108>)
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	f003 0303 	and.w	r3, r3, #3
 8009868:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d005      	beq.n	800987c <HAL_RCC_GetSysClockFreq+0x34>
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	2b0c      	cmp	r3, #12
 8009874:	d121      	bne.n	80098ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d11e      	bne.n	80098ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800987c:	4b34      	ldr	r3, [pc, #208]	; (8009950 <HAL_RCC_GetSysClockFreq+0x108>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0308 	and.w	r3, r3, #8
 8009884:	2b00      	cmp	r3, #0
 8009886:	d107      	bne.n	8009898 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009888:	4b31      	ldr	r3, [pc, #196]	; (8009950 <HAL_RCC_GetSysClockFreq+0x108>)
 800988a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800988e:	0a1b      	lsrs	r3, r3, #8
 8009890:	f003 030f 	and.w	r3, r3, #15
 8009894:	61fb      	str	r3, [r7, #28]
 8009896:	e005      	b.n	80098a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009898:	4b2d      	ldr	r3, [pc, #180]	; (8009950 <HAL_RCC_GetSysClockFreq+0x108>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	091b      	lsrs	r3, r3, #4
 800989e:	f003 030f 	and.w	r3, r3, #15
 80098a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80098a4:	4a2b      	ldr	r2, [pc, #172]	; (8009954 <HAL_RCC_GetSysClockFreq+0x10c>)
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10d      	bne.n	80098d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80098b8:	e00a      	b.n	80098d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	2b04      	cmp	r3, #4
 80098be:	d102      	bne.n	80098c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80098c0:	4b25      	ldr	r3, [pc, #148]	; (8009958 <HAL_RCC_GetSysClockFreq+0x110>)
 80098c2:	61bb      	str	r3, [r7, #24]
 80098c4:	e004      	b.n	80098d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	2b08      	cmp	r3, #8
 80098ca:	d101      	bne.n	80098d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80098cc:	4b23      	ldr	r3, [pc, #140]	; (800995c <HAL_RCC_GetSysClockFreq+0x114>)
 80098ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	2b0c      	cmp	r3, #12
 80098d4:	d134      	bne.n	8009940 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80098d6:	4b1e      	ldr	r3, [pc, #120]	; (8009950 <HAL_RCC_GetSysClockFreq+0x108>)
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	f003 0303 	and.w	r3, r3, #3
 80098de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d003      	beq.n	80098ee <HAL_RCC_GetSysClockFreq+0xa6>
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	2b03      	cmp	r3, #3
 80098ea:	d003      	beq.n	80098f4 <HAL_RCC_GetSysClockFreq+0xac>
 80098ec:	e005      	b.n	80098fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80098ee:	4b1a      	ldr	r3, [pc, #104]	; (8009958 <HAL_RCC_GetSysClockFreq+0x110>)
 80098f0:	617b      	str	r3, [r7, #20]
      break;
 80098f2:	e005      	b.n	8009900 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80098f4:	4b19      	ldr	r3, [pc, #100]	; (800995c <HAL_RCC_GetSysClockFreq+0x114>)
 80098f6:	617b      	str	r3, [r7, #20]
      break;
 80098f8:	e002      	b.n	8009900 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	617b      	str	r3, [r7, #20]
      break;
 80098fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009900:	4b13      	ldr	r3, [pc, #76]	; (8009950 <HAL_RCC_GetSysClockFreq+0x108>)
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	091b      	lsrs	r3, r3, #4
 8009906:	f003 0307 	and.w	r3, r3, #7
 800990a:	3301      	adds	r3, #1
 800990c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800990e:	4b10      	ldr	r3, [pc, #64]	; (8009950 <HAL_RCC_GetSysClockFreq+0x108>)
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	0a1b      	lsrs	r3, r3, #8
 8009914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	fb03 f202 	mul.w	r2, r3, r2
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	fbb2 f3f3 	udiv	r3, r2, r3
 8009924:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009926:	4b0a      	ldr	r3, [pc, #40]	; (8009950 <HAL_RCC_GetSysClockFreq+0x108>)
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	0e5b      	lsrs	r3, r3, #25
 800992c:	f003 0303 	and.w	r3, r3, #3
 8009930:	3301      	adds	r3, #1
 8009932:	005b      	lsls	r3, r3, #1
 8009934:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	fbb2 f3f3 	udiv	r3, r2, r3
 800993e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009940:	69bb      	ldr	r3, [r7, #24]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3724      	adds	r7, #36	; 0x24
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	40021000 	.word	0x40021000
 8009954:	080186e4 	.word	0x080186e4
 8009958:	00f42400 	.word	0x00f42400
 800995c:	007a1200 	.word	0x007a1200

08009960 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009960:	b480      	push	{r7}
 8009962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009964:	4b03      	ldr	r3, [pc, #12]	; (8009974 <HAL_RCC_GetHCLKFreq+0x14>)
 8009966:	681b      	ldr	r3, [r3, #0]
}
 8009968:	4618      	mov	r0, r3
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	20000020 	.word	0x20000020

08009978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800997c:	f7ff fff0 	bl	8009960 <HAL_RCC_GetHCLKFreq>
 8009980:	4602      	mov	r2, r0
 8009982:	4b06      	ldr	r3, [pc, #24]	; (800999c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	0a1b      	lsrs	r3, r3, #8
 8009988:	f003 0307 	and.w	r3, r3, #7
 800998c:	4904      	ldr	r1, [pc, #16]	; (80099a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800998e:	5ccb      	ldrb	r3, [r1, r3]
 8009990:	f003 031f 	and.w	r3, r3, #31
 8009994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009998:	4618      	mov	r0, r3
 800999a:	bd80      	pop	{r7, pc}
 800999c:	40021000 	.word	0x40021000
 80099a0:	080186dc 	.word	0x080186dc

080099a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80099a8:	f7ff ffda 	bl	8009960 <HAL_RCC_GetHCLKFreq>
 80099ac:	4602      	mov	r2, r0
 80099ae:	4b06      	ldr	r3, [pc, #24]	; (80099c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	0adb      	lsrs	r3, r3, #11
 80099b4:	f003 0307 	and.w	r3, r3, #7
 80099b8:	4904      	ldr	r1, [pc, #16]	; (80099cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80099ba:	5ccb      	ldrb	r3, [r1, r3]
 80099bc:	f003 031f 	and.w	r3, r3, #31
 80099c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	40021000 	.word	0x40021000
 80099cc:	080186dc 	.word	0x080186dc

080099d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80099d8:	2300      	movs	r3, #0
 80099da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80099dc:	4b2a      	ldr	r3, [pc, #168]	; (8009a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d003      	beq.n	80099f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80099e8:	f7ff f9a6 	bl	8008d38 <HAL_PWREx_GetVoltageRange>
 80099ec:	6178      	str	r0, [r7, #20]
 80099ee:	e014      	b.n	8009a1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80099f0:	4b25      	ldr	r3, [pc, #148]	; (8009a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099f4:	4a24      	ldr	r2, [pc, #144]	; (8009a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099fa:	6593      	str	r3, [r2, #88]	; 0x58
 80099fc:	4b22      	ldr	r3, [pc, #136]	; (8009a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80099fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a04:	60fb      	str	r3, [r7, #12]
 8009a06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009a08:	f7ff f996 	bl	8008d38 <HAL_PWREx_GetVoltageRange>
 8009a0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009a0e:	4b1e      	ldr	r3, [pc, #120]	; (8009a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a12:	4a1d      	ldr	r2, [pc, #116]	; (8009a88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009a14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a20:	d10b      	bne.n	8009a3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2b80      	cmp	r3, #128	; 0x80
 8009a26:	d919      	bls.n	8009a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2ba0      	cmp	r3, #160	; 0xa0
 8009a2c:	d902      	bls.n	8009a34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009a2e:	2302      	movs	r3, #2
 8009a30:	613b      	str	r3, [r7, #16]
 8009a32:	e013      	b.n	8009a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009a34:	2301      	movs	r3, #1
 8009a36:	613b      	str	r3, [r7, #16]
 8009a38:	e010      	b.n	8009a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2b80      	cmp	r3, #128	; 0x80
 8009a3e:	d902      	bls.n	8009a46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009a40:	2303      	movs	r3, #3
 8009a42:	613b      	str	r3, [r7, #16]
 8009a44:	e00a      	b.n	8009a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2b80      	cmp	r3, #128	; 0x80
 8009a4a:	d102      	bne.n	8009a52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	613b      	str	r3, [r7, #16]
 8009a50:	e004      	b.n	8009a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2b70      	cmp	r3, #112	; 0x70
 8009a56:	d101      	bne.n	8009a5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009a58:	2301      	movs	r3, #1
 8009a5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009a5c:	4b0b      	ldr	r3, [pc, #44]	; (8009a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f023 0207 	bic.w	r2, r3, #7
 8009a64:	4909      	ldr	r1, [pc, #36]	; (8009a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009a6c:	4b07      	ldr	r3, [pc, #28]	; (8009a8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 0307 	and.w	r3, r3, #7
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d001      	beq.n	8009a7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e000      	b.n	8009a80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3718      	adds	r7, #24
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	40021000 	.word	0x40021000
 8009a8c:	40022000 	.word	0x40022000

08009a90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a98:	2300      	movs	r3, #0
 8009a9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d031      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ab0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009ab4:	d01a      	beq.n	8009aec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8009ab6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009aba:	d814      	bhi.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d009      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009ac0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ac4:	d10f      	bne.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8009ac6:	4b5d      	ldr	r3, [pc, #372]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	4a5c      	ldr	r2, [pc, #368]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ad0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009ad2:	e00c      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	2100      	movs	r1, #0
 8009ada:	4618      	mov	r0, r3
 8009adc:	f000 f9ce 	bl	8009e7c <RCCEx_PLLSAI1_Config>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009ae4:	e003      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	74fb      	strb	r3, [r7, #19]
      break;
 8009aea:	e000      	b.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8009aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009aee:	7cfb      	ldrb	r3, [r7, #19]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d10b      	bne.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009af4:	4b51      	ldr	r3, [pc, #324]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009afa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b02:	494e      	ldr	r1, [pc, #312]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009b0a:	e001      	b.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b0c:	7cfb      	ldrb	r3, [r7, #19]
 8009b0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 809e 	beq.w	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009b22:	4b46      	ldr	r3, [pc, #280]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d101      	bne.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e000      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8009b32:	2300      	movs	r3, #0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00d      	beq.n	8009b54 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b38:	4b40      	ldr	r3, [pc, #256]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b3c:	4a3f      	ldr	r2, [pc, #252]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b42:	6593      	str	r3, [r2, #88]	; 0x58
 8009b44:	4b3d      	ldr	r3, [pc, #244]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b4c:	60bb      	str	r3, [r7, #8]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b50:	2301      	movs	r3, #1
 8009b52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b54:	4b3a      	ldr	r3, [pc, #232]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a39      	ldr	r2, [pc, #228]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b60:	f7fa fd2c 	bl	80045bc <HAL_GetTick>
 8009b64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009b66:	e009      	b.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b68:	f7fa fd28 	bl	80045bc <HAL_GetTick>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d902      	bls.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	74fb      	strb	r3, [r7, #19]
        break;
 8009b7a:	e005      	b.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009b7c:	4b30      	ldr	r3, [pc, #192]	; (8009c40 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0ef      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8009b88:	7cfb      	ldrb	r3, [r7, #19]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d15a      	bne.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009b8e:	4b2b      	ldr	r3, [pc, #172]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d01e      	beq.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d019      	beq.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009baa:	4b24      	ldr	r3, [pc, #144]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bb4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009bb6:	4b21      	ldr	r3, [pc, #132]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bbc:	4a1f      	ldr	r2, [pc, #124]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009bc6:	4b1d      	ldr	r3, [pc, #116]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bcc:	4a1b      	ldr	r2, [pc, #108]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009bd6:	4a19      	ldr	r2, [pc, #100]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d016      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009be8:	f7fa fce8 	bl	80045bc <HAL_GetTick>
 8009bec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bee:	e00b      	b.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bf0:	f7fa fce4 	bl	80045bc <HAL_GetTick>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d902      	bls.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8009c02:	2303      	movs	r3, #3
 8009c04:	74fb      	strb	r3, [r7, #19]
            break;
 8009c06:	e006      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c08:	4b0c      	ldr	r3, [pc, #48]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d0ec      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8009c16:	7cfb      	ldrb	r3, [r7, #19]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10b      	bne.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c1c:	4b07      	ldr	r3, [pc, #28]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c2a:	4904      	ldr	r1, [pc, #16]	; (8009c3c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009c32:	e009      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c34:	7cfb      	ldrb	r3, [r7, #19]
 8009c36:	74bb      	strb	r3, [r7, #18]
 8009c38:	e006      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8009c3a:	bf00      	nop
 8009c3c:	40021000 	.word	0x40021000
 8009c40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c44:	7cfb      	ldrb	r3, [r7, #19]
 8009c46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c48:	7c7b      	ldrb	r3, [r7, #17]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d105      	bne.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c4e:	4b8a      	ldr	r3, [pc, #552]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c52:	4a89      	ldr	r2, [pc, #548]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00a      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009c66:	4b84      	ldr	r3, [pc, #528]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c6c:	f023 0203 	bic.w	r2, r3, #3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6a1b      	ldr	r3, [r3, #32]
 8009c74:	4980      	ldr	r1, [pc, #512]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c76:	4313      	orrs	r3, r2
 8009c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0302 	and.w	r3, r3, #2
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d00a      	beq.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009c88:	4b7b      	ldr	r3, [pc, #492]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c8e:	f023 020c 	bic.w	r2, r3, #12
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c96:	4978      	ldr	r1, [pc, #480]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0320 	and.w	r3, r3, #32
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00a      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009caa:	4b73      	ldr	r3, [pc, #460]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb8:	496f      	ldr	r1, [pc, #444]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00a      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ccc:	4b6a      	ldr	r3, [pc, #424]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cd2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cda:	4967      	ldr	r1, [pc, #412]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00a      	beq.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009cee:	4b62      	ldr	r3, [pc, #392]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cf4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cfc:	495e      	ldr	r1, [pc, #376]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00a      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009d10:	4b59      	ldr	r3, [pc, #356]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1e:	4956      	ldr	r1, [pc, #344]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00a      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009d32:	4b51      	ldr	r3, [pc, #324]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d40:	494d      	ldr	r1, [pc, #308]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d42:	4313      	orrs	r3, r2
 8009d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d028      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d54:	4b48      	ldr	r3, [pc, #288]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d62:	4945      	ldr	r1, [pc, #276]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d64:	4313      	orrs	r3, r2
 8009d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d72:	d106      	bne.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d74:	4b40      	ldr	r3, [pc, #256]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	4a3f      	ldr	r2, [pc, #252]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d7e:	60d3      	str	r3, [r2, #12]
 8009d80:	e011      	b.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d8a:	d10c      	bne.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	3304      	adds	r3, #4
 8009d90:	2101      	movs	r1, #1
 8009d92:	4618      	mov	r0, r3
 8009d94:	f000 f872 	bl	8009e7c <RCCEx_PLLSAI1_Config>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009d9c:	7cfb      	ldrb	r3, [r7, #19]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d001      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8009da2:	7cfb      	ldrb	r3, [r7, #19]
 8009da4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d028      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009db2:	4b31      	ldr	r3, [pc, #196]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dc0:	492d      	ldr	r1, [pc, #180]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dd0:	d106      	bne.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009dd2:	4b29      	ldr	r3, [pc, #164]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	4a28      	ldr	r2, [pc, #160]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ddc:	60d3      	str	r3, [r2, #12]
 8009dde:	e011      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009de4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009de8:	d10c      	bne.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	3304      	adds	r3, #4
 8009dee:	2101      	movs	r1, #1
 8009df0:	4618      	mov	r0, r3
 8009df2:	f000 f843 	bl	8009e7c <RCCEx_PLLSAI1_Config>
 8009df6:	4603      	mov	r3, r0
 8009df8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009dfa:	7cfb      	ldrb	r3, [r7, #19]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d001      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8009e00:	7cfb      	ldrb	r3, [r7, #19]
 8009e02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d01c      	beq.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e10:	4b19      	ldr	r3, [pc, #100]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e1e:	4916      	ldr	r1, [pc, #88]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009e20:	4313      	orrs	r3, r2
 8009e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e2e:	d10c      	bne.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	3304      	adds	r3, #4
 8009e34:	2102      	movs	r1, #2
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 f820 	bl	8009e7c <RCCEx_PLLSAI1_Config>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009e40:	7cfb      	ldrb	r3, [r7, #19]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8009e46:	7cfb      	ldrb	r3, [r7, #19]
 8009e48:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00a      	beq.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e56:	4b08      	ldr	r3, [pc, #32]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e5c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e64:	4904      	ldr	r1, [pc, #16]	; (8009e78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009e66:	4313      	orrs	r3, r2
 8009e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009e6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3718      	adds	r7, #24
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	40021000 	.word	0x40021000

08009e7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e86:	2300      	movs	r3, #0
 8009e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009e8a:	4b74      	ldr	r3, [pc, #464]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	f003 0303 	and.w	r3, r3, #3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d018      	beq.n	8009ec8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009e96:	4b71      	ldr	r3, [pc, #452]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	f003 0203 	and.w	r2, r3, #3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d10d      	bne.n	8009ec2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
       ||
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d009      	beq.n	8009ec2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009eae:	4b6b      	ldr	r3, [pc, #428]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	091b      	lsrs	r3, r3, #4
 8009eb4:	f003 0307 	and.w	r3, r3, #7
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
       ||
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d047      	beq.n	8009f52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	73fb      	strb	r3, [r7, #15]
 8009ec6:	e044      	b.n	8009f52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b03      	cmp	r3, #3
 8009ece:	d018      	beq.n	8009f02 <RCCEx_PLLSAI1_Config+0x86>
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d825      	bhi.n	8009f20 <RCCEx_PLLSAI1_Config+0xa4>
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d002      	beq.n	8009ede <RCCEx_PLLSAI1_Config+0x62>
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d009      	beq.n	8009ef0 <RCCEx_PLLSAI1_Config+0x74>
 8009edc:	e020      	b.n	8009f20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009ede:	4b5f      	ldr	r3, [pc, #380]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 0302 	and.w	r3, r3, #2
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d11d      	bne.n	8009f26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009eee:	e01a      	b.n	8009f26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009ef0:	4b5a      	ldr	r3, [pc, #360]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d116      	bne.n	8009f2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f00:	e013      	b.n	8009f2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009f02:	4b56      	ldr	r3, [pc, #344]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10f      	bne.n	8009f2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009f0e:	4b53      	ldr	r3, [pc, #332]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d109      	bne.n	8009f2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009f1e:	e006      	b.n	8009f2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	73fb      	strb	r3, [r7, #15]
      break;
 8009f24:	e004      	b.n	8009f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009f26:	bf00      	nop
 8009f28:	e002      	b.n	8009f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009f2a:	bf00      	nop
 8009f2c:	e000      	b.n	8009f30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009f2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10d      	bne.n	8009f52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009f36:	4b49      	ldr	r3, [pc, #292]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6819      	ldr	r1, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	3b01      	subs	r3, #1
 8009f48:	011b      	lsls	r3, r3, #4
 8009f4a:	430b      	orrs	r3, r1
 8009f4c:	4943      	ldr	r1, [pc, #268]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009f52:	7bfb      	ldrb	r3, [r7, #15]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d17c      	bne.n	800a052 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009f58:	4b40      	ldr	r3, [pc, #256]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a3f      	ldr	r2, [pc, #252]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009f62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f64:	f7fa fb2a 	bl	80045bc <HAL_GetTick>
 8009f68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009f6a:	e009      	b.n	8009f80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009f6c:	f7fa fb26 	bl	80045bc <HAL_GetTick>
 8009f70:	4602      	mov	r2, r0
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d902      	bls.n	8009f80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	73fb      	strb	r3, [r7, #15]
        break;
 8009f7e:	e005      	b.n	8009f8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009f80:	4b36      	ldr	r3, [pc, #216]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1ef      	bne.n	8009f6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009f8c:	7bfb      	ldrb	r3, [r7, #15]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d15f      	bne.n	800a052 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d110      	bne.n	8009fba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009f98:	4b30      	ldr	r3, [pc, #192]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009fa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	6892      	ldr	r2, [r2, #8]
 8009fa8:	0211      	lsls	r1, r2, #8
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	68d2      	ldr	r2, [r2, #12]
 8009fae:	06d2      	lsls	r2, r2, #27
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	492a      	ldr	r1, [pc, #168]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	610b      	str	r3, [r1, #16]
 8009fb8:	e027      	b.n	800a00a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d112      	bne.n	8009fe6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009fc0:	4b26      	ldr	r3, [pc, #152]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009fc8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	6892      	ldr	r2, [r2, #8]
 8009fd0:	0211      	lsls	r1, r2, #8
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	6912      	ldr	r2, [r2, #16]
 8009fd6:	0852      	lsrs	r2, r2, #1
 8009fd8:	3a01      	subs	r2, #1
 8009fda:	0552      	lsls	r2, r2, #21
 8009fdc:	430a      	orrs	r2, r1
 8009fde:	491f      	ldr	r1, [pc, #124]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	610b      	str	r3, [r1, #16]
 8009fe4:	e011      	b.n	800a00a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009fe6:	4b1d      	ldr	r3, [pc, #116]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009fee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	6892      	ldr	r2, [r2, #8]
 8009ff6:	0211      	lsls	r1, r2, #8
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	6952      	ldr	r2, [r2, #20]
 8009ffc:	0852      	lsrs	r2, r2, #1
 8009ffe:	3a01      	subs	r2, #1
 800a000:	0652      	lsls	r2, r2, #25
 800a002:	430a      	orrs	r2, r1
 800a004:	4915      	ldr	r1, [pc, #84]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a006:	4313      	orrs	r3, r2
 800a008:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a00a:	4b14      	ldr	r3, [pc, #80]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a13      	ldr	r2, [pc, #76]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a010:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a014:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a016:	f7fa fad1 	bl	80045bc <HAL_GetTick>
 800a01a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a01c:	e009      	b.n	800a032 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a01e:	f7fa facd 	bl	80045bc <HAL_GetTick>
 800a022:	4602      	mov	r2, r0
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	1ad3      	subs	r3, r2, r3
 800a028:	2b02      	cmp	r3, #2
 800a02a:	d902      	bls.n	800a032 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800a02c:	2303      	movs	r3, #3
 800a02e:	73fb      	strb	r3, [r7, #15]
          break;
 800a030:	e005      	b.n	800a03e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a032:	4b0a      	ldr	r3, [pc, #40]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d0ef      	beq.n	800a01e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d106      	bne.n	800a052 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a044:	4b05      	ldr	r3, [pc, #20]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a046:	691a      	ldr	r2, [r3, #16]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	4903      	ldr	r1, [pc, #12]	; (800a05c <RCCEx_PLLSAI1_Config+0x1e0>)
 800a04e:	4313      	orrs	r3, r2
 800a050:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a052:	7bfb      	ldrb	r3, [r7, #15]
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	40021000 	.word	0x40021000

0800a060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d101      	bne.n	800a072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e049      	b.n	800a106 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d106      	bne.n	800a08c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7fa f862 	bl	8004150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2202      	movs	r2, #2
 800a090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	3304      	adds	r3, #4
 800a09c:	4619      	mov	r1, r3
 800a09e:	4610      	mov	r0, r2
 800a0a0:	f000 fa80 	bl	800a5a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
	...

0800a110 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2b01      	cmp	r3, #1
 800a122:	d001      	beq.n	800a128 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e033      	b.n	800a190 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a19      	ldr	r2, [pc, #100]	; (800a19c <HAL_TIM_Base_Start+0x8c>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d009      	beq.n	800a14e <HAL_TIM_Base_Start+0x3e>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a142:	d004      	beq.n	800a14e <HAL_TIM_Base_Start+0x3e>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a15      	ldr	r2, [pc, #84]	; (800a1a0 <HAL_TIM_Base_Start+0x90>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d115      	bne.n	800a17a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	689a      	ldr	r2, [r3, #8]
 800a154:	4b13      	ldr	r3, [pc, #76]	; (800a1a4 <HAL_TIM_Base_Start+0x94>)
 800a156:	4013      	ands	r3, r2
 800a158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2b06      	cmp	r3, #6
 800a15e:	d015      	beq.n	800a18c <HAL_TIM_Base_Start+0x7c>
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a166:	d011      	beq.n	800a18c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f042 0201 	orr.w	r2, r2, #1
 800a176:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a178:	e008      	b.n	800a18c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f042 0201 	orr.w	r2, r2, #1
 800a188:	601a      	str	r2, [r3, #0]
 800a18a:	e000      	b.n	800a18e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a18c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a18e:	2300      	movs	r3, #0
}
 800a190:	4618      	mov	r0, r3
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr
 800a19c:	40012c00 	.word	0x40012c00
 800a1a0:	40014000 	.word	0x40014000
 800a1a4:	00010007 	.word	0x00010007

0800a1a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	f003 0302 	and.w	r3, r3, #2
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d020      	beq.n	800a20c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f003 0302 	and.w	r3, r3, #2
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d01b      	beq.n	800a20c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f06f 0202 	mvn.w	r2, #2
 800a1dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	f003 0303 	and.w	r3, r3, #3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f9b7 	bl	800a566 <HAL_TIM_IC_CaptureCallback>
 800a1f8:	e005      	b.n	800a206 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f9a9 	bl	800a552 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f9ba 	bl	800a57a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	f003 0304 	and.w	r3, r3, #4
 800a212:	2b00      	cmp	r3, #0
 800a214:	d020      	beq.n	800a258 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f003 0304 	and.w	r3, r3, #4
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d01b      	beq.n	800a258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f06f 0204 	mvn.w	r2, #4
 800a228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2202      	movs	r2, #2
 800a22e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f991 	bl	800a566 <HAL_TIM_IC_CaptureCallback>
 800a244:	e005      	b.n	800a252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f983 	bl	800a552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f994 	bl	800a57a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	f003 0308 	and.w	r3, r3, #8
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d020      	beq.n	800a2a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f003 0308 	and.w	r3, r3, #8
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d01b      	beq.n	800a2a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f06f 0208 	mvn.w	r2, #8
 800a274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2204      	movs	r2, #4
 800a27a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	69db      	ldr	r3, [r3, #28]
 800a282:	f003 0303 	and.w	r3, r3, #3
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f96b 	bl	800a566 <HAL_TIM_IC_CaptureCallback>
 800a290:	e005      	b.n	800a29e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f95d 	bl	800a552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 f96e 	bl	800a57a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	f003 0310 	and.w	r3, r3, #16
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d020      	beq.n	800a2f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f003 0310 	and.w	r3, r3, #16
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d01b      	beq.n	800a2f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f06f 0210 	mvn.w	r2, #16
 800a2c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2208      	movs	r2, #8
 800a2c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f945 	bl	800a566 <HAL_TIM_IC_CaptureCallback>
 800a2dc:	e005      	b.n	800a2ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f937 	bl	800a552 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f000 f948 	bl	800a57a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	f003 0301 	and.w	r3, r3, #1
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00c      	beq.n	800a314 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f003 0301 	and.w	r3, r3, #1
 800a300:	2b00      	cmp	r3, #0
 800a302:	d007      	beq.n	800a314 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f06f 0201 	mvn.w	r2, #1
 800a30c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f915 	bl	800a53e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00c      	beq.n	800a338 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a324:	2b00      	cmp	r3, #0
 800a326:	d007      	beq.n	800a338 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 faa4 	bl	800a880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d00c      	beq.n	800a35c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d007      	beq.n	800a35c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fa9c 	bl	800a894 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00c      	beq.n	800a380 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d007      	beq.n	800a380 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f907 	bl	800a58e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	f003 0320 	and.w	r3, r3, #32
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00c      	beq.n	800a3a4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f003 0320 	and.w	r3, r3, #32
 800a390:	2b00      	cmp	r3, #0
 800a392:	d007      	beq.n	800a3a4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f06f 0220 	mvn.w	r2, #32
 800a39c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fa64 	bl	800a86c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3a4:	bf00      	nop
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d101      	bne.n	800a3c8 <HAL_TIM_ConfigClockSource+0x1c>
 800a3c4:	2302      	movs	r3, #2
 800a3c6:	e0b6      	b.n	800a536 <HAL_TIM_ConfigClockSource+0x18a>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2202      	movs	r2, #2
 800a3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a3ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a404:	d03e      	beq.n	800a484 <HAL_TIM_ConfigClockSource+0xd8>
 800a406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a40a:	f200 8087 	bhi.w	800a51c <HAL_TIM_ConfigClockSource+0x170>
 800a40e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a412:	f000 8086 	beq.w	800a522 <HAL_TIM_ConfigClockSource+0x176>
 800a416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a41a:	d87f      	bhi.n	800a51c <HAL_TIM_ConfigClockSource+0x170>
 800a41c:	2b70      	cmp	r3, #112	; 0x70
 800a41e:	d01a      	beq.n	800a456 <HAL_TIM_ConfigClockSource+0xaa>
 800a420:	2b70      	cmp	r3, #112	; 0x70
 800a422:	d87b      	bhi.n	800a51c <HAL_TIM_ConfigClockSource+0x170>
 800a424:	2b60      	cmp	r3, #96	; 0x60
 800a426:	d050      	beq.n	800a4ca <HAL_TIM_ConfigClockSource+0x11e>
 800a428:	2b60      	cmp	r3, #96	; 0x60
 800a42a:	d877      	bhi.n	800a51c <HAL_TIM_ConfigClockSource+0x170>
 800a42c:	2b50      	cmp	r3, #80	; 0x50
 800a42e:	d03c      	beq.n	800a4aa <HAL_TIM_ConfigClockSource+0xfe>
 800a430:	2b50      	cmp	r3, #80	; 0x50
 800a432:	d873      	bhi.n	800a51c <HAL_TIM_ConfigClockSource+0x170>
 800a434:	2b40      	cmp	r3, #64	; 0x40
 800a436:	d058      	beq.n	800a4ea <HAL_TIM_ConfigClockSource+0x13e>
 800a438:	2b40      	cmp	r3, #64	; 0x40
 800a43a:	d86f      	bhi.n	800a51c <HAL_TIM_ConfigClockSource+0x170>
 800a43c:	2b30      	cmp	r3, #48	; 0x30
 800a43e:	d064      	beq.n	800a50a <HAL_TIM_ConfigClockSource+0x15e>
 800a440:	2b30      	cmp	r3, #48	; 0x30
 800a442:	d86b      	bhi.n	800a51c <HAL_TIM_ConfigClockSource+0x170>
 800a444:	2b20      	cmp	r3, #32
 800a446:	d060      	beq.n	800a50a <HAL_TIM_ConfigClockSource+0x15e>
 800a448:	2b20      	cmp	r3, #32
 800a44a:	d867      	bhi.n	800a51c <HAL_TIM_ConfigClockSource+0x170>
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d05c      	beq.n	800a50a <HAL_TIM_ConfigClockSource+0x15e>
 800a450:	2b10      	cmp	r3, #16
 800a452:	d05a      	beq.n	800a50a <HAL_TIM_ConfigClockSource+0x15e>
 800a454:	e062      	b.n	800a51c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a466:	f000 f97b 	bl	800a760 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a478:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	609a      	str	r2, [r3, #8]
      break;
 800a482:	e04f      	b.n	800a524 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a494:	f000 f964 	bl	800a760 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	689a      	ldr	r2, [r3, #8]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4a6:	609a      	str	r2, [r3, #8]
      break;
 800a4a8:	e03c      	b.n	800a524 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	f000 f8d8 	bl	800a66c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2150      	movs	r1, #80	; 0x50
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f000 f931 	bl	800a72a <TIM_ITRx_SetConfig>
      break;
 800a4c8:	e02c      	b.n	800a524 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	f000 f8f7 	bl	800a6ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2160      	movs	r1, #96	; 0x60
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 f921 	bl	800a72a <TIM_ITRx_SetConfig>
      break;
 800a4e8:	e01c      	b.n	800a524 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	f000 f8b8 	bl	800a66c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2140      	movs	r1, #64	; 0x40
 800a502:	4618      	mov	r0, r3
 800a504:	f000 f911 	bl	800a72a <TIM_ITRx_SetConfig>
      break;
 800a508:	e00c      	b.n	800a524 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4619      	mov	r1, r3
 800a514:	4610      	mov	r0, r2
 800a516:	f000 f908 	bl	800a72a <TIM_ITRx_SetConfig>
      break;
 800a51a:	e003      	b.n	800a524 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	73fb      	strb	r3, [r7, #15]
      break;
 800a520:	e000      	b.n	800a524 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a522:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a534:	7bfb      	ldrb	r3, [r7, #15]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a546:	bf00      	nop
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a552:	b480      	push	{r7}
 800a554:	b083      	sub	sp, #12
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a55a:	bf00      	nop
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a566:	b480      	push	{r7}
 800a568:	b083      	sub	sp, #12
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a56e:	bf00      	nop
 800a570:	370c      	adds	r7, #12
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b083      	sub	sp, #12
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a582:	bf00      	nop
 800a584:	370c      	adds	r7, #12
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr

0800a58e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a58e:	b480      	push	{r7}
 800a590:	b083      	sub	sp, #12
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a596:	bf00      	nop
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
	...

0800a5a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a2a      	ldr	r2, [pc, #168]	; (800a660 <TIM_Base_SetConfig+0xbc>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d003      	beq.n	800a5c4 <TIM_Base_SetConfig+0x20>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5c2:	d108      	bne.n	800a5d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4a21      	ldr	r2, [pc, #132]	; (800a660 <TIM_Base_SetConfig+0xbc>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d00b      	beq.n	800a5f6 <TIM_Base_SetConfig+0x52>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5e4:	d007      	beq.n	800a5f6 <TIM_Base_SetConfig+0x52>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	4a1e      	ldr	r2, [pc, #120]	; (800a664 <TIM_Base_SetConfig+0xc0>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d003      	beq.n	800a5f6 <TIM_Base_SetConfig+0x52>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	4a1d      	ldr	r2, [pc, #116]	; (800a668 <TIM_Base_SetConfig+0xc4>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d108      	bne.n	800a608 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	68db      	ldr	r3, [r3, #12]
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	4313      	orrs	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	695b      	ldr	r3, [r3, #20]
 800a612:	4313      	orrs	r3, r2
 800a614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	689a      	ldr	r2, [r3, #8]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a0c      	ldr	r2, [pc, #48]	; (800a660 <TIM_Base_SetConfig+0xbc>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d007      	beq.n	800a644 <TIM_Base_SetConfig+0xa0>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a0b      	ldr	r2, [pc, #44]	; (800a664 <TIM_Base_SetConfig+0xc0>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d003      	beq.n	800a644 <TIM_Base_SetConfig+0xa0>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a0a      	ldr	r2, [pc, #40]	; (800a668 <TIM_Base_SetConfig+0xc4>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d103      	bne.n	800a64c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	691a      	ldr	r2, [r3, #16]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	615a      	str	r2, [r3, #20]
}
 800a652:	bf00      	nop
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	40012c00 	.word	0x40012c00
 800a664:	40014000 	.word	0x40014000
 800a668:	40014400 	.word	0x40014400

0800a66c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b087      	sub	sp, #28
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6a1b      	ldr	r3, [r3, #32]
 800a67c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6a1b      	ldr	r3, [r3, #32]
 800a682:	f023 0201 	bic.w	r2, r3, #1
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	011b      	lsls	r3, r3, #4
 800a69c:	693a      	ldr	r2, [r7, #16]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f023 030a 	bic.w	r3, r3, #10
 800a6a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	621a      	str	r2, [r3, #32]
}
 800a6be:	bf00      	nop
 800a6c0:	371c      	adds	r7, #28
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b087      	sub	sp, #28
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6a1b      	ldr	r3, [r3, #32]
 800a6da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6a1b      	ldr	r3, [r3, #32]
 800a6e0:	f023 0210 	bic.w	r2, r3, #16
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	031b      	lsls	r3, r3, #12
 800a6fa:	693a      	ldr	r2, [r7, #16]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a706:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	011b      	lsls	r3, r3, #4
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	4313      	orrs	r3, r2
 800a710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	697a      	ldr	r2, [r7, #20]
 800a71c:	621a      	str	r2, [r3, #32]
}
 800a71e:	bf00      	nop
 800a720:	371c      	adds	r7, #28
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b085      	sub	sp, #20
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	4313      	orrs	r3, r2
 800a748:	f043 0307 	orr.w	r3, r3, #7
 800a74c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	609a      	str	r2, [r3, #8]
}
 800a754:	bf00      	nop
 800a756:	3714      	adds	r7, #20
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a760:	b480      	push	{r7}
 800a762:	b087      	sub	sp, #28
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
 800a76c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a77a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	021a      	lsls	r2, r3, #8
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	431a      	orrs	r2, r3
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	4313      	orrs	r3, r2
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	609a      	str	r2, [r3, #8]
}
 800a794:	bf00      	nop
 800a796:	371c      	adds	r7, #28
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d101      	bne.n	800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	e04f      	b.n	800a858 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2202      	movs	r2, #2
 800a7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a21      	ldr	r2, [pc, #132]	; (800a864 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d108      	bne.n	800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a7e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	4313      	orrs	r3, r2
 800a804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a14      	ldr	r2, [pc, #80]	; (800a864 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d009      	beq.n	800a82c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a820:	d004      	beq.n	800a82c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a10      	ldr	r2, [pc, #64]	; (800a868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d10c      	bne.n	800a846 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a832:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	68ba      	ldr	r2, [r7, #8]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a856:	2300      	movs	r3, #0
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr
 800a864:	40012c00 	.word	0x40012c00
 800a868:	40014000 	.word	0x40014000

0800a86c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a888:	bf00      	nop
 800a88a:	370c      	adds	r7, #12
 800a88c:	46bd      	mov	sp, r7
 800a88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a892:	4770      	bx	lr

0800a894 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a89c:	bf00      	nop
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d101      	bne.n	800a8ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e040      	b.n	800a93c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d106      	bne.n	800a8d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7f9 fb90 	bl	8003ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2224      	movs	r2, #36	; 0x24
 800a8d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f022 0201 	bic.w	r2, r2, #1
 800a8e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d002      	beq.n	800a8f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 ff4c 	bl	800b78c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 fd1d 	bl	800b334 <UART_SetConfig>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d101      	bne.n	800a904 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	e01b      	b.n	800a93c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	685a      	ldr	r2, [r3, #4]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	689a      	ldr	r2, [r3, #8]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f042 0201 	orr.w	r2, r2, #1
 800a932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 ffcb 	bl	800b8d0 <UART_CheckIdleState>
 800a93a:	4603      	mov	r3, r0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	e02f      	b.n	800a9b6 <HAL_UART_DeInit+0x72>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2224      	movs	r2, #36	; 0x24
 800a95a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f022 0201 	bic.w	r2, r2, #1
 800a96a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2200      	movs	r2, #0
 800a972:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2200      	movs	r2, #0
 800a97a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2200      	movs	r2, #0
 800a982:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f7f9 fbbf 	bl	8004108 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_RESET;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
	...

0800a9c0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b08b      	sub	sp, #44	; 0x2c
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	4613      	mov	r3, r2
 800a9cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9d2:	2b20      	cmp	r3, #32
 800a9d4:	d147      	bne.n	800aa66 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d002      	beq.n	800a9e2 <HAL_UART_Transmit_IT+0x22>
 800a9dc:	88fb      	ldrh	r3, [r7, #6]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d101      	bne.n	800a9e6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	e040      	b.n	800aa68 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	68ba      	ldr	r2, [r7, #8]
 800a9ea:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	88fa      	ldrh	r2, [r7, #6]
 800a9f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	88fa      	ldrh	r2, [r7, #6]
 800a9f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2221      	movs	r2, #33	; 0x21
 800aa0e:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa18:	d107      	bne.n	800aa2a <HAL_UART_Transmit_IT+0x6a>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d103      	bne.n	800aa2a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4a13      	ldr	r2, [pc, #76]	; (800aa74 <HAL_UART_Transmit_IT+0xb4>)
 800aa26:	66da      	str	r2, [r3, #108]	; 0x6c
 800aa28:	e002      	b.n	800aa30 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	4a12      	ldr	r2, [pc, #72]	; (800aa78 <HAL_UART_Transmit_IT+0xb8>)
 800aa2e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	e853 3f00 	ldrex	r3, [r3]
 800aa3c:	613b      	str	r3, [r7, #16]
   return(result);
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa44:	627b      	str	r3, [r7, #36]	; 0x24
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	623b      	str	r3, [r7, #32]
 800aa50:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa52:	69f9      	ldr	r1, [r7, #28]
 800aa54:	6a3a      	ldr	r2, [r7, #32]
 800aa56:	e841 2300 	strex	r3, r2, [r1]
 800aa5a:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1e6      	bne.n	800aa30 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	e000      	b.n	800aa68 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800aa66:	2302      	movs	r3, #2
  }
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	372c      	adds	r7, #44	; 0x2c
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr
 800aa74:	0800c011 	.word	0x0800c011
 800aa78:	0800bf59 	.word	0x0800bf59

0800aa7c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b08a      	sub	sp, #40	; 0x28
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	4613      	mov	r3, r2
 800aa88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa90:	2b20      	cmp	r3, #32
 800aa92:	d137      	bne.n	800ab04 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d002      	beq.n	800aaa0 <HAL_UART_Receive_DMA+0x24>
 800aa9a:	88fb      	ldrh	r3, [r7, #6]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d101      	bne.n	800aaa4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e030      	b.n	800ab06 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a18      	ldr	r2, [pc, #96]	; (800ab10 <HAL_UART_Receive_DMA+0x94>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d01f      	beq.n	800aaf4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d018      	beq.n	800aaf4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	e853 3f00 	ldrex	r3, [r3]
 800aace:	613b      	str	r3, [r7, #16]
   return(result);
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aad6:	627b      	str	r3, [r7, #36]	; 0x24
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	461a      	mov	r2, r3
 800aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae0:	623b      	str	r3, [r7, #32]
 800aae2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aae4:	69f9      	ldr	r1, [r7, #28]
 800aae6:	6a3a      	ldr	r2, [r7, #32]
 800aae8:	e841 2300 	strex	r3, r2, [r1]
 800aaec:	61bb      	str	r3, [r7, #24]
   return(result);
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1e6      	bne.n	800aac2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aaf4:	88fb      	ldrh	r3, [r7, #6]
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	68b9      	ldr	r1, [r7, #8]
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f000 fff8 	bl	800baf0 <UART_Start_Receive_DMA>
 800ab00:	4603      	mov	r3, r0
 800ab02:	e000      	b.n	800ab06 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ab04:	2302      	movs	r3, #2
  }
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3728      	adds	r7, #40	; 0x28
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	40008000 	.word	0x40008000

0800ab14 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b0a0      	sub	sp, #128	; 0x80
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab24:	e853 3f00 	ldrex	r3, [r3]
 800ab28:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800ab2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab2c:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800ab30:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	461a      	mov	r2, r3
 800ab38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab3c:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ab40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab42:	e841 2300 	strex	r3, r2, [r1]
 800ab46:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ab48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1e6      	bne.n	800ab1c <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	3308      	adds	r3, #8
 800ab54:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab58:	e853 3f00 	ldrex	r3, [r3]
 800ab5c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ab5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab60:	f023 0301 	bic.w	r3, r3, #1
 800ab64:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3308      	adds	r3, #8
 800ab6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ab6e:	657a      	str	r2, [r7, #84]	; 0x54
 800ab70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab76:	e841 2300 	strex	r3, r2, [r1]
 800ab7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ab7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d1e5      	bne.n	800ab4e <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d118      	bne.n	800abbc <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab92:	e853 3f00 	ldrex	r3, [r3]
 800ab96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9a:	f023 0310 	bic.w	r3, r3, #16
 800ab9e:	677b      	str	r3, [r7, #116]	; 0x74
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	461a      	mov	r2, r3
 800aba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aba8:	643b      	str	r3, [r7, #64]	; 0x40
 800abaa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abb0:	e841 2300 	strex	r3, r2, [r1]
 800abb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1e6      	bne.n	800ab8a <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abc6:	2b80      	cmp	r3, #128	; 0x80
 800abc8:	d137      	bne.n	800ac3a <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	3308      	adds	r3, #8
 800abd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd2:	6a3b      	ldr	r3, [r7, #32]
 800abd4:	e853 3f00 	ldrex	r3, [r3]
 800abd8:	61fb      	str	r3, [r7, #28]
   return(result);
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abe0:	673b      	str	r3, [r7, #112]	; 0x70
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3308      	adds	r3, #8
 800abe8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800abea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800abec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abf2:	e841 2300 	strex	r3, r2, [r1]
 800abf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1e5      	bne.n	800abca <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d019      	beq.n	800ac3a <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fb fa90 	bl	8006138 <HAL_DMA_Abort>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00d      	beq.n	800ac3a <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fb fbb6 	bl	8006394 <HAL_DMA_GetError>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b20      	cmp	r3, #32
 800ac2c:	d105      	bne.n	800ac3a <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2210      	movs	r2, #16
 800ac32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ac36:	2303      	movs	r3, #3
 800ac38:	e063      	b.n	800ad02 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac44:	2b40      	cmp	r3, #64	; 0x40
 800ac46:	d137      	bne.n	800acb8 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3308      	adds	r3, #8
 800ac4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	e853 3f00 	ldrex	r3, [r3]
 800ac56:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3308      	adds	r3, #8
 800ac66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ac68:	61ba      	str	r2, [r7, #24]
 800ac6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6c:	6979      	ldr	r1, [r7, #20]
 800ac6e:	69ba      	ldr	r2, [r7, #24]
 800ac70:	e841 2300 	strex	r3, r2, [r1]
 800ac74:	613b      	str	r3, [r7, #16]
   return(result);
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d1e5      	bne.n	800ac48 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d019      	beq.n	800acb8 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac88:	2200      	movs	r2, #0
 800ac8a:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7fb fa51 	bl	8006138 <HAL_DMA_Abort>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00d      	beq.n	800acb8 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7fb fb77 	bl	8006394 <HAL_DMA_GetError>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b20      	cmp	r3, #32
 800acaa:	d105      	bne.n	800acb8 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2210      	movs	r2, #16
 800acb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800acb4:	2303      	movs	r3, #3
 800acb6:	e024      	b.n	800ad02 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2200      	movs	r2, #0
 800acbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	220f      	movs	r2, #15
 800acce:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	8b1b      	ldrh	r3, [r3, #24]
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f042 0208 	orr.w	r2, r2, #8
 800ace0:	b292      	uxth	r2, r2
 800ace2:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2220      	movs	r2, #32
 800ace8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2220      	movs	r2, #32
 800acee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3780      	adds	r7, #128	; 0x80
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
	...

0800ad0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b0ba      	sub	sp, #232	; 0xe8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	69db      	ldr	r3, [r3, #28]
 800ad1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ad36:	f640 030f 	movw	r3, #2063	; 0x80f
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ad40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d115      	bne.n	800ad74 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ad48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad4c:	f003 0320 	and.w	r3, r3, #32
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00f      	beq.n	800ad74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ad54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad58:	f003 0320 	and.w	r3, r3, #32
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d009      	beq.n	800ad74 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f000 82ae 	beq.w	800b2c6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	4798      	blx	r3
      }
      return;
 800ad72:	e2a8      	b.n	800b2c6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ad74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 8117 	beq.w	800afac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ad7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad82:	f003 0301 	and.w	r3, r3, #1
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d106      	bne.n	800ad98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ad8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ad8e:	4b85      	ldr	r3, [pc, #532]	; (800afa4 <HAL_UART_IRQHandler+0x298>)
 800ad90:	4013      	ands	r3, r2
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f000 810a 	beq.w	800afac <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad9c:	f003 0301 	and.w	r3, r3, #1
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d011      	beq.n	800adc8 <HAL_UART_IRQHandler+0xbc>
 800ada4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ada8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00b      	beq.n	800adc8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2201      	movs	r2, #1
 800adb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adbe:	f043 0201 	orr.w	r2, r3, #1
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adcc:	f003 0302 	and.w	r3, r3, #2
 800add0:	2b00      	cmp	r3, #0
 800add2:	d011      	beq.n	800adf8 <HAL_UART_IRQHandler+0xec>
 800add4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800add8:	f003 0301 	and.w	r3, r3, #1
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00b      	beq.n	800adf8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2202      	movs	r2, #2
 800ade6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adee:	f043 0204 	orr.w	r2, r3, #4
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adfc:	f003 0304 	and.w	r3, r3, #4
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d011      	beq.n	800ae28 <HAL_UART_IRQHandler+0x11c>
 800ae04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00b      	beq.n	800ae28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2204      	movs	r2, #4
 800ae16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae1e:	f043 0202 	orr.w	r2, r3, #2
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae2c:	f003 0308 	and.w	r3, r3, #8
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d017      	beq.n	800ae64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ae34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae38:	f003 0320 	and.w	r3, r3, #32
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d105      	bne.n	800ae4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ae40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d00b      	beq.n	800ae64 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2208      	movs	r2, #8
 800ae52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae5a:	f043 0208 	orr.w	r2, r3, #8
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d012      	beq.n	800ae96 <HAL_UART_IRQHandler+0x18a>
 800ae70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00c      	beq.n	800ae96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae8c:	f043 0220 	orr.w	r2, r3, #32
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f000 8214 	beq.w	800b2ca <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800aea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aea6:	f003 0320 	and.w	r3, r3, #32
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00d      	beq.n	800aeca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aeae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeb2:	f003 0320 	and.w	r3, r3, #32
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d007      	beq.n	800aeca <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d003      	beq.n	800aeca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aed0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aede:	2b40      	cmp	r3, #64	; 0x40
 800aee0:	d005      	beq.n	800aeee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aee6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d04f      	beq.n	800af8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fec4 	bl	800bc7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aefe:	2b40      	cmp	r3, #64	; 0x40
 800af00:	d141      	bne.n	800af86 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	3308      	adds	r3, #8
 800af08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af10:	e853 3f00 	ldrex	r3, [r3]
 800af14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3308      	adds	r3, #8
 800af2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800af32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800af3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af3e:	e841 2300 	strex	r3, r2, [r1]
 800af42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1d9      	bne.n	800af02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af52:	2b00      	cmp	r3, #0
 800af54:	d013      	beq.n	800af7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af5a:	4a13      	ldr	r2, [pc, #76]	; (800afa8 <HAL_UART_IRQHandler+0x29c>)
 800af5c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af62:	4618      	mov	r0, r3
 800af64:	f7fb f926 	bl	80061b4 <HAL_DMA_Abort_IT>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d017      	beq.n	800af9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800af78:	4610      	mov	r0, r2
 800af7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af7c:	e00f      	b.n	800af9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f9c2 	bl	800b308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af84:	e00b      	b.n	800af9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f9be 	bl	800b308 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af8c:	e007      	b.n	800af9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f9ba 	bl	800b308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800af9c:	e195      	b.n	800b2ca <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af9e:	bf00      	nop
    return;
 800afa0:	e193      	b.n	800b2ca <HAL_UART_IRQHandler+0x5be>
 800afa2:	bf00      	nop
 800afa4:	04000120 	.word	0x04000120
 800afa8:	0800bf2d 	.word	0x0800bf2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	f040 814e 	bne.w	800b252 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800afb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afba:	f003 0310 	and.w	r3, r3, #16
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f000 8147 	beq.w	800b252 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800afc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afc8:	f003 0310 	and.w	r3, r3, #16
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 8140 	beq.w	800b252 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2210      	movs	r2, #16
 800afd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe4:	2b40      	cmp	r3, #64	; 0x40
 800afe6:	f040 80b8 	bne.w	800b15a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aff6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800affa:	2b00      	cmp	r3, #0
 800affc:	f000 8167 	beq.w	800b2ce <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b00a:	429a      	cmp	r2, r3
 800b00c:	f080 815f 	bcs.w	800b2ce <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b016:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f003 0320 	and.w	r3, r3, #32
 800b026:	2b00      	cmp	r3, #0
 800b028:	f040 8086 	bne.w	800b138 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b034:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b038:	e853 3f00 	ldrex	r3, [r3]
 800b03c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b040:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b044:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b048:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	461a      	mov	r2, r3
 800b052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b056:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b05a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b062:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b066:	e841 2300 	strex	r3, r2, [r1]
 800b06a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b06e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b072:	2b00      	cmp	r3, #0
 800b074:	d1da      	bne.n	800b02c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	3308      	adds	r3, #8
 800b07c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b080:	e853 3f00 	ldrex	r3, [r3]
 800b084:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b086:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b088:	f023 0301 	bic.w	r3, r3, #1
 800b08c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3308      	adds	r3, #8
 800b096:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b09a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b09e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b0a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0a6:	e841 2300 	strex	r3, r2, [r1]
 800b0aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b0ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1e1      	bne.n	800b076 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	3308      	adds	r3, #8
 800b0b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0bc:	e853 3f00 	ldrex	r3, [r3]
 800b0c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b0c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	3308      	adds	r3, #8
 800b0d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b0d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b0d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b0dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b0de:	e841 2300 	strex	r3, r2, [r1]
 800b0e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b0e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d1e3      	bne.n	800b0b2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2220      	movs	r2, #32
 800b0ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b100:	e853 3f00 	ldrex	r3, [r3]
 800b104:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b108:	f023 0310 	bic.w	r3, r3, #16
 800b10c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	461a      	mov	r2, r3
 800b116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b11a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b11c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b120:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b122:	e841 2300 	strex	r3, r2, [r1]
 800b126:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b128:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1e4      	bne.n	800b0f8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b132:	4618      	mov	r0, r3
 800b134:	f7fb f800 	bl	8006138 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2202      	movs	r2, #2
 800b13c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	b29b      	uxth	r3, r3
 800b150:	4619      	mov	r1, r3
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f8e2 	bl	800b31c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b158:	e0b9      	b.n	800b2ce <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b166:	b29b      	uxth	r3, r3
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b174:	b29b      	uxth	r3, r3
 800b176:	2b00      	cmp	r3, #0
 800b178:	f000 80ab 	beq.w	800b2d2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800b17c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b180:	2b00      	cmp	r3, #0
 800b182:	f000 80a6 	beq.w	800b2d2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18e:	e853 3f00 	ldrex	r3, [r3]
 800b192:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b196:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b19a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1a8:	647b      	str	r3, [r7, #68]	; 0x44
 800b1aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b1ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1b0:	e841 2300 	strex	r3, r2, [r1]
 800b1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1e4      	bne.n	800b186 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3308      	adds	r3, #8
 800b1c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c6:	e853 3f00 	ldrex	r3, [r3]
 800b1ca:	623b      	str	r3, [r7, #32]
   return(result);
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	f023 0301 	bic.w	r3, r3, #1
 800b1d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3308      	adds	r3, #8
 800b1dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b1e0:	633a      	str	r2, [r7, #48]	; 0x30
 800b1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1e8:	e841 2300 	strex	r3, r2, [r1]
 800b1ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b1ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1e3      	bne.n	800b1bc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2220      	movs	r2, #32
 800b1f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	e853 3f00 	ldrex	r3, [r3]
 800b214:	60fb      	str	r3, [r7, #12]
   return(result);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f023 0310 	bic.w	r3, r3, #16
 800b21c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	461a      	mov	r2, r3
 800b226:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b22a:	61fb      	str	r3, [r7, #28]
 800b22c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22e:	69b9      	ldr	r1, [r7, #24]
 800b230:	69fa      	ldr	r2, [r7, #28]
 800b232:	e841 2300 	strex	r3, r2, [r1]
 800b236:	617b      	str	r3, [r7, #20]
   return(result);
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1e4      	bne.n	800b208 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2202      	movs	r2, #2
 800b242:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b244:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b248:	4619      	mov	r1, r3
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f866 	bl	800b31c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b250:	e03f      	b.n	800b2d2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00e      	beq.n	800b27c <HAL_UART_IRQHandler+0x570>
 800b25e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b266:	2b00      	cmp	r3, #0
 800b268:	d008      	beq.n	800b27c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b272:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 ff55 	bl	800c124 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b27a:	e02d      	b.n	800b2d8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b27c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b284:	2b00      	cmp	r3, #0
 800b286:	d00e      	beq.n	800b2a6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b28c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b290:	2b00      	cmp	r3, #0
 800b292:	d008      	beq.n	800b2a6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d01c      	beq.n	800b2d6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	4798      	blx	r3
    }
    return;
 800b2a4:	e017      	b.n	800b2d6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b2a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d012      	beq.n	800b2d8 <HAL_UART_IRQHandler+0x5cc>
 800b2b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00c      	beq.n	800b2d8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 ff06 	bl	800c0d0 <UART_EndTransmit_IT>
    return;
 800b2c4:	e008      	b.n	800b2d8 <HAL_UART_IRQHandler+0x5cc>
      return;
 800b2c6:	bf00      	nop
 800b2c8:	e006      	b.n	800b2d8 <HAL_UART_IRQHandler+0x5cc>
    return;
 800b2ca:	bf00      	nop
 800b2cc:	e004      	b.n	800b2d8 <HAL_UART_IRQHandler+0x5cc>
      return;
 800b2ce:	bf00      	nop
 800b2d0:	e002      	b.n	800b2d8 <HAL_UART_IRQHandler+0x5cc>
      return;
 800b2d2:	bf00      	nop
 800b2d4:	e000      	b.n	800b2d8 <HAL_UART_IRQHandler+0x5cc>
    return;
 800b2d6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b2d8:	37e8      	adds	r7, #232	; 0xe8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop

0800b2e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b2e8:	bf00      	nop
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b2fc:	bf00      	nop
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b310:	bf00      	nop
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	460b      	mov	r3, r1
 800b326:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b338:	b08a      	sub	sp, #40	; 0x28
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b33e:	2300      	movs	r3, #0
 800b340:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	689a      	ldr	r2, [r3, #8]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	691b      	ldr	r3, [r3, #16]
 800b34c:	431a      	orrs	r2, r3
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	695b      	ldr	r3, [r3, #20]
 800b352:	431a      	orrs	r2, r3
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	69db      	ldr	r3, [r3, #28]
 800b358:	4313      	orrs	r3, r2
 800b35a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	4bb4      	ldr	r3, [pc, #720]	; (800b634 <UART_SetConfig+0x300>)
 800b364:	4013      	ands	r3, r2
 800b366:	68fa      	ldr	r2, [r7, #12]
 800b368:	6812      	ldr	r2, [r2, #0]
 800b36a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b36c:	430b      	orrs	r3, r1
 800b36e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	68da      	ldr	r2, [r3, #12]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	430a      	orrs	r2, r1
 800b384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	699b      	ldr	r3, [r3, #24]
 800b38a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4aa9      	ldr	r2, [pc, #676]	; (800b638 <UART_SetConfig+0x304>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d004      	beq.n	800b3a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6a1b      	ldr	r3, [r3, #32]
 800b39a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b39c:	4313      	orrs	r3, r2
 800b39e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3b0:	430a      	orrs	r2, r1
 800b3b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4aa0      	ldr	r2, [pc, #640]	; (800b63c <UART_SetConfig+0x308>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d126      	bne.n	800b40c <UART_SetConfig+0xd8>
 800b3be:	4ba0      	ldr	r3, [pc, #640]	; (800b640 <UART_SetConfig+0x30c>)
 800b3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3c4:	f003 0303 	and.w	r3, r3, #3
 800b3c8:	2b03      	cmp	r3, #3
 800b3ca:	d81b      	bhi.n	800b404 <UART_SetConfig+0xd0>
 800b3cc:	a201      	add	r2, pc, #4	; (adr r2, 800b3d4 <UART_SetConfig+0xa0>)
 800b3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d2:	bf00      	nop
 800b3d4:	0800b3e5 	.word	0x0800b3e5
 800b3d8:	0800b3f5 	.word	0x0800b3f5
 800b3dc:	0800b3ed 	.word	0x0800b3ed
 800b3e0:	0800b3fd 	.word	0x0800b3fd
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b3ea:	e080      	b.n	800b4ee <UART_SetConfig+0x1ba>
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b3f2:	e07c      	b.n	800b4ee <UART_SetConfig+0x1ba>
 800b3f4:	2304      	movs	r3, #4
 800b3f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b3fa:	e078      	b.n	800b4ee <UART_SetConfig+0x1ba>
 800b3fc:	2308      	movs	r3, #8
 800b3fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b402:	e074      	b.n	800b4ee <UART_SetConfig+0x1ba>
 800b404:	2310      	movs	r3, #16
 800b406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b40a:	e070      	b.n	800b4ee <UART_SetConfig+0x1ba>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a8c      	ldr	r2, [pc, #560]	; (800b644 <UART_SetConfig+0x310>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d138      	bne.n	800b488 <UART_SetConfig+0x154>
 800b416:	4b8a      	ldr	r3, [pc, #552]	; (800b640 <UART_SetConfig+0x30c>)
 800b418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b41c:	f003 030c 	and.w	r3, r3, #12
 800b420:	2b0c      	cmp	r3, #12
 800b422:	d82d      	bhi.n	800b480 <UART_SetConfig+0x14c>
 800b424:	a201      	add	r2, pc, #4	; (adr r2, 800b42c <UART_SetConfig+0xf8>)
 800b426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b42a:	bf00      	nop
 800b42c:	0800b461 	.word	0x0800b461
 800b430:	0800b481 	.word	0x0800b481
 800b434:	0800b481 	.word	0x0800b481
 800b438:	0800b481 	.word	0x0800b481
 800b43c:	0800b471 	.word	0x0800b471
 800b440:	0800b481 	.word	0x0800b481
 800b444:	0800b481 	.word	0x0800b481
 800b448:	0800b481 	.word	0x0800b481
 800b44c:	0800b469 	.word	0x0800b469
 800b450:	0800b481 	.word	0x0800b481
 800b454:	0800b481 	.word	0x0800b481
 800b458:	0800b481 	.word	0x0800b481
 800b45c:	0800b479 	.word	0x0800b479
 800b460:	2300      	movs	r3, #0
 800b462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b466:	e042      	b.n	800b4ee <UART_SetConfig+0x1ba>
 800b468:	2302      	movs	r3, #2
 800b46a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b46e:	e03e      	b.n	800b4ee <UART_SetConfig+0x1ba>
 800b470:	2304      	movs	r3, #4
 800b472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b476:	e03a      	b.n	800b4ee <UART_SetConfig+0x1ba>
 800b478:	2308      	movs	r3, #8
 800b47a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b47e:	e036      	b.n	800b4ee <UART_SetConfig+0x1ba>
 800b480:	2310      	movs	r3, #16
 800b482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b486:	e032      	b.n	800b4ee <UART_SetConfig+0x1ba>
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a6a      	ldr	r2, [pc, #424]	; (800b638 <UART_SetConfig+0x304>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d12a      	bne.n	800b4e8 <UART_SetConfig+0x1b4>
 800b492:	4b6b      	ldr	r3, [pc, #428]	; (800b640 <UART_SetConfig+0x30c>)
 800b494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b498:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b49c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4a0:	d01a      	beq.n	800b4d8 <UART_SetConfig+0x1a4>
 800b4a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b4a6:	d81b      	bhi.n	800b4e0 <UART_SetConfig+0x1ac>
 800b4a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4ac:	d00c      	beq.n	800b4c8 <UART_SetConfig+0x194>
 800b4ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4b2:	d815      	bhi.n	800b4e0 <UART_SetConfig+0x1ac>
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d003      	beq.n	800b4c0 <UART_SetConfig+0x18c>
 800b4b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4bc:	d008      	beq.n	800b4d0 <UART_SetConfig+0x19c>
 800b4be:	e00f      	b.n	800b4e0 <UART_SetConfig+0x1ac>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4c6:	e012      	b.n	800b4ee <UART_SetConfig+0x1ba>
 800b4c8:	2302      	movs	r3, #2
 800b4ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4ce:	e00e      	b.n	800b4ee <UART_SetConfig+0x1ba>
 800b4d0:	2304      	movs	r3, #4
 800b4d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4d6:	e00a      	b.n	800b4ee <UART_SetConfig+0x1ba>
 800b4d8:	2308      	movs	r3, #8
 800b4da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4de:	e006      	b.n	800b4ee <UART_SetConfig+0x1ba>
 800b4e0:	2310      	movs	r3, #16
 800b4e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4e6:	e002      	b.n	800b4ee <UART_SetConfig+0x1ba>
 800b4e8:	2310      	movs	r3, #16
 800b4ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a51      	ldr	r2, [pc, #324]	; (800b638 <UART_SetConfig+0x304>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d17a      	bne.n	800b5ee <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b4f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4fc:	2b08      	cmp	r3, #8
 800b4fe:	d824      	bhi.n	800b54a <UART_SetConfig+0x216>
 800b500:	a201      	add	r2, pc, #4	; (adr r2, 800b508 <UART_SetConfig+0x1d4>)
 800b502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b506:	bf00      	nop
 800b508:	0800b52d 	.word	0x0800b52d
 800b50c:	0800b54b 	.word	0x0800b54b
 800b510:	0800b535 	.word	0x0800b535
 800b514:	0800b54b 	.word	0x0800b54b
 800b518:	0800b53b 	.word	0x0800b53b
 800b51c:	0800b54b 	.word	0x0800b54b
 800b520:	0800b54b 	.word	0x0800b54b
 800b524:	0800b54b 	.word	0x0800b54b
 800b528:	0800b543 	.word	0x0800b543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b52c:	f7fe fa24 	bl	8009978 <HAL_RCC_GetPCLK1Freq>
 800b530:	61f8      	str	r0, [r7, #28]
        break;
 800b532:	e010      	b.n	800b556 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b534:	4b44      	ldr	r3, [pc, #272]	; (800b648 <UART_SetConfig+0x314>)
 800b536:	61fb      	str	r3, [r7, #28]
        break;
 800b538:	e00d      	b.n	800b556 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b53a:	f7fe f985 	bl	8009848 <HAL_RCC_GetSysClockFreq>
 800b53e:	61f8      	str	r0, [r7, #28]
        break;
 800b540:	e009      	b.n	800b556 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b546:	61fb      	str	r3, [r7, #28]
        break;
 800b548:	e005      	b.n	800b556 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800b54a:	2300      	movs	r3, #0
 800b54c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b554:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f000 8107 	beq.w	800b76c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	685a      	ldr	r2, [r3, #4]
 800b562:	4613      	mov	r3, r2
 800b564:	005b      	lsls	r3, r3, #1
 800b566:	4413      	add	r3, r2
 800b568:	69fa      	ldr	r2, [r7, #28]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d305      	bcc.n	800b57a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b574:	69fa      	ldr	r2, [r7, #28]
 800b576:	429a      	cmp	r2, r3
 800b578:	d903      	bls.n	800b582 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b580:	e0f4      	b.n	800b76c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	2200      	movs	r2, #0
 800b586:	461c      	mov	r4, r3
 800b588:	4615      	mov	r5, r2
 800b58a:	f04f 0200 	mov.w	r2, #0
 800b58e:	f04f 0300 	mov.w	r3, #0
 800b592:	022b      	lsls	r3, r5, #8
 800b594:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b598:	0222      	lsls	r2, r4, #8
 800b59a:	68f9      	ldr	r1, [r7, #12]
 800b59c:	6849      	ldr	r1, [r1, #4]
 800b59e:	0849      	lsrs	r1, r1, #1
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	4688      	mov	r8, r1
 800b5a4:	4681      	mov	r9, r0
 800b5a6:	eb12 0a08 	adds.w	sl, r2, r8
 800b5aa:	eb43 0b09 	adc.w	fp, r3, r9
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	603b      	str	r3, [r7, #0]
 800b5b6:	607a      	str	r2, [r7, #4]
 800b5b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5bc:	4650      	mov	r0, sl
 800b5be:	4659      	mov	r1, fp
 800b5c0:	f7f5 fb62 	bl	8000c88 <__aeabi_uldivmod>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5d2:	d308      	bcc.n	800b5e6 <UART_SetConfig+0x2b2>
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5da:	d204      	bcs.n	800b5e6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	69ba      	ldr	r2, [r7, #24]
 800b5e2:	60da      	str	r2, [r3, #12]
 800b5e4:	e0c2      	b.n	800b76c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b5ec:	e0be      	b.n	800b76c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	69db      	ldr	r3, [r3, #28]
 800b5f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5f6:	d16a      	bne.n	800b6ce <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800b5f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5fc:	2b08      	cmp	r3, #8
 800b5fe:	d834      	bhi.n	800b66a <UART_SetConfig+0x336>
 800b600:	a201      	add	r2, pc, #4	; (adr r2, 800b608 <UART_SetConfig+0x2d4>)
 800b602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b606:	bf00      	nop
 800b608:	0800b62d 	.word	0x0800b62d
 800b60c:	0800b64d 	.word	0x0800b64d
 800b610:	0800b655 	.word	0x0800b655
 800b614:	0800b66b 	.word	0x0800b66b
 800b618:	0800b65b 	.word	0x0800b65b
 800b61c:	0800b66b 	.word	0x0800b66b
 800b620:	0800b66b 	.word	0x0800b66b
 800b624:	0800b66b 	.word	0x0800b66b
 800b628:	0800b663 	.word	0x0800b663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b62c:	f7fe f9a4 	bl	8009978 <HAL_RCC_GetPCLK1Freq>
 800b630:	61f8      	str	r0, [r7, #28]
        break;
 800b632:	e020      	b.n	800b676 <UART_SetConfig+0x342>
 800b634:	efff69f3 	.word	0xefff69f3
 800b638:	40008000 	.word	0x40008000
 800b63c:	40013800 	.word	0x40013800
 800b640:	40021000 	.word	0x40021000
 800b644:	40004400 	.word	0x40004400
 800b648:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b64c:	f7fe f9aa 	bl	80099a4 <HAL_RCC_GetPCLK2Freq>
 800b650:	61f8      	str	r0, [r7, #28]
        break;
 800b652:	e010      	b.n	800b676 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b654:	4b4c      	ldr	r3, [pc, #304]	; (800b788 <UART_SetConfig+0x454>)
 800b656:	61fb      	str	r3, [r7, #28]
        break;
 800b658:	e00d      	b.n	800b676 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b65a:	f7fe f8f5 	bl	8009848 <HAL_RCC_GetSysClockFreq>
 800b65e:	61f8      	str	r0, [r7, #28]
        break;
 800b660:	e009      	b.n	800b676 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b666:	61fb      	str	r3, [r7, #28]
        break;
 800b668:	e005      	b.n	800b676 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800b66a:	2300      	movs	r3, #0
 800b66c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b674:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d077      	beq.n	800b76c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	005a      	lsls	r2, r3, #1
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	085b      	lsrs	r3, r3, #1
 800b686:	441a      	add	r2, r3
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b690:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	2b0f      	cmp	r3, #15
 800b696:	d916      	bls.n	800b6c6 <UART_SetConfig+0x392>
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b69e:	d212      	bcs.n	800b6c6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	f023 030f 	bic.w	r3, r3, #15
 800b6a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	085b      	lsrs	r3, r3, #1
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	f003 0307 	and.w	r3, r3, #7
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	8afb      	ldrh	r3, [r7, #22]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	8afa      	ldrh	r2, [r7, #22]
 800b6c2:	60da      	str	r2, [r3, #12]
 800b6c4:	e052      	b.n	800b76c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b6cc:	e04e      	b.n	800b76c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b6ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6d2:	2b08      	cmp	r3, #8
 800b6d4:	d827      	bhi.n	800b726 <UART_SetConfig+0x3f2>
 800b6d6:	a201      	add	r2, pc, #4	; (adr r2, 800b6dc <UART_SetConfig+0x3a8>)
 800b6d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6dc:	0800b701 	.word	0x0800b701
 800b6e0:	0800b709 	.word	0x0800b709
 800b6e4:	0800b711 	.word	0x0800b711
 800b6e8:	0800b727 	.word	0x0800b727
 800b6ec:	0800b717 	.word	0x0800b717
 800b6f0:	0800b727 	.word	0x0800b727
 800b6f4:	0800b727 	.word	0x0800b727
 800b6f8:	0800b727 	.word	0x0800b727
 800b6fc:	0800b71f 	.word	0x0800b71f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b700:	f7fe f93a 	bl	8009978 <HAL_RCC_GetPCLK1Freq>
 800b704:	61f8      	str	r0, [r7, #28]
        break;
 800b706:	e014      	b.n	800b732 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b708:	f7fe f94c 	bl	80099a4 <HAL_RCC_GetPCLK2Freq>
 800b70c:	61f8      	str	r0, [r7, #28]
        break;
 800b70e:	e010      	b.n	800b732 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b710:	4b1d      	ldr	r3, [pc, #116]	; (800b788 <UART_SetConfig+0x454>)
 800b712:	61fb      	str	r3, [r7, #28]
        break;
 800b714:	e00d      	b.n	800b732 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b716:	f7fe f897 	bl	8009848 <HAL_RCC_GetSysClockFreq>
 800b71a:	61f8      	str	r0, [r7, #28]
        break;
 800b71c:	e009      	b.n	800b732 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b71e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b722:	61fb      	str	r3, [r7, #28]
        break;
 800b724:	e005      	b.n	800b732 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800b726:	2300      	movs	r3, #0
 800b728:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b730:	bf00      	nop
    }

    if (pclk != 0U)
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d019      	beq.n	800b76c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	085a      	lsrs	r2, r3, #1
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	441a      	add	r2, r3
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	fbb2 f3f3 	udiv	r3, r2, r3
 800b74a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	2b0f      	cmp	r3, #15
 800b750:	d909      	bls.n	800b766 <UART_SetConfig+0x432>
 800b752:	69bb      	ldr	r3, [r7, #24]
 800b754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b758:	d205      	bcs.n	800b766 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	b29a      	uxth	r2, r3
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	60da      	str	r2, [r3, #12]
 800b764:	e002      	b.n	800b76c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2200      	movs	r2, #0
 800b770:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b778:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3728      	adds	r7, #40	; 0x28
 800b780:	46bd      	mov	sp, r7
 800b782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b786:	bf00      	nop
 800b788:	00f42400 	.word	0x00f42400

0800b78c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b798:	f003 0308 	and.w	r3, r3, #8
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00a      	beq.n	800b7b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	430a      	orrs	r2, r1
 800b7b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ba:	f003 0301 	and.w	r3, r3, #1
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00a      	beq.n	800b7d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	430a      	orrs	r2, r1
 800b7d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7dc:	f003 0302 	and.w	r3, r3, #2
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00a      	beq.n	800b7fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	430a      	orrs	r2, r1
 800b7f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fe:	f003 0304 	and.w	r3, r3, #4
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00a      	beq.n	800b81c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	430a      	orrs	r2, r1
 800b81a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b820:	f003 0310 	and.w	r3, r3, #16
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00a      	beq.n	800b83e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	430a      	orrs	r2, r1
 800b83c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b842:	f003 0320 	and.w	r3, r3, #32
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	430a      	orrs	r2, r1
 800b85e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d01a      	beq.n	800b8a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	430a      	orrs	r2, r1
 800b880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b88a:	d10a      	bne.n	800b8a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	430a      	orrs	r2, r1
 800b8a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00a      	beq.n	800b8c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	430a      	orrs	r2, r1
 800b8c2:	605a      	str	r2, [r3, #4]
  }
}
 800b8c4:	bf00      	nop
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b098      	sub	sp, #96	; 0x60
 800b8d4:	af02      	add	r7, sp, #8
 800b8d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b8e0:	f7f8 fe6c 	bl	80045bc <HAL_GetTick>
 800b8e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f003 0308 	and.w	r3, r3, #8
 800b8f0:	2b08      	cmp	r3, #8
 800b8f2:	d12e      	bne.n	800b952 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f88c 	bl	800ba20 <UART_WaitOnFlagUntilTimeout>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d021      	beq.n	800b952 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b916:	e853 3f00 	ldrex	r3, [r3]
 800b91a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b91e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b922:	653b      	str	r3, [r7, #80]	; 0x50
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	461a      	mov	r2, r3
 800b92a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b92c:	647b      	str	r3, [r7, #68]	; 0x44
 800b92e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b930:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b934:	e841 2300 	strex	r3, r2, [r1]
 800b938:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d1e6      	bne.n	800b90e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2220      	movs	r2, #32
 800b944:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b94e:	2303      	movs	r3, #3
 800b950:	e062      	b.n	800ba18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f003 0304 	and.w	r3, r3, #4
 800b95c:	2b04      	cmp	r3, #4
 800b95e:	d149      	bne.n	800b9f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b960:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b964:	9300      	str	r3, [sp, #0]
 800b966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b968:	2200      	movs	r2, #0
 800b96a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 f856 	bl	800ba20 <UART_WaitOnFlagUntilTimeout>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d03c      	beq.n	800b9f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b982:	e853 3f00 	ldrex	r3, [r3]
 800b986:	623b      	str	r3, [r7, #32]
   return(result);
 800b988:	6a3b      	ldr	r3, [r7, #32]
 800b98a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b98e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	461a      	mov	r2, r3
 800b996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b998:	633b      	str	r3, [r7, #48]	; 0x30
 800b99a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b99c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b99e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9a0:	e841 2300 	strex	r3, r2, [r1]
 800b9a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1e6      	bne.n	800b97a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3308      	adds	r3, #8
 800b9b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	e853 3f00 	ldrex	r3, [r3]
 800b9ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f023 0301 	bic.w	r3, r3, #1
 800b9c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	3308      	adds	r3, #8
 800b9ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9cc:	61fa      	str	r2, [r7, #28]
 800b9ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d0:	69b9      	ldr	r1, [r7, #24]
 800b9d2:	69fa      	ldr	r2, [r7, #28]
 800b9d4:	e841 2300 	strex	r3, r2, [r1]
 800b9d8:	617b      	str	r3, [r7, #20]
   return(result);
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d1e5      	bne.n	800b9ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2220      	movs	r2, #32
 800b9e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	e011      	b.n	800ba18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2220      	movs	r2, #32
 800b9f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2220      	movs	r2, #32
 800b9fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3758      	adds	r7, #88	; 0x58
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	603b      	str	r3, [r7, #0]
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba30:	e049      	b.n	800bac6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba38:	d045      	beq.n	800bac6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba3a:	f7f8 fdbf 	bl	80045bc <HAL_GetTick>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	1ad3      	subs	r3, r2, r3
 800ba44:	69ba      	ldr	r2, [r7, #24]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d302      	bcc.n	800ba50 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d101      	bne.n	800ba54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ba50:	2303      	movs	r3, #3
 800ba52:	e048      	b.n	800bae6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f003 0304 	and.w	r3, r3, #4
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d031      	beq.n	800bac6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	69db      	ldr	r3, [r3, #28]
 800ba68:	f003 0308 	and.w	r3, r3, #8
 800ba6c:	2b08      	cmp	r3, #8
 800ba6e:	d110      	bne.n	800ba92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2208      	movs	r2, #8
 800ba76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f000 f8ff 	bl	800bc7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2208      	movs	r2, #8
 800ba82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e029      	b.n	800bae6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	69db      	ldr	r3, [r3, #28]
 800ba98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800baa0:	d111      	bne.n	800bac6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800baaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800baac:	68f8      	ldr	r0, [r7, #12]
 800baae:	f000 f8e5 	bl	800bc7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2220      	movs	r2, #32
 800bab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2200      	movs	r2, #0
 800babe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e00f      	b.n	800bae6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	69da      	ldr	r2, [r3, #28]
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	4013      	ands	r3, r2
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	bf0c      	ite	eq
 800bad6:	2301      	moveq	r3, #1
 800bad8:	2300      	movne	r3, #0
 800bada:	b2db      	uxtb	r3, r3
 800badc:	461a      	mov	r2, r3
 800bade:	79fb      	ldrb	r3, [r7, #7]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d0a6      	beq.n	800ba32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
	...

0800baf0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b096      	sub	sp, #88	; 0x58
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	4613      	mov	r3, r2
 800bafc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	68ba      	ldr	r2, [r7, #8]
 800bb02:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	88fa      	ldrh	r2, [r7, #6]
 800bb08:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2222      	movs	r2, #34	; 0x22
 800bb18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d028      	beq.n	800bb76 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb28:	4a3e      	ldr	r2, [pc, #248]	; (800bc24 <UART_Start_Receive_DMA+0x134>)
 800bb2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb30:	4a3d      	ldr	r2, [pc, #244]	; (800bc28 <UART_Start_Receive_DMA+0x138>)
 800bb32:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb38:	4a3c      	ldr	r2, [pc, #240]	; (800bc2c <UART_Start_Receive_DMA+0x13c>)
 800bb3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb40:	2200      	movs	r2, #0
 800bb42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	3324      	adds	r3, #36	; 0x24
 800bb4e:	4619      	mov	r1, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb54:	461a      	mov	r2, r3
 800bb56:	88fb      	ldrh	r3, [r7, #6]
 800bb58:	f7fa fa8e 	bl	8006078 <HAL_DMA_Start_IT>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d009      	beq.n	800bb76 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2210      	movs	r2, #16
 800bb66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2220      	movs	r2, #32
 800bb6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	e051      	b.n	800bc1a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d018      	beq.n	800bbb0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb86:	e853 3f00 	ldrex	r3, [r3]
 800bb8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb92:	657b      	str	r3, [r7, #84]	; 0x54
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	461a      	mov	r2, r3
 800bb9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb9e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bba4:	e841 2300 	strex	r3, r2, [r1]
 800bba8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bbaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d1e6      	bne.n	800bb7e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	3308      	adds	r3, #8
 800bbb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbba:	e853 3f00 	ldrex	r3, [r3]
 800bbbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc2:	f043 0301 	orr.w	r3, r3, #1
 800bbc6:	653b      	str	r3, [r7, #80]	; 0x50
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	3308      	adds	r3, #8
 800bbce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbd0:	637a      	str	r2, [r7, #52]	; 0x34
 800bbd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bbd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbd8:	e841 2300 	strex	r3, r2, [r1]
 800bbdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1e5      	bne.n	800bbb0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	3308      	adds	r3, #8
 800bbea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	e853 3f00 	ldrex	r3, [r3]
 800bbf2:	613b      	str	r3, [r7, #16]
   return(result);
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	3308      	adds	r3, #8
 800bc02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc04:	623a      	str	r2, [r7, #32]
 800bc06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc08:	69f9      	ldr	r1, [r7, #28]
 800bc0a:	6a3a      	ldr	r2, [r7, #32]
 800bc0c:	e841 2300 	strex	r3, r2, [r1]
 800bc10:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d1e5      	bne.n	800bbe4 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3758      	adds	r7, #88	; 0x58
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	0800bd45 	.word	0x0800bd45
 800bc28:	0800be71 	.word	0x0800be71
 800bc2c:	0800beaf 	.word	0x0800beaf

0800bc30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b089      	sub	sp, #36	; 0x24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	e853 3f00 	ldrex	r3, [r3]
 800bc44:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bc4c:	61fb      	str	r3, [r7, #28]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	461a      	mov	r2, r3
 800bc54:	69fb      	ldr	r3, [r7, #28]
 800bc56:	61bb      	str	r3, [r7, #24]
 800bc58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5a:	6979      	ldr	r1, [r7, #20]
 800bc5c:	69ba      	ldr	r2, [r7, #24]
 800bc5e:	e841 2300 	strex	r3, r2, [r1]
 800bc62:	613b      	str	r3, [r7, #16]
   return(result);
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d1e6      	bne.n	800bc38 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2220      	movs	r2, #32
 800bc6e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800bc70:	bf00      	nop
 800bc72:	3724      	adds	r7, #36	; 0x24
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b095      	sub	sp, #84	; 0x54
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8c:	e853 3f00 	ldrex	r3, [r3]
 800bc90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bca2:	643b      	str	r3, [r7, #64]	; 0x40
 800bca4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bca8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bcaa:	e841 2300 	strex	r3, r2, [r1]
 800bcae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d1e6      	bne.n	800bc84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	3308      	adds	r3, #8
 800bcbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcbe:	6a3b      	ldr	r3, [r7, #32]
 800bcc0:	e853 3f00 	ldrex	r3, [r3]
 800bcc4:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	f023 0301 	bic.w	r3, r3, #1
 800bccc:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	3308      	adds	r3, #8
 800bcd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bcd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcde:	e841 2300 	strex	r3, r2, [r1]
 800bce2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1e5      	bne.n	800bcb6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d118      	bne.n	800bd24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	e853 3f00 	ldrex	r3, [r3]
 800bcfe:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	f023 0310 	bic.w	r3, r3, #16
 800bd06:	647b      	str	r3, [r7, #68]	; 0x44
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd10:	61bb      	str	r3, [r7, #24]
 800bd12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd14:	6979      	ldr	r1, [r7, #20]
 800bd16:	69ba      	ldr	r2, [r7, #24]
 800bd18:	e841 2300 	strex	r3, r2, [r1]
 800bd1c:	613b      	str	r3, [r7, #16]
   return(result);
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1e6      	bne.n	800bcf2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2220      	movs	r2, #32
 800bd28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	669a      	str	r2, [r3, #104]	; 0x68
}
 800bd38:	bf00      	nop
 800bd3a:	3754      	adds	r7, #84	; 0x54
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b09c      	sub	sp, #112	; 0x70
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd50:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 0320 	and.w	r3, r3, #32
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d171      	bne.n	800be44 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800bd60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd62:	2200      	movs	r2, #0
 800bd64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd70:	e853 3f00 	ldrex	r3, [r3]
 800bd74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bd76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd7c:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	461a      	mov	r2, r3
 800bd84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bd86:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd88:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bd8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bd8e:	e841 2300 	strex	r3, r2, [r1]
 800bd92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bd94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1e6      	bne.n	800bd68 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	3308      	adds	r3, #8
 800bda0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda4:	e853 3f00 	ldrex	r3, [r3]
 800bda8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bdaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdac:	f023 0301 	bic.w	r3, r3, #1
 800bdb0:	667b      	str	r3, [r7, #100]	; 0x64
 800bdb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	3308      	adds	r3, #8
 800bdb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdba:	647a      	str	r2, [r7, #68]	; 0x44
 800bdbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bdc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdc2:	e841 2300 	strex	r3, r2, [r1]
 800bdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bdc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d1e5      	bne.n	800bd9a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	3308      	adds	r3, #8
 800bdd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd8:	e853 3f00 	ldrex	r3, [r3]
 800bddc:	623b      	str	r3, [r7, #32]
   return(result);
 800bdde:	6a3b      	ldr	r3, [r7, #32]
 800bde0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bde4:	663b      	str	r3, [r7, #96]	; 0x60
 800bde6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	3308      	adds	r3, #8
 800bdec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bdee:	633a      	str	r2, [r7, #48]	; 0x30
 800bdf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bdf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdf6:	e841 2300 	strex	r3, r2, [r1]
 800bdfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d1e5      	bne.n	800bdce <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800be02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be04:	2220      	movs	r2, #32
 800be06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d118      	bne.n	800be44 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	e853 3f00 	ldrex	r3, [r3]
 800be1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f023 0310 	bic.w	r3, r3, #16
 800be26:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	461a      	mov	r2, r3
 800be2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be30:	61fb      	str	r3, [r7, #28]
 800be32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be34:	69b9      	ldr	r1, [r7, #24]
 800be36:	69fa      	ldr	r2, [r7, #28]
 800be38:	e841 2300 	strex	r3, r2, [r1]
 800be3c:	617b      	str	r3, [r7, #20]
   return(result);
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d1e6      	bne.n	800be12 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be46:	2200      	movs	r2, #0
 800be48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d107      	bne.n	800be62 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800be58:	4619      	mov	r1, r3
 800be5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800be5c:	f7ff fa5e 	bl	800b31c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be60:	e002      	b.n	800be68 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800be62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800be64:	f7f5 f8e6 	bl	8001034 <HAL_UART_RxCpltCallback>
}
 800be68:	bf00      	nop
 800be6a:	3770      	adds	r7, #112	; 0x70
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be7c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2201      	movs	r2, #1
 800be82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d109      	bne.n	800bea0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800be92:	085b      	lsrs	r3, r3, #1
 800be94:	b29b      	uxth	r3, r3
 800be96:	4619      	mov	r1, r3
 800be98:	68f8      	ldr	r0, [r7, #12]
 800be9a:	f7ff fa3f 	bl	800b31c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be9e:	e002      	b.n	800bea6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f7ff fa27 	bl	800b2f4 <HAL_UART_RxHalfCpltCallback>
}
 800bea6:	bf00      	nop
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800beae:	b580      	push	{r7, lr}
 800beb0:	b086      	sub	sp, #24
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bec0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bec8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bed4:	2b80      	cmp	r3, #128	; 0x80
 800bed6:	d109      	bne.n	800beec <UART_DMAError+0x3e>
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	2b21      	cmp	r3, #33	; 0x21
 800bedc:	d106      	bne.n	800beec <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800bee6:	6978      	ldr	r0, [r7, #20]
 800bee8:	f7ff fea2 	bl	800bc30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bef6:	2b40      	cmp	r3, #64	; 0x40
 800bef8:	d109      	bne.n	800bf0e <UART_DMAError+0x60>
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2b22      	cmp	r3, #34	; 0x22
 800befe:	d106      	bne.n	800bf0e <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	2200      	movs	r2, #0
 800bf04:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800bf08:	6978      	ldr	r0, [r7, #20]
 800bf0a:	f7ff feb7 	bl	800bc7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf14:	f043 0210 	orr.w	r2, r3, #16
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf1e:	6978      	ldr	r0, [r7, #20]
 800bf20:	f7ff f9f2 	bl	800b308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf24:	bf00      	nop
 800bf26:	3718      	adds	r7, #24
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf4a:	68f8      	ldr	r0, [r7, #12]
 800bf4c:	f7ff f9dc 	bl	800b308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf50:	bf00      	nop
 800bf52:	3710      	adds	r7, #16
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b08f      	sub	sp, #60	; 0x3c
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf64:	2b21      	cmp	r3, #33	; 0x21
 800bf66:	d14d      	bne.n	800c004 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bf6e:	b29b      	uxth	r3, r3
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d132      	bne.n	800bfda <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7a:	6a3b      	ldr	r3, [r7, #32]
 800bf7c:	e853 3f00 	ldrex	r3, [r3]
 800bf80:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf88:	637b      	str	r3, [r7, #52]	; 0x34
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	461a      	mov	r2, r3
 800bf90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf94:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf9a:	e841 2300 	strex	r3, r2, [r1]
 800bf9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d1e6      	bne.n	800bf74 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	e853 3f00 	ldrex	r3, [r3]
 800bfb2:	60bb      	str	r3, [r7, #8]
   return(result);
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfba:	633b      	str	r3, [r7, #48]	; 0x30
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc4:	61bb      	str	r3, [r7, #24]
 800bfc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc8:	6979      	ldr	r1, [r7, #20]
 800bfca:	69ba      	ldr	r2, [r7, #24]
 800bfcc:	e841 2300 	strex	r3, r2, [r1]
 800bfd0:	613b      	str	r3, [r7, #16]
   return(result);
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1e6      	bne.n	800bfa6 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bfd8:	e014      	b.n	800c004 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfde:	781a      	ldrb	r2, [r3, #0]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	b292      	uxth	r2, r2
 800bfe6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfec:	1c5a      	adds	r2, r3, #1
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	3b01      	subs	r3, #1
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c004:	bf00      	nop
 800c006:	373c      	adds	r7, #60	; 0x3c
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c010:	b480      	push	{r7}
 800c012:	b091      	sub	sp, #68	; 0x44
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c01c:	2b21      	cmp	r3, #33	; 0x21
 800c01e:	d151      	bne.n	800c0c4 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c026:	b29b      	uxth	r3, r3
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d132      	bne.n	800c092 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c034:	e853 3f00 	ldrex	r3, [r3]
 800c038:	623b      	str	r3, [r7, #32]
   return(result);
 800c03a:	6a3b      	ldr	r3, [r7, #32]
 800c03c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c040:	63bb      	str	r3, [r7, #56]	; 0x38
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	461a      	mov	r2, r3
 800c048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04a:	633b      	str	r3, [r7, #48]	; 0x30
 800c04c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c052:	e841 2300 	strex	r3, r2, [r1]
 800c056:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d1e6      	bne.n	800c02c <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	e853 3f00 	ldrex	r3, [r3]
 800c06a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c072:	637b      	str	r3, [r7, #52]	; 0x34
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	461a      	mov	r2, r3
 800c07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c07c:	61fb      	str	r3, [r7, #28]
 800c07e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c080:	69b9      	ldr	r1, [r7, #24]
 800c082:	69fa      	ldr	r2, [r7, #28]
 800c084:	e841 2300 	strex	r3, r2, [r1]
 800c088:	617b      	str	r3, [r7, #20]
   return(result);
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1e6      	bne.n	800c05e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c090:	e018      	b.n	800c0c4 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c096:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c09a:	881a      	ldrh	r2, [r3, #0]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c0a4:	b292      	uxth	r2, r2
 800c0a6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ac:	1c9a      	adds	r2, r3, #2
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c0c4:	bf00      	nop
 800c0c6:	3744      	adds	r7, #68	; 0x44
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b088      	sub	sp, #32
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	e853 3f00 	ldrex	r3, [r3]
 800c0e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0ec:	61fb      	str	r3, [r7, #28]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	61bb      	str	r3, [r7, #24]
 800c0f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fa:	6979      	ldr	r1, [r7, #20]
 800c0fc:	69ba      	ldr	r2, [r7, #24]
 800c0fe:	e841 2300 	strex	r3, r2, [r1]
 800c102:	613b      	str	r3, [r7, #16]
   return(result);
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e6      	bne.n	800c0d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2220      	movs	r2, #32
 800c10e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7ff f8e2 	bl	800b2e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c11c:	bf00      	nop
 800c11e:	3720      	adds	r7, #32
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c12c:	bf00      	nop
 800c12e:	370c      	adds	r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c138:	b084      	sub	sp, #16
 800c13a:	b480      	push	{r7}
 800c13c:	b083      	sub	sp, #12
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	f107 0014 	add.w	r0, r7, #20
 800c146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800c14a:	2300      	movs	r3, #0
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	b004      	add	sp, #16
 800c158:	4770      	bx	lr

0800c15a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c15a:	b480      	push	{r7}
 800c15c:	b085      	sub	sp, #20
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c16a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800c16e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	b29a      	uxth	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3714      	adds	r7, #20
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c188:	b480      	push	{r7}
 800c18a:	b085      	sub	sp, #20
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c190:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800c194:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c19c:	b29a      	uxth	r2, r3
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	43db      	mvns	r3, r3
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3714      	adds	r7, #20
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr

0800c1be <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800c1be:	b480      	push	{r7}
 800c1c0:	b083      	sub	sp, #12
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800c1ca:	2300      	movs	r3, #0
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c1d8:	b084      	sub	sp, #16
 800c1da:	b480      	push	{r7}
 800c1dc:	b083      	sub	sp, #12
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	f107 0014 	add.w	r0, r7, #20
 800c1e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	370c      	adds	r7, #12
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	b004      	add	sp, #16
 800c218:	4770      	bx	lr
	...

0800c21c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b09d      	sub	sp, #116	; 0x74
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c226:	2300      	movs	r3, #0
 800c228:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	4413      	add	r3, r2
 800c236:	881b      	ldrh	r3, [r3, #0]
 800c238:	b29b      	uxth	r3, r3
 800c23a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800c23e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c242:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	78db      	ldrb	r3, [r3, #3]
 800c24a:	2b03      	cmp	r3, #3
 800c24c:	d81f      	bhi.n	800c28e <USB_ActivateEndpoint+0x72>
 800c24e:	a201      	add	r2, pc, #4	; (adr r2, 800c254 <USB_ActivateEndpoint+0x38>)
 800c250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c254:	0800c265 	.word	0x0800c265
 800c258:	0800c281 	.word	0x0800c281
 800c25c:	0800c297 	.word	0x0800c297
 800c260:	0800c273 	.word	0x0800c273
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c264:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c268:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c26c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c270:	e012      	b.n	800c298 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c272:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c276:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800c27a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c27e:	e00b      	b.n	800c298 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c280:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c284:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c288:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800c28c:	e004      	b.n	800c298 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800c294:	e000      	b.n	800c298 <USB_ActivateEndpoint+0x7c>
      break;
 800c296:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	441a      	add	r2, r3
 800c2a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c2a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	4413      	add	r3, r2
 800c2c4:	881b      	ldrh	r3, [r3, #0]
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	b21b      	sxth	r3, r3
 800c2ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2d2:	b21a      	sxth	r2, r3
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	b21b      	sxth	r3, r3
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	b21b      	sxth	r3, r3
 800c2de:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	441a      	add	r2, r3
 800c2ec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c2f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c300:	b29b      	uxth	r3, r3
 800c302:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	7b1b      	ldrb	r3, [r3, #12]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	f040 8178 	bne.w	800c5fe <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	785b      	ldrb	r3, [r3, #1]
 800c312:	2b00      	cmp	r3, #0
 800c314:	f000 8084 	beq.w	800c420 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	61bb      	str	r3, [r7, #24]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c322:	b29b      	uxth	r3, r3
 800c324:	461a      	mov	r2, r3
 800c326:	69bb      	ldr	r3, [r7, #24]
 800c328:	4413      	add	r3, r2
 800c32a:	61bb      	str	r3, [r7, #24]
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	00da      	lsls	r2, r3, #3
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	4413      	add	r3, r2
 800c336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c33a:	617b      	str	r3, [r7, #20]
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	88db      	ldrh	r3, [r3, #6]
 800c340:	085b      	lsrs	r3, r3, #1
 800c342:	b29b      	uxth	r3, r3
 800c344:	005b      	lsls	r3, r3, #1
 800c346:	b29a      	uxth	r2, r3
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	4413      	add	r3, r2
 800c356:	881b      	ldrh	r3, [r3, #0]
 800c358:	827b      	strh	r3, [r7, #18]
 800c35a:	8a7b      	ldrh	r3, [r7, #18]
 800c35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c360:	2b00      	cmp	r3, #0
 800c362:	d01b      	beq.n	800c39c <USB_ActivateEndpoint+0x180>
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	4413      	add	r3, r2
 800c36e:	881b      	ldrh	r3, [r3, #0]
 800c370:	b29b      	uxth	r3, r3
 800c372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c37a:	823b      	strh	r3, [r7, #16]
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	441a      	add	r2, r3
 800c386:	8a3b      	ldrh	r3, [r7, #16]
 800c388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c38c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c394:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c398:	b29b      	uxth	r3, r3
 800c39a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	78db      	ldrb	r3, [r3, #3]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d020      	beq.n	800c3e6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4413      	add	r3, r2
 800c3ae:	881b      	ldrh	r3, [r3, #0]
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3ba:	81bb      	strh	r3, [r7, #12]
 800c3bc:	89bb      	ldrh	r3, [r7, #12]
 800c3be:	f083 0320 	eor.w	r3, r3, #32
 800c3c2:	81bb      	strh	r3, [r7, #12]
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	441a      	add	r2, r3
 800c3ce:	89bb      	ldrh	r3, [r7, #12]
 800c3d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	8013      	strh	r3, [r2, #0]
 800c3e4:	e2d5      	b.n	800c992 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	4413      	add	r3, r2
 800c3f0:	881b      	ldrh	r3, [r3, #0]
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3fc:	81fb      	strh	r3, [r7, #14]
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	441a      	add	r2, r3
 800c408:	89fb      	ldrh	r3, [r7, #14]
 800c40a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c40e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	8013      	strh	r3, [r2, #0]
 800c41e:	e2b8      	b.n	800c992 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	633b      	str	r3, [r7, #48]	; 0x30
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	461a      	mov	r2, r3
 800c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c430:	4413      	add	r3, r2
 800c432:	633b      	str	r3, [r7, #48]	; 0x30
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	00da      	lsls	r2, r3, #3
 800c43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43c:	4413      	add	r3, r2
 800c43e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c442:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	88db      	ldrh	r3, [r3, #6]
 800c448:	085b      	lsrs	r3, r3, #1
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	005b      	lsls	r3, r3, #1
 800c44e:	b29a      	uxth	r2, r3
 800c450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c452:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	62bb      	str	r3, [r7, #40]	; 0x28
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c45e:	b29b      	uxth	r3, r3
 800c460:	461a      	mov	r2, r3
 800c462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c464:	4413      	add	r3, r2
 800c466:	62bb      	str	r3, [r7, #40]	; 0x28
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	00da      	lsls	r2, r3, #3
 800c46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c470:	4413      	add	r3, r2
 800c472:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c476:	627b      	str	r3, [r7, #36]	; 0x24
 800c478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47a:	881b      	ldrh	r3, [r3, #0]
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c482:	b29a      	uxth	r2, r3
 800c484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c486:	801a      	strh	r2, [r3, #0]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	691b      	ldr	r3, [r3, #16]
 800c48c:	2b3e      	cmp	r3, #62	; 0x3e
 800c48e:	d91d      	bls.n	800c4cc <USB_ActivateEndpoint+0x2b0>
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	095b      	lsrs	r3, r3, #5
 800c496:	66bb      	str	r3, [r7, #104]	; 0x68
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	f003 031f 	and.w	r3, r3, #31
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d102      	bne.n	800c4aa <USB_ActivateEndpoint+0x28e>
 800c4a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	881b      	ldrh	r3, [r3, #0]
 800c4ae:	b29a      	uxth	r2, r3
 800c4b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	029b      	lsls	r3, r3, #10
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c8:	801a      	strh	r2, [r3, #0]
 800c4ca:	e026      	b.n	800c51a <USB_ActivateEndpoint+0x2fe>
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	691b      	ldr	r3, [r3, #16]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d10a      	bne.n	800c4ea <USB_ActivateEndpoint+0x2ce>
 800c4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d6:	881b      	ldrh	r3, [r3, #0]
 800c4d8:	b29b      	uxth	r3, r3
 800c4da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e6:	801a      	strh	r2, [r3, #0]
 800c4e8:	e017      	b.n	800c51a <USB_ActivateEndpoint+0x2fe>
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	085b      	lsrs	r3, r3, #1
 800c4f0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	691b      	ldr	r3, [r3, #16]
 800c4f6:	f003 0301 	and.w	r3, r3, #1
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d002      	beq.n	800c504 <USB_ActivateEndpoint+0x2e8>
 800c4fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c500:	3301      	adds	r3, #1
 800c502:	66bb      	str	r3, [r7, #104]	; 0x68
 800c504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c506:	881b      	ldrh	r3, [r3, #0]
 800c508:	b29a      	uxth	r2, r3
 800c50a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	029b      	lsls	r3, r3, #10
 800c510:	b29b      	uxth	r3, r3
 800c512:	4313      	orrs	r3, r2
 800c514:	b29a      	uxth	r2, r3
 800c516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c518:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	4413      	add	r3, r2
 800c524:	881b      	ldrh	r3, [r3, #0]
 800c526:	847b      	strh	r3, [r7, #34]	; 0x22
 800c528:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c52a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d01b      	beq.n	800c56a <USB_ActivateEndpoint+0x34e>
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	781b      	ldrb	r3, [r3, #0]
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	4413      	add	r3, r2
 800c53c:	881b      	ldrh	r3, [r3, #0]
 800c53e:	b29b      	uxth	r3, r3
 800c540:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c548:	843b      	strh	r3, [r7, #32]
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	009b      	lsls	r3, r3, #2
 800c552:	441a      	add	r2, r3
 800c554:	8c3b      	ldrh	r3, [r7, #32]
 800c556:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c55a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c55e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c566:	b29b      	uxth	r3, r3
 800c568:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d124      	bne.n	800c5bc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	009b      	lsls	r3, r3, #2
 800c57a:	4413      	add	r3, r2
 800c57c:	881b      	ldrh	r3, [r3, #0]
 800c57e:	b29b      	uxth	r3, r3
 800c580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c588:	83bb      	strh	r3, [r7, #28]
 800c58a:	8bbb      	ldrh	r3, [r7, #28]
 800c58c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c590:	83bb      	strh	r3, [r7, #28]
 800c592:	8bbb      	ldrh	r3, [r7, #28]
 800c594:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c598:	83bb      	strh	r3, [r7, #28]
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	009b      	lsls	r3, r3, #2
 800c5a2:	441a      	add	r2, r3
 800c5a4:	8bbb      	ldrh	r3, [r7, #28]
 800c5a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	8013      	strh	r3, [r2, #0]
 800c5ba:	e1ea      	b.n	800c992 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	4413      	add	r3, r2
 800c5c6:	881b      	ldrh	r3, [r3, #0]
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c5ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5d2:	83fb      	strh	r3, [r7, #30]
 800c5d4:	8bfb      	ldrh	r3, [r7, #30]
 800c5d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c5da:	83fb      	strh	r3, [r7, #30]
 800c5dc:	687a      	ldr	r2, [r7, #4]
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	441a      	add	r2, r3
 800c5e6:	8bfb      	ldrh	r3, [r7, #30]
 800c5e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	8013      	strh	r3, [r2, #0]
 800c5fc:	e1c9      	b.n	800c992 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	78db      	ldrb	r3, [r3, #3]
 800c602:	2b02      	cmp	r3, #2
 800c604:	d11e      	bne.n	800c644 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4413      	add	r3, r2
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	b29b      	uxth	r3, r3
 800c614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c61c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	441a      	add	r2, r3
 800c62a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c62e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c636:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c63a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c63e:	b29b      	uxth	r3, r3
 800c640:	8013      	strh	r3, [r2, #0]
 800c642:	e01d      	b.n	800c680 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	4413      	add	r3, r2
 800c64e:	881b      	ldrh	r3, [r3, #0]
 800c650:	b29b      	uxth	r3, r3
 800c652:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c65a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	441a      	add	r2, r3
 800c668:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800c66c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	461a      	mov	r2, r3
 800c68e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c690:	4413      	add	r3, r2
 800c692:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	00da      	lsls	r2, r3, #3
 800c69a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c69c:	4413      	add	r3, r2
 800c69e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	891b      	ldrh	r3, [r3, #8]
 800c6a8:	085b      	lsrs	r3, r3, #1
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	005b      	lsls	r3, r3, #1
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c6b2:	801a      	strh	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	657b      	str	r3, [r7, #84]	; 0x54
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6c4:	4413      	add	r3, r2
 800c6c6:	657b      	str	r3, [r7, #84]	; 0x54
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	00da      	lsls	r2, r3, #3
 800c6ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6d0:	4413      	add	r3, r2
 800c6d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c6d6:	653b      	str	r3, [r7, #80]	; 0x50
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	895b      	ldrh	r3, [r3, #10]
 800c6dc:	085b      	lsrs	r3, r3, #1
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	005b      	lsls	r3, r3, #1
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6e6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	785b      	ldrb	r3, [r3, #1]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	f040 8093 	bne.w	800c818 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	4413      	add	r3, r2
 800c6fc:	881b      	ldrh	r3, [r3, #0]
 800c6fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c702:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d01b      	beq.n	800c746 <USB_ActivateEndpoint+0x52a>
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	881b      	ldrh	r3, [r3, #0]
 800c71a:	b29b      	uxth	r3, r3
 800c71c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c724:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	441a      	add	r2, r3
 800c730:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c73a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c73e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c742:	b29b      	uxth	r3, r3
 800c744:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	4413      	add	r3, r2
 800c750:	881b      	ldrh	r3, [r3, #0]
 800c752:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c754:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d01b      	beq.n	800c796 <USB_ActivateEndpoint+0x57a>
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	4413      	add	r3, r2
 800c768:	881b      	ldrh	r3, [r3, #0]
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c774:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	441a      	add	r2, r3
 800c780:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c78a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c78e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c792:	b29b      	uxth	r3, r3
 800c794:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	4413      	add	r3, r2
 800c7a0:	881b      	ldrh	r3, [r3, #0]
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c7a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7ac:	873b      	strh	r3, [r7, #56]	; 0x38
 800c7ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c7b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c7b4:	873b      	strh	r3, [r7, #56]	; 0x38
 800c7b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c7b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c7bc:	873b      	strh	r3, [r7, #56]	; 0x38
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	441a      	add	r2, r3
 800c7c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c7ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	4413      	add	r3, r2
 800c7e8:	881b      	ldrh	r3, [r3, #0]
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	441a      	add	r2, r3
 800c800:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c80a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c80e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c812:	b29b      	uxth	r3, r3
 800c814:	8013      	strh	r3, [r2, #0]
 800c816:	e0bc      	b.n	800c992 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	4413      	add	r3, r2
 800c822:	881b      	ldrh	r3, [r3, #0]
 800c824:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800c828:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c82c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c830:	2b00      	cmp	r3, #0
 800c832:	d01d      	beq.n	800c870 <USB_ActivateEndpoint+0x654>
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	4413      	add	r3, r2
 800c83e:	881b      	ldrh	r3, [r3, #0]
 800c840:	b29b      	uxth	r3, r3
 800c842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c84a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	441a      	add	r2, r3
 800c858:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c85c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c860:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	4413      	add	r3, r2
 800c87a:	881b      	ldrh	r3, [r3, #0]
 800c87c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c880:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d01d      	beq.n	800c8c8 <USB_ActivateEndpoint+0x6ac>
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	4413      	add	r3, r2
 800c896:	881b      	ldrh	r3, [r3, #0]
 800c898:	b29b      	uxth	r3, r3
 800c89a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c89e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	441a      	add	r2, r3
 800c8b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c8b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c8b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c8bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c8c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	78db      	ldrb	r3, [r3, #3]
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d024      	beq.n	800c91a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	4413      	add	r3, r2
 800c8da:	881b      	ldrh	r3, [r3, #0]
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c8ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c8ee:	f083 0320 	eor.w	r3, r3, #32
 800c8f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	441a      	add	r2, r3
 800c900:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c90c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c914:	b29b      	uxth	r3, r3
 800c916:	8013      	strh	r3, [r2, #0]
 800c918:	e01d      	b.n	800c956 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c91a:	687a      	ldr	r2, [r7, #4]
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	4413      	add	r3, r2
 800c924:	881b      	ldrh	r3, [r3, #0]
 800c926:	b29b      	uxth	r3, r3
 800c928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c92c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c930:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	441a      	add	r2, r3
 800c93e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c94a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c94e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c952:	b29b      	uxth	r3, r3
 800c954:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	4413      	add	r3, r2
 800c960:	881b      	ldrh	r3, [r3, #0]
 800c962:	b29b      	uxth	r3, r3
 800c964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c96c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	441a      	add	r2, r3
 800c97a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c97e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c98a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c98e:	b29b      	uxth	r3, r3
 800c990:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c992:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800c996:	4618      	mov	r0, r3
 800c998:	3774      	adds	r7, #116	; 0x74
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop

0800c9a4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b08d      	sub	sp, #52	; 0x34
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	7b1b      	ldrb	r3, [r3, #12]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f040 808e 	bne.w	800cad4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	785b      	ldrb	r3, [r3, #1]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d044      	beq.n	800ca4a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	4413      	add	r3, r2
 800c9ca:	881b      	ldrh	r3, [r3, #0]
 800c9cc:	81bb      	strh	r3, [r7, #12]
 800c9ce:	89bb      	ldrh	r3, [r7, #12]
 800c9d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d01b      	beq.n	800ca10 <USB_DeactivateEndpoint+0x6c>
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	4413      	add	r3, r2
 800c9e2:	881b      	ldrh	r3, [r3, #0]
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9ee:	817b      	strh	r3, [r7, #10]
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	441a      	add	r2, r3
 800c9fa:	897b      	ldrh	r3, [r7, #10]
 800c9fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	009b      	lsls	r3, r3, #2
 800ca18:	4413      	add	r3, r2
 800ca1a:	881b      	ldrh	r3, [r3, #0]
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca26:	813b      	strh	r3, [r7, #8]
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	441a      	add	r2, r3
 800ca32:	893b      	ldrh	r3, [r7, #8]
 800ca34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	8013      	strh	r3, [r2, #0]
 800ca48:	e192      	b.n	800cd70 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	4413      	add	r3, r2
 800ca54:	881b      	ldrh	r3, [r3, #0]
 800ca56:	827b      	strh	r3, [r7, #18]
 800ca58:	8a7b      	ldrh	r3, [r7, #18]
 800ca5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d01b      	beq.n	800ca9a <USB_DeactivateEndpoint+0xf6>
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	4413      	add	r3, r2
 800ca6c:	881b      	ldrh	r3, [r3, #0]
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca78:	823b      	strh	r3, [r7, #16]
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	441a      	add	r2, r3
 800ca84:	8a3b      	ldrh	r3, [r7, #16]
 800ca86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ca92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	4413      	add	r3, r2
 800caa4:	881b      	ldrh	r3, [r3, #0]
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800caac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cab0:	81fb      	strh	r3, [r7, #14]
 800cab2:	687a      	ldr	r2, [r7, #4]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	441a      	add	r2, r3
 800cabc:	89fb      	ldrh	r3, [r7, #14]
 800cabe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800caca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cace:	b29b      	uxth	r3, r3
 800cad0:	8013      	strh	r3, [r2, #0]
 800cad2:	e14d      	b.n	800cd70 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	785b      	ldrb	r3, [r3, #1]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	f040 80a5 	bne.w	800cc28 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	4413      	add	r3, r2
 800cae8:	881b      	ldrh	r3, [r3, #0]
 800caea:	843b      	strh	r3, [r7, #32]
 800caec:	8c3b      	ldrh	r3, [r7, #32]
 800caee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d01b      	beq.n	800cb2e <USB_DeactivateEndpoint+0x18a>
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	4413      	add	r3, r2
 800cb00:	881b      	ldrh	r3, [r3, #0]
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb0c:	83fb      	strh	r3, [r7, #30]
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	441a      	add	r2, r3
 800cb18:	8bfb      	ldrh	r3, [r7, #30]
 800cb1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cb26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	4413      	add	r3, r2
 800cb38:	881b      	ldrh	r3, [r3, #0]
 800cb3a:	83bb      	strh	r3, [r7, #28]
 800cb3c:	8bbb      	ldrh	r3, [r7, #28]
 800cb3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d01b      	beq.n	800cb7e <USB_DeactivateEndpoint+0x1da>
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	4413      	add	r3, r2
 800cb50:	881b      	ldrh	r3, [r3, #0]
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb5c:	837b      	strh	r3, [r7, #26]
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	441a      	add	r2, r3
 800cb68:	8b7b      	ldrh	r3, [r7, #26]
 800cb6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cb6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cb72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	4413      	add	r3, r2
 800cb88:	881b      	ldrh	r3, [r3, #0]
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb94:	833b      	strh	r3, [r7, #24]
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	441a      	add	r2, r3
 800cba0:	8b3b      	ldrh	r3, [r7, #24]
 800cba2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cba6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4413      	add	r3, r2
 800cbc0:	881b      	ldrh	r3, [r3, #0]
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cbc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbcc:	82fb      	strh	r3, [r7, #22]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	441a      	add	r2, r3
 800cbd8:	8afb      	ldrh	r3, [r7, #22]
 800cbda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cbde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cbe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	4413      	add	r3, r2
 800cbf8:	881b      	ldrh	r3, [r3, #0]
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc04:	82bb      	strh	r3, [r7, #20]
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	441a      	add	r2, r3
 800cc10:	8abb      	ldrh	r3, [r7, #20]
 800cc12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	8013      	strh	r3, [r2, #0]
 800cc26:	e0a3      	b.n	800cd70 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	881b      	ldrh	r3, [r3, #0]
 800cc34:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cc36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cc38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d01b      	beq.n	800cc78 <USB_DeactivateEndpoint+0x2d4>
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4413      	add	r3, r2
 800cc4a:	881b      	ldrh	r3, [r3, #0]
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc56:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	441a      	add	r2, r3
 800cc62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cc64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800cc70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc78:	687a      	ldr	r2, [r7, #4]
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	009b      	lsls	r3, r3, #2
 800cc80:	4413      	add	r3, r2
 800cc82:	881b      	ldrh	r3, [r3, #0]
 800cc84:	857b      	strh	r3, [r7, #42]	; 0x2a
 800cc86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cc88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d01b      	beq.n	800ccc8 <USB_DeactivateEndpoint+0x324>
 800cc90:	687a      	ldr	r2, [r7, #4]
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	4413      	add	r3, r2
 800cc9a:	881b      	ldrh	r3, [r3, #0]
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cca6:	853b      	strh	r3, [r7, #40]	; 0x28
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	441a      	add	r2, r3
 800ccb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ccb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	4413      	add	r3, r2
 800ccd2:	881b      	ldrh	r3, [r3, #0]
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ccda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccde:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cce0:	687a      	ldr	r2, [r7, #4]
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	441a      	add	r2, r3
 800ccea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ccec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ccf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ccf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ccf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	4413      	add	r3, r2
 800cd0a:	881b      	ldrh	r3, [r3, #0]
 800cd0c:	b29b      	uxth	r3, r3
 800cd0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd16:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cd18:	687a      	ldr	r2, [r7, #4]
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	009b      	lsls	r3, r3, #2
 800cd20:	441a      	add	r2, r3
 800cd22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	881b      	ldrh	r3, [r3, #0]
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd4e:	847b      	strh	r3, [r7, #34]	; 0x22
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	441a      	add	r2, r3
 800cd5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cd60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cd64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cd70:	2300      	movs	r3, #0
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3734      	adds	r7, #52	; 0x34
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr

0800cd7e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b0c2      	sub	sp, #264	; 0x108
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd8c:	6018      	str	r0, [r3, #0]
 800cd8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd96:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cd98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	785b      	ldrb	r3, [r3, #1]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	f040 86b7 	bne.w	800db18 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800cdaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	699a      	ldr	r2, [r3, #24]
 800cdb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	691b      	ldr	r3, [r3, #16]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d908      	bls.n	800cdd8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800cdc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800cdd6:	e007      	b.n	800cde8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800cdd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	699b      	ldr	r3, [r3, #24]
 800cde4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800cde8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	7b1b      	ldrb	r3, [r3, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d13a      	bne.n	800ce6e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cdf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	6959      	ldr	r1, [r3, #20]
 800ce04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	88da      	ldrh	r2, [r3, #6]
 800ce10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ce1a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ce1e:	6800      	ldr	r0, [r0, #0]
 800ce20:	f001 fcb9 	bl	800e796 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ce24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	613b      	str	r3, [r7, #16]
 800ce30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce3e:	b29b      	uxth	r3, r3
 800ce40:	461a      	mov	r2, r3
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	4413      	add	r3, r2
 800ce46:	613b      	str	r3, [r7, #16]
 800ce48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	00da      	lsls	r2, r3, #3
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	4413      	add	r3, r2
 800ce5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ce5e:	60fb      	str	r3, [r7, #12]
 800ce60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	801a      	strh	r2, [r3, #0]
 800ce6a:	f000 be1f 	b.w	800daac <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ce6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	78db      	ldrb	r3, [r3, #3]
 800ce7a:	2b02      	cmp	r3, #2
 800ce7c:	f040 8462 	bne.w	800d744 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ce80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	6a1a      	ldr	r2, [r3, #32]
 800ce8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	691b      	ldr	r3, [r3, #16]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	f240 83df 	bls.w	800d65c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ce9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	4413      	add	r3, r2
 800ceb8:	881b      	ldrh	r3, [r3, #0]
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cec4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800cec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cecc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ced6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	441a      	add	r2, r3
 800cee2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ceea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ceee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800cef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cefa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cefe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	6a1a      	ldr	r2, [r3, #32]
 800cf06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf0a:	1ad2      	subs	r2, r2, r3
 800cf0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cf18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	009b      	lsls	r3, r3, #2
 800cf30:	4413      	add	r3, r2
 800cf32:	881b      	ldrh	r3, [r3, #0]
 800cf34:	b29b      	uxth	r3, r3
 800cf36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	f000 81c7 	beq.w	800d2ce <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cf40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	633b      	str	r3, [r7, #48]	; 0x30
 800cf4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	785b      	ldrb	r3, [r3, #1]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d177      	bne.n	800d04c <USB_EPStartXfer+0x2ce>
 800cf5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	461a      	mov	r2, r3
 800cf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7c:	4413      	add	r3, r2
 800cf7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	00da      	lsls	r2, r3, #3
 800cf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf90:	4413      	add	r3, r2
 800cf92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cf96:	627b      	str	r3, [r7, #36]	; 0x24
 800cf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9a:	881b      	ldrh	r3, [r3, #0]
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cfa2:	b29a      	uxth	r2, r3
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa6:	801a      	strh	r2, [r3, #0]
 800cfa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfac:	2b3e      	cmp	r3, #62	; 0x3e
 800cfae:	d921      	bls.n	800cff4 <USB_EPStartXfer+0x276>
 800cfb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfb4:	095b      	lsrs	r3, r3, #5
 800cfb6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cfba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfbe:	f003 031f 	and.w	r3, r3, #31
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d104      	bne.n	800cfd0 <USB_EPStartXfer+0x252>
 800cfc6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd2:	881b      	ldrh	r3, [r3, #0]
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	029b      	lsls	r3, r3, #10
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	b29b      	uxth	r3, r3
 800cfe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff0:	801a      	strh	r2, [r3, #0]
 800cff2:	e050      	b.n	800d096 <USB_EPStartXfer+0x318>
 800cff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d10a      	bne.n	800d012 <USB_EPStartXfer+0x294>
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffe:	881b      	ldrh	r3, [r3, #0]
 800d000:	b29b      	uxth	r3, r3
 800d002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00e:	801a      	strh	r2, [r3, #0]
 800d010:	e041      	b.n	800d096 <USB_EPStartXfer+0x318>
 800d012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d016:	085b      	lsrs	r3, r3, #1
 800d018:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d020:	f003 0301 	and.w	r3, r3, #1
 800d024:	2b00      	cmp	r3, #0
 800d026:	d004      	beq.n	800d032 <USB_EPStartXfer+0x2b4>
 800d028:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d02c:	3301      	adds	r3, #1
 800d02e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d034:	881b      	ldrh	r3, [r3, #0]
 800d036:	b29a      	uxth	r2, r3
 800d038:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	029b      	lsls	r3, r3, #10
 800d040:	b29b      	uxth	r3, r3
 800d042:	4313      	orrs	r3, r2
 800d044:	b29a      	uxth	r2, r3
 800d046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d048:	801a      	strh	r2, [r3, #0]
 800d04a:	e024      	b.n	800d096 <USB_EPStartXfer+0x318>
 800d04c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	785b      	ldrb	r3, [r3, #1]
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d11c      	bne.n	800d096 <USB_EPStartXfer+0x318>
 800d05c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d060:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	461a      	mov	r2, r3
 800d06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d070:	4413      	add	r3, r2
 800d072:	633b      	str	r3, [r7, #48]	; 0x30
 800d074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d078:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	00da      	lsls	r2, r3, #3
 800d082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d084:	4413      	add	r3, r2
 800d086:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d08a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d090:	b29a      	uxth	r2, r3
 800d092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d094:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d09a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	895b      	ldrh	r3, [r3, #10]
 800d0a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	6959      	ldr	r1, [r3, #20]
 800d0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0b6:	b29b      	uxth	r3, r3
 800d0b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d0bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d0c0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d0c4:	6800      	ldr	r0, [r0, #0]
 800d0c6:	f001 fb66 	bl	800e796 <USB_WritePMA>
            ep->xfer_buff += len;
 800d0ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	695a      	ldr	r2, [r3, #20]
 800d0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0da:	441a      	add	r2, r3
 800d0dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d0e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	6a1a      	ldr	r2, [r3, #32]
 800d0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	429a      	cmp	r2, r3
 800d102:	d90f      	bls.n	800d124 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	6a1a      	ldr	r2, [r3, #32]
 800d110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d114:	1ad2      	subs	r2, r2, r3
 800d116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d11a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	621a      	str	r2, [r3, #32]
 800d122:	e00e      	b.n	800d142 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	6a1b      	ldr	r3, [r3, #32]
 800d130:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2200      	movs	r2, #0
 800d140:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	785b      	ldrb	r3, [r3, #1]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d177      	bne.n	800d242 <USB_EPStartXfer+0x4c4>
 800d152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	61bb      	str	r3, [r7, #24]
 800d15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d162:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	461a      	mov	r2, r3
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	4413      	add	r3, r2
 800d174:	61bb      	str	r3, [r7, #24]
 800d176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d17a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	00da      	lsls	r2, r3, #3
 800d184:	69bb      	ldr	r3, [r7, #24]
 800d186:	4413      	add	r3, r2
 800d188:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d18c:	617b      	str	r3, [r7, #20]
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	881b      	ldrh	r3, [r3, #0]
 800d192:	b29b      	uxth	r3, r3
 800d194:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d198:	b29a      	uxth	r2, r3
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	801a      	strh	r2, [r3, #0]
 800d19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1a2:	2b3e      	cmp	r3, #62	; 0x3e
 800d1a4:	d921      	bls.n	800d1ea <USB_EPStartXfer+0x46c>
 800d1a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1aa:	095b      	lsrs	r3, r3, #5
 800d1ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1b4:	f003 031f 	and.w	r3, r3, #31
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d104      	bne.n	800d1c6 <USB_EPStartXfer+0x448>
 800d1bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	881b      	ldrh	r3, [r3, #0]
 800d1ca:	b29a      	uxth	r2, r3
 800d1cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	029b      	lsls	r3, r3, #10
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1e2:	b29a      	uxth	r2, r3
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	801a      	strh	r2, [r3, #0]
 800d1e8:	e056      	b.n	800d298 <USB_EPStartXfer+0x51a>
 800d1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d10a      	bne.n	800d208 <USB_EPStartXfer+0x48a>
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	881b      	ldrh	r3, [r3, #0]
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d200:	b29a      	uxth	r2, r3
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	801a      	strh	r2, [r3, #0]
 800d206:	e047      	b.n	800d298 <USB_EPStartXfer+0x51a>
 800d208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d20c:	085b      	lsrs	r3, r3, #1
 800d20e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d216:	f003 0301 	and.w	r3, r3, #1
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d004      	beq.n	800d228 <USB_EPStartXfer+0x4aa>
 800d21e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d222:	3301      	adds	r3, #1
 800d224:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	881b      	ldrh	r3, [r3, #0]
 800d22c:	b29a      	uxth	r2, r3
 800d22e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d232:	b29b      	uxth	r3, r3
 800d234:	029b      	lsls	r3, r3, #10
 800d236:	b29b      	uxth	r3, r3
 800d238:	4313      	orrs	r3, r2
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	801a      	strh	r2, [r3, #0]
 800d240:	e02a      	b.n	800d298 <USB_EPStartXfer+0x51a>
 800d242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	785b      	ldrb	r3, [r3, #1]
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d122      	bne.n	800d298 <USB_EPStartXfer+0x51a>
 800d252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d256:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	623b      	str	r3, [r7, #32]
 800d25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d262:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	461a      	mov	r2, r3
 800d270:	6a3b      	ldr	r3, [r7, #32]
 800d272:	4413      	add	r3, r2
 800d274:	623b      	str	r3, [r7, #32]
 800d276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d27a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	00da      	lsls	r2, r3, #3
 800d284:	6a3b      	ldr	r3, [r7, #32]
 800d286:	4413      	add	r3, r2
 800d288:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d28c:	61fb      	str	r3, [r7, #28]
 800d28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d292:	b29a      	uxth	r2, r3
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d29c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	891b      	ldrh	r3, [r3, #8]
 800d2a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d2a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	6959      	ldr	r1, [r3, #20]
 800d2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d2be:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d2c2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d2c6:	6800      	ldr	r0, [r0, #0]
 800d2c8:	f001 fa65 	bl	800e796 <USB_WritePMA>
 800d2cc:	e3ee      	b.n	800daac <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d2ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	785b      	ldrb	r3, [r3, #1]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d177      	bne.n	800d3ce <USB_EPStartXfer+0x650>
 800d2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d2ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2fe:	4413      	add	r3, r2
 800d300:	64bb      	str	r3, [r7, #72]	; 0x48
 800d302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	00da      	lsls	r2, r3, #3
 800d310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d312:	4413      	add	r3, r2
 800d314:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d318:	647b      	str	r3, [r7, #68]	; 0x44
 800d31a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d31c:	881b      	ldrh	r3, [r3, #0]
 800d31e:	b29b      	uxth	r3, r3
 800d320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d324:	b29a      	uxth	r2, r3
 800d326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d328:	801a      	strh	r2, [r3, #0]
 800d32a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d32e:	2b3e      	cmp	r3, #62	; 0x3e
 800d330:	d921      	bls.n	800d376 <USB_EPStartXfer+0x5f8>
 800d332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d336:	095b      	lsrs	r3, r3, #5
 800d338:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d33c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d340:	f003 031f 	and.w	r3, r3, #31
 800d344:	2b00      	cmp	r3, #0
 800d346:	d104      	bne.n	800d352 <USB_EPStartXfer+0x5d4>
 800d348:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d34c:	3b01      	subs	r3, #1
 800d34e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d354:	881b      	ldrh	r3, [r3, #0]
 800d356:	b29a      	uxth	r2, r3
 800d358:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	029b      	lsls	r3, r3, #10
 800d360:	b29b      	uxth	r3, r3
 800d362:	4313      	orrs	r3, r2
 800d364:	b29b      	uxth	r3, r3
 800d366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d36a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d36e:	b29a      	uxth	r2, r3
 800d370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d372:	801a      	strh	r2, [r3, #0]
 800d374:	e056      	b.n	800d424 <USB_EPStartXfer+0x6a6>
 800d376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d10a      	bne.n	800d394 <USB_EPStartXfer+0x616>
 800d37e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d380:	881b      	ldrh	r3, [r3, #0]
 800d382:	b29b      	uxth	r3, r3
 800d384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d38c:	b29a      	uxth	r2, r3
 800d38e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d390:	801a      	strh	r2, [r3, #0]
 800d392:	e047      	b.n	800d424 <USB_EPStartXfer+0x6a6>
 800d394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d398:	085b      	lsrs	r3, r3, #1
 800d39a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d3a2:	f003 0301 	and.w	r3, r3, #1
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d004      	beq.n	800d3b4 <USB_EPStartXfer+0x636>
 800d3aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d3b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3b6:	881b      	ldrh	r3, [r3, #0]
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	029b      	lsls	r3, r3, #10
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	b29a      	uxth	r2, r3
 800d3c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3ca:	801a      	strh	r2, [r3, #0]
 800d3cc:	e02a      	b.n	800d424 <USB_EPStartXfer+0x6a6>
 800d3ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	785b      	ldrb	r3, [r3, #1]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d122      	bne.n	800d424 <USB_EPStartXfer+0x6a6>
 800d3de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	653b      	str	r3, [r7, #80]	; 0x50
 800d3ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3fe:	4413      	add	r3, r2
 800d400:	653b      	str	r3, [r7, #80]	; 0x50
 800d402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	00da      	lsls	r2, r3, #3
 800d410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d412:	4413      	add	r3, r2
 800d414:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d41a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d41e:	b29a      	uxth	r2, r3
 800d420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d422:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	891b      	ldrh	r3, [r3, #8]
 800d430:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6959      	ldr	r1, [r3, #20]
 800d440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d444:	b29b      	uxth	r3, r3
 800d446:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d44a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d44e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d452:	6800      	ldr	r0, [r0, #0]
 800d454:	f001 f99f 	bl	800e796 <USB_WritePMA>
            ep->xfer_buff += len;
 800d458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d45c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	695a      	ldr	r2, [r3, #20]
 800d464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d468:	441a      	add	r2, r3
 800d46a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d46e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d47a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6a1a      	ldr	r2, [r3, #32]
 800d482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	691b      	ldr	r3, [r3, #16]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d90f      	bls.n	800d4b2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	6a1a      	ldr	r2, [r3, #32]
 800d49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4a2:	1ad2      	subs	r2, r2, r3
 800d4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	621a      	str	r2, [r3, #32]
 800d4b0:	e00e      	b.n	800d4d0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d4b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	6a1b      	ldr	r3, [r3, #32]
 800d4be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800d4c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d4d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	643b      	str	r3, [r7, #64]	; 0x40
 800d4dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	785b      	ldrb	r3, [r3, #1]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d177      	bne.n	800d5dc <USB_EPStartXfer+0x85e>
 800d4ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d506:	b29b      	uxth	r3, r3
 800d508:	461a      	mov	r2, r3
 800d50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50c:	4413      	add	r3, r2
 800d50e:	63bb      	str	r3, [r7, #56]	; 0x38
 800d510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	781b      	ldrb	r3, [r3, #0]
 800d51c:	00da      	lsls	r2, r3, #3
 800d51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d520:	4413      	add	r3, r2
 800d522:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d526:	637b      	str	r3, [r7, #52]	; 0x34
 800d528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d52a:	881b      	ldrh	r3, [r3, #0]
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d532:	b29a      	uxth	r2, r3
 800d534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d536:	801a      	strh	r2, [r3, #0]
 800d538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d53c:	2b3e      	cmp	r3, #62	; 0x3e
 800d53e:	d921      	bls.n	800d584 <USB_EPStartXfer+0x806>
 800d540:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d544:	095b      	lsrs	r3, r3, #5
 800d546:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d54e:	f003 031f 	and.w	r3, r3, #31
 800d552:	2b00      	cmp	r3, #0
 800d554:	d104      	bne.n	800d560 <USB_EPStartXfer+0x7e2>
 800d556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d55a:	3b01      	subs	r3, #1
 800d55c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d562:	881b      	ldrh	r3, [r3, #0]
 800d564:	b29a      	uxth	r2, r3
 800d566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	029b      	lsls	r3, r3, #10
 800d56e:	b29b      	uxth	r3, r3
 800d570:	4313      	orrs	r3, r2
 800d572:	b29b      	uxth	r3, r3
 800d574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d57c:	b29a      	uxth	r2, r3
 800d57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d580:	801a      	strh	r2, [r3, #0]
 800d582:	e050      	b.n	800d626 <USB_EPStartXfer+0x8a8>
 800d584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d10a      	bne.n	800d5a2 <USB_EPStartXfer+0x824>
 800d58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d58e:	881b      	ldrh	r3, [r3, #0]
 800d590:	b29b      	uxth	r3, r3
 800d592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d59a:	b29a      	uxth	r2, r3
 800d59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d59e:	801a      	strh	r2, [r3, #0]
 800d5a0:	e041      	b.n	800d626 <USB_EPStartXfer+0x8a8>
 800d5a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5a6:	085b      	lsrs	r3, r3, #1
 800d5a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5b0:	f003 0301 	and.w	r3, r3, #1
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d004      	beq.n	800d5c2 <USB_EPStartXfer+0x844>
 800d5b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d5bc:	3301      	adds	r3, #1
 800d5be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d5c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5c4:	881b      	ldrh	r3, [r3, #0]
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	029b      	lsls	r3, r3, #10
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	b29a      	uxth	r2, r3
 800d5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5d8:	801a      	strh	r2, [r3, #0]
 800d5da:	e024      	b.n	800d626 <USB_EPStartXfer+0x8a8>
 800d5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	785b      	ldrb	r3, [r3, #1]
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d11c      	bne.n	800d626 <USB_EPStartXfer+0x8a8>
 800d5ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d600:	4413      	add	r3, r2
 800d602:	643b      	str	r3, [r7, #64]	; 0x40
 800d604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	781b      	ldrb	r3, [r3, #0]
 800d610:	00da      	lsls	r2, r3, #3
 800d612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d614:	4413      	add	r3, r2
 800d616:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d61a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d620:	b29a      	uxth	r2, r3
 800d622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d624:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d62a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	895b      	ldrh	r3, [r3, #10]
 800d632:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d63a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	6959      	ldr	r1, [r3, #20]
 800d642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d646:	b29b      	uxth	r3, r3
 800d648:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d64c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d650:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d654:	6800      	ldr	r0, [r0, #0]
 800d656:	f001 f89e 	bl	800e796 <USB_WritePMA>
 800d65a:	e227      	b.n	800daac <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d65c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	6a1b      	ldr	r3, [r3, #32]
 800d668:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d670:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d67a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	4413      	add	r3, r2
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	b29b      	uxth	r3, r3
 800d68a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d68e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d692:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d69a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	441a      	add	r2, r3
 800d6b0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d6b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d6c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d6d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6e8:	4413      	add	r3, r2
 800d6ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d6ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	00da      	lsls	r2, r3, #3
 800d6fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6fc:	4413      	add	r3, r2
 800d6fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d702:	65bb      	str	r3, [r7, #88]	; 0x58
 800d704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d708:	b29a      	uxth	r2, r3
 800d70a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d70c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d70e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	891b      	ldrh	r3, [r3, #8]
 800d71a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d71e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	6959      	ldr	r1, [r3, #20]
 800d72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d72e:	b29b      	uxth	r3, r3
 800d730:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d734:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d738:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d73c:	6800      	ldr	r0, [r0, #0]
 800d73e:	f001 f82a 	bl	800e796 <USB_WritePMA>
 800d742:	e1b3      	b.n	800daac <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	6a1a      	ldr	r2, [r3, #32]
 800d750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d754:	1ad2      	subs	r2, r2, r3
 800d756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d75a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d766:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d76a:	681a      	ldr	r2, [r3, #0]
 800d76c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	4413      	add	r3, r2
 800d77c:	881b      	ldrh	r3, [r3, #0]
 800d77e:	b29b      	uxth	r3, r3
 800d780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d784:	2b00      	cmp	r3, #0
 800d786:	f000 80c6 	beq.w	800d916 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d78a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d78e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	673b      	str	r3, [r7, #112]	; 0x70
 800d796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d79a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	785b      	ldrb	r3, [r3, #1]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d177      	bne.n	800d896 <USB_EPStartXfer+0xb18>
 800d7a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800d7b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7c6:	4413      	add	r3, r2
 800d7c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800d7ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	00da      	lsls	r2, r3, #3
 800d7d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7da:	4413      	add	r3, r2
 800d7dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d7e0:	667b      	str	r3, [r7, #100]	; 0x64
 800d7e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7e4:	881b      	ldrh	r3, [r3, #0]
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d7ec:	b29a      	uxth	r2, r3
 800d7ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7f0:	801a      	strh	r2, [r3, #0]
 800d7f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7f6:	2b3e      	cmp	r3, #62	; 0x3e
 800d7f8:	d921      	bls.n	800d83e <USB_EPStartXfer+0xac0>
 800d7fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7fe:	095b      	lsrs	r3, r3, #5
 800d800:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d808:	f003 031f 	and.w	r3, r3, #31
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d104      	bne.n	800d81a <USB_EPStartXfer+0xa9c>
 800d810:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d814:	3b01      	subs	r3, #1
 800d816:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d81a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d81c:	881b      	ldrh	r3, [r3, #0]
 800d81e:	b29a      	uxth	r2, r3
 800d820:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d824:	b29b      	uxth	r3, r3
 800d826:	029b      	lsls	r3, r3, #10
 800d828:	b29b      	uxth	r3, r3
 800d82a:	4313      	orrs	r3, r2
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d836:	b29a      	uxth	r2, r3
 800d838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d83a:	801a      	strh	r2, [r3, #0]
 800d83c:	e050      	b.n	800d8e0 <USB_EPStartXfer+0xb62>
 800d83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d842:	2b00      	cmp	r3, #0
 800d844:	d10a      	bne.n	800d85c <USB_EPStartXfer+0xade>
 800d846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d848:	881b      	ldrh	r3, [r3, #0]
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d854:	b29a      	uxth	r2, r3
 800d856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d858:	801a      	strh	r2, [r3, #0]
 800d85a:	e041      	b.n	800d8e0 <USB_EPStartXfer+0xb62>
 800d85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d860:	085b      	lsrs	r3, r3, #1
 800d862:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d86a:	f003 0301 	and.w	r3, r3, #1
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d004      	beq.n	800d87c <USB_EPStartXfer+0xafe>
 800d872:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d876:	3301      	adds	r3, #1
 800d878:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d87c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d87e:	881b      	ldrh	r3, [r3, #0]
 800d880:	b29a      	uxth	r2, r3
 800d882:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d886:	b29b      	uxth	r3, r3
 800d888:	029b      	lsls	r3, r3, #10
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	4313      	orrs	r3, r2
 800d88e:	b29a      	uxth	r2, r3
 800d890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d892:	801a      	strh	r2, [r3, #0]
 800d894:	e024      	b.n	800d8e0 <USB_EPStartXfer+0xb62>
 800d896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d89a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	785b      	ldrb	r3, [r3, #1]
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d11c      	bne.n	800d8e0 <USB_EPStartXfer+0xb62>
 800d8a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8ba:	4413      	add	r3, r2
 800d8bc:	673b      	str	r3, [r7, #112]	; 0x70
 800d8be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	00da      	lsls	r2, r3, #3
 800d8cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8ce:	4413      	add	r3, r2
 800d8d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d8d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d8de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d8e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	895b      	ldrh	r3, [r3, #10]
 800d8ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d8f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	6959      	ldr	r1, [r3, #20]
 800d8fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d900:	b29b      	uxth	r3, r3
 800d902:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d906:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d90a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d90e:	6800      	ldr	r0, [r0, #0]
 800d910:	f000 ff41 	bl	800e796 <USB_WritePMA>
 800d914:	e0ca      	b.n	800daac <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d91a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	785b      	ldrb	r3, [r3, #1]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d177      	bne.n	800da16 <USB_EPStartXfer+0xc98>
 800d926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d92a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d936:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d940:	b29b      	uxth	r3, r3
 800d942:	461a      	mov	r2, r3
 800d944:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d946:	4413      	add	r3, r2
 800d948:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d94e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	00da      	lsls	r2, r3, #3
 800d958:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d95a:	4413      	add	r3, r2
 800d95c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d960:	67bb      	str	r3, [r7, #120]	; 0x78
 800d962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d964:	881b      	ldrh	r3, [r3, #0]
 800d966:	b29b      	uxth	r3, r3
 800d968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d970:	801a      	strh	r2, [r3, #0]
 800d972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d976:	2b3e      	cmp	r3, #62	; 0x3e
 800d978:	d921      	bls.n	800d9be <USB_EPStartXfer+0xc40>
 800d97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d97e:	095b      	lsrs	r3, r3, #5
 800d980:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d988:	f003 031f 	and.w	r3, r3, #31
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d104      	bne.n	800d99a <USB_EPStartXfer+0xc1c>
 800d990:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d994:	3b01      	subs	r3, #1
 800d996:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d99a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d99c:	881b      	ldrh	r3, [r3, #0]
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	029b      	lsls	r3, r3, #10
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9b6:	b29a      	uxth	r2, r3
 800d9b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9ba:	801a      	strh	r2, [r3, #0]
 800d9bc:	e05c      	b.n	800da78 <USB_EPStartXfer+0xcfa>
 800d9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10a      	bne.n	800d9dc <USB_EPStartXfer+0xc5e>
 800d9c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9c8:	881b      	ldrh	r3, [r3, #0]
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9d8:	801a      	strh	r2, [r3, #0]
 800d9da:	e04d      	b.n	800da78 <USB_EPStartXfer+0xcfa>
 800d9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9e0:	085b      	lsrs	r3, r3, #1
 800d9e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d9e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9ea:	f003 0301 	and.w	r3, r3, #1
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d004      	beq.n	800d9fc <USB_EPStartXfer+0xc7e>
 800d9f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d9fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	b29a      	uxth	r2, r3
 800da02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800da06:	b29b      	uxth	r3, r3
 800da08:	029b      	lsls	r3, r3, #10
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	4313      	orrs	r3, r2
 800da0e:	b29a      	uxth	r2, r3
 800da10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da12:	801a      	strh	r2, [r3, #0]
 800da14:	e030      	b.n	800da78 <USB_EPStartXfer+0xcfa>
 800da16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	785b      	ldrb	r3, [r3, #1]
 800da22:	2b01      	cmp	r3, #1
 800da24:	d128      	bne.n	800da78 <USB_EPStartXfer+0xcfa>
 800da26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800da34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da42:	b29b      	uxth	r3, r3
 800da44:	461a      	mov	r2, r3
 800da46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da4a:	4413      	add	r3, r2
 800da4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800da50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	00da      	lsls	r2, r3, #3
 800da5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800da62:	4413      	add	r3, r2
 800da64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800da68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800da6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da70:	b29a      	uxth	r2, r3
 800da72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800da76:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800da78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	891b      	ldrh	r3, [r3, #8]
 800da84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800da88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	6959      	ldr	r1, [r3, #20]
 800da94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da98:	b29b      	uxth	r3, r3
 800da9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800da9e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800daa2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800daa6:	6800      	ldr	r0, [r0, #0]
 800daa8:	f000 fe75 	bl	800e796 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800daac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	009b      	lsls	r3, r3, #2
 800dac4:	4413      	add	r3, r2
 800dac6:	881b      	ldrh	r3, [r3, #0]
 800dac8:	b29b      	uxth	r3, r3
 800daca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dad2:	817b      	strh	r3, [r7, #10]
 800dad4:	897b      	ldrh	r3, [r7, #10]
 800dad6:	f083 0310 	eor.w	r3, r3, #16
 800dada:	817b      	strh	r3, [r7, #10]
 800dadc:	897b      	ldrh	r3, [r7, #10]
 800dade:	f083 0320 	eor.w	r3, r3, #32
 800dae2:	817b      	strh	r3, [r7, #10]
 800dae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800daec:	681a      	ldr	r2, [r3, #0]
 800daee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	441a      	add	r2, r3
 800dafe:	897b      	ldrh	r3, [r7, #10]
 800db00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db10:	b29b      	uxth	r3, r3
 800db12:	8013      	strh	r3, [r2, #0]
 800db14:	f000 bcde 	b.w	800e4d4 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800db18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	7b1b      	ldrb	r3, [r3, #12]
 800db24:	2b00      	cmp	r3, #0
 800db26:	f040 80bb 	bne.w	800dca0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800db2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	699a      	ldr	r2, [r3, #24]
 800db36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	691b      	ldr	r3, [r3, #16]
 800db42:	429a      	cmp	r2, r3
 800db44:	d917      	bls.n	800db76 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800db46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800db56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	699a      	ldr	r2, [r3, #24]
 800db62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db66:	1ad2      	subs	r2, r2, r3
 800db68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	619a      	str	r2, [r3, #24]
 800db74:	e00e      	b.n	800db94 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800db76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	699b      	ldr	r3, [r3, #24]
 800db82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800db86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2200      	movs	r2, #0
 800db92:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800db94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dbb8:	4413      	add	r3, r2
 800dbba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dbbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	00da      	lsls	r2, r3, #3
 800dbcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dbd0:	4413      	add	r3, r2
 800dbd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dbd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dbda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbde:	881b      	ldrh	r3, [r3, #0]
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dbe6:	b29a      	uxth	r2, r3
 800dbe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dbec:	801a      	strh	r2, [r3, #0]
 800dbee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbf2:	2b3e      	cmp	r3, #62	; 0x3e
 800dbf4:	d924      	bls.n	800dc40 <USB_EPStartXfer+0xec2>
 800dbf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbfa:	095b      	lsrs	r3, r3, #5
 800dbfc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dc00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc04:	f003 031f 	and.w	r3, r3, #31
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d104      	bne.n	800dc16 <USB_EPStartXfer+0xe98>
 800dc0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dc10:	3b01      	subs	r3, #1
 800dc12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dc16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc1a:	881b      	ldrh	r3, [r3, #0]
 800dc1c:	b29a      	uxth	r2, r3
 800dc1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	029b      	lsls	r3, r3, #10
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	4313      	orrs	r3, r2
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc3a:	801a      	strh	r2, [r3, #0]
 800dc3c:	f000 bc10 	b.w	800e460 <USB_EPStartXfer+0x16e2>
 800dc40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10c      	bne.n	800dc62 <USB_EPStartXfer+0xee4>
 800dc48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc4c:	881b      	ldrh	r3, [r3, #0]
 800dc4e:	b29b      	uxth	r3, r3
 800dc50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc5e:	801a      	strh	r2, [r3, #0]
 800dc60:	e3fe      	b.n	800e460 <USB_EPStartXfer+0x16e2>
 800dc62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc66:	085b      	lsrs	r3, r3, #1
 800dc68:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dc6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc70:	f003 0301 	and.w	r3, r3, #1
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d004      	beq.n	800dc82 <USB_EPStartXfer+0xf04>
 800dc78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dc7c:	3301      	adds	r3, #1
 800dc7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dc82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc86:	881b      	ldrh	r3, [r3, #0]
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	029b      	lsls	r3, r3, #10
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	4313      	orrs	r3, r2
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc9c:	801a      	strh	r2, [r3, #0]
 800dc9e:	e3df      	b.n	800e460 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800dca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	78db      	ldrb	r3, [r3, #3]
 800dcac:	2b02      	cmp	r3, #2
 800dcae:	f040 8218 	bne.w	800e0e2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800dcb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	785b      	ldrb	r3, [r3, #1]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	f040 809d 	bne.w	800ddfe <USB_EPStartXfer+0x1080>
 800dcc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dcd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	461a      	mov	r2, r3
 800dce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dce8:	4413      	add	r3, r2
 800dcea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dcee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	00da      	lsls	r2, r3, #3
 800dcfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dd00:	4413      	add	r3, r2
 800dd02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800dd06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dd0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd0e:	881b      	ldrh	r3, [r3, #0]
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd16:	b29a      	uxth	r2, r3
 800dd18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd1c:	801a      	strh	r2, [r3, #0]
 800dd1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	691b      	ldr	r3, [r3, #16]
 800dd2a:	2b3e      	cmp	r3, #62	; 0x3e
 800dd2c:	d92b      	bls.n	800dd86 <USB_EPStartXfer+0x1008>
 800dd2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	691b      	ldr	r3, [r3, #16]
 800dd3a:	095b      	lsrs	r3, r3, #5
 800dd3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dd40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	691b      	ldr	r3, [r3, #16]
 800dd4c:	f003 031f 	and.w	r3, r3, #31
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d104      	bne.n	800dd5e <USB_EPStartXfer+0xfe0>
 800dd54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd58:	3b01      	subs	r3, #1
 800dd5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dd5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd62:	881b      	ldrh	r3, [r3, #0]
 800dd64:	b29a      	uxth	r2, r3
 800dd66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	029b      	lsls	r3, r3, #10
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	4313      	orrs	r3, r2
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd82:	801a      	strh	r2, [r3, #0]
 800dd84:	e070      	b.n	800de68 <USB_EPStartXfer+0x10ea>
 800dd86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	691b      	ldr	r3, [r3, #16]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d10c      	bne.n	800ddb0 <USB_EPStartXfer+0x1032>
 800dd96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dd9a:	881b      	ldrh	r3, [r3, #0]
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dda2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dda6:	b29a      	uxth	r2, r3
 800dda8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ddac:	801a      	strh	r2, [r3, #0]
 800ddae:	e05b      	b.n	800de68 <USB_EPStartXfer+0x10ea>
 800ddb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	691b      	ldr	r3, [r3, #16]
 800ddbc:	085b      	lsrs	r3, r3, #1
 800ddbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ddc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	691b      	ldr	r3, [r3, #16]
 800ddce:	f003 0301 	and.w	r3, r3, #1
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d004      	beq.n	800dde0 <USB_EPStartXfer+0x1062>
 800ddd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddda:	3301      	adds	r3, #1
 800dddc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dde0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800dde4:	881b      	ldrh	r3, [r3, #0]
 800dde6:	b29a      	uxth	r2, r3
 800dde8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	029b      	lsls	r3, r3, #10
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ddfa:	801a      	strh	r2, [r3, #0]
 800ddfc:	e034      	b.n	800de68 <USB_EPStartXfer+0x10ea>
 800ddfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	785b      	ldrb	r3, [r3, #1]
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d12c      	bne.n	800de68 <USB_EPStartXfer+0x10ea>
 800de0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800de1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	461a      	mov	r2, r3
 800de2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de32:	4413      	add	r3, r2
 800de34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800de38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	00da      	lsls	r2, r3, #3
 800de46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800de4a:	4413      	add	r3, r2
 800de4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800de50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800de54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	691b      	ldr	r3, [r3, #16]
 800de60:	b29a      	uxth	r2, r3
 800de62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800de66:	801a      	strh	r2, [r3, #0]
 800de68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800de76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	785b      	ldrb	r3, [r3, #1]
 800de82:	2b00      	cmp	r3, #0
 800de84:	f040 809d 	bne.w	800dfc2 <USB_EPStartXfer+0x1244>
 800de88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800de96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	461a      	mov	r2, r3
 800dea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800deac:	4413      	add	r3, r2
 800deae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800deb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800deb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	00da      	lsls	r2, r3, #3
 800dec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dec4:	4413      	add	r3, r2
 800dec6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800deca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dece:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ded2:	881b      	ldrh	r3, [r3, #0]
 800ded4:	b29b      	uxth	r3, r3
 800ded6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800deda:	b29a      	uxth	r2, r3
 800dedc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dee0:	801a      	strh	r2, [r3, #0]
 800dee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	691b      	ldr	r3, [r3, #16]
 800deee:	2b3e      	cmp	r3, #62	; 0x3e
 800def0:	d92b      	bls.n	800df4a <USB_EPStartXfer+0x11cc>
 800def2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800def6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	691b      	ldr	r3, [r3, #16]
 800defe:	095b      	lsrs	r3, r3, #5
 800df00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800df04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	691b      	ldr	r3, [r3, #16]
 800df10:	f003 031f 	and.w	r3, r3, #31
 800df14:	2b00      	cmp	r3, #0
 800df16:	d104      	bne.n	800df22 <USB_EPStartXfer+0x11a4>
 800df18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df1c:	3b01      	subs	r3, #1
 800df1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800df22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df26:	881b      	ldrh	r3, [r3, #0]
 800df28:	b29a      	uxth	r2, r3
 800df2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df2e:	b29b      	uxth	r3, r3
 800df30:	029b      	lsls	r3, r3, #10
 800df32:	b29b      	uxth	r3, r3
 800df34:	4313      	orrs	r3, r2
 800df36:	b29b      	uxth	r3, r3
 800df38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df40:	b29a      	uxth	r2, r3
 800df42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df46:	801a      	strh	r2, [r3, #0]
 800df48:	e069      	b.n	800e01e <USB_EPStartXfer+0x12a0>
 800df4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	691b      	ldr	r3, [r3, #16]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d10c      	bne.n	800df74 <USB_EPStartXfer+0x11f6>
 800df5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df5e:	881b      	ldrh	r3, [r3, #0]
 800df60:	b29b      	uxth	r3, r3
 800df62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800df70:	801a      	strh	r2, [r3, #0]
 800df72:	e054      	b.n	800e01e <USB_EPStartXfer+0x12a0>
 800df74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	691b      	ldr	r3, [r3, #16]
 800df80:	085b      	lsrs	r3, r3, #1
 800df82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800df86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	691b      	ldr	r3, [r3, #16]
 800df92:	f003 0301 	and.w	r3, r3, #1
 800df96:	2b00      	cmp	r3, #0
 800df98:	d004      	beq.n	800dfa4 <USB_EPStartXfer+0x1226>
 800df9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df9e:	3301      	adds	r3, #1
 800dfa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dfa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfa8:	881b      	ldrh	r3, [r3, #0]
 800dfaa:	b29a      	uxth	r2, r3
 800dfac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	029b      	lsls	r3, r3, #10
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	b29a      	uxth	r2, r3
 800dfba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfbe:	801a      	strh	r2, [r3, #0]
 800dfc0:	e02d      	b.n	800e01e <USB_EPStartXfer+0x12a0>
 800dfc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	785b      	ldrb	r3, [r3, #1]
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d125      	bne.n	800e01e <USB_EPStartXfer+0x12a0>
 800dfd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dfe8:	4413      	add	r3, r2
 800dfea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dfee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	00da      	lsls	r2, r3, #3
 800dffc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e000:	4413      	add	r3, r2
 800e002:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e00a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e00e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	691b      	ldr	r3, [r3, #16]
 800e016:	b29a      	uxth	r2, r3
 800e018:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e01c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e01e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	69db      	ldr	r3, [r3, #28]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f000 8218 	beq.w	800e460 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e034:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e03e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	4413      	add	r3, r2
 800e04a:	881b      	ldrh	r3, [r3, #0]
 800e04c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e050:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d005      	beq.n	800e068 <USB_EPStartXfer+0x12ea>
 800e05c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e064:	2b00      	cmp	r3, #0
 800e066:	d10d      	bne.n	800e084 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e068:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e06c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e070:	2b00      	cmp	r3, #0
 800e072:	f040 81f5 	bne.w	800e460 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e076:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800e07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e07e:	2b00      	cmp	r3, #0
 800e080:	f040 81ee 	bne.w	800e460 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e088:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	4413      	add	r3, r2
 800e09e:	881b      	ldrh	r3, [r3, #0]
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e0a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0aa:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800e0ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	441a      	add	r2, r3
 800e0c8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800e0cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e0d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e0d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	8013      	strh	r3, [r2, #0]
 800e0e0:	e1be      	b.n	800e460 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	78db      	ldrb	r3, [r3, #3]
 800e0ee:	2b01      	cmp	r3, #1
 800e0f0:	f040 81b4 	bne.w	800e45c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	699a      	ldr	r2, [r3, #24]
 800e100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	691b      	ldr	r3, [r3, #16]
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d917      	bls.n	800e140 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800e110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	691b      	ldr	r3, [r3, #16]
 800e11c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800e120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	699a      	ldr	r2, [r3, #24]
 800e12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e130:	1ad2      	subs	r2, r2, r3
 800e132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	619a      	str	r2, [r3, #24]
 800e13e:	e00e      	b.n	800e15e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800e140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	699b      	ldr	r3, [r3, #24]
 800e14c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800e150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2200      	movs	r2, #0
 800e15c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	785b      	ldrb	r3, [r3, #1]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f040 8085 	bne.w	800e27a <USB_EPStartXfer+0x14fc>
 800e170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e17e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	461a      	mov	r2, r3
 800e190:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e194:	4413      	add	r3, r2
 800e196:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e19e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	00da      	lsls	r2, r3, #3
 800e1a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e1ac:	4413      	add	r3, r2
 800e1ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e1b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e1b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e1ba:	881b      	ldrh	r3, [r3, #0]
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e1c2:	b29a      	uxth	r2, r3
 800e1c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e1c8:	801a      	strh	r2, [r3, #0]
 800e1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1ce:	2b3e      	cmp	r3, #62	; 0x3e
 800e1d0:	d923      	bls.n	800e21a <USB_EPStartXfer+0x149c>
 800e1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1d6:	095b      	lsrs	r3, r3, #5
 800e1d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1e0:	f003 031f 	and.w	r3, r3, #31
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d104      	bne.n	800e1f2 <USB_EPStartXfer+0x1474>
 800e1e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1ec:	3b01      	subs	r3, #1
 800e1ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e1f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e1f6:	881b      	ldrh	r3, [r3, #0]
 800e1f8:	b29a      	uxth	r2, r3
 800e1fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	029b      	lsls	r3, r3, #10
 800e202:	b29b      	uxth	r3, r3
 800e204:	4313      	orrs	r3, r2
 800e206:	b29b      	uxth	r3, r3
 800e208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e20c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e210:	b29a      	uxth	r2, r3
 800e212:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e216:	801a      	strh	r2, [r3, #0]
 800e218:	e060      	b.n	800e2dc <USB_EPStartXfer+0x155e>
 800e21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d10c      	bne.n	800e23c <USB_EPStartXfer+0x14be>
 800e222:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e226:	881b      	ldrh	r3, [r3, #0]
 800e228:	b29b      	uxth	r3, r3
 800e22a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e22e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e232:	b29a      	uxth	r2, r3
 800e234:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e238:	801a      	strh	r2, [r3, #0]
 800e23a:	e04f      	b.n	800e2dc <USB_EPStartXfer+0x155e>
 800e23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e240:	085b      	lsrs	r3, r3, #1
 800e242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e24a:	f003 0301 	and.w	r3, r3, #1
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d004      	beq.n	800e25c <USB_EPStartXfer+0x14de>
 800e252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e256:	3301      	adds	r3, #1
 800e258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e25c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e260:	881b      	ldrh	r3, [r3, #0]
 800e262:	b29a      	uxth	r2, r3
 800e264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e268:	b29b      	uxth	r3, r3
 800e26a:	029b      	lsls	r3, r3, #10
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	4313      	orrs	r3, r2
 800e270:	b29a      	uxth	r2, r3
 800e272:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e276:	801a      	strh	r2, [r3, #0]
 800e278:	e030      	b.n	800e2dc <USB_EPStartXfer+0x155e>
 800e27a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e27e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	785b      	ldrb	r3, [r3, #1]
 800e286:	2b01      	cmp	r3, #1
 800e288:	d128      	bne.n	800e2dc <USB_EPStartXfer+0x155e>
 800e28a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e28e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e29c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e2ae:	4413      	add	r3, r2
 800e2b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e2b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	00da      	lsls	r2, r3, #3
 800e2c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e2c6:	4413      	add	r3, r2
 800e2c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e2cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e2d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2d4:	b29a      	uxth	r2, r3
 800e2d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800e2da:	801a      	strh	r2, [r3, #0]
 800e2dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e2ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	785b      	ldrb	r3, [r3, #1]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	f040 8085 	bne.w	800e406 <USB_EPStartXfer+0x1688>
 800e2fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e300:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e30a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e30e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e318:	b29b      	uxth	r3, r3
 800e31a:	461a      	mov	r2, r3
 800e31c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e320:	4413      	add	r3, r2
 800e322:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e32a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	00da      	lsls	r2, r3, #3
 800e334:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800e338:	4413      	add	r3, r2
 800e33a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e33e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e342:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e346:	881b      	ldrh	r3, [r3, #0]
 800e348:	b29b      	uxth	r3, r3
 800e34a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e34e:	b29a      	uxth	r2, r3
 800e350:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e354:	801a      	strh	r2, [r3, #0]
 800e356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e35a:	2b3e      	cmp	r3, #62	; 0x3e
 800e35c:	d923      	bls.n	800e3a6 <USB_EPStartXfer+0x1628>
 800e35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e362:	095b      	lsrs	r3, r3, #5
 800e364:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e36c:	f003 031f 	and.w	r3, r3, #31
 800e370:	2b00      	cmp	r3, #0
 800e372:	d104      	bne.n	800e37e <USB_EPStartXfer+0x1600>
 800e374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e378:	3b01      	subs	r3, #1
 800e37a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e37e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e382:	881b      	ldrh	r3, [r3, #0]
 800e384:	b29a      	uxth	r2, r3
 800e386:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	029b      	lsls	r3, r3, #10
 800e38e:	b29b      	uxth	r3, r3
 800e390:	4313      	orrs	r3, r2
 800e392:	b29b      	uxth	r3, r3
 800e394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e39c:	b29a      	uxth	r2, r3
 800e39e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e3a2:	801a      	strh	r2, [r3, #0]
 800e3a4:	e05c      	b.n	800e460 <USB_EPStartXfer+0x16e2>
 800e3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d10c      	bne.n	800e3c8 <USB_EPStartXfer+0x164a>
 800e3ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e3b2:	881b      	ldrh	r3, [r3, #0]
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3be:	b29a      	uxth	r2, r3
 800e3c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e3c4:	801a      	strh	r2, [r3, #0]
 800e3c6:	e04b      	b.n	800e460 <USB_EPStartXfer+0x16e2>
 800e3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3cc:	085b      	lsrs	r3, r3, #1
 800e3ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3d6:	f003 0301 	and.w	r3, r3, #1
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d004      	beq.n	800e3e8 <USB_EPStartXfer+0x166a>
 800e3de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e3e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e3ec:	881b      	ldrh	r3, [r3, #0]
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	029b      	lsls	r3, r3, #10
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	b29a      	uxth	r2, r3
 800e3fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e402:	801a      	strh	r2, [r3, #0]
 800e404:	e02c      	b.n	800e460 <USB_EPStartXfer+0x16e2>
 800e406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e40a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	785b      	ldrb	r3, [r3, #1]
 800e412:	2b01      	cmp	r3, #1
 800e414:	d124      	bne.n	800e460 <USB_EPStartXfer+0x16e2>
 800e416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e41a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e424:	b29b      	uxth	r3, r3
 800e426:	461a      	mov	r2, r3
 800e428:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e42c:	4413      	add	r3, r2
 800e42e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	00da      	lsls	r2, r3, #3
 800e440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800e444:	4413      	add	r3, r2
 800e446:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e44a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e44e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e452:	b29a      	uxth	r2, r3
 800e454:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e458:	801a      	strh	r2, [r3, #0]
 800e45a:	e001      	b.n	800e460 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800e45c:	2301      	movs	r3, #1
 800e45e:	e03a      	b.n	800e4d6 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e46e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	009b      	lsls	r3, r3, #2
 800e478:	4413      	add	r3, r2
 800e47a:	881b      	ldrh	r3, [r3, #0]
 800e47c:	b29b      	uxth	r3, r3
 800e47e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e486:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e48a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e48e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e492:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e496:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e49a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e49e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800e4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	009b      	lsls	r3, r3, #2
 800e4ba:	441a      	add	r2, r3
 800e4bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800e4c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e4c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e4c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e4cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e4d4:	2300      	movs	r3, #0
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b085      	sub	sp, #20
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	785b      	ldrb	r3, [r3, #1]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d020      	beq.n	800e534 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	009b      	lsls	r3, r3, #2
 800e4fa:	4413      	add	r3, r2
 800e4fc:	881b      	ldrh	r3, [r3, #0]
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e508:	81bb      	strh	r3, [r7, #12]
 800e50a:	89bb      	ldrh	r3, [r7, #12]
 800e50c:	f083 0310 	eor.w	r3, r3, #16
 800e510:	81bb      	strh	r3, [r7, #12]
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	441a      	add	r2, r3
 800e51c:	89bb      	ldrh	r3, [r7, #12]
 800e51e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e52a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e52e:	b29b      	uxth	r3, r3
 800e530:	8013      	strh	r3, [r2, #0]
 800e532:	e01f      	b.n	800e574 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	4413      	add	r3, r2
 800e53e:	881b      	ldrh	r3, [r3, #0]
 800e540:	b29b      	uxth	r3, r3
 800e542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e54a:	81fb      	strh	r3, [r7, #14]
 800e54c:	89fb      	ldrh	r3, [r7, #14]
 800e54e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e552:	81fb      	strh	r3, [r7, #14]
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	009b      	lsls	r3, r3, #2
 800e55c:	441a      	add	r2, r3
 800e55e:	89fb      	ldrh	r3, [r7, #14]
 800e560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e570:	b29b      	uxth	r3, r3
 800e572:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e574:	2300      	movs	r3, #0
}
 800e576:	4618      	mov	r0, r3
 800e578:	3714      	adds	r7, #20
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr

0800e582 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e582:	b480      	push	{r7}
 800e584:	b087      	sub	sp, #28
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
 800e58a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	7b1b      	ldrb	r3, [r3, #12]
 800e590:	2b00      	cmp	r3, #0
 800e592:	f040 809d 	bne.w	800e6d0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	785b      	ldrb	r3, [r3, #1]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d04c      	beq.n	800e638 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	683b      	ldr	r3, [r7, #0]
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	009b      	lsls	r3, r3, #2
 800e5a6:	4413      	add	r3, r2
 800e5a8:	881b      	ldrh	r3, [r3, #0]
 800e5aa:	823b      	strh	r3, [r7, #16]
 800e5ac:	8a3b      	ldrh	r3, [r7, #16]
 800e5ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d01b      	beq.n	800e5ee <USB_EPClearStall+0x6c>
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	4413      	add	r3, r2
 800e5c0:	881b      	ldrh	r3, [r3, #0]
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e5c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e5cc:	81fb      	strh	r3, [r7, #14]
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	009b      	lsls	r3, r3, #2
 800e5d6:	441a      	add	r2, r3
 800e5d8:	89fb      	ldrh	r3, [r7, #14]
 800e5da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e5de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e5e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e5e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	78db      	ldrb	r3, [r3, #3]
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d06c      	beq.n	800e6d0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	781b      	ldrb	r3, [r3, #0]
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	4413      	add	r3, r2
 800e600:	881b      	ldrh	r3, [r3, #0]
 800e602:	b29b      	uxth	r3, r3
 800e604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e60c:	81bb      	strh	r3, [r7, #12]
 800e60e:	89bb      	ldrh	r3, [r7, #12]
 800e610:	f083 0320 	eor.w	r3, r3, #32
 800e614:	81bb      	strh	r3, [r7, #12]
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	441a      	add	r2, r3
 800e620:	89bb      	ldrh	r3, [r7, #12]
 800e622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e62a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e62e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e632:	b29b      	uxth	r3, r3
 800e634:	8013      	strh	r3, [r2, #0]
 800e636:	e04b      	b.n	800e6d0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	009b      	lsls	r3, r3, #2
 800e640:	4413      	add	r3, r2
 800e642:	881b      	ldrh	r3, [r3, #0]
 800e644:	82fb      	strh	r3, [r7, #22]
 800e646:	8afb      	ldrh	r3, [r7, #22]
 800e648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d01b      	beq.n	800e688 <USB_EPClearStall+0x106>
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	009b      	lsls	r3, r3, #2
 800e658:	4413      	add	r3, r2
 800e65a:	881b      	ldrh	r3, [r3, #0]
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e666:	82bb      	strh	r3, [r7, #20]
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	009b      	lsls	r3, r3, #2
 800e670:	441a      	add	r2, r3
 800e672:	8abb      	ldrh	r3, [r7, #20]
 800e674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e67c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e684:	b29b      	uxth	r3, r3
 800e686:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	4413      	add	r3, r2
 800e692:	881b      	ldrh	r3, [r3, #0]
 800e694:	b29b      	uxth	r3, r3
 800e696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e69e:	827b      	strh	r3, [r7, #18]
 800e6a0:	8a7b      	ldrh	r3, [r7, #18]
 800e6a2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e6a6:	827b      	strh	r3, [r7, #18]
 800e6a8:	8a7b      	ldrh	r3, [r7, #18]
 800e6aa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e6ae:	827b      	strh	r3, [r7, #18]
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	441a      	add	r2, r3
 800e6ba:	8a7b      	ldrh	r3, [r7, #18]
 800e6bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e6c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e6c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e6c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6cc:	b29b      	uxth	r3, r3
 800e6ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e6d0:	2300      	movs	r3, #0
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	371c      	adds	r7, #28
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6dc:	4770      	bx	lr

0800e6de <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e6de:	b480      	push	{r7}
 800e6e0:	b083      	sub	sp, #12
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e6ea:	78fb      	ldrb	r3, [r7, #3]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d103      	bne.n	800e6f8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2280      	movs	r2, #128	; 0x80
 800e6f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800e6f8:	2300      	movs	r3, #0
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	370c      	adds	r7, #12
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr

0800e706 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e706:	b480      	push	{r7}
 800e708:	b083      	sub	sp, #12
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e714:	b29b      	uxth	r3, r3
 800e716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e71a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e71e:	b29a      	uxth	r2, r3
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e726:	2300      	movs	r3, #0
}
 800e728:	4618      	mov	r0, r3
 800e72a:	370c      	adds	r7, #12
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr

0800e734 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e742:	b29b      	uxth	r3, r3
 800e744:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e748:	b29a      	uxth	r2, r3
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e750:	2300      	movs	r3, #0
}
 800e752:	4618      	mov	r0, r3
 800e754:	370c      	adds	r7, #12
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr

0800e75e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e75e:	b480      	push	{r7}
 800e760:	b085      	sub	sp, #20
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e76c:	b29b      	uxth	r3, r3
 800e76e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e770:	68fb      	ldr	r3, [r7, #12]
}
 800e772:	4618      	mov	r0, r3
 800e774:	3714      	adds	r7, #20
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr

0800e77e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800e77e:	b480      	push	{r7}
 800e780:	b083      	sub	sp, #12
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
 800e786:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800e788:	2300      	movs	r3, #0
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	370c      	adds	r7, #12
 800e78e:	46bd      	mov	sp, r7
 800e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e794:	4770      	bx	lr

0800e796 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e796:	b480      	push	{r7}
 800e798:	b08b      	sub	sp, #44	; 0x2c
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	60f8      	str	r0, [r7, #12]
 800e79e:	60b9      	str	r1, [r7, #8]
 800e7a0:	4611      	mov	r1, r2
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	80fb      	strh	r3, [r7, #6]
 800e7a8:	4613      	mov	r3, r2
 800e7aa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e7ac:	88bb      	ldrh	r3, [r7, #4]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	085b      	lsrs	r3, r3, #1
 800e7b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e7bc:	88fa      	ldrh	r2, [r7, #6]
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e7c6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	627b      	str	r3, [r7, #36]	; 0x24
 800e7cc:	e01b      	b.n	800e806 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e7d4:	69fb      	ldr	r3, [r7, #28]
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	021b      	lsls	r3, r3, #8
 800e7dc:	b21a      	sxth	r2, r3
 800e7de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e7e2:	4313      	orrs	r3, r2
 800e7e4:	b21b      	sxth	r3, r3
 800e7e6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e7e8:	6a3b      	ldr	r3, [r7, #32]
 800e7ea:	8a7a      	ldrh	r2, [r7, #18]
 800e7ec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e7ee:	6a3b      	ldr	r3, [r7, #32]
 800e7f0:	3302      	adds	r3, #2
 800e7f2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e7fa:	69fb      	ldr	r3, [r7, #28]
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e802:	3b01      	subs	r3, #1
 800e804:	627b      	str	r3, [r7, #36]	; 0x24
 800e806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d1e0      	bne.n	800e7ce <USB_WritePMA+0x38>
  }
}
 800e80c:	bf00      	nop
 800e80e:	bf00      	nop
 800e810:	372c      	adds	r7, #44	; 0x2c
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr

0800e81a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e81a:	b480      	push	{r7}
 800e81c:	b08b      	sub	sp, #44	; 0x2c
 800e81e:	af00      	add	r7, sp, #0
 800e820:	60f8      	str	r0, [r7, #12]
 800e822:	60b9      	str	r1, [r7, #8]
 800e824:	4611      	mov	r1, r2
 800e826:	461a      	mov	r2, r3
 800e828:	460b      	mov	r3, r1
 800e82a:	80fb      	strh	r3, [r7, #6]
 800e82c:	4613      	mov	r3, r2
 800e82e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e830:	88bb      	ldrh	r3, [r7, #4]
 800e832:	085b      	lsrs	r3, r3, #1
 800e834:	b29b      	uxth	r3, r3
 800e836:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e840:	88fa      	ldrh	r2, [r7, #6]
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	4413      	add	r3, r2
 800e846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e84a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	627b      	str	r3, [r7, #36]	; 0x24
 800e850:	e018      	b.n	800e884 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e852:	6a3b      	ldr	r3, [r7, #32]
 800e854:	881b      	ldrh	r3, [r3, #0]
 800e856:	b29b      	uxth	r3, r3
 800e858:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e85a:	6a3b      	ldr	r3, [r7, #32]
 800e85c:	3302      	adds	r3, #2
 800e85e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	b2da      	uxtb	r2, r3
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e868:	69fb      	ldr	r3, [r7, #28]
 800e86a:	3301      	adds	r3, #1
 800e86c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	0a1b      	lsrs	r3, r3, #8
 800e872:	b2da      	uxtb	r2, r3
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e878:	69fb      	ldr	r3, [r7, #28]
 800e87a:	3301      	adds	r3, #1
 800e87c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e880:	3b01      	subs	r3, #1
 800e882:	627b      	str	r3, [r7, #36]	; 0x24
 800e884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e886:	2b00      	cmp	r3, #0
 800e888:	d1e3      	bne.n	800e852 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e88a:	88bb      	ldrh	r3, [r7, #4]
 800e88c:	f003 0301 	and.w	r3, r3, #1
 800e890:	b29b      	uxth	r3, r3
 800e892:	2b00      	cmp	r3, #0
 800e894:	d007      	beq.n	800e8a6 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e896:	6a3b      	ldr	r3, [r7, #32]
 800e898:	881b      	ldrh	r3, [r3, #0]
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	b2da      	uxtb	r2, r3
 800e8a2:	69fb      	ldr	r3, [r7, #28]
 800e8a4:	701a      	strb	r2, [r3, #0]
  }
}
 800e8a6:	bf00      	nop
 800e8a8:	372c      	adds	r7, #44	; 0x2c
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr
	...

0800e8b4 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b084      	sub	sp, #16
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	460b      	mov	r3, r1
 800e8be:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800e8c0:	2010      	movs	r0, #16
 800e8c2:	f002 f919 	bl	8010af8 <USBD_static_malloc>
 800e8c6:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d109      	bne.n	800e8e2 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	32b0      	adds	r2, #176	; 0xb0
 800e8d8:	2100      	movs	r1, #0
 800e8da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e8de:	2302      	movs	r3, #2
 800e8e0:	e048      	b.n	800e974 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	32b0      	adds	r2, #176	; 0xb0
 800e8ec:	68f9      	ldr	r1, [r7, #12]
 800e8ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	32b0      	adds	r2, #176	; 0xb0
 800e8fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	7c1b      	ldrb	r3, [r3, #16]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d10d      	bne.n	800e92a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800e90e:	4b1b      	ldr	r3, [pc, #108]	; (800e97c <USBD_HID_Init+0xc8>)
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	f003 020f 	and.w	r2, r3, #15
 800e916:	6879      	ldr	r1, [r7, #4]
 800e918:	4613      	mov	r3, r2
 800e91a:	009b      	lsls	r3, r3, #2
 800e91c:	4413      	add	r3, r2
 800e91e:	009b      	lsls	r3, r3, #2
 800e920:	440b      	add	r3, r1
 800e922:	3326      	adds	r3, #38	; 0x26
 800e924:	2207      	movs	r2, #7
 800e926:	801a      	strh	r2, [r3, #0]
 800e928:	e00c      	b.n	800e944 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800e92a:	4b14      	ldr	r3, [pc, #80]	; (800e97c <USBD_HID_Init+0xc8>)
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	f003 020f 	and.w	r2, r3, #15
 800e932:	6879      	ldr	r1, [r7, #4]
 800e934:	4613      	mov	r3, r2
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	4413      	add	r3, r2
 800e93a:	009b      	lsls	r3, r3, #2
 800e93c:	440b      	add	r3, r1
 800e93e:	3326      	adds	r3, #38	; 0x26
 800e940:	220a      	movs	r2, #10
 800e942:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800e944:	4b0d      	ldr	r3, [pc, #52]	; (800e97c <USBD_HID_Init+0xc8>)
 800e946:	7819      	ldrb	r1, [r3, #0]
 800e948:	2304      	movs	r3, #4
 800e94a:	2203      	movs	r2, #3
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f001 fee9 	bl	8010724 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800e952:	4b0a      	ldr	r3, [pc, #40]	; (800e97c <USBD_HID_Init+0xc8>)
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	f003 020f 	and.w	r2, r3, #15
 800e95a:	6879      	ldr	r1, [r7, #4]
 800e95c:	4613      	mov	r3, r2
 800e95e:	009b      	lsls	r3, r3, #2
 800e960:	4413      	add	r3, r2
 800e962:	009b      	lsls	r3, r3, #2
 800e964:	440b      	add	r3, r1
 800e966:	3324      	adds	r3, #36	; 0x24
 800e968:	2201      	movs	r2, #1
 800e96a:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2200      	movs	r2, #0
 800e970:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800e972:	2300      	movs	r3, #0
}
 800e974:	4618      	mov	r0, r3
 800e976:	3710      	adds	r7, #16
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}
 800e97c:	200000ea 	.word	0x200000ea

0800e980 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b082      	sub	sp, #8
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	460b      	mov	r3, r1
 800e98a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800e98c:	4b1f      	ldr	r3, [pc, #124]	; (800ea0c <USBD_HID_DeInit+0x8c>)
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	4619      	mov	r1, r3
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f001 ff04 	bl	80107a0 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800e998:	4b1c      	ldr	r3, [pc, #112]	; (800ea0c <USBD_HID_DeInit+0x8c>)
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	f003 020f 	and.w	r2, r3, #15
 800e9a0:	6879      	ldr	r1, [r7, #4]
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	009b      	lsls	r3, r3, #2
 800e9a6:	4413      	add	r3, r2
 800e9a8:	009b      	lsls	r3, r3, #2
 800e9aa:	440b      	add	r3, r1
 800e9ac:	3324      	adds	r3, #36	; 0x24
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800e9b2:	4b16      	ldr	r3, [pc, #88]	; (800ea0c <USBD_HID_DeInit+0x8c>)
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	f003 020f 	and.w	r2, r3, #15
 800e9ba:	6879      	ldr	r1, [r7, #4]
 800e9bc:	4613      	mov	r3, r2
 800e9be:	009b      	lsls	r3, r3, #2
 800e9c0:	4413      	add	r3, r2
 800e9c2:	009b      	lsls	r3, r3, #2
 800e9c4:	440b      	add	r3, r1
 800e9c6:	3326      	adds	r3, #38	; 0x26
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	32b0      	adds	r2, #176	; 0xb0
 800e9d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d011      	beq.n	800ea02 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	32b0      	adds	r2, #176	; 0xb0
 800e9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f002 f891 	bl	8010b14 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	32b0      	adds	r2, #176	; 0xb0
 800e9fc:	2100      	movs	r1, #0
 800e9fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800ea02:	2300      	movs	r3, #0
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3708      	adds	r7, #8
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	200000ea 	.word	0x200000ea

0800ea10 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b086      	sub	sp, #24
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	32b0      	adds	r2, #176	; 0xb0
 800ea24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea28:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d101      	bne.n	800ea3c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800ea38:	2303      	movs	r3, #3
 800ea3a:	e0e8      	b.n	800ec0e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d046      	beq.n	800ead6 <USBD_HID_Setup+0xc6>
 800ea48:	2b20      	cmp	r3, #32
 800ea4a:	f040 80d8 	bne.w	800ebfe <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	785b      	ldrb	r3, [r3, #1]
 800ea52:	3b02      	subs	r3, #2
 800ea54:	2b09      	cmp	r3, #9
 800ea56:	d836      	bhi.n	800eac6 <USBD_HID_Setup+0xb6>
 800ea58:	a201      	add	r2, pc, #4	; (adr r2, 800ea60 <USBD_HID_Setup+0x50>)
 800ea5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea5e:	bf00      	nop
 800ea60:	0800eab7 	.word	0x0800eab7
 800ea64:	0800ea97 	.word	0x0800ea97
 800ea68:	0800eac7 	.word	0x0800eac7
 800ea6c:	0800eac7 	.word	0x0800eac7
 800ea70:	0800eac7 	.word	0x0800eac7
 800ea74:	0800eac7 	.word	0x0800eac7
 800ea78:	0800eac7 	.word	0x0800eac7
 800ea7c:	0800eac7 	.word	0x0800eac7
 800ea80:	0800eaa5 	.word	0x0800eaa5
 800ea84:	0800ea89 	.word	0x0800ea89
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	885b      	ldrh	r3, [r3, #2]
 800ea8c:	b2db      	uxtb	r3, r3
 800ea8e:	461a      	mov	r2, r3
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	601a      	str	r2, [r3, #0]
          break;
 800ea94:	e01e      	b.n	800ead4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2201      	movs	r2, #1
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f001 fb43 	bl	8010128 <USBD_CtlSendData>
          break;
 800eaa2:	e017      	b.n	800ead4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	885b      	ldrh	r3, [r3, #2]
 800eaa8:	0a1b      	lsrs	r3, r3, #8
 800eaaa:	b29b      	uxth	r3, r3
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	461a      	mov	r2, r3
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	605a      	str	r2, [r3, #4]
          break;
 800eab4:	e00e      	b.n	800ead4 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	3304      	adds	r3, #4
 800eaba:	2201      	movs	r2, #1
 800eabc:	4619      	mov	r1, r3
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f001 fb32 	bl	8010128 <USBD_CtlSendData>
          break;
 800eac4:	e006      	b.n	800ead4 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800eac6:	6839      	ldr	r1, [r7, #0]
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f001 fabc 	bl	8010046 <USBD_CtlError>
          ret = USBD_FAIL;
 800eace:	2303      	movs	r3, #3
 800ead0:	75fb      	strb	r3, [r7, #23]
          break;
 800ead2:	bf00      	nop
      }
      break;
 800ead4:	e09a      	b.n	800ec0c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	785b      	ldrb	r3, [r3, #1]
 800eada:	2b0b      	cmp	r3, #11
 800eadc:	f200 8086 	bhi.w	800ebec <USBD_HID_Setup+0x1dc>
 800eae0:	a201      	add	r2, pc, #4	; (adr r2, 800eae8 <USBD_HID_Setup+0xd8>)
 800eae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae6:	bf00      	nop
 800eae8:	0800eb19 	.word	0x0800eb19
 800eaec:	0800ebfb 	.word	0x0800ebfb
 800eaf0:	0800ebed 	.word	0x0800ebed
 800eaf4:	0800ebed 	.word	0x0800ebed
 800eaf8:	0800ebed 	.word	0x0800ebed
 800eafc:	0800ebed 	.word	0x0800ebed
 800eb00:	0800eb43 	.word	0x0800eb43
 800eb04:	0800ebed 	.word	0x0800ebed
 800eb08:	0800ebed 	.word	0x0800ebed
 800eb0c:	0800ebed 	.word	0x0800ebed
 800eb10:	0800eb9b 	.word	0x0800eb9b
 800eb14:	0800ebc5 	.word	0x0800ebc5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb1e:	b2db      	uxtb	r3, r3
 800eb20:	2b03      	cmp	r3, #3
 800eb22:	d107      	bne.n	800eb34 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800eb24:	f107 030a 	add.w	r3, r7, #10
 800eb28:	2202      	movs	r2, #2
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f001 fafb 	bl	8010128 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eb32:	e063      	b.n	800ebfc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800eb34:	6839      	ldr	r1, [r7, #0]
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f001 fa85 	bl	8010046 <USBD_CtlError>
            ret = USBD_FAIL;
 800eb3c:	2303      	movs	r3, #3
 800eb3e:	75fb      	strb	r3, [r7, #23]
          break;
 800eb40:	e05c      	b.n	800ebfc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	885b      	ldrh	r3, [r3, #2]
 800eb46:	0a1b      	lsrs	r3, r3, #8
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	2b22      	cmp	r3, #34	; 0x22
 800eb4c:	d108      	bne.n	800eb60 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	88db      	ldrh	r3, [r3, #6]
 800eb52:	2b4a      	cmp	r3, #74	; 0x4a
 800eb54:	bf28      	it	cs
 800eb56:	234a      	movcs	r3, #74	; 0x4a
 800eb58:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800eb5a:	4b2f      	ldr	r3, [pc, #188]	; (800ec18 <USBD_HID_Setup+0x208>)
 800eb5c:	613b      	str	r3, [r7, #16]
 800eb5e:	e015      	b.n	800eb8c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	885b      	ldrh	r3, [r3, #2]
 800eb64:	0a1b      	lsrs	r3, r3, #8
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	2b21      	cmp	r3, #33	; 0x21
 800eb6a:	d108      	bne.n	800eb7e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800eb6c:	4b2b      	ldr	r3, [pc, #172]	; (800ec1c <USBD_HID_Setup+0x20c>)
 800eb6e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	88db      	ldrh	r3, [r3, #6]
 800eb74:	2b09      	cmp	r3, #9
 800eb76:	bf28      	it	cs
 800eb78:	2309      	movcs	r3, #9
 800eb7a:	82bb      	strh	r3, [r7, #20]
 800eb7c:	e006      	b.n	800eb8c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800eb7e:	6839      	ldr	r1, [r7, #0]
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f001 fa60 	bl	8010046 <USBD_CtlError>
            ret = USBD_FAIL;
 800eb86:	2303      	movs	r3, #3
 800eb88:	75fb      	strb	r3, [r7, #23]
            break;
 800eb8a:	e037      	b.n	800ebfc <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800eb8c:	8abb      	ldrh	r3, [r7, #20]
 800eb8e:	461a      	mov	r2, r3
 800eb90:	6939      	ldr	r1, [r7, #16]
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f001 fac8 	bl	8010128 <USBD_CtlSendData>
          break;
 800eb98:	e030      	b.n	800ebfc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	2b03      	cmp	r3, #3
 800eba4:	d107      	bne.n	800ebb6 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	3308      	adds	r3, #8
 800ebaa:	2201      	movs	r2, #1
 800ebac:	4619      	mov	r1, r3
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f001 faba 	bl	8010128 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ebb4:	e022      	b.n	800ebfc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800ebb6:	6839      	ldr	r1, [r7, #0]
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f001 fa44 	bl	8010046 <USBD_CtlError>
            ret = USBD_FAIL;
 800ebbe:	2303      	movs	r3, #3
 800ebc0:	75fb      	strb	r3, [r7, #23]
          break;
 800ebc2:	e01b      	b.n	800ebfc <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebca:	b2db      	uxtb	r3, r3
 800ebcc:	2b03      	cmp	r3, #3
 800ebce:	d106      	bne.n	800ebde <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	885b      	ldrh	r3, [r3, #2]
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	461a      	mov	r2, r3
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ebdc:	e00e      	b.n	800ebfc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800ebde:	6839      	ldr	r1, [r7, #0]
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	f001 fa30 	bl	8010046 <USBD_CtlError>
            ret = USBD_FAIL;
 800ebe6:	2303      	movs	r3, #3
 800ebe8:	75fb      	strb	r3, [r7, #23]
          break;
 800ebea:	e007      	b.n	800ebfc <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ebec:	6839      	ldr	r1, [r7, #0]
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f001 fa29 	bl	8010046 <USBD_CtlError>
          ret = USBD_FAIL;
 800ebf4:	2303      	movs	r3, #3
 800ebf6:	75fb      	strb	r3, [r7, #23]
          break;
 800ebf8:	e000      	b.n	800ebfc <USBD_HID_Setup+0x1ec>
          break;
 800ebfa:	bf00      	nop
      }
      break;
 800ebfc:	e006      	b.n	800ec0c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800ebfe:	6839      	ldr	r1, [r7, #0]
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f001 fa20 	bl	8010046 <USBD_CtlError>
      ret = USBD_FAIL;
 800ec06:	2303      	movs	r3, #3
 800ec08:	75fb      	strb	r3, [r7, #23]
      break;
 800ec0a:	bf00      	nop
  }

  return (uint8_t)ret;
 800ec0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3718      	adds	r7, #24
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	200000a0 	.word	0x200000a0
 800ec1c:	20000088 	.word	0x20000088

0800ec20 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b084      	sub	sp, #16
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800ec28:	2181      	movs	r1, #129	; 0x81
 800ec2a:	4809      	ldr	r0, [pc, #36]	; (800ec50 <USBD_HID_GetFSCfgDesc+0x30>)
 800ec2c:	f000 fba9 	bl	800f382 <USBD_GetEpDesc>
 800ec30:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d002      	beq.n	800ec3e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	220a      	movs	r2, #10
 800ec3c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	2222      	movs	r2, #34	; 0x22
 800ec42:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800ec44:	4b02      	ldr	r3, [pc, #8]	; (800ec50 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3710      	adds	r7, #16
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	20000064 	.word	0x20000064

0800ec54 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800ec5c:	2181      	movs	r1, #129	; 0x81
 800ec5e:	4809      	ldr	r0, [pc, #36]	; (800ec84 <USBD_HID_GetHSCfgDesc+0x30>)
 800ec60:	f000 fb8f 	bl	800f382 <USBD_GetEpDesc>
 800ec64:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d002      	beq.n	800ec72 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2207      	movs	r2, #7
 800ec70:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2222      	movs	r2, #34	; 0x22
 800ec76:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800ec78:	4b02      	ldr	r3, [pc, #8]	; (800ec84 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	20000064 	.word	0x20000064

0800ec88 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800ec90:	2181      	movs	r1, #129	; 0x81
 800ec92:	4809      	ldr	r0, [pc, #36]	; (800ecb8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800ec94:	f000 fb75 	bl	800f382 <USBD_GetEpDesc>
 800ec98:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d002      	beq.n	800eca6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	220a      	movs	r2, #10
 800eca4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2222      	movs	r2, #34	; 0x22
 800ecaa:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800ecac:	4b02      	ldr	r3, [pc, #8]	; (800ecb8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
 800ecb6:	bf00      	nop
 800ecb8:	20000064 	.word	0x20000064

0800ecbc <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ecbc:	b480      	push	{r7}
 800ecbe:	b083      	sub	sp, #12
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	32b0      	adds	r2, #176	; 0xb0
 800ecd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	370c      	adds	r7, #12
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	220a      	movs	r2, #10
 800ecf4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800ecf6:	4b03      	ldr	r3, [pc, #12]	; (800ed04 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr
 800ed04:	20000094 	.word	0x20000094

0800ed08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b086      	sub	sp, #24
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	4613      	mov	r3, r2
 800ed14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d101      	bne.n	800ed20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ed1c:	2303      	movs	r3, #3
 800ed1e:	e01f      	b.n	800ed60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2200      	movs	r2, #0
 800ed24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2200      	movs	r2, #0
 800ed34:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d003      	beq.n	800ed46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	68ba      	ldr	r2, [r7, #8]
 800ed42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2201      	movs	r2, #1
 800ed4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	79fa      	ldrb	r2, [r7, #7]
 800ed52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ed54:	68f8      	ldr	r0, [r7, #12]
 800ed56:	f001 fc63 	bl	8010620 <USBD_LL_Init>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ed5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3718      	adds	r7, #24
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ed72:	2300      	movs	r3, #0
 800ed74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d101      	bne.n	800ed80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ed7c:	2303      	movs	r3, #3
 800ed7e:	e025      	b.n	800edcc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	683a      	ldr	r2, [r7, #0]
 800ed84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	32ae      	adds	r2, #174	; 0xae
 800ed92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d00f      	beq.n	800edbc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	32ae      	adds	r2, #174	; 0xae
 800eda6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edac:	f107 020e 	add.w	r2, r7, #14
 800edb0:	4610      	mov	r0, r2
 800edb2:	4798      	blx	r3
 800edb4:	4602      	mov	r2, r0
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800edc2:	1c5a      	adds	r2, r3, #1
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800edca:	2300      	movs	r3, #0
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3710      	adds	r7, #16
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f001 fc6f 	bl	80106c0 <USBD_LL_Start>
 800ede2:	4603      	mov	r3, r0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3708      	adds	r7, #8
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800edf4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	370c      	adds	r7, #12
 800edfa:	46bd      	mov	sp, r7
 800edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee00:	4770      	bx	lr

0800ee02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee02:	b580      	push	{r7, lr}
 800ee04:	b084      	sub	sp, #16
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d009      	beq.n	800ee30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	78fa      	ldrb	r2, [r7, #3]
 800ee26:	4611      	mov	r1, r2
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	4798      	blx	r3
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ee30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3710      	adds	r7, #16
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}

0800ee3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b084      	sub	sp, #16
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
 800ee42:	460b      	mov	r3, r1
 800ee44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee46:	2300      	movs	r3, #0
 800ee48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee50:	685b      	ldr	r3, [r3, #4]
 800ee52:	78fa      	ldrb	r2, [r7, #3]
 800ee54:	4611      	mov	r1, r2
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	4798      	blx	r3
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d001      	beq.n	800ee64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ee60:	2303      	movs	r3, #3
 800ee62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ee64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b084      	sub	sp, #16
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	6078      	str	r0, [r7, #4]
 800ee76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ee7e:	6839      	ldr	r1, [r7, #0]
 800ee80:	4618      	mov	r0, r3
 800ee82:	f001 f8a6 	bl	800ffd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ee94:	461a      	mov	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eea2:	f003 031f 	and.w	r3, r3, #31
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d01a      	beq.n	800eee0 <USBD_LL_SetupStage+0x72>
 800eeaa:	2b02      	cmp	r3, #2
 800eeac:	d822      	bhi.n	800eef4 <USBD_LL_SetupStage+0x86>
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d002      	beq.n	800eeb8 <USBD_LL_SetupStage+0x4a>
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	d00a      	beq.n	800eecc <USBD_LL_SetupStage+0x5e>
 800eeb6:	e01d      	b.n	800eef4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eebe:	4619      	mov	r1, r3
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f000 fad3 	bl	800f46c <USBD_StdDevReq>
 800eec6:	4603      	mov	r3, r0
 800eec8:	73fb      	strb	r3, [r7, #15]
      break;
 800eeca:	e020      	b.n	800ef0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eed2:	4619      	mov	r1, r3
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f000 fb3b 	bl	800f550 <USBD_StdItfReq>
 800eeda:	4603      	mov	r3, r0
 800eedc:	73fb      	strb	r3, [r7, #15]
      break;
 800eede:	e016      	b.n	800ef0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eee6:	4619      	mov	r1, r3
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 fb9d 	bl	800f628 <USBD_StdEPReq>
 800eeee:	4603      	mov	r3, r0
 800eef0:	73fb      	strb	r3, [r7, #15]
      break;
 800eef2:	e00c      	b.n	800ef0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eefa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	4619      	mov	r1, r3
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f001 fc82 	bl	801080c <USBD_LL_StallEP>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ef0c:	bf00      	nop
  }

  return ret;
 800ef0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3710      	adds	r7, #16
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b086      	sub	sp, #24
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	460b      	mov	r3, r1
 800ef22:	607a      	str	r2, [r7, #4]
 800ef24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ef26:	2300      	movs	r3, #0
 800ef28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ef2a:	7afb      	ldrb	r3, [r7, #11]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d16e      	bne.n	800f00e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ef36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ef3e:	2b03      	cmp	r3, #3
 800ef40:	f040 8098 	bne.w	800f074 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	689a      	ldr	r2, [r3, #8]
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	68db      	ldr	r3, [r3, #12]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d913      	bls.n	800ef78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	689a      	ldr	r2, [r3, #8]
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	68db      	ldr	r3, [r3, #12]
 800ef58:	1ad2      	subs	r2, r2, r3
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	68da      	ldr	r2, [r3, #12]
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	689b      	ldr	r3, [r3, #8]
 800ef66:	4293      	cmp	r3, r2
 800ef68:	bf28      	it	cs
 800ef6a:	4613      	movcs	r3, r2
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	6879      	ldr	r1, [r7, #4]
 800ef70:	68f8      	ldr	r0, [r7, #12]
 800ef72:	f001 f905 	bl	8010180 <USBD_CtlContinueRx>
 800ef76:	e07d      	b.n	800f074 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ef7e:	f003 031f 	and.w	r3, r3, #31
 800ef82:	2b02      	cmp	r3, #2
 800ef84:	d014      	beq.n	800efb0 <USBD_LL_DataOutStage+0x98>
 800ef86:	2b02      	cmp	r3, #2
 800ef88:	d81d      	bhi.n	800efc6 <USBD_LL_DataOutStage+0xae>
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d002      	beq.n	800ef94 <USBD_LL_DataOutStage+0x7c>
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d003      	beq.n	800ef9a <USBD_LL_DataOutStage+0x82>
 800ef92:	e018      	b.n	800efc6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ef94:	2300      	movs	r3, #0
 800ef96:	75bb      	strb	r3, [r7, #22]
            break;
 800ef98:	e018      	b.n	800efcc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800efa0:	b2db      	uxtb	r3, r3
 800efa2:	4619      	mov	r1, r3
 800efa4:	68f8      	ldr	r0, [r7, #12]
 800efa6:	f000 f9d2 	bl	800f34e <USBD_CoreFindIF>
 800efaa:	4603      	mov	r3, r0
 800efac:	75bb      	strb	r3, [r7, #22]
            break;
 800efae:	e00d      	b.n	800efcc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	4619      	mov	r1, r3
 800efba:	68f8      	ldr	r0, [r7, #12]
 800efbc:	f000 f9d4 	bl	800f368 <USBD_CoreFindEP>
 800efc0:	4603      	mov	r3, r0
 800efc2:	75bb      	strb	r3, [r7, #22]
            break;
 800efc4:	e002      	b.n	800efcc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800efc6:	2300      	movs	r3, #0
 800efc8:	75bb      	strb	r3, [r7, #22]
            break;
 800efca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800efcc:	7dbb      	ldrb	r3, [r7, #22]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d119      	bne.n	800f006 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	2b03      	cmp	r3, #3
 800efdc:	d113      	bne.n	800f006 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800efde:	7dba      	ldrb	r2, [r7, #22]
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	32ae      	adds	r2, #174	; 0xae
 800efe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efe8:	691b      	ldr	r3, [r3, #16]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d00b      	beq.n	800f006 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800efee:	7dba      	ldrb	r2, [r7, #22]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800eff6:	7dba      	ldrb	r2, [r7, #22]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	32ae      	adds	r2, #174	; 0xae
 800effc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f000:	691b      	ldr	r3, [r3, #16]
 800f002:	68f8      	ldr	r0, [r7, #12]
 800f004:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f006:	68f8      	ldr	r0, [r7, #12]
 800f008:	f001 f8cb 	bl	80101a2 <USBD_CtlSendStatus>
 800f00c:	e032      	b.n	800f074 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f00e:	7afb      	ldrb	r3, [r7, #11]
 800f010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f014:	b2db      	uxtb	r3, r3
 800f016:	4619      	mov	r1, r3
 800f018:	68f8      	ldr	r0, [r7, #12]
 800f01a:	f000 f9a5 	bl	800f368 <USBD_CoreFindEP>
 800f01e:	4603      	mov	r3, r0
 800f020:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f022:	7dbb      	ldrb	r3, [r7, #22]
 800f024:	2bff      	cmp	r3, #255	; 0xff
 800f026:	d025      	beq.n	800f074 <USBD_LL_DataOutStage+0x15c>
 800f028:	7dbb      	ldrb	r3, [r7, #22]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d122      	bne.n	800f074 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f034:	b2db      	uxtb	r3, r3
 800f036:	2b03      	cmp	r3, #3
 800f038:	d117      	bne.n	800f06a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f03a:	7dba      	ldrb	r2, [r7, #22]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	32ae      	adds	r2, #174	; 0xae
 800f040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f044:	699b      	ldr	r3, [r3, #24]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d00f      	beq.n	800f06a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f04a:	7dba      	ldrb	r2, [r7, #22]
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f052:	7dba      	ldrb	r2, [r7, #22]
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	32ae      	adds	r2, #174	; 0xae
 800f058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f05c:	699b      	ldr	r3, [r3, #24]
 800f05e:	7afa      	ldrb	r2, [r7, #11]
 800f060:	4611      	mov	r1, r2
 800f062:	68f8      	ldr	r0, [r7, #12]
 800f064:	4798      	blx	r3
 800f066:	4603      	mov	r3, r0
 800f068:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f06a:	7dfb      	ldrb	r3, [r7, #23]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d001      	beq.n	800f074 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f070:	7dfb      	ldrb	r3, [r7, #23]
 800f072:	e000      	b.n	800f076 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f074:	2300      	movs	r3, #0
}
 800f076:	4618      	mov	r0, r3
 800f078:	3718      	adds	r7, #24
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}

0800f07e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f07e:	b580      	push	{r7, lr}
 800f080:	b086      	sub	sp, #24
 800f082:	af00      	add	r7, sp, #0
 800f084:	60f8      	str	r0, [r7, #12]
 800f086:	460b      	mov	r3, r1
 800f088:	607a      	str	r2, [r7, #4]
 800f08a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f08c:	7afb      	ldrb	r3, [r7, #11]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d16f      	bne.n	800f172 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	3314      	adds	r3, #20
 800f096:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f09e:	2b02      	cmp	r3, #2
 800f0a0:	d15a      	bne.n	800f158 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	689a      	ldr	r2, [r3, #8]
 800f0a6:	693b      	ldr	r3, [r7, #16]
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d914      	bls.n	800f0d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f0ae:	693b      	ldr	r3, [r7, #16]
 800f0b0:	689a      	ldr	r2, [r3, #8]
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	68db      	ldr	r3, [r3, #12]
 800f0b6:	1ad2      	subs	r2, r2, r3
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	689b      	ldr	r3, [r3, #8]
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	6879      	ldr	r1, [r7, #4]
 800f0c4:	68f8      	ldr	r0, [r7, #12]
 800f0c6:	f001 f84a 	bl	801015e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	2100      	movs	r1, #0
 800f0d0:	68f8      	ldr	r0, [r7, #12]
 800f0d2:	f001 fca3 	bl	8010a1c <USBD_LL_PrepareReceive>
 800f0d6:	e03f      	b.n	800f158 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	68da      	ldr	r2, [r3, #12]
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	689b      	ldr	r3, [r3, #8]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d11c      	bne.n	800f11e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	685a      	ldr	r2, [r3, #4]
 800f0e8:	693b      	ldr	r3, [r7, #16]
 800f0ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d316      	bcc.n	800f11e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	685a      	ldr	r2, [r3, #4]
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d20f      	bcs.n	800f11e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f0fe:	2200      	movs	r2, #0
 800f100:	2100      	movs	r1, #0
 800f102:	68f8      	ldr	r0, [r7, #12]
 800f104:	f001 f82b 	bl	801015e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2200      	movs	r2, #0
 800f10c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f110:	2300      	movs	r3, #0
 800f112:	2200      	movs	r2, #0
 800f114:	2100      	movs	r1, #0
 800f116:	68f8      	ldr	r0, [r7, #12]
 800f118:	f001 fc80 	bl	8010a1c <USBD_LL_PrepareReceive>
 800f11c:	e01c      	b.n	800f158 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f124:	b2db      	uxtb	r3, r3
 800f126:	2b03      	cmp	r3, #3
 800f128:	d10f      	bne.n	800f14a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f130:	68db      	ldr	r3, [r3, #12]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d009      	beq.n	800f14a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2200      	movs	r2, #0
 800f13a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f144:	68db      	ldr	r3, [r3, #12]
 800f146:	68f8      	ldr	r0, [r7, #12]
 800f148:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f14a:	2180      	movs	r1, #128	; 0x80
 800f14c:	68f8      	ldr	r0, [r7, #12]
 800f14e:	f001 fb5d 	bl	801080c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f152:	68f8      	ldr	r0, [r7, #12]
 800f154:	f001 f838 	bl	80101c8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d03a      	beq.n	800f1d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f162:	68f8      	ldr	r0, [r7, #12]
 800f164:	f7ff fe42 	bl	800edec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2200      	movs	r2, #0
 800f16c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f170:	e032      	b.n	800f1d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f172:	7afb      	ldrb	r3, [r7, #11]
 800f174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	4619      	mov	r1, r3
 800f17c:	68f8      	ldr	r0, [r7, #12]
 800f17e:	f000 f8f3 	bl	800f368 <USBD_CoreFindEP>
 800f182:	4603      	mov	r3, r0
 800f184:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f186:	7dfb      	ldrb	r3, [r7, #23]
 800f188:	2bff      	cmp	r3, #255	; 0xff
 800f18a:	d025      	beq.n	800f1d8 <USBD_LL_DataInStage+0x15a>
 800f18c:	7dfb      	ldrb	r3, [r7, #23]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d122      	bne.n	800f1d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f198:	b2db      	uxtb	r3, r3
 800f19a:	2b03      	cmp	r3, #3
 800f19c:	d11c      	bne.n	800f1d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f19e:	7dfa      	ldrb	r2, [r7, #23]
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	32ae      	adds	r2, #174	; 0xae
 800f1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1a8:	695b      	ldr	r3, [r3, #20]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d014      	beq.n	800f1d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f1ae:	7dfa      	ldrb	r2, [r7, #23]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f1b6:	7dfa      	ldrb	r2, [r7, #23]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	32ae      	adds	r2, #174	; 0xae
 800f1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1c0:	695b      	ldr	r3, [r3, #20]
 800f1c2:	7afa      	ldrb	r2, [r7, #11]
 800f1c4:	4611      	mov	r1, r2
 800f1c6:	68f8      	ldr	r0, [r7, #12]
 800f1c8:	4798      	blx	r3
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f1ce:	7dbb      	ldrb	r3, [r7, #22]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d001      	beq.n	800f1d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f1d4:	7dbb      	ldrb	r3, [r7, #22]
 800f1d6:	e000      	b.n	800f1da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f1d8:	2300      	movs	r3, #0
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3718      	adds	r7, #24
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}

0800f1e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f1e2:	b580      	push	{r7, lr}
 800f1e4:	b084      	sub	sp, #16
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	2200      	movs	r2, #0
 800f202:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2200      	movs	r2, #0
 800f208:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d014      	beq.n	800f248 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f224:	685b      	ldr	r3, [r3, #4]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d00e      	beq.n	800f248 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	687a      	ldr	r2, [r7, #4]
 800f234:	6852      	ldr	r2, [r2, #4]
 800f236:	b2d2      	uxtb	r2, r2
 800f238:	4611      	mov	r1, r2
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	4798      	blx	r3
 800f23e:	4603      	mov	r3, r0
 800f240:	2b00      	cmp	r3, #0
 800f242:	d001      	beq.n	800f248 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f244:	2303      	movs	r3, #3
 800f246:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f248:	2340      	movs	r3, #64	; 0x40
 800f24a:	2200      	movs	r2, #0
 800f24c:	2100      	movs	r1, #0
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f001 fa68 	bl	8010724 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2201      	movs	r2, #1
 800f258:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2240      	movs	r2, #64	; 0x40
 800f260:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f264:	2340      	movs	r3, #64	; 0x40
 800f266:	2200      	movs	r2, #0
 800f268:	2180      	movs	r1, #128	; 0x80
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f001 fa5a 	bl	8010724 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2201      	movs	r2, #1
 800f274:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2240      	movs	r2, #64	; 0x40
 800f27a:	621a      	str	r2, [r3, #32]

  return ret;
 800f27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3710      	adds	r7, #16
 800f282:	46bd      	mov	sp, r7
 800f284:	bd80      	pop	{r7, pc}

0800f286 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f286:	b480      	push	{r7}
 800f288:	b083      	sub	sp, #12
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	6078      	str	r0, [r7, #4]
 800f28e:	460b      	mov	r3, r1
 800f290:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	78fa      	ldrb	r2, [r7, #3]
 800f296:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f298:	2300      	movs	r3, #0
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	370c      	adds	r7, #12
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr

0800f2a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f2a6:	b480      	push	{r7}
 800f2a8:	b083      	sub	sp, #12
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2b4:	b2db      	uxtb	r3, r3
 800f2b6:	2b04      	cmp	r3, #4
 800f2b8:	d006      	beq.n	800f2c8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2c0:	b2da      	uxtb	r2, r3
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2204      	movs	r2, #4
 800f2cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f2d0:	2300      	movs	r3, #0
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	370c      	adds	r7, #12
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr

0800f2de <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f2de:	b480      	push	{r7}
 800f2e0:	b083      	sub	sp, #12
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	2b04      	cmp	r3, #4
 800f2f0:	d106      	bne.n	800f300 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800f2f8:	b2da      	uxtb	r2, r3
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f300:	2300      	movs	r3, #0
}
 800f302:	4618      	mov	r0, r3
 800f304:	370c      	adds	r7, #12
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr

0800f30e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f30e:	b580      	push	{r7, lr}
 800f310:	b082      	sub	sp, #8
 800f312:	af00      	add	r7, sp, #0
 800f314:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	2b03      	cmp	r3, #3
 800f320:	d110      	bne.n	800f344 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d00b      	beq.n	800f344 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f332:	69db      	ldr	r3, [r3, #28]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d005      	beq.n	800f344 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f33e:	69db      	ldr	r3, [r3, #28]
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f344:	2300      	movs	r3, #0
}
 800f346:	4618      	mov	r0, r3
 800f348:	3708      	adds	r7, #8
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}

0800f34e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f34e:	b480      	push	{r7}
 800f350:	b083      	sub	sp, #12
 800f352:	af00      	add	r7, sp, #0
 800f354:	6078      	str	r0, [r7, #4]
 800f356:	460b      	mov	r3, r1
 800f358:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f35a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	370c      	adds	r7, #12
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr

0800f368 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	460b      	mov	r3, r1
 800f372:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f374:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f376:	4618      	mov	r0, r3
 800f378:	370c      	adds	r7, #12
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr

0800f382 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f382:	b580      	push	{r7, lr}
 800f384:	b086      	sub	sp, #24
 800f386:	af00      	add	r7, sp, #0
 800f388:	6078      	str	r0, [r7, #4]
 800f38a:	460b      	mov	r3, r1
 800f38c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f396:	2300      	movs	r3, #0
 800f398:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	885b      	ldrh	r3, [r3, #2]
 800f39e:	b29a      	uxth	r2, r3
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	b29b      	uxth	r3, r3
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d920      	bls.n	800f3ec <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	b29b      	uxth	r3, r3
 800f3b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f3b2:	e013      	b.n	800f3dc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f3b4:	f107 030a 	add.w	r3, r7, #10
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	6978      	ldr	r0, [r7, #20]
 800f3bc:	f000 f81b 	bl	800f3f6 <USBD_GetNextDesc>
 800f3c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	785b      	ldrb	r3, [r3, #1]
 800f3c6:	2b05      	cmp	r3, #5
 800f3c8:	d108      	bne.n	800f3dc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f3ce:	693b      	ldr	r3, [r7, #16]
 800f3d0:	789b      	ldrb	r3, [r3, #2]
 800f3d2:	78fa      	ldrb	r2, [r7, #3]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d008      	beq.n	800f3ea <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	885b      	ldrh	r3, [r3, #2]
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	897b      	ldrh	r3, [r7, #10]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d8e5      	bhi.n	800f3b4 <USBD_GetEpDesc+0x32>
 800f3e8:	e000      	b.n	800f3ec <USBD_GetEpDesc+0x6a>
          break;
 800f3ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f3ec:	693b      	ldr	r3, [r7, #16]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3718      	adds	r7, #24
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}

0800f3f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f3f6:	b480      	push	{r7}
 800f3f8:	b085      	sub	sp, #20
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]
 800f3fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	881a      	ldrh	r2, [r3, #0]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	4413      	add	r3, r2
 800f410:	b29a      	uxth	r2, r3
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	781b      	ldrb	r3, [r3, #0]
 800f41a:	461a      	mov	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	4413      	add	r3, r2
 800f420:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f422:	68fb      	ldr	r3, [r7, #12]
}
 800f424:	4618      	mov	r0, r3
 800f426:	3714      	adds	r7, #20
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr

0800f430 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f430:	b480      	push	{r7}
 800f432:	b087      	sub	sp, #28
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	3301      	adds	r3, #1
 800f446:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f44e:	8a3b      	ldrh	r3, [r7, #16]
 800f450:	021b      	lsls	r3, r3, #8
 800f452:	b21a      	sxth	r2, r3
 800f454:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f458:	4313      	orrs	r3, r2
 800f45a:	b21b      	sxth	r3, r3
 800f45c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f45e:	89fb      	ldrh	r3, [r7, #14]
}
 800f460:	4618      	mov	r0, r3
 800f462:	371c      	adds	r7, #28
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr

0800f46c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b084      	sub	sp, #16
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f476:	2300      	movs	r3, #0
 800f478:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f482:	2b40      	cmp	r3, #64	; 0x40
 800f484:	d005      	beq.n	800f492 <USBD_StdDevReq+0x26>
 800f486:	2b40      	cmp	r3, #64	; 0x40
 800f488:	d857      	bhi.n	800f53a <USBD_StdDevReq+0xce>
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d00f      	beq.n	800f4ae <USBD_StdDevReq+0x42>
 800f48e:	2b20      	cmp	r3, #32
 800f490:	d153      	bne.n	800f53a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	32ae      	adds	r2, #174	; 0xae
 800f49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4a0:	689b      	ldr	r3, [r3, #8]
 800f4a2:	6839      	ldr	r1, [r7, #0]
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	4798      	blx	r3
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	73fb      	strb	r3, [r7, #15]
      break;
 800f4ac:	e04a      	b.n	800f544 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	785b      	ldrb	r3, [r3, #1]
 800f4b2:	2b09      	cmp	r3, #9
 800f4b4:	d83b      	bhi.n	800f52e <USBD_StdDevReq+0xc2>
 800f4b6:	a201      	add	r2, pc, #4	; (adr r2, 800f4bc <USBD_StdDevReq+0x50>)
 800f4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4bc:	0800f511 	.word	0x0800f511
 800f4c0:	0800f525 	.word	0x0800f525
 800f4c4:	0800f52f 	.word	0x0800f52f
 800f4c8:	0800f51b 	.word	0x0800f51b
 800f4cc:	0800f52f 	.word	0x0800f52f
 800f4d0:	0800f4ef 	.word	0x0800f4ef
 800f4d4:	0800f4e5 	.word	0x0800f4e5
 800f4d8:	0800f52f 	.word	0x0800f52f
 800f4dc:	0800f507 	.word	0x0800f507
 800f4e0:	0800f4f9 	.word	0x0800f4f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f4e4:	6839      	ldr	r1, [r7, #0]
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f000 fa3c 	bl	800f964 <USBD_GetDescriptor>
          break;
 800f4ec:	e024      	b.n	800f538 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f4ee:	6839      	ldr	r1, [r7, #0]
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f000 fbcb 	bl	800fc8c <USBD_SetAddress>
          break;
 800f4f6:	e01f      	b.n	800f538 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f4f8:	6839      	ldr	r1, [r7, #0]
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f000 fc0a 	bl	800fd14 <USBD_SetConfig>
 800f500:	4603      	mov	r3, r0
 800f502:	73fb      	strb	r3, [r7, #15]
          break;
 800f504:	e018      	b.n	800f538 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f506:	6839      	ldr	r1, [r7, #0]
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f000 fcad 	bl	800fe68 <USBD_GetConfig>
          break;
 800f50e:	e013      	b.n	800f538 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f510:	6839      	ldr	r1, [r7, #0]
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 fcde 	bl	800fed4 <USBD_GetStatus>
          break;
 800f518:	e00e      	b.n	800f538 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f51a:	6839      	ldr	r1, [r7, #0]
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 fd0d 	bl	800ff3c <USBD_SetFeature>
          break;
 800f522:	e009      	b.n	800f538 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f524:	6839      	ldr	r1, [r7, #0]
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 fd31 	bl	800ff8e <USBD_ClrFeature>
          break;
 800f52c:	e004      	b.n	800f538 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f52e:	6839      	ldr	r1, [r7, #0]
 800f530:	6878      	ldr	r0, [r7, #4]
 800f532:	f000 fd88 	bl	8010046 <USBD_CtlError>
          break;
 800f536:	bf00      	nop
      }
      break;
 800f538:	e004      	b.n	800f544 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f53a:	6839      	ldr	r1, [r7, #0]
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f000 fd82 	bl	8010046 <USBD_CtlError>
      break;
 800f542:	bf00      	nop
  }

  return ret;
 800f544:	7bfb      	ldrb	r3, [r7, #15]
}
 800f546:	4618      	mov	r0, r3
 800f548:	3710      	adds	r7, #16
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop

0800f550 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f55a:	2300      	movs	r3, #0
 800f55c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f566:	2b40      	cmp	r3, #64	; 0x40
 800f568:	d005      	beq.n	800f576 <USBD_StdItfReq+0x26>
 800f56a:	2b40      	cmp	r3, #64	; 0x40
 800f56c:	d852      	bhi.n	800f614 <USBD_StdItfReq+0xc4>
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d001      	beq.n	800f576 <USBD_StdItfReq+0x26>
 800f572:	2b20      	cmp	r3, #32
 800f574:	d14e      	bne.n	800f614 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	3b01      	subs	r3, #1
 800f580:	2b02      	cmp	r3, #2
 800f582:	d840      	bhi.n	800f606 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	889b      	ldrh	r3, [r3, #4]
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	2b01      	cmp	r3, #1
 800f58c:	d836      	bhi.n	800f5fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	889b      	ldrh	r3, [r3, #4]
 800f592:	b2db      	uxtb	r3, r3
 800f594:	4619      	mov	r1, r3
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f7ff fed9 	bl	800f34e <USBD_CoreFindIF>
 800f59c:	4603      	mov	r3, r0
 800f59e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f5a0:	7bbb      	ldrb	r3, [r7, #14]
 800f5a2:	2bff      	cmp	r3, #255	; 0xff
 800f5a4:	d01d      	beq.n	800f5e2 <USBD_StdItfReq+0x92>
 800f5a6:	7bbb      	ldrb	r3, [r7, #14]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d11a      	bne.n	800f5e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f5ac:	7bba      	ldrb	r2, [r7, #14]
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	32ae      	adds	r2, #174	; 0xae
 800f5b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5b6:	689b      	ldr	r3, [r3, #8]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00f      	beq.n	800f5dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f5bc:	7bba      	ldrb	r2, [r7, #14]
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f5c4:	7bba      	ldrb	r2, [r7, #14]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	32ae      	adds	r2, #174	; 0xae
 800f5ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	6839      	ldr	r1, [r7, #0]
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	4798      	blx	r3
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f5da:	e004      	b.n	800f5e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f5dc:	2303      	movs	r3, #3
 800f5de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f5e0:	e001      	b.n	800f5e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f5e2:	2303      	movs	r3, #3
 800f5e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	88db      	ldrh	r3, [r3, #6]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d110      	bne.n	800f610 <USBD_StdItfReq+0xc0>
 800f5ee:	7bfb      	ldrb	r3, [r7, #15]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d10d      	bne.n	800f610 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 fdd4 	bl	80101a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f5fa:	e009      	b.n	800f610 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f5fc:	6839      	ldr	r1, [r7, #0]
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f000 fd21 	bl	8010046 <USBD_CtlError>
          break;
 800f604:	e004      	b.n	800f610 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f606:	6839      	ldr	r1, [r7, #0]
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f000 fd1c 	bl	8010046 <USBD_CtlError>
          break;
 800f60e:	e000      	b.n	800f612 <USBD_StdItfReq+0xc2>
          break;
 800f610:	bf00      	nop
      }
      break;
 800f612:	e004      	b.n	800f61e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f614:	6839      	ldr	r1, [r7, #0]
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f000 fd15 	bl	8010046 <USBD_CtlError>
      break;
 800f61c:	bf00      	nop
  }

  return ret;
 800f61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f620:	4618      	mov	r0, r3
 800f622:	3710      	adds	r7, #16
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b084      	sub	sp, #16
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f632:	2300      	movs	r3, #0
 800f634:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	889b      	ldrh	r3, [r3, #4]
 800f63a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f644:	2b40      	cmp	r3, #64	; 0x40
 800f646:	d007      	beq.n	800f658 <USBD_StdEPReq+0x30>
 800f648:	2b40      	cmp	r3, #64	; 0x40
 800f64a:	f200 817f 	bhi.w	800f94c <USBD_StdEPReq+0x324>
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d02a      	beq.n	800f6a8 <USBD_StdEPReq+0x80>
 800f652:	2b20      	cmp	r3, #32
 800f654:	f040 817a 	bne.w	800f94c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f658:	7bbb      	ldrb	r3, [r7, #14]
 800f65a:	4619      	mov	r1, r3
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f7ff fe83 	bl	800f368 <USBD_CoreFindEP>
 800f662:	4603      	mov	r3, r0
 800f664:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f666:	7b7b      	ldrb	r3, [r7, #13]
 800f668:	2bff      	cmp	r3, #255	; 0xff
 800f66a:	f000 8174 	beq.w	800f956 <USBD_StdEPReq+0x32e>
 800f66e:	7b7b      	ldrb	r3, [r7, #13]
 800f670:	2b00      	cmp	r3, #0
 800f672:	f040 8170 	bne.w	800f956 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f676:	7b7a      	ldrb	r2, [r7, #13]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f67e:	7b7a      	ldrb	r2, [r7, #13]
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	32ae      	adds	r2, #174	; 0xae
 800f684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f688:	689b      	ldr	r3, [r3, #8]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	f000 8163 	beq.w	800f956 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f690:	7b7a      	ldrb	r2, [r7, #13]
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	32ae      	adds	r2, #174	; 0xae
 800f696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f69a:	689b      	ldr	r3, [r3, #8]
 800f69c:	6839      	ldr	r1, [r7, #0]
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	4798      	blx	r3
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f6a6:	e156      	b.n	800f956 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	785b      	ldrb	r3, [r3, #1]
 800f6ac:	2b03      	cmp	r3, #3
 800f6ae:	d008      	beq.n	800f6c2 <USBD_StdEPReq+0x9a>
 800f6b0:	2b03      	cmp	r3, #3
 800f6b2:	f300 8145 	bgt.w	800f940 <USBD_StdEPReq+0x318>
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	f000 809b 	beq.w	800f7f2 <USBD_StdEPReq+0x1ca>
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d03c      	beq.n	800f73a <USBD_StdEPReq+0x112>
 800f6c0:	e13e      	b.n	800f940 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	2b02      	cmp	r3, #2
 800f6cc:	d002      	beq.n	800f6d4 <USBD_StdEPReq+0xac>
 800f6ce:	2b03      	cmp	r3, #3
 800f6d0:	d016      	beq.n	800f700 <USBD_StdEPReq+0xd8>
 800f6d2:	e02c      	b.n	800f72e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f6d4:	7bbb      	ldrb	r3, [r7, #14]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d00d      	beq.n	800f6f6 <USBD_StdEPReq+0xce>
 800f6da:	7bbb      	ldrb	r3, [r7, #14]
 800f6dc:	2b80      	cmp	r3, #128	; 0x80
 800f6de:	d00a      	beq.n	800f6f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f6e0:	7bbb      	ldrb	r3, [r7, #14]
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f001 f891 	bl	801080c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f6ea:	2180      	movs	r1, #128	; 0x80
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f001 f88d 	bl	801080c <USBD_LL_StallEP>
 800f6f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f6f4:	e020      	b.n	800f738 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f6f6:	6839      	ldr	r1, [r7, #0]
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f000 fca4 	bl	8010046 <USBD_CtlError>
              break;
 800f6fe:	e01b      	b.n	800f738 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	885b      	ldrh	r3, [r3, #2]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d10e      	bne.n	800f726 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f708:	7bbb      	ldrb	r3, [r7, #14]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d00b      	beq.n	800f726 <USBD_StdEPReq+0xfe>
 800f70e:	7bbb      	ldrb	r3, [r7, #14]
 800f710:	2b80      	cmp	r3, #128	; 0x80
 800f712:	d008      	beq.n	800f726 <USBD_StdEPReq+0xfe>
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	88db      	ldrh	r3, [r3, #6]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d104      	bne.n	800f726 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f71c:	7bbb      	ldrb	r3, [r7, #14]
 800f71e:	4619      	mov	r1, r3
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f001 f873 	bl	801080c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f000 fd3b 	bl	80101a2 <USBD_CtlSendStatus>

              break;
 800f72c:	e004      	b.n	800f738 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f72e:	6839      	ldr	r1, [r7, #0]
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f000 fc88 	bl	8010046 <USBD_CtlError>
              break;
 800f736:	bf00      	nop
          }
          break;
 800f738:	e107      	b.n	800f94a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f740:	b2db      	uxtb	r3, r3
 800f742:	2b02      	cmp	r3, #2
 800f744:	d002      	beq.n	800f74c <USBD_StdEPReq+0x124>
 800f746:	2b03      	cmp	r3, #3
 800f748:	d016      	beq.n	800f778 <USBD_StdEPReq+0x150>
 800f74a:	e04b      	b.n	800f7e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f74c:	7bbb      	ldrb	r3, [r7, #14]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00d      	beq.n	800f76e <USBD_StdEPReq+0x146>
 800f752:	7bbb      	ldrb	r3, [r7, #14]
 800f754:	2b80      	cmp	r3, #128	; 0x80
 800f756:	d00a      	beq.n	800f76e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f758:	7bbb      	ldrb	r3, [r7, #14]
 800f75a:	4619      	mov	r1, r3
 800f75c:	6878      	ldr	r0, [r7, #4]
 800f75e:	f001 f855 	bl	801080c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f762:	2180      	movs	r1, #128	; 0x80
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f001 f851 	bl	801080c <USBD_LL_StallEP>
 800f76a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f76c:	e040      	b.n	800f7f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f76e:	6839      	ldr	r1, [r7, #0]
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f000 fc68 	bl	8010046 <USBD_CtlError>
              break;
 800f776:	e03b      	b.n	800f7f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	885b      	ldrh	r3, [r3, #2]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d136      	bne.n	800f7ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f780:	7bbb      	ldrb	r3, [r7, #14]
 800f782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f786:	2b00      	cmp	r3, #0
 800f788:	d004      	beq.n	800f794 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f78a:	7bbb      	ldrb	r3, [r7, #14]
 800f78c:	4619      	mov	r1, r3
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f001 f872 	bl	8010878 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f000 fd04 	bl	80101a2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f79a:	7bbb      	ldrb	r3, [r7, #14]
 800f79c:	4619      	mov	r1, r3
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f7ff fde2 	bl	800f368 <USBD_CoreFindEP>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f7a8:	7b7b      	ldrb	r3, [r7, #13]
 800f7aa:	2bff      	cmp	r3, #255	; 0xff
 800f7ac:	d01f      	beq.n	800f7ee <USBD_StdEPReq+0x1c6>
 800f7ae:	7b7b      	ldrb	r3, [r7, #13]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d11c      	bne.n	800f7ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f7b4:	7b7a      	ldrb	r2, [r7, #13]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f7bc:	7b7a      	ldrb	r2, [r7, #13]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	32ae      	adds	r2, #174	; 0xae
 800f7c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d010      	beq.n	800f7ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f7cc:	7b7a      	ldrb	r2, [r7, #13]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	32ae      	adds	r2, #174	; 0xae
 800f7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7d6:	689b      	ldr	r3, [r3, #8]
 800f7d8:	6839      	ldr	r1, [r7, #0]
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	4798      	blx	r3
 800f7de:	4603      	mov	r3, r0
 800f7e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f7e2:	e004      	b.n	800f7ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f7e4:	6839      	ldr	r1, [r7, #0]
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f000 fc2d 	bl	8010046 <USBD_CtlError>
              break;
 800f7ec:	e000      	b.n	800f7f0 <USBD_StdEPReq+0x1c8>
              break;
 800f7ee:	bf00      	nop
          }
          break;
 800f7f0:	e0ab      	b.n	800f94a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	2b02      	cmp	r3, #2
 800f7fc:	d002      	beq.n	800f804 <USBD_StdEPReq+0x1dc>
 800f7fe:	2b03      	cmp	r3, #3
 800f800:	d032      	beq.n	800f868 <USBD_StdEPReq+0x240>
 800f802:	e097      	b.n	800f934 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f804:	7bbb      	ldrb	r3, [r7, #14]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d007      	beq.n	800f81a <USBD_StdEPReq+0x1f2>
 800f80a:	7bbb      	ldrb	r3, [r7, #14]
 800f80c:	2b80      	cmp	r3, #128	; 0x80
 800f80e:	d004      	beq.n	800f81a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f810:	6839      	ldr	r1, [r7, #0]
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f000 fc17 	bl	8010046 <USBD_CtlError>
                break;
 800f818:	e091      	b.n	800f93e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f81a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	da0b      	bge.n	800f83a <USBD_StdEPReq+0x212>
 800f822:	7bbb      	ldrb	r3, [r7, #14]
 800f824:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f828:	4613      	mov	r3, r2
 800f82a:	009b      	lsls	r3, r3, #2
 800f82c:	4413      	add	r3, r2
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	3310      	adds	r3, #16
 800f832:	687a      	ldr	r2, [r7, #4]
 800f834:	4413      	add	r3, r2
 800f836:	3304      	adds	r3, #4
 800f838:	e00b      	b.n	800f852 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f83a:	7bbb      	ldrb	r3, [r7, #14]
 800f83c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f840:	4613      	mov	r3, r2
 800f842:	009b      	lsls	r3, r3, #2
 800f844:	4413      	add	r3, r2
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f84c:	687a      	ldr	r2, [r7, #4]
 800f84e:	4413      	add	r3, r2
 800f850:	3304      	adds	r3, #4
 800f852:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	2200      	movs	r2, #0
 800f858:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	2202      	movs	r2, #2
 800f85e:	4619      	mov	r1, r3
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f000 fc61 	bl	8010128 <USBD_CtlSendData>
              break;
 800f866:	e06a      	b.n	800f93e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	da11      	bge.n	800f894 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f870:	7bbb      	ldrb	r3, [r7, #14]
 800f872:	f003 020f 	and.w	r2, r3, #15
 800f876:	6879      	ldr	r1, [r7, #4]
 800f878:	4613      	mov	r3, r2
 800f87a:	009b      	lsls	r3, r3, #2
 800f87c:	4413      	add	r3, r2
 800f87e:	009b      	lsls	r3, r3, #2
 800f880:	440b      	add	r3, r1
 800f882:	3324      	adds	r3, #36	; 0x24
 800f884:	881b      	ldrh	r3, [r3, #0]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d117      	bne.n	800f8ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f88a:	6839      	ldr	r1, [r7, #0]
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f000 fbda 	bl	8010046 <USBD_CtlError>
                  break;
 800f892:	e054      	b.n	800f93e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f894:	7bbb      	ldrb	r3, [r7, #14]
 800f896:	f003 020f 	and.w	r2, r3, #15
 800f89a:	6879      	ldr	r1, [r7, #4]
 800f89c:	4613      	mov	r3, r2
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	4413      	add	r3, r2
 800f8a2:	009b      	lsls	r3, r3, #2
 800f8a4:	440b      	add	r3, r1
 800f8a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f8aa:	881b      	ldrh	r3, [r3, #0]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d104      	bne.n	800f8ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f8b0:	6839      	ldr	r1, [r7, #0]
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f000 fbc7 	bl	8010046 <USBD_CtlError>
                  break;
 800f8b8:	e041      	b.n	800f93e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	da0b      	bge.n	800f8da <USBD_StdEPReq+0x2b2>
 800f8c2:	7bbb      	ldrb	r3, [r7, #14]
 800f8c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f8c8:	4613      	mov	r3, r2
 800f8ca:	009b      	lsls	r3, r3, #2
 800f8cc:	4413      	add	r3, r2
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	3310      	adds	r3, #16
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	3304      	adds	r3, #4
 800f8d8:	e00b      	b.n	800f8f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f8da:	7bbb      	ldrb	r3, [r7, #14]
 800f8dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8e0:	4613      	mov	r3, r2
 800f8e2:	009b      	lsls	r3, r3, #2
 800f8e4:	4413      	add	r3, r2
 800f8e6:	009b      	lsls	r3, r3, #2
 800f8e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f8ec:	687a      	ldr	r2, [r7, #4]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	3304      	adds	r3, #4
 800f8f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f8f4:	7bbb      	ldrb	r3, [r7, #14]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d002      	beq.n	800f900 <USBD_StdEPReq+0x2d8>
 800f8fa:	7bbb      	ldrb	r3, [r7, #14]
 800f8fc:	2b80      	cmp	r3, #128	; 0x80
 800f8fe:	d103      	bne.n	800f908 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	2200      	movs	r2, #0
 800f904:	601a      	str	r2, [r3, #0]
 800f906:	e00e      	b.n	800f926 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f908:	7bbb      	ldrb	r3, [r7, #14]
 800f90a:	4619      	mov	r1, r3
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f000 ffe9 	bl	80108e4 <USBD_LL_IsStallEP>
 800f912:	4603      	mov	r3, r0
 800f914:	2b00      	cmp	r3, #0
 800f916:	d003      	beq.n	800f920 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	2201      	movs	r2, #1
 800f91c:	601a      	str	r2, [r3, #0]
 800f91e:	e002      	b.n	800f926 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	2200      	movs	r2, #0
 800f924:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	2202      	movs	r2, #2
 800f92a:	4619      	mov	r1, r3
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f000 fbfb 	bl	8010128 <USBD_CtlSendData>
              break;
 800f932:	e004      	b.n	800f93e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f934:	6839      	ldr	r1, [r7, #0]
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f000 fb85 	bl	8010046 <USBD_CtlError>
              break;
 800f93c:	bf00      	nop
          }
          break;
 800f93e:	e004      	b.n	800f94a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f940:	6839      	ldr	r1, [r7, #0]
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f000 fb7f 	bl	8010046 <USBD_CtlError>
          break;
 800f948:	bf00      	nop
      }
      break;
 800f94a:	e005      	b.n	800f958 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f94c:	6839      	ldr	r1, [r7, #0]
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f000 fb79 	bl	8010046 <USBD_CtlError>
      break;
 800f954:	e000      	b.n	800f958 <USBD_StdEPReq+0x330>
      break;
 800f956:	bf00      	nop
  }

  return ret;
 800f958:	7bfb      	ldrb	r3, [r7, #15]
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3710      	adds	r7, #16
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
	...

0800f964 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b084      	sub	sp, #16
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
 800f96c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f96e:	2300      	movs	r3, #0
 800f970:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f972:	2300      	movs	r3, #0
 800f974:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f976:	2300      	movs	r3, #0
 800f978:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	885b      	ldrh	r3, [r3, #2]
 800f97e:	0a1b      	lsrs	r3, r3, #8
 800f980:	b29b      	uxth	r3, r3
 800f982:	3b01      	subs	r3, #1
 800f984:	2b0e      	cmp	r3, #14
 800f986:	f200 8152 	bhi.w	800fc2e <USBD_GetDescriptor+0x2ca>
 800f98a:	a201      	add	r2, pc, #4	; (adr r2, 800f990 <USBD_GetDescriptor+0x2c>)
 800f98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f990:	0800fa01 	.word	0x0800fa01
 800f994:	0800fa19 	.word	0x0800fa19
 800f998:	0800fa59 	.word	0x0800fa59
 800f99c:	0800fc2f 	.word	0x0800fc2f
 800f9a0:	0800fc2f 	.word	0x0800fc2f
 800f9a4:	0800fbcf 	.word	0x0800fbcf
 800f9a8:	0800fbfb 	.word	0x0800fbfb
 800f9ac:	0800fc2f 	.word	0x0800fc2f
 800f9b0:	0800fc2f 	.word	0x0800fc2f
 800f9b4:	0800fc2f 	.word	0x0800fc2f
 800f9b8:	0800fc2f 	.word	0x0800fc2f
 800f9bc:	0800fc2f 	.word	0x0800fc2f
 800f9c0:	0800fc2f 	.word	0x0800fc2f
 800f9c4:	0800fc2f 	.word	0x0800fc2f
 800f9c8:	0800f9cd 	.word	0x0800f9cd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9d2:	69db      	ldr	r3, [r3, #28]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00b      	beq.n	800f9f0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9de:	69db      	ldr	r3, [r3, #28]
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	7c12      	ldrb	r2, [r2, #16]
 800f9e4:	f107 0108 	add.w	r1, r7, #8
 800f9e8:	4610      	mov	r0, r2
 800f9ea:	4798      	blx	r3
 800f9ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f9ee:	e126      	b.n	800fc3e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f9f0:	6839      	ldr	r1, [r7, #0]
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 fb27 	bl	8010046 <USBD_CtlError>
        err++;
 800f9f8:	7afb      	ldrb	r3, [r7, #11]
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	72fb      	strb	r3, [r7, #11]
      break;
 800f9fe:	e11e      	b.n	800fc3e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	687a      	ldr	r2, [r7, #4]
 800fa0a:	7c12      	ldrb	r2, [r2, #16]
 800fa0c:	f107 0108 	add.w	r1, r7, #8
 800fa10:	4610      	mov	r0, r2
 800fa12:	4798      	blx	r3
 800fa14:	60f8      	str	r0, [r7, #12]
      break;
 800fa16:	e112      	b.n	800fc3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	7c1b      	ldrb	r3, [r3, #16]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d10d      	bne.n	800fa3c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa28:	f107 0208 	add.w	r2, r7, #8
 800fa2c:	4610      	mov	r0, r2
 800fa2e:	4798      	blx	r3
 800fa30:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	3301      	adds	r3, #1
 800fa36:	2202      	movs	r2, #2
 800fa38:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fa3a:	e100      	b.n	800fc3e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa44:	f107 0208 	add.w	r2, r7, #8
 800fa48:	4610      	mov	r0, r2
 800fa4a:	4798      	blx	r3
 800fa4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	3301      	adds	r3, #1
 800fa52:	2202      	movs	r2, #2
 800fa54:	701a      	strb	r2, [r3, #0]
      break;
 800fa56:	e0f2      	b.n	800fc3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	885b      	ldrh	r3, [r3, #2]
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	2b05      	cmp	r3, #5
 800fa60:	f200 80ac 	bhi.w	800fbbc <USBD_GetDescriptor+0x258>
 800fa64:	a201      	add	r2, pc, #4	; (adr r2, 800fa6c <USBD_GetDescriptor+0x108>)
 800fa66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa6a:	bf00      	nop
 800fa6c:	0800fa85 	.word	0x0800fa85
 800fa70:	0800fab9 	.word	0x0800fab9
 800fa74:	0800faed 	.word	0x0800faed
 800fa78:	0800fb21 	.word	0x0800fb21
 800fa7c:	0800fb55 	.word	0x0800fb55
 800fa80:	0800fb89 	.word	0x0800fb89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d00b      	beq.n	800faa8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	7c12      	ldrb	r2, [r2, #16]
 800fa9c:	f107 0108 	add.w	r1, r7, #8
 800faa0:	4610      	mov	r0, r2
 800faa2:	4798      	blx	r3
 800faa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800faa6:	e091      	b.n	800fbcc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800faa8:	6839      	ldr	r1, [r7, #0]
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f000 facb 	bl	8010046 <USBD_CtlError>
            err++;
 800fab0:	7afb      	ldrb	r3, [r7, #11]
 800fab2:	3301      	adds	r3, #1
 800fab4:	72fb      	strb	r3, [r7, #11]
          break;
 800fab6:	e089      	b.n	800fbcc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fabe:	689b      	ldr	r3, [r3, #8]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d00b      	beq.n	800fadc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800faca:	689b      	ldr	r3, [r3, #8]
 800facc:	687a      	ldr	r2, [r7, #4]
 800face:	7c12      	ldrb	r2, [r2, #16]
 800fad0:	f107 0108 	add.w	r1, r7, #8
 800fad4:	4610      	mov	r0, r2
 800fad6:	4798      	blx	r3
 800fad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fada:	e077      	b.n	800fbcc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fadc:	6839      	ldr	r1, [r7, #0]
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f000 fab1 	bl	8010046 <USBD_CtlError>
            err++;
 800fae4:	7afb      	ldrb	r3, [r7, #11]
 800fae6:	3301      	adds	r3, #1
 800fae8:	72fb      	strb	r3, [r7, #11]
          break;
 800faea:	e06f      	b.n	800fbcc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d00b      	beq.n	800fb10 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	687a      	ldr	r2, [r7, #4]
 800fb02:	7c12      	ldrb	r2, [r2, #16]
 800fb04:	f107 0108 	add.w	r1, r7, #8
 800fb08:	4610      	mov	r0, r2
 800fb0a:	4798      	blx	r3
 800fb0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb0e:	e05d      	b.n	800fbcc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fb10:	6839      	ldr	r1, [r7, #0]
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 fa97 	bl	8010046 <USBD_CtlError>
            err++;
 800fb18:	7afb      	ldrb	r3, [r7, #11]
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	72fb      	strb	r3, [r7, #11]
          break;
 800fb1e:	e055      	b.n	800fbcc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb26:	691b      	ldr	r3, [r3, #16]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d00b      	beq.n	800fb44 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb32:	691b      	ldr	r3, [r3, #16]
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	7c12      	ldrb	r2, [r2, #16]
 800fb38:	f107 0108 	add.w	r1, r7, #8
 800fb3c:	4610      	mov	r0, r2
 800fb3e:	4798      	blx	r3
 800fb40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb42:	e043      	b.n	800fbcc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fb44:	6839      	ldr	r1, [r7, #0]
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f000 fa7d 	bl	8010046 <USBD_CtlError>
            err++;
 800fb4c:	7afb      	ldrb	r3, [r7, #11]
 800fb4e:	3301      	adds	r3, #1
 800fb50:	72fb      	strb	r3, [r7, #11]
          break;
 800fb52:	e03b      	b.n	800fbcc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb5a:	695b      	ldr	r3, [r3, #20]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d00b      	beq.n	800fb78 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb66:	695b      	ldr	r3, [r3, #20]
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	7c12      	ldrb	r2, [r2, #16]
 800fb6c:	f107 0108 	add.w	r1, r7, #8
 800fb70:	4610      	mov	r0, r2
 800fb72:	4798      	blx	r3
 800fb74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb76:	e029      	b.n	800fbcc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fb78:	6839      	ldr	r1, [r7, #0]
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f000 fa63 	bl	8010046 <USBD_CtlError>
            err++;
 800fb80:	7afb      	ldrb	r3, [r7, #11]
 800fb82:	3301      	adds	r3, #1
 800fb84:	72fb      	strb	r3, [r7, #11]
          break;
 800fb86:	e021      	b.n	800fbcc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb8e:	699b      	ldr	r3, [r3, #24]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d00b      	beq.n	800fbac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb9a:	699b      	ldr	r3, [r3, #24]
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	7c12      	ldrb	r2, [r2, #16]
 800fba0:	f107 0108 	add.w	r1, r7, #8
 800fba4:	4610      	mov	r0, r2
 800fba6:	4798      	blx	r3
 800fba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbaa:	e00f      	b.n	800fbcc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fbac:	6839      	ldr	r1, [r7, #0]
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f000 fa49 	bl	8010046 <USBD_CtlError>
            err++;
 800fbb4:	7afb      	ldrb	r3, [r7, #11]
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	72fb      	strb	r3, [r7, #11]
          break;
 800fbba:	e007      	b.n	800fbcc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fbbc:	6839      	ldr	r1, [r7, #0]
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 fa41 	bl	8010046 <USBD_CtlError>
          err++;
 800fbc4:	7afb      	ldrb	r3, [r7, #11]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fbca:	bf00      	nop
      }
      break;
 800fbcc:	e037      	b.n	800fc3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	7c1b      	ldrb	r3, [r3, #16]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d109      	bne.n	800fbea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbde:	f107 0208 	add.w	r2, r7, #8
 800fbe2:	4610      	mov	r0, r2
 800fbe4:	4798      	blx	r3
 800fbe6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fbe8:	e029      	b.n	800fc3e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fbea:	6839      	ldr	r1, [r7, #0]
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f000 fa2a 	bl	8010046 <USBD_CtlError>
        err++;
 800fbf2:	7afb      	ldrb	r3, [r7, #11]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	72fb      	strb	r3, [r7, #11]
      break;
 800fbf8:	e021      	b.n	800fc3e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	7c1b      	ldrb	r3, [r3, #16]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d10d      	bne.n	800fc1e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc0a:	f107 0208 	add.w	r2, r7, #8
 800fc0e:	4610      	mov	r0, r2
 800fc10:	4798      	blx	r3
 800fc12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	3301      	adds	r3, #1
 800fc18:	2207      	movs	r2, #7
 800fc1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc1c:	e00f      	b.n	800fc3e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fc1e:	6839      	ldr	r1, [r7, #0]
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 fa10 	bl	8010046 <USBD_CtlError>
        err++;
 800fc26:	7afb      	ldrb	r3, [r7, #11]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	72fb      	strb	r3, [r7, #11]
      break;
 800fc2c:	e007      	b.n	800fc3e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fc2e:	6839      	ldr	r1, [r7, #0]
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 fa08 	bl	8010046 <USBD_CtlError>
      err++;
 800fc36:	7afb      	ldrb	r3, [r7, #11]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	72fb      	strb	r3, [r7, #11]
      break;
 800fc3c:	bf00      	nop
  }

  if (err != 0U)
 800fc3e:	7afb      	ldrb	r3, [r7, #11]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d11e      	bne.n	800fc82 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	88db      	ldrh	r3, [r3, #6]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d016      	beq.n	800fc7a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fc4c:	893b      	ldrh	r3, [r7, #8]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d00e      	beq.n	800fc70 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	88da      	ldrh	r2, [r3, #6]
 800fc56:	893b      	ldrh	r3, [r7, #8]
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	bf28      	it	cs
 800fc5c:	4613      	movcs	r3, r2
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fc62:	893b      	ldrh	r3, [r7, #8]
 800fc64:	461a      	mov	r2, r3
 800fc66:	68f9      	ldr	r1, [r7, #12]
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f000 fa5d 	bl	8010128 <USBD_CtlSendData>
 800fc6e:	e009      	b.n	800fc84 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fc70:	6839      	ldr	r1, [r7, #0]
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 f9e7 	bl	8010046 <USBD_CtlError>
 800fc78:	e004      	b.n	800fc84 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f000 fa91 	bl	80101a2 <USBD_CtlSendStatus>
 800fc80:	e000      	b.n	800fc84 <USBD_GetDescriptor+0x320>
    return;
 800fc82:	bf00      	nop
  }
}
 800fc84:	3710      	adds	r7, #16
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop

0800fc8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b084      	sub	sp, #16
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	889b      	ldrh	r3, [r3, #4]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d131      	bne.n	800fd02 <USBD_SetAddress+0x76>
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	88db      	ldrh	r3, [r3, #6]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d12d      	bne.n	800fd02 <USBD_SetAddress+0x76>
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	885b      	ldrh	r3, [r3, #2]
 800fcaa:	2b7f      	cmp	r3, #127	; 0x7f
 800fcac:	d829      	bhi.n	800fd02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	885b      	ldrh	r3, [r3, #2]
 800fcb2:	b2db      	uxtb	r3, r3
 800fcb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcc0:	b2db      	uxtb	r3, r3
 800fcc2:	2b03      	cmp	r3, #3
 800fcc4:	d104      	bne.n	800fcd0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fcc6:	6839      	ldr	r1, [r7, #0]
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	f000 f9bc 	bl	8010046 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcce:	e01d      	b.n	800fd0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	7bfa      	ldrb	r2, [r7, #15]
 800fcd4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fcd8:	7bfb      	ldrb	r3, [r7, #15]
 800fcda:	4619      	mov	r1, r3
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f000 fe2f 	bl	8010940 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 fa5d 	bl	80101a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fce8:	7bfb      	ldrb	r3, [r7, #15]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d004      	beq.n	800fcf8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2202      	movs	r2, #2
 800fcf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcf6:	e009      	b.n	800fd0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd00:	e004      	b.n	800fd0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fd02:	6839      	ldr	r1, [r7, #0]
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f000 f99e 	bl	8010046 <USBD_CtlError>
  }
}
 800fd0a:	bf00      	nop
 800fd0c:	bf00      	nop
 800fd0e:	3710      	adds	r7, #16
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd1e:	2300      	movs	r3, #0
 800fd20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	885b      	ldrh	r3, [r3, #2]
 800fd26:	b2da      	uxtb	r2, r3
 800fd28:	4b4e      	ldr	r3, [pc, #312]	; (800fe64 <USBD_SetConfig+0x150>)
 800fd2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fd2c:	4b4d      	ldr	r3, [pc, #308]	; (800fe64 <USBD_SetConfig+0x150>)
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	d905      	bls.n	800fd40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fd34:	6839      	ldr	r1, [r7, #0]
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 f985 	bl	8010046 <USBD_CtlError>
    return USBD_FAIL;
 800fd3c:	2303      	movs	r3, #3
 800fd3e:	e08c      	b.n	800fe5a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd46:	b2db      	uxtb	r3, r3
 800fd48:	2b02      	cmp	r3, #2
 800fd4a:	d002      	beq.n	800fd52 <USBD_SetConfig+0x3e>
 800fd4c:	2b03      	cmp	r3, #3
 800fd4e:	d029      	beq.n	800fda4 <USBD_SetConfig+0x90>
 800fd50:	e075      	b.n	800fe3e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fd52:	4b44      	ldr	r3, [pc, #272]	; (800fe64 <USBD_SetConfig+0x150>)
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d020      	beq.n	800fd9c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fd5a:	4b42      	ldr	r3, [pc, #264]	; (800fe64 <USBD_SetConfig+0x150>)
 800fd5c:	781b      	ldrb	r3, [r3, #0]
 800fd5e:	461a      	mov	r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fd64:	4b3f      	ldr	r3, [pc, #252]	; (800fe64 <USBD_SetConfig+0x150>)
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	4619      	mov	r1, r3
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f7ff f849 	bl	800ee02 <USBD_SetClassConfig>
 800fd70:	4603      	mov	r3, r0
 800fd72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fd74:	7bfb      	ldrb	r3, [r7, #15]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d008      	beq.n	800fd8c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fd7a:	6839      	ldr	r1, [r7, #0]
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f000 f962 	bl	8010046 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2202      	movs	r2, #2
 800fd86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fd8a:	e065      	b.n	800fe58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f000 fa08 	bl	80101a2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2203      	movs	r2, #3
 800fd96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fd9a:	e05d      	b.n	800fe58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f000 fa00 	bl	80101a2 <USBD_CtlSendStatus>
      break;
 800fda2:	e059      	b.n	800fe58 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fda4:	4b2f      	ldr	r3, [pc, #188]	; (800fe64 <USBD_SetConfig+0x150>)
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d112      	bne.n	800fdd2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2202      	movs	r2, #2
 800fdb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800fdb4:	4b2b      	ldr	r3, [pc, #172]	; (800fe64 <USBD_SetConfig+0x150>)
 800fdb6:	781b      	ldrb	r3, [r3, #0]
 800fdb8:	461a      	mov	r2, r3
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fdbe:	4b29      	ldr	r3, [pc, #164]	; (800fe64 <USBD_SetConfig+0x150>)
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	4619      	mov	r1, r3
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7ff f838 	bl	800ee3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f000 f9e9 	bl	80101a2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fdd0:	e042      	b.n	800fe58 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fdd2:	4b24      	ldr	r3, [pc, #144]	; (800fe64 <USBD_SetConfig+0x150>)
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	685b      	ldr	r3, [r3, #4]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d02a      	beq.n	800fe36 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	b2db      	uxtb	r3, r3
 800fde6:	4619      	mov	r1, r3
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f7ff f826 	bl	800ee3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fdee:	4b1d      	ldr	r3, [pc, #116]	; (800fe64 <USBD_SetConfig+0x150>)
 800fdf0:	781b      	ldrb	r3, [r3, #0]
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fdf8:	4b1a      	ldr	r3, [pc, #104]	; (800fe64 <USBD_SetConfig+0x150>)
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	4619      	mov	r1, r3
 800fdfe:	6878      	ldr	r0, [r7, #4]
 800fe00:	f7fe ffff 	bl	800ee02 <USBD_SetClassConfig>
 800fe04:	4603      	mov	r3, r0
 800fe06:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fe08:	7bfb      	ldrb	r3, [r7, #15]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d00f      	beq.n	800fe2e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fe0e:	6839      	ldr	r1, [r7, #0]
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f000 f918 	bl	8010046 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	4619      	mov	r1, r3
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f7ff f80b 	bl	800ee3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2202      	movs	r2, #2
 800fe28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800fe2c:	e014      	b.n	800fe58 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f000 f9b7 	bl	80101a2 <USBD_CtlSendStatus>
      break;
 800fe34:	e010      	b.n	800fe58 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fe36:	6878      	ldr	r0, [r7, #4]
 800fe38:	f000 f9b3 	bl	80101a2 <USBD_CtlSendStatus>
      break;
 800fe3c:	e00c      	b.n	800fe58 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fe3e:	6839      	ldr	r1, [r7, #0]
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 f900 	bl	8010046 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe46:	4b07      	ldr	r3, [pc, #28]	; (800fe64 <USBD_SetConfig+0x150>)
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f7fe fff4 	bl	800ee3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fe52:	2303      	movs	r3, #3
 800fe54:	73fb      	strb	r3, [r7, #15]
      break;
 800fe56:	bf00      	nop
  }

  return ret;
 800fe58:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3710      	adds	r7, #16
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	20000ca0 	.word	0x20000ca0

0800fe68 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	88db      	ldrh	r3, [r3, #6]
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	d004      	beq.n	800fe84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fe7a:	6839      	ldr	r1, [r7, #0]
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f000 f8e2 	bl	8010046 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fe82:	e023      	b.n	800fecc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe8a:	b2db      	uxtb	r3, r3
 800fe8c:	2b02      	cmp	r3, #2
 800fe8e:	dc02      	bgt.n	800fe96 <USBD_GetConfig+0x2e>
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	dc03      	bgt.n	800fe9c <USBD_GetConfig+0x34>
 800fe94:	e015      	b.n	800fec2 <USBD_GetConfig+0x5a>
 800fe96:	2b03      	cmp	r3, #3
 800fe98:	d00b      	beq.n	800feb2 <USBD_GetConfig+0x4a>
 800fe9a:	e012      	b.n	800fec2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	3308      	adds	r3, #8
 800fea6:	2201      	movs	r2, #1
 800fea8:	4619      	mov	r1, r3
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f000 f93c 	bl	8010128 <USBD_CtlSendData>
        break;
 800feb0:	e00c      	b.n	800fecc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	3304      	adds	r3, #4
 800feb6:	2201      	movs	r2, #1
 800feb8:	4619      	mov	r1, r3
 800feba:	6878      	ldr	r0, [r7, #4]
 800febc:	f000 f934 	bl	8010128 <USBD_CtlSendData>
        break;
 800fec0:	e004      	b.n	800fecc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fec2:	6839      	ldr	r1, [r7, #0]
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 f8be 	bl	8010046 <USBD_CtlError>
        break;
 800feca:	bf00      	nop
}
 800fecc:	bf00      	nop
 800fece:	3708      	adds	r7, #8
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fee4:	b2db      	uxtb	r3, r3
 800fee6:	3b01      	subs	r3, #1
 800fee8:	2b02      	cmp	r3, #2
 800feea:	d81e      	bhi.n	800ff2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	88db      	ldrh	r3, [r3, #6]
 800fef0:	2b02      	cmp	r3, #2
 800fef2:	d004      	beq.n	800fefe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fef4:	6839      	ldr	r1, [r7, #0]
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f000 f8a5 	bl	8010046 <USBD_CtlError>
        break;
 800fefc:	e01a      	b.n	800ff34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2201      	movs	r2, #1
 800ff02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d005      	beq.n	800ff1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	68db      	ldr	r3, [r3, #12]
 800ff12:	f043 0202 	orr.w	r2, r3, #2
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	330c      	adds	r3, #12
 800ff1e:	2202      	movs	r2, #2
 800ff20:	4619      	mov	r1, r3
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f000 f900 	bl	8010128 <USBD_CtlSendData>
      break;
 800ff28:	e004      	b.n	800ff34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ff2a:	6839      	ldr	r1, [r7, #0]
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 f88a 	bl	8010046 <USBD_CtlError>
      break;
 800ff32:	bf00      	nop
  }
}
 800ff34:	bf00      	nop
 800ff36:	3708      	adds	r7, #8
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	885b      	ldrh	r3, [r3, #2]
 800ff4a:	2b01      	cmp	r3, #1
 800ff4c:	d107      	bne.n	800ff5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2201      	movs	r2, #1
 800ff52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f000 f923 	bl	80101a2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ff5c:	e013      	b.n	800ff86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	885b      	ldrh	r3, [r3, #2]
 800ff62:	2b02      	cmp	r3, #2
 800ff64:	d10b      	bne.n	800ff7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	889b      	ldrh	r3, [r3, #4]
 800ff6a:	0a1b      	lsrs	r3, r3, #8
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	b2da      	uxtb	r2, r3
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f000 f913 	bl	80101a2 <USBD_CtlSendStatus>
}
 800ff7c:	e003      	b.n	800ff86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ff7e:	6839      	ldr	r1, [r7, #0]
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f000 f860 	bl	8010046 <USBD_CtlError>
}
 800ff86:	bf00      	nop
 800ff88:	3708      	adds	r7, #8
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}

0800ff8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff8e:	b580      	push	{r7, lr}
 800ff90:	b082      	sub	sp, #8
 800ff92:	af00      	add	r7, sp, #0
 800ff94:	6078      	str	r0, [r7, #4]
 800ff96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff9e:	b2db      	uxtb	r3, r3
 800ffa0:	3b01      	subs	r3, #1
 800ffa2:	2b02      	cmp	r3, #2
 800ffa4:	d80b      	bhi.n	800ffbe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	885b      	ldrh	r3, [r3, #2]
 800ffaa:	2b01      	cmp	r3, #1
 800ffac:	d10c      	bne.n	800ffc8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f000 f8f3 	bl	80101a2 <USBD_CtlSendStatus>
      }
      break;
 800ffbc:	e004      	b.n	800ffc8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ffbe:	6839      	ldr	r1, [r7, #0]
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f000 f840 	bl	8010046 <USBD_CtlError>
      break;
 800ffc6:	e000      	b.n	800ffca <USBD_ClrFeature+0x3c>
      break;
 800ffc8:	bf00      	nop
  }
}
 800ffca:	bf00      	nop
 800ffcc:	3708      	adds	r7, #8
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}

0800ffd2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ffd2:	b580      	push	{r7, lr}
 800ffd4:	b084      	sub	sp, #16
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	6078      	str	r0, [r7, #4]
 800ffda:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	781a      	ldrb	r2, [r3, #0]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	3301      	adds	r3, #1
 800ffec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	781a      	ldrb	r2, [r3, #0]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	3301      	adds	r3, #1
 800fffa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fffc:	68f8      	ldr	r0, [r7, #12]
 800fffe:	f7ff fa17 	bl	800f430 <SWAPBYTE>
 8010002:	4603      	mov	r3, r0
 8010004:	461a      	mov	r2, r3
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	3301      	adds	r3, #1
 801000e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	3301      	adds	r3, #1
 8010014:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010016:	68f8      	ldr	r0, [r7, #12]
 8010018:	f7ff fa0a 	bl	800f430 <SWAPBYTE>
 801001c:	4603      	mov	r3, r0
 801001e:	461a      	mov	r2, r3
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	3301      	adds	r3, #1
 8010028:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	3301      	adds	r3, #1
 801002e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010030:	68f8      	ldr	r0, [r7, #12]
 8010032:	f7ff f9fd 	bl	800f430 <SWAPBYTE>
 8010036:	4603      	mov	r3, r0
 8010038:	461a      	mov	r2, r3
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	80da      	strh	r2, [r3, #6]
}
 801003e:	bf00      	nop
 8010040:	3710      	adds	r7, #16
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}

08010046 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010046:	b580      	push	{r7, lr}
 8010048:	b082      	sub	sp, #8
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
 801004e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010050:	2180      	movs	r1, #128	; 0x80
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 fbda 	bl	801080c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010058:	2100      	movs	r1, #0
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f000 fbd6 	bl	801080c <USBD_LL_StallEP>
}
 8010060:	bf00      	nop
 8010062:	3708      	adds	r7, #8
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}

08010068 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b086      	sub	sp, #24
 801006c:	af00      	add	r7, sp, #0
 801006e:	60f8      	str	r0, [r7, #12]
 8010070:	60b9      	str	r1, [r7, #8]
 8010072:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010074:	2300      	movs	r3, #0
 8010076:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d036      	beq.n	80100ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010082:	6938      	ldr	r0, [r7, #16]
 8010084:	f000 f836 	bl	80100f4 <USBD_GetLen>
 8010088:	4603      	mov	r3, r0
 801008a:	3301      	adds	r3, #1
 801008c:	b29b      	uxth	r3, r3
 801008e:	005b      	lsls	r3, r3, #1
 8010090:	b29a      	uxth	r2, r3
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010096:	7dfb      	ldrb	r3, [r7, #23]
 8010098:	68ba      	ldr	r2, [r7, #8]
 801009a:	4413      	add	r3, r2
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	7812      	ldrb	r2, [r2, #0]
 80100a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80100a2:	7dfb      	ldrb	r3, [r7, #23]
 80100a4:	3301      	adds	r3, #1
 80100a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80100a8:	7dfb      	ldrb	r3, [r7, #23]
 80100aa:	68ba      	ldr	r2, [r7, #8]
 80100ac:	4413      	add	r3, r2
 80100ae:	2203      	movs	r2, #3
 80100b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80100b2:	7dfb      	ldrb	r3, [r7, #23]
 80100b4:	3301      	adds	r3, #1
 80100b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80100b8:	e013      	b.n	80100e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80100ba:	7dfb      	ldrb	r3, [r7, #23]
 80100bc:	68ba      	ldr	r2, [r7, #8]
 80100be:	4413      	add	r3, r2
 80100c0:	693a      	ldr	r2, [r7, #16]
 80100c2:	7812      	ldrb	r2, [r2, #0]
 80100c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	3301      	adds	r3, #1
 80100ca:	613b      	str	r3, [r7, #16]
    idx++;
 80100cc:	7dfb      	ldrb	r3, [r7, #23]
 80100ce:	3301      	adds	r3, #1
 80100d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80100d2:	7dfb      	ldrb	r3, [r7, #23]
 80100d4:	68ba      	ldr	r2, [r7, #8]
 80100d6:	4413      	add	r3, r2
 80100d8:	2200      	movs	r2, #0
 80100da:	701a      	strb	r2, [r3, #0]
    idx++;
 80100dc:	7dfb      	ldrb	r3, [r7, #23]
 80100de:	3301      	adds	r3, #1
 80100e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	781b      	ldrb	r3, [r3, #0]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d1e7      	bne.n	80100ba <USBD_GetString+0x52>
 80100ea:	e000      	b.n	80100ee <USBD_GetString+0x86>
    return;
 80100ec:	bf00      	nop
  }
}
 80100ee:	3718      	adds	r7, #24
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}

080100f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b085      	sub	sp, #20
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80100fc:	2300      	movs	r3, #0
 80100fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010104:	e005      	b.n	8010112 <USBD_GetLen+0x1e>
  {
    len++;
 8010106:	7bfb      	ldrb	r3, [r7, #15]
 8010108:	3301      	adds	r3, #1
 801010a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	3301      	adds	r3, #1
 8010110:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d1f5      	bne.n	8010106 <USBD_GetLen+0x12>
  }

  return len;
 801011a:	7bfb      	ldrb	r3, [r7, #15]
}
 801011c:	4618      	mov	r0, r3
 801011e:	3714      	adds	r7, #20
 8010120:	46bd      	mov	sp, r7
 8010122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010126:	4770      	bx	lr

08010128 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b084      	sub	sp, #16
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2202      	movs	r2, #2
 8010138:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	687a      	ldr	r2, [r7, #4]
 8010146:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	68ba      	ldr	r2, [r7, #8]
 801014c:	2100      	movs	r1, #0
 801014e:	68f8      	ldr	r0, [r7, #12]
 8010150:	f000 fc2c 	bl	80109ac <USBD_LL_Transmit>

  return USBD_OK;
 8010154:	2300      	movs	r3, #0
}
 8010156:	4618      	mov	r0, r3
 8010158:	3710      	adds	r7, #16
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}

0801015e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801015e:	b580      	push	{r7, lr}
 8010160:	b084      	sub	sp, #16
 8010162:	af00      	add	r7, sp, #0
 8010164:	60f8      	str	r0, [r7, #12]
 8010166:	60b9      	str	r1, [r7, #8]
 8010168:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	68ba      	ldr	r2, [r7, #8]
 801016e:	2100      	movs	r1, #0
 8010170:	68f8      	ldr	r0, [r7, #12]
 8010172:	f000 fc1b 	bl	80109ac <USBD_LL_Transmit>

  return USBD_OK;
 8010176:	2300      	movs	r3, #0
}
 8010178:	4618      	mov	r0, r3
 801017a:	3710      	adds	r7, #16
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}

08010180 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b084      	sub	sp, #16
 8010184:	af00      	add	r7, sp, #0
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	60b9      	str	r1, [r7, #8]
 801018a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	68ba      	ldr	r2, [r7, #8]
 8010190:	2100      	movs	r1, #0
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f000 fc42 	bl	8010a1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010198:	2300      	movs	r3, #0
}
 801019a:	4618      	mov	r0, r3
 801019c:	3710      	adds	r7, #16
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}

080101a2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80101a2:	b580      	push	{r7, lr}
 80101a4:	b082      	sub	sp, #8
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2204      	movs	r2, #4
 80101ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80101b2:	2300      	movs	r3, #0
 80101b4:	2200      	movs	r2, #0
 80101b6:	2100      	movs	r1, #0
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 fbf7 	bl	80109ac <USBD_LL_Transmit>

  return USBD_OK;
 80101be:	2300      	movs	r3, #0
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	3708      	adds	r7, #8
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2205      	movs	r2, #5
 80101d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80101d8:	2300      	movs	r3, #0
 80101da:	2200      	movs	r2, #0
 80101dc:	2100      	movs	r1, #0
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f000 fc1c 	bl	8010a1c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80101e4:	2300      	movs	r3, #0
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3708      	adds	r7, #8
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
	...

080101f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80101f4:	2200      	movs	r2, #0
 80101f6:	490e      	ldr	r1, [pc, #56]	; (8010230 <MX_USB_DEVICE_Init+0x40>)
 80101f8:	480e      	ldr	r0, [pc, #56]	; (8010234 <MX_USB_DEVICE_Init+0x44>)
 80101fa:	f7fe fd85 	bl	800ed08 <USBD_Init>
 80101fe:	4603      	mov	r3, r0
 8010200:	2b00      	cmp	r3, #0
 8010202:	d001      	beq.n	8010208 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010204:	f7f1 faf8 	bl	80017f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8010208:	490b      	ldr	r1, [pc, #44]	; (8010238 <MX_USB_DEVICE_Init+0x48>)
 801020a:	480a      	ldr	r0, [pc, #40]	; (8010234 <MX_USB_DEVICE_Init+0x44>)
 801020c:	f7fe fdac 	bl	800ed68 <USBD_RegisterClass>
 8010210:	4603      	mov	r3, r0
 8010212:	2b00      	cmp	r3, #0
 8010214:	d001      	beq.n	801021a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010216:	f7f1 faef 	bl	80017f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801021a:	4806      	ldr	r0, [pc, #24]	; (8010234 <MX_USB_DEVICE_Init+0x44>)
 801021c:	f7fe fdda 	bl	800edd4 <USBD_Start>
 8010220:	4603      	mov	r3, r0
 8010222:	2b00      	cmp	r3, #0
 8010224:	d001      	beq.n	801022a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8010226:	f7f1 fae7 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801022a:	bf00      	nop
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	200000ec 	.word	0x200000ec
 8010234:	20000ca4 	.word	0x20000ca4
 8010238:	2000002c 	.word	0x2000002c

0801023c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801023c:	b480      	push	{r7}
 801023e:	b083      	sub	sp, #12
 8010240:	af00      	add	r7, sp, #0
 8010242:	4603      	mov	r3, r0
 8010244:	6039      	str	r1, [r7, #0]
 8010246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	2212      	movs	r2, #18
 801024c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801024e:	4b03      	ldr	r3, [pc, #12]	; (801025c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010250:	4618      	mov	r0, r3
 8010252:	370c      	adds	r7, #12
 8010254:	46bd      	mov	sp, r7
 8010256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025a:	4770      	bx	lr
 801025c:	2000010c 	.word	0x2000010c

08010260 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010260:	b480      	push	{r7}
 8010262:	b083      	sub	sp, #12
 8010264:	af00      	add	r7, sp, #0
 8010266:	4603      	mov	r3, r0
 8010268:	6039      	str	r1, [r7, #0]
 801026a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	2204      	movs	r2, #4
 8010270:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010272:	4b03      	ldr	r3, [pc, #12]	; (8010280 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010274:	4618      	mov	r0, r3
 8010276:	370c      	adds	r7, #12
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr
 8010280:	2000012c 	.word	0x2000012c

08010284 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	4603      	mov	r3, r0
 801028c:	6039      	str	r1, [r7, #0]
 801028e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010290:	79fb      	ldrb	r3, [r7, #7]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d105      	bne.n	80102a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010296:	683a      	ldr	r2, [r7, #0]
 8010298:	4907      	ldr	r1, [pc, #28]	; (80102b8 <USBD_FS_ProductStrDescriptor+0x34>)
 801029a:	4808      	ldr	r0, [pc, #32]	; (80102bc <USBD_FS_ProductStrDescriptor+0x38>)
 801029c:	f7ff fee4 	bl	8010068 <USBD_GetString>
 80102a0:	e004      	b.n	80102ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80102a2:	683a      	ldr	r2, [r7, #0]
 80102a4:	4904      	ldr	r1, [pc, #16]	; (80102b8 <USBD_FS_ProductStrDescriptor+0x34>)
 80102a6:	4805      	ldr	r0, [pc, #20]	; (80102bc <USBD_FS_ProductStrDescriptor+0x38>)
 80102a8:	f7ff fede 	bl	8010068 <USBD_GetString>
  }
  return USBD_StrDesc;
 80102ac:	4b02      	ldr	r3, [pc, #8]	; (80102b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3708      	adds	r7, #8
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	20000f80 	.word	0x20000f80
 80102bc:	08016acc 	.word	0x08016acc

080102c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	4603      	mov	r3, r0
 80102c8:	6039      	str	r1, [r7, #0]
 80102ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80102cc:	683a      	ldr	r2, [r7, #0]
 80102ce:	4904      	ldr	r1, [pc, #16]	; (80102e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80102d0:	4804      	ldr	r0, [pc, #16]	; (80102e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80102d2:	f7ff fec9 	bl	8010068 <USBD_GetString>
  return USBD_StrDesc;
 80102d6:	4b02      	ldr	r3, [pc, #8]	; (80102e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3708      	adds	r7, #8
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	20000f80 	.word	0x20000f80
 80102e4:	08016ae4 	.word	0x08016ae4

080102e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	4603      	mov	r3, r0
 80102f0:	6039      	str	r1, [r7, #0]
 80102f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	221a      	movs	r2, #26
 80102f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80102fa:	f000 f855 	bl	80103a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80102fe:	4b02      	ldr	r3, [pc, #8]	; (8010308 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010300:	4618      	mov	r0, r3
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	20000130 	.word	0x20000130

0801030c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
 8010312:	4603      	mov	r3, r0
 8010314:	6039      	str	r1, [r7, #0]
 8010316:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010318:	79fb      	ldrb	r3, [r7, #7]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d105      	bne.n	801032a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801031e:	683a      	ldr	r2, [r7, #0]
 8010320:	4907      	ldr	r1, [pc, #28]	; (8010340 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010322:	4808      	ldr	r0, [pc, #32]	; (8010344 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010324:	f7ff fea0 	bl	8010068 <USBD_GetString>
 8010328:	e004      	b.n	8010334 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801032a:	683a      	ldr	r2, [r7, #0]
 801032c:	4904      	ldr	r1, [pc, #16]	; (8010340 <USBD_FS_ConfigStrDescriptor+0x34>)
 801032e:	4805      	ldr	r0, [pc, #20]	; (8010344 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010330:	f7ff fe9a 	bl	8010068 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010334:	4b02      	ldr	r3, [pc, #8]	; (8010340 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010336:	4618      	mov	r0, r3
 8010338:	3708      	adds	r7, #8
 801033a:	46bd      	mov	sp, r7
 801033c:	bd80      	pop	{r7, pc}
 801033e:	bf00      	nop
 8010340:	20000f80 	.word	0x20000f80
 8010344:	08016af8 	.word	0x08016af8

08010348 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
 801034e:	4603      	mov	r3, r0
 8010350:	6039      	str	r1, [r7, #0]
 8010352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010354:	79fb      	ldrb	r3, [r7, #7]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d105      	bne.n	8010366 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801035a:	683a      	ldr	r2, [r7, #0]
 801035c:	4907      	ldr	r1, [pc, #28]	; (801037c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801035e:	4808      	ldr	r0, [pc, #32]	; (8010380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010360:	f7ff fe82 	bl	8010068 <USBD_GetString>
 8010364:	e004      	b.n	8010370 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010366:	683a      	ldr	r2, [r7, #0]
 8010368:	4904      	ldr	r1, [pc, #16]	; (801037c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801036a:	4805      	ldr	r0, [pc, #20]	; (8010380 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801036c:	f7ff fe7c 	bl	8010068 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010370:	4b02      	ldr	r3, [pc, #8]	; (801037c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010372:	4618      	mov	r0, r3
 8010374:	3708      	adds	r7, #8
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	20000f80 	.word	0x20000f80
 8010380:	08016b04 	.word	0x08016b04

08010384 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	4603      	mov	r3, r0
 801038c:	6039      	str	r1, [r7, #0]
 801038e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	220c      	movs	r2, #12
 8010394:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010396:	4b03      	ldr	r3, [pc, #12]	; (80103a4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010398:	4618      	mov	r0, r3
 801039a:	370c      	adds	r7, #12
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr
 80103a4:	20000120 	.word	0x20000120

080103a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80103ae:	4b0f      	ldr	r3, [pc, #60]	; (80103ec <Get_SerialNum+0x44>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80103b4:	4b0e      	ldr	r3, [pc, #56]	; (80103f0 <Get_SerialNum+0x48>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80103ba:	4b0e      	ldr	r3, [pc, #56]	; (80103f4 <Get_SerialNum+0x4c>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80103c0:	68fa      	ldr	r2, [r7, #12]
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4413      	add	r3, r2
 80103c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d009      	beq.n	80103e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80103ce:	2208      	movs	r2, #8
 80103d0:	4909      	ldr	r1, [pc, #36]	; (80103f8 <Get_SerialNum+0x50>)
 80103d2:	68f8      	ldr	r0, [r7, #12]
 80103d4:	f000 f814 	bl	8010400 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80103d8:	2204      	movs	r2, #4
 80103da:	4908      	ldr	r1, [pc, #32]	; (80103fc <Get_SerialNum+0x54>)
 80103dc:	68b8      	ldr	r0, [r7, #8]
 80103de:	f000 f80f 	bl	8010400 <IntToUnicode>
  }
}
 80103e2:	bf00      	nop
 80103e4:	3710      	adds	r7, #16
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
 80103ea:	bf00      	nop
 80103ec:	1fff7590 	.word	0x1fff7590
 80103f0:	1fff7594 	.word	0x1fff7594
 80103f4:	1fff7598 	.word	0x1fff7598
 80103f8:	20000132 	.word	0x20000132
 80103fc:	20000142 	.word	0x20000142

08010400 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010400:	b480      	push	{r7}
 8010402:	b087      	sub	sp, #28
 8010404:	af00      	add	r7, sp, #0
 8010406:	60f8      	str	r0, [r7, #12]
 8010408:	60b9      	str	r1, [r7, #8]
 801040a:	4613      	mov	r3, r2
 801040c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801040e:	2300      	movs	r3, #0
 8010410:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010412:	2300      	movs	r3, #0
 8010414:	75fb      	strb	r3, [r7, #23]
 8010416:	e027      	b.n	8010468 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	0f1b      	lsrs	r3, r3, #28
 801041c:	2b09      	cmp	r3, #9
 801041e:	d80b      	bhi.n	8010438 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	0f1b      	lsrs	r3, r3, #28
 8010424:	b2da      	uxtb	r2, r3
 8010426:	7dfb      	ldrb	r3, [r7, #23]
 8010428:	005b      	lsls	r3, r3, #1
 801042a:	4619      	mov	r1, r3
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	440b      	add	r3, r1
 8010430:	3230      	adds	r2, #48	; 0x30
 8010432:	b2d2      	uxtb	r2, r2
 8010434:	701a      	strb	r2, [r3, #0]
 8010436:	e00a      	b.n	801044e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	0f1b      	lsrs	r3, r3, #28
 801043c:	b2da      	uxtb	r2, r3
 801043e:	7dfb      	ldrb	r3, [r7, #23]
 8010440:	005b      	lsls	r3, r3, #1
 8010442:	4619      	mov	r1, r3
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	440b      	add	r3, r1
 8010448:	3237      	adds	r2, #55	; 0x37
 801044a:	b2d2      	uxtb	r2, r2
 801044c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	011b      	lsls	r3, r3, #4
 8010452:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010454:	7dfb      	ldrb	r3, [r7, #23]
 8010456:	005b      	lsls	r3, r3, #1
 8010458:	3301      	adds	r3, #1
 801045a:	68ba      	ldr	r2, [r7, #8]
 801045c:	4413      	add	r3, r2
 801045e:	2200      	movs	r2, #0
 8010460:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010462:	7dfb      	ldrb	r3, [r7, #23]
 8010464:	3301      	adds	r3, #1
 8010466:	75fb      	strb	r3, [r7, #23]
 8010468:	7dfa      	ldrb	r2, [r7, #23]
 801046a:	79fb      	ldrb	r3, [r7, #7]
 801046c:	429a      	cmp	r2, r3
 801046e:	d3d3      	bcc.n	8010418 <IntToUnicode+0x18>
  }
}
 8010470:	bf00      	nop
 8010472:	bf00      	nop
 8010474:	371c      	adds	r7, #28
 8010476:	46bd      	mov	sp, r7
 8010478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047c:	4770      	bx	lr
	...

08010480 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	4a0d      	ldr	r2, [pc, #52]	; (80104c4 <HAL_PCD_MspInit+0x44>)
 801048e:	4293      	cmp	r3, r2
 8010490:	d113      	bne.n	80104ba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010492:	4b0d      	ldr	r3, [pc, #52]	; (80104c8 <HAL_PCD_MspInit+0x48>)
 8010494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010496:	4a0c      	ldr	r2, [pc, #48]	; (80104c8 <HAL_PCD_MspInit+0x48>)
 8010498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801049c:	6593      	str	r3, [r2, #88]	; 0x58
 801049e:	4b0a      	ldr	r3, [pc, #40]	; (80104c8 <HAL_PCD_MspInit+0x48>)
 80104a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80104a6:	60fb      	str	r3, [r7, #12]
 80104a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80104aa:	2200      	movs	r2, #0
 80104ac:	2100      	movs	r1, #0
 80104ae:	2043      	movs	r0, #67	; 0x43
 80104b0:	f7f5 fc53 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80104b4:	2043      	movs	r0, #67	; 0x43
 80104b6:	f7f5 fc6c 	bl	8005d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80104ba:	bf00      	nop
 80104bc:	3710      	adds	r7, #16
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}
 80104c2:	bf00      	nop
 80104c4:	40006800 	.word	0x40006800
 80104c8:	40021000 	.word	0x40021000

080104cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b082      	sub	sp, #8
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80104e0:	4619      	mov	r1, r3
 80104e2:	4610      	mov	r0, r2
 80104e4:	f7fe fcc3 	bl	800ee6e <USBD_LL_SetupStage>
}
 80104e8:	bf00      	nop
 80104ea:	3708      	adds	r7, #8
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b082      	sub	sp, #8
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	460b      	mov	r3, r1
 80104fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8010502:	78fa      	ldrb	r2, [r7, #3]
 8010504:	6879      	ldr	r1, [r7, #4]
 8010506:	4613      	mov	r3, r2
 8010508:	009b      	lsls	r3, r3, #2
 801050a:	4413      	add	r3, r2
 801050c:	00db      	lsls	r3, r3, #3
 801050e:	440b      	add	r3, r1
 8010510:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	78fb      	ldrb	r3, [r7, #3]
 8010518:	4619      	mov	r1, r3
 801051a:	f7fe fcfd 	bl	800ef18 <USBD_LL_DataOutStage>
}
 801051e:	bf00      	nop
 8010520:	3708      	adds	r7, #8
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}

08010526 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010526:	b580      	push	{r7, lr}
 8010528:	b082      	sub	sp, #8
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
 801052e:	460b      	mov	r3, r1
 8010530:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8010538:	78fa      	ldrb	r2, [r7, #3]
 801053a:	6879      	ldr	r1, [r7, #4]
 801053c:	4613      	mov	r3, r2
 801053e:	009b      	lsls	r3, r3, #2
 8010540:	4413      	add	r3, r2
 8010542:	00db      	lsls	r3, r3, #3
 8010544:	440b      	add	r3, r1
 8010546:	333c      	adds	r3, #60	; 0x3c
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	78fb      	ldrb	r3, [r7, #3]
 801054c:	4619      	mov	r1, r3
 801054e:	f7fe fd96 	bl	800f07e <USBD_LL_DataInStage>
}
 8010552:	bf00      	nop
 8010554:	3708      	adds	r7, #8
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}

0801055a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801055a:	b580      	push	{r7, lr}
 801055c:	b082      	sub	sp, #8
 801055e:	af00      	add	r7, sp, #0
 8010560:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010568:	4618      	mov	r0, r3
 801056a:	f7fe fed0 	bl	800f30e <USBD_LL_SOF>
}
 801056e:	bf00      	nop
 8010570:	3708      	adds	r7, #8
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}

08010576 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010576:	b580      	push	{r7, lr}
 8010578:	b084      	sub	sp, #16
 801057a:	af00      	add	r7, sp, #0
 801057c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801057e:	2301      	movs	r3, #1
 8010580:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	689b      	ldr	r3, [r3, #8]
 8010586:	2b02      	cmp	r3, #2
 8010588:	d001      	beq.n	801058e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801058a:	f7f1 f935 	bl	80017f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010594:	7bfa      	ldrb	r2, [r7, #15]
 8010596:	4611      	mov	r1, r2
 8010598:	4618      	mov	r0, r3
 801059a:	f7fe fe74 	bl	800f286 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7fe fe1c 	bl	800f1e2 <USBD_LL_Reset>
}
 80105aa:	bf00      	nop
 80105ac:	3710      	adds	r7, #16
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}
	...

080105b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7fe fe6f 	bl	800f2a6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	699b      	ldr	r3, [r3, #24]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d005      	beq.n	80105dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80105d0:	4b04      	ldr	r3, [pc, #16]	; (80105e4 <HAL_PCD_SuspendCallback+0x30>)
 80105d2:	691b      	ldr	r3, [r3, #16]
 80105d4:	4a03      	ldr	r2, [pc, #12]	; (80105e4 <HAL_PCD_SuspendCallback+0x30>)
 80105d6:	f043 0306 	orr.w	r3, r3, #6
 80105da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80105dc:	bf00      	nop
 80105de:	3708      	adds	r7, #8
 80105e0:	46bd      	mov	sp, r7
 80105e2:	bd80      	pop	{r7, pc}
 80105e4:	e000ed00 	.word	0xe000ed00

080105e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	699b      	ldr	r3, [r3, #24]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d007      	beq.n	8010608 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80105f8:	4b08      	ldr	r3, [pc, #32]	; (801061c <HAL_PCD_ResumeCallback+0x34>)
 80105fa:	691b      	ldr	r3, [r3, #16]
 80105fc:	4a07      	ldr	r2, [pc, #28]	; (801061c <HAL_PCD_ResumeCallback+0x34>)
 80105fe:	f023 0306 	bic.w	r3, r3, #6
 8010602:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010604:	f000 fa90 	bl	8010b28 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801060e:	4618      	mov	r0, r3
 8010610:	f7fe fe65 	bl	800f2de <USBD_LL_Resume>
}
 8010614:	bf00      	nop
 8010616:	3708      	adds	r7, #8
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}
 801061c:	e000ed00 	.word	0xe000ed00

08010620 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8010628:	f7f8 fbea 	bl	8008e00 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801062c:	4a22      	ldr	r2, [pc, #136]	; (80106b8 <USBD_LL_Init+0x98>)
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	4a20      	ldr	r2, [pc, #128]	; (80106b8 <USBD_LL_Init+0x98>)
 8010638:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 801063c:	4b1e      	ldr	r3, [pc, #120]	; (80106b8 <USBD_LL_Init+0x98>)
 801063e:	4a1f      	ldr	r2, [pc, #124]	; (80106bc <USBD_LL_Init+0x9c>)
 8010640:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010642:	4b1d      	ldr	r3, [pc, #116]	; (80106b8 <USBD_LL_Init+0x98>)
 8010644:	2208      	movs	r2, #8
 8010646:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010648:	4b1b      	ldr	r3, [pc, #108]	; (80106b8 <USBD_LL_Init+0x98>)
 801064a:	2202      	movs	r2, #2
 801064c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801064e:	4b1a      	ldr	r3, [pc, #104]	; (80106b8 <USBD_LL_Init+0x98>)
 8010650:	2202      	movs	r2, #2
 8010652:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010654:	4b18      	ldr	r3, [pc, #96]	; (80106b8 <USBD_LL_Init+0x98>)
 8010656:	2200      	movs	r2, #0
 8010658:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801065a:	4b17      	ldr	r3, [pc, #92]	; (80106b8 <USBD_LL_Init+0x98>)
 801065c:	2200      	movs	r2, #0
 801065e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010660:	4b15      	ldr	r3, [pc, #84]	; (80106b8 <USBD_LL_Init+0x98>)
 8010662:	2200      	movs	r2, #0
 8010664:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010666:	4b14      	ldr	r3, [pc, #80]	; (80106b8 <USBD_LL_Init+0x98>)
 8010668:	2200      	movs	r2, #0
 801066a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801066c:	4812      	ldr	r0, [pc, #72]	; (80106b8 <USBD_LL_Init+0x98>)
 801066e:	f7f6 fdfd 	bl	800726c <HAL_PCD_Init>
 8010672:	4603      	mov	r3, r0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d001      	beq.n	801067c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8010678:	f7f1 f8be 	bl	80017f8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010682:	2318      	movs	r3, #24
 8010684:	2200      	movs	r2, #0
 8010686:	2100      	movs	r1, #0
 8010688:	f7f8 fae9 	bl	8008c5e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010692:	2358      	movs	r3, #88	; 0x58
 8010694:	2200      	movs	r2, #0
 8010696:	2180      	movs	r1, #128	; 0x80
 8010698:	f7f8 fae1 	bl	8008c5e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80106a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80106a6:	2200      	movs	r2, #0
 80106a8:	2181      	movs	r1, #129	; 0x81
 80106aa:	f7f8 fad8 	bl	8008c5e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80106ae:	2300      	movs	r3, #0
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3708      	adds	r7, #8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}
 80106b8:	20001180 	.word	0x20001180
 80106bc:	40006800 	.word	0x40006800

080106c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b084      	sub	sp, #16
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106c8:	2300      	movs	r3, #0
 80106ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106cc:	2300      	movs	r3, #0
 80106ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80106d6:	4618      	mov	r0, r3
 80106d8:	f7f6 fece 	bl	8007478 <HAL_PCD_Start>
 80106dc:	4603      	mov	r3, r0
 80106de:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80106e0:	7bbb      	ldrb	r3, [r7, #14]
 80106e2:	2b03      	cmp	r3, #3
 80106e4:	d816      	bhi.n	8010714 <USBD_LL_Start+0x54>
 80106e6:	a201      	add	r2, pc, #4	; (adr r2, 80106ec <USBD_LL_Start+0x2c>)
 80106e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ec:	080106fd 	.word	0x080106fd
 80106f0:	08010703 	.word	0x08010703
 80106f4:	08010709 	.word	0x08010709
 80106f8:	0801070f 	.word	0x0801070f
    case HAL_OK :
      usb_status = USBD_OK;
 80106fc:	2300      	movs	r3, #0
 80106fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010700:	e00b      	b.n	801071a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010702:	2303      	movs	r3, #3
 8010704:	73fb      	strb	r3, [r7, #15]
    break;
 8010706:	e008      	b.n	801071a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010708:	2301      	movs	r3, #1
 801070a:	73fb      	strb	r3, [r7, #15]
    break;
 801070c:	e005      	b.n	801071a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801070e:	2303      	movs	r3, #3
 8010710:	73fb      	strb	r3, [r7, #15]
    break;
 8010712:	e002      	b.n	801071a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8010714:	2303      	movs	r3, #3
 8010716:	73fb      	strb	r3, [r7, #15]
    break;
 8010718:	bf00      	nop
  }
  return usb_status;
 801071a:	7bfb      	ldrb	r3, [r7, #15]
}
 801071c:	4618      	mov	r0, r3
 801071e:	3710      	adds	r7, #16
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b084      	sub	sp, #16
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	4608      	mov	r0, r1
 801072e:	4611      	mov	r1, r2
 8010730:	461a      	mov	r2, r3
 8010732:	4603      	mov	r3, r0
 8010734:	70fb      	strb	r3, [r7, #3]
 8010736:	460b      	mov	r3, r1
 8010738:	70bb      	strb	r3, [r7, #2]
 801073a:	4613      	mov	r3, r2
 801073c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801073e:	2300      	movs	r3, #0
 8010740:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010742:	2300      	movs	r3, #0
 8010744:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801074c:	78bb      	ldrb	r3, [r7, #2]
 801074e:	883a      	ldrh	r2, [r7, #0]
 8010750:	78f9      	ldrb	r1, [r7, #3]
 8010752:	f7f6 ffff 	bl	8007754 <HAL_PCD_EP_Open>
 8010756:	4603      	mov	r3, r0
 8010758:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801075a:	7bbb      	ldrb	r3, [r7, #14]
 801075c:	2b03      	cmp	r3, #3
 801075e:	d817      	bhi.n	8010790 <USBD_LL_OpenEP+0x6c>
 8010760:	a201      	add	r2, pc, #4	; (adr r2, 8010768 <USBD_LL_OpenEP+0x44>)
 8010762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010766:	bf00      	nop
 8010768:	08010779 	.word	0x08010779
 801076c:	0801077f 	.word	0x0801077f
 8010770:	08010785 	.word	0x08010785
 8010774:	0801078b 	.word	0x0801078b
    case HAL_OK :
      usb_status = USBD_OK;
 8010778:	2300      	movs	r3, #0
 801077a:	73fb      	strb	r3, [r7, #15]
    break;
 801077c:	e00b      	b.n	8010796 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801077e:	2303      	movs	r3, #3
 8010780:	73fb      	strb	r3, [r7, #15]
    break;
 8010782:	e008      	b.n	8010796 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010784:	2301      	movs	r3, #1
 8010786:	73fb      	strb	r3, [r7, #15]
    break;
 8010788:	e005      	b.n	8010796 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801078a:	2303      	movs	r3, #3
 801078c:	73fb      	strb	r3, [r7, #15]
    break;
 801078e:	e002      	b.n	8010796 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8010790:	2303      	movs	r3, #3
 8010792:	73fb      	strb	r3, [r7, #15]
    break;
 8010794:	bf00      	nop
  }
  return usb_status;
 8010796:	7bfb      	ldrb	r3, [r7, #15]
}
 8010798:	4618      	mov	r0, r3
 801079a:	3710      	adds	r7, #16
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}

080107a0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b084      	sub	sp, #16
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
 80107a8:	460b      	mov	r3, r1
 80107aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107ac:	2300      	movs	r3, #0
 80107ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107b0:	2300      	movs	r3, #0
 80107b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80107ba:	78fa      	ldrb	r2, [r7, #3]
 80107bc:	4611      	mov	r1, r2
 80107be:	4618      	mov	r0, r3
 80107c0:	f7f7 f825 	bl	800780e <HAL_PCD_EP_Close>
 80107c4:	4603      	mov	r3, r0
 80107c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80107c8:	7bbb      	ldrb	r3, [r7, #14]
 80107ca:	2b03      	cmp	r3, #3
 80107cc:	d816      	bhi.n	80107fc <USBD_LL_CloseEP+0x5c>
 80107ce:	a201      	add	r2, pc, #4	; (adr r2, 80107d4 <USBD_LL_CloseEP+0x34>)
 80107d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107d4:	080107e5 	.word	0x080107e5
 80107d8:	080107eb 	.word	0x080107eb
 80107dc:	080107f1 	.word	0x080107f1
 80107e0:	080107f7 	.word	0x080107f7
    case HAL_OK :
      usb_status = USBD_OK;
 80107e4:	2300      	movs	r3, #0
 80107e6:	73fb      	strb	r3, [r7, #15]
    break;
 80107e8:	e00b      	b.n	8010802 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80107ea:	2303      	movs	r3, #3
 80107ec:	73fb      	strb	r3, [r7, #15]
    break;
 80107ee:	e008      	b.n	8010802 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80107f0:	2301      	movs	r3, #1
 80107f2:	73fb      	strb	r3, [r7, #15]
    break;
 80107f4:	e005      	b.n	8010802 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80107f6:	2303      	movs	r3, #3
 80107f8:	73fb      	strb	r3, [r7, #15]
    break;
 80107fa:	e002      	b.n	8010802 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80107fc:	2303      	movs	r3, #3
 80107fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010800:	bf00      	nop
  }
  return usb_status;
 8010802:	7bfb      	ldrb	r3, [r7, #15]
}
 8010804:	4618      	mov	r0, r3
 8010806:	3710      	adds	r7, #16
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}

0801080c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b084      	sub	sp, #16
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	460b      	mov	r3, r1
 8010816:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010818:	2300      	movs	r3, #0
 801081a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801081c:	2300      	movs	r3, #0
 801081e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010826:	78fa      	ldrb	r2, [r7, #3]
 8010828:	4611      	mov	r1, r2
 801082a:	4618      	mov	r0, r3
 801082c:	f7f7 f89f 	bl	800796e <HAL_PCD_EP_SetStall>
 8010830:	4603      	mov	r3, r0
 8010832:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010834:	7bbb      	ldrb	r3, [r7, #14]
 8010836:	2b03      	cmp	r3, #3
 8010838:	d816      	bhi.n	8010868 <USBD_LL_StallEP+0x5c>
 801083a:	a201      	add	r2, pc, #4	; (adr r2, 8010840 <USBD_LL_StallEP+0x34>)
 801083c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010840:	08010851 	.word	0x08010851
 8010844:	08010857 	.word	0x08010857
 8010848:	0801085d 	.word	0x0801085d
 801084c:	08010863 	.word	0x08010863
    case HAL_OK :
      usb_status = USBD_OK;
 8010850:	2300      	movs	r3, #0
 8010852:	73fb      	strb	r3, [r7, #15]
    break;
 8010854:	e00b      	b.n	801086e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010856:	2303      	movs	r3, #3
 8010858:	73fb      	strb	r3, [r7, #15]
    break;
 801085a:	e008      	b.n	801086e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801085c:	2301      	movs	r3, #1
 801085e:	73fb      	strb	r3, [r7, #15]
    break;
 8010860:	e005      	b.n	801086e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010862:	2303      	movs	r3, #3
 8010864:	73fb      	strb	r3, [r7, #15]
    break;
 8010866:	e002      	b.n	801086e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010868:	2303      	movs	r3, #3
 801086a:	73fb      	strb	r3, [r7, #15]
    break;
 801086c:	bf00      	nop
  }
  return usb_status;
 801086e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010870:	4618      	mov	r0, r3
 8010872:	3710      	adds	r7, #16
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}

08010878 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b084      	sub	sp, #16
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	460b      	mov	r3, r1
 8010882:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010884:	2300      	movs	r3, #0
 8010886:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010888:	2300      	movs	r3, #0
 801088a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010892:	78fa      	ldrb	r2, [r7, #3]
 8010894:	4611      	mov	r1, r2
 8010896:	4618      	mov	r0, r3
 8010898:	f7f7 f8c9 	bl	8007a2e <HAL_PCD_EP_ClrStall>
 801089c:	4603      	mov	r3, r0
 801089e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80108a0:	7bbb      	ldrb	r3, [r7, #14]
 80108a2:	2b03      	cmp	r3, #3
 80108a4:	d816      	bhi.n	80108d4 <USBD_LL_ClearStallEP+0x5c>
 80108a6:	a201      	add	r2, pc, #4	; (adr r2, 80108ac <USBD_LL_ClearStallEP+0x34>)
 80108a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ac:	080108bd 	.word	0x080108bd
 80108b0:	080108c3 	.word	0x080108c3
 80108b4:	080108c9 	.word	0x080108c9
 80108b8:	080108cf 	.word	0x080108cf
    case HAL_OK :
      usb_status = USBD_OK;
 80108bc:	2300      	movs	r3, #0
 80108be:	73fb      	strb	r3, [r7, #15]
    break;
 80108c0:	e00b      	b.n	80108da <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80108c2:	2303      	movs	r3, #3
 80108c4:	73fb      	strb	r3, [r7, #15]
    break;
 80108c6:	e008      	b.n	80108da <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80108c8:	2301      	movs	r3, #1
 80108ca:	73fb      	strb	r3, [r7, #15]
    break;
 80108cc:	e005      	b.n	80108da <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80108ce:	2303      	movs	r3, #3
 80108d0:	73fb      	strb	r3, [r7, #15]
    break;
 80108d2:	e002      	b.n	80108da <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80108d4:	2303      	movs	r3, #3
 80108d6:	73fb      	strb	r3, [r7, #15]
    break;
 80108d8:	bf00      	nop
  }
  return usb_status;
 80108da:	7bfb      	ldrb	r3, [r7, #15]
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3710      	adds	r7, #16
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108e4:	b480      	push	{r7}
 80108e6:	b085      	sub	sp, #20
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	460b      	mov	r3, r1
 80108ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80108f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80108f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	da0c      	bge.n	801091a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010900:	78fb      	ldrb	r3, [r7, #3]
 8010902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010906:	68f9      	ldr	r1, [r7, #12]
 8010908:	1c5a      	adds	r2, r3, #1
 801090a:	4613      	mov	r3, r2
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	4413      	add	r3, r2
 8010910:	00db      	lsls	r3, r3, #3
 8010912:	440b      	add	r3, r1
 8010914:	3302      	adds	r3, #2
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	e00b      	b.n	8010932 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801091a:	78fb      	ldrb	r3, [r7, #3]
 801091c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010920:	68f9      	ldr	r1, [r7, #12]
 8010922:	4613      	mov	r3, r2
 8010924:	009b      	lsls	r3, r3, #2
 8010926:	4413      	add	r3, r2
 8010928:	00db      	lsls	r3, r3, #3
 801092a:	440b      	add	r3, r1
 801092c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8010930:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010932:	4618      	mov	r0, r3
 8010934:	3714      	adds	r7, #20
 8010936:	46bd      	mov	sp, r7
 8010938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093c:	4770      	bx	lr
	...

08010940 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b084      	sub	sp, #16
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
 8010948:	460b      	mov	r3, r1
 801094a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801094c:	2300      	movs	r3, #0
 801094e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010950:	2300      	movs	r3, #0
 8010952:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801095a:	78fa      	ldrb	r2, [r7, #3]
 801095c:	4611      	mov	r1, r2
 801095e:	4618      	mov	r0, r3
 8010960:	f7f6 fed3 	bl	800770a <HAL_PCD_SetAddress>
 8010964:	4603      	mov	r3, r0
 8010966:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010968:	7bbb      	ldrb	r3, [r7, #14]
 801096a:	2b03      	cmp	r3, #3
 801096c:	d816      	bhi.n	801099c <USBD_LL_SetUSBAddress+0x5c>
 801096e:	a201      	add	r2, pc, #4	; (adr r2, 8010974 <USBD_LL_SetUSBAddress+0x34>)
 8010970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010974:	08010985 	.word	0x08010985
 8010978:	0801098b 	.word	0x0801098b
 801097c:	08010991 	.word	0x08010991
 8010980:	08010997 	.word	0x08010997
    case HAL_OK :
      usb_status = USBD_OK;
 8010984:	2300      	movs	r3, #0
 8010986:	73fb      	strb	r3, [r7, #15]
    break;
 8010988:	e00b      	b.n	80109a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801098a:	2303      	movs	r3, #3
 801098c:	73fb      	strb	r3, [r7, #15]
    break;
 801098e:	e008      	b.n	80109a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010990:	2301      	movs	r3, #1
 8010992:	73fb      	strb	r3, [r7, #15]
    break;
 8010994:	e005      	b.n	80109a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010996:	2303      	movs	r3, #3
 8010998:	73fb      	strb	r3, [r7, #15]
    break;
 801099a:	e002      	b.n	80109a2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 801099c:	2303      	movs	r3, #3
 801099e:	73fb      	strb	r3, [r7, #15]
    break;
 80109a0:	bf00      	nop
  }
  return usb_status;
 80109a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3710      	adds	r7, #16
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b086      	sub	sp, #24
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	607a      	str	r2, [r7, #4]
 80109b6:	603b      	str	r3, [r7, #0]
 80109b8:	460b      	mov	r3, r1
 80109ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109bc:	2300      	movs	r3, #0
 80109be:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109c0:	2300      	movs	r3, #0
 80109c2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80109ca:	7af9      	ldrb	r1, [r7, #11]
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	687a      	ldr	r2, [r7, #4]
 80109d0:	f7f6 ff96 	bl	8007900 <HAL_PCD_EP_Transmit>
 80109d4:	4603      	mov	r3, r0
 80109d6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80109d8:	7dbb      	ldrb	r3, [r7, #22]
 80109da:	2b03      	cmp	r3, #3
 80109dc:	d816      	bhi.n	8010a0c <USBD_LL_Transmit+0x60>
 80109de:	a201      	add	r2, pc, #4	; (adr r2, 80109e4 <USBD_LL_Transmit+0x38>)
 80109e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109e4:	080109f5 	.word	0x080109f5
 80109e8:	080109fb 	.word	0x080109fb
 80109ec:	08010a01 	.word	0x08010a01
 80109f0:	08010a07 	.word	0x08010a07
    case HAL_OK :
      usb_status = USBD_OK;
 80109f4:	2300      	movs	r3, #0
 80109f6:	75fb      	strb	r3, [r7, #23]
    break;
 80109f8:	e00b      	b.n	8010a12 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80109fa:	2303      	movs	r3, #3
 80109fc:	75fb      	strb	r3, [r7, #23]
    break;
 80109fe:	e008      	b.n	8010a12 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010a00:	2301      	movs	r3, #1
 8010a02:	75fb      	strb	r3, [r7, #23]
    break;
 8010a04:	e005      	b.n	8010a12 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010a06:	2303      	movs	r3, #3
 8010a08:	75fb      	strb	r3, [r7, #23]
    break;
 8010a0a:	e002      	b.n	8010a12 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8010a0c:	2303      	movs	r3, #3
 8010a0e:	75fb      	strb	r3, [r7, #23]
    break;
 8010a10:	bf00      	nop
  }
  return usb_status;
 8010a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3718      	adds	r7, #24
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b086      	sub	sp, #24
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	607a      	str	r2, [r7, #4]
 8010a26:	603b      	str	r3, [r7, #0]
 8010a28:	460b      	mov	r3, r1
 8010a2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a30:	2300      	movs	r3, #0
 8010a32:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010a3a:	7af9      	ldrb	r1, [r7, #11]
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	687a      	ldr	r2, [r7, #4]
 8010a40:	f7f6 ff2d 	bl	800789e <HAL_PCD_EP_Receive>
 8010a44:	4603      	mov	r3, r0
 8010a46:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010a48:	7dbb      	ldrb	r3, [r7, #22]
 8010a4a:	2b03      	cmp	r3, #3
 8010a4c:	d816      	bhi.n	8010a7c <USBD_LL_PrepareReceive+0x60>
 8010a4e:	a201      	add	r2, pc, #4	; (adr r2, 8010a54 <USBD_LL_PrepareReceive+0x38>)
 8010a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a54:	08010a65 	.word	0x08010a65
 8010a58:	08010a6b 	.word	0x08010a6b
 8010a5c:	08010a71 	.word	0x08010a71
 8010a60:	08010a77 	.word	0x08010a77
    case HAL_OK :
      usb_status = USBD_OK;
 8010a64:	2300      	movs	r3, #0
 8010a66:	75fb      	strb	r3, [r7, #23]
    break;
 8010a68:	e00b      	b.n	8010a82 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010a6a:	2303      	movs	r3, #3
 8010a6c:	75fb      	strb	r3, [r7, #23]
    break;
 8010a6e:	e008      	b.n	8010a82 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010a70:	2301      	movs	r3, #1
 8010a72:	75fb      	strb	r3, [r7, #23]
    break;
 8010a74:	e005      	b.n	8010a82 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010a76:	2303      	movs	r3, #3
 8010a78:	75fb      	strb	r3, [r7, #23]
    break;
 8010a7a:	e002      	b.n	8010a82 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8010a7c:	2303      	movs	r3, #3
 8010a7e:	75fb      	strb	r3, [r7, #23]
    break;
 8010a80:	bf00      	nop
  }
  return usb_status;
 8010a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a84:	4618      	mov	r0, r3
 8010a86:	3718      	adds	r7, #24
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	460b      	mov	r3, r1
 8010a96:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010a98:	78fb      	ldrb	r3, [r7, #3]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d002      	beq.n	8010aa4 <HAL_PCDEx_LPM_Callback+0x18>
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	d013      	beq.n	8010aca <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010aa2:	e023      	b.n	8010aec <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	699b      	ldr	r3, [r3, #24]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d007      	beq.n	8010abc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010aac:	f000 f83c 	bl	8010b28 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ab0:	4b10      	ldr	r3, [pc, #64]	; (8010af4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010ab2:	691b      	ldr	r3, [r3, #16]
 8010ab4:	4a0f      	ldr	r2, [pc, #60]	; (8010af4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010ab6:	f023 0306 	bic.w	r3, r3, #6
 8010aba:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7fe fc0b 	bl	800f2de <USBD_LL_Resume>
    break;
 8010ac8:	e010      	b.n	8010aec <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7fe fbe8 	bl	800f2a6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	699b      	ldr	r3, [r3, #24]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d005      	beq.n	8010aea <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ade:	4b05      	ldr	r3, [pc, #20]	; (8010af4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010ae0:	691b      	ldr	r3, [r3, #16]
 8010ae2:	4a04      	ldr	r2, [pc, #16]	; (8010af4 <HAL_PCDEx_LPM_Callback+0x68>)
 8010ae4:	f043 0306 	orr.w	r3, r3, #6
 8010ae8:	6113      	str	r3, [r2, #16]
    break;
 8010aea:	bf00      	nop
}
 8010aec:	bf00      	nop
 8010aee:	3708      	adds	r7, #8
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	e000ed00 	.word	0xe000ed00

08010af8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b083      	sub	sp, #12
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010b00:	4b03      	ldr	r3, [pc, #12]	; (8010b10 <USBD_static_malloc+0x18>)
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	370c      	adds	r7, #12
 8010b06:	46bd      	mov	sp, r7
 8010b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0c:	4770      	bx	lr
 8010b0e:	bf00      	nop
 8010b10:	20001478 	.word	0x20001478

08010b14 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010b14:	b480      	push	{r7}
 8010b16:	b083      	sub	sp, #12
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]

}
 8010b1c:	bf00      	nop
 8010b1e:	370c      	adds	r7, #12
 8010b20:	46bd      	mov	sp, r7
 8010b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b26:	4770      	bx	lr

08010b28 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010b2c:	f7f0 fbe2 	bl	80012f4 <SystemClock_Config>
}
 8010b30:	bf00      	nop
 8010b32:	bd80      	pop	{r7, pc}

08010b34 <malloc>:
 8010b34:	4b02      	ldr	r3, [pc, #8]	; (8010b40 <malloc+0xc>)
 8010b36:	4601      	mov	r1, r0
 8010b38:	6818      	ldr	r0, [r3, #0]
 8010b3a:	f000 b82b 	b.w	8010b94 <_malloc_r>
 8010b3e:	bf00      	nop
 8010b40:	20000310 	.word	0x20000310

08010b44 <free>:
 8010b44:	4b02      	ldr	r3, [pc, #8]	; (8010b50 <free+0xc>)
 8010b46:	4601      	mov	r1, r0
 8010b48:	6818      	ldr	r0, [r3, #0]
 8010b4a:	f002 bf57 	b.w	80139fc <_free_r>
 8010b4e:	bf00      	nop
 8010b50:	20000310 	.word	0x20000310

08010b54 <sbrk_aligned>:
 8010b54:	b570      	push	{r4, r5, r6, lr}
 8010b56:	4e0e      	ldr	r6, [pc, #56]	; (8010b90 <sbrk_aligned+0x3c>)
 8010b58:	460c      	mov	r4, r1
 8010b5a:	6831      	ldr	r1, [r6, #0]
 8010b5c:	4605      	mov	r5, r0
 8010b5e:	b911      	cbnz	r1, 8010b66 <sbrk_aligned+0x12>
 8010b60:	f002 f840 	bl	8012be4 <_sbrk_r>
 8010b64:	6030      	str	r0, [r6, #0]
 8010b66:	4621      	mov	r1, r4
 8010b68:	4628      	mov	r0, r5
 8010b6a:	f002 f83b 	bl	8012be4 <_sbrk_r>
 8010b6e:	1c43      	adds	r3, r0, #1
 8010b70:	d00a      	beq.n	8010b88 <sbrk_aligned+0x34>
 8010b72:	1cc4      	adds	r4, r0, #3
 8010b74:	f024 0403 	bic.w	r4, r4, #3
 8010b78:	42a0      	cmp	r0, r4
 8010b7a:	d007      	beq.n	8010b8c <sbrk_aligned+0x38>
 8010b7c:	1a21      	subs	r1, r4, r0
 8010b7e:	4628      	mov	r0, r5
 8010b80:	f002 f830 	bl	8012be4 <_sbrk_r>
 8010b84:	3001      	adds	r0, #1
 8010b86:	d101      	bne.n	8010b8c <sbrk_aligned+0x38>
 8010b88:	f04f 34ff 	mov.w	r4, #4294967295
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	bd70      	pop	{r4, r5, r6, pc}
 8010b90:	20001490 	.word	0x20001490

08010b94 <_malloc_r>:
 8010b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b98:	1ccd      	adds	r5, r1, #3
 8010b9a:	f025 0503 	bic.w	r5, r5, #3
 8010b9e:	3508      	adds	r5, #8
 8010ba0:	2d0c      	cmp	r5, #12
 8010ba2:	bf38      	it	cc
 8010ba4:	250c      	movcc	r5, #12
 8010ba6:	2d00      	cmp	r5, #0
 8010ba8:	4607      	mov	r7, r0
 8010baa:	db01      	blt.n	8010bb0 <_malloc_r+0x1c>
 8010bac:	42a9      	cmp	r1, r5
 8010bae:	d905      	bls.n	8010bbc <_malloc_r+0x28>
 8010bb0:	230c      	movs	r3, #12
 8010bb2:	603b      	str	r3, [r7, #0]
 8010bb4:	2600      	movs	r6, #0
 8010bb6:	4630      	mov	r0, r6
 8010bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010c90 <_malloc_r+0xfc>
 8010bc0:	f000 f868 	bl	8010c94 <__malloc_lock>
 8010bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8010bc8:	461c      	mov	r4, r3
 8010bca:	bb5c      	cbnz	r4, 8010c24 <_malloc_r+0x90>
 8010bcc:	4629      	mov	r1, r5
 8010bce:	4638      	mov	r0, r7
 8010bd0:	f7ff ffc0 	bl	8010b54 <sbrk_aligned>
 8010bd4:	1c43      	adds	r3, r0, #1
 8010bd6:	4604      	mov	r4, r0
 8010bd8:	d155      	bne.n	8010c86 <_malloc_r+0xf2>
 8010bda:	f8d8 4000 	ldr.w	r4, [r8]
 8010bde:	4626      	mov	r6, r4
 8010be0:	2e00      	cmp	r6, #0
 8010be2:	d145      	bne.n	8010c70 <_malloc_r+0xdc>
 8010be4:	2c00      	cmp	r4, #0
 8010be6:	d048      	beq.n	8010c7a <_malloc_r+0xe6>
 8010be8:	6823      	ldr	r3, [r4, #0]
 8010bea:	4631      	mov	r1, r6
 8010bec:	4638      	mov	r0, r7
 8010bee:	eb04 0903 	add.w	r9, r4, r3
 8010bf2:	f001 fff7 	bl	8012be4 <_sbrk_r>
 8010bf6:	4581      	cmp	r9, r0
 8010bf8:	d13f      	bne.n	8010c7a <_malloc_r+0xe6>
 8010bfa:	6821      	ldr	r1, [r4, #0]
 8010bfc:	1a6d      	subs	r5, r5, r1
 8010bfe:	4629      	mov	r1, r5
 8010c00:	4638      	mov	r0, r7
 8010c02:	f7ff ffa7 	bl	8010b54 <sbrk_aligned>
 8010c06:	3001      	adds	r0, #1
 8010c08:	d037      	beq.n	8010c7a <_malloc_r+0xe6>
 8010c0a:	6823      	ldr	r3, [r4, #0]
 8010c0c:	442b      	add	r3, r5
 8010c0e:	6023      	str	r3, [r4, #0]
 8010c10:	f8d8 3000 	ldr.w	r3, [r8]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d038      	beq.n	8010c8a <_malloc_r+0xf6>
 8010c18:	685a      	ldr	r2, [r3, #4]
 8010c1a:	42a2      	cmp	r2, r4
 8010c1c:	d12b      	bne.n	8010c76 <_malloc_r+0xe2>
 8010c1e:	2200      	movs	r2, #0
 8010c20:	605a      	str	r2, [r3, #4]
 8010c22:	e00f      	b.n	8010c44 <_malloc_r+0xb0>
 8010c24:	6822      	ldr	r2, [r4, #0]
 8010c26:	1b52      	subs	r2, r2, r5
 8010c28:	d41f      	bmi.n	8010c6a <_malloc_r+0xd6>
 8010c2a:	2a0b      	cmp	r2, #11
 8010c2c:	d917      	bls.n	8010c5e <_malloc_r+0xca>
 8010c2e:	1961      	adds	r1, r4, r5
 8010c30:	42a3      	cmp	r3, r4
 8010c32:	6025      	str	r5, [r4, #0]
 8010c34:	bf18      	it	ne
 8010c36:	6059      	strne	r1, [r3, #4]
 8010c38:	6863      	ldr	r3, [r4, #4]
 8010c3a:	bf08      	it	eq
 8010c3c:	f8c8 1000 	streq.w	r1, [r8]
 8010c40:	5162      	str	r2, [r4, r5]
 8010c42:	604b      	str	r3, [r1, #4]
 8010c44:	4638      	mov	r0, r7
 8010c46:	f104 060b 	add.w	r6, r4, #11
 8010c4a:	f000 f829 	bl	8010ca0 <__malloc_unlock>
 8010c4e:	f026 0607 	bic.w	r6, r6, #7
 8010c52:	1d23      	adds	r3, r4, #4
 8010c54:	1af2      	subs	r2, r6, r3
 8010c56:	d0ae      	beq.n	8010bb6 <_malloc_r+0x22>
 8010c58:	1b9b      	subs	r3, r3, r6
 8010c5a:	50a3      	str	r3, [r4, r2]
 8010c5c:	e7ab      	b.n	8010bb6 <_malloc_r+0x22>
 8010c5e:	42a3      	cmp	r3, r4
 8010c60:	6862      	ldr	r2, [r4, #4]
 8010c62:	d1dd      	bne.n	8010c20 <_malloc_r+0x8c>
 8010c64:	f8c8 2000 	str.w	r2, [r8]
 8010c68:	e7ec      	b.n	8010c44 <_malloc_r+0xb0>
 8010c6a:	4623      	mov	r3, r4
 8010c6c:	6864      	ldr	r4, [r4, #4]
 8010c6e:	e7ac      	b.n	8010bca <_malloc_r+0x36>
 8010c70:	4634      	mov	r4, r6
 8010c72:	6876      	ldr	r6, [r6, #4]
 8010c74:	e7b4      	b.n	8010be0 <_malloc_r+0x4c>
 8010c76:	4613      	mov	r3, r2
 8010c78:	e7cc      	b.n	8010c14 <_malloc_r+0x80>
 8010c7a:	230c      	movs	r3, #12
 8010c7c:	603b      	str	r3, [r7, #0]
 8010c7e:	4638      	mov	r0, r7
 8010c80:	f000 f80e 	bl	8010ca0 <__malloc_unlock>
 8010c84:	e797      	b.n	8010bb6 <_malloc_r+0x22>
 8010c86:	6025      	str	r5, [r4, #0]
 8010c88:	e7dc      	b.n	8010c44 <_malloc_r+0xb0>
 8010c8a:	605b      	str	r3, [r3, #4]
 8010c8c:	deff      	udf	#255	; 0xff
 8010c8e:	bf00      	nop
 8010c90:	2000148c 	.word	0x2000148c

08010c94 <__malloc_lock>:
 8010c94:	4801      	ldr	r0, [pc, #4]	; (8010c9c <__malloc_lock+0x8>)
 8010c96:	f001 bff2 	b.w	8012c7e <__retarget_lock_acquire_recursive>
 8010c9a:	bf00      	nop
 8010c9c:	200015d4 	.word	0x200015d4

08010ca0 <__malloc_unlock>:
 8010ca0:	4801      	ldr	r0, [pc, #4]	; (8010ca8 <__malloc_unlock+0x8>)
 8010ca2:	f001 bfed 	b.w	8012c80 <__retarget_lock_release_recursive>
 8010ca6:	bf00      	nop
 8010ca8:	200015d4 	.word	0x200015d4

08010cac <sulp>:
 8010cac:	b570      	push	{r4, r5, r6, lr}
 8010cae:	4604      	mov	r4, r0
 8010cb0:	460d      	mov	r5, r1
 8010cb2:	ec45 4b10 	vmov	d0, r4, r5
 8010cb6:	4616      	mov	r6, r2
 8010cb8:	f003 fdc2 	bl	8014840 <__ulp>
 8010cbc:	ec51 0b10 	vmov	r0, r1, d0
 8010cc0:	b17e      	cbz	r6, 8010ce2 <sulp+0x36>
 8010cc2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010cc6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	dd09      	ble.n	8010ce2 <sulp+0x36>
 8010cce:	051b      	lsls	r3, r3, #20
 8010cd0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010cd4:	2400      	movs	r4, #0
 8010cd6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010cda:	4622      	mov	r2, r4
 8010cdc:	462b      	mov	r3, r5
 8010cde:	f7ef fc8b 	bl	80005f8 <__aeabi_dmul>
 8010ce2:	bd70      	pop	{r4, r5, r6, pc}
 8010ce4:	0000      	movs	r0, r0
	...

08010ce8 <_strtod_l>:
 8010ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cec:	ed2d 8b02 	vpush	{d8}
 8010cf0:	b09b      	sub	sp, #108	; 0x6c
 8010cf2:	4604      	mov	r4, r0
 8010cf4:	9213      	str	r2, [sp, #76]	; 0x4c
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	9216      	str	r2, [sp, #88]	; 0x58
 8010cfa:	460d      	mov	r5, r1
 8010cfc:	f04f 0800 	mov.w	r8, #0
 8010d00:	f04f 0900 	mov.w	r9, #0
 8010d04:	460a      	mov	r2, r1
 8010d06:	9215      	str	r2, [sp, #84]	; 0x54
 8010d08:	7811      	ldrb	r1, [r2, #0]
 8010d0a:	292b      	cmp	r1, #43	; 0x2b
 8010d0c:	d04c      	beq.n	8010da8 <_strtod_l+0xc0>
 8010d0e:	d83a      	bhi.n	8010d86 <_strtod_l+0x9e>
 8010d10:	290d      	cmp	r1, #13
 8010d12:	d834      	bhi.n	8010d7e <_strtod_l+0x96>
 8010d14:	2908      	cmp	r1, #8
 8010d16:	d834      	bhi.n	8010d82 <_strtod_l+0x9a>
 8010d18:	2900      	cmp	r1, #0
 8010d1a:	d03d      	beq.n	8010d98 <_strtod_l+0xb0>
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	920a      	str	r2, [sp, #40]	; 0x28
 8010d20:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8010d22:	7832      	ldrb	r2, [r6, #0]
 8010d24:	2a30      	cmp	r2, #48	; 0x30
 8010d26:	f040 80b4 	bne.w	8010e92 <_strtod_l+0x1aa>
 8010d2a:	7872      	ldrb	r2, [r6, #1]
 8010d2c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8010d30:	2a58      	cmp	r2, #88	; 0x58
 8010d32:	d170      	bne.n	8010e16 <_strtod_l+0x12e>
 8010d34:	9302      	str	r3, [sp, #8]
 8010d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d38:	9301      	str	r3, [sp, #4]
 8010d3a:	ab16      	add	r3, sp, #88	; 0x58
 8010d3c:	9300      	str	r3, [sp, #0]
 8010d3e:	4a8e      	ldr	r2, [pc, #568]	; (8010f78 <_strtod_l+0x290>)
 8010d40:	ab17      	add	r3, sp, #92	; 0x5c
 8010d42:	a915      	add	r1, sp, #84	; 0x54
 8010d44:	4620      	mov	r0, r4
 8010d46:	f002 ff0d 	bl	8013b64 <__gethex>
 8010d4a:	f010 070f 	ands.w	r7, r0, #15
 8010d4e:	4605      	mov	r5, r0
 8010d50:	d005      	beq.n	8010d5e <_strtod_l+0x76>
 8010d52:	2f06      	cmp	r7, #6
 8010d54:	d12a      	bne.n	8010dac <_strtod_l+0xc4>
 8010d56:	3601      	adds	r6, #1
 8010d58:	2300      	movs	r3, #0
 8010d5a:	9615      	str	r6, [sp, #84]	; 0x54
 8010d5c:	930a      	str	r3, [sp, #40]	; 0x28
 8010d5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	f040 857f 	bne.w	8011864 <_strtod_l+0xb7c>
 8010d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d68:	b1db      	cbz	r3, 8010da2 <_strtod_l+0xba>
 8010d6a:	4642      	mov	r2, r8
 8010d6c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010d70:	ec43 2b10 	vmov	d0, r2, r3
 8010d74:	b01b      	add	sp, #108	; 0x6c
 8010d76:	ecbd 8b02 	vpop	{d8}
 8010d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d7e:	2920      	cmp	r1, #32
 8010d80:	d1cc      	bne.n	8010d1c <_strtod_l+0x34>
 8010d82:	3201      	adds	r2, #1
 8010d84:	e7bf      	b.n	8010d06 <_strtod_l+0x1e>
 8010d86:	292d      	cmp	r1, #45	; 0x2d
 8010d88:	d1c8      	bne.n	8010d1c <_strtod_l+0x34>
 8010d8a:	2101      	movs	r1, #1
 8010d8c:	910a      	str	r1, [sp, #40]	; 0x28
 8010d8e:	1c51      	adds	r1, r2, #1
 8010d90:	9115      	str	r1, [sp, #84]	; 0x54
 8010d92:	7852      	ldrb	r2, [r2, #1]
 8010d94:	2a00      	cmp	r2, #0
 8010d96:	d1c3      	bne.n	8010d20 <_strtod_l+0x38>
 8010d98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010d9a:	9515      	str	r5, [sp, #84]	; 0x54
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	f040 855f 	bne.w	8011860 <_strtod_l+0xb78>
 8010da2:	4642      	mov	r2, r8
 8010da4:	464b      	mov	r3, r9
 8010da6:	e7e3      	b.n	8010d70 <_strtod_l+0x88>
 8010da8:	2100      	movs	r1, #0
 8010daa:	e7ef      	b.n	8010d8c <_strtod_l+0xa4>
 8010dac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010dae:	b13a      	cbz	r2, 8010dc0 <_strtod_l+0xd8>
 8010db0:	2135      	movs	r1, #53	; 0x35
 8010db2:	a818      	add	r0, sp, #96	; 0x60
 8010db4:	f003 fe41 	bl	8014a3a <__copybits>
 8010db8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010dba:	4620      	mov	r0, r4
 8010dbc:	f003 fa14 	bl	80141e8 <_Bfree>
 8010dc0:	3f01      	subs	r7, #1
 8010dc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010dc4:	2f04      	cmp	r7, #4
 8010dc6:	d806      	bhi.n	8010dd6 <_strtod_l+0xee>
 8010dc8:	e8df f007 	tbb	[pc, r7]
 8010dcc:	201d0314 	.word	0x201d0314
 8010dd0:	14          	.byte	0x14
 8010dd1:	00          	.byte	0x00
 8010dd2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8010dd6:	05e9      	lsls	r1, r5, #23
 8010dd8:	bf48      	it	mi
 8010dda:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8010dde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010de2:	0d1b      	lsrs	r3, r3, #20
 8010de4:	051b      	lsls	r3, r3, #20
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d1b9      	bne.n	8010d5e <_strtod_l+0x76>
 8010dea:	f001 ff1d 	bl	8012c28 <__errno>
 8010dee:	2322      	movs	r3, #34	; 0x22
 8010df0:	6003      	str	r3, [r0, #0]
 8010df2:	e7b4      	b.n	8010d5e <_strtod_l+0x76>
 8010df4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8010df8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010dfc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010e00:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8010e04:	e7e7      	b.n	8010dd6 <_strtod_l+0xee>
 8010e06:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010f80 <_strtod_l+0x298>
 8010e0a:	e7e4      	b.n	8010dd6 <_strtod_l+0xee>
 8010e0c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010e10:	f04f 38ff 	mov.w	r8, #4294967295
 8010e14:	e7df      	b.n	8010dd6 <_strtod_l+0xee>
 8010e16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e18:	1c5a      	adds	r2, r3, #1
 8010e1a:	9215      	str	r2, [sp, #84]	; 0x54
 8010e1c:	785b      	ldrb	r3, [r3, #1]
 8010e1e:	2b30      	cmp	r3, #48	; 0x30
 8010e20:	d0f9      	beq.n	8010e16 <_strtod_l+0x12e>
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d09b      	beq.n	8010d5e <_strtod_l+0x76>
 8010e26:	2301      	movs	r3, #1
 8010e28:	f04f 0a00 	mov.w	sl, #0
 8010e2c:	9304      	str	r3, [sp, #16]
 8010e2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e30:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e32:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010e36:	46d3      	mov	fp, sl
 8010e38:	220a      	movs	r2, #10
 8010e3a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010e3c:	7806      	ldrb	r6, [r0, #0]
 8010e3e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010e42:	b2d9      	uxtb	r1, r3
 8010e44:	2909      	cmp	r1, #9
 8010e46:	d926      	bls.n	8010e96 <_strtod_l+0x1ae>
 8010e48:	494c      	ldr	r1, [pc, #304]	; (8010f7c <_strtod_l+0x294>)
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	f001 fe0d 	bl	8012a6a <strncmp>
 8010e50:	2800      	cmp	r0, #0
 8010e52:	d030      	beq.n	8010eb6 <_strtod_l+0x1ce>
 8010e54:	2000      	movs	r0, #0
 8010e56:	4632      	mov	r2, r6
 8010e58:	9005      	str	r0, [sp, #20]
 8010e5a:	465e      	mov	r6, fp
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2a65      	cmp	r2, #101	; 0x65
 8010e60:	d001      	beq.n	8010e66 <_strtod_l+0x17e>
 8010e62:	2a45      	cmp	r2, #69	; 0x45
 8010e64:	d113      	bne.n	8010e8e <_strtod_l+0x1a6>
 8010e66:	b91e      	cbnz	r6, 8010e70 <_strtod_l+0x188>
 8010e68:	9a04      	ldr	r2, [sp, #16]
 8010e6a:	4302      	orrs	r2, r0
 8010e6c:	d094      	beq.n	8010d98 <_strtod_l+0xb0>
 8010e6e:	2600      	movs	r6, #0
 8010e70:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8010e72:	1c6a      	adds	r2, r5, #1
 8010e74:	9215      	str	r2, [sp, #84]	; 0x54
 8010e76:	786a      	ldrb	r2, [r5, #1]
 8010e78:	2a2b      	cmp	r2, #43	; 0x2b
 8010e7a:	d074      	beq.n	8010f66 <_strtod_l+0x27e>
 8010e7c:	2a2d      	cmp	r2, #45	; 0x2d
 8010e7e:	d078      	beq.n	8010f72 <_strtod_l+0x28a>
 8010e80:	f04f 0c00 	mov.w	ip, #0
 8010e84:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010e88:	2909      	cmp	r1, #9
 8010e8a:	d97f      	bls.n	8010f8c <_strtod_l+0x2a4>
 8010e8c:	9515      	str	r5, [sp, #84]	; 0x54
 8010e8e:	2700      	movs	r7, #0
 8010e90:	e09e      	b.n	8010fd0 <_strtod_l+0x2e8>
 8010e92:	2300      	movs	r3, #0
 8010e94:	e7c8      	b.n	8010e28 <_strtod_l+0x140>
 8010e96:	f1bb 0f08 	cmp.w	fp, #8
 8010e9a:	bfd8      	it	le
 8010e9c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010e9e:	f100 0001 	add.w	r0, r0, #1
 8010ea2:	bfda      	itte	le
 8010ea4:	fb02 3301 	mlale	r3, r2, r1, r3
 8010ea8:	9309      	strle	r3, [sp, #36]	; 0x24
 8010eaa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010eae:	f10b 0b01 	add.w	fp, fp, #1
 8010eb2:	9015      	str	r0, [sp, #84]	; 0x54
 8010eb4:	e7c1      	b.n	8010e3a <_strtod_l+0x152>
 8010eb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010eb8:	1c5a      	adds	r2, r3, #1
 8010eba:	9215      	str	r2, [sp, #84]	; 0x54
 8010ebc:	785a      	ldrb	r2, [r3, #1]
 8010ebe:	f1bb 0f00 	cmp.w	fp, #0
 8010ec2:	d037      	beq.n	8010f34 <_strtod_l+0x24c>
 8010ec4:	9005      	str	r0, [sp, #20]
 8010ec6:	465e      	mov	r6, fp
 8010ec8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010ecc:	2b09      	cmp	r3, #9
 8010ece:	d912      	bls.n	8010ef6 <_strtod_l+0x20e>
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	e7c4      	b.n	8010e5e <_strtod_l+0x176>
 8010ed4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ed6:	1c5a      	adds	r2, r3, #1
 8010ed8:	9215      	str	r2, [sp, #84]	; 0x54
 8010eda:	785a      	ldrb	r2, [r3, #1]
 8010edc:	3001      	adds	r0, #1
 8010ede:	2a30      	cmp	r2, #48	; 0x30
 8010ee0:	d0f8      	beq.n	8010ed4 <_strtod_l+0x1ec>
 8010ee2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010ee6:	2b08      	cmp	r3, #8
 8010ee8:	f200 84c1 	bhi.w	801186e <_strtod_l+0xb86>
 8010eec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010eee:	9005      	str	r0, [sp, #20]
 8010ef0:	2000      	movs	r0, #0
 8010ef2:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ef4:	4606      	mov	r6, r0
 8010ef6:	3a30      	subs	r2, #48	; 0x30
 8010ef8:	f100 0301 	add.w	r3, r0, #1
 8010efc:	d014      	beq.n	8010f28 <_strtod_l+0x240>
 8010efe:	9905      	ldr	r1, [sp, #20]
 8010f00:	4419      	add	r1, r3
 8010f02:	9105      	str	r1, [sp, #20]
 8010f04:	4633      	mov	r3, r6
 8010f06:	eb00 0c06 	add.w	ip, r0, r6
 8010f0a:	210a      	movs	r1, #10
 8010f0c:	4563      	cmp	r3, ip
 8010f0e:	d113      	bne.n	8010f38 <_strtod_l+0x250>
 8010f10:	1833      	adds	r3, r6, r0
 8010f12:	2b08      	cmp	r3, #8
 8010f14:	f106 0601 	add.w	r6, r6, #1
 8010f18:	4406      	add	r6, r0
 8010f1a:	dc1a      	bgt.n	8010f52 <_strtod_l+0x26a>
 8010f1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f1e:	230a      	movs	r3, #10
 8010f20:	fb03 2301 	mla	r3, r3, r1, r2
 8010f24:	9309      	str	r3, [sp, #36]	; 0x24
 8010f26:	2300      	movs	r3, #0
 8010f28:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010f2a:	1c51      	adds	r1, r2, #1
 8010f2c:	9115      	str	r1, [sp, #84]	; 0x54
 8010f2e:	7852      	ldrb	r2, [r2, #1]
 8010f30:	4618      	mov	r0, r3
 8010f32:	e7c9      	b.n	8010ec8 <_strtod_l+0x1e0>
 8010f34:	4658      	mov	r0, fp
 8010f36:	e7d2      	b.n	8010ede <_strtod_l+0x1f6>
 8010f38:	2b08      	cmp	r3, #8
 8010f3a:	f103 0301 	add.w	r3, r3, #1
 8010f3e:	dc03      	bgt.n	8010f48 <_strtod_l+0x260>
 8010f40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010f42:	434f      	muls	r7, r1
 8010f44:	9709      	str	r7, [sp, #36]	; 0x24
 8010f46:	e7e1      	b.n	8010f0c <_strtod_l+0x224>
 8010f48:	2b10      	cmp	r3, #16
 8010f4a:	bfd8      	it	le
 8010f4c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8010f50:	e7dc      	b.n	8010f0c <_strtod_l+0x224>
 8010f52:	2e10      	cmp	r6, #16
 8010f54:	bfdc      	itt	le
 8010f56:	230a      	movle	r3, #10
 8010f58:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8010f5c:	e7e3      	b.n	8010f26 <_strtod_l+0x23e>
 8010f5e:	2300      	movs	r3, #0
 8010f60:	9305      	str	r3, [sp, #20]
 8010f62:	2301      	movs	r3, #1
 8010f64:	e780      	b.n	8010e68 <_strtod_l+0x180>
 8010f66:	f04f 0c00 	mov.w	ip, #0
 8010f6a:	1caa      	adds	r2, r5, #2
 8010f6c:	9215      	str	r2, [sp, #84]	; 0x54
 8010f6e:	78aa      	ldrb	r2, [r5, #2]
 8010f70:	e788      	b.n	8010e84 <_strtod_l+0x19c>
 8010f72:	f04f 0c01 	mov.w	ip, #1
 8010f76:	e7f8      	b.n	8010f6a <_strtod_l+0x282>
 8010f78:	08018718 	.word	0x08018718
 8010f7c:	08018714 	.word	0x08018714
 8010f80:	7ff00000 	.word	0x7ff00000
 8010f84:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010f86:	1c51      	adds	r1, r2, #1
 8010f88:	9115      	str	r1, [sp, #84]	; 0x54
 8010f8a:	7852      	ldrb	r2, [r2, #1]
 8010f8c:	2a30      	cmp	r2, #48	; 0x30
 8010f8e:	d0f9      	beq.n	8010f84 <_strtod_l+0x29c>
 8010f90:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010f94:	2908      	cmp	r1, #8
 8010f96:	f63f af7a 	bhi.w	8010e8e <_strtod_l+0x1a6>
 8010f9a:	3a30      	subs	r2, #48	; 0x30
 8010f9c:	9208      	str	r2, [sp, #32]
 8010f9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010fa0:	920c      	str	r2, [sp, #48]	; 0x30
 8010fa2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010fa4:	1c57      	adds	r7, r2, #1
 8010fa6:	9715      	str	r7, [sp, #84]	; 0x54
 8010fa8:	7852      	ldrb	r2, [r2, #1]
 8010faa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010fae:	f1be 0f09 	cmp.w	lr, #9
 8010fb2:	d938      	bls.n	8011026 <_strtod_l+0x33e>
 8010fb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010fb6:	1a7f      	subs	r7, r7, r1
 8010fb8:	2f08      	cmp	r7, #8
 8010fba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010fbe:	dc03      	bgt.n	8010fc8 <_strtod_l+0x2e0>
 8010fc0:	9908      	ldr	r1, [sp, #32]
 8010fc2:	428f      	cmp	r7, r1
 8010fc4:	bfa8      	it	ge
 8010fc6:	460f      	movge	r7, r1
 8010fc8:	f1bc 0f00 	cmp.w	ip, #0
 8010fcc:	d000      	beq.n	8010fd0 <_strtod_l+0x2e8>
 8010fce:	427f      	negs	r7, r7
 8010fd0:	2e00      	cmp	r6, #0
 8010fd2:	d14f      	bne.n	8011074 <_strtod_l+0x38c>
 8010fd4:	9904      	ldr	r1, [sp, #16]
 8010fd6:	4301      	orrs	r1, r0
 8010fd8:	f47f aec1 	bne.w	8010d5e <_strtod_l+0x76>
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	f47f aedb 	bne.w	8010d98 <_strtod_l+0xb0>
 8010fe2:	2a69      	cmp	r2, #105	; 0x69
 8010fe4:	d029      	beq.n	801103a <_strtod_l+0x352>
 8010fe6:	dc26      	bgt.n	8011036 <_strtod_l+0x34e>
 8010fe8:	2a49      	cmp	r2, #73	; 0x49
 8010fea:	d026      	beq.n	801103a <_strtod_l+0x352>
 8010fec:	2a4e      	cmp	r2, #78	; 0x4e
 8010fee:	f47f aed3 	bne.w	8010d98 <_strtod_l+0xb0>
 8010ff2:	499b      	ldr	r1, [pc, #620]	; (8011260 <_strtod_l+0x578>)
 8010ff4:	a815      	add	r0, sp, #84	; 0x54
 8010ff6:	f002 fff5 	bl	8013fe4 <__match>
 8010ffa:	2800      	cmp	r0, #0
 8010ffc:	f43f aecc 	beq.w	8010d98 <_strtod_l+0xb0>
 8011000:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	2b28      	cmp	r3, #40	; 0x28
 8011006:	d12f      	bne.n	8011068 <_strtod_l+0x380>
 8011008:	4996      	ldr	r1, [pc, #600]	; (8011264 <_strtod_l+0x57c>)
 801100a:	aa18      	add	r2, sp, #96	; 0x60
 801100c:	a815      	add	r0, sp, #84	; 0x54
 801100e:	f002 fffd 	bl	801400c <__hexnan>
 8011012:	2805      	cmp	r0, #5
 8011014:	d128      	bne.n	8011068 <_strtod_l+0x380>
 8011016:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011018:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801101c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011020:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8011024:	e69b      	b.n	8010d5e <_strtod_l+0x76>
 8011026:	9f08      	ldr	r7, [sp, #32]
 8011028:	210a      	movs	r1, #10
 801102a:	fb01 2107 	mla	r1, r1, r7, r2
 801102e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8011032:	9208      	str	r2, [sp, #32]
 8011034:	e7b5      	b.n	8010fa2 <_strtod_l+0x2ba>
 8011036:	2a6e      	cmp	r2, #110	; 0x6e
 8011038:	e7d9      	b.n	8010fee <_strtod_l+0x306>
 801103a:	498b      	ldr	r1, [pc, #556]	; (8011268 <_strtod_l+0x580>)
 801103c:	a815      	add	r0, sp, #84	; 0x54
 801103e:	f002 ffd1 	bl	8013fe4 <__match>
 8011042:	2800      	cmp	r0, #0
 8011044:	f43f aea8 	beq.w	8010d98 <_strtod_l+0xb0>
 8011048:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801104a:	4988      	ldr	r1, [pc, #544]	; (801126c <_strtod_l+0x584>)
 801104c:	3b01      	subs	r3, #1
 801104e:	a815      	add	r0, sp, #84	; 0x54
 8011050:	9315      	str	r3, [sp, #84]	; 0x54
 8011052:	f002 ffc7 	bl	8013fe4 <__match>
 8011056:	b910      	cbnz	r0, 801105e <_strtod_l+0x376>
 8011058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801105a:	3301      	adds	r3, #1
 801105c:	9315      	str	r3, [sp, #84]	; 0x54
 801105e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801127c <_strtod_l+0x594>
 8011062:	f04f 0800 	mov.w	r8, #0
 8011066:	e67a      	b.n	8010d5e <_strtod_l+0x76>
 8011068:	4881      	ldr	r0, [pc, #516]	; (8011270 <_strtod_l+0x588>)
 801106a:	f001 fe21 	bl	8012cb0 <nan>
 801106e:	ec59 8b10 	vmov	r8, r9, d0
 8011072:	e674      	b.n	8010d5e <_strtod_l+0x76>
 8011074:	9b05      	ldr	r3, [sp, #20]
 8011076:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011078:	1afb      	subs	r3, r7, r3
 801107a:	f1bb 0f00 	cmp.w	fp, #0
 801107e:	bf08      	it	eq
 8011080:	46b3      	moveq	fp, r6
 8011082:	2e10      	cmp	r6, #16
 8011084:	9308      	str	r3, [sp, #32]
 8011086:	4635      	mov	r5, r6
 8011088:	bfa8      	it	ge
 801108a:	2510      	movge	r5, #16
 801108c:	f7ef fa3a 	bl	8000504 <__aeabi_ui2d>
 8011090:	2e09      	cmp	r6, #9
 8011092:	4680      	mov	r8, r0
 8011094:	4689      	mov	r9, r1
 8011096:	dd13      	ble.n	80110c0 <_strtod_l+0x3d8>
 8011098:	4b76      	ldr	r3, [pc, #472]	; (8011274 <_strtod_l+0x58c>)
 801109a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801109e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80110a2:	f7ef faa9 	bl	80005f8 <__aeabi_dmul>
 80110a6:	4680      	mov	r8, r0
 80110a8:	4650      	mov	r0, sl
 80110aa:	4689      	mov	r9, r1
 80110ac:	f7ef fa2a 	bl	8000504 <__aeabi_ui2d>
 80110b0:	4602      	mov	r2, r0
 80110b2:	460b      	mov	r3, r1
 80110b4:	4640      	mov	r0, r8
 80110b6:	4649      	mov	r1, r9
 80110b8:	f7ef f8e8 	bl	800028c <__adddf3>
 80110bc:	4680      	mov	r8, r0
 80110be:	4689      	mov	r9, r1
 80110c0:	2e0f      	cmp	r6, #15
 80110c2:	dc38      	bgt.n	8011136 <_strtod_l+0x44e>
 80110c4:	9b08      	ldr	r3, [sp, #32]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	f43f ae49 	beq.w	8010d5e <_strtod_l+0x76>
 80110cc:	dd24      	ble.n	8011118 <_strtod_l+0x430>
 80110ce:	2b16      	cmp	r3, #22
 80110d0:	dc0b      	bgt.n	80110ea <_strtod_l+0x402>
 80110d2:	4968      	ldr	r1, [pc, #416]	; (8011274 <_strtod_l+0x58c>)
 80110d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80110d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110dc:	4642      	mov	r2, r8
 80110de:	464b      	mov	r3, r9
 80110e0:	f7ef fa8a 	bl	80005f8 <__aeabi_dmul>
 80110e4:	4680      	mov	r8, r0
 80110e6:	4689      	mov	r9, r1
 80110e8:	e639      	b.n	8010d5e <_strtod_l+0x76>
 80110ea:	9a08      	ldr	r2, [sp, #32]
 80110ec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80110f0:	4293      	cmp	r3, r2
 80110f2:	db20      	blt.n	8011136 <_strtod_l+0x44e>
 80110f4:	4c5f      	ldr	r4, [pc, #380]	; (8011274 <_strtod_l+0x58c>)
 80110f6:	f1c6 060f 	rsb	r6, r6, #15
 80110fa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80110fe:	4642      	mov	r2, r8
 8011100:	464b      	mov	r3, r9
 8011102:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011106:	f7ef fa77 	bl	80005f8 <__aeabi_dmul>
 801110a:	9b08      	ldr	r3, [sp, #32]
 801110c:	1b9e      	subs	r6, r3, r6
 801110e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8011112:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011116:	e7e3      	b.n	80110e0 <_strtod_l+0x3f8>
 8011118:	9b08      	ldr	r3, [sp, #32]
 801111a:	3316      	adds	r3, #22
 801111c:	db0b      	blt.n	8011136 <_strtod_l+0x44e>
 801111e:	9b05      	ldr	r3, [sp, #20]
 8011120:	1bdf      	subs	r7, r3, r7
 8011122:	4b54      	ldr	r3, [pc, #336]	; (8011274 <_strtod_l+0x58c>)
 8011124:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011128:	e9d7 2300 	ldrd	r2, r3, [r7]
 801112c:	4640      	mov	r0, r8
 801112e:	4649      	mov	r1, r9
 8011130:	f7ef fb8c 	bl	800084c <__aeabi_ddiv>
 8011134:	e7d6      	b.n	80110e4 <_strtod_l+0x3fc>
 8011136:	9b08      	ldr	r3, [sp, #32]
 8011138:	1b75      	subs	r5, r6, r5
 801113a:	441d      	add	r5, r3
 801113c:	2d00      	cmp	r5, #0
 801113e:	dd70      	ble.n	8011222 <_strtod_l+0x53a>
 8011140:	f015 030f 	ands.w	r3, r5, #15
 8011144:	d00a      	beq.n	801115c <_strtod_l+0x474>
 8011146:	494b      	ldr	r1, [pc, #300]	; (8011274 <_strtod_l+0x58c>)
 8011148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801114c:	4642      	mov	r2, r8
 801114e:	464b      	mov	r3, r9
 8011150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011154:	f7ef fa50 	bl	80005f8 <__aeabi_dmul>
 8011158:	4680      	mov	r8, r0
 801115a:	4689      	mov	r9, r1
 801115c:	f035 050f 	bics.w	r5, r5, #15
 8011160:	d04d      	beq.n	80111fe <_strtod_l+0x516>
 8011162:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8011166:	dd22      	ble.n	80111ae <_strtod_l+0x4c6>
 8011168:	2500      	movs	r5, #0
 801116a:	46ab      	mov	fp, r5
 801116c:	9509      	str	r5, [sp, #36]	; 0x24
 801116e:	9505      	str	r5, [sp, #20]
 8011170:	2322      	movs	r3, #34	; 0x22
 8011172:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801127c <_strtod_l+0x594>
 8011176:	6023      	str	r3, [r4, #0]
 8011178:	f04f 0800 	mov.w	r8, #0
 801117c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801117e:	2b00      	cmp	r3, #0
 8011180:	f43f aded 	beq.w	8010d5e <_strtod_l+0x76>
 8011184:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011186:	4620      	mov	r0, r4
 8011188:	f003 f82e 	bl	80141e8 <_Bfree>
 801118c:	9905      	ldr	r1, [sp, #20]
 801118e:	4620      	mov	r0, r4
 8011190:	f003 f82a 	bl	80141e8 <_Bfree>
 8011194:	4659      	mov	r1, fp
 8011196:	4620      	mov	r0, r4
 8011198:	f003 f826 	bl	80141e8 <_Bfree>
 801119c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801119e:	4620      	mov	r0, r4
 80111a0:	f003 f822 	bl	80141e8 <_Bfree>
 80111a4:	4629      	mov	r1, r5
 80111a6:	4620      	mov	r0, r4
 80111a8:	f003 f81e 	bl	80141e8 <_Bfree>
 80111ac:	e5d7      	b.n	8010d5e <_strtod_l+0x76>
 80111ae:	4b32      	ldr	r3, [pc, #200]	; (8011278 <_strtod_l+0x590>)
 80111b0:	9304      	str	r3, [sp, #16]
 80111b2:	2300      	movs	r3, #0
 80111b4:	112d      	asrs	r5, r5, #4
 80111b6:	4640      	mov	r0, r8
 80111b8:	4649      	mov	r1, r9
 80111ba:	469a      	mov	sl, r3
 80111bc:	2d01      	cmp	r5, #1
 80111be:	dc21      	bgt.n	8011204 <_strtod_l+0x51c>
 80111c0:	b10b      	cbz	r3, 80111c6 <_strtod_l+0x4de>
 80111c2:	4680      	mov	r8, r0
 80111c4:	4689      	mov	r9, r1
 80111c6:	492c      	ldr	r1, [pc, #176]	; (8011278 <_strtod_l+0x590>)
 80111c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80111cc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80111d0:	4642      	mov	r2, r8
 80111d2:	464b      	mov	r3, r9
 80111d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111d8:	f7ef fa0e 	bl	80005f8 <__aeabi_dmul>
 80111dc:	4b27      	ldr	r3, [pc, #156]	; (801127c <_strtod_l+0x594>)
 80111de:	460a      	mov	r2, r1
 80111e0:	400b      	ands	r3, r1
 80111e2:	4927      	ldr	r1, [pc, #156]	; (8011280 <_strtod_l+0x598>)
 80111e4:	428b      	cmp	r3, r1
 80111e6:	4680      	mov	r8, r0
 80111e8:	d8be      	bhi.n	8011168 <_strtod_l+0x480>
 80111ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80111ee:	428b      	cmp	r3, r1
 80111f0:	bf86      	itte	hi
 80111f2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8011284 <_strtod_l+0x59c>
 80111f6:	f04f 38ff 	movhi.w	r8, #4294967295
 80111fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80111fe:	2300      	movs	r3, #0
 8011200:	9304      	str	r3, [sp, #16]
 8011202:	e07b      	b.n	80112fc <_strtod_l+0x614>
 8011204:	07ea      	lsls	r2, r5, #31
 8011206:	d505      	bpl.n	8011214 <_strtod_l+0x52c>
 8011208:	9b04      	ldr	r3, [sp, #16]
 801120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801120e:	f7ef f9f3 	bl	80005f8 <__aeabi_dmul>
 8011212:	2301      	movs	r3, #1
 8011214:	9a04      	ldr	r2, [sp, #16]
 8011216:	3208      	adds	r2, #8
 8011218:	f10a 0a01 	add.w	sl, sl, #1
 801121c:	106d      	asrs	r5, r5, #1
 801121e:	9204      	str	r2, [sp, #16]
 8011220:	e7cc      	b.n	80111bc <_strtod_l+0x4d4>
 8011222:	d0ec      	beq.n	80111fe <_strtod_l+0x516>
 8011224:	426d      	negs	r5, r5
 8011226:	f015 020f 	ands.w	r2, r5, #15
 801122a:	d00a      	beq.n	8011242 <_strtod_l+0x55a>
 801122c:	4b11      	ldr	r3, [pc, #68]	; (8011274 <_strtod_l+0x58c>)
 801122e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011232:	4640      	mov	r0, r8
 8011234:	4649      	mov	r1, r9
 8011236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123a:	f7ef fb07 	bl	800084c <__aeabi_ddiv>
 801123e:	4680      	mov	r8, r0
 8011240:	4689      	mov	r9, r1
 8011242:	112d      	asrs	r5, r5, #4
 8011244:	d0db      	beq.n	80111fe <_strtod_l+0x516>
 8011246:	2d1f      	cmp	r5, #31
 8011248:	dd1e      	ble.n	8011288 <_strtod_l+0x5a0>
 801124a:	2500      	movs	r5, #0
 801124c:	46ab      	mov	fp, r5
 801124e:	9509      	str	r5, [sp, #36]	; 0x24
 8011250:	9505      	str	r5, [sp, #20]
 8011252:	2322      	movs	r3, #34	; 0x22
 8011254:	f04f 0800 	mov.w	r8, #0
 8011258:	f04f 0900 	mov.w	r9, #0
 801125c:	6023      	str	r3, [r4, #0]
 801125e:	e78d      	b.n	801117c <_strtod_l+0x494>
 8011260:	08018876 	.word	0x08018876
 8011264:	0801872c 	.word	0x0801872c
 8011268:	0801886e 	.word	0x0801886e
 801126c:	0801895a 	.word	0x0801895a
 8011270:	08018956 	.word	0x08018956
 8011274:	08018ab0 	.word	0x08018ab0
 8011278:	08018a88 	.word	0x08018a88
 801127c:	7ff00000 	.word	0x7ff00000
 8011280:	7ca00000 	.word	0x7ca00000
 8011284:	7fefffff 	.word	0x7fefffff
 8011288:	f015 0310 	ands.w	r3, r5, #16
 801128c:	bf18      	it	ne
 801128e:	236a      	movne	r3, #106	; 0x6a
 8011290:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8011634 <_strtod_l+0x94c>
 8011294:	9304      	str	r3, [sp, #16]
 8011296:	4640      	mov	r0, r8
 8011298:	4649      	mov	r1, r9
 801129a:	2300      	movs	r3, #0
 801129c:	07ea      	lsls	r2, r5, #31
 801129e:	d504      	bpl.n	80112aa <_strtod_l+0x5c2>
 80112a0:	e9da 2300 	ldrd	r2, r3, [sl]
 80112a4:	f7ef f9a8 	bl	80005f8 <__aeabi_dmul>
 80112a8:	2301      	movs	r3, #1
 80112aa:	106d      	asrs	r5, r5, #1
 80112ac:	f10a 0a08 	add.w	sl, sl, #8
 80112b0:	d1f4      	bne.n	801129c <_strtod_l+0x5b4>
 80112b2:	b10b      	cbz	r3, 80112b8 <_strtod_l+0x5d0>
 80112b4:	4680      	mov	r8, r0
 80112b6:	4689      	mov	r9, r1
 80112b8:	9b04      	ldr	r3, [sp, #16]
 80112ba:	b1bb      	cbz	r3, 80112ec <_strtod_l+0x604>
 80112bc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80112c0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	4649      	mov	r1, r9
 80112c8:	dd10      	ble.n	80112ec <_strtod_l+0x604>
 80112ca:	2b1f      	cmp	r3, #31
 80112cc:	f340 811e 	ble.w	801150c <_strtod_l+0x824>
 80112d0:	2b34      	cmp	r3, #52	; 0x34
 80112d2:	bfde      	ittt	le
 80112d4:	f04f 33ff 	movle.w	r3, #4294967295
 80112d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80112dc:	4093      	lslle	r3, r2
 80112de:	f04f 0800 	mov.w	r8, #0
 80112e2:	bfcc      	ite	gt
 80112e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80112e8:	ea03 0901 	andle.w	r9, r3, r1
 80112ec:	2200      	movs	r2, #0
 80112ee:	2300      	movs	r3, #0
 80112f0:	4640      	mov	r0, r8
 80112f2:	4649      	mov	r1, r9
 80112f4:	f7ef fbe8 	bl	8000ac8 <__aeabi_dcmpeq>
 80112f8:	2800      	cmp	r0, #0
 80112fa:	d1a6      	bne.n	801124a <_strtod_l+0x562>
 80112fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112fe:	9300      	str	r3, [sp, #0]
 8011300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011302:	4633      	mov	r3, r6
 8011304:	465a      	mov	r2, fp
 8011306:	4620      	mov	r0, r4
 8011308:	f002 ffd6 	bl	80142b8 <__s2b>
 801130c:	9009      	str	r0, [sp, #36]	; 0x24
 801130e:	2800      	cmp	r0, #0
 8011310:	f43f af2a 	beq.w	8011168 <_strtod_l+0x480>
 8011314:	9a08      	ldr	r2, [sp, #32]
 8011316:	9b05      	ldr	r3, [sp, #20]
 8011318:	2a00      	cmp	r2, #0
 801131a:	eba3 0307 	sub.w	r3, r3, r7
 801131e:	bfa8      	it	ge
 8011320:	2300      	movge	r3, #0
 8011322:	930c      	str	r3, [sp, #48]	; 0x30
 8011324:	2500      	movs	r5, #0
 8011326:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801132a:	9312      	str	r3, [sp, #72]	; 0x48
 801132c:	46ab      	mov	fp, r5
 801132e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011330:	4620      	mov	r0, r4
 8011332:	6859      	ldr	r1, [r3, #4]
 8011334:	f002 ff18 	bl	8014168 <_Balloc>
 8011338:	9005      	str	r0, [sp, #20]
 801133a:	2800      	cmp	r0, #0
 801133c:	f43f af18 	beq.w	8011170 <_strtod_l+0x488>
 8011340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011342:	691a      	ldr	r2, [r3, #16]
 8011344:	3202      	adds	r2, #2
 8011346:	f103 010c 	add.w	r1, r3, #12
 801134a:	0092      	lsls	r2, r2, #2
 801134c:	300c      	adds	r0, #12
 801134e:	f001 fca0 	bl	8012c92 <memcpy>
 8011352:	ec49 8b10 	vmov	d0, r8, r9
 8011356:	aa18      	add	r2, sp, #96	; 0x60
 8011358:	a917      	add	r1, sp, #92	; 0x5c
 801135a:	4620      	mov	r0, r4
 801135c:	f003 fae0 	bl	8014920 <__d2b>
 8011360:	ec49 8b18 	vmov	d8, r8, r9
 8011364:	9016      	str	r0, [sp, #88]	; 0x58
 8011366:	2800      	cmp	r0, #0
 8011368:	f43f af02 	beq.w	8011170 <_strtod_l+0x488>
 801136c:	2101      	movs	r1, #1
 801136e:	4620      	mov	r0, r4
 8011370:	f003 f83a 	bl	80143e8 <__i2b>
 8011374:	4683      	mov	fp, r0
 8011376:	2800      	cmp	r0, #0
 8011378:	f43f aefa 	beq.w	8011170 <_strtod_l+0x488>
 801137c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801137e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011380:	2e00      	cmp	r6, #0
 8011382:	bfab      	itete	ge
 8011384:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8011386:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8011388:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801138a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801138e:	bfac      	ite	ge
 8011390:	eb06 0a03 	addge.w	sl, r6, r3
 8011394:	1b9f      	sublt	r7, r3, r6
 8011396:	9b04      	ldr	r3, [sp, #16]
 8011398:	1af6      	subs	r6, r6, r3
 801139a:	4416      	add	r6, r2
 801139c:	4ba0      	ldr	r3, [pc, #640]	; (8011620 <_strtod_l+0x938>)
 801139e:	3e01      	subs	r6, #1
 80113a0:	429e      	cmp	r6, r3
 80113a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80113a6:	f280 80c4 	bge.w	8011532 <_strtod_l+0x84a>
 80113aa:	1b9b      	subs	r3, r3, r6
 80113ac:	2b1f      	cmp	r3, #31
 80113ae:	eba2 0203 	sub.w	r2, r2, r3
 80113b2:	f04f 0101 	mov.w	r1, #1
 80113b6:	f300 80b0 	bgt.w	801151a <_strtod_l+0x832>
 80113ba:	fa01 f303 	lsl.w	r3, r1, r3
 80113be:	930e      	str	r3, [sp, #56]	; 0x38
 80113c0:	2300      	movs	r3, #0
 80113c2:	930d      	str	r3, [sp, #52]	; 0x34
 80113c4:	eb0a 0602 	add.w	r6, sl, r2
 80113c8:	9b04      	ldr	r3, [sp, #16]
 80113ca:	45b2      	cmp	sl, r6
 80113cc:	4417      	add	r7, r2
 80113ce:	441f      	add	r7, r3
 80113d0:	4653      	mov	r3, sl
 80113d2:	bfa8      	it	ge
 80113d4:	4633      	movge	r3, r6
 80113d6:	42bb      	cmp	r3, r7
 80113d8:	bfa8      	it	ge
 80113da:	463b      	movge	r3, r7
 80113dc:	2b00      	cmp	r3, #0
 80113de:	bfc2      	ittt	gt
 80113e0:	1af6      	subgt	r6, r6, r3
 80113e2:	1aff      	subgt	r7, r7, r3
 80113e4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80113e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	dd17      	ble.n	801141e <_strtod_l+0x736>
 80113ee:	4659      	mov	r1, fp
 80113f0:	461a      	mov	r2, r3
 80113f2:	4620      	mov	r0, r4
 80113f4:	f003 f8b8 	bl	8014568 <__pow5mult>
 80113f8:	4683      	mov	fp, r0
 80113fa:	2800      	cmp	r0, #0
 80113fc:	f43f aeb8 	beq.w	8011170 <_strtod_l+0x488>
 8011400:	4601      	mov	r1, r0
 8011402:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011404:	4620      	mov	r0, r4
 8011406:	f003 f805 	bl	8014414 <__multiply>
 801140a:	900b      	str	r0, [sp, #44]	; 0x2c
 801140c:	2800      	cmp	r0, #0
 801140e:	f43f aeaf 	beq.w	8011170 <_strtod_l+0x488>
 8011412:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011414:	4620      	mov	r0, r4
 8011416:	f002 fee7 	bl	80141e8 <_Bfree>
 801141a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801141c:	9316      	str	r3, [sp, #88]	; 0x58
 801141e:	2e00      	cmp	r6, #0
 8011420:	f300 808c 	bgt.w	801153c <_strtod_l+0x854>
 8011424:	9b08      	ldr	r3, [sp, #32]
 8011426:	2b00      	cmp	r3, #0
 8011428:	dd08      	ble.n	801143c <_strtod_l+0x754>
 801142a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801142c:	9905      	ldr	r1, [sp, #20]
 801142e:	4620      	mov	r0, r4
 8011430:	f003 f89a 	bl	8014568 <__pow5mult>
 8011434:	9005      	str	r0, [sp, #20]
 8011436:	2800      	cmp	r0, #0
 8011438:	f43f ae9a 	beq.w	8011170 <_strtod_l+0x488>
 801143c:	2f00      	cmp	r7, #0
 801143e:	dd08      	ble.n	8011452 <_strtod_l+0x76a>
 8011440:	9905      	ldr	r1, [sp, #20]
 8011442:	463a      	mov	r2, r7
 8011444:	4620      	mov	r0, r4
 8011446:	f003 f8e9 	bl	801461c <__lshift>
 801144a:	9005      	str	r0, [sp, #20]
 801144c:	2800      	cmp	r0, #0
 801144e:	f43f ae8f 	beq.w	8011170 <_strtod_l+0x488>
 8011452:	f1ba 0f00 	cmp.w	sl, #0
 8011456:	dd08      	ble.n	801146a <_strtod_l+0x782>
 8011458:	4659      	mov	r1, fp
 801145a:	4652      	mov	r2, sl
 801145c:	4620      	mov	r0, r4
 801145e:	f003 f8dd 	bl	801461c <__lshift>
 8011462:	4683      	mov	fp, r0
 8011464:	2800      	cmp	r0, #0
 8011466:	f43f ae83 	beq.w	8011170 <_strtod_l+0x488>
 801146a:	9a05      	ldr	r2, [sp, #20]
 801146c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801146e:	4620      	mov	r0, r4
 8011470:	f003 f95c 	bl	801472c <__mdiff>
 8011474:	4605      	mov	r5, r0
 8011476:	2800      	cmp	r0, #0
 8011478:	f43f ae7a 	beq.w	8011170 <_strtod_l+0x488>
 801147c:	68c3      	ldr	r3, [r0, #12]
 801147e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011480:	2300      	movs	r3, #0
 8011482:	60c3      	str	r3, [r0, #12]
 8011484:	4659      	mov	r1, fp
 8011486:	f003 f935 	bl	80146f4 <__mcmp>
 801148a:	2800      	cmp	r0, #0
 801148c:	da60      	bge.n	8011550 <_strtod_l+0x868>
 801148e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011490:	ea53 0308 	orrs.w	r3, r3, r8
 8011494:	f040 8084 	bne.w	80115a0 <_strtod_l+0x8b8>
 8011498:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801149c:	2b00      	cmp	r3, #0
 801149e:	d17f      	bne.n	80115a0 <_strtod_l+0x8b8>
 80114a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80114a4:	0d1b      	lsrs	r3, r3, #20
 80114a6:	051b      	lsls	r3, r3, #20
 80114a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80114ac:	d978      	bls.n	80115a0 <_strtod_l+0x8b8>
 80114ae:	696b      	ldr	r3, [r5, #20]
 80114b0:	b913      	cbnz	r3, 80114b8 <_strtod_l+0x7d0>
 80114b2:	692b      	ldr	r3, [r5, #16]
 80114b4:	2b01      	cmp	r3, #1
 80114b6:	dd73      	ble.n	80115a0 <_strtod_l+0x8b8>
 80114b8:	4629      	mov	r1, r5
 80114ba:	2201      	movs	r2, #1
 80114bc:	4620      	mov	r0, r4
 80114be:	f003 f8ad 	bl	801461c <__lshift>
 80114c2:	4659      	mov	r1, fp
 80114c4:	4605      	mov	r5, r0
 80114c6:	f003 f915 	bl	80146f4 <__mcmp>
 80114ca:	2800      	cmp	r0, #0
 80114cc:	dd68      	ble.n	80115a0 <_strtod_l+0x8b8>
 80114ce:	9904      	ldr	r1, [sp, #16]
 80114d0:	4a54      	ldr	r2, [pc, #336]	; (8011624 <_strtod_l+0x93c>)
 80114d2:	464b      	mov	r3, r9
 80114d4:	2900      	cmp	r1, #0
 80114d6:	f000 8084 	beq.w	80115e2 <_strtod_l+0x8fa>
 80114da:	ea02 0109 	and.w	r1, r2, r9
 80114de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80114e2:	dc7e      	bgt.n	80115e2 <_strtod_l+0x8fa>
 80114e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80114e8:	f77f aeb3 	ble.w	8011252 <_strtod_l+0x56a>
 80114ec:	4b4e      	ldr	r3, [pc, #312]	; (8011628 <_strtod_l+0x940>)
 80114ee:	4640      	mov	r0, r8
 80114f0:	4649      	mov	r1, r9
 80114f2:	2200      	movs	r2, #0
 80114f4:	f7ef f880 	bl	80005f8 <__aeabi_dmul>
 80114f8:	4b4a      	ldr	r3, [pc, #296]	; (8011624 <_strtod_l+0x93c>)
 80114fa:	400b      	ands	r3, r1
 80114fc:	4680      	mov	r8, r0
 80114fe:	4689      	mov	r9, r1
 8011500:	2b00      	cmp	r3, #0
 8011502:	f47f ae3f 	bne.w	8011184 <_strtod_l+0x49c>
 8011506:	2322      	movs	r3, #34	; 0x22
 8011508:	6023      	str	r3, [r4, #0]
 801150a:	e63b      	b.n	8011184 <_strtod_l+0x49c>
 801150c:	f04f 32ff 	mov.w	r2, #4294967295
 8011510:	fa02 f303 	lsl.w	r3, r2, r3
 8011514:	ea03 0808 	and.w	r8, r3, r8
 8011518:	e6e8      	b.n	80112ec <_strtod_l+0x604>
 801151a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801151e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011522:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011526:	36e2      	adds	r6, #226	; 0xe2
 8011528:	fa01 f306 	lsl.w	r3, r1, r6
 801152c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8011530:	e748      	b.n	80113c4 <_strtod_l+0x6dc>
 8011532:	2100      	movs	r1, #0
 8011534:	2301      	movs	r3, #1
 8011536:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801153a:	e743      	b.n	80113c4 <_strtod_l+0x6dc>
 801153c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801153e:	4632      	mov	r2, r6
 8011540:	4620      	mov	r0, r4
 8011542:	f003 f86b 	bl	801461c <__lshift>
 8011546:	9016      	str	r0, [sp, #88]	; 0x58
 8011548:	2800      	cmp	r0, #0
 801154a:	f47f af6b 	bne.w	8011424 <_strtod_l+0x73c>
 801154e:	e60f      	b.n	8011170 <_strtod_l+0x488>
 8011550:	46ca      	mov	sl, r9
 8011552:	d171      	bne.n	8011638 <_strtod_l+0x950>
 8011554:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011556:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801155a:	b352      	cbz	r2, 80115b2 <_strtod_l+0x8ca>
 801155c:	4a33      	ldr	r2, [pc, #204]	; (801162c <_strtod_l+0x944>)
 801155e:	4293      	cmp	r3, r2
 8011560:	d12a      	bne.n	80115b8 <_strtod_l+0x8d0>
 8011562:	9b04      	ldr	r3, [sp, #16]
 8011564:	4641      	mov	r1, r8
 8011566:	b1fb      	cbz	r3, 80115a8 <_strtod_l+0x8c0>
 8011568:	4b2e      	ldr	r3, [pc, #184]	; (8011624 <_strtod_l+0x93c>)
 801156a:	ea09 0303 	and.w	r3, r9, r3
 801156e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011572:	f04f 32ff 	mov.w	r2, #4294967295
 8011576:	d81a      	bhi.n	80115ae <_strtod_l+0x8c6>
 8011578:	0d1b      	lsrs	r3, r3, #20
 801157a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801157e:	fa02 f303 	lsl.w	r3, r2, r3
 8011582:	4299      	cmp	r1, r3
 8011584:	d118      	bne.n	80115b8 <_strtod_l+0x8d0>
 8011586:	4b2a      	ldr	r3, [pc, #168]	; (8011630 <_strtod_l+0x948>)
 8011588:	459a      	cmp	sl, r3
 801158a:	d102      	bne.n	8011592 <_strtod_l+0x8aa>
 801158c:	3101      	adds	r1, #1
 801158e:	f43f adef 	beq.w	8011170 <_strtod_l+0x488>
 8011592:	4b24      	ldr	r3, [pc, #144]	; (8011624 <_strtod_l+0x93c>)
 8011594:	ea0a 0303 	and.w	r3, sl, r3
 8011598:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801159c:	f04f 0800 	mov.w	r8, #0
 80115a0:	9b04      	ldr	r3, [sp, #16]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d1a2      	bne.n	80114ec <_strtod_l+0x804>
 80115a6:	e5ed      	b.n	8011184 <_strtod_l+0x49c>
 80115a8:	f04f 33ff 	mov.w	r3, #4294967295
 80115ac:	e7e9      	b.n	8011582 <_strtod_l+0x89a>
 80115ae:	4613      	mov	r3, r2
 80115b0:	e7e7      	b.n	8011582 <_strtod_l+0x89a>
 80115b2:	ea53 0308 	orrs.w	r3, r3, r8
 80115b6:	d08a      	beq.n	80114ce <_strtod_l+0x7e6>
 80115b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115ba:	b1e3      	cbz	r3, 80115f6 <_strtod_l+0x90e>
 80115bc:	ea13 0f0a 	tst.w	r3, sl
 80115c0:	d0ee      	beq.n	80115a0 <_strtod_l+0x8b8>
 80115c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115c4:	9a04      	ldr	r2, [sp, #16]
 80115c6:	4640      	mov	r0, r8
 80115c8:	4649      	mov	r1, r9
 80115ca:	b1c3      	cbz	r3, 80115fe <_strtod_l+0x916>
 80115cc:	f7ff fb6e 	bl	8010cac <sulp>
 80115d0:	4602      	mov	r2, r0
 80115d2:	460b      	mov	r3, r1
 80115d4:	ec51 0b18 	vmov	r0, r1, d8
 80115d8:	f7ee fe58 	bl	800028c <__adddf3>
 80115dc:	4680      	mov	r8, r0
 80115de:	4689      	mov	r9, r1
 80115e0:	e7de      	b.n	80115a0 <_strtod_l+0x8b8>
 80115e2:	4013      	ands	r3, r2
 80115e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80115e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80115ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80115f0:	f04f 38ff 	mov.w	r8, #4294967295
 80115f4:	e7d4      	b.n	80115a0 <_strtod_l+0x8b8>
 80115f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115f8:	ea13 0f08 	tst.w	r3, r8
 80115fc:	e7e0      	b.n	80115c0 <_strtod_l+0x8d8>
 80115fe:	f7ff fb55 	bl	8010cac <sulp>
 8011602:	4602      	mov	r2, r0
 8011604:	460b      	mov	r3, r1
 8011606:	ec51 0b18 	vmov	r0, r1, d8
 801160a:	f7ee fe3d 	bl	8000288 <__aeabi_dsub>
 801160e:	2200      	movs	r2, #0
 8011610:	2300      	movs	r3, #0
 8011612:	4680      	mov	r8, r0
 8011614:	4689      	mov	r9, r1
 8011616:	f7ef fa57 	bl	8000ac8 <__aeabi_dcmpeq>
 801161a:	2800      	cmp	r0, #0
 801161c:	d0c0      	beq.n	80115a0 <_strtod_l+0x8b8>
 801161e:	e618      	b.n	8011252 <_strtod_l+0x56a>
 8011620:	fffffc02 	.word	0xfffffc02
 8011624:	7ff00000 	.word	0x7ff00000
 8011628:	39500000 	.word	0x39500000
 801162c:	000fffff 	.word	0x000fffff
 8011630:	7fefffff 	.word	0x7fefffff
 8011634:	08018740 	.word	0x08018740
 8011638:	4659      	mov	r1, fp
 801163a:	4628      	mov	r0, r5
 801163c:	f003 f9ca 	bl	80149d4 <__ratio>
 8011640:	ec57 6b10 	vmov	r6, r7, d0
 8011644:	ee10 0a10 	vmov	r0, s0
 8011648:	2200      	movs	r2, #0
 801164a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801164e:	4639      	mov	r1, r7
 8011650:	f7ef fa4e 	bl	8000af0 <__aeabi_dcmple>
 8011654:	2800      	cmp	r0, #0
 8011656:	d071      	beq.n	801173c <_strtod_l+0xa54>
 8011658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801165a:	2b00      	cmp	r3, #0
 801165c:	d17c      	bne.n	8011758 <_strtod_l+0xa70>
 801165e:	f1b8 0f00 	cmp.w	r8, #0
 8011662:	d15a      	bne.n	801171a <_strtod_l+0xa32>
 8011664:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011668:	2b00      	cmp	r3, #0
 801166a:	d15d      	bne.n	8011728 <_strtod_l+0xa40>
 801166c:	4b90      	ldr	r3, [pc, #576]	; (80118b0 <_strtod_l+0xbc8>)
 801166e:	2200      	movs	r2, #0
 8011670:	4630      	mov	r0, r6
 8011672:	4639      	mov	r1, r7
 8011674:	f7ef fa32 	bl	8000adc <__aeabi_dcmplt>
 8011678:	2800      	cmp	r0, #0
 801167a:	d15c      	bne.n	8011736 <_strtod_l+0xa4e>
 801167c:	4630      	mov	r0, r6
 801167e:	4639      	mov	r1, r7
 8011680:	4b8c      	ldr	r3, [pc, #560]	; (80118b4 <_strtod_l+0xbcc>)
 8011682:	2200      	movs	r2, #0
 8011684:	f7ee ffb8 	bl	80005f8 <__aeabi_dmul>
 8011688:	4606      	mov	r6, r0
 801168a:	460f      	mov	r7, r1
 801168c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8011690:	9606      	str	r6, [sp, #24]
 8011692:	9307      	str	r3, [sp, #28]
 8011694:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011698:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801169c:	4b86      	ldr	r3, [pc, #536]	; (80118b8 <_strtod_l+0xbd0>)
 801169e:	ea0a 0303 	and.w	r3, sl, r3
 80116a2:	930d      	str	r3, [sp, #52]	; 0x34
 80116a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80116a6:	4b85      	ldr	r3, [pc, #532]	; (80118bc <_strtod_l+0xbd4>)
 80116a8:	429a      	cmp	r2, r3
 80116aa:	f040 8090 	bne.w	80117ce <_strtod_l+0xae6>
 80116ae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80116b2:	ec49 8b10 	vmov	d0, r8, r9
 80116b6:	f003 f8c3 	bl	8014840 <__ulp>
 80116ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80116be:	ec51 0b10 	vmov	r0, r1, d0
 80116c2:	f7ee ff99 	bl	80005f8 <__aeabi_dmul>
 80116c6:	4642      	mov	r2, r8
 80116c8:	464b      	mov	r3, r9
 80116ca:	f7ee fddf 	bl	800028c <__adddf3>
 80116ce:	460b      	mov	r3, r1
 80116d0:	4979      	ldr	r1, [pc, #484]	; (80118b8 <_strtod_l+0xbd0>)
 80116d2:	4a7b      	ldr	r2, [pc, #492]	; (80118c0 <_strtod_l+0xbd8>)
 80116d4:	4019      	ands	r1, r3
 80116d6:	4291      	cmp	r1, r2
 80116d8:	4680      	mov	r8, r0
 80116da:	d944      	bls.n	8011766 <_strtod_l+0xa7e>
 80116dc:	ee18 2a90 	vmov	r2, s17
 80116e0:	4b78      	ldr	r3, [pc, #480]	; (80118c4 <_strtod_l+0xbdc>)
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d104      	bne.n	80116f0 <_strtod_l+0xa08>
 80116e6:	ee18 3a10 	vmov	r3, s16
 80116ea:	3301      	adds	r3, #1
 80116ec:	f43f ad40 	beq.w	8011170 <_strtod_l+0x488>
 80116f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80118c4 <_strtod_l+0xbdc>
 80116f4:	f04f 38ff 	mov.w	r8, #4294967295
 80116f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80116fa:	4620      	mov	r0, r4
 80116fc:	f002 fd74 	bl	80141e8 <_Bfree>
 8011700:	9905      	ldr	r1, [sp, #20]
 8011702:	4620      	mov	r0, r4
 8011704:	f002 fd70 	bl	80141e8 <_Bfree>
 8011708:	4659      	mov	r1, fp
 801170a:	4620      	mov	r0, r4
 801170c:	f002 fd6c 	bl	80141e8 <_Bfree>
 8011710:	4629      	mov	r1, r5
 8011712:	4620      	mov	r0, r4
 8011714:	f002 fd68 	bl	80141e8 <_Bfree>
 8011718:	e609      	b.n	801132e <_strtod_l+0x646>
 801171a:	f1b8 0f01 	cmp.w	r8, #1
 801171e:	d103      	bne.n	8011728 <_strtod_l+0xa40>
 8011720:	f1b9 0f00 	cmp.w	r9, #0
 8011724:	f43f ad95 	beq.w	8011252 <_strtod_l+0x56a>
 8011728:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8011880 <_strtod_l+0xb98>
 801172c:	4f60      	ldr	r7, [pc, #384]	; (80118b0 <_strtod_l+0xbc8>)
 801172e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011732:	2600      	movs	r6, #0
 8011734:	e7ae      	b.n	8011694 <_strtod_l+0x9ac>
 8011736:	4f5f      	ldr	r7, [pc, #380]	; (80118b4 <_strtod_l+0xbcc>)
 8011738:	2600      	movs	r6, #0
 801173a:	e7a7      	b.n	801168c <_strtod_l+0x9a4>
 801173c:	4b5d      	ldr	r3, [pc, #372]	; (80118b4 <_strtod_l+0xbcc>)
 801173e:	4630      	mov	r0, r6
 8011740:	4639      	mov	r1, r7
 8011742:	2200      	movs	r2, #0
 8011744:	f7ee ff58 	bl	80005f8 <__aeabi_dmul>
 8011748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801174a:	4606      	mov	r6, r0
 801174c:	460f      	mov	r7, r1
 801174e:	2b00      	cmp	r3, #0
 8011750:	d09c      	beq.n	801168c <_strtod_l+0x9a4>
 8011752:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011756:	e79d      	b.n	8011694 <_strtod_l+0x9ac>
 8011758:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8011888 <_strtod_l+0xba0>
 801175c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011760:	ec57 6b17 	vmov	r6, r7, d7
 8011764:	e796      	b.n	8011694 <_strtod_l+0x9ac>
 8011766:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801176a:	9b04      	ldr	r3, [sp, #16]
 801176c:	46ca      	mov	sl, r9
 801176e:	2b00      	cmp	r3, #0
 8011770:	d1c2      	bne.n	80116f8 <_strtod_l+0xa10>
 8011772:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011776:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011778:	0d1b      	lsrs	r3, r3, #20
 801177a:	051b      	lsls	r3, r3, #20
 801177c:	429a      	cmp	r2, r3
 801177e:	d1bb      	bne.n	80116f8 <_strtod_l+0xa10>
 8011780:	4630      	mov	r0, r6
 8011782:	4639      	mov	r1, r7
 8011784:	f7ef fa98 	bl	8000cb8 <__aeabi_d2lz>
 8011788:	f7ee ff08 	bl	800059c <__aeabi_l2d>
 801178c:	4602      	mov	r2, r0
 801178e:	460b      	mov	r3, r1
 8011790:	4630      	mov	r0, r6
 8011792:	4639      	mov	r1, r7
 8011794:	f7ee fd78 	bl	8000288 <__aeabi_dsub>
 8011798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801179a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801179e:	ea43 0308 	orr.w	r3, r3, r8
 80117a2:	4313      	orrs	r3, r2
 80117a4:	4606      	mov	r6, r0
 80117a6:	460f      	mov	r7, r1
 80117a8:	d054      	beq.n	8011854 <_strtod_l+0xb6c>
 80117aa:	a339      	add	r3, pc, #228	; (adr r3, 8011890 <_strtod_l+0xba8>)
 80117ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b0:	f7ef f994 	bl	8000adc <__aeabi_dcmplt>
 80117b4:	2800      	cmp	r0, #0
 80117b6:	f47f ace5 	bne.w	8011184 <_strtod_l+0x49c>
 80117ba:	a337      	add	r3, pc, #220	; (adr r3, 8011898 <_strtod_l+0xbb0>)
 80117bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c0:	4630      	mov	r0, r6
 80117c2:	4639      	mov	r1, r7
 80117c4:	f7ef f9a8 	bl	8000b18 <__aeabi_dcmpgt>
 80117c8:	2800      	cmp	r0, #0
 80117ca:	d095      	beq.n	80116f8 <_strtod_l+0xa10>
 80117cc:	e4da      	b.n	8011184 <_strtod_l+0x49c>
 80117ce:	9b04      	ldr	r3, [sp, #16]
 80117d0:	b333      	cbz	r3, 8011820 <_strtod_l+0xb38>
 80117d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80117d8:	d822      	bhi.n	8011820 <_strtod_l+0xb38>
 80117da:	a331      	add	r3, pc, #196	; (adr r3, 80118a0 <_strtod_l+0xbb8>)
 80117dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e0:	4630      	mov	r0, r6
 80117e2:	4639      	mov	r1, r7
 80117e4:	f7ef f984 	bl	8000af0 <__aeabi_dcmple>
 80117e8:	b1a0      	cbz	r0, 8011814 <_strtod_l+0xb2c>
 80117ea:	4639      	mov	r1, r7
 80117ec:	4630      	mov	r0, r6
 80117ee:	f7ef f9db 	bl	8000ba8 <__aeabi_d2uiz>
 80117f2:	2801      	cmp	r0, #1
 80117f4:	bf38      	it	cc
 80117f6:	2001      	movcc	r0, #1
 80117f8:	f7ee fe84 	bl	8000504 <__aeabi_ui2d>
 80117fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117fe:	4606      	mov	r6, r0
 8011800:	460f      	mov	r7, r1
 8011802:	bb23      	cbnz	r3, 801184e <_strtod_l+0xb66>
 8011804:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011808:	9010      	str	r0, [sp, #64]	; 0x40
 801180a:	9311      	str	r3, [sp, #68]	; 0x44
 801180c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011810:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8011814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011816:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011818:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801181c:	1a9b      	subs	r3, r3, r2
 801181e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011820:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011824:	eeb0 0a48 	vmov.f32	s0, s16
 8011828:	eef0 0a68 	vmov.f32	s1, s17
 801182c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011830:	f003 f806 	bl	8014840 <__ulp>
 8011834:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011838:	ec53 2b10 	vmov	r2, r3, d0
 801183c:	f7ee fedc 	bl	80005f8 <__aeabi_dmul>
 8011840:	ec53 2b18 	vmov	r2, r3, d8
 8011844:	f7ee fd22 	bl	800028c <__adddf3>
 8011848:	4680      	mov	r8, r0
 801184a:	4689      	mov	r9, r1
 801184c:	e78d      	b.n	801176a <_strtod_l+0xa82>
 801184e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8011852:	e7db      	b.n	801180c <_strtod_l+0xb24>
 8011854:	a314      	add	r3, pc, #80	; (adr r3, 80118a8 <_strtod_l+0xbc0>)
 8011856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801185a:	f7ef f93f 	bl	8000adc <__aeabi_dcmplt>
 801185e:	e7b3      	b.n	80117c8 <_strtod_l+0xae0>
 8011860:	2300      	movs	r3, #0
 8011862:	930a      	str	r3, [sp, #40]	; 0x28
 8011864:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011866:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011868:	6013      	str	r3, [r2, #0]
 801186a:	f7ff ba7c 	b.w	8010d66 <_strtod_l+0x7e>
 801186e:	2a65      	cmp	r2, #101	; 0x65
 8011870:	f43f ab75 	beq.w	8010f5e <_strtod_l+0x276>
 8011874:	2a45      	cmp	r2, #69	; 0x45
 8011876:	f43f ab72 	beq.w	8010f5e <_strtod_l+0x276>
 801187a:	2301      	movs	r3, #1
 801187c:	f7ff bbaa 	b.w	8010fd4 <_strtod_l+0x2ec>
 8011880:	00000000 	.word	0x00000000
 8011884:	bff00000 	.word	0xbff00000
 8011888:	00000000 	.word	0x00000000
 801188c:	3ff00000 	.word	0x3ff00000
 8011890:	94a03595 	.word	0x94a03595
 8011894:	3fdfffff 	.word	0x3fdfffff
 8011898:	35afe535 	.word	0x35afe535
 801189c:	3fe00000 	.word	0x3fe00000
 80118a0:	ffc00000 	.word	0xffc00000
 80118a4:	41dfffff 	.word	0x41dfffff
 80118a8:	94a03595 	.word	0x94a03595
 80118ac:	3fcfffff 	.word	0x3fcfffff
 80118b0:	3ff00000 	.word	0x3ff00000
 80118b4:	3fe00000 	.word	0x3fe00000
 80118b8:	7ff00000 	.word	0x7ff00000
 80118bc:	7fe00000 	.word	0x7fe00000
 80118c0:	7c9fffff 	.word	0x7c9fffff
 80118c4:	7fefffff 	.word	0x7fefffff

080118c8 <_strtod_r>:
 80118c8:	4b01      	ldr	r3, [pc, #4]	; (80118d0 <_strtod_r+0x8>)
 80118ca:	f7ff ba0d 	b.w	8010ce8 <_strtod_l>
 80118ce:	bf00      	nop
 80118d0:	20000158 	.word	0x20000158

080118d4 <strtof>:
 80118d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118d8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801199c <strtof+0xc8>
 80118dc:	4b2a      	ldr	r3, [pc, #168]	; (8011988 <strtof+0xb4>)
 80118de:	460a      	mov	r2, r1
 80118e0:	ed2d 8b02 	vpush	{d8}
 80118e4:	4601      	mov	r1, r0
 80118e6:	f8d8 0000 	ldr.w	r0, [r8]
 80118ea:	f7ff f9fd 	bl	8010ce8 <_strtod_l>
 80118ee:	ec55 4b10 	vmov	r4, r5, d0
 80118f2:	ee10 2a10 	vmov	r2, s0
 80118f6:	ee10 0a10 	vmov	r0, s0
 80118fa:	462b      	mov	r3, r5
 80118fc:	4629      	mov	r1, r5
 80118fe:	f7ef f915 	bl	8000b2c <__aeabi_dcmpun>
 8011902:	b190      	cbz	r0, 801192a <strtof+0x56>
 8011904:	2d00      	cmp	r5, #0
 8011906:	4821      	ldr	r0, [pc, #132]	; (801198c <strtof+0xb8>)
 8011908:	da09      	bge.n	801191e <strtof+0x4a>
 801190a:	f001 f9d9 	bl	8012cc0 <nanf>
 801190e:	eeb1 8a40 	vneg.f32	s16, s0
 8011912:	eeb0 0a48 	vmov.f32	s0, s16
 8011916:	ecbd 8b02 	vpop	{d8}
 801191a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801191e:	ecbd 8b02 	vpop	{d8}
 8011922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011926:	f001 b9cb 	b.w	8012cc0 <nanf>
 801192a:	4620      	mov	r0, r4
 801192c:	4629      	mov	r1, r5
 801192e:	f7ef f95b 	bl	8000be8 <__aeabi_d2f>
 8011932:	ee08 0a10 	vmov	s16, r0
 8011936:	eddf 7a16 	vldr	s15, [pc, #88]	; 8011990 <strtof+0xbc>
 801193a:	eeb0 7ac8 	vabs.f32	s14, s16
 801193e:	eeb4 7a67 	vcmp.f32	s14, s15
 8011942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011946:	dd11      	ble.n	801196c <strtof+0x98>
 8011948:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 801194c:	4b11      	ldr	r3, [pc, #68]	; (8011994 <strtof+0xc0>)
 801194e:	f04f 32ff 	mov.w	r2, #4294967295
 8011952:	4620      	mov	r0, r4
 8011954:	4639      	mov	r1, r7
 8011956:	f7ef f8e9 	bl	8000b2c <__aeabi_dcmpun>
 801195a:	b980      	cbnz	r0, 801197e <strtof+0xaa>
 801195c:	4b0d      	ldr	r3, [pc, #52]	; (8011994 <strtof+0xc0>)
 801195e:	f04f 32ff 	mov.w	r2, #4294967295
 8011962:	4620      	mov	r0, r4
 8011964:	4639      	mov	r1, r7
 8011966:	f7ef f8c3 	bl	8000af0 <__aeabi_dcmple>
 801196a:	b940      	cbnz	r0, 801197e <strtof+0xaa>
 801196c:	ee18 3a10 	vmov	r3, s16
 8011970:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8011974:	d1cd      	bne.n	8011912 <strtof+0x3e>
 8011976:	4b08      	ldr	r3, [pc, #32]	; (8011998 <strtof+0xc4>)
 8011978:	402b      	ands	r3, r5
 801197a:	2b00      	cmp	r3, #0
 801197c:	d0c9      	beq.n	8011912 <strtof+0x3e>
 801197e:	f8d8 3000 	ldr.w	r3, [r8]
 8011982:	2222      	movs	r2, #34	; 0x22
 8011984:	601a      	str	r2, [r3, #0]
 8011986:	e7c4      	b.n	8011912 <strtof+0x3e>
 8011988:	20000158 	.word	0x20000158
 801198c:	08018956 	.word	0x08018956
 8011990:	7f7fffff 	.word	0x7f7fffff
 8011994:	7fefffff 	.word	0x7fefffff
 8011998:	7ff00000 	.word	0x7ff00000
 801199c:	20000310 	.word	0x20000310

080119a0 <_strtol_l.constprop.0>:
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119a6:	d001      	beq.n	80119ac <_strtol_l.constprop.0+0xc>
 80119a8:	2b24      	cmp	r3, #36	; 0x24
 80119aa:	d906      	bls.n	80119ba <_strtol_l.constprop.0+0x1a>
 80119ac:	f001 f93c 	bl	8012c28 <__errno>
 80119b0:	2316      	movs	r3, #22
 80119b2:	6003      	str	r3, [r0, #0]
 80119b4:	2000      	movs	r0, #0
 80119b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011aa0 <_strtol_l.constprop.0+0x100>
 80119be:	460d      	mov	r5, r1
 80119c0:	462e      	mov	r6, r5
 80119c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80119c6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80119ca:	f017 0708 	ands.w	r7, r7, #8
 80119ce:	d1f7      	bne.n	80119c0 <_strtol_l.constprop.0+0x20>
 80119d0:	2c2d      	cmp	r4, #45	; 0x2d
 80119d2:	d132      	bne.n	8011a3a <_strtol_l.constprop.0+0x9a>
 80119d4:	782c      	ldrb	r4, [r5, #0]
 80119d6:	2701      	movs	r7, #1
 80119d8:	1cb5      	adds	r5, r6, #2
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d05b      	beq.n	8011a96 <_strtol_l.constprop.0+0xf6>
 80119de:	2b10      	cmp	r3, #16
 80119e0:	d109      	bne.n	80119f6 <_strtol_l.constprop.0+0x56>
 80119e2:	2c30      	cmp	r4, #48	; 0x30
 80119e4:	d107      	bne.n	80119f6 <_strtol_l.constprop.0+0x56>
 80119e6:	782c      	ldrb	r4, [r5, #0]
 80119e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80119ec:	2c58      	cmp	r4, #88	; 0x58
 80119ee:	d14d      	bne.n	8011a8c <_strtol_l.constprop.0+0xec>
 80119f0:	786c      	ldrb	r4, [r5, #1]
 80119f2:	2310      	movs	r3, #16
 80119f4:	3502      	adds	r5, #2
 80119f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80119fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80119fe:	f04f 0e00 	mov.w	lr, #0
 8011a02:	fbb8 f9f3 	udiv	r9, r8, r3
 8011a06:	4676      	mov	r6, lr
 8011a08:	fb03 8a19 	mls	sl, r3, r9, r8
 8011a0c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011a10:	f1bc 0f09 	cmp.w	ip, #9
 8011a14:	d816      	bhi.n	8011a44 <_strtol_l.constprop.0+0xa4>
 8011a16:	4664      	mov	r4, ip
 8011a18:	42a3      	cmp	r3, r4
 8011a1a:	dd24      	ble.n	8011a66 <_strtol_l.constprop.0+0xc6>
 8011a1c:	f1be 3fff 	cmp.w	lr, #4294967295
 8011a20:	d008      	beq.n	8011a34 <_strtol_l.constprop.0+0x94>
 8011a22:	45b1      	cmp	r9, r6
 8011a24:	d31c      	bcc.n	8011a60 <_strtol_l.constprop.0+0xc0>
 8011a26:	d101      	bne.n	8011a2c <_strtol_l.constprop.0+0x8c>
 8011a28:	45a2      	cmp	sl, r4
 8011a2a:	db19      	blt.n	8011a60 <_strtol_l.constprop.0+0xc0>
 8011a2c:	fb06 4603 	mla	r6, r6, r3, r4
 8011a30:	f04f 0e01 	mov.w	lr, #1
 8011a34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011a38:	e7e8      	b.n	8011a0c <_strtol_l.constprop.0+0x6c>
 8011a3a:	2c2b      	cmp	r4, #43	; 0x2b
 8011a3c:	bf04      	itt	eq
 8011a3e:	782c      	ldrbeq	r4, [r5, #0]
 8011a40:	1cb5      	addeq	r5, r6, #2
 8011a42:	e7ca      	b.n	80119da <_strtol_l.constprop.0+0x3a>
 8011a44:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011a48:	f1bc 0f19 	cmp.w	ip, #25
 8011a4c:	d801      	bhi.n	8011a52 <_strtol_l.constprop.0+0xb2>
 8011a4e:	3c37      	subs	r4, #55	; 0x37
 8011a50:	e7e2      	b.n	8011a18 <_strtol_l.constprop.0+0x78>
 8011a52:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011a56:	f1bc 0f19 	cmp.w	ip, #25
 8011a5a:	d804      	bhi.n	8011a66 <_strtol_l.constprop.0+0xc6>
 8011a5c:	3c57      	subs	r4, #87	; 0x57
 8011a5e:	e7db      	b.n	8011a18 <_strtol_l.constprop.0+0x78>
 8011a60:	f04f 3eff 	mov.w	lr, #4294967295
 8011a64:	e7e6      	b.n	8011a34 <_strtol_l.constprop.0+0x94>
 8011a66:	f1be 3fff 	cmp.w	lr, #4294967295
 8011a6a:	d105      	bne.n	8011a78 <_strtol_l.constprop.0+0xd8>
 8011a6c:	2322      	movs	r3, #34	; 0x22
 8011a6e:	6003      	str	r3, [r0, #0]
 8011a70:	4646      	mov	r6, r8
 8011a72:	b942      	cbnz	r2, 8011a86 <_strtol_l.constprop.0+0xe6>
 8011a74:	4630      	mov	r0, r6
 8011a76:	e79e      	b.n	80119b6 <_strtol_l.constprop.0+0x16>
 8011a78:	b107      	cbz	r7, 8011a7c <_strtol_l.constprop.0+0xdc>
 8011a7a:	4276      	negs	r6, r6
 8011a7c:	2a00      	cmp	r2, #0
 8011a7e:	d0f9      	beq.n	8011a74 <_strtol_l.constprop.0+0xd4>
 8011a80:	f1be 0f00 	cmp.w	lr, #0
 8011a84:	d000      	beq.n	8011a88 <_strtol_l.constprop.0+0xe8>
 8011a86:	1e69      	subs	r1, r5, #1
 8011a88:	6011      	str	r1, [r2, #0]
 8011a8a:	e7f3      	b.n	8011a74 <_strtol_l.constprop.0+0xd4>
 8011a8c:	2430      	movs	r4, #48	; 0x30
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d1b1      	bne.n	80119f6 <_strtol_l.constprop.0+0x56>
 8011a92:	2308      	movs	r3, #8
 8011a94:	e7af      	b.n	80119f6 <_strtol_l.constprop.0+0x56>
 8011a96:	2c30      	cmp	r4, #48	; 0x30
 8011a98:	d0a5      	beq.n	80119e6 <_strtol_l.constprop.0+0x46>
 8011a9a:	230a      	movs	r3, #10
 8011a9c:	e7ab      	b.n	80119f6 <_strtol_l.constprop.0+0x56>
 8011a9e:	bf00      	nop
 8011aa0:	08018769 	.word	0x08018769

08011aa4 <_strtol_r>:
 8011aa4:	f7ff bf7c 	b.w	80119a0 <_strtol_l.constprop.0>

08011aa8 <strtol>:
 8011aa8:	4613      	mov	r3, r2
 8011aaa:	460a      	mov	r2, r1
 8011aac:	4601      	mov	r1, r0
 8011aae:	4802      	ldr	r0, [pc, #8]	; (8011ab8 <strtol+0x10>)
 8011ab0:	6800      	ldr	r0, [r0, #0]
 8011ab2:	f7ff bf75 	b.w	80119a0 <_strtol_l.constprop.0>
 8011ab6:	bf00      	nop
 8011ab8:	20000310 	.word	0x20000310

08011abc <__cvt>:
 8011abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ac0:	ec55 4b10 	vmov	r4, r5, d0
 8011ac4:	2d00      	cmp	r5, #0
 8011ac6:	460e      	mov	r6, r1
 8011ac8:	4619      	mov	r1, r3
 8011aca:	462b      	mov	r3, r5
 8011acc:	bfbb      	ittet	lt
 8011ace:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011ad2:	461d      	movlt	r5, r3
 8011ad4:	2300      	movge	r3, #0
 8011ad6:	232d      	movlt	r3, #45	; 0x2d
 8011ad8:	700b      	strb	r3, [r1, #0]
 8011ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011adc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011ae0:	4691      	mov	r9, r2
 8011ae2:	f023 0820 	bic.w	r8, r3, #32
 8011ae6:	bfbc      	itt	lt
 8011ae8:	4622      	movlt	r2, r4
 8011aea:	4614      	movlt	r4, r2
 8011aec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011af0:	d005      	beq.n	8011afe <__cvt+0x42>
 8011af2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011af6:	d100      	bne.n	8011afa <__cvt+0x3e>
 8011af8:	3601      	adds	r6, #1
 8011afa:	2102      	movs	r1, #2
 8011afc:	e000      	b.n	8011b00 <__cvt+0x44>
 8011afe:	2103      	movs	r1, #3
 8011b00:	ab03      	add	r3, sp, #12
 8011b02:	9301      	str	r3, [sp, #4]
 8011b04:	ab02      	add	r3, sp, #8
 8011b06:	9300      	str	r3, [sp, #0]
 8011b08:	ec45 4b10 	vmov	d0, r4, r5
 8011b0c:	4653      	mov	r3, sl
 8011b0e:	4632      	mov	r2, r6
 8011b10:	f001 f982 	bl	8012e18 <_dtoa_r>
 8011b14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011b18:	4607      	mov	r7, r0
 8011b1a:	d102      	bne.n	8011b22 <__cvt+0x66>
 8011b1c:	f019 0f01 	tst.w	r9, #1
 8011b20:	d022      	beq.n	8011b68 <__cvt+0xac>
 8011b22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011b26:	eb07 0906 	add.w	r9, r7, r6
 8011b2a:	d110      	bne.n	8011b4e <__cvt+0x92>
 8011b2c:	783b      	ldrb	r3, [r7, #0]
 8011b2e:	2b30      	cmp	r3, #48	; 0x30
 8011b30:	d10a      	bne.n	8011b48 <__cvt+0x8c>
 8011b32:	2200      	movs	r2, #0
 8011b34:	2300      	movs	r3, #0
 8011b36:	4620      	mov	r0, r4
 8011b38:	4629      	mov	r1, r5
 8011b3a:	f7ee ffc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b3e:	b918      	cbnz	r0, 8011b48 <__cvt+0x8c>
 8011b40:	f1c6 0601 	rsb	r6, r6, #1
 8011b44:	f8ca 6000 	str.w	r6, [sl]
 8011b48:	f8da 3000 	ldr.w	r3, [sl]
 8011b4c:	4499      	add	r9, r3
 8011b4e:	2200      	movs	r2, #0
 8011b50:	2300      	movs	r3, #0
 8011b52:	4620      	mov	r0, r4
 8011b54:	4629      	mov	r1, r5
 8011b56:	f7ee ffb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b5a:	b108      	cbz	r0, 8011b60 <__cvt+0xa4>
 8011b5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8011b60:	2230      	movs	r2, #48	; 0x30
 8011b62:	9b03      	ldr	r3, [sp, #12]
 8011b64:	454b      	cmp	r3, r9
 8011b66:	d307      	bcc.n	8011b78 <__cvt+0xbc>
 8011b68:	9b03      	ldr	r3, [sp, #12]
 8011b6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011b6c:	1bdb      	subs	r3, r3, r7
 8011b6e:	4638      	mov	r0, r7
 8011b70:	6013      	str	r3, [r2, #0]
 8011b72:	b004      	add	sp, #16
 8011b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b78:	1c59      	adds	r1, r3, #1
 8011b7a:	9103      	str	r1, [sp, #12]
 8011b7c:	701a      	strb	r2, [r3, #0]
 8011b7e:	e7f0      	b.n	8011b62 <__cvt+0xa6>

08011b80 <__exponent>:
 8011b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b82:	4603      	mov	r3, r0
 8011b84:	2900      	cmp	r1, #0
 8011b86:	bfb8      	it	lt
 8011b88:	4249      	neglt	r1, r1
 8011b8a:	f803 2b02 	strb.w	r2, [r3], #2
 8011b8e:	bfb4      	ite	lt
 8011b90:	222d      	movlt	r2, #45	; 0x2d
 8011b92:	222b      	movge	r2, #43	; 0x2b
 8011b94:	2909      	cmp	r1, #9
 8011b96:	7042      	strb	r2, [r0, #1]
 8011b98:	dd2a      	ble.n	8011bf0 <__exponent+0x70>
 8011b9a:	f10d 0207 	add.w	r2, sp, #7
 8011b9e:	4617      	mov	r7, r2
 8011ba0:	260a      	movs	r6, #10
 8011ba2:	4694      	mov	ip, r2
 8011ba4:	fb91 f5f6 	sdiv	r5, r1, r6
 8011ba8:	fb06 1415 	mls	r4, r6, r5, r1
 8011bac:	3430      	adds	r4, #48	; 0x30
 8011bae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011bb2:	460c      	mov	r4, r1
 8011bb4:	2c63      	cmp	r4, #99	; 0x63
 8011bb6:	f102 32ff 	add.w	r2, r2, #4294967295
 8011bba:	4629      	mov	r1, r5
 8011bbc:	dcf1      	bgt.n	8011ba2 <__exponent+0x22>
 8011bbe:	3130      	adds	r1, #48	; 0x30
 8011bc0:	f1ac 0402 	sub.w	r4, ip, #2
 8011bc4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011bc8:	1c41      	adds	r1, r0, #1
 8011bca:	4622      	mov	r2, r4
 8011bcc:	42ba      	cmp	r2, r7
 8011bce:	d30a      	bcc.n	8011be6 <__exponent+0x66>
 8011bd0:	f10d 0209 	add.w	r2, sp, #9
 8011bd4:	eba2 020c 	sub.w	r2, r2, ip
 8011bd8:	42bc      	cmp	r4, r7
 8011bda:	bf88      	it	hi
 8011bdc:	2200      	movhi	r2, #0
 8011bde:	4413      	add	r3, r2
 8011be0:	1a18      	subs	r0, r3, r0
 8011be2:	b003      	add	sp, #12
 8011be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011be6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011bea:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011bee:	e7ed      	b.n	8011bcc <__exponent+0x4c>
 8011bf0:	2330      	movs	r3, #48	; 0x30
 8011bf2:	3130      	adds	r1, #48	; 0x30
 8011bf4:	7083      	strb	r3, [r0, #2]
 8011bf6:	70c1      	strb	r1, [r0, #3]
 8011bf8:	1d03      	adds	r3, r0, #4
 8011bfa:	e7f1      	b.n	8011be0 <__exponent+0x60>

08011bfc <_printf_float>:
 8011bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c00:	ed2d 8b02 	vpush	{d8}
 8011c04:	b08d      	sub	sp, #52	; 0x34
 8011c06:	460c      	mov	r4, r1
 8011c08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011c0c:	4616      	mov	r6, r2
 8011c0e:	461f      	mov	r7, r3
 8011c10:	4605      	mov	r5, r0
 8011c12:	f000 ffaf 	bl	8012b74 <_localeconv_r>
 8011c16:	f8d0 a000 	ldr.w	sl, [r0]
 8011c1a:	4650      	mov	r0, sl
 8011c1c:	f7ee fb28 	bl	8000270 <strlen>
 8011c20:	2300      	movs	r3, #0
 8011c22:	930a      	str	r3, [sp, #40]	; 0x28
 8011c24:	6823      	ldr	r3, [r4, #0]
 8011c26:	9305      	str	r3, [sp, #20]
 8011c28:	f8d8 3000 	ldr.w	r3, [r8]
 8011c2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011c30:	3307      	adds	r3, #7
 8011c32:	f023 0307 	bic.w	r3, r3, #7
 8011c36:	f103 0208 	add.w	r2, r3, #8
 8011c3a:	f8c8 2000 	str.w	r2, [r8]
 8011c3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011c46:	9307      	str	r3, [sp, #28]
 8011c48:	f8cd 8018 	str.w	r8, [sp, #24]
 8011c4c:	ee08 0a10 	vmov	s16, r0
 8011c50:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011c54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c58:	4b9e      	ldr	r3, [pc, #632]	; (8011ed4 <_printf_float+0x2d8>)
 8011c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c5e:	f7ee ff65 	bl	8000b2c <__aeabi_dcmpun>
 8011c62:	bb88      	cbnz	r0, 8011cc8 <_printf_float+0xcc>
 8011c64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c68:	4b9a      	ldr	r3, [pc, #616]	; (8011ed4 <_printf_float+0x2d8>)
 8011c6a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c6e:	f7ee ff3f 	bl	8000af0 <__aeabi_dcmple>
 8011c72:	bb48      	cbnz	r0, 8011cc8 <_printf_float+0xcc>
 8011c74:	2200      	movs	r2, #0
 8011c76:	2300      	movs	r3, #0
 8011c78:	4640      	mov	r0, r8
 8011c7a:	4649      	mov	r1, r9
 8011c7c:	f7ee ff2e 	bl	8000adc <__aeabi_dcmplt>
 8011c80:	b110      	cbz	r0, 8011c88 <_printf_float+0x8c>
 8011c82:	232d      	movs	r3, #45	; 0x2d
 8011c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c88:	4a93      	ldr	r2, [pc, #588]	; (8011ed8 <_printf_float+0x2dc>)
 8011c8a:	4b94      	ldr	r3, [pc, #592]	; (8011edc <_printf_float+0x2e0>)
 8011c8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011c90:	bf94      	ite	ls
 8011c92:	4690      	movls	r8, r2
 8011c94:	4698      	movhi	r8, r3
 8011c96:	2303      	movs	r3, #3
 8011c98:	6123      	str	r3, [r4, #16]
 8011c9a:	9b05      	ldr	r3, [sp, #20]
 8011c9c:	f023 0304 	bic.w	r3, r3, #4
 8011ca0:	6023      	str	r3, [r4, #0]
 8011ca2:	f04f 0900 	mov.w	r9, #0
 8011ca6:	9700      	str	r7, [sp, #0]
 8011ca8:	4633      	mov	r3, r6
 8011caa:	aa0b      	add	r2, sp, #44	; 0x2c
 8011cac:	4621      	mov	r1, r4
 8011cae:	4628      	mov	r0, r5
 8011cb0:	f000 f9da 	bl	8012068 <_printf_common>
 8011cb4:	3001      	adds	r0, #1
 8011cb6:	f040 8090 	bne.w	8011dda <_printf_float+0x1de>
 8011cba:	f04f 30ff 	mov.w	r0, #4294967295
 8011cbe:	b00d      	add	sp, #52	; 0x34
 8011cc0:	ecbd 8b02 	vpop	{d8}
 8011cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cc8:	4642      	mov	r2, r8
 8011cca:	464b      	mov	r3, r9
 8011ccc:	4640      	mov	r0, r8
 8011cce:	4649      	mov	r1, r9
 8011cd0:	f7ee ff2c 	bl	8000b2c <__aeabi_dcmpun>
 8011cd4:	b140      	cbz	r0, 8011ce8 <_printf_float+0xec>
 8011cd6:	464b      	mov	r3, r9
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	bfbc      	itt	lt
 8011cdc:	232d      	movlt	r3, #45	; 0x2d
 8011cde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011ce2:	4a7f      	ldr	r2, [pc, #508]	; (8011ee0 <_printf_float+0x2e4>)
 8011ce4:	4b7f      	ldr	r3, [pc, #508]	; (8011ee4 <_printf_float+0x2e8>)
 8011ce6:	e7d1      	b.n	8011c8c <_printf_float+0x90>
 8011ce8:	6863      	ldr	r3, [r4, #4]
 8011cea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011cee:	9206      	str	r2, [sp, #24]
 8011cf0:	1c5a      	adds	r2, r3, #1
 8011cf2:	d13f      	bne.n	8011d74 <_printf_float+0x178>
 8011cf4:	2306      	movs	r3, #6
 8011cf6:	6063      	str	r3, [r4, #4]
 8011cf8:	9b05      	ldr	r3, [sp, #20]
 8011cfa:	6861      	ldr	r1, [r4, #4]
 8011cfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011d00:	2300      	movs	r3, #0
 8011d02:	9303      	str	r3, [sp, #12]
 8011d04:	ab0a      	add	r3, sp, #40	; 0x28
 8011d06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011d0a:	ab09      	add	r3, sp, #36	; 0x24
 8011d0c:	ec49 8b10 	vmov	d0, r8, r9
 8011d10:	9300      	str	r3, [sp, #0]
 8011d12:	6022      	str	r2, [r4, #0]
 8011d14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011d18:	4628      	mov	r0, r5
 8011d1a:	f7ff fecf 	bl	8011abc <__cvt>
 8011d1e:	9b06      	ldr	r3, [sp, #24]
 8011d20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011d22:	2b47      	cmp	r3, #71	; 0x47
 8011d24:	4680      	mov	r8, r0
 8011d26:	d108      	bne.n	8011d3a <_printf_float+0x13e>
 8011d28:	1cc8      	adds	r0, r1, #3
 8011d2a:	db02      	blt.n	8011d32 <_printf_float+0x136>
 8011d2c:	6863      	ldr	r3, [r4, #4]
 8011d2e:	4299      	cmp	r1, r3
 8011d30:	dd41      	ble.n	8011db6 <_printf_float+0x1ba>
 8011d32:	f1ab 0302 	sub.w	r3, fp, #2
 8011d36:	fa5f fb83 	uxtb.w	fp, r3
 8011d3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011d3e:	d820      	bhi.n	8011d82 <_printf_float+0x186>
 8011d40:	3901      	subs	r1, #1
 8011d42:	465a      	mov	r2, fp
 8011d44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011d48:	9109      	str	r1, [sp, #36]	; 0x24
 8011d4a:	f7ff ff19 	bl	8011b80 <__exponent>
 8011d4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d50:	1813      	adds	r3, r2, r0
 8011d52:	2a01      	cmp	r2, #1
 8011d54:	4681      	mov	r9, r0
 8011d56:	6123      	str	r3, [r4, #16]
 8011d58:	dc02      	bgt.n	8011d60 <_printf_float+0x164>
 8011d5a:	6822      	ldr	r2, [r4, #0]
 8011d5c:	07d2      	lsls	r2, r2, #31
 8011d5e:	d501      	bpl.n	8011d64 <_printf_float+0x168>
 8011d60:	3301      	adds	r3, #1
 8011d62:	6123      	str	r3, [r4, #16]
 8011d64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d09c      	beq.n	8011ca6 <_printf_float+0xaa>
 8011d6c:	232d      	movs	r3, #45	; 0x2d
 8011d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d72:	e798      	b.n	8011ca6 <_printf_float+0xaa>
 8011d74:	9a06      	ldr	r2, [sp, #24]
 8011d76:	2a47      	cmp	r2, #71	; 0x47
 8011d78:	d1be      	bne.n	8011cf8 <_printf_float+0xfc>
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d1bc      	bne.n	8011cf8 <_printf_float+0xfc>
 8011d7e:	2301      	movs	r3, #1
 8011d80:	e7b9      	b.n	8011cf6 <_printf_float+0xfa>
 8011d82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011d86:	d118      	bne.n	8011dba <_printf_float+0x1be>
 8011d88:	2900      	cmp	r1, #0
 8011d8a:	6863      	ldr	r3, [r4, #4]
 8011d8c:	dd0b      	ble.n	8011da6 <_printf_float+0x1aa>
 8011d8e:	6121      	str	r1, [r4, #16]
 8011d90:	b913      	cbnz	r3, 8011d98 <_printf_float+0x19c>
 8011d92:	6822      	ldr	r2, [r4, #0]
 8011d94:	07d0      	lsls	r0, r2, #31
 8011d96:	d502      	bpl.n	8011d9e <_printf_float+0x1a2>
 8011d98:	3301      	adds	r3, #1
 8011d9a:	440b      	add	r3, r1
 8011d9c:	6123      	str	r3, [r4, #16]
 8011d9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011da0:	f04f 0900 	mov.w	r9, #0
 8011da4:	e7de      	b.n	8011d64 <_printf_float+0x168>
 8011da6:	b913      	cbnz	r3, 8011dae <_printf_float+0x1b2>
 8011da8:	6822      	ldr	r2, [r4, #0]
 8011daa:	07d2      	lsls	r2, r2, #31
 8011dac:	d501      	bpl.n	8011db2 <_printf_float+0x1b6>
 8011dae:	3302      	adds	r3, #2
 8011db0:	e7f4      	b.n	8011d9c <_printf_float+0x1a0>
 8011db2:	2301      	movs	r3, #1
 8011db4:	e7f2      	b.n	8011d9c <_printf_float+0x1a0>
 8011db6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011dbc:	4299      	cmp	r1, r3
 8011dbe:	db05      	blt.n	8011dcc <_printf_float+0x1d0>
 8011dc0:	6823      	ldr	r3, [r4, #0]
 8011dc2:	6121      	str	r1, [r4, #16]
 8011dc4:	07d8      	lsls	r0, r3, #31
 8011dc6:	d5ea      	bpl.n	8011d9e <_printf_float+0x1a2>
 8011dc8:	1c4b      	adds	r3, r1, #1
 8011dca:	e7e7      	b.n	8011d9c <_printf_float+0x1a0>
 8011dcc:	2900      	cmp	r1, #0
 8011dce:	bfd4      	ite	le
 8011dd0:	f1c1 0202 	rsble	r2, r1, #2
 8011dd4:	2201      	movgt	r2, #1
 8011dd6:	4413      	add	r3, r2
 8011dd8:	e7e0      	b.n	8011d9c <_printf_float+0x1a0>
 8011dda:	6823      	ldr	r3, [r4, #0]
 8011ddc:	055a      	lsls	r2, r3, #21
 8011dde:	d407      	bmi.n	8011df0 <_printf_float+0x1f4>
 8011de0:	6923      	ldr	r3, [r4, #16]
 8011de2:	4642      	mov	r2, r8
 8011de4:	4631      	mov	r1, r6
 8011de6:	4628      	mov	r0, r5
 8011de8:	47b8      	blx	r7
 8011dea:	3001      	adds	r0, #1
 8011dec:	d12c      	bne.n	8011e48 <_printf_float+0x24c>
 8011dee:	e764      	b.n	8011cba <_printf_float+0xbe>
 8011df0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011df4:	f240 80e0 	bls.w	8011fb8 <_printf_float+0x3bc>
 8011df8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	2300      	movs	r3, #0
 8011e00:	f7ee fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e04:	2800      	cmp	r0, #0
 8011e06:	d034      	beq.n	8011e72 <_printf_float+0x276>
 8011e08:	4a37      	ldr	r2, [pc, #220]	; (8011ee8 <_printf_float+0x2ec>)
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	4631      	mov	r1, r6
 8011e0e:	4628      	mov	r0, r5
 8011e10:	47b8      	blx	r7
 8011e12:	3001      	adds	r0, #1
 8011e14:	f43f af51 	beq.w	8011cba <_printf_float+0xbe>
 8011e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	db02      	blt.n	8011e26 <_printf_float+0x22a>
 8011e20:	6823      	ldr	r3, [r4, #0]
 8011e22:	07d8      	lsls	r0, r3, #31
 8011e24:	d510      	bpl.n	8011e48 <_printf_float+0x24c>
 8011e26:	ee18 3a10 	vmov	r3, s16
 8011e2a:	4652      	mov	r2, sl
 8011e2c:	4631      	mov	r1, r6
 8011e2e:	4628      	mov	r0, r5
 8011e30:	47b8      	blx	r7
 8011e32:	3001      	adds	r0, #1
 8011e34:	f43f af41 	beq.w	8011cba <_printf_float+0xbe>
 8011e38:	f04f 0800 	mov.w	r8, #0
 8011e3c:	f104 091a 	add.w	r9, r4, #26
 8011e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e42:	3b01      	subs	r3, #1
 8011e44:	4543      	cmp	r3, r8
 8011e46:	dc09      	bgt.n	8011e5c <_printf_float+0x260>
 8011e48:	6823      	ldr	r3, [r4, #0]
 8011e4a:	079b      	lsls	r3, r3, #30
 8011e4c:	f100 8107 	bmi.w	801205e <_printf_float+0x462>
 8011e50:	68e0      	ldr	r0, [r4, #12]
 8011e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e54:	4298      	cmp	r0, r3
 8011e56:	bfb8      	it	lt
 8011e58:	4618      	movlt	r0, r3
 8011e5a:	e730      	b.n	8011cbe <_printf_float+0xc2>
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	464a      	mov	r2, r9
 8011e60:	4631      	mov	r1, r6
 8011e62:	4628      	mov	r0, r5
 8011e64:	47b8      	blx	r7
 8011e66:	3001      	adds	r0, #1
 8011e68:	f43f af27 	beq.w	8011cba <_printf_float+0xbe>
 8011e6c:	f108 0801 	add.w	r8, r8, #1
 8011e70:	e7e6      	b.n	8011e40 <_printf_float+0x244>
 8011e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	dc39      	bgt.n	8011eec <_printf_float+0x2f0>
 8011e78:	4a1b      	ldr	r2, [pc, #108]	; (8011ee8 <_printf_float+0x2ec>)
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	4631      	mov	r1, r6
 8011e7e:	4628      	mov	r0, r5
 8011e80:	47b8      	blx	r7
 8011e82:	3001      	adds	r0, #1
 8011e84:	f43f af19 	beq.w	8011cba <_printf_float+0xbe>
 8011e88:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011e8c:	4313      	orrs	r3, r2
 8011e8e:	d102      	bne.n	8011e96 <_printf_float+0x29a>
 8011e90:	6823      	ldr	r3, [r4, #0]
 8011e92:	07d9      	lsls	r1, r3, #31
 8011e94:	d5d8      	bpl.n	8011e48 <_printf_float+0x24c>
 8011e96:	ee18 3a10 	vmov	r3, s16
 8011e9a:	4652      	mov	r2, sl
 8011e9c:	4631      	mov	r1, r6
 8011e9e:	4628      	mov	r0, r5
 8011ea0:	47b8      	blx	r7
 8011ea2:	3001      	adds	r0, #1
 8011ea4:	f43f af09 	beq.w	8011cba <_printf_float+0xbe>
 8011ea8:	f04f 0900 	mov.w	r9, #0
 8011eac:	f104 0a1a 	add.w	sl, r4, #26
 8011eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eb2:	425b      	negs	r3, r3
 8011eb4:	454b      	cmp	r3, r9
 8011eb6:	dc01      	bgt.n	8011ebc <_printf_float+0x2c0>
 8011eb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011eba:	e792      	b.n	8011de2 <_printf_float+0x1e6>
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	4652      	mov	r2, sl
 8011ec0:	4631      	mov	r1, r6
 8011ec2:	4628      	mov	r0, r5
 8011ec4:	47b8      	blx	r7
 8011ec6:	3001      	adds	r0, #1
 8011ec8:	f43f aef7 	beq.w	8011cba <_printf_float+0xbe>
 8011ecc:	f109 0901 	add.w	r9, r9, #1
 8011ed0:	e7ee      	b.n	8011eb0 <_printf_float+0x2b4>
 8011ed2:	bf00      	nop
 8011ed4:	7fefffff 	.word	0x7fefffff
 8011ed8:	08018869 	.word	0x08018869
 8011edc:	0801886d 	.word	0x0801886d
 8011ee0:	08018871 	.word	0x08018871
 8011ee4:	08018875 	.word	0x08018875
 8011ee8:	08018879 	.word	0x08018879
 8011eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011eee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	bfa8      	it	ge
 8011ef4:	461a      	movge	r2, r3
 8011ef6:	2a00      	cmp	r2, #0
 8011ef8:	4691      	mov	r9, r2
 8011efa:	dc37      	bgt.n	8011f6c <_printf_float+0x370>
 8011efc:	f04f 0b00 	mov.w	fp, #0
 8011f00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f04:	f104 021a 	add.w	r2, r4, #26
 8011f08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011f0a:	9305      	str	r3, [sp, #20]
 8011f0c:	eba3 0309 	sub.w	r3, r3, r9
 8011f10:	455b      	cmp	r3, fp
 8011f12:	dc33      	bgt.n	8011f7c <_printf_float+0x380>
 8011f14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f18:	429a      	cmp	r2, r3
 8011f1a:	db3b      	blt.n	8011f94 <_printf_float+0x398>
 8011f1c:	6823      	ldr	r3, [r4, #0]
 8011f1e:	07da      	lsls	r2, r3, #31
 8011f20:	d438      	bmi.n	8011f94 <_printf_float+0x398>
 8011f22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011f26:	eba2 0903 	sub.w	r9, r2, r3
 8011f2a:	9b05      	ldr	r3, [sp, #20]
 8011f2c:	1ad2      	subs	r2, r2, r3
 8011f2e:	4591      	cmp	r9, r2
 8011f30:	bfa8      	it	ge
 8011f32:	4691      	movge	r9, r2
 8011f34:	f1b9 0f00 	cmp.w	r9, #0
 8011f38:	dc35      	bgt.n	8011fa6 <_printf_float+0x3aa>
 8011f3a:	f04f 0800 	mov.w	r8, #0
 8011f3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011f42:	f104 0a1a 	add.w	sl, r4, #26
 8011f46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011f4a:	1a9b      	subs	r3, r3, r2
 8011f4c:	eba3 0309 	sub.w	r3, r3, r9
 8011f50:	4543      	cmp	r3, r8
 8011f52:	f77f af79 	ble.w	8011e48 <_printf_float+0x24c>
 8011f56:	2301      	movs	r3, #1
 8011f58:	4652      	mov	r2, sl
 8011f5a:	4631      	mov	r1, r6
 8011f5c:	4628      	mov	r0, r5
 8011f5e:	47b8      	blx	r7
 8011f60:	3001      	adds	r0, #1
 8011f62:	f43f aeaa 	beq.w	8011cba <_printf_float+0xbe>
 8011f66:	f108 0801 	add.w	r8, r8, #1
 8011f6a:	e7ec      	b.n	8011f46 <_printf_float+0x34a>
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	4631      	mov	r1, r6
 8011f70:	4642      	mov	r2, r8
 8011f72:	4628      	mov	r0, r5
 8011f74:	47b8      	blx	r7
 8011f76:	3001      	adds	r0, #1
 8011f78:	d1c0      	bne.n	8011efc <_printf_float+0x300>
 8011f7a:	e69e      	b.n	8011cba <_printf_float+0xbe>
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	4631      	mov	r1, r6
 8011f80:	4628      	mov	r0, r5
 8011f82:	9205      	str	r2, [sp, #20]
 8011f84:	47b8      	blx	r7
 8011f86:	3001      	adds	r0, #1
 8011f88:	f43f ae97 	beq.w	8011cba <_printf_float+0xbe>
 8011f8c:	9a05      	ldr	r2, [sp, #20]
 8011f8e:	f10b 0b01 	add.w	fp, fp, #1
 8011f92:	e7b9      	b.n	8011f08 <_printf_float+0x30c>
 8011f94:	ee18 3a10 	vmov	r3, s16
 8011f98:	4652      	mov	r2, sl
 8011f9a:	4631      	mov	r1, r6
 8011f9c:	4628      	mov	r0, r5
 8011f9e:	47b8      	blx	r7
 8011fa0:	3001      	adds	r0, #1
 8011fa2:	d1be      	bne.n	8011f22 <_printf_float+0x326>
 8011fa4:	e689      	b.n	8011cba <_printf_float+0xbe>
 8011fa6:	9a05      	ldr	r2, [sp, #20]
 8011fa8:	464b      	mov	r3, r9
 8011faa:	4442      	add	r2, r8
 8011fac:	4631      	mov	r1, r6
 8011fae:	4628      	mov	r0, r5
 8011fb0:	47b8      	blx	r7
 8011fb2:	3001      	adds	r0, #1
 8011fb4:	d1c1      	bne.n	8011f3a <_printf_float+0x33e>
 8011fb6:	e680      	b.n	8011cba <_printf_float+0xbe>
 8011fb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011fba:	2a01      	cmp	r2, #1
 8011fbc:	dc01      	bgt.n	8011fc2 <_printf_float+0x3c6>
 8011fbe:	07db      	lsls	r3, r3, #31
 8011fc0:	d53a      	bpl.n	8012038 <_printf_float+0x43c>
 8011fc2:	2301      	movs	r3, #1
 8011fc4:	4642      	mov	r2, r8
 8011fc6:	4631      	mov	r1, r6
 8011fc8:	4628      	mov	r0, r5
 8011fca:	47b8      	blx	r7
 8011fcc:	3001      	adds	r0, #1
 8011fce:	f43f ae74 	beq.w	8011cba <_printf_float+0xbe>
 8011fd2:	ee18 3a10 	vmov	r3, s16
 8011fd6:	4652      	mov	r2, sl
 8011fd8:	4631      	mov	r1, r6
 8011fda:	4628      	mov	r0, r5
 8011fdc:	47b8      	blx	r7
 8011fde:	3001      	adds	r0, #1
 8011fe0:	f43f ae6b 	beq.w	8011cba <_printf_float+0xbe>
 8011fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011fe8:	2200      	movs	r2, #0
 8011fea:	2300      	movs	r3, #0
 8011fec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011ff0:	f7ee fd6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ff4:	b9d8      	cbnz	r0, 801202e <_printf_float+0x432>
 8011ff6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011ffa:	f108 0201 	add.w	r2, r8, #1
 8011ffe:	4631      	mov	r1, r6
 8012000:	4628      	mov	r0, r5
 8012002:	47b8      	blx	r7
 8012004:	3001      	adds	r0, #1
 8012006:	d10e      	bne.n	8012026 <_printf_float+0x42a>
 8012008:	e657      	b.n	8011cba <_printf_float+0xbe>
 801200a:	2301      	movs	r3, #1
 801200c:	4652      	mov	r2, sl
 801200e:	4631      	mov	r1, r6
 8012010:	4628      	mov	r0, r5
 8012012:	47b8      	blx	r7
 8012014:	3001      	adds	r0, #1
 8012016:	f43f ae50 	beq.w	8011cba <_printf_float+0xbe>
 801201a:	f108 0801 	add.w	r8, r8, #1
 801201e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012020:	3b01      	subs	r3, #1
 8012022:	4543      	cmp	r3, r8
 8012024:	dcf1      	bgt.n	801200a <_printf_float+0x40e>
 8012026:	464b      	mov	r3, r9
 8012028:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801202c:	e6da      	b.n	8011de4 <_printf_float+0x1e8>
 801202e:	f04f 0800 	mov.w	r8, #0
 8012032:	f104 0a1a 	add.w	sl, r4, #26
 8012036:	e7f2      	b.n	801201e <_printf_float+0x422>
 8012038:	2301      	movs	r3, #1
 801203a:	4642      	mov	r2, r8
 801203c:	e7df      	b.n	8011ffe <_printf_float+0x402>
 801203e:	2301      	movs	r3, #1
 8012040:	464a      	mov	r2, r9
 8012042:	4631      	mov	r1, r6
 8012044:	4628      	mov	r0, r5
 8012046:	47b8      	blx	r7
 8012048:	3001      	adds	r0, #1
 801204a:	f43f ae36 	beq.w	8011cba <_printf_float+0xbe>
 801204e:	f108 0801 	add.w	r8, r8, #1
 8012052:	68e3      	ldr	r3, [r4, #12]
 8012054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012056:	1a5b      	subs	r3, r3, r1
 8012058:	4543      	cmp	r3, r8
 801205a:	dcf0      	bgt.n	801203e <_printf_float+0x442>
 801205c:	e6f8      	b.n	8011e50 <_printf_float+0x254>
 801205e:	f04f 0800 	mov.w	r8, #0
 8012062:	f104 0919 	add.w	r9, r4, #25
 8012066:	e7f4      	b.n	8012052 <_printf_float+0x456>

08012068 <_printf_common>:
 8012068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801206c:	4616      	mov	r6, r2
 801206e:	4699      	mov	r9, r3
 8012070:	688a      	ldr	r2, [r1, #8]
 8012072:	690b      	ldr	r3, [r1, #16]
 8012074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012078:	4293      	cmp	r3, r2
 801207a:	bfb8      	it	lt
 801207c:	4613      	movlt	r3, r2
 801207e:	6033      	str	r3, [r6, #0]
 8012080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012084:	4607      	mov	r7, r0
 8012086:	460c      	mov	r4, r1
 8012088:	b10a      	cbz	r2, 801208e <_printf_common+0x26>
 801208a:	3301      	adds	r3, #1
 801208c:	6033      	str	r3, [r6, #0]
 801208e:	6823      	ldr	r3, [r4, #0]
 8012090:	0699      	lsls	r1, r3, #26
 8012092:	bf42      	ittt	mi
 8012094:	6833      	ldrmi	r3, [r6, #0]
 8012096:	3302      	addmi	r3, #2
 8012098:	6033      	strmi	r3, [r6, #0]
 801209a:	6825      	ldr	r5, [r4, #0]
 801209c:	f015 0506 	ands.w	r5, r5, #6
 80120a0:	d106      	bne.n	80120b0 <_printf_common+0x48>
 80120a2:	f104 0a19 	add.w	sl, r4, #25
 80120a6:	68e3      	ldr	r3, [r4, #12]
 80120a8:	6832      	ldr	r2, [r6, #0]
 80120aa:	1a9b      	subs	r3, r3, r2
 80120ac:	42ab      	cmp	r3, r5
 80120ae:	dc26      	bgt.n	80120fe <_printf_common+0x96>
 80120b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80120b4:	1e13      	subs	r3, r2, #0
 80120b6:	6822      	ldr	r2, [r4, #0]
 80120b8:	bf18      	it	ne
 80120ba:	2301      	movne	r3, #1
 80120bc:	0692      	lsls	r2, r2, #26
 80120be:	d42b      	bmi.n	8012118 <_printf_common+0xb0>
 80120c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80120c4:	4649      	mov	r1, r9
 80120c6:	4638      	mov	r0, r7
 80120c8:	47c0      	blx	r8
 80120ca:	3001      	adds	r0, #1
 80120cc:	d01e      	beq.n	801210c <_printf_common+0xa4>
 80120ce:	6823      	ldr	r3, [r4, #0]
 80120d0:	6922      	ldr	r2, [r4, #16]
 80120d2:	f003 0306 	and.w	r3, r3, #6
 80120d6:	2b04      	cmp	r3, #4
 80120d8:	bf02      	ittt	eq
 80120da:	68e5      	ldreq	r5, [r4, #12]
 80120dc:	6833      	ldreq	r3, [r6, #0]
 80120de:	1aed      	subeq	r5, r5, r3
 80120e0:	68a3      	ldr	r3, [r4, #8]
 80120e2:	bf0c      	ite	eq
 80120e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80120e8:	2500      	movne	r5, #0
 80120ea:	4293      	cmp	r3, r2
 80120ec:	bfc4      	itt	gt
 80120ee:	1a9b      	subgt	r3, r3, r2
 80120f0:	18ed      	addgt	r5, r5, r3
 80120f2:	2600      	movs	r6, #0
 80120f4:	341a      	adds	r4, #26
 80120f6:	42b5      	cmp	r5, r6
 80120f8:	d11a      	bne.n	8012130 <_printf_common+0xc8>
 80120fa:	2000      	movs	r0, #0
 80120fc:	e008      	b.n	8012110 <_printf_common+0xa8>
 80120fe:	2301      	movs	r3, #1
 8012100:	4652      	mov	r2, sl
 8012102:	4649      	mov	r1, r9
 8012104:	4638      	mov	r0, r7
 8012106:	47c0      	blx	r8
 8012108:	3001      	adds	r0, #1
 801210a:	d103      	bne.n	8012114 <_printf_common+0xac>
 801210c:	f04f 30ff 	mov.w	r0, #4294967295
 8012110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012114:	3501      	adds	r5, #1
 8012116:	e7c6      	b.n	80120a6 <_printf_common+0x3e>
 8012118:	18e1      	adds	r1, r4, r3
 801211a:	1c5a      	adds	r2, r3, #1
 801211c:	2030      	movs	r0, #48	; 0x30
 801211e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012122:	4422      	add	r2, r4
 8012124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801212c:	3302      	adds	r3, #2
 801212e:	e7c7      	b.n	80120c0 <_printf_common+0x58>
 8012130:	2301      	movs	r3, #1
 8012132:	4622      	mov	r2, r4
 8012134:	4649      	mov	r1, r9
 8012136:	4638      	mov	r0, r7
 8012138:	47c0      	blx	r8
 801213a:	3001      	adds	r0, #1
 801213c:	d0e6      	beq.n	801210c <_printf_common+0xa4>
 801213e:	3601      	adds	r6, #1
 8012140:	e7d9      	b.n	80120f6 <_printf_common+0x8e>
	...

08012144 <_printf_i>:
 8012144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012148:	7e0f      	ldrb	r7, [r1, #24]
 801214a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801214c:	2f78      	cmp	r7, #120	; 0x78
 801214e:	4691      	mov	r9, r2
 8012150:	4680      	mov	r8, r0
 8012152:	460c      	mov	r4, r1
 8012154:	469a      	mov	sl, r3
 8012156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801215a:	d807      	bhi.n	801216c <_printf_i+0x28>
 801215c:	2f62      	cmp	r7, #98	; 0x62
 801215e:	d80a      	bhi.n	8012176 <_printf_i+0x32>
 8012160:	2f00      	cmp	r7, #0
 8012162:	f000 80d4 	beq.w	801230e <_printf_i+0x1ca>
 8012166:	2f58      	cmp	r7, #88	; 0x58
 8012168:	f000 80c0 	beq.w	80122ec <_printf_i+0x1a8>
 801216c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012174:	e03a      	b.n	80121ec <_printf_i+0xa8>
 8012176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801217a:	2b15      	cmp	r3, #21
 801217c:	d8f6      	bhi.n	801216c <_printf_i+0x28>
 801217e:	a101      	add	r1, pc, #4	; (adr r1, 8012184 <_printf_i+0x40>)
 8012180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012184:	080121dd 	.word	0x080121dd
 8012188:	080121f1 	.word	0x080121f1
 801218c:	0801216d 	.word	0x0801216d
 8012190:	0801216d 	.word	0x0801216d
 8012194:	0801216d 	.word	0x0801216d
 8012198:	0801216d 	.word	0x0801216d
 801219c:	080121f1 	.word	0x080121f1
 80121a0:	0801216d 	.word	0x0801216d
 80121a4:	0801216d 	.word	0x0801216d
 80121a8:	0801216d 	.word	0x0801216d
 80121ac:	0801216d 	.word	0x0801216d
 80121b0:	080122f5 	.word	0x080122f5
 80121b4:	0801221d 	.word	0x0801221d
 80121b8:	080122af 	.word	0x080122af
 80121bc:	0801216d 	.word	0x0801216d
 80121c0:	0801216d 	.word	0x0801216d
 80121c4:	08012317 	.word	0x08012317
 80121c8:	0801216d 	.word	0x0801216d
 80121cc:	0801221d 	.word	0x0801221d
 80121d0:	0801216d 	.word	0x0801216d
 80121d4:	0801216d 	.word	0x0801216d
 80121d8:	080122b7 	.word	0x080122b7
 80121dc:	682b      	ldr	r3, [r5, #0]
 80121de:	1d1a      	adds	r2, r3, #4
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	602a      	str	r2, [r5, #0]
 80121e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80121e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80121ec:	2301      	movs	r3, #1
 80121ee:	e09f      	b.n	8012330 <_printf_i+0x1ec>
 80121f0:	6820      	ldr	r0, [r4, #0]
 80121f2:	682b      	ldr	r3, [r5, #0]
 80121f4:	0607      	lsls	r7, r0, #24
 80121f6:	f103 0104 	add.w	r1, r3, #4
 80121fa:	6029      	str	r1, [r5, #0]
 80121fc:	d501      	bpl.n	8012202 <_printf_i+0xbe>
 80121fe:	681e      	ldr	r6, [r3, #0]
 8012200:	e003      	b.n	801220a <_printf_i+0xc6>
 8012202:	0646      	lsls	r6, r0, #25
 8012204:	d5fb      	bpl.n	80121fe <_printf_i+0xba>
 8012206:	f9b3 6000 	ldrsh.w	r6, [r3]
 801220a:	2e00      	cmp	r6, #0
 801220c:	da03      	bge.n	8012216 <_printf_i+0xd2>
 801220e:	232d      	movs	r3, #45	; 0x2d
 8012210:	4276      	negs	r6, r6
 8012212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012216:	485a      	ldr	r0, [pc, #360]	; (8012380 <_printf_i+0x23c>)
 8012218:	230a      	movs	r3, #10
 801221a:	e012      	b.n	8012242 <_printf_i+0xfe>
 801221c:	682b      	ldr	r3, [r5, #0]
 801221e:	6820      	ldr	r0, [r4, #0]
 8012220:	1d19      	adds	r1, r3, #4
 8012222:	6029      	str	r1, [r5, #0]
 8012224:	0605      	lsls	r5, r0, #24
 8012226:	d501      	bpl.n	801222c <_printf_i+0xe8>
 8012228:	681e      	ldr	r6, [r3, #0]
 801222a:	e002      	b.n	8012232 <_printf_i+0xee>
 801222c:	0641      	lsls	r1, r0, #25
 801222e:	d5fb      	bpl.n	8012228 <_printf_i+0xe4>
 8012230:	881e      	ldrh	r6, [r3, #0]
 8012232:	4853      	ldr	r0, [pc, #332]	; (8012380 <_printf_i+0x23c>)
 8012234:	2f6f      	cmp	r7, #111	; 0x6f
 8012236:	bf0c      	ite	eq
 8012238:	2308      	moveq	r3, #8
 801223a:	230a      	movne	r3, #10
 801223c:	2100      	movs	r1, #0
 801223e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012242:	6865      	ldr	r5, [r4, #4]
 8012244:	60a5      	str	r5, [r4, #8]
 8012246:	2d00      	cmp	r5, #0
 8012248:	bfa2      	ittt	ge
 801224a:	6821      	ldrge	r1, [r4, #0]
 801224c:	f021 0104 	bicge.w	r1, r1, #4
 8012250:	6021      	strge	r1, [r4, #0]
 8012252:	b90e      	cbnz	r6, 8012258 <_printf_i+0x114>
 8012254:	2d00      	cmp	r5, #0
 8012256:	d04b      	beq.n	80122f0 <_printf_i+0x1ac>
 8012258:	4615      	mov	r5, r2
 801225a:	fbb6 f1f3 	udiv	r1, r6, r3
 801225e:	fb03 6711 	mls	r7, r3, r1, r6
 8012262:	5dc7      	ldrb	r7, [r0, r7]
 8012264:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012268:	4637      	mov	r7, r6
 801226a:	42bb      	cmp	r3, r7
 801226c:	460e      	mov	r6, r1
 801226e:	d9f4      	bls.n	801225a <_printf_i+0x116>
 8012270:	2b08      	cmp	r3, #8
 8012272:	d10b      	bne.n	801228c <_printf_i+0x148>
 8012274:	6823      	ldr	r3, [r4, #0]
 8012276:	07de      	lsls	r6, r3, #31
 8012278:	d508      	bpl.n	801228c <_printf_i+0x148>
 801227a:	6923      	ldr	r3, [r4, #16]
 801227c:	6861      	ldr	r1, [r4, #4]
 801227e:	4299      	cmp	r1, r3
 8012280:	bfde      	ittt	le
 8012282:	2330      	movle	r3, #48	; 0x30
 8012284:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012288:	f105 35ff 	addle.w	r5, r5, #4294967295
 801228c:	1b52      	subs	r2, r2, r5
 801228e:	6122      	str	r2, [r4, #16]
 8012290:	f8cd a000 	str.w	sl, [sp]
 8012294:	464b      	mov	r3, r9
 8012296:	aa03      	add	r2, sp, #12
 8012298:	4621      	mov	r1, r4
 801229a:	4640      	mov	r0, r8
 801229c:	f7ff fee4 	bl	8012068 <_printf_common>
 80122a0:	3001      	adds	r0, #1
 80122a2:	d14a      	bne.n	801233a <_printf_i+0x1f6>
 80122a4:	f04f 30ff 	mov.w	r0, #4294967295
 80122a8:	b004      	add	sp, #16
 80122aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122ae:	6823      	ldr	r3, [r4, #0]
 80122b0:	f043 0320 	orr.w	r3, r3, #32
 80122b4:	6023      	str	r3, [r4, #0]
 80122b6:	4833      	ldr	r0, [pc, #204]	; (8012384 <_printf_i+0x240>)
 80122b8:	2778      	movs	r7, #120	; 0x78
 80122ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80122be:	6823      	ldr	r3, [r4, #0]
 80122c0:	6829      	ldr	r1, [r5, #0]
 80122c2:	061f      	lsls	r7, r3, #24
 80122c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80122c8:	d402      	bmi.n	80122d0 <_printf_i+0x18c>
 80122ca:	065f      	lsls	r7, r3, #25
 80122cc:	bf48      	it	mi
 80122ce:	b2b6      	uxthmi	r6, r6
 80122d0:	07df      	lsls	r7, r3, #31
 80122d2:	bf48      	it	mi
 80122d4:	f043 0320 	orrmi.w	r3, r3, #32
 80122d8:	6029      	str	r1, [r5, #0]
 80122da:	bf48      	it	mi
 80122dc:	6023      	strmi	r3, [r4, #0]
 80122de:	b91e      	cbnz	r6, 80122e8 <_printf_i+0x1a4>
 80122e0:	6823      	ldr	r3, [r4, #0]
 80122e2:	f023 0320 	bic.w	r3, r3, #32
 80122e6:	6023      	str	r3, [r4, #0]
 80122e8:	2310      	movs	r3, #16
 80122ea:	e7a7      	b.n	801223c <_printf_i+0xf8>
 80122ec:	4824      	ldr	r0, [pc, #144]	; (8012380 <_printf_i+0x23c>)
 80122ee:	e7e4      	b.n	80122ba <_printf_i+0x176>
 80122f0:	4615      	mov	r5, r2
 80122f2:	e7bd      	b.n	8012270 <_printf_i+0x12c>
 80122f4:	682b      	ldr	r3, [r5, #0]
 80122f6:	6826      	ldr	r6, [r4, #0]
 80122f8:	6961      	ldr	r1, [r4, #20]
 80122fa:	1d18      	adds	r0, r3, #4
 80122fc:	6028      	str	r0, [r5, #0]
 80122fe:	0635      	lsls	r5, r6, #24
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	d501      	bpl.n	8012308 <_printf_i+0x1c4>
 8012304:	6019      	str	r1, [r3, #0]
 8012306:	e002      	b.n	801230e <_printf_i+0x1ca>
 8012308:	0670      	lsls	r0, r6, #25
 801230a:	d5fb      	bpl.n	8012304 <_printf_i+0x1c0>
 801230c:	8019      	strh	r1, [r3, #0]
 801230e:	2300      	movs	r3, #0
 8012310:	6123      	str	r3, [r4, #16]
 8012312:	4615      	mov	r5, r2
 8012314:	e7bc      	b.n	8012290 <_printf_i+0x14c>
 8012316:	682b      	ldr	r3, [r5, #0]
 8012318:	1d1a      	adds	r2, r3, #4
 801231a:	602a      	str	r2, [r5, #0]
 801231c:	681d      	ldr	r5, [r3, #0]
 801231e:	6862      	ldr	r2, [r4, #4]
 8012320:	2100      	movs	r1, #0
 8012322:	4628      	mov	r0, r5
 8012324:	f7ed ff54 	bl	80001d0 <memchr>
 8012328:	b108      	cbz	r0, 801232e <_printf_i+0x1ea>
 801232a:	1b40      	subs	r0, r0, r5
 801232c:	6060      	str	r0, [r4, #4]
 801232e:	6863      	ldr	r3, [r4, #4]
 8012330:	6123      	str	r3, [r4, #16]
 8012332:	2300      	movs	r3, #0
 8012334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012338:	e7aa      	b.n	8012290 <_printf_i+0x14c>
 801233a:	6923      	ldr	r3, [r4, #16]
 801233c:	462a      	mov	r2, r5
 801233e:	4649      	mov	r1, r9
 8012340:	4640      	mov	r0, r8
 8012342:	47d0      	blx	sl
 8012344:	3001      	adds	r0, #1
 8012346:	d0ad      	beq.n	80122a4 <_printf_i+0x160>
 8012348:	6823      	ldr	r3, [r4, #0]
 801234a:	079b      	lsls	r3, r3, #30
 801234c:	d413      	bmi.n	8012376 <_printf_i+0x232>
 801234e:	68e0      	ldr	r0, [r4, #12]
 8012350:	9b03      	ldr	r3, [sp, #12]
 8012352:	4298      	cmp	r0, r3
 8012354:	bfb8      	it	lt
 8012356:	4618      	movlt	r0, r3
 8012358:	e7a6      	b.n	80122a8 <_printf_i+0x164>
 801235a:	2301      	movs	r3, #1
 801235c:	4632      	mov	r2, r6
 801235e:	4649      	mov	r1, r9
 8012360:	4640      	mov	r0, r8
 8012362:	47d0      	blx	sl
 8012364:	3001      	adds	r0, #1
 8012366:	d09d      	beq.n	80122a4 <_printf_i+0x160>
 8012368:	3501      	adds	r5, #1
 801236a:	68e3      	ldr	r3, [r4, #12]
 801236c:	9903      	ldr	r1, [sp, #12]
 801236e:	1a5b      	subs	r3, r3, r1
 8012370:	42ab      	cmp	r3, r5
 8012372:	dcf2      	bgt.n	801235a <_printf_i+0x216>
 8012374:	e7eb      	b.n	801234e <_printf_i+0x20a>
 8012376:	2500      	movs	r5, #0
 8012378:	f104 0619 	add.w	r6, r4, #25
 801237c:	e7f5      	b.n	801236a <_printf_i+0x226>
 801237e:	bf00      	nop
 8012380:	0801887b 	.word	0x0801887b
 8012384:	0801888c 	.word	0x0801888c

08012388 <_scanf_float>:
 8012388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801238c:	b087      	sub	sp, #28
 801238e:	4617      	mov	r7, r2
 8012390:	9303      	str	r3, [sp, #12]
 8012392:	688b      	ldr	r3, [r1, #8]
 8012394:	1e5a      	subs	r2, r3, #1
 8012396:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801239a:	bf83      	ittte	hi
 801239c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80123a0:	195b      	addhi	r3, r3, r5
 80123a2:	9302      	strhi	r3, [sp, #8]
 80123a4:	2300      	movls	r3, #0
 80123a6:	bf86      	itte	hi
 80123a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80123ac:	608b      	strhi	r3, [r1, #8]
 80123ae:	9302      	strls	r3, [sp, #8]
 80123b0:	680b      	ldr	r3, [r1, #0]
 80123b2:	468b      	mov	fp, r1
 80123b4:	2500      	movs	r5, #0
 80123b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80123ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80123be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80123c2:	4680      	mov	r8, r0
 80123c4:	460c      	mov	r4, r1
 80123c6:	465e      	mov	r6, fp
 80123c8:	46aa      	mov	sl, r5
 80123ca:	46a9      	mov	r9, r5
 80123cc:	9501      	str	r5, [sp, #4]
 80123ce:	68a2      	ldr	r2, [r4, #8]
 80123d0:	b152      	cbz	r2, 80123e8 <_scanf_float+0x60>
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	781b      	ldrb	r3, [r3, #0]
 80123d6:	2b4e      	cmp	r3, #78	; 0x4e
 80123d8:	d864      	bhi.n	80124a4 <_scanf_float+0x11c>
 80123da:	2b40      	cmp	r3, #64	; 0x40
 80123dc:	d83c      	bhi.n	8012458 <_scanf_float+0xd0>
 80123de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80123e2:	b2c8      	uxtb	r0, r1
 80123e4:	280e      	cmp	r0, #14
 80123e6:	d93a      	bls.n	801245e <_scanf_float+0xd6>
 80123e8:	f1b9 0f00 	cmp.w	r9, #0
 80123ec:	d003      	beq.n	80123f6 <_scanf_float+0x6e>
 80123ee:	6823      	ldr	r3, [r4, #0]
 80123f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80123f4:	6023      	str	r3, [r4, #0]
 80123f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80123fa:	f1ba 0f01 	cmp.w	sl, #1
 80123fe:	f200 8113 	bhi.w	8012628 <_scanf_float+0x2a0>
 8012402:	455e      	cmp	r6, fp
 8012404:	f200 8105 	bhi.w	8012612 <_scanf_float+0x28a>
 8012408:	2501      	movs	r5, #1
 801240a:	4628      	mov	r0, r5
 801240c:	b007      	add	sp, #28
 801240e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012412:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012416:	2a0d      	cmp	r2, #13
 8012418:	d8e6      	bhi.n	80123e8 <_scanf_float+0x60>
 801241a:	a101      	add	r1, pc, #4	; (adr r1, 8012420 <_scanf_float+0x98>)
 801241c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012420:	0801255f 	.word	0x0801255f
 8012424:	080123e9 	.word	0x080123e9
 8012428:	080123e9 	.word	0x080123e9
 801242c:	080123e9 	.word	0x080123e9
 8012430:	080125bf 	.word	0x080125bf
 8012434:	08012597 	.word	0x08012597
 8012438:	080123e9 	.word	0x080123e9
 801243c:	080123e9 	.word	0x080123e9
 8012440:	0801256d 	.word	0x0801256d
 8012444:	080123e9 	.word	0x080123e9
 8012448:	080123e9 	.word	0x080123e9
 801244c:	080123e9 	.word	0x080123e9
 8012450:	080123e9 	.word	0x080123e9
 8012454:	08012525 	.word	0x08012525
 8012458:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801245c:	e7db      	b.n	8012416 <_scanf_float+0x8e>
 801245e:	290e      	cmp	r1, #14
 8012460:	d8c2      	bhi.n	80123e8 <_scanf_float+0x60>
 8012462:	a001      	add	r0, pc, #4	; (adr r0, 8012468 <_scanf_float+0xe0>)
 8012464:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012468:	08012517 	.word	0x08012517
 801246c:	080123e9 	.word	0x080123e9
 8012470:	08012517 	.word	0x08012517
 8012474:	080125ab 	.word	0x080125ab
 8012478:	080123e9 	.word	0x080123e9
 801247c:	080124c5 	.word	0x080124c5
 8012480:	08012501 	.word	0x08012501
 8012484:	08012501 	.word	0x08012501
 8012488:	08012501 	.word	0x08012501
 801248c:	08012501 	.word	0x08012501
 8012490:	08012501 	.word	0x08012501
 8012494:	08012501 	.word	0x08012501
 8012498:	08012501 	.word	0x08012501
 801249c:	08012501 	.word	0x08012501
 80124a0:	08012501 	.word	0x08012501
 80124a4:	2b6e      	cmp	r3, #110	; 0x6e
 80124a6:	d809      	bhi.n	80124bc <_scanf_float+0x134>
 80124a8:	2b60      	cmp	r3, #96	; 0x60
 80124aa:	d8b2      	bhi.n	8012412 <_scanf_float+0x8a>
 80124ac:	2b54      	cmp	r3, #84	; 0x54
 80124ae:	d077      	beq.n	80125a0 <_scanf_float+0x218>
 80124b0:	2b59      	cmp	r3, #89	; 0x59
 80124b2:	d199      	bne.n	80123e8 <_scanf_float+0x60>
 80124b4:	2d07      	cmp	r5, #7
 80124b6:	d197      	bne.n	80123e8 <_scanf_float+0x60>
 80124b8:	2508      	movs	r5, #8
 80124ba:	e029      	b.n	8012510 <_scanf_float+0x188>
 80124bc:	2b74      	cmp	r3, #116	; 0x74
 80124be:	d06f      	beq.n	80125a0 <_scanf_float+0x218>
 80124c0:	2b79      	cmp	r3, #121	; 0x79
 80124c2:	e7f6      	b.n	80124b2 <_scanf_float+0x12a>
 80124c4:	6821      	ldr	r1, [r4, #0]
 80124c6:	05c8      	lsls	r0, r1, #23
 80124c8:	d51a      	bpl.n	8012500 <_scanf_float+0x178>
 80124ca:	9b02      	ldr	r3, [sp, #8]
 80124cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80124d0:	6021      	str	r1, [r4, #0]
 80124d2:	f109 0901 	add.w	r9, r9, #1
 80124d6:	b11b      	cbz	r3, 80124e0 <_scanf_float+0x158>
 80124d8:	3b01      	subs	r3, #1
 80124da:	3201      	adds	r2, #1
 80124dc:	9302      	str	r3, [sp, #8]
 80124de:	60a2      	str	r2, [r4, #8]
 80124e0:	68a3      	ldr	r3, [r4, #8]
 80124e2:	3b01      	subs	r3, #1
 80124e4:	60a3      	str	r3, [r4, #8]
 80124e6:	6923      	ldr	r3, [r4, #16]
 80124e8:	3301      	adds	r3, #1
 80124ea:	6123      	str	r3, [r4, #16]
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	3b01      	subs	r3, #1
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	607b      	str	r3, [r7, #4]
 80124f4:	f340 8084 	ble.w	8012600 <_scanf_float+0x278>
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	3301      	adds	r3, #1
 80124fc:	603b      	str	r3, [r7, #0]
 80124fe:	e766      	b.n	80123ce <_scanf_float+0x46>
 8012500:	eb1a 0f05 	cmn.w	sl, r5
 8012504:	f47f af70 	bne.w	80123e8 <_scanf_float+0x60>
 8012508:	6822      	ldr	r2, [r4, #0]
 801250a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801250e:	6022      	str	r2, [r4, #0]
 8012510:	f806 3b01 	strb.w	r3, [r6], #1
 8012514:	e7e4      	b.n	80124e0 <_scanf_float+0x158>
 8012516:	6822      	ldr	r2, [r4, #0]
 8012518:	0610      	lsls	r0, r2, #24
 801251a:	f57f af65 	bpl.w	80123e8 <_scanf_float+0x60>
 801251e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012522:	e7f4      	b.n	801250e <_scanf_float+0x186>
 8012524:	f1ba 0f00 	cmp.w	sl, #0
 8012528:	d10e      	bne.n	8012548 <_scanf_float+0x1c0>
 801252a:	f1b9 0f00 	cmp.w	r9, #0
 801252e:	d10e      	bne.n	801254e <_scanf_float+0x1c6>
 8012530:	6822      	ldr	r2, [r4, #0]
 8012532:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012536:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801253a:	d108      	bne.n	801254e <_scanf_float+0x1c6>
 801253c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012540:	6022      	str	r2, [r4, #0]
 8012542:	f04f 0a01 	mov.w	sl, #1
 8012546:	e7e3      	b.n	8012510 <_scanf_float+0x188>
 8012548:	f1ba 0f02 	cmp.w	sl, #2
 801254c:	d055      	beq.n	80125fa <_scanf_float+0x272>
 801254e:	2d01      	cmp	r5, #1
 8012550:	d002      	beq.n	8012558 <_scanf_float+0x1d0>
 8012552:	2d04      	cmp	r5, #4
 8012554:	f47f af48 	bne.w	80123e8 <_scanf_float+0x60>
 8012558:	3501      	adds	r5, #1
 801255a:	b2ed      	uxtb	r5, r5
 801255c:	e7d8      	b.n	8012510 <_scanf_float+0x188>
 801255e:	f1ba 0f01 	cmp.w	sl, #1
 8012562:	f47f af41 	bne.w	80123e8 <_scanf_float+0x60>
 8012566:	f04f 0a02 	mov.w	sl, #2
 801256a:	e7d1      	b.n	8012510 <_scanf_float+0x188>
 801256c:	b97d      	cbnz	r5, 801258e <_scanf_float+0x206>
 801256e:	f1b9 0f00 	cmp.w	r9, #0
 8012572:	f47f af3c 	bne.w	80123ee <_scanf_float+0x66>
 8012576:	6822      	ldr	r2, [r4, #0]
 8012578:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801257c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012580:	f47f af39 	bne.w	80123f6 <_scanf_float+0x6e>
 8012584:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012588:	6022      	str	r2, [r4, #0]
 801258a:	2501      	movs	r5, #1
 801258c:	e7c0      	b.n	8012510 <_scanf_float+0x188>
 801258e:	2d03      	cmp	r5, #3
 8012590:	d0e2      	beq.n	8012558 <_scanf_float+0x1d0>
 8012592:	2d05      	cmp	r5, #5
 8012594:	e7de      	b.n	8012554 <_scanf_float+0x1cc>
 8012596:	2d02      	cmp	r5, #2
 8012598:	f47f af26 	bne.w	80123e8 <_scanf_float+0x60>
 801259c:	2503      	movs	r5, #3
 801259e:	e7b7      	b.n	8012510 <_scanf_float+0x188>
 80125a0:	2d06      	cmp	r5, #6
 80125a2:	f47f af21 	bne.w	80123e8 <_scanf_float+0x60>
 80125a6:	2507      	movs	r5, #7
 80125a8:	e7b2      	b.n	8012510 <_scanf_float+0x188>
 80125aa:	6822      	ldr	r2, [r4, #0]
 80125ac:	0591      	lsls	r1, r2, #22
 80125ae:	f57f af1b 	bpl.w	80123e8 <_scanf_float+0x60>
 80125b2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80125b6:	6022      	str	r2, [r4, #0]
 80125b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80125bc:	e7a8      	b.n	8012510 <_scanf_float+0x188>
 80125be:	6822      	ldr	r2, [r4, #0]
 80125c0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80125c4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80125c8:	d006      	beq.n	80125d8 <_scanf_float+0x250>
 80125ca:	0550      	lsls	r0, r2, #21
 80125cc:	f57f af0c 	bpl.w	80123e8 <_scanf_float+0x60>
 80125d0:	f1b9 0f00 	cmp.w	r9, #0
 80125d4:	f43f af0f 	beq.w	80123f6 <_scanf_float+0x6e>
 80125d8:	0591      	lsls	r1, r2, #22
 80125da:	bf58      	it	pl
 80125dc:	9901      	ldrpl	r1, [sp, #4]
 80125de:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80125e2:	bf58      	it	pl
 80125e4:	eba9 0101 	subpl.w	r1, r9, r1
 80125e8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80125ec:	bf58      	it	pl
 80125ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80125f2:	6022      	str	r2, [r4, #0]
 80125f4:	f04f 0900 	mov.w	r9, #0
 80125f8:	e78a      	b.n	8012510 <_scanf_float+0x188>
 80125fa:	f04f 0a03 	mov.w	sl, #3
 80125fe:	e787      	b.n	8012510 <_scanf_float+0x188>
 8012600:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012604:	4639      	mov	r1, r7
 8012606:	4640      	mov	r0, r8
 8012608:	4798      	blx	r3
 801260a:	2800      	cmp	r0, #0
 801260c:	f43f aedf 	beq.w	80123ce <_scanf_float+0x46>
 8012610:	e6ea      	b.n	80123e8 <_scanf_float+0x60>
 8012612:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012616:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801261a:	463a      	mov	r2, r7
 801261c:	4640      	mov	r0, r8
 801261e:	4798      	blx	r3
 8012620:	6923      	ldr	r3, [r4, #16]
 8012622:	3b01      	subs	r3, #1
 8012624:	6123      	str	r3, [r4, #16]
 8012626:	e6ec      	b.n	8012402 <_scanf_float+0x7a>
 8012628:	1e6b      	subs	r3, r5, #1
 801262a:	2b06      	cmp	r3, #6
 801262c:	d825      	bhi.n	801267a <_scanf_float+0x2f2>
 801262e:	2d02      	cmp	r5, #2
 8012630:	d836      	bhi.n	80126a0 <_scanf_float+0x318>
 8012632:	455e      	cmp	r6, fp
 8012634:	f67f aee8 	bls.w	8012408 <_scanf_float+0x80>
 8012638:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801263c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012640:	463a      	mov	r2, r7
 8012642:	4640      	mov	r0, r8
 8012644:	4798      	blx	r3
 8012646:	6923      	ldr	r3, [r4, #16]
 8012648:	3b01      	subs	r3, #1
 801264a:	6123      	str	r3, [r4, #16]
 801264c:	e7f1      	b.n	8012632 <_scanf_float+0x2aa>
 801264e:	9802      	ldr	r0, [sp, #8]
 8012650:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012654:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012658:	9002      	str	r0, [sp, #8]
 801265a:	463a      	mov	r2, r7
 801265c:	4640      	mov	r0, r8
 801265e:	4798      	blx	r3
 8012660:	6923      	ldr	r3, [r4, #16]
 8012662:	3b01      	subs	r3, #1
 8012664:	6123      	str	r3, [r4, #16]
 8012666:	f10a 3aff 	add.w	sl, sl, #4294967295
 801266a:	fa5f fa8a 	uxtb.w	sl, sl
 801266e:	f1ba 0f02 	cmp.w	sl, #2
 8012672:	d1ec      	bne.n	801264e <_scanf_float+0x2c6>
 8012674:	3d03      	subs	r5, #3
 8012676:	b2ed      	uxtb	r5, r5
 8012678:	1b76      	subs	r6, r6, r5
 801267a:	6823      	ldr	r3, [r4, #0]
 801267c:	05da      	lsls	r2, r3, #23
 801267e:	d52f      	bpl.n	80126e0 <_scanf_float+0x358>
 8012680:	055b      	lsls	r3, r3, #21
 8012682:	d510      	bpl.n	80126a6 <_scanf_float+0x31e>
 8012684:	455e      	cmp	r6, fp
 8012686:	f67f aebf 	bls.w	8012408 <_scanf_float+0x80>
 801268a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801268e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012692:	463a      	mov	r2, r7
 8012694:	4640      	mov	r0, r8
 8012696:	4798      	blx	r3
 8012698:	6923      	ldr	r3, [r4, #16]
 801269a:	3b01      	subs	r3, #1
 801269c:	6123      	str	r3, [r4, #16]
 801269e:	e7f1      	b.n	8012684 <_scanf_float+0x2fc>
 80126a0:	46aa      	mov	sl, r5
 80126a2:	9602      	str	r6, [sp, #8]
 80126a4:	e7df      	b.n	8012666 <_scanf_float+0x2de>
 80126a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80126aa:	6923      	ldr	r3, [r4, #16]
 80126ac:	2965      	cmp	r1, #101	; 0x65
 80126ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80126b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80126b6:	6123      	str	r3, [r4, #16]
 80126b8:	d00c      	beq.n	80126d4 <_scanf_float+0x34c>
 80126ba:	2945      	cmp	r1, #69	; 0x45
 80126bc:	d00a      	beq.n	80126d4 <_scanf_float+0x34c>
 80126be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80126c2:	463a      	mov	r2, r7
 80126c4:	4640      	mov	r0, r8
 80126c6:	4798      	blx	r3
 80126c8:	6923      	ldr	r3, [r4, #16]
 80126ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80126ce:	3b01      	subs	r3, #1
 80126d0:	1eb5      	subs	r5, r6, #2
 80126d2:	6123      	str	r3, [r4, #16]
 80126d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80126d8:	463a      	mov	r2, r7
 80126da:	4640      	mov	r0, r8
 80126dc:	4798      	blx	r3
 80126de:	462e      	mov	r6, r5
 80126e0:	6825      	ldr	r5, [r4, #0]
 80126e2:	f015 0510 	ands.w	r5, r5, #16
 80126e6:	d158      	bne.n	801279a <_scanf_float+0x412>
 80126e8:	7035      	strb	r5, [r6, #0]
 80126ea:	6823      	ldr	r3, [r4, #0]
 80126ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80126f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80126f4:	d11c      	bne.n	8012730 <_scanf_float+0x3a8>
 80126f6:	9b01      	ldr	r3, [sp, #4]
 80126f8:	454b      	cmp	r3, r9
 80126fa:	eba3 0209 	sub.w	r2, r3, r9
 80126fe:	d124      	bne.n	801274a <_scanf_float+0x3c2>
 8012700:	2200      	movs	r2, #0
 8012702:	4659      	mov	r1, fp
 8012704:	4640      	mov	r0, r8
 8012706:	f7ff f8df 	bl	80118c8 <_strtod_r>
 801270a:	9b03      	ldr	r3, [sp, #12]
 801270c:	6821      	ldr	r1, [r4, #0]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	f011 0f02 	tst.w	r1, #2
 8012714:	ec57 6b10 	vmov	r6, r7, d0
 8012718:	f103 0204 	add.w	r2, r3, #4
 801271c:	d020      	beq.n	8012760 <_scanf_float+0x3d8>
 801271e:	9903      	ldr	r1, [sp, #12]
 8012720:	600a      	str	r2, [r1, #0]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	e9c3 6700 	strd	r6, r7, [r3]
 8012728:	68e3      	ldr	r3, [r4, #12]
 801272a:	3301      	adds	r3, #1
 801272c:	60e3      	str	r3, [r4, #12]
 801272e:	e66c      	b.n	801240a <_scanf_float+0x82>
 8012730:	9b04      	ldr	r3, [sp, #16]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d0e4      	beq.n	8012700 <_scanf_float+0x378>
 8012736:	9905      	ldr	r1, [sp, #20]
 8012738:	230a      	movs	r3, #10
 801273a:	462a      	mov	r2, r5
 801273c:	3101      	adds	r1, #1
 801273e:	4640      	mov	r0, r8
 8012740:	f7ff f9b0 	bl	8011aa4 <_strtol_r>
 8012744:	9b04      	ldr	r3, [sp, #16]
 8012746:	9e05      	ldr	r6, [sp, #20]
 8012748:	1ac2      	subs	r2, r0, r3
 801274a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801274e:	429e      	cmp	r6, r3
 8012750:	bf28      	it	cs
 8012752:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012756:	4912      	ldr	r1, [pc, #72]	; (80127a0 <_scanf_float+0x418>)
 8012758:	4630      	mov	r0, r6
 801275a:	f000 f91b 	bl	8012994 <siprintf>
 801275e:	e7cf      	b.n	8012700 <_scanf_float+0x378>
 8012760:	f011 0f04 	tst.w	r1, #4
 8012764:	9903      	ldr	r1, [sp, #12]
 8012766:	600a      	str	r2, [r1, #0]
 8012768:	d1db      	bne.n	8012722 <_scanf_float+0x39a>
 801276a:	f8d3 8000 	ldr.w	r8, [r3]
 801276e:	ee10 2a10 	vmov	r2, s0
 8012772:	ee10 0a10 	vmov	r0, s0
 8012776:	463b      	mov	r3, r7
 8012778:	4639      	mov	r1, r7
 801277a:	f7ee f9d7 	bl	8000b2c <__aeabi_dcmpun>
 801277e:	b128      	cbz	r0, 801278c <_scanf_float+0x404>
 8012780:	4808      	ldr	r0, [pc, #32]	; (80127a4 <_scanf_float+0x41c>)
 8012782:	f000 fa9d 	bl	8012cc0 <nanf>
 8012786:	ed88 0a00 	vstr	s0, [r8]
 801278a:	e7cd      	b.n	8012728 <_scanf_float+0x3a0>
 801278c:	4630      	mov	r0, r6
 801278e:	4639      	mov	r1, r7
 8012790:	f7ee fa2a 	bl	8000be8 <__aeabi_d2f>
 8012794:	f8c8 0000 	str.w	r0, [r8]
 8012798:	e7c6      	b.n	8012728 <_scanf_float+0x3a0>
 801279a:	2500      	movs	r5, #0
 801279c:	e635      	b.n	801240a <_scanf_float+0x82>
 801279e:	bf00      	nop
 80127a0:	0801889d 	.word	0x0801889d
 80127a4:	08018956 	.word	0x08018956

080127a8 <std>:
 80127a8:	2300      	movs	r3, #0
 80127aa:	b510      	push	{r4, lr}
 80127ac:	4604      	mov	r4, r0
 80127ae:	e9c0 3300 	strd	r3, r3, [r0]
 80127b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80127b6:	6083      	str	r3, [r0, #8]
 80127b8:	8181      	strh	r1, [r0, #12]
 80127ba:	6643      	str	r3, [r0, #100]	; 0x64
 80127bc:	81c2      	strh	r2, [r0, #14]
 80127be:	6183      	str	r3, [r0, #24]
 80127c0:	4619      	mov	r1, r3
 80127c2:	2208      	movs	r2, #8
 80127c4:	305c      	adds	r0, #92	; 0x5c
 80127c6:	f000 f948 	bl	8012a5a <memset>
 80127ca:	4b0d      	ldr	r3, [pc, #52]	; (8012800 <std+0x58>)
 80127cc:	6263      	str	r3, [r4, #36]	; 0x24
 80127ce:	4b0d      	ldr	r3, [pc, #52]	; (8012804 <std+0x5c>)
 80127d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80127d2:	4b0d      	ldr	r3, [pc, #52]	; (8012808 <std+0x60>)
 80127d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80127d6:	4b0d      	ldr	r3, [pc, #52]	; (801280c <std+0x64>)
 80127d8:	6323      	str	r3, [r4, #48]	; 0x30
 80127da:	4b0d      	ldr	r3, [pc, #52]	; (8012810 <std+0x68>)
 80127dc:	6224      	str	r4, [r4, #32]
 80127de:	429c      	cmp	r4, r3
 80127e0:	d006      	beq.n	80127f0 <std+0x48>
 80127e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80127e6:	4294      	cmp	r4, r2
 80127e8:	d002      	beq.n	80127f0 <std+0x48>
 80127ea:	33d0      	adds	r3, #208	; 0xd0
 80127ec:	429c      	cmp	r4, r3
 80127ee:	d105      	bne.n	80127fc <std+0x54>
 80127f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80127f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127f8:	f000 ba40 	b.w	8012c7c <__retarget_lock_init_recursive>
 80127fc:	bd10      	pop	{r4, pc}
 80127fe:	bf00      	nop
 8012800:	080129d5 	.word	0x080129d5
 8012804:	080129f7 	.word	0x080129f7
 8012808:	08012a2f 	.word	0x08012a2f
 801280c:	08012a53 	.word	0x08012a53
 8012810:	20001494 	.word	0x20001494

08012814 <stdio_exit_handler>:
 8012814:	4a02      	ldr	r2, [pc, #8]	; (8012820 <stdio_exit_handler+0xc>)
 8012816:	4903      	ldr	r1, [pc, #12]	; (8012824 <stdio_exit_handler+0x10>)
 8012818:	4803      	ldr	r0, [pc, #12]	; (8012828 <stdio_exit_handler+0x14>)
 801281a:	f000 b869 	b.w	80128f0 <_fwalk_sglue>
 801281e:	bf00      	nop
 8012820:	2000014c 	.word	0x2000014c
 8012824:	08014e99 	.word	0x08014e99
 8012828:	200002c4 	.word	0x200002c4

0801282c <cleanup_stdio>:
 801282c:	6841      	ldr	r1, [r0, #4]
 801282e:	4b0c      	ldr	r3, [pc, #48]	; (8012860 <cleanup_stdio+0x34>)
 8012830:	4299      	cmp	r1, r3
 8012832:	b510      	push	{r4, lr}
 8012834:	4604      	mov	r4, r0
 8012836:	d001      	beq.n	801283c <cleanup_stdio+0x10>
 8012838:	f002 fb2e 	bl	8014e98 <_fflush_r>
 801283c:	68a1      	ldr	r1, [r4, #8]
 801283e:	4b09      	ldr	r3, [pc, #36]	; (8012864 <cleanup_stdio+0x38>)
 8012840:	4299      	cmp	r1, r3
 8012842:	d002      	beq.n	801284a <cleanup_stdio+0x1e>
 8012844:	4620      	mov	r0, r4
 8012846:	f002 fb27 	bl	8014e98 <_fflush_r>
 801284a:	68e1      	ldr	r1, [r4, #12]
 801284c:	4b06      	ldr	r3, [pc, #24]	; (8012868 <cleanup_stdio+0x3c>)
 801284e:	4299      	cmp	r1, r3
 8012850:	d004      	beq.n	801285c <cleanup_stdio+0x30>
 8012852:	4620      	mov	r0, r4
 8012854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012858:	f002 bb1e 	b.w	8014e98 <_fflush_r>
 801285c:	bd10      	pop	{r4, pc}
 801285e:	bf00      	nop
 8012860:	20001494 	.word	0x20001494
 8012864:	200014fc 	.word	0x200014fc
 8012868:	20001564 	.word	0x20001564

0801286c <global_stdio_init.part.0>:
 801286c:	b510      	push	{r4, lr}
 801286e:	4b0b      	ldr	r3, [pc, #44]	; (801289c <global_stdio_init.part.0+0x30>)
 8012870:	4c0b      	ldr	r4, [pc, #44]	; (80128a0 <global_stdio_init.part.0+0x34>)
 8012872:	4a0c      	ldr	r2, [pc, #48]	; (80128a4 <global_stdio_init.part.0+0x38>)
 8012874:	601a      	str	r2, [r3, #0]
 8012876:	4620      	mov	r0, r4
 8012878:	2200      	movs	r2, #0
 801287a:	2104      	movs	r1, #4
 801287c:	f7ff ff94 	bl	80127a8 <std>
 8012880:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012884:	2201      	movs	r2, #1
 8012886:	2109      	movs	r1, #9
 8012888:	f7ff ff8e 	bl	80127a8 <std>
 801288c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012890:	2202      	movs	r2, #2
 8012892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012896:	2112      	movs	r1, #18
 8012898:	f7ff bf86 	b.w	80127a8 <std>
 801289c:	200015cc 	.word	0x200015cc
 80128a0:	20001494 	.word	0x20001494
 80128a4:	08012815 	.word	0x08012815

080128a8 <__sfp_lock_acquire>:
 80128a8:	4801      	ldr	r0, [pc, #4]	; (80128b0 <__sfp_lock_acquire+0x8>)
 80128aa:	f000 b9e8 	b.w	8012c7e <__retarget_lock_acquire_recursive>
 80128ae:	bf00      	nop
 80128b0:	200015d5 	.word	0x200015d5

080128b4 <__sfp_lock_release>:
 80128b4:	4801      	ldr	r0, [pc, #4]	; (80128bc <__sfp_lock_release+0x8>)
 80128b6:	f000 b9e3 	b.w	8012c80 <__retarget_lock_release_recursive>
 80128ba:	bf00      	nop
 80128bc:	200015d5 	.word	0x200015d5

080128c0 <__sinit>:
 80128c0:	b510      	push	{r4, lr}
 80128c2:	4604      	mov	r4, r0
 80128c4:	f7ff fff0 	bl	80128a8 <__sfp_lock_acquire>
 80128c8:	6a23      	ldr	r3, [r4, #32]
 80128ca:	b11b      	cbz	r3, 80128d4 <__sinit+0x14>
 80128cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128d0:	f7ff bff0 	b.w	80128b4 <__sfp_lock_release>
 80128d4:	4b04      	ldr	r3, [pc, #16]	; (80128e8 <__sinit+0x28>)
 80128d6:	6223      	str	r3, [r4, #32]
 80128d8:	4b04      	ldr	r3, [pc, #16]	; (80128ec <__sinit+0x2c>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d1f5      	bne.n	80128cc <__sinit+0xc>
 80128e0:	f7ff ffc4 	bl	801286c <global_stdio_init.part.0>
 80128e4:	e7f2      	b.n	80128cc <__sinit+0xc>
 80128e6:	bf00      	nop
 80128e8:	0801282d 	.word	0x0801282d
 80128ec:	200015cc 	.word	0x200015cc

080128f0 <_fwalk_sglue>:
 80128f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80128f4:	4607      	mov	r7, r0
 80128f6:	4688      	mov	r8, r1
 80128f8:	4614      	mov	r4, r2
 80128fa:	2600      	movs	r6, #0
 80128fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012900:	f1b9 0901 	subs.w	r9, r9, #1
 8012904:	d505      	bpl.n	8012912 <_fwalk_sglue+0x22>
 8012906:	6824      	ldr	r4, [r4, #0]
 8012908:	2c00      	cmp	r4, #0
 801290a:	d1f7      	bne.n	80128fc <_fwalk_sglue+0xc>
 801290c:	4630      	mov	r0, r6
 801290e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012912:	89ab      	ldrh	r3, [r5, #12]
 8012914:	2b01      	cmp	r3, #1
 8012916:	d907      	bls.n	8012928 <_fwalk_sglue+0x38>
 8012918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801291c:	3301      	adds	r3, #1
 801291e:	d003      	beq.n	8012928 <_fwalk_sglue+0x38>
 8012920:	4629      	mov	r1, r5
 8012922:	4638      	mov	r0, r7
 8012924:	47c0      	blx	r8
 8012926:	4306      	orrs	r6, r0
 8012928:	3568      	adds	r5, #104	; 0x68
 801292a:	e7e9      	b.n	8012900 <_fwalk_sglue+0x10>

0801292c <sniprintf>:
 801292c:	b40c      	push	{r2, r3}
 801292e:	b530      	push	{r4, r5, lr}
 8012930:	4b17      	ldr	r3, [pc, #92]	; (8012990 <sniprintf+0x64>)
 8012932:	1e0c      	subs	r4, r1, #0
 8012934:	681d      	ldr	r5, [r3, #0]
 8012936:	b09d      	sub	sp, #116	; 0x74
 8012938:	da08      	bge.n	801294c <sniprintf+0x20>
 801293a:	238b      	movs	r3, #139	; 0x8b
 801293c:	602b      	str	r3, [r5, #0]
 801293e:	f04f 30ff 	mov.w	r0, #4294967295
 8012942:	b01d      	add	sp, #116	; 0x74
 8012944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012948:	b002      	add	sp, #8
 801294a:	4770      	bx	lr
 801294c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012950:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012954:	bf14      	ite	ne
 8012956:	f104 33ff 	addne.w	r3, r4, #4294967295
 801295a:	4623      	moveq	r3, r4
 801295c:	9304      	str	r3, [sp, #16]
 801295e:	9307      	str	r3, [sp, #28]
 8012960:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012964:	9002      	str	r0, [sp, #8]
 8012966:	9006      	str	r0, [sp, #24]
 8012968:	f8ad 3016 	strh.w	r3, [sp, #22]
 801296c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801296e:	ab21      	add	r3, sp, #132	; 0x84
 8012970:	a902      	add	r1, sp, #8
 8012972:	4628      	mov	r0, r5
 8012974:	9301      	str	r3, [sp, #4]
 8012976:	f002 f90b 	bl	8014b90 <_svfiprintf_r>
 801297a:	1c43      	adds	r3, r0, #1
 801297c:	bfbc      	itt	lt
 801297e:	238b      	movlt	r3, #139	; 0x8b
 8012980:	602b      	strlt	r3, [r5, #0]
 8012982:	2c00      	cmp	r4, #0
 8012984:	d0dd      	beq.n	8012942 <sniprintf+0x16>
 8012986:	9b02      	ldr	r3, [sp, #8]
 8012988:	2200      	movs	r2, #0
 801298a:	701a      	strb	r2, [r3, #0]
 801298c:	e7d9      	b.n	8012942 <sniprintf+0x16>
 801298e:	bf00      	nop
 8012990:	20000310 	.word	0x20000310

08012994 <siprintf>:
 8012994:	b40e      	push	{r1, r2, r3}
 8012996:	b500      	push	{lr}
 8012998:	b09c      	sub	sp, #112	; 0x70
 801299a:	ab1d      	add	r3, sp, #116	; 0x74
 801299c:	9002      	str	r0, [sp, #8]
 801299e:	9006      	str	r0, [sp, #24]
 80129a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80129a4:	4809      	ldr	r0, [pc, #36]	; (80129cc <siprintf+0x38>)
 80129a6:	9107      	str	r1, [sp, #28]
 80129a8:	9104      	str	r1, [sp, #16]
 80129aa:	4909      	ldr	r1, [pc, #36]	; (80129d0 <siprintf+0x3c>)
 80129ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80129b0:	9105      	str	r1, [sp, #20]
 80129b2:	6800      	ldr	r0, [r0, #0]
 80129b4:	9301      	str	r3, [sp, #4]
 80129b6:	a902      	add	r1, sp, #8
 80129b8:	f002 f8ea 	bl	8014b90 <_svfiprintf_r>
 80129bc:	9b02      	ldr	r3, [sp, #8]
 80129be:	2200      	movs	r2, #0
 80129c0:	701a      	strb	r2, [r3, #0]
 80129c2:	b01c      	add	sp, #112	; 0x70
 80129c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80129c8:	b003      	add	sp, #12
 80129ca:	4770      	bx	lr
 80129cc:	20000310 	.word	0x20000310
 80129d0:	ffff0208 	.word	0xffff0208

080129d4 <__sread>:
 80129d4:	b510      	push	{r4, lr}
 80129d6:	460c      	mov	r4, r1
 80129d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129dc:	f000 f8f0 	bl	8012bc0 <_read_r>
 80129e0:	2800      	cmp	r0, #0
 80129e2:	bfab      	itete	ge
 80129e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80129e6:	89a3      	ldrhlt	r3, [r4, #12]
 80129e8:	181b      	addge	r3, r3, r0
 80129ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80129ee:	bfac      	ite	ge
 80129f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80129f2:	81a3      	strhlt	r3, [r4, #12]
 80129f4:	bd10      	pop	{r4, pc}

080129f6 <__swrite>:
 80129f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129fa:	461f      	mov	r7, r3
 80129fc:	898b      	ldrh	r3, [r1, #12]
 80129fe:	05db      	lsls	r3, r3, #23
 8012a00:	4605      	mov	r5, r0
 8012a02:	460c      	mov	r4, r1
 8012a04:	4616      	mov	r6, r2
 8012a06:	d505      	bpl.n	8012a14 <__swrite+0x1e>
 8012a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a0c:	2302      	movs	r3, #2
 8012a0e:	2200      	movs	r2, #0
 8012a10:	f000 f8c4 	bl	8012b9c <_lseek_r>
 8012a14:	89a3      	ldrh	r3, [r4, #12]
 8012a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a1e:	81a3      	strh	r3, [r4, #12]
 8012a20:	4632      	mov	r2, r6
 8012a22:	463b      	mov	r3, r7
 8012a24:	4628      	mov	r0, r5
 8012a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a2a:	f000 b8eb 	b.w	8012c04 <_write_r>

08012a2e <__sseek>:
 8012a2e:	b510      	push	{r4, lr}
 8012a30:	460c      	mov	r4, r1
 8012a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a36:	f000 f8b1 	bl	8012b9c <_lseek_r>
 8012a3a:	1c43      	adds	r3, r0, #1
 8012a3c:	89a3      	ldrh	r3, [r4, #12]
 8012a3e:	bf15      	itete	ne
 8012a40:	6560      	strne	r0, [r4, #84]	; 0x54
 8012a42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012a46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012a4a:	81a3      	strheq	r3, [r4, #12]
 8012a4c:	bf18      	it	ne
 8012a4e:	81a3      	strhne	r3, [r4, #12]
 8012a50:	bd10      	pop	{r4, pc}

08012a52 <__sclose>:
 8012a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a56:	f000 b891 	b.w	8012b7c <_close_r>

08012a5a <memset>:
 8012a5a:	4402      	add	r2, r0
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d100      	bne.n	8012a64 <memset+0xa>
 8012a62:	4770      	bx	lr
 8012a64:	f803 1b01 	strb.w	r1, [r3], #1
 8012a68:	e7f9      	b.n	8012a5e <memset+0x4>

08012a6a <strncmp>:
 8012a6a:	b510      	push	{r4, lr}
 8012a6c:	b16a      	cbz	r2, 8012a8a <strncmp+0x20>
 8012a6e:	3901      	subs	r1, #1
 8012a70:	1884      	adds	r4, r0, r2
 8012a72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a76:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	d103      	bne.n	8012a86 <strncmp+0x1c>
 8012a7e:	42a0      	cmp	r0, r4
 8012a80:	d001      	beq.n	8012a86 <strncmp+0x1c>
 8012a82:	2a00      	cmp	r2, #0
 8012a84:	d1f5      	bne.n	8012a72 <strncmp+0x8>
 8012a86:	1ad0      	subs	r0, r2, r3
 8012a88:	bd10      	pop	{r4, pc}
 8012a8a:	4610      	mov	r0, r2
 8012a8c:	e7fc      	b.n	8012a88 <strncmp+0x1e>
	...

08012a90 <strtok>:
 8012a90:	4b16      	ldr	r3, [pc, #88]	; (8012aec <strtok+0x5c>)
 8012a92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012a94:	681e      	ldr	r6, [r3, #0]
 8012a96:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8012a98:	4605      	mov	r5, r0
 8012a9a:	b9fc      	cbnz	r4, 8012adc <strtok+0x4c>
 8012a9c:	2050      	movs	r0, #80	; 0x50
 8012a9e:	9101      	str	r1, [sp, #4]
 8012aa0:	f7fe f848 	bl	8010b34 <malloc>
 8012aa4:	9901      	ldr	r1, [sp, #4]
 8012aa6:	6470      	str	r0, [r6, #68]	; 0x44
 8012aa8:	4602      	mov	r2, r0
 8012aaa:	b920      	cbnz	r0, 8012ab6 <strtok+0x26>
 8012aac:	4b10      	ldr	r3, [pc, #64]	; (8012af0 <strtok+0x60>)
 8012aae:	4811      	ldr	r0, [pc, #68]	; (8012af4 <strtok+0x64>)
 8012ab0:	215b      	movs	r1, #91	; 0x5b
 8012ab2:	f000 f90b 	bl	8012ccc <__assert_func>
 8012ab6:	e9c0 4400 	strd	r4, r4, [r0]
 8012aba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012abe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8012ac2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8012ac6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012aca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012ace:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8012ad2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8012ad6:	6184      	str	r4, [r0, #24]
 8012ad8:	7704      	strb	r4, [r0, #28]
 8012ada:	6244      	str	r4, [r0, #36]	; 0x24
 8012adc:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8012ade:	2301      	movs	r3, #1
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	b002      	add	sp, #8
 8012ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ae8:	f000 b806 	b.w	8012af8 <__strtok_r>
 8012aec:	20000310 	.word	0x20000310
 8012af0:	080188a2 	.word	0x080188a2
 8012af4:	080188b9 	.word	0x080188b9

08012af8 <__strtok_r>:
 8012af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012afa:	b908      	cbnz	r0, 8012b00 <__strtok_r+0x8>
 8012afc:	6810      	ldr	r0, [r2, #0]
 8012afe:	b188      	cbz	r0, 8012b24 <__strtok_r+0x2c>
 8012b00:	4604      	mov	r4, r0
 8012b02:	4620      	mov	r0, r4
 8012b04:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012b08:	460f      	mov	r7, r1
 8012b0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012b0e:	b91e      	cbnz	r6, 8012b18 <__strtok_r+0x20>
 8012b10:	b965      	cbnz	r5, 8012b2c <__strtok_r+0x34>
 8012b12:	6015      	str	r5, [r2, #0]
 8012b14:	4628      	mov	r0, r5
 8012b16:	e005      	b.n	8012b24 <__strtok_r+0x2c>
 8012b18:	42b5      	cmp	r5, r6
 8012b1a:	d1f6      	bne.n	8012b0a <__strtok_r+0x12>
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d1f0      	bne.n	8012b02 <__strtok_r+0xa>
 8012b20:	6014      	str	r4, [r2, #0]
 8012b22:	7003      	strb	r3, [r0, #0]
 8012b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b26:	461c      	mov	r4, r3
 8012b28:	e00c      	b.n	8012b44 <__strtok_r+0x4c>
 8012b2a:	b915      	cbnz	r5, 8012b32 <__strtok_r+0x3a>
 8012b2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012b30:	460e      	mov	r6, r1
 8012b32:	f816 5b01 	ldrb.w	r5, [r6], #1
 8012b36:	42ab      	cmp	r3, r5
 8012b38:	d1f7      	bne.n	8012b2a <__strtok_r+0x32>
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d0f3      	beq.n	8012b26 <__strtok_r+0x2e>
 8012b3e:	2300      	movs	r3, #0
 8012b40:	f804 3c01 	strb.w	r3, [r4, #-1]
 8012b44:	6014      	str	r4, [r2, #0]
 8012b46:	e7ed      	b.n	8012b24 <__strtok_r+0x2c>

08012b48 <strstr>:
 8012b48:	780a      	ldrb	r2, [r1, #0]
 8012b4a:	b570      	push	{r4, r5, r6, lr}
 8012b4c:	b96a      	cbnz	r2, 8012b6a <strstr+0x22>
 8012b4e:	bd70      	pop	{r4, r5, r6, pc}
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d109      	bne.n	8012b68 <strstr+0x20>
 8012b54:	460c      	mov	r4, r1
 8012b56:	4605      	mov	r5, r0
 8012b58:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d0f6      	beq.n	8012b4e <strstr+0x6>
 8012b60:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012b64:	429e      	cmp	r6, r3
 8012b66:	d0f7      	beq.n	8012b58 <strstr+0x10>
 8012b68:	3001      	adds	r0, #1
 8012b6a:	7803      	ldrb	r3, [r0, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d1ef      	bne.n	8012b50 <strstr+0x8>
 8012b70:	4618      	mov	r0, r3
 8012b72:	e7ec      	b.n	8012b4e <strstr+0x6>

08012b74 <_localeconv_r>:
 8012b74:	4800      	ldr	r0, [pc, #0]	; (8012b78 <_localeconv_r+0x4>)
 8012b76:	4770      	bx	lr
 8012b78:	20000248 	.word	0x20000248

08012b7c <_close_r>:
 8012b7c:	b538      	push	{r3, r4, r5, lr}
 8012b7e:	4d06      	ldr	r5, [pc, #24]	; (8012b98 <_close_r+0x1c>)
 8012b80:	2300      	movs	r3, #0
 8012b82:	4604      	mov	r4, r0
 8012b84:	4608      	mov	r0, r1
 8012b86:	602b      	str	r3, [r5, #0]
 8012b88:	f7f1 fc09 	bl	800439e <_close>
 8012b8c:	1c43      	adds	r3, r0, #1
 8012b8e:	d102      	bne.n	8012b96 <_close_r+0x1a>
 8012b90:	682b      	ldr	r3, [r5, #0]
 8012b92:	b103      	cbz	r3, 8012b96 <_close_r+0x1a>
 8012b94:	6023      	str	r3, [r4, #0]
 8012b96:	bd38      	pop	{r3, r4, r5, pc}
 8012b98:	200015d0 	.word	0x200015d0

08012b9c <_lseek_r>:
 8012b9c:	b538      	push	{r3, r4, r5, lr}
 8012b9e:	4d07      	ldr	r5, [pc, #28]	; (8012bbc <_lseek_r+0x20>)
 8012ba0:	4604      	mov	r4, r0
 8012ba2:	4608      	mov	r0, r1
 8012ba4:	4611      	mov	r1, r2
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	602a      	str	r2, [r5, #0]
 8012baa:	461a      	mov	r2, r3
 8012bac:	f7f1 fc1e 	bl	80043ec <_lseek>
 8012bb0:	1c43      	adds	r3, r0, #1
 8012bb2:	d102      	bne.n	8012bba <_lseek_r+0x1e>
 8012bb4:	682b      	ldr	r3, [r5, #0]
 8012bb6:	b103      	cbz	r3, 8012bba <_lseek_r+0x1e>
 8012bb8:	6023      	str	r3, [r4, #0]
 8012bba:	bd38      	pop	{r3, r4, r5, pc}
 8012bbc:	200015d0 	.word	0x200015d0

08012bc0 <_read_r>:
 8012bc0:	b538      	push	{r3, r4, r5, lr}
 8012bc2:	4d07      	ldr	r5, [pc, #28]	; (8012be0 <_read_r+0x20>)
 8012bc4:	4604      	mov	r4, r0
 8012bc6:	4608      	mov	r0, r1
 8012bc8:	4611      	mov	r1, r2
 8012bca:	2200      	movs	r2, #0
 8012bcc:	602a      	str	r2, [r5, #0]
 8012bce:	461a      	mov	r2, r3
 8012bd0:	f7f1 fbac 	bl	800432c <_read>
 8012bd4:	1c43      	adds	r3, r0, #1
 8012bd6:	d102      	bne.n	8012bde <_read_r+0x1e>
 8012bd8:	682b      	ldr	r3, [r5, #0]
 8012bda:	b103      	cbz	r3, 8012bde <_read_r+0x1e>
 8012bdc:	6023      	str	r3, [r4, #0]
 8012bde:	bd38      	pop	{r3, r4, r5, pc}
 8012be0:	200015d0 	.word	0x200015d0

08012be4 <_sbrk_r>:
 8012be4:	b538      	push	{r3, r4, r5, lr}
 8012be6:	4d06      	ldr	r5, [pc, #24]	; (8012c00 <_sbrk_r+0x1c>)
 8012be8:	2300      	movs	r3, #0
 8012bea:	4604      	mov	r4, r0
 8012bec:	4608      	mov	r0, r1
 8012bee:	602b      	str	r3, [r5, #0]
 8012bf0:	f7f1 fc0a 	bl	8004408 <_sbrk>
 8012bf4:	1c43      	adds	r3, r0, #1
 8012bf6:	d102      	bne.n	8012bfe <_sbrk_r+0x1a>
 8012bf8:	682b      	ldr	r3, [r5, #0]
 8012bfa:	b103      	cbz	r3, 8012bfe <_sbrk_r+0x1a>
 8012bfc:	6023      	str	r3, [r4, #0]
 8012bfe:	bd38      	pop	{r3, r4, r5, pc}
 8012c00:	200015d0 	.word	0x200015d0

08012c04 <_write_r>:
 8012c04:	b538      	push	{r3, r4, r5, lr}
 8012c06:	4d07      	ldr	r5, [pc, #28]	; (8012c24 <_write_r+0x20>)
 8012c08:	4604      	mov	r4, r0
 8012c0a:	4608      	mov	r0, r1
 8012c0c:	4611      	mov	r1, r2
 8012c0e:	2200      	movs	r2, #0
 8012c10:	602a      	str	r2, [r5, #0]
 8012c12:	461a      	mov	r2, r3
 8012c14:	f7f1 fba7 	bl	8004366 <_write>
 8012c18:	1c43      	adds	r3, r0, #1
 8012c1a:	d102      	bne.n	8012c22 <_write_r+0x1e>
 8012c1c:	682b      	ldr	r3, [r5, #0]
 8012c1e:	b103      	cbz	r3, 8012c22 <_write_r+0x1e>
 8012c20:	6023      	str	r3, [r4, #0]
 8012c22:	bd38      	pop	{r3, r4, r5, pc}
 8012c24:	200015d0 	.word	0x200015d0

08012c28 <__errno>:
 8012c28:	4b01      	ldr	r3, [pc, #4]	; (8012c30 <__errno+0x8>)
 8012c2a:	6818      	ldr	r0, [r3, #0]
 8012c2c:	4770      	bx	lr
 8012c2e:	bf00      	nop
 8012c30:	20000310 	.word	0x20000310

08012c34 <__libc_init_array>:
 8012c34:	b570      	push	{r4, r5, r6, lr}
 8012c36:	4d0d      	ldr	r5, [pc, #52]	; (8012c6c <__libc_init_array+0x38>)
 8012c38:	4c0d      	ldr	r4, [pc, #52]	; (8012c70 <__libc_init_array+0x3c>)
 8012c3a:	1b64      	subs	r4, r4, r5
 8012c3c:	10a4      	asrs	r4, r4, #2
 8012c3e:	2600      	movs	r6, #0
 8012c40:	42a6      	cmp	r6, r4
 8012c42:	d109      	bne.n	8012c58 <__libc_init_array+0x24>
 8012c44:	4d0b      	ldr	r5, [pc, #44]	; (8012c74 <__libc_init_array+0x40>)
 8012c46:	4c0c      	ldr	r4, [pc, #48]	; (8012c78 <__libc_init_array+0x44>)
 8012c48:	f003 fe38 	bl	80168bc <_init>
 8012c4c:	1b64      	subs	r4, r4, r5
 8012c4e:	10a4      	asrs	r4, r4, #2
 8012c50:	2600      	movs	r6, #0
 8012c52:	42a6      	cmp	r6, r4
 8012c54:	d105      	bne.n	8012c62 <__libc_init_array+0x2e>
 8012c56:	bd70      	pop	{r4, r5, r6, pc}
 8012c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c5c:	4798      	blx	r3
 8012c5e:	3601      	adds	r6, #1
 8012c60:	e7ee      	b.n	8012c40 <__libc_init_array+0xc>
 8012c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c66:	4798      	blx	r3
 8012c68:	3601      	adds	r6, #1
 8012c6a:	e7f2      	b.n	8012c52 <__libc_init_array+0x1e>
 8012c6c:	08018d90 	.word	0x08018d90
 8012c70:	08018d90 	.word	0x08018d90
 8012c74:	08018d90 	.word	0x08018d90
 8012c78:	08018d94 	.word	0x08018d94

08012c7c <__retarget_lock_init_recursive>:
 8012c7c:	4770      	bx	lr

08012c7e <__retarget_lock_acquire_recursive>:
 8012c7e:	4770      	bx	lr

08012c80 <__retarget_lock_release_recursive>:
 8012c80:	4770      	bx	lr

08012c82 <strcpy>:
 8012c82:	4603      	mov	r3, r0
 8012c84:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c88:	f803 2b01 	strb.w	r2, [r3], #1
 8012c8c:	2a00      	cmp	r2, #0
 8012c8e:	d1f9      	bne.n	8012c84 <strcpy+0x2>
 8012c90:	4770      	bx	lr

08012c92 <memcpy>:
 8012c92:	440a      	add	r2, r1
 8012c94:	4291      	cmp	r1, r2
 8012c96:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c9a:	d100      	bne.n	8012c9e <memcpy+0xc>
 8012c9c:	4770      	bx	lr
 8012c9e:	b510      	push	{r4, lr}
 8012ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ca4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ca8:	4291      	cmp	r1, r2
 8012caa:	d1f9      	bne.n	8012ca0 <memcpy+0xe>
 8012cac:	bd10      	pop	{r4, pc}
	...

08012cb0 <nan>:
 8012cb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012cb8 <nan+0x8>
 8012cb4:	4770      	bx	lr
 8012cb6:	bf00      	nop
 8012cb8:	00000000 	.word	0x00000000
 8012cbc:	7ff80000 	.word	0x7ff80000

08012cc0 <nanf>:
 8012cc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012cc8 <nanf+0x8>
 8012cc4:	4770      	bx	lr
 8012cc6:	bf00      	nop
 8012cc8:	7fc00000 	.word	0x7fc00000

08012ccc <__assert_func>:
 8012ccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012cce:	4614      	mov	r4, r2
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	4b09      	ldr	r3, [pc, #36]	; (8012cf8 <__assert_func+0x2c>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	4605      	mov	r5, r0
 8012cd8:	68d8      	ldr	r0, [r3, #12]
 8012cda:	b14c      	cbz	r4, 8012cf0 <__assert_func+0x24>
 8012cdc:	4b07      	ldr	r3, [pc, #28]	; (8012cfc <__assert_func+0x30>)
 8012cde:	9100      	str	r1, [sp, #0]
 8012ce0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012ce4:	4906      	ldr	r1, [pc, #24]	; (8012d00 <__assert_func+0x34>)
 8012ce6:	462b      	mov	r3, r5
 8012ce8:	f002 f8fe 	bl	8014ee8 <fiprintf>
 8012cec:	f002 f928 	bl	8014f40 <abort>
 8012cf0:	4b04      	ldr	r3, [pc, #16]	; (8012d04 <__assert_func+0x38>)
 8012cf2:	461c      	mov	r4, r3
 8012cf4:	e7f3      	b.n	8012cde <__assert_func+0x12>
 8012cf6:	bf00      	nop
 8012cf8:	20000310 	.word	0x20000310
 8012cfc:	0801891b 	.word	0x0801891b
 8012d00:	08018928 	.word	0x08018928
 8012d04:	08018956 	.word	0x08018956

08012d08 <quorem>:
 8012d08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d0c:	6903      	ldr	r3, [r0, #16]
 8012d0e:	690c      	ldr	r4, [r1, #16]
 8012d10:	42a3      	cmp	r3, r4
 8012d12:	4607      	mov	r7, r0
 8012d14:	db7e      	blt.n	8012e14 <quorem+0x10c>
 8012d16:	3c01      	subs	r4, #1
 8012d18:	f101 0814 	add.w	r8, r1, #20
 8012d1c:	f100 0514 	add.w	r5, r0, #20
 8012d20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d24:	9301      	str	r3, [sp, #4]
 8012d26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012d2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d2e:	3301      	adds	r3, #1
 8012d30:	429a      	cmp	r2, r3
 8012d32:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012d36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012d3a:	fbb2 f6f3 	udiv	r6, r2, r3
 8012d3e:	d331      	bcc.n	8012da4 <quorem+0x9c>
 8012d40:	f04f 0e00 	mov.w	lr, #0
 8012d44:	4640      	mov	r0, r8
 8012d46:	46ac      	mov	ip, r5
 8012d48:	46f2      	mov	sl, lr
 8012d4a:	f850 2b04 	ldr.w	r2, [r0], #4
 8012d4e:	b293      	uxth	r3, r2
 8012d50:	fb06 e303 	mla	r3, r6, r3, lr
 8012d54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012d58:	0c1a      	lsrs	r2, r3, #16
 8012d5a:	b29b      	uxth	r3, r3
 8012d5c:	ebaa 0303 	sub.w	r3, sl, r3
 8012d60:	f8dc a000 	ldr.w	sl, [ip]
 8012d64:	fa13 f38a 	uxtah	r3, r3, sl
 8012d68:	fb06 220e 	mla	r2, r6, lr, r2
 8012d6c:	9300      	str	r3, [sp, #0]
 8012d6e:	9b00      	ldr	r3, [sp, #0]
 8012d70:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012d74:	b292      	uxth	r2, r2
 8012d76:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012d7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d7e:	f8bd 3000 	ldrh.w	r3, [sp]
 8012d82:	4581      	cmp	r9, r0
 8012d84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d88:	f84c 3b04 	str.w	r3, [ip], #4
 8012d8c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012d90:	d2db      	bcs.n	8012d4a <quorem+0x42>
 8012d92:	f855 300b 	ldr.w	r3, [r5, fp]
 8012d96:	b92b      	cbnz	r3, 8012da4 <quorem+0x9c>
 8012d98:	9b01      	ldr	r3, [sp, #4]
 8012d9a:	3b04      	subs	r3, #4
 8012d9c:	429d      	cmp	r5, r3
 8012d9e:	461a      	mov	r2, r3
 8012da0:	d32c      	bcc.n	8012dfc <quorem+0xf4>
 8012da2:	613c      	str	r4, [r7, #16]
 8012da4:	4638      	mov	r0, r7
 8012da6:	f001 fca5 	bl	80146f4 <__mcmp>
 8012daa:	2800      	cmp	r0, #0
 8012dac:	db22      	blt.n	8012df4 <quorem+0xec>
 8012dae:	3601      	adds	r6, #1
 8012db0:	4629      	mov	r1, r5
 8012db2:	2000      	movs	r0, #0
 8012db4:	f858 2b04 	ldr.w	r2, [r8], #4
 8012db8:	f8d1 c000 	ldr.w	ip, [r1]
 8012dbc:	b293      	uxth	r3, r2
 8012dbe:	1ac3      	subs	r3, r0, r3
 8012dc0:	0c12      	lsrs	r2, r2, #16
 8012dc2:	fa13 f38c 	uxtah	r3, r3, ip
 8012dc6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012dca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012dce:	b29b      	uxth	r3, r3
 8012dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012dd4:	45c1      	cmp	r9, r8
 8012dd6:	f841 3b04 	str.w	r3, [r1], #4
 8012dda:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012dde:	d2e9      	bcs.n	8012db4 <quorem+0xac>
 8012de0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012de4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012de8:	b922      	cbnz	r2, 8012df4 <quorem+0xec>
 8012dea:	3b04      	subs	r3, #4
 8012dec:	429d      	cmp	r5, r3
 8012dee:	461a      	mov	r2, r3
 8012df0:	d30a      	bcc.n	8012e08 <quorem+0x100>
 8012df2:	613c      	str	r4, [r7, #16]
 8012df4:	4630      	mov	r0, r6
 8012df6:	b003      	add	sp, #12
 8012df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dfc:	6812      	ldr	r2, [r2, #0]
 8012dfe:	3b04      	subs	r3, #4
 8012e00:	2a00      	cmp	r2, #0
 8012e02:	d1ce      	bne.n	8012da2 <quorem+0x9a>
 8012e04:	3c01      	subs	r4, #1
 8012e06:	e7c9      	b.n	8012d9c <quorem+0x94>
 8012e08:	6812      	ldr	r2, [r2, #0]
 8012e0a:	3b04      	subs	r3, #4
 8012e0c:	2a00      	cmp	r2, #0
 8012e0e:	d1f0      	bne.n	8012df2 <quorem+0xea>
 8012e10:	3c01      	subs	r4, #1
 8012e12:	e7eb      	b.n	8012dec <quorem+0xe4>
 8012e14:	2000      	movs	r0, #0
 8012e16:	e7ee      	b.n	8012df6 <quorem+0xee>

08012e18 <_dtoa_r>:
 8012e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e1c:	ed2d 8b04 	vpush	{d8-d9}
 8012e20:	69c5      	ldr	r5, [r0, #28]
 8012e22:	b093      	sub	sp, #76	; 0x4c
 8012e24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012e28:	ec57 6b10 	vmov	r6, r7, d0
 8012e2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012e30:	9107      	str	r1, [sp, #28]
 8012e32:	4604      	mov	r4, r0
 8012e34:	920a      	str	r2, [sp, #40]	; 0x28
 8012e36:	930d      	str	r3, [sp, #52]	; 0x34
 8012e38:	b975      	cbnz	r5, 8012e58 <_dtoa_r+0x40>
 8012e3a:	2010      	movs	r0, #16
 8012e3c:	f7fd fe7a 	bl	8010b34 <malloc>
 8012e40:	4602      	mov	r2, r0
 8012e42:	61e0      	str	r0, [r4, #28]
 8012e44:	b920      	cbnz	r0, 8012e50 <_dtoa_r+0x38>
 8012e46:	4bae      	ldr	r3, [pc, #696]	; (8013100 <_dtoa_r+0x2e8>)
 8012e48:	21ef      	movs	r1, #239	; 0xef
 8012e4a:	48ae      	ldr	r0, [pc, #696]	; (8013104 <_dtoa_r+0x2ec>)
 8012e4c:	f7ff ff3e 	bl	8012ccc <__assert_func>
 8012e50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012e54:	6005      	str	r5, [r0, #0]
 8012e56:	60c5      	str	r5, [r0, #12]
 8012e58:	69e3      	ldr	r3, [r4, #28]
 8012e5a:	6819      	ldr	r1, [r3, #0]
 8012e5c:	b151      	cbz	r1, 8012e74 <_dtoa_r+0x5c>
 8012e5e:	685a      	ldr	r2, [r3, #4]
 8012e60:	604a      	str	r2, [r1, #4]
 8012e62:	2301      	movs	r3, #1
 8012e64:	4093      	lsls	r3, r2
 8012e66:	608b      	str	r3, [r1, #8]
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f001 f9bd 	bl	80141e8 <_Bfree>
 8012e6e:	69e3      	ldr	r3, [r4, #28]
 8012e70:	2200      	movs	r2, #0
 8012e72:	601a      	str	r2, [r3, #0]
 8012e74:	1e3b      	subs	r3, r7, #0
 8012e76:	bfbb      	ittet	lt
 8012e78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012e7c:	9303      	strlt	r3, [sp, #12]
 8012e7e:	2300      	movge	r3, #0
 8012e80:	2201      	movlt	r2, #1
 8012e82:	bfac      	ite	ge
 8012e84:	f8c8 3000 	strge.w	r3, [r8]
 8012e88:	f8c8 2000 	strlt.w	r2, [r8]
 8012e8c:	4b9e      	ldr	r3, [pc, #632]	; (8013108 <_dtoa_r+0x2f0>)
 8012e8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012e92:	ea33 0308 	bics.w	r3, r3, r8
 8012e96:	d11b      	bne.n	8012ed0 <_dtoa_r+0xb8>
 8012e98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012e9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8012e9e:	6013      	str	r3, [r2, #0]
 8012ea0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8012ea4:	4333      	orrs	r3, r6
 8012ea6:	f000 8593 	beq.w	80139d0 <_dtoa_r+0xbb8>
 8012eaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012eac:	b963      	cbnz	r3, 8012ec8 <_dtoa_r+0xb0>
 8012eae:	4b97      	ldr	r3, [pc, #604]	; (801310c <_dtoa_r+0x2f4>)
 8012eb0:	e027      	b.n	8012f02 <_dtoa_r+0xea>
 8012eb2:	4b97      	ldr	r3, [pc, #604]	; (8013110 <_dtoa_r+0x2f8>)
 8012eb4:	9300      	str	r3, [sp, #0]
 8012eb6:	3308      	adds	r3, #8
 8012eb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012eba:	6013      	str	r3, [r2, #0]
 8012ebc:	9800      	ldr	r0, [sp, #0]
 8012ebe:	b013      	add	sp, #76	; 0x4c
 8012ec0:	ecbd 8b04 	vpop	{d8-d9}
 8012ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ec8:	4b90      	ldr	r3, [pc, #576]	; (801310c <_dtoa_r+0x2f4>)
 8012eca:	9300      	str	r3, [sp, #0]
 8012ecc:	3303      	adds	r3, #3
 8012ece:	e7f3      	b.n	8012eb8 <_dtoa_r+0xa0>
 8012ed0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	ec51 0b17 	vmov	r0, r1, d7
 8012eda:	eeb0 8a47 	vmov.f32	s16, s14
 8012ede:	eef0 8a67 	vmov.f32	s17, s15
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	f7ed fdf0 	bl	8000ac8 <__aeabi_dcmpeq>
 8012ee8:	4681      	mov	r9, r0
 8012eea:	b160      	cbz	r0, 8012f06 <_dtoa_r+0xee>
 8012eec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012eee:	2301      	movs	r3, #1
 8012ef0:	6013      	str	r3, [r2, #0]
 8012ef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	f000 8568 	beq.w	80139ca <_dtoa_r+0xbb2>
 8012efa:	4b86      	ldr	r3, [pc, #536]	; (8013114 <_dtoa_r+0x2fc>)
 8012efc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012efe:	6013      	str	r3, [r2, #0]
 8012f00:	3b01      	subs	r3, #1
 8012f02:	9300      	str	r3, [sp, #0]
 8012f04:	e7da      	b.n	8012ebc <_dtoa_r+0xa4>
 8012f06:	aa10      	add	r2, sp, #64	; 0x40
 8012f08:	a911      	add	r1, sp, #68	; 0x44
 8012f0a:	4620      	mov	r0, r4
 8012f0c:	eeb0 0a48 	vmov.f32	s0, s16
 8012f10:	eef0 0a68 	vmov.f32	s1, s17
 8012f14:	f001 fd04 	bl	8014920 <__d2b>
 8012f18:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012f1c:	4682      	mov	sl, r0
 8012f1e:	2d00      	cmp	r5, #0
 8012f20:	d07f      	beq.n	8013022 <_dtoa_r+0x20a>
 8012f22:	ee18 3a90 	vmov	r3, s17
 8012f26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f2a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012f2e:	ec51 0b18 	vmov	r0, r1, d8
 8012f32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012f36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012f3a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012f3e:	4619      	mov	r1, r3
 8012f40:	2200      	movs	r2, #0
 8012f42:	4b75      	ldr	r3, [pc, #468]	; (8013118 <_dtoa_r+0x300>)
 8012f44:	f7ed f9a0 	bl	8000288 <__aeabi_dsub>
 8012f48:	a367      	add	r3, pc, #412	; (adr r3, 80130e8 <_dtoa_r+0x2d0>)
 8012f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f4e:	f7ed fb53 	bl	80005f8 <__aeabi_dmul>
 8012f52:	a367      	add	r3, pc, #412	; (adr r3, 80130f0 <_dtoa_r+0x2d8>)
 8012f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f58:	f7ed f998 	bl	800028c <__adddf3>
 8012f5c:	4606      	mov	r6, r0
 8012f5e:	4628      	mov	r0, r5
 8012f60:	460f      	mov	r7, r1
 8012f62:	f7ed fadf 	bl	8000524 <__aeabi_i2d>
 8012f66:	a364      	add	r3, pc, #400	; (adr r3, 80130f8 <_dtoa_r+0x2e0>)
 8012f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f6c:	f7ed fb44 	bl	80005f8 <__aeabi_dmul>
 8012f70:	4602      	mov	r2, r0
 8012f72:	460b      	mov	r3, r1
 8012f74:	4630      	mov	r0, r6
 8012f76:	4639      	mov	r1, r7
 8012f78:	f7ed f988 	bl	800028c <__adddf3>
 8012f7c:	4606      	mov	r6, r0
 8012f7e:	460f      	mov	r7, r1
 8012f80:	f7ed fdea 	bl	8000b58 <__aeabi_d2iz>
 8012f84:	2200      	movs	r2, #0
 8012f86:	4683      	mov	fp, r0
 8012f88:	2300      	movs	r3, #0
 8012f8a:	4630      	mov	r0, r6
 8012f8c:	4639      	mov	r1, r7
 8012f8e:	f7ed fda5 	bl	8000adc <__aeabi_dcmplt>
 8012f92:	b148      	cbz	r0, 8012fa8 <_dtoa_r+0x190>
 8012f94:	4658      	mov	r0, fp
 8012f96:	f7ed fac5 	bl	8000524 <__aeabi_i2d>
 8012f9a:	4632      	mov	r2, r6
 8012f9c:	463b      	mov	r3, r7
 8012f9e:	f7ed fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8012fa2:	b908      	cbnz	r0, 8012fa8 <_dtoa_r+0x190>
 8012fa4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012fa8:	f1bb 0f16 	cmp.w	fp, #22
 8012fac:	d857      	bhi.n	801305e <_dtoa_r+0x246>
 8012fae:	4b5b      	ldr	r3, [pc, #364]	; (801311c <_dtoa_r+0x304>)
 8012fb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb8:	ec51 0b18 	vmov	r0, r1, d8
 8012fbc:	f7ed fd8e 	bl	8000adc <__aeabi_dcmplt>
 8012fc0:	2800      	cmp	r0, #0
 8012fc2:	d04e      	beq.n	8013062 <_dtoa_r+0x24a>
 8012fc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012fc8:	2300      	movs	r3, #0
 8012fca:	930c      	str	r3, [sp, #48]	; 0x30
 8012fcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012fce:	1b5b      	subs	r3, r3, r5
 8012fd0:	1e5a      	subs	r2, r3, #1
 8012fd2:	bf45      	ittet	mi
 8012fd4:	f1c3 0301 	rsbmi	r3, r3, #1
 8012fd8:	9305      	strmi	r3, [sp, #20]
 8012fda:	2300      	movpl	r3, #0
 8012fdc:	2300      	movmi	r3, #0
 8012fde:	9206      	str	r2, [sp, #24]
 8012fe0:	bf54      	ite	pl
 8012fe2:	9305      	strpl	r3, [sp, #20]
 8012fe4:	9306      	strmi	r3, [sp, #24]
 8012fe6:	f1bb 0f00 	cmp.w	fp, #0
 8012fea:	db3c      	blt.n	8013066 <_dtoa_r+0x24e>
 8012fec:	9b06      	ldr	r3, [sp, #24]
 8012fee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012ff2:	445b      	add	r3, fp
 8012ff4:	9306      	str	r3, [sp, #24]
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	9308      	str	r3, [sp, #32]
 8012ffa:	9b07      	ldr	r3, [sp, #28]
 8012ffc:	2b09      	cmp	r3, #9
 8012ffe:	d868      	bhi.n	80130d2 <_dtoa_r+0x2ba>
 8013000:	2b05      	cmp	r3, #5
 8013002:	bfc4      	itt	gt
 8013004:	3b04      	subgt	r3, #4
 8013006:	9307      	strgt	r3, [sp, #28]
 8013008:	9b07      	ldr	r3, [sp, #28]
 801300a:	f1a3 0302 	sub.w	r3, r3, #2
 801300e:	bfcc      	ite	gt
 8013010:	2500      	movgt	r5, #0
 8013012:	2501      	movle	r5, #1
 8013014:	2b03      	cmp	r3, #3
 8013016:	f200 8085 	bhi.w	8013124 <_dtoa_r+0x30c>
 801301a:	e8df f003 	tbb	[pc, r3]
 801301e:	3b2e      	.short	0x3b2e
 8013020:	5839      	.short	0x5839
 8013022:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013026:	441d      	add	r5, r3
 8013028:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801302c:	2b20      	cmp	r3, #32
 801302e:	bfc1      	itttt	gt
 8013030:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013034:	fa08 f803 	lslgt.w	r8, r8, r3
 8013038:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801303c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013040:	bfd6      	itet	le
 8013042:	f1c3 0320 	rsble	r3, r3, #32
 8013046:	ea48 0003 	orrgt.w	r0, r8, r3
 801304a:	fa06 f003 	lslle.w	r0, r6, r3
 801304e:	f7ed fa59 	bl	8000504 <__aeabi_ui2d>
 8013052:	2201      	movs	r2, #1
 8013054:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013058:	3d01      	subs	r5, #1
 801305a:	920e      	str	r2, [sp, #56]	; 0x38
 801305c:	e76f      	b.n	8012f3e <_dtoa_r+0x126>
 801305e:	2301      	movs	r3, #1
 8013060:	e7b3      	b.n	8012fca <_dtoa_r+0x1b2>
 8013062:	900c      	str	r0, [sp, #48]	; 0x30
 8013064:	e7b2      	b.n	8012fcc <_dtoa_r+0x1b4>
 8013066:	9b05      	ldr	r3, [sp, #20]
 8013068:	eba3 030b 	sub.w	r3, r3, fp
 801306c:	9305      	str	r3, [sp, #20]
 801306e:	f1cb 0300 	rsb	r3, fp, #0
 8013072:	9308      	str	r3, [sp, #32]
 8013074:	2300      	movs	r3, #0
 8013076:	930b      	str	r3, [sp, #44]	; 0x2c
 8013078:	e7bf      	b.n	8012ffa <_dtoa_r+0x1e2>
 801307a:	2300      	movs	r3, #0
 801307c:	9309      	str	r3, [sp, #36]	; 0x24
 801307e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013080:	2b00      	cmp	r3, #0
 8013082:	dc52      	bgt.n	801312a <_dtoa_r+0x312>
 8013084:	2301      	movs	r3, #1
 8013086:	9301      	str	r3, [sp, #4]
 8013088:	9304      	str	r3, [sp, #16]
 801308a:	461a      	mov	r2, r3
 801308c:	920a      	str	r2, [sp, #40]	; 0x28
 801308e:	e00b      	b.n	80130a8 <_dtoa_r+0x290>
 8013090:	2301      	movs	r3, #1
 8013092:	e7f3      	b.n	801307c <_dtoa_r+0x264>
 8013094:	2300      	movs	r3, #0
 8013096:	9309      	str	r3, [sp, #36]	; 0x24
 8013098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801309a:	445b      	add	r3, fp
 801309c:	9301      	str	r3, [sp, #4]
 801309e:	3301      	adds	r3, #1
 80130a0:	2b01      	cmp	r3, #1
 80130a2:	9304      	str	r3, [sp, #16]
 80130a4:	bfb8      	it	lt
 80130a6:	2301      	movlt	r3, #1
 80130a8:	69e0      	ldr	r0, [r4, #28]
 80130aa:	2100      	movs	r1, #0
 80130ac:	2204      	movs	r2, #4
 80130ae:	f102 0614 	add.w	r6, r2, #20
 80130b2:	429e      	cmp	r6, r3
 80130b4:	d93d      	bls.n	8013132 <_dtoa_r+0x31a>
 80130b6:	6041      	str	r1, [r0, #4]
 80130b8:	4620      	mov	r0, r4
 80130ba:	f001 f855 	bl	8014168 <_Balloc>
 80130be:	9000      	str	r0, [sp, #0]
 80130c0:	2800      	cmp	r0, #0
 80130c2:	d139      	bne.n	8013138 <_dtoa_r+0x320>
 80130c4:	4b16      	ldr	r3, [pc, #88]	; (8013120 <_dtoa_r+0x308>)
 80130c6:	4602      	mov	r2, r0
 80130c8:	f240 11af 	movw	r1, #431	; 0x1af
 80130cc:	e6bd      	b.n	8012e4a <_dtoa_r+0x32>
 80130ce:	2301      	movs	r3, #1
 80130d0:	e7e1      	b.n	8013096 <_dtoa_r+0x27e>
 80130d2:	2501      	movs	r5, #1
 80130d4:	2300      	movs	r3, #0
 80130d6:	9307      	str	r3, [sp, #28]
 80130d8:	9509      	str	r5, [sp, #36]	; 0x24
 80130da:	f04f 33ff 	mov.w	r3, #4294967295
 80130de:	9301      	str	r3, [sp, #4]
 80130e0:	9304      	str	r3, [sp, #16]
 80130e2:	2200      	movs	r2, #0
 80130e4:	2312      	movs	r3, #18
 80130e6:	e7d1      	b.n	801308c <_dtoa_r+0x274>
 80130e8:	636f4361 	.word	0x636f4361
 80130ec:	3fd287a7 	.word	0x3fd287a7
 80130f0:	8b60c8b3 	.word	0x8b60c8b3
 80130f4:	3fc68a28 	.word	0x3fc68a28
 80130f8:	509f79fb 	.word	0x509f79fb
 80130fc:	3fd34413 	.word	0x3fd34413
 8013100:	080188a2 	.word	0x080188a2
 8013104:	08018964 	.word	0x08018964
 8013108:	7ff00000 	.word	0x7ff00000
 801310c:	08018960 	.word	0x08018960
 8013110:	08018957 	.word	0x08018957
 8013114:	0801887a 	.word	0x0801887a
 8013118:	3ff80000 	.word	0x3ff80000
 801311c:	08018ab0 	.word	0x08018ab0
 8013120:	080189bc 	.word	0x080189bc
 8013124:	2301      	movs	r3, #1
 8013126:	9309      	str	r3, [sp, #36]	; 0x24
 8013128:	e7d7      	b.n	80130da <_dtoa_r+0x2c2>
 801312a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801312c:	9301      	str	r3, [sp, #4]
 801312e:	9304      	str	r3, [sp, #16]
 8013130:	e7ba      	b.n	80130a8 <_dtoa_r+0x290>
 8013132:	3101      	adds	r1, #1
 8013134:	0052      	lsls	r2, r2, #1
 8013136:	e7ba      	b.n	80130ae <_dtoa_r+0x296>
 8013138:	69e3      	ldr	r3, [r4, #28]
 801313a:	9a00      	ldr	r2, [sp, #0]
 801313c:	601a      	str	r2, [r3, #0]
 801313e:	9b04      	ldr	r3, [sp, #16]
 8013140:	2b0e      	cmp	r3, #14
 8013142:	f200 80a8 	bhi.w	8013296 <_dtoa_r+0x47e>
 8013146:	2d00      	cmp	r5, #0
 8013148:	f000 80a5 	beq.w	8013296 <_dtoa_r+0x47e>
 801314c:	f1bb 0f00 	cmp.w	fp, #0
 8013150:	dd38      	ble.n	80131c4 <_dtoa_r+0x3ac>
 8013152:	4bc0      	ldr	r3, [pc, #768]	; (8013454 <_dtoa_r+0x63c>)
 8013154:	f00b 020f 	and.w	r2, fp, #15
 8013158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801315c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013160:	e9d3 6700 	ldrd	r6, r7, [r3]
 8013164:	ea4f 182b 	mov.w	r8, fp, asr #4
 8013168:	d019      	beq.n	801319e <_dtoa_r+0x386>
 801316a:	4bbb      	ldr	r3, [pc, #748]	; (8013458 <_dtoa_r+0x640>)
 801316c:	ec51 0b18 	vmov	r0, r1, d8
 8013170:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013174:	f7ed fb6a 	bl	800084c <__aeabi_ddiv>
 8013178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801317c:	f008 080f 	and.w	r8, r8, #15
 8013180:	2503      	movs	r5, #3
 8013182:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013458 <_dtoa_r+0x640>
 8013186:	f1b8 0f00 	cmp.w	r8, #0
 801318a:	d10a      	bne.n	80131a2 <_dtoa_r+0x38a>
 801318c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013190:	4632      	mov	r2, r6
 8013192:	463b      	mov	r3, r7
 8013194:	f7ed fb5a 	bl	800084c <__aeabi_ddiv>
 8013198:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801319c:	e02b      	b.n	80131f6 <_dtoa_r+0x3de>
 801319e:	2502      	movs	r5, #2
 80131a0:	e7ef      	b.n	8013182 <_dtoa_r+0x36a>
 80131a2:	f018 0f01 	tst.w	r8, #1
 80131a6:	d008      	beq.n	80131ba <_dtoa_r+0x3a2>
 80131a8:	4630      	mov	r0, r6
 80131aa:	4639      	mov	r1, r7
 80131ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80131b0:	f7ed fa22 	bl	80005f8 <__aeabi_dmul>
 80131b4:	3501      	adds	r5, #1
 80131b6:	4606      	mov	r6, r0
 80131b8:	460f      	mov	r7, r1
 80131ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80131be:	f109 0908 	add.w	r9, r9, #8
 80131c2:	e7e0      	b.n	8013186 <_dtoa_r+0x36e>
 80131c4:	f000 809f 	beq.w	8013306 <_dtoa_r+0x4ee>
 80131c8:	f1cb 0600 	rsb	r6, fp, #0
 80131cc:	4ba1      	ldr	r3, [pc, #644]	; (8013454 <_dtoa_r+0x63c>)
 80131ce:	4fa2      	ldr	r7, [pc, #648]	; (8013458 <_dtoa_r+0x640>)
 80131d0:	f006 020f 	and.w	r2, r6, #15
 80131d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80131d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131dc:	ec51 0b18 	vmov	r0, r1, d8
 80131e0:	f7ed fa0a 	bl	80005f8 <__aeabi_dmul>
 80131e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131e8:	1136      	asrs	r6, r6, #4
 80131ea:	2300      	movs	r3, #0
 80131ec:	2502      	movs	r5, #2
 80131ee:	2e00      	cmp	r6, #0
 80131f0:	d17e      	bne.n	80132f0 <_dtoa_r+0x4d8>
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d1d0      	bne.n	8013198 <_dtoa_r+0x380>
 80131f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80131f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	f000 8084 	beq.w	801330a <_dtoa_r+0x4f2>
 8013202:	4b96      	ldr	r3, [pc, #600]	; (801345c <_dtoa_r+0x644>)
 8013204:	2200      	movs	r2, #0
 8013206:	4640      	mov	r0, r8
 8013208:	4649      	mov	r1, r9
 801320a:	f7ed fc67 	bl	8000adc <__aeabi_dcmplt>
 801320e:	2800      	cmp	r0, #0
 8013210:	d07b      	beq.n	801330a <_dtoa_r+0x4f2>
 8013212:	9b04      	ldr	r3, [sp, #16]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d078      	beq.n	801330a <_dtoa_r+0x4f2>
 8013218:	9b01      	ldr	r3, [sp, #4]
 801321a:	2b00      	cmp	r3, #0
 801321c:	dd39      	ble.n	8013292 <_dtoa_r+0x47a>
 801321e:	4b90      	ldr	r3, [pc, #576]	; (8013460 <_dtoa_r+0x648>)
 8013220:	2200      	movs	r2, #0
 8013222:	4640      	mov	r0, r8
 8013224:	4649      	mov	r1, r9
 8013226:	f7ed f9e7 	bl	80005f8 <__aeabi_dmul>
 801322a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801322e:	9e01      	ldr	r6, [sp, #4]
 8013230:	f10b 37ff 	add.w	r7, fp, #4294967295
 8013234:	3501      	adds	r5, #1
 8013236:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801323a:	4628      	mov	r0, r5
 801323c:	f7ed f972 	bl	8000524 <__aeabi_i2d>
 8013240:	4642      	mov	r2, r8
 8013242:	464b      	mov	r3, r9
 8013244:	f7ed f9d8 	bl	80005f8 <__aeabi_dmul>
 8013248:	4b86      	ldr	r3, [pc, #536]	; (8013464 <_dtoa_r+0x64c>)
 801324a:	2200      	movs	r2, #0
 801324c:	f7ed f81e 	bl	800028c <__adddf3>
 8013250:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013258:	9303      	str	r3, [sp, #12]
 801325a:	2e00      	cmp	r6, #0
 801325c:	d158      	bne.n	8013310 <_dtoa_r+0x4f8>
 801325e:	4b82      	ldr	r3, [pc, #520]	; (8013468 <_dtoa_r+0x650>)
 8013260:	2200      	movs	r2, #0
 8013262:	4640      	mov	r0, r8
 8013264:	4649      	mov	r1, r9
 8013266:	f7ed f80f 	bl	8000288 <__aeabi_dsub>
 801326a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801326e:	4680      	mov	r8, r0
 8013270:	4689      	mov	r9, r1
 8013272:	f7ed fc51 	bl	8000b18 <__aeabi_dcmpgt>
 8013276:	2800      	cmp	r0, #0
 8013278:	f040 8296 	bne.w	80137a8 <_dtoa_r+0x990>
 801327c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013280:	4640      	mov	r0, r8
 8013282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013286:	4649      	mov	r1, r9
 8013288:	f7ed fc28 	bl	8000adc <__aeabi_dcmplt>
 801328c:	2800      	cmp	r0, #0
 801328e:	f040 8289 	bne.w	80137a4 <_dtoa_r+0x98c>
 8013292:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013298:	2b00      	cmp	r3, #0
 801329a:	f2c0 814e 	blt.w	801353a <_dtoa_r+0x722>
 801329e:	f1bb 0f0e 	cmp.w	fp, #14
 80132a2:	f300 814a 	bgt.w	801353a <_dtoa_r+0x722>
 80132a6:	4b6b      	ldr	r3, [pc, #428]	; (8013454 <_dtoa_r+0x63c>)
 80132a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80132ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80132b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	f280 80dc 	bge.w	8013470 <_dtoa_r+0x658>
 80132b8:	9b04      	ldr	r3, [sp, #16]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	f300 80d8 	bgt.w	8013470 <_dtoa_r+0x658>
 80132c0:	f040 826f 	bne.w	80137a2 <_dtoa_r+0x98a>
 80132c4:	4b68      	ldr	r3, [pc, #416]	; (8013468 <_dtoa_r+0x650>)
 80132c6:	2200      	movs	r2, #0
 80132c8:	4640      	mov	r0, r8
 80132ca:	4649      	mov	r1, r9
 80132cc:	f7ed f994 	bl	80005f8 <__aeabi_dmul>
 80132d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80132d4:	f7ed fc16 	bl	8000b04 <__aeabi_dcmpge>
 80132d8:	9e04      	ldr	r6, [sp, #16]
 80132da:	4637      	mov	r7, r6
 80132dc:	2800      	cmp	r0, #0
 80132de:	f040 8245 	bne.w	801376c <_dtoa_r+0x954>
 80132e2:	9d00      	ldr	r5, [sp, #0]
 80132e4:	2331      	movs	r3, #49	; 0x31
 80132e6:	f805 3b01 	strb.w	r3, [r5], #1
 80132ea:	f10b 0b01 	add.w	fp, fp, #1
 80132ee:	e241      	b.n	8013774 <_dtoa_r+0x95c>
 80132f0:	07f2      	lsls	r2, r6, #31
 80132f2:	d505      	bpl.n	8013300 <_dtoa_r+0x4e8>
 80132f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80132f8:	f7ed f97e 	bl	80005f8 <__aeabi_dmul>
 80132fc:	3501      	adds	r5, #1
 80132fe:	2301      	movs	r3, #1
 8013300:	1076      	asrs	r6, r6, #1
 8013302:	3708      	adds	r7, #8
 8013304:	e773      	b.n	80131ee <_dtoa_r+0x3d6>
 8013306:	2502      	movs	r5, #2
 8013308:	e775      	b.n	80131f6 <_dtoa_r+0x3de>
 801330a:	9e04      	ldr	r6, [sp, #16]
 801330c:	465f      	mov	r7, fp
 801330e:	e792      	b.n	8013236 <_dtoa_r+0x41e>
 8013310:	9900      	ldr	r1, [sp, #0]
 8013312:	4b50      	ldr	r3, [pc, #320]	; (8013454 <_dtoa_r+0x63c>)
 8013314:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013318:	4431      	add	r1, r6
 801331a:	9102      	str	r1, [sp, #8]
 801331c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801331e:	eeb0 9a47 	vmov.f32	s18, s14
 8013322:	eef0 9a67 	vmov.f32	s19, s15
 8013326:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801332a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801332e:	2900      	cmp	r1, #0
 8013330:	d044      	beq.n	80133bc <_dtoa_r+0x5a4>
 8013332:	494e      	ldr	r1, [pc, #312]	; (801346c <_dtoa_r+0x654>)
 8013334:	2000      	movs	r0, #0
 8013336:	f7ed fa89 	bl	800084c <__aeabi_ddiv>
 801333a:	ec53 2b19 	vmov	r2, r3, d9
 801333e:	f7ec ffa3 	bl	8000288 <__aeabi_dsub>
 8013342:	9d00      	ldr	r5, [sp, #0]
 8013344:	ec41 0b19 	vmov	d9, r0, r1
 8013348:	4649      	mov	r1, r9
 801334a:	4640      	mov	r0, r8
 801334c:	f7ed fc04 	bl	8000b58 <__aeabi_d2iz>
 8013350:	4606      	mov	r6, r0
 8013352:	f7ed f8e7 	bl	8000524 <__aeabi_i2d>
 8013356:	4602      	mov	r2, r0
 8013358:	460b      	mov	r3, r1
 801335a:	4640      	mov	r0, r8
 801335c:	4649      	mov	r1, r9
 801335e:	f7ec ff93 	bl	8000288 <__aeabi_dsub>
 8013362:	3630      	adds	r6, #48	; 0x30
 8013364:	f805 6b01 	strb.w	r6, [r5], #1
 8013368:	ec53 2b19 	vmov	r2, r3, d9
 801336c:	4680      	mov	r8, r0
 801336e:	4689      	mov	r9, r1
 8013370:	f7ed fbb4 	bl	8000adc <__aeabi_dcmplt>
 8013374:	2800      	cmp	r0, #0
 8013376:	d164      	bne.n	8013442 <_dtoa_r+0x62a>
 8013378:	4642      	mov	r2, r8
 801337a:	464b      	mov	r3, r9
 801337c:	4937      	ldr	r1, [pc, #220]	; (801345c <_dtoa_r+0x644>)
 801337e:	2000      	movs	r0, #0
 8013380:	f7ec ff82 	bl	8000288 <__aeabi_dsub>
 8013384:	ec53 2b19 	vmov	r2, r3, d9
 8013388:	f7ed fba8 	bl	8000adc <__aeabi_dcmplt>
 801338c:	2800      	cmp	r0, #0
 801338e:	f040 80b6 	bne.w	80134fe <_dtoa_r+0x6e6>
 8013392:	9b02      	ldr	r3, [sp, #8]
 8013394:	429d      	cmp	r5, r3
 8013396:	f43f af7c 	beq.w	8013292 <_dtoa_r+0x47a>
 801339a:	4b31      	ldr	r3, [pc, #196]	; (8013460 <_dtoa_r+0x648>)
 801339c:	ec51 0b19 	vmov	r0, r1, d9
 80133a0:	2200      	movs	r2, #0
 80133a2:	f7ed f929 	bl	80005f8 <__aeabi_dmul>
 80133a6:	4b2e      	ldr	r3, [pc, #184]	; (8013460 <_dtoa_r+0x648>)
 80133a8:	ec41 0b19 	vmov	d9, r0, r1
 80133ac:	2200      	movs	r2, #0
 80133ae:	4640      	mov	r0, r8
 80133b0:	4649      	mov	r1, r9
 80133b2:	f7ed f921 	bl	80005f8 <__aeabi_dmul>
 80133b6:	4680      	mov	r8, r0
 80133b8:	4689      	mov	r9, r1
 80133ba:	e7c5      	b.n	8013348 <_dtoa_r+0x530>
 80133bc:	ec51 0b17 	vmov	r0, r1, d7
 80133c0:	f7ed f91a 	bl	80005f8 <__aeabi_dmul>
 80133c4:	9b02      	ldr	r3, [sp, #8]
 80133c6:	9d00      	ldr	r5, [sp, #0]
 80133c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80133ca:	ec41 0b19 	vmov	d9, r0, r1
 80133ce:	4649      	mov	r1, r9
 80133d0:	4640      	mov	r0, r8
 80133d2:	f7ed fbc1 	bl	8000b58 <__aeabi_d2iz>
 80133d6:	4606      	mov	r6, r0
 80133d8:	f7ed f8a4 	bl	8000524 <__aeabi_i2d>
 80133dc:	3630      	adds	r6, #48	; 0x30
 80133de:	4602      	mov	r2, r0
 80133e0:	460b      	mov	r3, r1
 80133e2:	4640      	mov	r0, r8
 80133e4:	4649      	mov	r1, r9
 80133e6:	f7ec ff4f 	bl	8000288 <__aeabi_dsub>
 80133ea:	f805 6b01 	strb.w	r6, [r5], #1
 80133ee:	9b02      	ldr	r3, [sp, #8]
 80133f0:	429d      	cmp	r5, r3
 80133f2:	4680      	mov	r8, r0
 80133f4:	4689      	mov	r9, r1
 80133f6:	f04f 0200 	mov.w	r2, #0
 80133fa:	d124      	bne.n	8013446 <_dtoa_r+0x62e>
 80133fc:	4b1b      	ldr	r3, [pc, #108]	; (801346c <_dtoa_r+0x654>)
 80133fe:	ec51 0b19 	vmov	r0, r1, d9
 8013402:	f7ec ff43 	bl	800028c <__adddf3>
 8013406:	4602      	mov	r2, r0
 8013408:	460b      	mov	r3, r1
 801340a:	4640      	mov	r0, r8
 801340c:	4649      	mov	r1, r9
 801340e:	f7ed fb83 	bl	8000b18 <__aeabi_dcmpgt>
 8013412:	2800      	cmp	r0, #0
 8013414:	d173      	bne.n	80134fe <_dtoa_r+0x6e6>
 8013416:	ec53 2b19 	vmov	r2, r3, d9
 801341a:	4914      	ldr	r1, [pc, #80]	; (801346c <_dtoa_r+0x654>)
 801341c:	2000      	movs	r0, #0
 801341e:	f7ec ff33 	bl	8000288 <__aeabi_dsub>
 8013422:	4602      	mov	r2, r0
 8013424:	460b      	mov	r3, r1
 8013426:	4640      	mov	r0, r8
 8013428:	4649      	mov	r1, r9
 801342a:	f7ed fb57 	bl	8000adc <__aeabi_dcmplt>
 801342e:	2800      	cmp	r0, #0
 8013430:	f43f af2f 	beq.w	8013292 <_dtoa_r+0x47a>
 8013434:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013436:	1e6b      	subs	r3, r5, #1
 8013438:	930f      	str	r3, [sp, #60]	; 0x3c
 801343a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801343e:	2b30      	cmp	r3, #48	; 0x30
 8013440:	d0f8      	beq.n	8013434 <_dtoa_r+0x61c>
 8013442:	46bb      	mov	fp, r7
 8013444:	e04a      	b.n	80134dc <_dtoa_r+0x6c4>
 8013446:	4b06      	ldr	r3, [pc, #24]	; (8013460 <_dtoa_r+0x648>)
 8013448:	f7ed f8d6 	bl	80005f8 <__aeabi_dmul>
 801344c:	4680      	mov	r8, r0
 801344e:	4689      	mov	r9, r1
 8013450:	e7bd      	b.n	80133ce <_dtoa_r+0x5b6>
 8013452:	bf00      	nop
 8013454:	08018ab0 	.word	0x08018ab0
 8013458:	08018a88 	.word	0x08018a88
 801345c:	3ff00000 	.word	0x3ff00000
 8013460:	40240000 	.word	0x40240000
 8013464:	401c0000 	.word	0x401c0000
 8013468:	40140000 	.word	0x40140000
 801346c:	3fe00000 	.word	0x3fe00000
 8013470:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013474:	9d00      	ldr	r5, [sp, #0]
 8013476:	4642      	mov	r2, r8
 8013478:	464b      	mov	r3, r9
 801347a:	4630      	mov	r0, r6
 801347c:	4639      	mov	r1, r7
 801347e:	f7ed f9e5 	bl	800084c <__aeabi_ddiv>
 8013482:	f7ed fb69 	bl	8000b58 <__aeabi_d2iz>
 8013486:	9001      	str	r0, [sp, #4]
 8013488:	f7ed f84c 	bl	8000524 <__aeabi_i2d>
 801348c:	4642      	mov	r2, r8
 801348e:	464b      	mov	r3, r9
 8013490:	f7ed f8b2 	bl	80005f8 <__aeabi_dmul>
 8013494:	4602      	mov	r2, r0
 8013496:	460b      	mov	r3, r1
 8013498:	4630      	mov	r0, r6
 801349a:	4639      	mov	r1, r7
 801349c:	f7ec fef4 	bl	8000288 <__aeabi_dsub>
 80134a0:	9e01      	ldr	r6, [sp, #4]
 80134a2:	9f04      	ldr	r7, [sp, #16]
 80134a4:	3630      	adds	r6, #48	; 0x30
 80134a6:	f805 6b01 	strb.w	r6, [r5], #1
 80134aa:	9e00      	ldr	r6, [sp, #0]
 80134ac:	1bae      	subs	r6, r5, r6
 80134ae:	42b7      	cmp	r7, r6
 80134b0:	4602      	mov	r2, r0
 80134b2:	460b      	mov	r3, r1
 80134b4:	d134      	bne.n	8013520 <_dtoa_r+0x708>
 80134b6:	f7ec fee9 	bl	800028c <__adddf3>
 80134ba:	4642      	mov	r2, r8
 80134bc:	464b      	mov	r3, r9
 80134be:	4606      	mov	r6, r0
 80134c0:	460f      	mov	r7, r1
 80134c2:	f7ed fb29 	bl	8000b18 <__aeabi_dcmpgt>
 80134c6:	b9c8      	cbnz	r0, 80134fc <_dtoa_r+0x6e4>
 80134c8:	4642      	mov	r2, r8
 80134ca:	464b      	mov	r3, r9
 80134cc:	4630      	mov	r0, r6
 80134ce:	4639      	mov	r1, r7
 80134d0:	f7ed fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 80134d4:	b110      	cbz	r0, 80134dc <_dtoa_r+0x6c4>
 80134d6:	9b01      	ldr	r3, [sp, #4]
 80134d8:	07db      	lsls	r3, r3, #31
 80134da:	d40f      	bmi.n	80134fc <_dtoa_r+0x6e4>
 80134dc:	4651      	mov	r1, sl
 80134de:	4620      	mov	r0, r4
 80134e0:	f000 fe82 	bl	80141e8 <_Bfree>
 80134e4:	2300      	movs	r3, #0
 80134e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80134e8:	702b      	strb	r3, [r5, #0]
 80134ea:	f10b 0301 	add.w	r3, fp, #1
 80134ee:	6013      	str	r3, [r2, #0]
 80134f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	f43f ace2 	beq.w	8012ebc <_dtoa_r+0xa4>
 80134f8:	601d      	str	r5, [r3, #0]
 80134fa:	e4df      	b.n	8012ebc <_dtoa_r+0xa4>
 80134fc:	465f      	mov	r7, fp
 80134fe:	462b      	mov	r3, r5
 8013500:	461d      	mov	r5, r3
 8013502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013506:	2a39      	cmp	r2, #57	; 0x39
 8013508:	d106      	bne.n	8013518 <_dtoa_r+0x700>
 801350a:	9a00      	ldr	r2, [sp, #0]
 801350c:	429a      	cmp	r2, r3
 801350e:	d1f7      	bne.n	8013500 <_dtoa_r+0x6e8>
 8013510:	9900      	ldr	r1, [sp, #0]
 8013512:	2230      	movs	r2, #48	; 0x30
 8013514:	3701      	adds	r7, #1
 8013516:	700a      	strb	r2, [r1, #0]
 8013518:	781a      	ldrb	r2, [r3, #0]
 801351a:	3201      	adds	r2, #1
 801351c:	701a      	strb	r2, [r3, #0]
 801351e:	e790      	b.n	8013442 <_dtoa_r+0x62a>
 8013520:	4ba3      	ldr	r3, [pc, #652]	; (80137b0 <_dtoa_r+0x998>)
 8013522:	2200      	movs	r2, #0
 8013524:	f7ed f868 	bl	80005f8 <__aeabi_dmul>
 8013528:	2200      	movs	r2, #0
 801352a:	2300      	movs	r3, #0
 801352c:	4606      	mov	r6, r0
 801352e:	460f      	mov	r7, r1
 8013530:	f7ed faca 	bl	8000ac8 <__aeabi_dcmpeq>
 8013534:	2800      	cmp	r0, #0
 8013536:	d09e      	beq.n	8013476 <_dtoa_r+0x65e>
 8013538:	e7d0      	b.n	80134dc <_dtoa_r+0x6c4>
 801353a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801353c:	2a00      	cmp	r2, #0
 801353e:	f000 80ca 	beq.w	80136d6 <_dtoa_r+0x8be>
 8013542:	9a07      	ldr	r2, [sp, #28]
 8013544:	2a01      	cmp	r2, #1
 8013546:	f300 80ad 	bgt.w	80136a4 <_dtoa_r+0x88c>
 801354a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801354c:	2a00      	cmp	r2, #0
 801354e:	f000 80a5 	beq.w	801369c <_dtoa_r+0x884>
 8013552:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013556:	9e08      	ldr	r6, [sp, #32]
 8013558:	9d05      	ldr	r5, [sp, #20]
 801355a:	9a05      	ldr	r2, [sp, #20]
 801355c:	441a      	add	r2, r3
 801355e:	9205      	str	r2, [sp, #20]
 8013560:	9a06      	ldr	r2, [sp, #24]
 8013562:	2101      	movs	r1, #1
 8013564:	441a      	add	r2, r3
 8013566:	4620      	mov	r0, r4
 8013568:	9206      	str	r2, [sp, #24]
 801356a:	f000 ff3d 	bl	80143e8 <__i2b>
 801356e:	4607      	mov	r7, r0
 8013570:	b165      	cbz	r5, 801358c <_dtoa_r+0x774>
 8013572:	9b06      	ldr	r3, [sp, #24]
 8013574:	2b00      	cmp	r3, #0
 8013576:	dd09      	ble.n	801358c <_dtoa_r+0x774>
 8013578:	42ab      	cmp	r3, r5
 801357a:	9a05      	ldr	r2, [sp, #20]
 801357c:	bfa8      	it	ge
 801357e:	462b      	movge	r3, r5
 8013580:	1ad2      	subs	r2, r2, r3
 8013582:	9205      	str	r2, [sp, #20]
 8013584:	9a06      	ldr	r2, [sp, #24]
 8013586:	1aed      	subs	r5, r5, r3
 8013588:	1ad3      	subs	r3, r2, r3
 801358a:	9306      	str	r3, [sp, #24]
 801358c:	9b08      	ldr	r3, [sp, #32]
 801358e:	b1f3      	cbz	r3, 80135ce <_dtoa_r+0x7b6>
 8013590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013592:	2b00      	cmp	r3, #0
 8013594:	f000 80a3 	beq.w	80136de <_dtoa_r+0x8c6>
 8013598:	2e00      	cmp	r6, #0
 801359a:	dd10      	ble.n	80135be <_dtoa_r+0x7a6>
 801359c:	4639      	mov	r1, r7
 801359e:	4632      	mov	r2, r6
 80135a0:	4620      	mov	r0, r4
 80135a2:	f000 ffe1 	bl	8014568 <__pow5mult>
 80135a6:	4652      	mov	r2, sl
 80135a8:	4601      	mov	r1, r0
 80135aa:	4607      	mov	r7, r0
 80135ac:	4620      	mov	r0, r4
 80135ae:	f000 ff31 	bl	8014414 <__multiply>
 80135b2:	4651      	mov	r1, sl
 80135b4:	4680      	mov	r8, r0
 80135b6:	4620      	mov	r0, r4
 80135b8:	f000 fe16 	bl	80141e8 <_Bfree>
 80135bc:	46c2      	mov	sl, r8
 80135be:	9b08      	ldr	r3, [sp, #32]
 80135c0:	1b9a      	subs	r2, r3, r6
 80135c2:	d004      	beq.n	80135ce <_dtoa_r+0x7b6>
 80135c4:	4651      	mov	r1, sl
 80135c6:	4620      	mov	r0, r4
 80135c8:	f000 ffce 	bl	8014568 <__pow5mult>
 80135cc:	4682      	mov	sl, r0
 80135ce:	2101      	movs	r1, #1
 80135d0:	4620      	mov	r0, r4
 80135d2:	f000 ff09 	bl	80143e8 <__i2b>
 80135d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80135d8:	2b00      	cmp	r3, #0
 80135da:	4606      	mov	r6, r0
 80135dc:	f340 8081 	ble.w	80136e2 <_dtoa_r+0x8ca>
 80135e0:	461a      	mov	r2, r3
 80135e2:	4601      	mov	r1, r0
 80135e4:	4620      	mov	r0, r4
 80135e6:	f000 ffbf 	bl	8014568 <__pow5mult>
 80135ea:	9b07      	ldr	r3, [sp, #28]
 80135ec:	2b01      	cmp	r3, #1
 80135ee:	4606      	mov	r6, r0
 80135f0:	dd7a      	ble.n	80136e8 <_dtoa_r+0x8d0>
 80135f2:	f04f 0800 	mov.w	r8, #0
 80135f6:	6933      	ldr	r3, [r6, #16]
 80135f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80135fc:	6918      	ldr	r0, [r3, #16]
 80135fe:	f000 fea5 	bl	801434c <__hi0bits>
 8013602:	f1c0 0020 	rsb	r0, r0, #32
 8013606:	9b06      	ldr	r3, [sp, #24]
 8013608:	4418      	add	r0, r3
 801360a:	f010 001f 	ands.w	r0, r0, #31
 801360e:	f000 8094 	beq.w	801373a <_dtoa_r+0x922>
 8013612:	f1c0 0320 	rsb	r3, r0, #32
 8013616:	2b04      	cmp	r3, #4
 8013618:	f340 8085 	ble.w	8013726 <_dtoa_r+0x90e>
 801361c:	9b05      	ldr	r3, [sp, #20]
 801361e:	f1c0 001c 	rsb	r0, r0, #28
 8013622:	4403      	add	r3, r0
 8013624:	9305      	str	r3, [sp, #20]
 8013626:	9b06      	ldr	r3, [sp, #24]
 8013628:	4403      	add	r3, r0
 801362a:	4405      	add	r5, r0
 801362c:	9306      	str	r3, [sp, #24]
 801362e:	9b05      	ldr	r3, [sp, #20]
 8013630:	2b00      	cmp	r3, #0
 8013632:	dd05      	ble.n	8013640 <_dtoa_r+0x828>
 8013634:	4651      	mov	r1, sl
 8013636:	461a      	mov	r2, r3
 8013638:	4620      	mov	r0, r4
 801363a:	f000 ffef 	bl	801461c <__lshift>
 801363e:	4682      	mov	sl, r0
 8013640:	9b06      	ldr	r3, [sp, #24]
 8013642:	2b00      	cmp	r3, #0
 8013644:	dd05      	ble.n	8013652 <_dtoa_r+0x83a>
 8013646:	4631      	mov	r1, r6
 8013648:	461a      	mov	r2, r3
 801364a:	4620      	mov	r0, r4
 801364c:	f000 ffe6 	bl	801461c <__lshift>
 8013650:	4606      	mov	r6, r0
 8013652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013654:	2b00      	cmp	r3, #0
 8013656:	d072      	beq.n	801373e <_dtoa_r+0x926>
 8013658:	4631      	mov	r1, r6
 801365a:	4650      	mov	r0, sl
 801365c:	f001 f84a 	bl	80146f4 <__mcmp>
 8013660:	2800      	cmp	r0, #0
 8013662:	da6c      	bge.n	801373e <_dtoa_r+0x926>
 8013664:	2300      	movs	r3, #0
 8013666:	4651      	mov	r1, sl
 8013668:	220a      	movs	r2, #10
 801366a:	4620      	mov	r0, r4
 801366c:	f000 fdde 	bl	801422c <__multadd>
 8013670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013672:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013676:	4682      	mov	sl, r0
 8013678:	2b00      	cmp	r3, #0
 801367a:	f000 81b0 	beq.w	80139de <_dtoa_r+0xbc6>
 801367e:	2300      	movs	r3, #0
 8013680:	4639      	mov	r1, r7
 8013682:	220a      	movs	r2, #10
 8013684:	4620      	mov	r0, r4
 8013686:	f000 fdd1 	bl	801422c <__multadd>
 801368a:	9b01      	ldr	r3, [sp, #4]
 801368c:	2b00      	cmp	r3, #0
 801368e:	4607      	mov	r7, r0
 8013690:	f300 8096 	bgt.w	80137c0 <_dtoa_r+0x9a8>
 8013694:	9b07      	ldr	r3, [sp, #28]
 8013696:	2b02      	cmp	r3, #2
 8013698:	dc59      	bgt.n	801374e <_dtoa_r+0x936>
 801369a:	e091      	b.n	80137c0 <_dtoa_r+0x9a8>
 801369c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801369e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80136a2:	e758      	b.n	8013556 <_dtoa_r+0x73e>
 80136a4:	9b04      	ldr	r3, [sp, #16]
 80136a6:	1e5e      	subs	r6, r3, #1
 80136a8:	9b08      	ldr	r3, [sp, #32]
 80136aa:	42b3      	cmp	r3, r6
 80136ac:	bfbf      	itttt	lt
 80136ae:	9b08      	ldrlt	r3, [sp, #32]
 80136b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80136b2:	9608      	strlt	r6, [sp, #32]
 80136b4:	1af3      	sublt	r3, r6, r3
 80136b6:	bfb4      	ite	lt
 80136b8:	18d2      	addlt	r2, r2, r3
 80136ba:	1b9e      	subge	r6, r3, r6
 80136bc:	9b04      	ldr	r3, [sp, #16]
 80136be:	bfbc      	itt	lt
 80136c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80136c2:	2600      	movlt	r6, #0
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	bfb7      	itett	lt
 80136c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80136cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80136d0:	1a9d      	sublt	r5, r3, r2
 80136d2:	2300      	movlt	r3, #0
 80136d4:	e741      	b.n	801355a <_dtoa_r+0x742>
 80136d6:	9e08      	ldr	r6, [sp, #32]
 80136d8:	9d05      	ldr	r5, [sp, #20]
 80136da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80136dc:	e748      	b.n	8013570 <_dtoa_r+0x758>
 80136de:	9a08      	ldr	r2, [sp, #32]
 80136e0:	e770      	b.n	80135c4 <_dtoa_r+0x7ac>
 80136e2:	9b07      	ldr	r3, [sp, #28]
 80136e4:	2b01      	cmp	r3, #1
 80136e6:	dc19      	bgt.n	801371c <_dtoa_r+0x904>
 80136e8:	9b02      	ldr	r3, [sp, #8]
 80136ea:	b9bb      	cbnz	r3, 801371c <_dtoa_r+0x904>
 80136ec:	9b03      	ldr	r3, [sp, #12]
 80136ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80136f2:	b99b      	cbnz	r3, 801371c <_dtoa_r+0x904>
 80136f4:	9b03      	ldr	r3, [sp, #12]
 80136f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80136fa:	0d1b      	lsrs	r3, r3, #20
 80136fc:	051b      	lsls	r3, r3, #20
 80136fe:	b183      	cbz	r3, 8013722 <_dtoa_r+0x90a>
 8013700:	9b05      	ldr	r3, [sp, #20]
 8013702:	3301      	adds	r3, #1
 8013704:	9305      	str	r3, [sp, #20]
 8013706:	9b06      	ldr	r3, [sp, #24]
 8013708:	3301      	adds	r3, #1
 801370a:	9306      	str	r3, [sp, #24]
 801370c:	f04f 0801 	mov.w	r8, #1
 8013710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013712:	2b00      	cmp	r3, #0
 8013714:	f47f af6f 	bne.w	80135f6 <_dtoa_r+0x7de>
 8013718:	2001      	movs	r0, #1
 801371a:	e774      	b.n	8013606 <_dtoa_r+0x7ee>
 801371c:	f04f 0800 	mov.w	r8, #0
 8013720:	e7f6      	b.n	8013710 <_dtoa_r+0x8f8>
 8013722:	4698      	mov	r8, r3
 8013724:	e7f4      	b.n	8013710 <_dtoa_r+0x8f8>
 8013726:	d082      	beq.n	801362e <_dtoa_r+0x816>
 8013728:	9a05      	ldr	r2, [sp, #20]
 801372a:	331c      	adds	r3, #28
 801372c:	441a      	add	r2, r3
 801372e:	9205      	str	r2, [sp, #20]
 8013730:	9a06      	ldr	r2, [sp, #24]
 8013732:	441a      	add	r2, r3
 8013734:	441d      	add	r5, r3
 8013736:	9206      	str	r2, [sp, #24]
 8013738:	e779      	b.n	801362e <_dtoa_r+0x816>
 801373a:	4603      	mov	r3, r0
 801373c:	e7f4      	b.n	8013728 <_dtoa_r+0x910>
 801373e:	9b04      	ldr	r3, [sp, #16]
 8013740:	2b00      	cmp	r3, #0
 8013742:	dc37      	bgt.n	80137b4 <_dtoa_r+0x99c>
 8013744:	9b07      	ldr	r3, [sp, #28]
 8013746:	2b02      	cmp	r3, #2
 8013748:	dd34      	ble.n	80137b4 <_dtoa_r+0x99c>
 801374a:	9b04      	ldr	r3, [sp, #16]
 801374c:	9301      	str	r3, [sp, #4]
 801374e:	9b01      	ldr	r3, [sp, #4]
 8013750:	b963      	cbnz	r3, 801376c <_dtoa_r+0x954>
 8013752:	4631      	mov	r1, r6
 8013754:	2205      	movs	r2, #5
 8013756:	4620      	mov	r0, r4
 8013758:	f000 fd68 	bl	801422c <__multadd>
 801375c:	4601      	mov	r1, r0
 801375e:	4606      	mov	r6, r0
 8013760:	4650      	mov	r0, sl
 8013762:	f000 ffc7 	bl	80146f4 <__mcmp>
 8013766:	2800      	cmp	r0, #0
 8013768:	f73f adbb 	bgt.w	80132e2 <_dtoa_r+0x4ca>
 801376c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801376e:	9d00      	ldr	r5, [sp, #0]
 8013770:	ea6f 0b03 	mvn.w	fp, r3
 8013774:	f04f 0800 	mov.w	r8, #0
 8013778:	4631      	mov	r1, r6
 801377a:	4620      	mov	r0, r4
 801377c:	f000 fd34 	bl	80141e8 <_Bfree>
 8013780:	2f00      	cmp	r7, #0
 8013782:	f43f aeab 	beq.w	80134dc <_dtoa_r+0x6c4>
 8013786:	f1b8 0f00 	cmp.w	r8, #0
 801378a:	d005      	beq.n	8013798 <_dtoa_r+0x980>
 801378c:	45b8      	cmp	r8, r7
 801378e:	d003      	beq.n	8013798 <_dtoa_r+0x980>
 8013790:	4641      	mov	r1, r8
 8013792:	4620      	mov	r0, r4
 8013794:	f000 fd28 	bl	80141e8 <_Bfree>
 8013798:	4639      	mov	r1, r7
 801379a:	4620      	mov	r0, r4
 801379c:	f000 fd24 	bl	80141e8 <_Bfree>
 80137a0:	e69c      	b.n	80134dc <_dtoa_r+0x6c4>
 80137a2:	2600      	movs	r6, #0
 80137a4:	4637      	mov	r7, r6
 80137a6:	e7e1      	b.n	801376c <_dtoa_r+0x954>
 80137a8:	46bb      	mov	fp, r7
 80137aa:	4637      	mov	r7, r6
 80137ac:	e599      	b.n	80132e2 <_dtoa_r+0x4ca>
 80137ae:	bf00      	nop
 80137b0:	40240000 	.word	0x40240000
 80137b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	f000 80c8 	beq.w	801394c <_dtoa_r+0xb34>
 80137bc:	9b04      	ldr	r3, [sp, #16]
 80137be:	9301      	str	r3, [sp, #4]
 80137c0:	2d00      	cmp	r5, #0
 80137c2:	dd05      	ble.n	80137d0 <_dtoa_r+0x9b8>
 80137c4:	4639      	mov	r1, r7
 80137c6:	462a      	mov	r2, r5
 80137c8:	4620      	mov	r0, r4
 80137ca:	f000 ff27 	bl	801461c <__lshift>
 80137ce:	4607      	mov	r7, r0
 80137d0:	f1b8 0f00 	cmp.w	r8, #0
 80137d4:	d05b      	beq.n	801388e <_dtoa_r+0xa76>
 80137d6:	6879      	ldr	r1, [r7, #4]
 80137d8:	4620      	mov	r0, r4
 80137da:	f000 fcc5 	bl	8014168 <_Balloc>
 80137de:	4605      	mov	r5, r0
 80137e0:	b928      	cbnz	r0, 80137ee <_dtoa_r+0x9d6>
 80137e2:	4b83      	ldr	r3, [pc, #524]	; (80139f0 <_dtoa_r+0xbd8>)
 80137e4:	4602      	mov	r2, r0
 80137e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80137ea:	f7ff bb2e 	b.w	8012e4a <_dtoa_r+0x32>
 80137ee:	693a      	ldr	r2, [r7, #16]
 80137f0:	3202      	adds	r2, #2
 80137f2:	0092      	lsls	r2, r2, #2
 80137f4:	f107 010c 	add.w	r1, r7, #12
 80137f8:	300c      	adds	r0, #12
 80137fa:	f7ff fa4a 	bl	8012c92 <memcpy>
 80137fe:	2201      	movs	r2, #1
 8013800:	4629      	mov	r1, r5
 8013802:	4620      	mov	r0, r4
 8013804:	f000 ff0a 	bl	801461c <__lshift>
 8013808:	9b00      	ldr	r3, [sp, #0]
 801380a:	3301      	adds	r3, #1
 801380c:	9304      	str	r3, [sp, #16]
 801380e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013812:	4413      	add	r3, r2
 8013814:	9308      	str	r3, [sp, #32]
 8013816:	9b02      	ldr	r3, [sp, #8]
 8013818:	f003 0301 	and.w	r3, r3, #1
 801381c:	46b8      	mov	r8, r7
 801381e:	9306      	str	r3, [sp, #24]
 8013820:	4607      	mov	r7, r0
 8013822:	9b04      	ldr	r3, [sp, #16]
 8013824:	4631      	mov	r1, r6
 8013826:	3b01      	subs	r3, #1
 8013828:	4650      	mov	r0, sl
 801382a:	9301      	str	r3, [sp, #4]
 801382c:	f7ff fa6c 	bl	8012d08 <quorem>
 8013830:	4641      	mov	r1, r8
 8013832:	9002      	str	r0, [sp, #8]
 8013834:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013838:	4650      	mov	r0, sl
 801383a:	f000 ff5b 	bl	80146f4 <__mcmp>
 801383e:	463a      	mov	r2, r7
 8013840:	9005      	str	r0, [sp, #20]
 8013842:	4631      	mov	r1, r6
 8013844:	4620      	mov	r0, r4
 8013846:	f000 ff71 	bl	801472c <__mdiff>
 801384a:	68c2      	ldr	r2, [r0, #12]
 801384c:	4605      	mov	r5, r0
 801384e:	bb02      	cbnz	r2, 8013892 <_dtoa_r+0xa7a>
 8013850:	4601      	mov	r1, r0
 8013852:	4650      	mov	r0, sl
 8013854:	f000 ff4e 	bl	80146f4 <__mcmp>
 8013858:	4602      	mov	r2, r0
 801385a:	4629      	mov	r1, r5
 801385c:	4620      	mov	r0, r4
 801385e:	9209      	str	r2, [sp, #36]	; 0x24
 8013860:	f000 fcc2 	bl	80141e8 <_Bfree>
 8013864:	9b07      	ldr	r3, [sp, #28]
 8013866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013868:	9d04      	ldr	r5, [sp, #16]
 801386a:	ea43 0102 	orr.w	r1, r3, r2
 801386e:	9b06      	ldr	r3, [sp, #24]
 8013870:	4319      	orrs	r1, r3
 8013872:	d110      	bne.n	8013896 <_dtoa_r+0xa7e>
 8013874:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013878:	d029      	beq.n	80138ce <_dtoa_r+0xab6>
 801387a:	9b05      	ldr	r3, [sp, #20]
 801387c:	2b00      	cmp	r3, #0
 801387e:	dd02      	ble.n	8013886 <_dtoa_r+0xa6e>
 8013880:	9b02      	ldr	r3, [sp, #8]
 8013882:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013886:	9b01      	ldr	r3, [sp, #4]
 8013888:	f883 9000 	strb.w	r9, [r3]
 801388c:	e774      	b.n	8013778 <_dtoa_r+0x960>
 801388e:	4638      	mov	r0, r7
 8013890:	e7ba      	b.n	8013808 <_dtoa_r+0x9f0>
 8013892:	2201      	movs	r2, #1
 8013894:	e7e1      	b.n	801385a <_dtoa_r+0xa42>
 8013896:	9b05      	ldr	r3, [sp, #20]
 8013898:	2b00      	cmp	r3, #0
 801389a:	db04      	blt.n	80138a6 <_dtoa_r+0xa8e>
 801389c:	9907      	ldr	r1, [sp, #28]
 801389e:	430b      	orrs	r3, r1
 80138a0:	9906      	ldr	r1, [sp, #24]
 80138a2:	430b      	orrs	r3, r1
 80138a4:	d120      	bne.n	80138e8 <_dtoa_r+0xad0>
 80138a6:	2a00      	cmp	r2, #0
 80138a8:	dded      	ble.n	8013886 <_dtoa_r+0xa6e>
 80138aa:	4651      	mov	r1, sl
 80138ac:	2201      	movs	r2, #1
 80138ae:	4620      	mov	r0, r4
 80138b0:	f000 feb4 	bl	801461c <__lshift>
 80138b4:	4631      	mov	r1, r6
 80138b6:	4682      	mov	sl, r0
 80138b8:	f000 ff1c 	bl	80146f4 <__mcmp>
 80138bc:	2800      	cmp	r0, #0
 80138be:	dc03      	bgt.n	80138c8 <_dtoa_r+0xab0>
 80138c0:	d1e1      	bne.n	8013886 <_dtoa_r+0xa6e>
 80138c2:	f019 0f01 	tst.w	r9, #1
 80138c6:	d0de      	beq.n	8013886 <_dtoa_r+0xa6e>
 80138c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80138cc:	d1d8      	bne.n	8013880 <_dtoa_r+0xa68>
 80138ce:	9a01      	ldr	r2, [sp, #4]
 80138d0:	2339      	movs	r3, #57	; 0x39
 80138d2:	7013      	strb	r3, [r2, #0]
 80138d4:	462b      	mov	r3, r5
 80138d6:	461d      	mov	r5, r3
 80138d8:	3b01      	subs	r3, #1
 80138da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80138de:	2a39      	cmp	r2, #57	; 0x39
 80138e0:	d06c      	beq.n	80139bc <_dtoa_r+0xba4>
 80138e2:	3201      	adds	r2, #1
 80138e4:	701a      	strb	r2, [r3, #0]
 80138e6:	e747      	b.n	8013778 <_dtoa_r+0x960>
 80138e8:	2a00      	cmp	r2, #0
 80138ea:	dd07      	ble.n	80138fc <_dtoa_r+0xae4>
 80138ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80138f0:	d0ed      	beq.n	80138ce <_dtoa_r+0xab6>
 80138f2:	9a01      	ldr	r2, [sp, #4]
 80138f4:	f109 0301 	add.w	r3, r9, #1
 80138f8:	7013      	strb	r3, [r2, #0]
 80138fa:	e73d      	b.n	8013778 <_dtoa_r+0x960>
 80138fc:	9b04      	ldr	r3, [sp, #16]
 80138fe:	9a08      	ldr	r2, [sp, #32]
 8013900:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013904:	4293      	cmp	r3, r2
 8013906:	d043      	beq.n	8013990 <_dtoa_r+0xb78>
 8013908:	4651      	mov	r1, sl
 801390a:	2300      	movs	r3, #0
 801390c:	220a      	movs	r2, #10
 801390e:	4620      	mov	r0, r4
 8013910:	f000 fc8c 	bl	801422c <__multadd>
 8013914:	45b8      	cmp	r8, r7
 8013916:	4682      	mov	sl, r0
 8013918:	f04f 0300 	mov.w	r3, #0
 801391c:	f04f 020a 	mov.w	r2, #10
 8013920:	4641      	mov	r1, r8
 8013922:	4620      	mov	r0, r4
 8013924:	d107      	bne.n	8013936 <_dtoa_r+0xb1e>
 8013926:	f000 fc81 	bl	801422c <__multadd>
 801392a:	4680      	mov	r8, r0
 801392c:	4607      	mov	r7, r0
 801392e:	9b04      	ldr	r3, [sp, #16]
 8013930:	3301      	adds	r3, #1
 8013932:	9304      	str	r3, [sp, #16]
 8013934:	e775      	b.n	8013822 <_dtoa_r+0xa0a>
 8013936:	f000 fc79 	bl	801422c <__multadd>
 801393a:	4639      	mov	r1, r7
 801393c:	4680      	mov	r8, r0
 801393e:	2300      	movs	r3, #0
 8013940:	220a      	movs	r2, #10
 8013942:	4620      	mov	r0, r4
 8013944:	f000 fc72 	bl	801422c <__multadd>
 8013948:	4607      	mov	r7, r0
 801394a:	e7f0      	b.n	801392e <_dtoa_r+0xb16>
 801394c:	9b04      	ldr	r3, [sp, #16]
 801394e:	9301      	str	r3, [sp, #4]
 8013950:	9d00      	ldr	r5, [sp, #0]
 8013952:	4631      	mov	r1, r6
 8013954:	4650      	mov	r0, sl
 8013956:	f7ff f9d7 	bl	8012d08 <quorem>
 801395a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801395e:	9b00      	ldr	r3, [sp, #0]
 8013960:	f805 9b01 	strb.w	r9, [r5], #1
 8013964:	1aea      	subs	r2, r5, r3
 8013966:	9b01      	ldr	r3, [sp, #4]
 8013968:	4293      	cmp	r3, r2
 801396a:	dd07      	ble.n	801397c <_dtoa_r+0xb64>
 801396c:	4651      	mov	r1, sl
 801396e:	2300      	movs	r3, #0
 8013970:	220a      	movs	r2, #10
 8013972:	4620      	mov	r0, r4
 8013974:	f000 fc5a 	bl	801422c <__multadd>
 8013978:	4682      	mov	sl, r0
 801397a:	e7ea      	b.n	8013952 <_dtoa_r+0xb3a>
 801397c:	9b01      	ldr	r3, [sp, #4]
 801397e:	2b00      	cmp	r3, #0
 8013980:	bfc8      	it	gt
 8013982:	461d      	movgt	r5, r3
 8013984:	9b00      	ldr	r3, [sp, #0]
 8013986:	bfd8      	it	le
 8013988:	2501      	movle	r5, #1
 801398a:	441d      	add	r5, r3
 801398c:	f04f 0800 	mov.w	r8, #0
 8013990:	4651      	mov	r1, sl
 8013992:	2201      	movs	r2, #1
 8013994:	4620      	mov	r0, r4
 8013996:	f000 fe41 	bl	801461c <__lshift>
 801399a:	4631      	mov	r1, r6
 801399c:	4682      	mov	sl, r0
 801399e:	f000 fea9 	bl	80146f4 <__mcmp>
 80139a2:	2800      	cmp	r0, #0
 80139a4:	dc96      	bgt.n	80138d4 <_dtoa_r+0xabc>
 80139a6:	d102      	bne.n	80139ae <_dtoa_r+0xb96>
 80139a8:	f019 0f01 	tst.w	r9, #1
 80139ac:	d192      	bne.n	80138d4 <_dtoa_r+0xabc>
 80139ae:	462b      	mov	r3, r5
 80139b0:	461d      	mov	r5, r3
 80139b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80139b6:	2a30      	cmp	r2, #48	; 0x30
 80139b8:	d0fa      	beq.n	80139b0 <_dtoa_r+0xb98>
 80139ba:	e6dd      	b.n	8013778 <_dtoa_r+0x960>
 80139bc:	9a00      	ldr	r2, [sp, #0]
 80139be:	429a      	cmp	r2, r3
 80139c0:	d189      	bne.n	80138d6 <_dtoa_r+0xabe>
 80139c2:	f10b 0b01 	add.w	fp, fp, #1
 80139c6:	2331      	movs	r3, #49	; 0x31
 80139c8:	e796      	b.n	80138f8 <_dtoa_r+0xae0>
 80139ca:	4b0a      	ldr	r3, [pc, #40]	; (80139f4 <_dtoa_r+0xbdc>)
 80139cc:	f7ff ba99 	b.w	8012f02 <_dtoa_r+0xea>
 80139d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	f47f aa6d 	bne.w	8012eb2 <_dtoa_r+0x9a>
 80139d8:	4b07      	ldr	r3, [pc, #28]	; (80139f8 <_dtoa_r+0xbe0>)
 80139da:	f7ff ba92 	b.w	8012f02 <_dtoa_r+0xea>
 80139de:	9b01      	ldr	r3, [sp, #4]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	dcb5      	bgt.n	8013950 <_dtoa_r+0xb38>
 80139e4:	9b07      	ldr	r3, [sp, #28]
 80139e6:	2b02      	cmp	r3, #2
 80139e8:	f73f aeb1 	bgt.w	801374e <_dtoa_r+0x936>
 80139ec:	e7b0      	b.n	8013950 <_dtoa_r+0xb38>
 80139ee:	bf00      	nop
 80139f0:	080189bc 	.word	0x080189bc
 80139f4:	08018879 	.word	0x08018879
 80139f8:	08018957 	.word	0x08018957

080139fc <_free_r>:
 80139fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80139fe:	2900      	cmp	r1, #0
 8013a00:	d044      	beq.n	8013a8c <_free_r+0x90>
 8013a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a06:	9001      	str	r0, [sp, #4]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	f1a1 0404 	sub.w	r4, r1, #4
 8013a0e:	bfb8      	it	lt
 8013a10:	18e4      	addlt	r4, r4, r3
 8013a12:	f7fd f93f 	bl	8010c94 <__malloc_lock>
 8013a16:	4a1e      	ldr	r2, [pc, #120]	; (8013a90 <_free_r+0x94>)
 8013a18:	9801      	ldr	r0, [sp, #4]
 8013a1a:	6813      	ldr	r3, [r2, #0]
 8013a1c:	b933      	cbnz	r3, 8013a2c <_free_r+0x30>
 8013a1e:	6063      	str	r3, [r4, #4]
 8013a20:	6014      	str	r4, [r2, #0]
 8013a22:	b003      	add	sp, #12
 8013a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a28:	f7fd b93a 	b.w	8010ca0 <__malloc_unlock>
 8013a2c:	42a3      	cmp	r3, r4
 8013a2e:	d908      	bls.n	8013a42 <_free_r+0x46>
 8013a30:	6825      	ldr	r5, [r4, #0]
 8013a32:	1961      	adds	r1, r4, r5
 8013a34:	428b      	cmp	r3, r1
 8013a36:	bf01      	itttt	eq
 8013a38:	6819      	ldreq	r1, [r3, #0]
 8013a3a:	685b      	ldreq	r3, [r3, #4]
 8013a3c:	1949      	addeq	r1, r1, r5
 8013a3e:	6021      	streq	r1, [r4, #0]
 8013a40:	e7ed      	b.n	8013a1e <_free_r+0x22>
 8013a42:	461a      	mov	r2, r3
 8013a44:	685b      	ldr	r3, [r3, #4]
 8013a46:	b10b      	cbz	r3, 8013a4c <_free_r+0x50>
 8013a48:	42a3      	cmp	r3, r4
 8013a4a:	d9fa      	bls.n	8013a42 <_free_r+0x46>
 8013a4c:	6811      	ldr	r1, [r2, #0]
 8013a4e:	1855      	adds	r5, r2, r1
 8013a50:	42a5      	cmp	r5, r4
 8013a52:	d10b      	bne.n	8013a6c <_free_r+0x70>
 8013a54:	6824      	ldr	r4, [r4, #0]
 8013a56:	4421      	add	r1, r4
 8013a58:	1854      	adds	r4, r2, r1
 8013a5a:	42a3      	cmp	r3, r4
 8013a5c:	6011      	str	r1, [r2, #0]
 8013a5e:	d1e0      	bne.n	8013a22 <_free_r+0x26>
 8013a60:	681c      	ldr	r4, [r3, #0]
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	6053      	str	r3, [r2, #4]
 8013a66:	440c      	add	r4, r1
 8013a68:	6014      	str	r4, [r2, #0]
 8013a6a:	e7da      	b.n	8013a22 <_free_r+0x26>
 8013a6c:	d902      	bls.n	8013a74 <_free_r+0x78>
 8013a6e:	230c      	movs	r3, #12
 8013a70:	6003      	str	r3, [r0, #0]
 8013a72:	e7d6      	b.n	8013a22 <_free_r+0x26>
 8013a74:	6825      	ldr	r5, [r4, #0]
 8013a76:	1961      	adds	r1, r4, r5
 8013a78:	428b      	cmp	r3, r1
 8013a7a:	bf04      	itt	eq
 8013a7c:	6819      	ldreq	r1, [r3, #0]
 8013a7e:	685b      	ldreq	r3, [r3, #4]
 8013a80:	6063      	str	r3, [r4, #4]
 8013a82:	bf04      	itt	eq
 8013a84:	1949      	addeq	r1, r1, r5
 8013a86:	6021      	streq	r1, [r4, #0]
 8013a88:	6054      	str	r4, [r2, #4]
 8013a8a:	e7ca      	b.n	8013a22 <_free_r+0x26>
 8013a8c:	b003      	add	sp, #12
 8013a8e:	bd30      	pop	{r4, r5, pc}
 8013a90:	2000148c 	.word	0x2000148c

08013a94 <rshift>:
 8013a94:	6903      	ldr	r3, [r0, #16]
 8013a96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013a9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013aa2:	f100 0414 	add.w	r4, r0, #20
 8013aa6:	dd45      	ble.n	8013b34 <rshift+0xa0>
 8013aa8:	f011 011f 	ands.w	r1, r1, #31
 8013aac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013ab0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013ab4:	d10c      	bne.n	8013ad0 <rshift+0x3c>
 8013ab6:	f100 0710 	add.w	r7, r0, #16
 8013aba:	4629      	mov	r1, r5
 8013abc:	42b1      	cmp	r1, r6
 8013abe:	d334      	bcc.n	8013b2a <rshift+0x96>
 8013ac0:	1a9b      	subs	r3, r3, r2
 8013ac2:	009b      	lsls	r3, r3, #2
 8013ac4:	1eea      	subs	r2, r5, #3
 8013ac6:	4296      	cmp	r6, r2
 8013ac8:	bf38      	it	cc
 8013aca:	2300      	movcc	r3, #0
 8013acc:	4423      	add	r3, r4
 8013ace:	e015      	b.n	8013afc <rshift+0x68>
 8013ad0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8013ad4:	f1c1 0820 	rsb	r8, r1, #32
 8013ad8:	40cf      	lsrs	r7, r1
 8013ada:	f105 0e04 	add.w	lr, r5, #4
 8013ade:	46a1      	mov	r9, r4
 8013ae0:	4576      	cmp	r6, lr
 8013ae2:	46f4      	mov	ip, lr
 8013ae4:	d815      	bhi.n	8013b12 <rshift+0x7e>
 8013ae6:	1a9a      	subs	r2, r3, r2
 8013ae8:	0092      	lsls	r2, r2, #2
 8013aea:	3a04      	subs	r2, #4
 8013aec:	3501      	adds	r5, #1
 8013aee:	42ae      	cmp	r6, r5
 8013af0:	bf38      	it	cc
 8013af2:	2200      	movcc	r2, #0
 8013af4:	18a3      	adds	r3, r4, r2
 8013af6:	50a7      	str	r7, [r4, r2]
 8013af8:	b107      	cbz	r7, 8013afc <rshift+0x68>
 8013afa:	3304      	adds	r3, #4
 8013afc:	1b1a      	subs	r2, r3, r4
 8013afe:	42a3      	cmp	r3, r4
 8013b00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013b04:	bf08      	it	eq
 8013b06:	2300      	moveq	r3, #0
 8013b08:	6102      	str	r2, [r0, #16]
 8013b0a:	bf08      	it	eq
 8013b0c:	6143      	streq	r3, [r0, #20]
 8013b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b12:	f8dc c000 	ldr.w	ip, [ip]
 8013b16:	fa0c fc08 	lsl.w	ip, ip, r8
 8013b1a:	ea4c 0707 	orr.w	r7, ip, r7
 8013b1e:	f849 7b04 	str.w	r7, [r9], #4
 8013b22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013b26:	40cf      	lsrs	r7, r1
 8013b28:	e7da      	b.n	8013ae0 <rshift+0x4c>
 8013b2a:	f851 cb04 	ldr.w	ip, [r1], #4
 8013b2e:	f847 cf04 	str.w	ip, [r7, #4]!
 8013b32:	e7c3      	b.n	8013abc <rshift+0x28>
 8013b34:	4623      	mov	r3, r4
 8013b36:	e7e1      	b.n	8013afc <rshift+0x68>

08013b38 <__hexdig_fun>:
 8013b38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013b3c:	2b09      	cmp	r3, #9
 8013b3e:	d802      	bhi.n	8013b46 <__hexdig_fun+0xe>
 8013b40:	3820      	subs	r0, #32
 8013b42:	b2c0      	uxtb	r0, r0
 8013b44:	4770      	bx	lr
 8013b46:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013b4a:	2b05      	cmp	r3, #5
 8013b4c:	d801      	bhi.n	8013b52 <__hexdig_fun+0x1a>
 8013b4e:	3847      	subs	r0, #71	; 0x47
 8013b50:	e7f7      	b.n	8013b42 <__hexdig_fun+0xa>
 8013b52:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013b56:	2b05      	cmp	r3, #5
 8013b58:	d801      	bhi.n	8013b5e <__hexdig_fun+0x26>
 8013b5a:	3827      	subs	r0, #39	; 0x27
 8013b5c:	e7f1      	b.n	8013b42 <__hexdig_fun+0xa>
 8013b5e:	2000      	movs	r0, #0
 8013b60:	4770      	bx	lr
	...

08013b64 <__gethex>:
 8013b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b68:	4617      	mov	r7, r2
 8013b6a:	680a      	ldr	r2, [r1, #0]
 8013b6c:	b085      	sub	sp, #20
 8013b6e:	f102 0b02 	add.w	fp, r2, #2
 8013b72:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013b76:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013b7a:	4681      	mov	r9, r0
 8013b7c:	468a      	mov	sl, r1
 8013b7e:	9302      	str	r3, [sp, #8]
 8013b80:	32fe      	adds	r2, #254	; 0xfe
 8013b82:	eb02 030b 	add.w	r3, r2, fp
 8013b86:	46d8      	mov	r8, fp
 8013b88:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013b8c:	9301      	str	r3, [sp, #4]
 8013b8e:	2830      	cmp	r0, #48	; 0x30
 8013b90:	d0f7      	beq.n	8013b82 <__gethex+0x1e>
 8013b92:	f7ff ffd1 	bl	8013b38 <__hexdig_fun>
 8013b96:	4604      	mov	r4, r0
 8013b98:	2800      	cmp	r0, #0
 8013b9a:	d138      	bne.n	8013c0e <__gethex+0xaa>
 8013b9c:	49a7      	ldr	r1, [pc, #668]	; (8013e3c <__gethex+0x2d8>)
 8013b9e:	2201      	movs	r2, #1
 8013ba0:	4640      	mov	r0, r8
 8013ba2:	f7fe ff62 	bl	8012a6a <strncmp>
 8013ba6:	4606      	mov	r6, r0
 8013ba8:	2800      	cmp	r0, #0
 8013baa:	d169      	bne.n	8013c80 <__gethex+0x11c>
 8013bac:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013bb0:	465d      	mov	r5, fp
 8013bb2:	f7ff ffc1 	bl	8013b38 <__hexdig_fun>
 8013bb6:	2800      	cmp	r0, #0
 8013bb8:	d064      	beq.n	8013c84 <__gethex+0x120>
 8013bba:	465a      	mov	r2, fp
 8013bbc:	7810      	ldrb	r0, [r2, #0]
 8013bbe:	2830      	cmp	r0, #48	; 0x30
 8013bc0:	4690      	mov	r8, r2
 8013bc2:	f102 0201 	add.w	r2, r2, #1
 8013bc6:	d0f9      	beq.n	8013bbc <__gethex+0x58>
 8013bc8:	f7ff ffb6 	bl	8013b38 <__hexdig_fun>
 8013bcc:	2301      	movs	r3, #1
 8013bce:	fab0 f480 	clz	r4, r0
 8013bd2:	0964      	lsrs	r4, r4, #5
 8013bd4:	465e      	mov	r6, fp
 8013bd6:	9301      	str	r3, [sp, #4]
 8013bd8:	4642      	mov	r2, r8
 8013bda:	4615      	mov	r5, r2
 8013bdc:	3201      	adds	r2, #1
 8013bde:	7828      	ldrb	r0, [r5, #0]
 8013be0:	f7ff ffaa 	bl	8013b38 <__hexdig_fun>
 8013be4:	2800      	cmp	r0, #0
 8013be6:	d1f8      	bne.n	8013bda <__gethex+0x76>
 8013be8:	4994      	ldr	r1, [pc, #592]	; (8013e3c <__gethex+0x2d8>)
 8013bea:	2201      	movs	r2, #1
 8013bec:	4628      	mov	r0, r5
 8013bee:	f7fe ff3c 	bl	8012a6a <strncmp>
 8013bf2:	b978      	cbnz	r0, 8013c14 <__gethex+0xb0>
 8013bf4:	b946      	cbnz	r6, 8013c08 <__gethex+0xa4>
 8013bf6:	1c6e      	adds	r6, r5, #1
 8013bf8:	4632      	mov	r2, r6
 8013bfa:	4615      	mov	r5, r2
 8013bfc:	3201      	adds	r2, #1
 8013bfe:	7828      	ldrb	r0, [r5, #0]
 8013c00:	f7ff ff9a 	bl	8013b38 <__hexdig_fun>
 8013c04:	2800      	cmp	r0, #0
 8013c06:	d1f8      	bne.n	8013bfa <__gethex+0x96>
 8013c08:	1b73      	subs	r3, r6, r5
 8013c0a:	009e      	lsls	r6, r3, #2
 8013c0c:	e004      	b.n	8013c18 <__gethex+0xb4>
 8013c0e:	2400      	movs	r4, #0
 8013c10:	4626      	mov	r6, r4
 8013c12:	e7e1      	b.n	8013bd8 <__gethex+0x74>
 8013c14:	2e00      	cmp	r6, #0
 8013c16:	d1f7      	bne.n	8013c08 <__gethex+0xa4>
 8013c18:	782b      	ldrb	r3, [r5, #0]
 8013c1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013c1e:	2b50      	cmp	r3, #80	; 0x50
 8013c20:	d13d      	bne.n	8013c9e <__gethex+0x13a>
 8013c22:	786b      	ldrb	r3, [r5, #1]
 8013c24:	2b2b      	cmp	r3, #43	; 0x2b
 8013c26:	d02f      	beq.n	8013c88 <__gethex+0x124>
 8013c28:	2b2d      	cmp	r3, #45	; 0x2d
 8013c2a:	d031      	beq.n	8013c90 <__gethex+0x12c>
 8013c2c:	1c69      	adds	r1, r5, #1
 8013c2e:	f04f 0b00 	mov.w	fp, #0
 8013c32:	7808      	ldrb	r0, [r1, #0]
 8013c34:	f7ff ff80 	bl	8013b38 <__hexdig_fun>
 8013c38:	1e42      	subs	r2, r0, #1
 8013c3a:	b2d2      	uxtb	r2, r2
 8013c3c:	2a18      	cmp	r2, #24
 8013c3e:	d82e      	bhi.n	8013c9e <__gethex+0x13a>
 8013c40:	f1a0 0210 	sub.w	r2, r0, #16
 8013c44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013c48:	f7ff ff76 	bl	8013b38 <__hexdig_fun>
 8013c4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8013c50:	fa5f fc8c 	uxtb.w	ip, ip
 8013c54:	f1bc 0f18 	cmp.w	ip, #24
 8013c58:	d91d      	bls.n	8013c96 <__gethex+0x132>
 8013c5a:	f1bb 0f00 	cmp.w	fp, #0
 8013c5e:	d000      	beq.n	8013c62 <__gethex+0xfe>
 8013c60:	4252      	negs	r2, r2
 8013c62:	4416      	add	r6, r2
 8013c64:	f8ca 1000 	str.w	r1, [sl]
 8013c68:	b1dc      	cbz	r4, 8013ca2 <__gethex+0x13e>
 8013c6a:	9b01      	ldr	r3, [sp, #4]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	bf14      	ite	ne
 8013c70:	f04f 0800 	movne.w	r8, #0
 8013c74:	f04f 0806 	moveq.w	r8, #6
 8013c78:	4640      	mov	r0, r8
 8013c7a:	b005      	add	sp, #20
 8013c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c80:	4645      	mov	r5, r8
 8013c82:	4626      	mov	r6, r4
 8013c84:	2401      	movs	r4, #1
 8013c86:	e7c7      	b.n	8013c18 <__gethex+0xb4>
 8013c88:	f04f 0b00 	mov.w	fp, #0
 8013c8c:	1ca9      	adds	r1, r5, #2
 8013c8e:	e7d0      	b.n	8013c32 <__gethex+0xce>
 8013c90:	f04f 0b01 	mov.w	fp, #1
 8013c94:	e7fa      	b.n	8013c8c <__gethex+0x128>
 8013c96:	230a      	movs	r3, #10
 8013c98:	fb03 0002 	mla	r0, r3, r2, r0
 8013c9c:	e7d0      	b.n	8013c40 <__gethex+0xdc>
 8013c9e:	4629      	mov	r1, r5
 8013ca0:	e7e0      	b.n	8013c64 <__gethex+0x100>
 8013ca2:	eba5 0308 	sub.w	r3, r5, r8
 8013ca6:	3b01      	subs	r3, #1
 8013ca8:	4621      	mov	r1, r4
 8013caa:	2b07      	cmp	r3, #7
 8013cac:	dc0a      	bgt.n	8013cc4 <__gethex+0x160>
 8013cae:	4648      	mov	r0, r9
 8013cb0:	f000 fa5a 	bl	8014168 <_Balloc>
 8013cb4:	4604      	mov	r4, r0
 8013cb6:	b940      	cbnz	r0, 8013cca <__gethex+0x166>
 8013cb8:	4b61      	ldr	r3, [pc, #388]	; (8013e40 <__gethex+0x2dc>)
 8013cba:	4602      	mov	r2, r0
 8013cbc:	21e4      	movs	r1, #228	; 0xe4
 8013cbe:	4861      	ldr	r0, [pc, #388]	; (8013e44 <__gethex+0x2e0>)
 8013cc0:	f7ff f804 	bl	8012ccc <__assert_func>
 8013cc4:	3101      	adds	r1, #1
 8013cc6:	105b      	asrs	r3, r3, #1
 8013cc8:	e7ef      	b.n	8013caa <__gethex+0x146>
 8013cca:	f100 0a14 	add.w	sl, r0, #20
 8013cce:	2300      	movs	r3, #0
 8013cd0:	495a      	ldr	r1, [pc, #360]	; (8013e3c <__gethex+0x2d8>)
 8013cd2:	f8cd a004 	str.w	sl, [sp, #4]
 8013cd6:	469b      	mov	fp, r3
 8013cd8:	45a8      	cmp	r8, r5
 8013cda:	d342      	bcc.n	8013d62 <__gethex+0x1fe>
 8013cdc:	9801      	ldr	r0, [sp, #4]
 8013cde:	f840 bb04 	str.w	fp, [r0], #4
 8013ce2:	eba0 000a 	sub.w	r0, r0, sl
 8013ce6:	1080      	asrs	r0, r0, #2
 8013ce8:	6120      	str	r0, [r4, #16]
 8013cea:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8013cee:	4658      	mov	r0, fp
 8013cf0:	f000 fb2c 	bl	801434c <__hi0bits>
 8013cf4:	683d      	ldr	r5, [r7, #0]
 8013cf6:	eba8 0000 	sub.w	r0, r8, r0
 8013cfa:	42a8      	cmp	r0, r5
 8013cfc:	dd59      	ble.n	8013db2 <__gethex+0x24e>
 8013cfe:	eba0 0805 	sub.w	r8, r0, r5
 8013d02:	4641      	mov	r1, r8
 8013d04:	4620      	mov	r0, r4
 8013d06:	f000 febb 	bl	8014a80 <__any_on>
 8013d0a:	4683      	mov	fp, r0
 8013d0c:	b1b8      	cbz	r0, 8013d3e <__gethex+0x1da>
 8013d0e:	f108 33ff 	add.w	r3, r8, #4294967295
 8013d12:	1159      	asrs	r1, r3, #5
 8013d14:	f003 021f 	and.w	r2, r3, #31
 8013d18:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013d1c:	f04f 0b01 	mov.w	fp, #1
 8013d20:	fa0b f202 	lsl.w	r2, fp, r2
 8013d24:	420a      	tst	r2, r1
 8013d26:	d00a      	beq.n	8013d3e <__gethex+0x1da>
 8013d28:	455b      	cmp	r3, fp
 8013d2a:	dd06      	ble.n	8013d3a <__gethex+0x1d6>
 8013d2c:	f1a8 0102 	sub.w	r1, r8, #2
 8013d30:	4620      	mov	r0, r4
 8013d32:	f000 fea5 	bl	8014a80 <__any_on>
 8013d36:	2800      	cmp	r0, #0
 8013d38:	d138      	bne.n	8013dac <__gethex+0x248>
 8013d3a:	f04f 0b02 	mov.w	fp, #2
 8013d3e:	4641      	mov	r1, r8
 8013d40:	4620      	mov	r0, r4
 8013d42:	f7ff fea7 	bl	8013a94 <rshift>
 8013d46:	4446      	add	r6, r8
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	42b3      	cmp	r3, r6
 8013d4c:	da41      	bge.n	8013dd2 <__gethex+0x26e>
 8013d4e:	4621      	mov	r1, r4
 8013d50:	4648      	mov	r0, r9
 8013d52:	f000 fa49 	bl	80141e8 <_Bfree>
 8013d56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013d58:	2300      	movs	r3, #0
 8013d5a:	6013      	str	r3, [r2, #0]
 8013d5c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8013d60:	e78a      	b.n	8013c78 <__gethex+0x114>
 8013d62:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8013d66:	2a2e      	cmp	r2, #46	; 0x2e
 8013d68:	d014      	beq.n	8013d94 <__gethex+0x230>
 8013d6a:	2b20      	cmp	r3, #32
 8013d6c:	d106      	bne.n	8013d7c <__gethex+0x218>
 8013d6e:	9b01      	ldr	r3, [sp, #4]
 8013d70:	f843 bb04 	str.w	fp, [r3], #4
 8013d74:	f04f 0b00 	mov.w	fp, #0
 8013d78:	9301      	str	r3, [sp, #4]
 8013d7a:	465b      	mov	r3, fp
 8013d7c:	7828      	ldrb	r0, [r5, #0]
 8013d7e:	9303      	str	r3, [sp, #12]
 8013d80:	f7ff feda 	bl	8013b38 <__hexdig_fun>
 8013d84:	9b03      	ldr	r3, [sp, #12]
 8013d86:	f000 000f 	and.w	r0, r0, #15
 8013d8a:	4098      	lsls	r0, r3
 8013d8c:	ea4b 0b00 	orr.w	fp, fp, r0
 8013d90:	3304      	adds	r3, #4
 8013d92:	e7a1      	b.n	8013cd8 <__gethex+0x174>
 8013d94:	45a8      	cmp	r8, r5
 8013d96:	d8e8      	bhi.n	8013d6a <__gethex+0x206>
 8013d98:	2201      	movs	r2, #1
 8013d9a:	4628      	mov	r0, r5
 8013d9c:	9303      	str	r3, [sp, #12]
 8013d9e:	f7fe fe64 	bl	8012a6a <strncmp>
 8013da2:	4926      	ldr	r1, [pc, #152]	; (8013e3c <__gethex+0x2d8>)
 8013da4:	9b03      	ldr	r3, [sp, #12]
 8013da6:	2800      	cmp	r0, #0
 8013da8:	d1df      	bne.n	8013d6a <__gethex+0x206>
 8013daa:	e795      	b.n	8013cd8 <__gethex+0x174>
 8013dac:	f04f 0b03 	mov.w	fp, #3
 8013db0:	e7c5      	b.n	8013d3e <__gethex+0x1da>
 8013db2:	da0b      	bge.n	8013dcc <__gethex+0x268>
 8013db4:	eba5 0800 	sub.w	r8, r5, r0
 8013db8:	4621      	mov	r1, r4
 8013dba:	4642      	mov	r2, r8
 8013dbc:	4648      	mov	r0, r9
 8013dbe:	f000 fc2d 	bl	801461c <__lshift>
 8013dc2:	eba6 0608 	sub.w	r6, r6, r8
 8013dc6:	4604      	mov	r4, r0
 8013dc8:	f100 0a14 	add.w	sl, r0, #20
 8013dcc:	f04f 0b00 	mov.w	fp, #0
 8013dd0:	e7ba      	b.n	8013d48 <__gethex+0x1e4>
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	42b3      	cmp	r3, r6
 8013dd6:	dd73      	ble.n	8013ec0 <__gethex+0x35c>
 8013dd8:	1b9e      	subs	r6, r3, r6
 8013dda:	42b5      	cmp	r5, r6
 8013ddc:	dc34      	bgt.n	8013e48 <__gethex+0x2e4>
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	2b02      	cmp	r3, #2
 8013de2:	d023      	beq.n	8013e2c <__gethex+0x2c8>
 8013de4:	2b03      	cmp	r3, #3
 8013de6:	d025      	beq.n	8013e34 <__gethex+0x2d0>
 8013de8:	2b01      	cmp	r3, #1
 8013dea:	d115      	bne.n	8013e18 <__gethex+0x2b4>
 8013dec:	42b5      	cmp	r5, r6
 8013dee:	d113      	bne.n	8013e18 <__gethex+0x2b4>
 8013df0:	2d01      	cmp	r5, #1
 8013df2:	d10b      	bne.n	8013e0c <__gethex+0x2a8>
 8013df4:	9a02      	ldr	r2, [sp, #8]
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	6013      	str	r3, [r2, #0]
 8013dfa:	2301      	movs	r3, #1
 8013dfc:	6123      	str	r3, [r4, #16]
 8013dfe:	f8ca 3000 	str.w	r3, [sl]
 8013e02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013e04:	f04f 0862 	mov.w	r8, #98	; 0x62
 8013e08:	601c      	str	r4, [r3, #0]
 8013e0a:	e735      	b.n	8013c78 <__gethex+0x114>
 8013e0c:	1e69      	subs	r1, r5, #1
 8013e0e:	4620      	mov	r0, r4
 8013e10:	f000 fe36 	bl	8014a80 <__any_on>
 8013e14:	2800      	cmp	r0, #0
 8013e16:	d1ed      	bne.n	8013df4 <__gethex+0x290>
 8013e18:	4621      	mov	r1, r4
 8013e1a:	4648      	mov	r0, r9
 8013e1c:	f000 f9e4 	bl	80141e8 <_Bfree>
 8013e20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013e22:	2300      	movs	r3, #0
 8013e24:	6013      	str	r3, [r2, #0]
 8013e26:	f04f 0850 	mov.w	r8, #80	; 0x50
 8013e2a:	e725      	b.n	8013c78 <__gethex+0x114>
 8013e2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d1f2      	bne.n	8013e18 <__gethex+0x2b4>
 8013e32:	e7df      	b.n	8013df4 <__gethex+0x290>
 8013e34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d1dc      	bne.n	8013df4 <__gethex+0x290>
 8013e3a:	e7ed      	b.n	8013e18 <__gethex+0x2b4>
 8013e3c:	08018714 	.word	0x08018714
 8013e40:	080189bc 	.word	0x080189bc
 8013e44:	080189cd 	.word	0x080189cd
 8013e48:	f106 38ff 	add.w	r8, r6, #4294967295
 8013e4c:	f1bb 0f00 	cmp.w	fp, #0
 8013e50:	d133      	bne.n	8013eba <__gethex+0x356>
 8013e52:	f1b8 0f00 	cmp.w	r8, #0
 8013e56:	d004      	beq.n	8013e62 <__gethex+0x2fe>
 8013e58:	4641      	mov	r1, r8
 8013e5a:	4620      	mov	r0, r4
 8013e5c:	f000 fe10 	bl	8014a80 <__any_on>
 8013e60:	4683      	mov	fp, r0
 8013e62:	ea4f 1268 	mov.w	r2, r8, asr #5
 8013e66:	2301      	movs	r3, #1
 8013e68:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013e6c:	f008 081f 	and.w	r8, r8, #31
 8013e70:	fa03 f308 	lsl.w	r3, r3, r8
 8013e74:	4213      	tst	r3, r2
 8013e76:	4631      	mov	r1, r6
 8013e78:	4620      	mov	r0, r4
 8013e7a:	bf18      	it	ne
 8013e7c:	f04b 0b02 	orrne.w	fp, fp, #2
 8013e80:	1bad      	subs	r5, r5, r6
 8013e82:	f7ff fe07 	bl	8013a94 <rshift>
 8013e86:	687e      	ldr	r6, [r7, #4]
 8013e88:	f04f 0802 	mov.w	r8, #2
 8013e8c:	f1bb 0f00 	cmp.w	fp, #0
 8013e90:	d04a      	beq.n	8013f28 <__gethex+0x3c4>
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	2b02      	cmp	r3, #2
 8013e96:	d016      	beq.n	8013ec6 <__gethex+0x362>
 8013e98:	2b03      	cmp	r3, #3
 8013e9a:	d018      	beq.n	8013ece <__gethex+0x36a>
 8013e9c:	2b01      	cmp	r3, #1
 8013e9e:	d109      	bne.n	8013eb4 <__gethex+0x350>
 8013ea0:	f01b 0f02 	tst.w	fp, #2
 8013ea4:	d006      	beq.n	8013eb4 <__gethex+0x350>
 8013ea6:	f8da 3000 	ldr.w	r3, [sl]
 8013eaa:	ea4b 0b03 	orr.w	fp, fp, r3
 8013eae:	f01b 0f01 	tst.w	fp, #1
 8013eb2:	d10f      	bne.n	8013ed4 <__gethex+0x370>
 8013eb4:	f048 0810 	orr.w	r8, r8, #16
 8013eb8:	e036      	b.n	8013f28 <__gethex+0x3c4>
 8013eba:	f04f 0b01 	mov.w	fp, #1
 8013ebe:	e7d0      	b.n	8013e62 <__gethex+0x2fe>
 8013ec0:	f04f 0801 	mov.w	r8, #1
 8013ec4:	e7e2      	b.n	8013e8c <__gethex+0x328>
 8013ec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ec8:	f1c3 0301 	rsb	r3, r3, #1
 8013ecc:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d0ef      	beq.n	8013eb4 <__gethex+0x350>
 8013ed4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013ed8:	f104 0214 	add.w	r2, r4, #20
 8013edc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8013ee0:	9301      	str	r3, [sp, #4]
 8013ee2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	4694      	mov	ip, r2
 8013eea:	f852 1b04 	ldr.w	r1, [r2], #4
 8013eee:	f1b1 3fff 	cmp.w	r1, #4294967295
 8013ef2:	d01e      	beq.n	8013f32 <__gethex+0x3ce>
 8013ef4:	3101      	adds	r1, #1
 8013ef6:	f8cc 1000 	str.w	r1, [ip]
 8013efa:	f1b8 0f02 	cmp.w	r8, #2
 8013efe:	f104 0214 	add.w	r2, r4, #20
 8013f02:	d13d      	bne.n	8013f80 <__gethex+0x41c>
 8013f04:	683b      	ldr	r3, [r7, #0]
 8013f06:	3b01      	subs	r3, #1
 8013f08:	42ab      	cmp	r3, r5
 8013f0a:	d10b      	bne.n	8013f24 <__gethex+0x3c0>
 8013f0c:	1169      	asrs	r1, r5, #5
 8013f0e:	2301      	movs	r3, #1
 8013f10:	f005 051f 	and.w	r5, r5, #31
 8013f14:	fa03 f505 	lsl.w	r5, r3, r5
 8013f18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f1c:	421d      	tst	r5, r3
 8013f1e:	bf18      	it	ne
 8013f20:	f04f 0801 	movne.w	r8, #1
 8013f24:	f048 0820 	orr.w	r8, r8, #32
 8013f28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f2a:	601c      	str	r4, [r3, #0]
 8013f2c:	9b02      	ldr	r3, [sp, #8]
 8013f2e:	601e      	str	r6, [r3, #0]
 8013f30:	e6a2      	b.n	8013c78 <__gethex+0x114>
 8013f32:	4290      	cmp	r0, r2
 8013f34:	f842 3c04 	str.w	r3, [r2, #-4]
 8013f38:	d8d6      	bhi.n	8013ee8 <__gethex+0x384>
 8013f3a:	68a2      	ldr	r2, [r4, #8]
 8013f3c:	4593      	cmp	fp, r2
 8013f3e:	db17      	blt.n	8013f70 <__gethex+0x40c>
 8013f40:	6861      	ldr	r1, [r4, #4]
 8013f42:	4648      	mov	r0, r9
 8013f44:	3101      	adds	r1, #1
 8013f46:	f000 f90f 	bl	8014168 <_Balloc>
 8013f4a:	4682      	mov	sl, r0
 8013f4c:	b918      	cbnz	r0, 8013f56 <__gethex+0x3f2>
 8013f4e:	4b1b      	ldr	r3, [pc, #108]	; (8013fbc <__gethex+0x458>)
 8013f50:	4602      	mov	r2, r0
 8013f52:	2184      	movs	r1, #132	; 0x84
 8013f54:	e6b3      	b.n	8013cbe <__gethex+0x15a>
 8013f56:	6922      	ldr	r2, [r4, #16]
 8013f58:	3202      	adds	r2, #2
 8013f5a:	f104 010c 	add.w	r1, r4, #12
 8013f5e:	0092      	lsls	r2, r2, #2
 8013f60:	300c      	adds	r0, #12
 8013f62:	f7fe fe96 	bl	8012c92 <memcpy>
 8013f66:	4621      	mov	r1, r4
 8013f68:	4648      	mov	r0, r9
 8013f6a:	f000 f93d 	bl	80141e8 <_Bfree>
 8013f6e:	4654      	mov	r4, sl
 8013f70:	6922      	ldr	r2, [r4, #16]
 8013f72:	1c51      	adds	r1, r2, #1
 8013f74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013f78:	6121      	str	r1, [r4, #16]
 8013f7a:	2101      	movs	r1, #1
 8013f7c:	6151      	str	r1, [r2, #20]
 8013f7e:	e7bc      	b.n	8013efa <__gethex+0x396>
 8013f80:	6921      	ldr	r1, [r4, #16]
 8013f82:	4559      	cmp	r1, fp
 8013f84:	dd0b      	ble.n	8013f9e <__gethex+0x43a>
 8013f86:	2101      	movs	r1, #1
 8013f88:	4620      	mov	r0, r4
 8013f8a:	f7ff fd83 	bl	8013a94 <rshift>
 8013f8e:	68bb      	ldr	r3, [r7, #8]
 8013f90:	3601      	adds	r6, #1
 8013f92:	42b3      	cmp	r3, r6
 8013f94:	f6ff aedb 	blt.w	8013d4e <__gethex+0x1ea>
 8013f98:	f04f 0801 	mov.w	r8, #1
 8013f9c:	e7c2      	b.n	8013f24 <__gethex+0x3c0>
 8013f9e:	f015 051f 	ands.w	r5, r5, #31
 8013fa2:	d0f9      	beq.n	8013f98 <__gethex+0x434>
 8013fa4:	9b01      	ldr	r3, [sp, #4]
 8013fa6:	441a      	add	r2, r3
 8013fa8:	f1c5 0520 	rsb	r5, r5, #32
 8013fac:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8013fb0:	f000 f9cc 	bl	801434c <__hi0bits>
 8013fb4:	42a8      	cmp	r0, r5
 8013fb6:	dbe6      	blt.n	8013f86 <__gethex+0x422>
 8013fb8:	e7ee      	b.n	8013f98 <__gethex+0x434>
 8013fba:	bf00      	nop
 8013fbc:	080189bc 	.word	0x080189bc

08013fc0 <L_shift>:
 8013fc0:	f1c2 0208 	rsb	r2, r2, #8
 8013fc4:	0092      	lsls	r2, r2, #2
 8013fc6:	b570      	push	{r4, r5, r6, lr}
 8013fc8:	f1c2 0620 	rsb	r6, r2, #32
 8013fcc:	6843      	ldr	r3, [r0, #4]
 8013fce:	6804      	ldr	r4, [r0, #0]
 8013fd0:	fa03 f506 	lsl.w	r5, r3, r6
 8013fd4:	432c      	orrs	r4, r5
 8013fd6:	40d3      	lsrs	r3, r2
 8013fd8:	6004      	str	r4, [r0, #0]
 8013fda:	f840 3f04 	str.w	r3, [r0, #4]!
 8013fde:	4288      	cmp	r0, r1
 8013fe0:	d3f4      	bcc.n	8013fcc <L_shift+0xc>
 8013fe2:	bd70      	pop	{r4, r5, r6, pc}

08013fe4 <__match>:
 8013fe4:	b530      	push	{r4, r5, lr}
 8013fe6:	6803      	ldr	r3, [r0, #0]
 8013fe8:	3301      	adds	r3, #1
 8013fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013fee:	b914      	cbnz	r4, 8013ff6 <__match+0x12>
 8013ff0:	6003      	str	r3, [r0, #0]
 8013ff2:	2001      	movs	r0, #1
 8013ff4:	bd30      	pop	{r4, r5, pc}
 8013ff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013ffa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013ffe:	2d19      	cmp	r5, #25
 8014000:	bf98      	it	ls
 8014002:	3220      	addls	r2, #32
 8014004:	42a2      	cmp	r2, r4
 8014006:	d0f0      	beq.n	8013fea <__match+0x6>
 8014008:	2000      	movs	r0, #0
 801400a:	e7f3      	b.n	8013ff4 <__match+0x10>

0801400c <__hexnan>:
 801400c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014010:	680b      	ldr	r3, [r1, #0]
 8014012:	6801      	ldr	r1, [r0, #0]
 8014014:	115e      	asrs	r6, r3, #5
 8014016:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801401a:	f013 031f 	ands.w	r3, r3, #31
 801401e:	b087      	sub	sp, #28
 8014020:	bf18      	it	ne
 8014022:	3604      	addne	r6, #4
 8014024:	2500      	movs	r5, #0
 8014026:	1f37      	subs	r7, r6, #4
 8014028:	4682      	mov	sl, r0
 801402a:	4690      	mov	r8, r2
 801402c:	9301      	str	r3, [sp, #4]
 801402e:	f846 5c04 	str.w	r5, [r6, #-4]
 8014032:	46b9      	mov	r9, r7
 8014034:	463c      	mov	r4, r7
 8014036:	9502      	str	r5, [sp, #8]
 8014038:	46ab      	mov	fp, r5
 801403a:	784a      	ldrb	r2, [r1, #1]
 801403c:	1c4b      	adds	r3, r1, #1
 801403e:	9303      	str	r3, [sp, #12]
 8014040:	b342      	cbz	r2, 8014094 <__hexnan+0x88>
 8014042:	4610      	mov	r0, r2
 8014044:	9105      	str	r1, [sp, #20]
 8014046:	9204      	str	r2, [sp, #16]
 8014048:	f7ff fd76 	bl	8013b38 <__hexdig_fun>
 801404c:	2800      	cmp	r0, #0
 801404e:	d14f      	bne.n	80140f0 <__hexnan+0xe4>
 8014050:	9a04      	ldr	r2, [sp, #16]
 8014052:	9905      	ldr	r1, [sp, #20]
 8014054:	2a20      	cmp	r2, #32
 8014056:	d818      	bhi.n	801408a <__hexnan+0x7e>
 8014058:	9b02      	ldr	r3, [sp, #8]
 801405a:	459b      	cmp	fp, r3
 801405c:	dd13      	ble.n	8014086 <__hexnan+0x7a>
 801405e:	454c      	cmp	r4, r9
 8014060:	d206      	bcs.n	8014070 <__hexnan+0x64>
 8014062:	2d07      	cmp	r5, #7
 8014064:	dc04      	bgt.n	8014070 <__hexnan+0x64>
 8014066:	462a      	mov	r2, r5
 8014068:	4649      	mov	r1, r9
 801406a:	4620      	mov	r0, r4
 801406c:	f7ff ffa8 	bl	8013fc0 <L_shift>
 8014070:	4544      	cmp	r4, r8
 8014072:	d950      	bls.n	8014116 <__hexnan+0x10a>
 8014074:	2300      	movs	r3, #0
 8014076:	f1a4 0904 	sub.w	r9, r4, #4
 801407a:	f844 3c04 	str.w	r3, [r4, #-4]
 801407e:	f8cd b008 	str.w	fp, [sp, #8]
 8014082:	464c      	mov	r4, r9
 8014084:	461d      	mov	r5, r3
 8014086:	9903      	ldr	r1, [sp, #12]
 8014088:	e7d7      	b.n	801403a <__hexnan+0x2e>
 801408a:	2a29      	cmp	r2, #41	; 0x29
 801408c:	d155      	bne.n	801413a <__hexnan+0x12e>
 801408e:	3102      	adds	r1, #2
 8014090:	f8ca 1000 	str.w	r1, [sl]
 8014094:	f1bb 0f00 	cmp.w	fp, #0
 8014098:	d04f      	beq.n	801413a <__hexnan+0x12e>
 801409a:	454c      	cmp	r4, r9
 801409c:	d206      	bcs.n	80140ac <__hexnan+0xa0>
 801409e:	2d07      	cmp	r5, #7
 80140a0:	dc04      	bgt.n	80140ac <__hexnan+0xa0>
 80140a2:	462a      	mov	r2, r5
 80140a4:	4649      	mov	r1, r9
 80140a6:	4620      	mov	r0, r4
 80140a8:	f7ff ff8a 	bl	8013fc0 <L_shift>
 80140ac:	4544      	cmp	r4, r8
 80140ae:	d934      	bls.n	801411a <__hexnan+0x10e>
 80140b0:	f1a8 0204 	sub.w	r2, r8, #4
 80140b4:	4623      	mov	r3, r4
 80140b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80140ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80140be:	429f      	cmp	r7, r3
 80140c0:	d2f9      	bcs.n	80140b6 <__hexnan+0xaa>
 80140c2:	1b3b      	subs	r3, r7, r4
 80140c4:	f023 0303 	bic.w	r3, r3, #3
 80140c8:	3304      	adds	r3, #4
 80140ca:	3e03      	subs	r6, #3
 80140cc:	3401      	adds	r4, #1
 80140ce:	42a6      	cmp	r6, r4
 80140d0:	bf38      	it	cc
 80140d2:	2304      	movcc	r3, #4
 80140d4:	4443      	add	r3, r8
 80140d6:	2200      	movs	r2, #0
 80140d8:	f843 2b04 	str.w	r2, [r3], #4
 80140dc:	429f      	cmp	r7, r3
 80140de:	d2fb      	bcs.n	80140d8 <__hexnan+0xcc>
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	b91b      	cbnz	r3, 80140ec <__hexnan+0xe0>
 80140e4:	4547      	cmp	r7, r8
 80140e6:	d126      	bne.n	8014136 <__hexnan+0x12a>
 80140e8:	2301      	movs	r3, #1
 80140ea:	603b      	str	r3, [r7, #0]
 80140ec:	2005      	movs	r0, #5
 80140ee:	e025      	b.n	801413c <__hexnan+0x130>
 80140f0:	3501      	adds	r5, #1
 80140f2:	2d08      	cmp	r5, #8
 80140f4:	f10b 0b01 	add.w	fp, fp, #1
 80140f8:	dd06      	ble.n	8014108 <__hexnan+0xfc>
 80140fa:	4544      	cmp	r4, r8
 80140fc:	d9c3      	bls.n	8014086 <__hexnan+0x7a>
 80140fe:	2300      	movs	r3, #0
 8014100:	f844 3c04 	str.w	r3, [r4, #-4]
 8014104:	2501      	movs	r5, #1
 8014106:	3c04      	subs	r4, #4
 8014108:	6822      	ldr	r2, [r4, #0]
 801410a:	f000 000f 	and.w	r0, r0, #15
 801410e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014112:	6020      	str	r0, [r4, #0]
 8014114:	e7b7      	b.n	8014086 <__hexnan+0x7a>
 8014116:	2508      	movs	r5, #8
 8014118:	e7b5      	b.n	8014086 <__hexnan+0x7a>
 801411a:	9b01      	ldr	r3, [sp, #4]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d0df      	beq.n	80140e0 <__hexnan+0xd4>
 8014120:	f1c3 0320 	rsb	r3, r3, #32
 8014124:	f04f 32ff 	mov.w	r2, #4294967295
 8014128:	40da      	lsrs	r2, r3
 801412a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801412e:	4013      	ands	r3, r2
 8014130:	f846 3c04 	str.w	r3, [r6, #-4]
 8014134:	e7d4      	b.n	80140e0 <__hexnan+0xd4>
 8014136:	3f04      	subs	r7, #4
 8014138:	e7d2      	b.n	80140e0 <__hexnan+0xd4>
 801413a:	2004      	movs	r0, #4
 801413c:	b007      	add	sp, #28
 801413e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014142 <__ascii_mbtowc>:
 8014142:	b082      	sub	sp, #8
 8014144:	b901      	cbnz	r1, 8014148 <__ascii_mbtowc+0x6>
 8014146:	a901      	add	r1, sp, #4
 8014148:	b142      	cbz	r2, 801415c <__ascii_mbtowc+0x1a>
 801414a:	b14b      	cbz	r3, 8014160 <__ascii_mbtowc+0x1e>
 801414c:	7813      	ldrb	r3, [r2, #0]
 801414e:	600b      	str	r3, [r1, #0]
 8014150:	7812      	ldrb	r2, [r2, #0]
 8014152:	1e10      	subs	r0, r2, #0
 8014154:	bf18      	it	ne
 8014156:	2001      	movne	r0, #1
 8014158:	b002      	add	sp, #8
 801415a:	4770      	bx	lr
 801415c:	4610      	mov	r0, r2
 801415e:	e7fb      	b.n	8014158 <__ascii_mbtowc+0x16>
 8014160:	f06f 0001 	mvn.w	r0, #1
 8014164:	e7f8      	b.n	8014158 <__ascii_mbtowc+0x16>
	...

08014168 <_Balloc>:
 8014168:	b570      	push	{r4, r5, r6, lr}
 801416a:	69c6      	ldr	r6, [r0, #28]
 801416c:	4604      	mov	r4, r0
 801416e:	460d      	mov	r5, r1
 8014170:	b976      	cbnz	r6, 8014190 <_Balloc+0x28>
 8014172:	2010      	movs	r0, #16
 8014174:	f7fc fcde 	bl	8010b34 <malloc>
 8014178:	4602      	mov	r2, r0
 801417a:	61e0      	str	r0, [r4, #28]
 801417c:	b920      	cbnz	r0, 8014188 <_Balloc+0x20>
 801417e:	4b18      	ldr	r3, [pc, #96]	; (80141e0 <_Balloc+0x78>)
 8014180:	4818      	ldr	r0, [pc, #96]	; (80141e4 <_Balloc+0x7c>)
 8014182:	216b      	movs	r1, #107	; 0x6b
 8014184:	f7fe fda2 	bl	8012ccc <__assert_func>
 8014188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801418c:	6006      	str	r6, [r0, #0]
 801418e:	60c6      	str	r6, [r0, #12]
 8014190:	69e6      	ldr	r6, [r4, #28]
 8014192:	68f3      	ldr	r3, [r6, #12]
 8014194:	b183      	cbz	r3, 80141b8 <_Balloc+0x50>
 8014196:	69e3      	ldr	r3, [r4, #28]
 8014198:	68db      	ldr	r3, [r3, #12]
 801419a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801419e:	b9b8      	cbnz	r0, 80141d0 <_Balloc+0x68>
 80141a0:	2101      	movs	r1, #1
 80141a2:	fa01 f605 	lsl.w	r6, r1, r5
 80141a6:	1d72      	adds	r2, r6, #5
 80141a8:	0092      	lsls	r2, r2, #2
 80141aa:	4620      	mov	r0, r4
 80141ac:	f000 fecf 	bl	8014f4e <_calloc_r>
 80141b0:	b160      	cbz	r0, 80141cc <_Balloc+0x64>
 80141b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80141b6:	e00e      	b.n	80141d6 <_Balloc+0x6e>
 80141b8:	2221      	movs	r2, #33	; 0x21
 80141ba:	2104      	movs	r1, #4
 80141bc:	4620      	mov	r0, r4
 80141be:	f000 fec6 	bl	8014f4e <_calloc_r>
 80141c2:	69e3      	ldr	r3, [r4, #28]
 80141c4:	60f0      	str	r0, [r6, #12]
 80141c6:	68db      	ldr	r3, [r3, #12]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d1e4      	bne.n	8014196 <_Balloc+0x2e>
 80141cc:	2000      	movs	r0, #0
 80141ce:	bd70      	pop	{r4, r5, r6, pc}
 80141d0:	6802      	ldr	r2, [r0, #0]
 80141d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80141d6:	2300      	movs	r3, #0
 80141d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80141dc:	e7f7      	b.n	80141ce <_Balloc+0x66>
 80141de:	bf00      	nop
 80141e0:	080188a2 	.word	0x080188a2
 80141e4:	08018a2d 	.word	0x08018a2d

080141e8 <_Bfree>:
 80141e8:	b570      	push	{r4, r5, r6, lr}
 80141ea:	69c6      	ldr	r6, [r0, #28]
 80141ec:	4605      	mov	r5, r0
 80141ee:	460c      	mov	r4, r1
 80141f0:	b976      	cbnz	r6, 8014210 <_Bfree+0x28>
 80141f2:	2010      	movs	r0, #16
 80141f4:	f7fc fc9e 	bl	8010b34 <malloc>
 80141f8:	4602      	mov	r2, r0
 80141fa:	61e8      	str	r0, [r5, #28]
 80141fc:	b920      	cbnz	r0, 8014208 <_Bfree+0x20>
 80141fe:	4b09      	ldr	r3, [pc, #36]	; (8014224 <_Bfree+0x3c>)
 8014200:	4809      	ldr	r0, [pc, #36]	; (8014228 <_Bfree+0x40>)
 8014202:	218f      	movs	r1, #143	; 0x8f
 8014204:	f7fe fd62 	bl	8012ccc <__assert_func>
 8014208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801420c:	6006      	str	r6, [r0, #0]
 801420e:	60c6      	str	r6, [r0, #12]
 8014210:	b13c      	cbz	r4, 8014222 <_Bfree+0x3a>
 8014212:	69eb      	ldr	r3, [r5, #28]
 8014214:	6862      	ldr	r2, [r4, #4]
 8014216:	68db      	ldr	r3, [r3, #12]
 8014218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801421c:	6021      	str	r1, [r4, #0]
 801421e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014222:	bd70      	pop	{r4, r5, r6, pc}
 8014224:	080188a2 	.word	0x080188a2
 8014228:	08018a2d 	.word	0x08018a2d

0801422c <__multadd>:
 801422c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014230:	690d      	ldr	r5, [r1, #16]
 8014232:	4607      	mov	r7, r0
 8014234:	460c      	mov	r4, r1
 8014236:	461e      	mov	r6, r3
 8014238:	f101 0c14 	add.w	ip, r1, #20
 801423c:	2000      	movs	r0, #0
 801423e:	f8dc 3000 	ldr.w	r3, [ip]
 8014242:	b299      	uxth	r1, r3
 8014244:	fb02 6101 	mla	r1, r2, r1, r6
 8014248:	0c1e      	lsrs	r6, r3, #16
 801424a:	0c0b      	lsrs	r3, r1, #16
 801424c:	fb02 3306 	mla	r3, r2, r6, r3
 8014250:	b289      	uxth	r1, r1
 8014252:	3001      	adds	r0, #1
 8014254:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014258:	4285      	cmp	r5, r0
 801425a:	f84c 1b04 	str.w	r1, [ip], #4
 801425e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014262:	dcec      	bgt.n	801423e <__multadd+0x12>
 8014264:	b30e      	cbz	r6, 80142aa <__multadd+0x7e>
 8014266:	68a3      	ldr	r3, [r4, #8]
 8014268:	42ab      	cmp	r3, r5
 801426a:	dc19      	bgt.n	80142a0 <__multadd+0x74>
 801426c:	6861      	ldr	r1, [r4, #4]
 801426e:	4638      	mov	r0, r7
 8014270:	3101      	adds	r1, #1
 8014272:	f7ff ff79 	bl	8014168 <_Balloc>
 8014276:	4680      	mov	r8, r0
 8014278:	b928      	cbnz	r0, 8014286 <__multadd+0x5a>
 801427a:	4602      	mov	r2, r0
 801427c:	4b0c      	ldr	r3, [pc, #48]	; (80142b0 <__multadd+0x84>)
 801427e:	480d      	ldr	r0, [pc, #52]	; (80142b4 <__multadd+0x88>)
 8014280:	21ba      	movs	r1, #186	; 0xba
 8014282:	f7fe fd23 	bl	8012ccc <__assert_func>
 8014286:	6922      	ldr	r2, [r4, #16]
 8014288:	3202      	adds	r2, #2
 801428a:	f104 010c 	add.w	r1, r4, #12
 801428e:	0092      	lsls	r2, r2, #2
 8014290:	300c      	adds	r0, #12
 8014292:	f7fe fcfe 	bl	8012c92 <memcpy>
 8014296:	4621      	mov	r1, r4
 8014298:	4638      	mov	r0, r7
 801429a:	f7ff ffa5 	bl	80141e8 <_Bfree>
 801429e:	4644      	mov	r4, r8
 80142a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80142a4:	3501      	adds	r5, #1
 80142a6:	615e      	str	r6, [r3, #20]
 80142a8:	6125      	str	r5, [r4, #16]
 80142aa:	4620      	mov	r0, r4
 80142ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142b0:	080189bc 	.word	0x080189bc
 80142b4:	08018a2d 	.word	0x08018a2d

080142b8 <__s2b>:
 80142b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142bc:	460c      	mov	r4, r1
 80142be:	4615      	mov	r5, r2
 80142c0:	461f      	mov	r7, r3
 80142c2:	2209      	movs	r2, #9
 80142c4:	3308      	adds	r3, #8
 80142c6:	4606      	mov	r6, r0
 80142c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80142cc:	2100      	movs	r1, #0
 80142ce:	2201      	movs	r2, #1
 80142d0:	429a      	cmp	r2, r3
 80142d2:	db09      	blt.n	80142e8 <__s2b+0x30>
 80142d4:	4630      	mov	r0, r6
 80142d6:	f7ff ff47 	bl	8014168 <_Balloc>
 80142da:	b940      	cbnz	r0, 80142ee <__s2b+0x36>
 80142dc:	4602      	mov	r2, r0
 80142de:	4b19      	ldr	r3, [pc, #100]	; (8014344 <__s2b+0x8c>)
 80142e0:	4819      	ldr	r0, [pc, #100]	; (8014348 <__s2b+0x90>)
 80142e2:	21d3      	movs	r1, #211	; 0xd3
 80142e4:	f7fe fcf2 	bl	8012ccc <__assert_func>
 80142e8:	0052      	lsls	r2, r2, #1
 80142ea:	3101      	adds	r1, #1
 80142ec:	e7f0      	b.n	80142d0 <__s2b+0x18>
 80142ee:	9b08      	ldr	r3, [sp, #32]
 80142f0:	6143      	str	r3, [r0, #20]
 80142f2:	2d09      	cmp	r5, #9
 80142f4:	f04f 0301 	mov.w	r3, #1
 80142f8:	6103      	str	r3, [r0, #16]
 80142fa:	dd16      	ble.n	801432a <__s2b+0x72>
 80142fc:	f104 0909 	add.w	r9, r4, #9
 8014300:	46c8      	mov	r8, r9
 8014302:	442c      	add	r4, r5
 8014304:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014308:	4601      	mov	r1, r0
 801430a:	3b30      	subs	r3, #48	; 0x30
 801430c:	220a      	movs	r2, #10
 801430e:	4630      	mov	r0, r6
 8014310:	f7ff ff8c 	bl	801422c <__multadd>
 8014314:	45a0      	cmp	r8, r4
 8014316:	d1f5      	bne.n	8014304 <__s2b+0x4c>
 8014318:	f1a5 0408 	sub.w	r4, r5, #8
 801431c:	444c      	add	r4, r9
 801431e:	1b2d      	subs	r5, r5, r4
 8014320:	1963      	adds	r3, r4, r5
 8014322:	42bb      	cmp	r3, r7
 8014324:	db04      	blt.n	8014330 <__s2b+0x78>
 8014326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801432a:	340a      	adds	r4, #10
 801432c:	2509      	movs	r5, #9
 801432e:	e7f6      	b.n	801431e <__s2b+0x66>
 8014330:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014334:	4601      	mov	r1, r0
 8014336:	3b30      	subs	r3, #48	; 0x30
 8014338:	220a      	movs	r2, #10
 801433a:	4630      	mov	r0, r6
 801433c:	f7ff ff76 	bl	801422c <__multadd>
 8014340:	e7ee      	b.n	8014320 <__s2b+0x68>
 8014342:	bf00      	nop
 8014344:	080189bc 	.word	0x080189bc
 8014348:	08018a2d 	.word	0x08018a2d

0801434c <__hi0bits>:
 801434c:	0c03      	lsrs	r3, r0, #16
 801434e:	041b      	lsls	r3, r3, #16
 8014350:	b9d3      	cbnz	r3, 8014388 <__hi0bits+0x3c>
 8014352:	0400      	lsls	r0, r0, #16
 8014354:	2310      	movs	r3, #16
 8014356:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801435a:	bf04      	itt	eq
 801435c:	0200      	lsleq	r0, r0, #8
 801435e:	3308      	addeq	r3, #8
 8014360:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014364:	bf04      	itt	eq
 8014366:	0100      	lsleq	r0, r0, #4
 8014368:	3304      	addeq	r3, #4
 801436a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801436e:	bf04      	itt	eq
 8014370:	0080      	lsleq	r0, r0, #2
 8014372:	3302      	addeq	r3, #2
 8014374:	2800      	cmp	r0, #0
 8014376:	db05      	blt.n	8014384 <__hi0bits+0x38>
 8014378:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801437c:	f103 0301 	add.w	r3, r3, #1
 8014380:	bf08      	it	eq
 8014382:	2320      	moveq	r3, #32
 8014384:	4618      	mov	r0, r3
 8014386:	4770      	bx	lr
 8014388:	2300      	movs	r3, #0
 801438a:	e7e4      	b.n	8014356 <__hi0bits+0xa>

0801438c <__lo0bits>:
 801438c:	6803      	ldr	r3, [r0, #0]
 801438e:	f013 0207 	ands.w	r2, r3, #7
 8014392:	d00c      	beq.n	80143ae <__lo0bits+0x22>
 8014394:	07d9      	lsls	r1, r3, #31
 8014396:	d422      	bmi.n	80143de <__lo0bits+0x52>
 8014398:	079a      	lsls	r2, r3, #30
 801439a:	bf49      	itett	mi
 801439c:	085b      	lsrmi	r3, r3, #1
 801439e:	089b      	lsrpl	r3, r3, #2
 80143a0:	6003      	strmi	r3, [r0, #0]
 80143a2:	2201      	movmi	r2, #1
 80143a4:	bf5c      	itt	pl
 80143a6:	6003      	strpl	r3, [r0, #0]
 80143a8:	2202      	movpl	r2, #2
 80143aa:	4610      	mov	r0, r2
 80143ac:	4770      	bx	lr
 80143ae:	b299      	uxth	r1, r3
 80143b0:	b909      	cbnz	r1, 80143b6 <__lo0bits+0x2a>
 80143b2:	0c1b      	lsrs	r3, r3, #16
 80143b4:	2210      	movs	r2, #16
 80143b6:	b2d9      	uxtb	r1, r3
 80143b8:	b909      	cbnz	r1, 80143be <__lo0bits+0x32>
 80143ba:	3208      	adds	r2, #8
 80143bc:	0a1b      	lsrs	r3, r3, #8
 80143be:	0719      	lsls	r1, r3, #28
 80143c0:	bf04      	itt	eq
 80143c2:	091b      	lsreq	r3, r3, #4
 80143c4:	3204      	addeq	r2, #4
 80143c6:	0799      	lsls	r1, r3, #30
 80143c8:	bf04      	itt	eq
 80143ca:	089b      	lsreq	r3, r3, #2
 80143cc:	3202      	addeq	r2, #2
 80143ce:	07d9      	lsls	r1, r3, #31
 80143d0:	d403      	bmi.n	80143da <__lo0bits+0x4e>
 80143d2:	085b      	lsrs	r3, r3, #1
 80143d4:	f102 0201 	add.w	r2, r2, #1
 80143d8:	d003      	beq.n	80143e2 <__lo0bits+0x56>
 80143da:	6003      	str	r3, [r0, #0]
 80143dc:	e7e5      	b.n	80143aa <__lo0bits+0x1e>
 80143de:	2200      	movs	r2, #0
 80143e0:	e7e3      	b.n	80143aa <__lo0bits+0x1e>
 80143e2:	2220      	movs	r2, #32
 80143e4:	e7e1      	b.n	80143aa <__lo0bits+0x1e>
	...

080143e8 <__i2b>:
 80143e8:	b510      	push	{r4, lr}
 80143ea:	460c      	mov	r4, r1
 80143ec:	2101      	movs	r1, #1
 80143ee:	f7ff febb 	bl	8014168 <_Balloc>
 80143f2:	4602      	mov	r2, r0
 80143f4:	b928      	cbnz	r0, 8014402 <__i2b+0x1a>
 80143f6:	4b05      	ldr	r3, [pc, #20]	; (801440c <__i2b+0x24>)
 80143f8:	4805      	ldr	r0, [pc, #20]	; (8014410 <__i2b+0x28>)
 80143fa:	f240 1145 	movw	r1, #325	; 0x145
 80143fe:	f7fe fc65 	bl	8012ccc <__assert_func>
 8014402:	2301      	movs	r3, #1
 8014404:	6144      	str	r4, [r0, #20]
 8014406:	6103      	str	r3, [r0, #16]
 8014408:	bd10      	pop	{r4, pc}
 801440a:	bf00      	nop
 801440c:	080189bc 	.word	0x080189bc
 8014410:	08018a2d 	.word	0x08018a2d

08014414 <__multiply>:
 8014414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014418:	4691      	mov	r9, r2
 801441a:	690a      	ldr	r2, [r1, #16]
 801441c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014420:	429a      	cmp	r2, r3
 8014422:	bfb8      	it	lt
 8014424:	460b      	movlt	r3, r1
 8014426:	460c      	mov	r4, r1
 8014428:	bfbc      	itt	lt
 801442a:	464c      	movlt	r4, r9
 801442c:	4699      	movlt	r9, r3
 801442e:	6927      	ldr	r7, [r4, #16]
 8014430:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014434:	68a3      	ldr	r3, [r4, #8]
 8014436:	6861      	ldr	r1, [r4, #4]
 8014438:	eb07 060a 	add.w	r6, r7, sl
 801443c:	42b3      	cmp	r3, r6
 801443e:	b085      	sub	sp, #20
 8014440:	bfb8      	it	lt
 8014442:	3101      	addlt	r1, #1
 8014444:	f7ff fe90 	bl	8014168 <_Balloc>
 8014448:	b930      	cbnz	r0, 8014458 <__multiply+0x44>
 801444a:	4602      	mov	r2, r0
 801444c:	4b44      	ldr	r3, [pc, #272]	; (8014560 <__multiply+0x14c>)
 801444e:	4845      	ldr	r0, [pc, #276]	; (8014564 <__multiply+0x150>)
 8014450:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014454:	f7fe fc3a 	bl	8012ccc <__assert_func>
 8014458:	f100 0514 	add.w	r5, r0, #20
 801445c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014460:	462b      	mov	r3, r5
 8014462:	2200      	movs	r2, #0
 8014464:	4543      	cmp	r3, r8
 8014466:	d321      	bcc.n	80144ac <__multiply+0x98>
 8014468:	f104 0314 	add.w	r3, r4, #20
 801446c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014470:	f109 0314 	add.w	r3, r9, #20
 8014474:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014478:	9202      	str	r2, [sp, #8]
 801447a:	1b3a      	subs	r2, r7, r4
 801447c:	3a15      	subs	r2, #21
 801447e:	f022 0203 	bic.w	r2, r2, #3
 8014482:	3204      	adds	r2, #4
 8014484:	f104 0115 	add.w	r1, r4, #21
 8014488:	428f      	cmp	r7, r1
 801448a:	bf38      	it	cc
 801448c:	2204      	movcc	r2, #4
 801448e:	9201      	str	r2, [sp, #4]
 8014490:	9a02      	ldr	r2, [sp, #8]
 8014492:	9303      	str	r3, [sp, #12]
 8014494:	429a      	cmp	r2, r3
 8014496:	d80c      	bhi.n	80144b2 <__multiply+0x9e>
 8014498:	2e00      	cmp	r6, #0
 801449a:	dd03      	ble.n	80144a4 <__multiply+0x90>
 801449c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d05b      	beq.n	801455c <__multiply+0x148>
 80144a4:	6106      	str	r6, [r0, #16]
 80144a6:	b005      	add	sp, #20
 80144a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ac:	f843 2b04 	str.w	r2, [r3], #4
 80144b0:	e7d8      	b.n	8014464 <__multiply+0x50>
 80144b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80144b6:	f1ba 0f00 	cmp.w	sl, #0
 80144ba:	d024      	beq.n	8014506 <__multiply+0xf2>
 80144bc:	f104 0e14 	add.w	lr, r4, #20
 80144c0:	46a9      	mov	r9, r5
 80144c2:	f04f 0c00 	mov.w	ip, #0
 80144c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80144ca:	f8d9 1000 	ldr.w	r1, [r9]
 80144ce:	fa1f fb82 	uxth.w	fp, r2
 80144d2:	b289      	uxth	r1, r1
 80144d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80144d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80144dc:	f8d9 2000 	ldr.w	r2, [r9]
 80144e0:	4461      	add	r1, ip
 80144e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80144e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80144ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80144ee:	b289      	uxth	r1, r1
 80144f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80144f4:	4577      	cmp	r7, lr
 80144f6:	f849 1b04 	str.w	r1, [r9], #4
 80144fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80144fe:	d8e2      	bhi.n	80144c6 <__multiply+0xb2>
 8014500:	9a01      	ldr	r2, [sp, #4]
 8014502:	f845 c002 	str.w	ip, [r5, r2]
 8014506:	9a03      	ldr	r2, [sp, #12]
 8014508:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801450c:	3304      	adds	r3, #4
 801450e:	f1b9 0f00 	cmp.w	r9, #0
 8014512:	d021      	beq.n	8014558 <__multiply+0x144>
 8014514:	6829      	ldr	r1, [r5, #0]
 8014516:	f104 0c14 	add.w	ip, r4, #20
 801451a:	46ae      	mov	lr, r5
 801451c:	f04f 0a00 	mov.w	sl, #0
 8014520:	f8bc b000 	ldrh.w	fp, [ip]
 8014524:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014528:	fb09 220b 	mla	r2, r9, fp, r2
 801452c:	4452      	add	r2, sl
 801452e:	b289      	uxth	r1, r1
 8014530:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014534:	f84e 1b04 	str.w	r1, [lr], #4
 8014538:	f85c 1b04 	ldr.w	r1, [ip], #4
 801453c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014540:	f8be 1000 	ldrh.w	r1, [lr]
 8014544:	fb09 110a 	mla	r1, r9, sl, r1
 8014548:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801454c:	4567      	cmp	r7, ip
 801454e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014552:	d8e5      	bhi.n	8014520 <__multiply+0x10c>
 8014554:	9a01      	ldr	r2, [sp, #4]
 8014556:	50a9      	str	r1, [r5, r2]
 8014558:	3504      	adds	r5, #4
 801455a:	e799      	b.n	8014490 <__multiply+0x7c>
 801455c:	3e01      	subs	r6, #1
 801455e:	e79b      	b.n	8014498 <__multiply+0x84>
 8014560:	080189bc 	.word	0x080189bc
 8014564:	08018a2d 	.word	0x08018a2d

08014568 <__pow5mult>:
 8014568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801456c:	4615      	mov	r5, r2
 801456e:	f012 0203 	ands.w	r2, r2, #3
 8014572:	4606      	mov	r6, r0
 8014574:	460f      	mov	r7, r1
 8014576:	d007      	beq.n	8014588 <__pow5mult+0x20>
 8014578:	4c25      	ldr	r4, [pc, #148]	; (8014610 <__pow5mult+0xa8>)
 801457a:	3a01      	subs	r2, #1
 801457c:	2300      	movs	r3, #0
 801457e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014582:	f7ff fe53 	bl	801422c <__multadd>
 8014586:	4607      	mov	r7, r0
 8014588:	10ad      	asrs	r5, r5, #2
 801458a:	d03d      	beq.n	8014608 <__pow5mult+0xa0>
 801458c:	69f4      	ldr	r4, [r6, #28]
 801458e:	b97c      	cbnz	r4, 80145b0 <__pow5mult+0x48>
 8014590:	2010      	movs	r0, #16
 8014592:	f7fc facf 	bl	8010b34 <malloc>
 8014596:	4602      	mov	r2, r0
 8014598:	61f0      	str	r0, [r6, #28]
 801459a:	b928      	cbnz	r0, 80145a8 <__pow5mult+0x40>
 801459c:	4b1d      	ldr	r3, [pc, #116]	; (8014614 <__pow5mult+0xac>)
 801459e:	481e      	ldr	r0, [pc, #120]	; (8014618 <__pow5mult+0xb0>)
 80145a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80145a4:	f7fe fb92 	bl	8012ccc <__assert_func>
 80145a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80145ac:	6004      	str	r4, [r0, #0]
 80145ae:	60c4      	str	r4, [r0, #12]
 80145b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80145b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80145b8:	b94c      	cbnz	r4, 80145ce <__pow5mult+0x66>
 80145ba:	f240 2171 	movw	r1, #625	; 0x271
 80145be:	4630      	mov	r0, r6
 80145c0:	f7ff ff12 	bl	80143e8 <__i2b>
 80145c4:	2300      	movs	r3, #0
 80145c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80145ca:	4604      	mov	r4, r0
 80145cc:	6003      	str	r3, [r0, #0]
 80145ce:	f04f 0900 	mov.w	r9, #0
 80145d2:	07eb      	lsls	r3, r5, #31
 80145d4:	d50a      	bpl.n	80145ec <__pow5mult+0x84>
 80145d6:	4639      	mov	r1, r7
 80145d8:	4622      	mov	r2, r4
 80145da:	4630      	mov	r0, r6
 80145dc:	f7ff ff1a 	bl	8014414 <__multiply>
 80145e0:	4639      	mov	r1, r7
 80145e2:	4680      	mov	r8, r0
 80145e4:	4630      	mov	r0, r6
 80145e6:	f7ff fdff 	bl	80141e8 <_Bfree>
 80145ea:	4647      	mov	r7, r8
 80145ec:	106d      	asrs	r5, r5, #1
 80145ee:	d00b      	beq.n	8014608 <__pow5mult+0xa0>
 80145f0:	6820      	ldr	r0, [r4, #0]
 80145f2:	b938      	cbnz	r0, 8014604 <__pow5mult+0x9c>
 80145f4:	4622      	mov	r2, r4
 80145f6:	4621      	mov	r1, r4
 80145f8:	4630      	mov	r0, r6
 80145fa:	f7ff ff0b 	bl	8014414 <__multiply>
 80145fe:	6020      	str	r0, [r4, #0]
 8014600:	f8c0 9000 	str.w	r9, [r0]
 8014604:	4604      	mov	r4, r0
 8014606:	e7e4      	b.n	80145d2 <__pow5mult+0x6a>
 8014608:	4638      	mov	r0, r7
 801460a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801460e:	bf00      	nop
 8014610:	08018b78 	.word	0x08018b78
 8014614:	080188a2 	.word	0x080188a2
 8014618:	08018a2d 	.word	0x08018a2d

0801461c <__lshift>:
 801461c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014620:	460c      	mov	r4, r1
 8014622:	6849      	ldr	r1, [r1, #4]
 8014624:	6923      	ldr	r3, [r4, #16]
 8014626:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801462a:	68a3      	ldr	r3, [r4, #8]
 801462c:	4607      	mov	r7, r0
 801462e:	4691      	mov	r9, r2
 8014630:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014634:	f108 0601 	add.w	r6, r8, #1
 8014638:	42b3      	cmp	r3, r6
 801463a:	db0b      	blt.n	8014654 <__lshift+0x38>
 801463c:	4638      	mov	r0, r7
 801463e:	f7ff fd93 	bl	8014168 <_Balloc>
 8014642:	4605      	mov	r5, r0
 8014644:	b948      	cbnz	r0, 801465a <__lshift+0x3e>
 8014646:	4602      	mov	r2, r0
 8014648:	4b28      	ldr	r3, [pc, #160]	; (80146ec <__lshift+0xd0>)
 801464a:	4829      	ldr	r0, [pc, #164]	; (80146f0 <__lshift+0xd4>)
 801464c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014650:	f7fe fb3c 	bl	8012ccc <__assert_func>
 8014654:	3101      	adds	r1, #1
 8014656:	005b      	lsls	r3, r3, #1
 8014658:	e7ee      	b.n	8014638 <__lshift+0x1c>
 801465a:	2300      	movs	r3, #0
 801465c:	f100 0114 	add.w	r1, r0, #20
 8014660:	f100 0210 	add.w	r2, r0, #16
 8014664:	4618      	mov	r0, r3
 8014666:	4553      	cmp	r3, sl
 8014668:	db33      	blt.n	80146d2 <__lshift+0xb6>
 801466a:	6920      	ldr	r0, [r4, #16]
 801466c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014670:	f104 0314 	add.w	r3, r4, #20
 8014674:	f019 091f 	ands.w	r9, r9, #31
 8014678:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801467c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014680:	d02b      	beq.n	80146da <__lshift+0xbe>
 8014682:	f1c9 0e20 	rsb	lr, r9, #32
 8014686:	468a      	mov	sl, r1
 8014688:	2200      	movs	r2, #0
 801468a:	6818      	ldr	r0, [r3, #0]
 801468c:	fa00 f009 	lsl.w	r0, r0, r9
 8014690:	4310      	orrs	r0, r2
 8014692:	f84a 0b04 	str.w	r0, [sl], #4
 8014696:	f853 2b04 	ldr.w	r2, [r3], #4
 801469a:	459c      	cmp	ip, r3
 801469c:	fa22 f20e 	lsr.w	r2, r2, lr
 80146a0:	d8f3      	bhi.n	801468a <__lshift+0x6e>
 80146a2:	ebac 0304 	sub.w	r3, ip, r4
 80146a6:	3b15      	subs	r3, #21
 80146a8:	f023 0303 	bic.w	r3, r3, #3
 80146ac:	3304      	adds	r3, #4
 80146ae:	f104 0015 	add.w	r0, r4, #21
 80146b2:	4584      	cmp	ip, r0
 80146b4:	bf38      	it	cc
 80146b6:	2304      	movcc	r3, #4
 80146b8:	50ca      	str	r2, [r1, r3]
 80146ba:	b10a      	cbz	r2, 80146c0 <__lshift+0xa4>
 80146bc:	f108 0602 	add.w	r6, r8, #2
 80146c0:	3e01      	subs	r6, #1
 80146c2:	4638      	mov	r0, r7
 80146c4:	612e      	str	r6, [r5, #16]
 80146c6:	4621      	mov	r1, r4
 80146c8:	f7ff fd8e 	bl	80141e8 <_Bfree>
 80146cc:	4628      	mov	r0, r5
 80146ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80146d6:	3301      	adds	r3, #1
 80146d8:	e7c5      	b.n	8014666 <__lshift+0x4a>
 80146da:	3904      	subs	r1, #4
 80146dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80146e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80146e4:	459c      	cmp	ip, r3
 80146e6:	d8f9      	bhi.n	80146dc <__lshift+0xc0>
 80146e8:	e7ea      	b.n	80146c0 <__lshift+0xa4>
 80146ea:	bf00      	nop
 80146ec:	080189bc 	.word	0x080189bc
 80146f0:	08018a2d 	.word	0x08018a2d

080146f4 <__mcmp>:
 80146f4:	b530      	push	{r4, r5, lr}
 80146f6:	6902      	ldr	r2, [r0, #16]
 80146f8:	690c      	ldr	r4, [r1, #16]
 80146fa:	1b12      	subs	r2, r2, r4
 80146fc:	d10e      	bne.n	801471c <__mcmp+0x28>
 80146fe:	f100 0314 	add.w	r3, r0, #20
 8014702:	3114      	adds	r1, #20
 8014704:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014708:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801470c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014710:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014714:	42a5      	cmp	r5, r4
 8014716:	d003      	beq.n	8014720 <__mcmp+0x2c>
 8014718:	d305      	bcc.n	8014726 <__mcmp+0x32>
 801471a:	2201      	movs	r2, #1
 801471c:	4610      	mov	r0, r2
 801471e:	bd30      	pop	{r4, r5, pc}
 8014720:	4283      	cmp	r3, r0
 8014722:	d3f3      	bcc.n	801470c <__mcmp+0x18>
 8014724:	e7fa      	b.n	801471c <__mcmp+0x28>
 8014726:	f04f 32ff 	mov.w	r2, #4294967295
 801472a:	e7f7      	b.n	801471c <__mcmp+0x28>

0801472c <__mdiff>:
 801472c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014730:	460c      	mov	r4, r1
 8014732:	4606      	mov	r6, r0
 8014734:	4611      	mov	r1, r2
 8014736:	4620      	mov	r0, r4
 8014738:	4690      	mov	r8, r2
 801473a:	f7ff ffdb 	bl	80146f4 <__mcmp>
 801473e:	1e05      	subs	r5, r0, #0
 8014740:	d110      	bne.n	8014764 <__mdiff+0x38>
 8014742:	4629      	mov	r1, r5
 8014744:	4630      	mov	r0, r6
 8014746:	f7ff fd0f 	bl	8014168 <_Balloc>
 801474a:	b930      	cbnz	r0, 801475a <__mdiff+0x2e>
 801474c:	4b3a      	ldr	r3, [pc, #232]	; (8014838 <__mdiff+0x10c>)
 801474e:	4602      	mov	r2, r0
 8014750:	f240 2137 	movw	r1, #567	; 0x237
 8014754:	4839      	ldr	r0, [pc, #228]	; (801483c <__mdiff+0x110>)
 8014756:	f7fe fab9 	bl	8012ccc <__assert_func>
 801475a:	2301      	movs	r3, #1
 801475c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014764:	bfa4      	itt	ge
 8014766:	4643      	movge	r3, r8
 8014768:	46a0      	movge	r8, r4
 801476a:	4630      	mov	r0, r6
 801476c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014770:	bfa6      	itte	ge
 8014772:	461c      	movge	r4, r3
 8014774:	2500      	movge	r5, #0
 8014776:	2501      	movlt	r5, #1
 8014778:	f7ff fcf6 	bl	8014168 <_Balloc>
 801477c:	b920      	cbnz	r0, 8014788 <__mdiff+0x5c>
 801477e:	4b2e      	ldr	r3, [pc, #184]	; (8014838 <__mdiff+0x10c>)
 8014780:	4602      	mov	r2, r0
 8014782:	f240 2145 	movw	r1, #581	; 0x245
 8014786:	e7e5      	b.n	8014754 <__mdiff+0x28>
 8014788:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801478c:	6926      	ldr	r6, [r4, #16]
 801478e:	60c5      	str	r5, [r0, #12]
 8014790:	f104 0914 	add.w	r9, r4, #20
 8014794:	f108 0514 	add.w	r5, r8, #20
 8014798:	f100 0e14 	add.w	lr, r0, #20
 801479c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80147a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80147a4:	f108 0210 	add.w	r2, r8, #16
 80147a8:	46f2      	mov	sl, lr
 80147aa:	2100      	movs	r1, #0
 80147ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80147b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80147b4:	fa11 f88b 	uxtah	r8, r1, fp
 80147b8:	b299      	uxth	r1, r3
 80147ba:	0c1b      	lsrs	r3, r3, #16
 80147bc:	eba8 0801 	sub.w	r8, r8, r1
 80147c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80147c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80147c8:	fa1f f888 	uxth.w	r8, r8
 80147cc:	1419      	asrs	r1, r3, #16
 80147ce:	454e      	cmp	r6, r9
 80147d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80147d4:	f84a 3b04 	str.w	r3, [sl], #4
 80147d8:	d8e8      	bhi.n	80147ac <__mdiff+0x80>
 80147da:	1b33      	subs	r3, r6, r4
 80147dc:	3b15      	subs	r3, #21
 80147de:	f023 0303 	bic.w	r3, r3, #3
 80147e2:	3304      	adds	r3, #4
 80147e4:	3415      	adds	r4, #21
 80147e6:	42a6      	cmp	r6, r4
 80147e8:	bf38      	it	cc
 80147ea:	2304      	movcc	r3, #4
 80147ec:	441d      	add	r5, r3
 80147ee:	4473      	add	r3, lr
 80147f0:	469e      	mov	lr, r3
 80147f2:	462e      	mov	r6, r5
 80147f4:	4566      	cmp	r6, ip
 80147f6:	d30e      	bcc.n	8014816 <__mdiff+0xea>
 80147f8:	f10c 0203 	add.w	r2, ip, #3
 80147fc:	1b52      	subs	r2, r2, r5
 80147fe:	f022 0203 	bic.w	r2, r2, #3
 8014802:	3d03      	subs	r5, #3
 8014804:	45ac      	cmp	ip, r5
 8014806:	bf38      	it	cc
 8014808:	2200      	movcc	r2, #0
 801480a:	4413      	add	r3, r2
 801480c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014810:	b17a      	cbz	r2, 8014832 <__mdiff+0x106>
 8014812:	6107      	str	r7, [r0, #16]
 8014814:	e7a4      	b.n	8014760 <__mdiff+0x34>
 8014816:	f856 8b04 	ldr.w	r8, [r6], #4
 801481a:	fa11 f288 	uxtah	r2, r1, r8
 801481e:	1414      	asrs	r4, r2, #16
 8014820:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014824:	b292      	uxth	r2, r2
 8014826:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801482a:	f84e 2b04 	str.w	r2, [lr], #4
 801482e:	1421      	asrs	r1, r4, #16
 8014830:	e7e0      	b.n	80147f4 <__mdiff+0xc8>
 8014832:	3f01      	subs	r7, #1
 8014834:	e7ea      	b.n	801480c <__mdiff+0xe0>
 8014836:	bf00      	nop
 8014838:	080189bc 	.word	0x080189bc
 801483c:	08018a2d 	.word	0x08018a2d

08014840 <__ulp>:
 8014840:	b082      	sub	sp, #8
 8014842:	ed8d 0b00 	vstr	d0, [sp]
 8014846:	9a01      	ldr	r2, [sp, #4]
 8014848:	4b0f      	ldr	r3, [pc, #60]	; (8014888 <__ulp+0x48>)
 801484a:	4013      	ands	r3, r2
 801484c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014850:	2b00      	cmp	r3, #0
 8014852:	dc08      	bgt.n	8014866 <__ulp+0x26>
 8014854:	425b      	negs	r3, r3
 8014856:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801485a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801485e:	da04      	bge.n	801486a <__ulp+0x2a>
 8014860:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014864:	4113      	asrs	r3, r2
 8014866:	2200      	movs	r2, #0
 8014868:	e008      	b.n	801487c <__ulp+0x3c>
 801486a:	f1a2 0314 	sub.w	r3, r2, #20
 801486e:	2b1e      	cmp	r3, #30
 8014870:	bfda      	itte	le
 8014872:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8014876:	40da      	lsrle	r2, r3
 8014878:	2201      	movgt	r2, #1
 801487a:	2300      	movs	r3, #0
 801487c:	4619      	mov	r1, r3
 801487e:	4610      	mov	r0, r2
 8014880:	ec41 0b10 	vmov	d0, r0, r1
 8014884:	b002      	add	sp, #8
 8014886:	4770      	bx	lr
 8014888:	7ff00000 	.word	0x7ff00000

0801488c <__b2d>:
 801488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014890:	6906      	ldr	r6, [r0, #16]
 8014892:	f100 0814 	add.w	r8, r0, #20
 8014896:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801489a:	1f37      	subs	r7, r6, #4
 801489c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80148a0:	4610      	mov	r0, r2
 80148a2:	f7ff fd53 	bl	801434c <__hi0bits>
 80148a6:	f1c0 0320 	rsb	r3, r0, #32
 80148aa:	280a      	cmp	r0, #10
 80148ac:	600b      	str	r3, [r1, #0]
 80148ae:	491b      	ldr	r1, [pc, #108]	; (801491c <__b2d+0x90>)
 80148b0:	dc15      	bgt.n	80148de <__b2d+0x52>
 80148b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80148b6:	fa22 f30c 	lsr.w	r3, r2, ip
 80148ba:	45b8      	cmp	r8, r7
 80148bc:	ea43 0501 	orr.w	r5, r3, r1
 80148c0:	bf34      	ite	cc
 80148c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80148c6:	2300      	movcs	r3, #0
 80148c8:	3015      	adds	r0, #21
 80148ca:	fa02 f000 	lsl.w	r0, r2, r0
 80148ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80148d2:	4303      	orrs	r3, r0
 80148d4:	461c      	mov	r4, r3
 80148d6:	ec45 4b10 	vmov	d0, r4, r5
 80148da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148de:	45b8      	cmp	r8, r7
 80148e0:	bf3a      	itte	cc
 80148e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80148e6:	f1a6 0708 	subcc.w	r7, r6, #8
 80148ea:	2300      	movcs	r3, #0
 80148ec:	380b      	subs	r0, #11
 80148ee:	d012      	beq.n	8014916 <__b2d+0x8a>
 80148f0:	f1c0 0120 	rsb	r1, r0, #32
 80148f4:	fa23 f401 	lsr.w	r4, r3, r1
 80148f8:	4082      	lsls	r2, r0
 80148fa:	4322      	orrs	r2, r4
 80148fc:	4547      	cmp	r7, r8
 80148fe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8014902:	bf8c      	ite	hi
 8014904:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014908:	2200      	movls	r2, #0
 801490a:	4083      	lsls	r3, r0
 801490c:	40ca      	lsrs	r2, r1
 801490e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014912:	4313      	orrs	r3, r2
 8014914:	e7de      	b.n	80148d4 <__b2d+0x48>
 8014916:	ea42 0501 	orr.w	r5, r2, r1
 801491a:	e7db      	b.n	80148d4 <__b2d+0x48>
 801491c:	3ff00000 	.word	0x3ff00000

08014920 <__d2b>:
 8014920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014924:	460f      	mov	r7, r1
 8014926:	2101      	movs	r1, #1
 8014928:	ec59 8b10 	vmov	r8, r9, d0
 801492c:	4616      	mov	r6, r2
 801492e:	f7ff fc1b 	bl	8014168 <_Balloc>
 8014932:	4604      	mov	r4, r0
 8014934:	b930      	cbnz	r0, 8014944 <__d2b+0x24>
 8014936:	4602      	mov	r2, r0
 8014938:	4b24      	ldr	r3, [pc, #144]	; (80149cc <__d2b+0xac>)
 801493a:	4825      	ldr	r0, [pc, #148]	; (80149d0 <__d2b+0xb0>)
 801493c:	f240 310f 	movw	r1, #783	; 0x30f
 8014940:	f7fe f9c4 	bl	8012ccc <__assert_func>
 8014944:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801494c:	bb2d      	cbnz	r5, 801499a <__d2b+0x7a>
 801494e:	9301      	str	r3, [sp, #4]
 8014950:	f1b8 0300 	subs.w	r3, r8, #0
 8014954:	d026      	beq.n	80149a4 <__d2b+0x84>
 8014956:	4668      	mov	r0, sp
 8014958:	9300      	str	r3, [sp, #0]
 801495a:	f7ff fd17 	bl	801438c <__lo0bits>
 801495e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014962:	b1e8      	cbz	r0, 80149a0 <__d2b+0x80>
 8014964:	f1c0 0320 	rsb	r3, r0, #32
 8014968:	fa02 f303 	lsl.w	r3, r2, r3
 801496c:	430b      	orrs	r3, r1
 801496e:	40c2      	lsrs	r2, r0
 8014970:	6163      	str	r3, [r4, #20]
 8014972:	9201      	str	r2, [sp, #4]
 8014974:	9b01      	ldr	r3, [sp, #4]
 8014976:	61a3      	str	r3, [r4, #24]
 8014978:	2b00      	cmp	r3, #0
 801497a:	bf14      	ite	ne
 801497c:	2202      	movne	r2, #2
 801497e:	2201      	moveq	r2, #1
 8014980:	6122      	str	r2, [r4, #16]
 8014982:	b1bd      	cbz	r5, 80149b4 <__d2b+0x94>
 8014984:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014988:	4405      	add	r5, r0
 801498a:	603d      	str	r5, [r7, #0]
 801498c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014990:	6030      	str	r0, [r6, #0]
 8014992:	4620      	mov	r0, r4
 8014994:	b003      	add	sp, #12
 8014996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801499a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801499e:	e7d6      	b.n	801494e <__d2b+0x2e>
 80149a0:	6161      	str	r1, [r4, #20]
 80149a2:	e7e7      	b.n	8014974 <__d2b+0x54>
 80149a4:	a801      	add	r0, sp, #4
 80149a6:	f7ff fcf1 	bl	801438c <__lo0bits>
 80149aa:	9b01      	ldr	r3, [sp, #4]
 80149ac:	6163      	str	r3, [r4, #20]
 80149ae:	3020      	adds	r0, #32
 80149b0:	2201      	movs	r2, #1
 80149b2:	e7e5      	b.n	8014980 <__d2b+0x60>
 80149b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80149b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80149bc:	6038      	str	r0, [r7, #0]
 80149be:	6918      	ldr	r0, [r3, #16]
 80149c0:	f7ff fcc4 	bl	801434c <__hi0bits>
 80149c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80149c8:	e7e2      	b.n	8014990 <__d2b+0x70>
 80149ca:	bf00      	nop
 80149cc:	080189bc 	.word	0x080189bc
 80149d0:	08018a2d 	.word	0x08018a2d

080149d4 <__ratio>:
 80149d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149d8:	4688      	mov	r8, r1
 80149da:	4669      	mov	r1, sp
 80149dc:	4681      	mov	r9, r0
 80149de:	f7ff ff55 	bl	801488c <__b2d>
 80149e2:	a901      	add	r1, sp, #4
 80149e4:	4640      	mov	r0, r8
 80149e6:	ec55 4b10 	vmov	r4, r5, d0
 80149ea:	f7ff ff4f 	bl	801488c <__b2d>
 80149ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80149f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80149f6:	eba3 0c02 	sub.w	ip, r3, r2
 80149fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80149fe:	1a9b      	subs	r3, r3, r2
 8014a00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014a04:	ec51 0b10 	vmov	r0, r1, d0
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	bfd6      	itet	le
 8014a0c:	460a      	movle	r2, r1
 8014a0e:	462a      	movgt	r2, r5
 8014a10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014a14:	468b      	mov	fp, r1
 8014a16:	462f      	mov	r7, r5
 8014a18:	bfd4      	ite	le
 8014a1a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014a1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014a22:	4620      	mov	r0, r4
 8014a24:	ee10 2a10 	vmov	r2, s0
 8014a28:	465b      	mov	r3, fp
 8014a2a:	4639      	mov	r1, r7
 8014a2c:	f7eb ff0e 	bl	800084c <__aeabi_ddiv>
 8014a30:	ec41 0b10 	vmov	d0, r0, r1
 8014a34:	b003      	add	sp, #12
 8014a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a3a <__copybits>:
 8014a3a:	3901      	subs	r1, #1
 8014a3c:	b570      	push	{r4, r5, r6, lr}
 8014a3e:	1149      	asrs	r1, r1, #5
 8014a40:	6914      	ldr	r4, [r2, #16]
 8014a42:	3101      	adds	r1, #1
 8014a44:	f102 0314 	add.w	r3, r2, #20
 8014a48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014a4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014a50:	1f05      	subs	r5, r0, #4
 8014a52:	42a3      	cmp	r3, r4
 8014a54:	d30c      	bcc.n	8014a70 <__copybits+0x36>
 8014a56:	1aa3      	subs	r3, r4, r2
 8014a58:	3b11      	subs	r3, #17
 8014a5a:	f023 0303 	bic.w	r3, r3, #3
 8014a5e:	3211      	adds	r2, #17
 8014a60:	42a2      	cmp	r2, r4
 8014a62:	bf88      	it	hi
 8014a64:	2300      	movhi	r3, #0
 8014a66:	4418      	add	r0, r3
 8014a68:	2300      	movs	r3, #0
 8014a6a:	4288      	cmp	r0, r1
 8014a6c:	d305      	bcc.n	8014a7a <__copybits+0x40>
 8014a6e:	bd70      	pop	{r4, r5, r6, pc}
 8014a70:	f853 6b04 	ldr.w	r6, [r3], #4
 8014a74:	f845 6f04 	str.w	r6, [r5, #4]!
 8014a78:	e7eb      	b.n	8014a52 <__copybits+0x18>
 8014a7a:	f840 3b04 	str.w	r3, [r0], #4
 8014a7e:	e7f4      	b.n	8014a6a <__copybits+0x30>

08014a80 <__any_on>:
 8014a80:	f100 0214 	add.w	r2, r0, #20
 8014a84:	6900      	ldr	r0, [r0, #16]
 8014a86:	114b      	asrs	r3, r1, #5
 8014a88:	4298      	cmp	r0, r3
 8014a8a:	b510      	push	{r4, lr}
 8014a8c:	db11      	blt.n	8014ab2 <__any_on+0x32>
 8014a8e:	dd0a      	ble.n	8014aa6 <__any_on+0x26>
 8014a90:	f011 011f 	ands.w	r1, r1, #31
 8014a94:	d007      	beq.n	8014aa6 <__any_on+0x26>
 8014a96:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014a9a:	fa24 f001 	lsr.w	r0, r4, r1
 8014a9e:	fa00 f101 	lsl.w	r1, r0, r1
 8014aa2:	428c      	cmp	r4, r1
 8014aa4:	d10b      	bne.n	8014abe <__any_on+0x3e>
 8014aa6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014aaa:	4293      	cmp	r3, r2
 8014aac:	d803      	bhi.n	8014ab6 <__any_on+0x36>
 8014aae:	2000      	movs	r0, #0
 8014ab0:	bd10      	pop	{r4, pc}
 8014ab2:	4603      	mov	r3, r0
 8014ab4:	e7f7      	b.n	8014aa6 <__any_on+0x26>
 8014ab6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014aba:	2900      	cmp	r1, #0
 8014abc:	d0f5      	beq.n	8014aaa <__any_on+0x2a>
 8014abe:	2001      	movs	r0, #1
 8014ac0:	e7f6      	b.n	8014ab0 <__any_on+0x30>

08014ac2 <__ascii_wctomb>:
 8014ac2:	b149      	cbz	r1, 8014ad8 <__ascii_wctomb+0x16>
 8014ac4:	2aff      	cmp	r2, #255	; 0xff
 8014ac6:	bf85      	ittet	hi
 8014ac8:	238a      	movhi	r3, #138	; 0x8a
 8014aca:	6003      	strhi	r3, [r0, #0]
 8014acc:	700a      	strbls	r2, [r1, #0]
 8014ace:	f04f 30ff 	movhi.w	r0, #4294967295
 8014ad2:	bf98      	it	ls
 8014ad4:	2001      	movls	r0, #1
 8014ad6:	4770      	bx	lr
 8014ad8:	4608      	mov	r0, r1
 8014ada:	4770      	bx	lr

08014adc <__ssputs_r>:
 8014adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ae0:	688e      	ldr	r6, [r1, #8]
 8014ae2:	461f      	mov	r7, r3
 8014ae4:	42be      	cmp	r6, r7
 8014ae6:	680b      	ldr	r3, [r1, #0]
 8014ae8:	4682      	mov	sl, r0
 8014aea:	460c      	mov	r4, r1
 8014aec:	4690      	mov	r8, r2
 8014aee:	d82c      	bhi.n	8014b4a <__ssputs_r+0x6e>
 8014af0:	898a      	ldrh	r2, [r1, #12]
 8014af2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014af6:	d026      	beq.n	8014b46 <__ssputs_r+0x6a>
 8014af8:	6965      	ldr	r5, [r4, #20]
 8014afa:	6909      	ldr	r1, [r1, #16]
 8014afc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b00:	eba3 0901 	sub.w	r9, r3, r1
 8014b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014b08:	1c7b      	adds	r3, r7, #1
 8014b0a:	444b      	add	r3, r9
 8014b0c:	106d      	asrs	r5, r5, #1
 8014b0e:	429d      	cmp	r5, r3
 8014b10:	bf38      	it	cc
 8014b12:	461d      	movcc	r5, r3
 8014b14:	0553      	lsls	r3, r2, #21
 8014b16:	d527      	bpl.n	8014b68 <__ssputs_r+0x8c>
 8014b18:	4629      	mov	r1, r5
 8014b1a:	f7fc f83b 	bl	8010b94 <_malloc_r>
 8014b1e:	4606      	mov	r6, r0
 8014b20:	b360      	cbz	r0, 8014b7c <__ssputs_r+0xa0>
 8014b22:	6921      	ldr	r1, [r4, #16]
 8014b24:	464a      	mov	r2, r9
 8014b26:	f7fe f8b4 	bl	8012c92 <memcpy>
 8014b2a:	89a3      	ldrh	r3, [r4, #12]
 8014b2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b34:	81a3      	strh	r3, [r4, #12]
 8014b36:	6126      	str	r6, [r4, #16]
 8014b38:	6165      	str	r5, [r4, #20]
 8014b3a:	444e      	add	r6, r9
 8014b3c:	eba5 0509 	sub.w	r5, r5, r9
 8014b40:	6026      	str	r6, [r4, #0]
 8014b42:	60a5      	str	r5, [r4, #8]
 8014b44:	463e      	mov	r6, r7
 8014b46:	42be      	cmp	r6, r7
 8014b48:	d900      	bls.n	8014b4c <__ssputs_r+0x70>
 8014b4a:	463e      	mov	r6, r7
 8014b4c:	6820      	ldr	r0, [r4, #0]
 8014b4e:	4632      	mov	r2, r6
 8014b50:	4641      	mov	r1, r8
 8014b52:	f000 f9db 	bl	8014f0c <memmove>
 8014b56:	68a3      	ldr	r3, [r4, #8]
 8014b58:	1b9b      	subs	r3, r3, r6
 8014b5a:	60a3      	str	r3, [r4, #8]
 8014b5c:	6823      	ldr	r3, [r4, #0]
 8014b5e:	4433      	add	r3, r6
 8014b60:	6023      	str	r3, [r4, #0]
 8014b62:	2000      	movs	r0, #0
 8014b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b68:	462a      	mov	r2, r5
 8014b6a:	f000 fa06 	bl	8014f7a <_realloc_r>
 8014b6e:	4606      	mov	r6, r0
 8014b70:	2800      	cmp	r0, #0
 8014b72:	d1e0      	bne.n	8014b36 <__ssputs_r+0x5a>
 8014b74:	6921      	ldr	r1, [r4, #16]
 8014b76:	4650      	mov	r0, sl
 8014b78:	f7fe ff40 	bl	80139fc <_free_r>
 8014b7c:	230c      	movs	r3, #12
 8014b7e:	f8ca 3000 	str.w	r3, [sl]
 8014b82:	89a3      	ldrh	r3, [r4, #12]
 8014b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b88:	81a3      	strh	r3, [r4, #12]
 8014b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b8e:	e7e9      	b.n	8014b64 <__ssputs_r+0x88>

08014b90 <_svfiprintf_r>:
 8014b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b94:	4698      	mov	r8, r3
 8014b96:	898b      	ldrh	r3, [r1, #12]
 8014b98:	061b      	lsls	r3, r3, #24
 8014b9a:	b09d      	sub	sp, #116	; 0x74
 8014b9c:	4607      	mov	r7, r0
 8014b9e:	460d      	mov	r5, r1
 8014ba0:	4614      	mov	r4, r2
 8014ba2:	d50e      	bpl.n	8014bc2 <_svfiprintf_r+0x32>
 8014ba4:	690b      	ldr	r3, [r1, #16]
 8014ba6:	b963      	cbnz	r3, 8014bc2 <_svfiprintf_r+0x32>
 8014ba8:	2140      	movs	r1, #64	; 0x40
 8014baa:	f7fb fff3 	bl	8010b94 <_malloc_r>
 8014bae:	6028      	str	r0, [r5, #0]
 8014bb0:	6128      	str	r0, [r5, #16]
 8014bb2:	b920      	cbnz	r0, 8014bbe <_svfiprintf_r+0x2e>
 8014bb4:	230c      	movs	r3, #12
 8014bb6:	603b      	str	r3, [r7, #0]
 8014bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8014bbc:	e0d0      	b.n	8014d60 <_svfiprintf_r+0x1d0>
 8014bbe:	2340      	movs	r3, #64	; 0x40
 8014bc0:	616b      	str	r3, [r5, #20]
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8014bc6:	2320      	movs	r3, #32
 8014bc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014bcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8014bd0:	2330      	movs	r3, #48	; 0x30
 8014bd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014d78 <_svfiprintf_r+0x1e8>
 8014bd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014bda:	f04f 0901 	mov.w	r9, #1
 8014bde:	4623      	mov	r3, r4
 8014be0:	469a      	mov	sl, r3
 8014be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014be6:	b10a      	cbz	r2, 8014bec <_svfiprintf_r+0x5c>
 8014be8:	2a25      	cmp	r2, #37	; 0x25
 8014bea:	d1f9      	bne.n	8014be0 <_svfiprintf_r+0x50>
 8014bec:	ebba 0b04 	subs.w	fp, sl, r4
 8014bf0:	d00b      	beq.n	8014c0a <_svfiprintf_r+0x7a>
 8014bf2:	465b      	mov	r3, fp
 8014bf4:	4622      	mov	r2, r4
 8014bf6:	4629      	mov	r1, r5
 8014bf8:	4638      	mov	r0, r7
 8014bfa:	f7ff ff6f 	bl	8014adc <__ssputs_r>
 8014bfe:	3001      	adds	r0, #1
 8014c00:	f000 80a9 	beq.w	8014d56 <_svfiprintf_r+0x1c6>
 8014c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c06:	445a      	add	r2, fp
 8014c08:	9209      	str	r2, [sp, #36]	; 0x24
 8014c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	f000 80a1 	beq.w	8014d56 <_svfiprintf_r+0x1c6>
 8014c14:	2300      	movs	r3, #0
 8014c16:	f04f 32ff 	mov.w	r2, #4294967295
 8014c1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c1e:	f10a 0a01 	add.w	sl, sl, #1
 8014c22:	9304      	str	r3, [sp, #16]
 8014c24:	9307      	str	r3, [sp, #28]
 8014c26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014c2a:	931a      	str	r3, [sp, #104]	; 0x68
 8014c2c:	4654      	mov	r4, sl
 8014c2e:	2205      	movs	r2, #5
 8014c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c34:	4850      	ldr	r0, [pc, #320]	; (8014d78 <_svfiprintf_r+0x1e8>)
 8014c36:	f7eb facb 	bl	80001d0 <memchr>
 8014c3a:	9a04      	ldr	r2, [sp, #16]
 8014c3c:	b9d8      	cbnz	r0, 8014c76 <_svfiprintf_r+0xe6>
 8014c3e:	06d0      	lsls	r0, r2, #27
 8014c40:	bf44      	itt	mi
 8014c42:	2320      	movmi	r3, #32
 8014c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c48:	0711      	lsls	r1, r2, #28
 8014c4a:	bf44      	itt	mi
 8014c4c:	232b      	movmi	r3, #43	; 0x2b
 8014c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c52:	f89a 3000 	ldrb.w	r3, [sl]
 8014c56:	2b2a      	cmp	r3, #42	; 0x2a
 8014c58:	d015      	beq.n	8014c86 <_svfiprintf_r+0xf6>
 8014c5a:	9a07      	ldr	r2, [sp, #28]
 8014c5c:	4654      	mov	r4, sl
 8014c5e:	2000      	movs	r0, #0
 8014c60:	f04f 0c0a 	mov.w	ip, #10
 8014c64:	4621      	mov	r1, r4
 8014c66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c6a:	3b30      	subs	r3, #48	; 0x30
 8014c6c:	2b09      	cmp	r3, #9
 8014c6e:	d94d      	bls.n	8014d0c <_svfiprintf_r+0x17c>
 8014c70:	b1b0      	cbz	r0, 8014ca0 <_svfiprintf_r+0x110>
 8014c72:	9207      	str	r2, [sp, #28]
 8014c74:	e014      	b.n	8014ca0 <_svfiprintf_r+0x110>
 8014c76:	eba0 0308 	sub.w	r3, r0, r8
 8014c7a:	fa09 f303 	lsl.w	r3, r9, r3
 8014c7e:	4313      	orrs	r3, r2
 8014c80:	9304      	str	r3, [sp, #16]
 8014c82:	46a2      	mov	sl, r4
 8014c84:	e7d2      	b.n	8014c2c <_svfiprintf_r+0x9c>
 8014c86:	9b03      	ldr	r3, [sp, #12]
 8014c88:	1d19      	adds	r1, r3, #4
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	9103      	str	r1, [sp, #12]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	bfbb      	ittet	lt
 8014c92:	425b      	neglt	r3, r3
 8014c94:	f042 0202 	orrlt.w	r2, r2, #2
 8014c98:	9307      	strge	r3, [sp, #28]
 8014c9a:	9307      	strlt	r3, [sp, #28]
 8014c9c:	bfb8      	it	lt
 8014c9e:	9204      	strlt	r2, [sp, #16]
 8014ca0:	7823      	ldrb	r3, [r4, #0]
 8014ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8014ca4:	d10c      	bne.n	8014cc0 <_svfiprintf_r+0x130>
 8014ca6:	7863      	ldrb	r3, [r4, #1]
 8014ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8014caa:	d134      	bne.n	8014d16 <_svfiprintf_r+0x186>
 8014cac:	9b03      	ldr	r3, [sp, #12]
 8014cae:	1d1a      	adds	r2, r3, #4
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	9203      	str	r2, [sp, #12]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	bfb8      	it	lt
 8014cb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8014cbc:	3402      	adds	r4, #2
 8014cbe:	9305      	str	r3, [sp, #20]
 8014cc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014d88 <_svfiprintf_r+0x1f8>
 8014cc4:	7821      	ldrb	r1, [r4, #0]
 8014cc6:	2203      	movs	r2, #3
 8014cc8:	4650      	mov	r0, sl
 8014cca:	f7eb fa81 	bl	80001d0 <memchr>
 8014cce:	b138      	cbz	r0, 8014ce0 <_svfiprintf_r+0x150>
 8014cd0:	9b04      	ldr	r3, [sp, #16]
 8014cd2:	eba0 000a 	sub.w	r0, r0, sl
 8014cd6:	2240      	movs	r2, #64	; 0x40
 8014cd8:	4082      	lsls	r2, r0
 8014cda:	4313      	orrs	r3, r2
 8014cdc:	3401      	adds	r4, #1
 8014cde:	9304      	str	r3, [sp, #16]
 8014ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ce4:	4825      	ldr	r0, [pc, #148]	; (8014d7c <_svfiprintf_r+0x1ec>)
 8014ce6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014cea:	2206      	movs	r2, #6
 8014cec:	f7eb fa70 	bl	80001d0 <memchr>
 8014cf0:	2800      	cmp	r0, #0
 8014cf2:	d038      	beq.n	8014d66 <_svfiprintf_r+0x1d6>
 8014cf4:	4b22      	ldr	r3, [pc, #136]	; (8014d80 <_svfiprintf_r+0x1f0>)
 8014cf6:	bb1b      	cbnz	r3, 8014d40 <_svfiprintf_r+0x1b0>
 8014cf8:	9b03      	ldr	r3, [sp, #12]
 8014cfa:	3307      	adds	r3, #7
 8014cfc:	f023 0307 	bic.w	r3, r3, #7
 8014d00:	3308      	adds	r3, #8
 8014d02:	9303      	str	r3, [sp, #12]
 8014d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d06:	4433      	add	r3, r6
 8014d08:	9309      	str	r3, [sp, #36]	; 0x24
 8014d0a:	e768      	b.n	8014bde <_svfiprintf_r+0x4e>
 8014d0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d10:	460c      	mov	r4, r1
 8014d12:	2001      	movs	r0, #1
 8014d14:	e7a6      	b.n	8014c64 <_svfiprintf_r+0xd4>
 8014d16:	2300      	movs	r3, #0
 8014d18:	3401      	adds	r4, #1
 8014d1a:	9305      	str	r3, [sp, #20]
 8014d1c:	4619      	mov	r1, r3
 8014d1e:	f04f 0c0a 	mov.w	ip, #10
 8014d22:	4620      	mov	r0, r4
 8014d24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d28:	3a30      	subs	r2, #48	; 0x30
 8014d2a:	2a09      	cmp	r2, #9
 8014d2c:	d903      	bls.n	8014d36 <_svfiprintf_r+0x1a6>
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d0c6      	beq.n	8014cc0 <_svfiprintf_r+0x130>
 8014d32:	9105      	str	r1, [sp, #20]
 8014d34:	e7c4      	b.n	8014cc0 <_svfiprintf_r+0x130>
 8014d36:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d3a:	4604      	mov	r4, r0
 8014d3c:	2301      	movs	r3, #1
 8014d3e:	e7f0      	b.n	8014d22 <_svfiprintf_r+0x192>
 8014d40:	ab03      	add	r3, sp, #12
 8014d42:	9300      	str	r3, [sp, #0]
 8014d44:	462a      	mov	r2, r5
 8014d46:	4b0f      	ldr	r3, [pc, #60]	; (8014d84 <_svfiprintf_r+0x1f4>)
 8014d48:	a904      	add	r1, sp, #16
 8014d4a:	4638      	mov	r0, r7
 8014d4c:	f7fc ff56 	bl	8011bfc <_printf_float>
 8014d50:	1c42      	adds	r2, r0, #1
 8014d52:	4606      	mov	r6, r0
 8014d54:	d1d6      	bne.n	8014d04 <_svfiprintf_r+0x174>
 8014d56:	89ab      	ldrh	r3, [r5, #12]
 8014d58:	065b      	lsls	r3, r3, #25
 8014d5a:	f53f af2d 	bmi.w	8014bb8 <_svfiprintf_r+0x28>
 8014d5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d60:	b01d      	add	sp, #116	; 0x74
 8014d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d66:	ab03      	add	r3, sp, #12
 8014d68:	9300      	str	r3, [sp, #0]
 8014d6a:	462a      	mov	r2, r5
 8014d6c:	4b05      	ldr	r3, [pc, #20]	; (8014d84 <_svfiprintf_r+0x1f4>)
 8014d6e:	a904      	add	r1, sp, #16
 8014d70:	4638      	mov	r0, r7
 8014d72:	f7fd f9e7 	bl	8012144 <_printf_i>
 8014d76:	e7eb      	b.n	8014d50 <_svfiprintf_r+0x1c0>
 8014d78:	08018b84 	.word	0x08018b84
 8014d7c:	08018b8e 	.word	0x08018b8e
 8014d80:	08011bfd 	.word	0x08011bfd
 8014d84:	08014add 	.word	0x08014add
 8014d88:	08018b8a 	.word	0x08018b8a

08014d8c <__sflush_r>:
 8014d8c:	898a      	ldrh	r2, [r1, #12]
 8014d8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d92:	4605      	mov	r5, r0
 8014d94:	0710      	lsls	r0, r2, #28
 8014d96:	460c      	mov	r4, r1
 8014d98:	d458      	bmi.n	8014e4c <__sflush_r+0xc0>
 8014d9a:	684b      	ldr	r3, [r1, #4]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	dc05      	bgt.n	8014dac <__sflush_r+0x20>
 8014da0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	dc02      	bgt.n	8014dac <__sflush_r+0x20>
 8014da6:	2000      	movs	r0, #0
 8014da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014dae:	2e00      	cmp	r6, #0
 8014db0:	d0f9      	beq.n	8014da6 <__sflush_r+0x1a>
 8014db2:	2300      	movs	r3, #0
 8014db4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014db8:	682f      	ldr	r7, [r5, #0]
 8014dba:	6a21      	ldr	r1, [r4, #32]
 8014dbc:	602b      	str	r3, [r5, #0]
 8014dbe:	d032      	beq.n	8014e26 <__sflush_r+0x9a>
 8014dc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014dc2:	89a3      	ldrh	r3, [r4, #12]
 8014dc4:	075a      	lsls	r2, r3, #29
 8014dc6:	d505      	bpl.n	8014dd4 <__sflush_r+0x48>
 8014dc8:	6863      	ldr	r3, [r4, #4]
 8014dca:	1ac0      	subs	r0, r0, r3
 8014dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014dce:	b10b      	cbz	r3, 8014dd4 <__sflush_r+0x48>
 8014dd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014dd2:	1ac0      	subs	r0, r0, r3
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	4602      	mov	r2, r0
 8014dd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014dda:	6a21      	ldr	r1, [r4, #32]
 8014ddc:	4628      	mov	r0, r5
 8014dde:	47b0      	blx	r6
 8014de0:	1c43      	adds	r3, r0, #1
 8014de2:	89a3      	ldrh	r3, [r4, #12]
 8014de4:	d106      	bne.n	8014df4 <__sflush_r+0x68>
 8014de6:	6829      	ldr	r1, [r5, #0]
 8014de8:	291d      	cmp	r1, #29
 8014dea:	d82b      	bhi.n	8014e44 <__sflush_r+0xb8>
 8014dec:	4a29      	ldr	r2, [pc, #164]	; (8014e94 <__sflush_r+0x108>)
 8014dee:	410a      	asrs	r2, r1
 8014df0:	07d6      	lsls	r6, r2, #31
 8014df2:	d427      	bmi.n	8014e44 <__sflush_r+0xb8>
 8014df4:	2200      	movs	r2, #0
 8014df6:	6062      	str	r2, [r4, #4]
 8014df8:	04d9      	lsls	r1, r3, #19
 8014dfa:	6922      	ldr	r2, [r4, #16]
 8014dfc:	6022      	str	r2, [r4, #0]
 8014dfe:	d504      	bpl.n	8014e0a <__sflush_r+0x7e>
 8014e00:	1c42      	adds	r2, r0, #1
 8014e02:	d101      	bne.n	8014e08 <__sflush_r+0x7c>
 8014e04:	682b      	ldr	r3, [r5, #0]
 8014e06:	b903      	cbnz	r3, 8014e0a <__sflush_r+0x7e>
 8014e08:	6560      	str	r0, [r4, #84]	; 0x54
 8014e0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e0c:	602f      	str	r7, [r5, #0]
 8014e0e:	2900      	cmp	r1, #0
 8014e10:	d0c9      	beq.n	8014da6 <__sflush_r+0x1a>
 8014e12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e16:	4299      	cmp	r1, r3
 8014e18:	d002      	beq.n	8014e20 <__sflush_r+0x94>
 8014e1a:	4628      	mov	r0, r5
 8014e1c:	f7fe fdee 	bl	80139fc <_free_r>
 8014e20:	2000      	movs	r0, #0
 8014e22:	6360      	str	r0, [r4, #52]	; 0x34
 8014e24:	e7c0      	b.n	8014da8 <__sflush_r+0x1c>
 8014e26:	2301      	movs	r3, #1
 8014e28:	4628      	mov	r0, r5
 8014e2a:	47b0      	blx	r6
 8014e2c:	1c41      	adds	r1, r0, #1
 8014e2e:	d1c8      	bne.n	8014dc2 <__sflush_r+0x36>
 8014e30:	682b      	ldr	r3, [r5, #0]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d0c5      	beq.n	8014dc2 <__sflush_r+0x36>
 8014e36:	2b1d      	cmp	r3, #29
 8014e38:	d001      	beq.n	8014e3e <__sflush_r+0xb2>
 8014e3a:	2b16      	cmp	r3, #22
 8014e3c:	d101      	bne.n	8014e42 <__sflush_r+0xb6>
 8014e3e:	602f      	str	r7, [r5, #0]
 8014e40:	e7b1      	b.n	8014da6 <__sflush_r+0x1a>
 8014e42:	89a3      	ldrh	r3, [r4, #12]
 8014e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e48:	81a3      	strh	r3, [r4, #12]
 8014e4a:	e7ad      	b.n	8014da8 <__sflush_r+0x1c>
 8014e4c:	690f      	ldr	r7, [r1, #16]
 8014e4e:	2f00      	cmp	r7, #0
 8014e50:	d0a9      	beq.n	8014da6 <__sflush_r+0x1a>
 8014e52:	0793      	lsls	r3, r2, #30
 8014e54:	680e      	ldr	r6, [r1, #0]
 8014e56:	bf08      	it	eq
 8014e58:	694b      	ldreq	r3, [r1, #20]
 8014e5a:	600f      	str	r7, [r1, #0]
 8014e5c:	bf18      	it	ne
 8014e5e:	2300      	movne	r3, #0
 8014e60:	eba6 0807 	sub.w	r8, r6, r7
 8014e64:	608b      	str	r3, [r1, #8]
 8014e66:	f1b8 0f00 	cmp.w	r8, #0
 8014e6a:	dd9c      	ble.n	8014da6 <__sflush_r+0x1a>
 8014e6c:	6a21      	ldr	r1, [r4, #32]
 8014e6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014e70:	4643      	mov	r3, r8
 8014e72:	463a      	mov	r2, r7
 8014e74:	4628      	mov	r0, r5
 8014e76:	47b0      	blx	r6
 8014e78:	2800      	cmp	r0, #0
 8014e7a:	dc06      	bgt.n	8014e8a <__sflush_r+0xfe>
 8014e7c:	89a3      	ldrh	r3, [r4, #12]
 8014e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e82:	81a3      	strh	r3, [r4, #12]
 8014e84:	f04f 30ff 	mov.w	r0, #4294967295
 8014e88:	e78e      	b.n	8014da8 <__sflush_r+0x1c>
 8014e8a:	4407      	add	r7, r0
 8014e8c:	eba8 0800 	sub.w	r8, r8, r0
 8014e90:	e7e9      	b.n	8014e66 <__sflush_r+0xda>
 8014e92:	bf00      	nop
 8014e94:	dfbffffe 	.word	0xdfbffffe

08014e98 <_fflush_r>:
 8014e98:	b538      	push	{r3, r4, r5, lr}
 8014e9a:	690b      	ldr	r3, [r1, #16]
 8014e9c:	4605      	mov	r5, r0
 8014e9e:	460c      	mov	r4, r1
 8014ea0:	b913      	cbnz	r3, 8014ea8 <_fflush_r+0x10>
 8014ea2:	2500      	movs	r5, #0
 8014ea4:	4628      	mov	r0, r5
 8014ea6:	bd38      	pop	{r3, r4, r5, pc}
 8014ea8:	b118      	cbz	r0, 8014eb2 <_fflush_r+0x1a>
 8014eaa:	6a03      	ldr	r3, [r0, #32]
 8014eac:	b90b      	cbnz	r3, 8014eb2 <_fflush_r+0x1a>
 8014eae:	f7fd fd07 	bl	80128c0 <__sinit>
 8014eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d0f3      	beq.n	8014ea2 <_fflush_r+0xa>
 8014eba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014ebc:	07d0      	lsls	r0, r2, #31
 8014ebe:	d404      	bmi.n	8014eca <_fflush_r+0x32>
 8014ec0:	0599      	lsls	r1, r3, #22
 8014ec2:	d402      	bmi.n	8014eca <_fflush_r+0x32>
 8014ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ec6:	f7fd feda 	bl	8012c7e <__retarget_lock_acquire_recursive>
 8014eca:	4628      	mov	r0, r5
 8014ecc:	4621      	mov	r1, r4
 8014ece:	f7ff ff5d 	bl	8014d8c <__sflush_r>
 8014ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014ed4:	07da      	lsls	r2, r3, #31
 8014ed6:	4605      	mov	r5, r0
 8014ed8:	d4e4      	bmi.n	8014ea4 <_fflush_r+0xc>
 8014eda:	89a3      	ldrh	r3, [r4, #12]
 8014edc:	059b      	lsls	r3, r3, #22
 8014ede:	d4e1      	bmi.n	8014ea4 <_fflush_r+0xc>
 8014ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ee2:	f7fd fecd 	bl	8012c80 <__retarget_lock_release_recursive>
 8014ee6:	e7dd      	b.n	8014ea4 <_fflush_r+0xc>

08014ee8 <fiprintf>:
 8014ee8:	b40e      	push	{r1, r2, r3}
 8014eea:	b503      	push	{r0, r1, lr}
 8014eec:	4601      	mov	r1, r0
 8014eee:	ab03      	add	r3, sp, #12
 8014ef0:	4805      	ldr	r0, [pc, #20]	; (8014f08 <fiprintf+0x20>)
 8014ef2:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ef6:	6800      	ldr	r0, [r0, #0]
 8014ef8:	9301      	str	r3, [sp, #4]
 8014efa:	f000 f897 	bl	801502c <_vfiprintf_r>
 8014efe:	b002      	add	sp, #8
 8014f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f04:	b003      	add	sp, #12
 8014f06:	4770      	bx	lr
 8014f08:	20000310 	.word	0x20000310

08014f0c <memmove>:
 8014f0c:	4288      	cmp	r0, r1
 8014f0e:	b510      	push	{r4, lr}
 8014f10:	eb01 0402 	add.w	r4, r1, r2
 8014f14:	d902      	bls.n	8014f1c <memmove+0x10>
 8014f16:	4284      	cmp	r4, r0
 8014f18:	4623      	mov	r3, r4
 8014f1a:	d807      	bhi.n	8014f2c <memmove+0x20>
 8014f1c:	1e43      	subs	r3, r0, #1
 8014f1e:	42a1      	cmp	r1, r4
 8014f20:	d008      	beq.n	8014f34 <memmove+0x28>
 8014f22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014f26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014f2a:	e7f8      	b.n	8014f1e <memmove+0x12>
 8014f2c:	4402      	add	r2, r0
 8014f2e:	4601      	mov	r1, r0
 8014f30:	428a      	cmp	r2, r1
 8014f32:	d100      	bne.n	8014f36 <memmove+0x2a>
 8014f34:	bd10      	pop	{r4, pc}
 8014f36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014f3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014f3e:	e7f7      	b.n	8014f30 <memmove+0x24>

08014f40 <abort>:
 8014f40:	b508      	push	{r3, lr}
 8014f42:	2006      	movs	r0, #6
 8014f44:	f000 fa4a 	bl	80153dc <raise>
 8014f48:	2001      	movs	r0, #1
 8014f4a:	f7ef f9e5 	bl	8004318 <_exit>

08014f4e <_calloc_r>:
 8014f4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014f50:	fba1 2402 	umull	r2, r4, r1, r2
 8014f54:	b94c      	cbnz	r4, 8014f6a <_calloc_r+0x1c>
 8014f56:	4611      	mov	r1, r2
 8014f58:	9201      	str	r2, [sp, #4]
 8014f5a:	f7fb fe1b 	bl	8010b94 <_malloc_r>
 8014f5e:	9a01      	ldr	r2, [sp, #4]
 8014f60:	4605      	mov	r5, r0
 8014f62:	b930      	cbnz	r0, 8014f72 <_calloc_r+0x24>
 8014f64:	4628      	mov	r0, r5
 8014f66:	b003      	add	sp, #12
 8014f68:	bd30      	pop	{r4, r5, pc}
 8014f6a:	220c      	movs	r2, #12
 8014f6c:	6002      	str	r2, [r0, #0]
 8014f6e:	2500      	movs	r5, #0
 8014f70:	e7f8      	b.n	8014f64 <_calloc_r+0x16>
 8014f72:	4621      	mov	r1, r4
 8014f74:	f7fd fd71 	bl	8012a5a <memset>
 8014f78:	e7f4      	b.n	8014f64 <_calloc_r+0x16>

08014f7a <_realloc_r>:
 8014f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f7e:	4680      	mov	r8, r0
 8014f80:	4614      	mov	r4, r2
 8014f82:	460e      	mov	r6, r1
 8014f84:	b921      	cbnz	r1, 8014f90 <_realloc_r+0x16>
 8014f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f8a:	4611      	mov	r1, r2
 8014f8c:	f7fb be02 	b.w	8010b94 <_malloc_r>
 8014f90:	b92a      	cbnz	r2, 8014f9e <_realloc_r+0x24>
 8014f92:	f7fe fd33 	bl	80139fc <_free_r>
 8014f96:	4625      	mov	r5, r4
 8014f98:	4628      	mov	r0, r5
 8014f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f9e:	f000 fa39 	bl	8015414 <_malloc_usable_size_r>
 8014fa2:	4284      	cmp	r4, r0
 8014fa4:	4607      	mov	r7, r0
 8014fa6:	d802      	bhi.n	8014fae <_realloc_r+0x34>
 8014fa8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014fac:	d812      	bhi.n	8014fd4 <_realloc_r+0x5a>
 8014fae:	4621      	mov	r1, r4
 8014fb0:	4640      	mov	r0, r8
 8014fb2:	f7fb fdef 	bl	8010b94 <_malloc_r>
 8014fb6:	4605      	mov	r5, r0
 8014fb8:	2800      	cmp	r0, #0
 8014fba:	d0ed      	beq.n	8014f98 <_realloc_r+0x1e>
 8014fbc:	42bc      	cmp	r4, r7
 8014fbe:	4622      	mov	r2, r4
 8014fc0:	4631      	mov	r1, r6
 8014fc2:	bf28      	it	cs
 8014fc4:	463a      	movcs	r2, r7
 8014fc6:	f7fd fe64 	bl	8012c92 <memcpy>
 8014fca:	4631      	mov	r1, r6
 8014fcc:	4640      	mov	r0, r8
 8014fce:	f7fe fd15 	bl	80139fc <_free_r>
 8014fd2:	e7e1      	b.n	8014f98 <_realloc_r+0x1e>
 8014fd4:	4635      	mov	r5, r6
 8014fd6:	e7df      	b.n	8014f98 <_realloc_r+0x1e>

08014fd8 <__sfputc_r>:
 8014fd8:	6893      	ldr	r3, [r2, #8]
 8014fda:	3b01      	subs	r3, #1
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	b410      	push	{r4}
 8014fe0:	6093      	str	r3, [r2, #8]
 8014fe2:	da08      	bge.n	8014ff6 <__sfputc_r+0x1e>
 8014fe4:	6994      	ldr	r4, [r2, #24]
 8014fe6:	42a3      	cmp	r3, r4
 8014fe8:	db01      	blt.n	8014fee <__sfputc_r+0x16>
 8014fea:	290a      	cmp	r1, #10
 8014fec:	d103      	bne.n	8014ff6 <__sfputc_r+0x1e>
 8014fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ff2:	f000 b935 	b.w	8015260 <__swbuf_r>
 8014ff6:	6813      	ldr	r3, [r2, #0]
 8014ff8:	1c58      	adds	r0, r3, #1
 8014ffa:	6010      	str	r0, [r2, #0]
 8014ffc:	7019      	strb	r1, [r3, #0]
 8014ffe:	4608      	mov	r0, r1
 8015000:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015004:	4770      	bx	lr

08015006 <__sfputs_r>:
 8015006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015008:	4606      	mov	r6, r0
 801500a:	460f      	mov	r7, r1
 801500c:	4614      	mov	r4, r2
 801500e:	18d5      	adds	r5, r2, r3
 8015010:	42ac      	cmp	r4, r5
 8015012:	d101      	bne.n	8015018 <__sfputs_r+0x12>
 8015014:	2000      	movs	r0, #0
 8015016:	e007      	b.n	8015028 <__sfputs_r+0x22>
 8015018:	f814 1b01 	ldrb.w	r1, [r4], #1
 801501c:	463a      	mov	r2, r7
 801501e:	4630      	mov	r0, r6
 8015020:	f7ff ffda 	bl	8014fd8 <__sfputc_r>
 8015024:	1c43      	adds	r3, r0, #1
 8015026:	d1f3      	bne.n	8015010 <__sfputs_r+0xa>
 8015028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801502c <_vfiprintf_r>:
 801502c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015030:	460d      	mov	r5, r1
 8015032:	b09d      	sub	sp, #116	; 0x74
 8015034:	4614      	mov	r4, r2
 8015036:	4698      	mov	r8, r3
 8015038:	4606      	mov	r6, r0
 801503a:	b118      	cbz	r0, 8015044 <_vfiprintf_r+0x18>
 801503c:	6a03      	ldr	r3, [r0, #32]
 801503e:	b90b      	cbnz	r3, 8015044 <_vfiprintf_r+0x18>
 8015040:	f7fd fc3e 	bl	80128c0 <__sinit>
 8015044:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015046:	07d9      	lsls	r1, r3, #31
 8015048:	d405      	bmi.n	8015056 <_vfiprintf_r+0x2a>
 801504a:	89ab      	ldrh	r3, [r5, #12]
 801504c:	059a      	lsls	r2, r3, #22
 801504e:	d402      	bmi.n	8015056 <_vfiprintf_r+0x2a>
 8015050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015052:	f7fd fe14 	bl	8012c7e <__retarget_lock_acquire_recursive>
 8015056:	89ab      	ldrh	r3, [r5, #12]
 8015058:	071b      	lsls	r3, r3, #28
 801505a:	d501      	bpl.n	8015060 <_vfiprintf_r+0x34>
 801505c:	692b      	ldr	r3, [r5, #16]
 801505e:	b99b      	cbnz	r3, 8015088 <_vfiprintf_r+0x5c>
 8015060:	4629      	mov	r1, r5
 8015062:	4630      	mov	r0, r6
 8015064:	f000 f93a 	bl	80152dc <__swsetup_r>
 8015068:	b170      	cbz	r0, 8015088 <_vfiprintf_r+0x5c>
 801506a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801506c:	07dc      	lsls	r4, r3, #31
 801506e:	d504      	bpl.n	801507a <_vfiprintf_r+0x4e>
 8015070:	f04f 30ff 	mov.w	r0, #4294967295
 8015074:	b01d      	add	sp, #116	; 0x74
 8015076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801507a:	89ab      	ldrh	r3, [r5, #12]
 801507c:	0598      	lsls	r0, r3, #22
 801507e:	d4f7      	bmi.n	8015070 <_vfiprintf_r+0x44>
 8015080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015082:	f7fd fdfd 	bl	8012c80 <__retarget_lock_release_recursive>
 8015086:	e7f3      	b.n	8015070 <_vfiprintf_r+0x44>
 8015088:	2300      	movs	r3, #0
 801508a:	9309      	str	r3, [sp, #36]	; 0x24
 801508c:	2320      	movs	r3, #32
 801508e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015092:	f8cd 800c 	str.w	r8, [sp, #12]
 8015096:	2330      	movs	r3, #48	; 0x30
 8015098:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801524c <_vfiprintf_r+0x220>
 801509c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80150a0:	f04f 0901 	mov.w	r9, #1
 80150a4:	4623      	mov	r3, r4
 80150a6:	469a      	mov	sl, r3
 80150a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150ac:	b10a      	cbz	r2, 80150b2 <_vfiprintf_r+0x86>
 80150ae:	2a25      	cmp	r2, #37	; 0x25
 80150b0:	d1f9      	bne.n	80150a6 <_vfiprintf_r+0x7a>
 80150b2:	ebba 0b04 	subs.w	fp, sl, r4
 80150b6:	d00b      	beq.n	80150d0 <_vfiprintf_r+0xa4>
 80150b8:	465b      	mov	r3, fp
 80150ba:	4622      	mov	r2, r4
 80150bc:	4629      	mov	r1, r5
 80150be:	4630      	mov	r0, r6
 80150c0:	f7ff ffa1 	bl	8015006 <__sfputs_r>
 80150c4:	3001      	adds	r0, #1
 80150c6:	f000 80a9 	beq.w	801521c <_vfiprintf_r+0x1f0>
 80150ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80150cc:	445a      	add	r2, fp
 80150ce:	9209      	str	r2, [sp, #36]	; 0x24
 80150d0:	f89a 3000 	ldrb.w	r3, [sl]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	f000 80a1 	beq.w	801521c <_vfiprintf_r+0x1f0>
 80150da:	2300      	movs	r3, #0
 80150dc:	f04f 32ff 	mov.w	r2, #4294967295
 80150e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80150e4:	f10a 0a01 	add.w	sl, sl, #1
 80150e8:	9304      	str	r3, [sp, #16]
 80150ea:	9307      	str	r3, [sp, #28]
 80150ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80150f0:	931a      	str	r3, [sp, #104]	; 0x68
 80150f2:	4654      	mov	r4, sl
 80150f4:	2205      	movs	r2, #5
 80150f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80150fa:	4854      	ldr	r0, [pc, #336]	; (801524c <_vfiprintf_r+0x220>)
 80150fc:	f7eb f868 	bl	80001d0 <memchr>
 8015100:	9a04      	ldr	r2, [sp, #16]
 8015102:	b9d8      	cbnz	r0, 801513c <_vfiprintf_r+0x110>
 8015104:	06d1      	lsls	r1, r2, #27
 8015106:	bf44      	itt	mi
 8015108:	2320      	movmi	r3, #32
 801510a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801510e:	0713      	lsls	r3, r2, #28
 8015110:	bf44      	itt	mi
 8015112:	232b      	movmi	r3, #43	; 0x2b
 8015114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015118:	f89a 3000 	ldrb.w	r3, [sl]
 801511c:	2b2a      	cmp	r3, #42	; 0x2a
 801511e:	d015      	beq.n	801514c <_vfiprintf_r+0x120>
 8015120:	9a07      	ldr	r2, [sp, #28]
 8015122:	4654      	mov	r4, sl
 8015124:	2000      	movs	r0, #0
 8015126:	f04f 0c0a 	mov.w	ip, #10
 801512a:	4621      	mov	r1, r4
 801512c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015130:	3b30      	subs	r3, #48	; 0x30
 8015132:	2b09      	cmp	r3, #9
 8015134:	d94d      	bls.n	80151d2 <_vfiprintf_r+0x1a6>
 8015136:	b1b0      	cbz	r0, 8015166 <_vfiprintf_r+0x13a>
 8015138:	9207      	str	r2, [sp, #28]
 801513a:	e014      	b.n	8015166 <_vfiprintf_r+0x13a>
 801513c:	eba0 0308 	sub.w	r3, r0, r8
 8015140:	fa09 f303 	lsl.w	r3, r9, r3
 8015144:	4313      	orrs	r3, r2
 8015146:	9304      	str	r3, [sp, #16]
 8015148:	46a2      	mov	sl, r4
 801514a:	e7d2      	b.n	80150f2 <_vfiprintf_r+0xc6>
 801514c:	9b03      	ldr	r3, [sp, #12]
 801514e:	1d19      	adds	r1, r3, #4
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	9103      	str	r1, [sp, #12]
 8015154:	2b00      	cmp	r3, #0
 8015156:	bfbb      	ittet	lt
 8015158:	425b      	neglt	r3, r3
 801515a:	f042 0202 	orrlt.w	r2, r2, #2
 801515e:	9307      	strge	r3, [sp, #28]
 8015160:	9307      	strlt	r3, [sp, #28]
 8015162:	bfb8      	it	lt
 8015164:	9204      	strlt	r2, [sp, #16]
 8015166:	7823      	ldrb	r3, [r4, #0]
 8015168:	2b2e      	cmp	r3, #46	; 0x2e
 801516a:	d10c      	bne.n	8015186 <_vfiprintf_r+0x15a>
 801516c:	7863      	ldrb	r3, [r4, #1]
 801516e:	2b2a      	cmp	r3, #42	; 0x2a
 8015170:	d134      	bne.n	80151dc <_vfiprintf_r+0x1b0>
 8015172:	9b03      	ldr	r3, [sp, #12]
 8015174:	1d1a      	adds	r2, r3, #4
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	9203      	str	r2, [sp, #12]
 801517a:	2b00      	cmp	r3, #0
 801517c:	bfb8      	it	lt
 801517e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015182:	3402      	adds	r4, #2
 8015184:	9305      	str	r3, [sp, #20]
 8015186:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801525c <_vfiprintf_r+0x230>
 801518a:	7821      	ldrb	r1, [r4, #0]
 801518c:	2203      	movs	r2, #3
 801518e:	4650      	mov	r0, sl
 8015190:	f7eb f81e 	bl	80001d0 <memchr>
 8015194:	b138      	cbz	r0, 80151a6 <_vfiprintf_r+0x17a>
 8015196:	9b04      	ldr	r3, [sp, #16]
 8015198:	eba0 000a 	sub.w	r0, r0, sl
 801519c:	2240      	movs	r2, #64	; 0x40
 801519e:	4082      	lsls	r2, r0
 80151a0:	4313      	orrs	r3, r2
 80151a2:	3401      	adds	r4, #1
 80151a4:	9304      	str	r3, [sp, #16]
 80151a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80151aa:	4829      	ldr	r0, [pc, #164]	; (8015250 <_vfiprintf_r+0x224>)
 80151ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80151b0:	2206      	movs	r2, #6
 80151b2:	f7eb f80d 	bl	80001d0 <memchr>
 80151b6:	2800      	cmp	r0, #0
 80151b8:	d03f      	beq.n	801523a <_vfiprintf_r+0x20e>
 80151ba:	4b26      	ldr	r3, [pc, #152]	; (8015254 <_vfiprintf_r+0x228>)
 80151bc:	bb1b      	cbnz	r3, 8015206 <_vfiprintf_r+0x1da>
 80151be:	9b03      	ldr	r3, [sp, #12]
 80151c0:	3307      	adds	r3, #7
 80151c2:	f023 0307 	bic.w	r3, r3, #7
 80151c6:	3308      	adds	r3, #8
 80151c8:	9303      	str	r3, [sp, #12]
 80151ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151cc:	443b      	add	r3, r7
 80151ce:	9309      	str	r3, [sp, #36]	; 0x24
 80151d0:	e768      	b.n	80150a4 <_vfiprintf_r+0x78>
 80151d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80151d6:	460c      	mov	r4, r1
 80151d8:	2001      	movs	r0, #1
 80151da:	e7a6      	b.n	801512a <_vfiprintf_r+0xfe>
 80151dc:	2300      	movs	r3, #0
 80151de:	3401      	adds	r4, #1
 80151e0:	9305      	str	r3, [sp, #20]
 80151e2:	4619      	mov	r1, r3
 80151e4:	f04f 0c0a 	mov.w	ip, #10
 80151e8:	4620      	mov	r0, r4
 80151ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80151ee:	3a30      	subs	r2, #48	; 0x30
 80151f0:	2a09      	cmp	r2, #9
 80151f2:	d903      	bls.n	80151fc <_vfiprintf_r+0x1d0>
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d0c6      	beq.n	8015186 <_vfiprintf_r+0x15a>
 80151f8:	9105      	str	r1, [sp, #20]
 80151fa:	e7c4      	b.n	8015186 <_vfiprintf_r+0x15a>
 80151fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8015200:	4604      	mov	r4, r0
 8015202:	2301      	movs	r3, #1
 8015204:	e7f0      	b.n	80151e8 <_vfiprintf_r+0x1bc>
 8015206:	ab03      	add	r3, sp, #12
 8015208:	9300      	str	r3, [sp, #0]
 801520a:	462a      	mov	r2, r5
 801520c:	4b12      	ldr	r3, [pc, #72]	; (8015258 <_vfiprintf_r+0x22c>)
 801520e:	a904      	add	r1, sp, #16
 8015210:	4630      	mov	r0, r6
 8015212:	f7fc fcf3 	bl	8011bfc <_printf_float>
 8015216:	4607      	mov	r7, r0
 8015218:	1c78      	adds	r0, r7, #1
 801521a:	d1d6      	bne.n	80151ca <_vfiprintf_r+0x19e>
 801521c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801521e:	07d9      	lsls	r1, r3, #31
 8015220:	d405      	bmi.n	801522e <_vfiprintf_r+0x202>
 8015222:	89ab      	ldrh	r3, [r5, #12]
 8015224:	059a      	lsls	r2, r3, #22
 8015226:	d402      	bmi.n	801522e <_vfiprintf_r+0x202>
 8015228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801522a:	f7fd fd29 	bl	8012c80 <__retarget_lock_release_recursive>
 801522e:	89ab      	ldrh	r3, [r5, #12]
 8015230:	065b      	lsls	r3, r3, #25
 8015232:	f53f af1d 	bmi.w	8015070 <_vfiprintf_r+0x44>
 8015236:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015238:	e71c      	b.n	8015074 <_vfiprintf_r+0x48>
 801523a:	ab03      	add	r3, sp, #12
 801523c:	9300      	str	r3, [sp, #0]
 801523e:	462a      	mov	r2, r5
 8015240:	4b05      	ldr	r3, [pc, #20]	; (8015258 <_vfiprintf_r+0x22c>)
 8015242:	a904      	add	r1, sp, #16
 8015244:	4630      	mov	r0, r6
 8015246:	f7fc ff7d 	bl	8012144 <_printf_i>
 801524a:	e7e4      	b.n	8015216 <_vfiprintf_r+0x1ea>
 801524c:	08018b84 	.word	0x08018b84
 8015250:	08018b8e 	.word	0x08018b8e
 8015254:	08011bfd 	.word	0x08011bfd
 8015258:	08015007 	.word	0x08015007
 801525c:	08018b8a 	.word	0x08018b8a

08015260 <__swbuf_r>:
 8015260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015262:	460e      	mov	r6, r1
 8015264:	4614      	mov	r4, r2
 8015266:	4605      	mov	r5, r0
 8015268:	b118      	cbz	r0, 8015272 <__swbuf_r+0x12>
 801526a:	6a03      	ldr	r3, [r0, #32]
 801526c:	b90b      	cbnz	r3, 8015272 <__swbuf_r+0x12>
 801526e:	f7fd fb27 	bl	80128c0 <__sinit>
 8015272:	69a3      	ldr	r3, [r4, #24]
 8015274:	60a3      	str	r3, [r4, #8]
 8015276:	89a3      	ldrh	r3, [r4, #12]
 8015278:	071a      	lsls	r2, r3, #28
 801527a:	d525      	bpl.n	80152c8 <__swbuf_r+0x68>
 801527c:	6923      	ldr	r3, [r4, #16]
 801527e:	b31b      	cbz	r3, 80152c8 <__swbuf_r+0x68>
 8015280:	6823      	ldr	r3, [r4, #0]
 8015282:	6922      	ldr	r2, [r4, #16]
 8015284:	1a98      	subs	r0, r3, r2
 8015286:	6963      	ldr	r3, [r4, #20]
 8015288:	b2f6      	uxtb	r6, r6
 801528a:	4283      	cmp	r3, r0
 801528c:	4637      	mov	r7, r6
 801528e:	dc04      	bgt.n	801529a <__swbuf_r+0x3a>
 8015290:	4621      	mov	r1, r4
 8015292:	4628      	mov	r0, r5
 8015294:	f7ff fe00 	bl	8014e98 <_fflush_r>
 8015298:	b9e0      	cbnz	r0, 80152d4 <__swbuf_r+0x74>
 801529a:	68a3      	ldr	r3, [r4, #8]
 801529c:	3b01      	subs	r3, #1
 801529e:	60a3      	str	r3, [r4, #8]
 80152a0:	6823      	ldr	r3, [r4, #0]
 80152a2:	1c5a      	adds	r2, r3, #1
 80152a4:	6022      	str	r2, [r4, #0]
 80152a6:	701e      	strb	r6, [r3, #0]
 80152a8:	6962      	ldr	r2, [r4, #20]
 80152aa:	1c43      	adds	r3, r0, #1
 80152ac:	429a      	cmp	r2, r3
 80152ae:	d004      	beq.n	80152ba <__swbuf_r+0x5a>
 80152b0:	89a3      	ldrh	r3, [r4, #12]
 80152b2:	07db      	lsls	r3, r3, #31
 80152b4:	d506      	bpl.n	80152c4 <__swbuf_r+0x64>
 80152b6:	2e0a      	cmp	r6, #10
 80152b8:	d104      	bne.n	80152c4 <__swbuf_r+0x64>
 80152ba:	4621      	mov	r1, r4
 80152bc:	4628      	mov	r0, r5
 80152be:	f7ff fdeb 	bl	8014e98 <_fflush_r>
 80152c2:	b938      	cbnz	r0, 80152d4 <__swbuf_r+0x74>
 80152c4:	4638      	mov	r0, r7
 80152c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152c8:	4621      	mov	r1, r4
 80152ca:	4628      	mov	r0, r5
 80152cc:	f000 f806 	bl	80152dc <__swsetup_r>
 80152d0:	2800      	cmp	r0, #0
 80152d2:	d0d5      	beq.n	8015280 <__swbuf_r+0x20>
 80152d4:	f04f 37ff 	mov.w	r7, #4294967295
 80152d8:	e7f4      	b.n	80152c4 <__swbuf_r+0x64>
	...

080152dc <__swsetup_r>:
 80152dc:	b538      	push	{r3, r4, r5, lr}
 80152de:	4b2a      	ldr	r3, [pc, #168]	; (8015388 <__swsetup_r+0xac>)
 80152e0:	4605      	mov	r5, r0
 80152e2:	6818      	ldr	r0, [r3, #0]
 80152e4:	460c      	mov	r4, r1
 80152e6:	b118      	cbz	r0, 80152f0 <__swsetup_r+0x14>
 80152e8:	6a03      	ldr	r3, [r0, #32]
 80152ea:	b90b      	cbnz	r3, 80152f0 <__swsetup_r+0x14>
 80152ec:	f7fd fae8 	bl	80128c0 <__sinit>
 80152f0:	89a3      	ldrh	r3, [r4, #12]
 80152f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80152f6:	0718      	lsls	r0, r3, #28
 80152f8:	d422      	bmi.n	8015340 <__swsetup_r+0x64>
 80152fa:	06d9      	lsls	r1, r3, #27
 80152fc:	d407      	bmi.n	801530e <__swsetup_r+0x32>
 80152fe:	2309      	movs	r3, #9
 8015300:	602b      	str	r3, [r5, #0]
 8015302:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015306:	81a3      	strh	r3, [r4, #12]
 8015308:	f04f 30ff 	mov.w	r0, #4294967295
 801530c:	e034      	b.n	8015378 <__swsetup_r+0x9c>
 801530e:	0758      	lsls	r0, r3, #29
 8015310:	d512      	bpl.n	8015338 <__swsetup_r+0x5c>
 8015312:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015314:	b141      	cbz	r1, 8015328 <__swsetup_r+0x4c>
 8015316:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801531a:	4299      	cmp	r1, r3
 801531c:	d002      	beq.n	8015324 <__swsetup_r+0x48>
 801531e:	4628      	mov	r0, r5
 8015320:	f7fe fb6c 	bl	80139fc <_free_r>
 8015324:	2300      	movs	r3, #0
 8015326:	6363      	str	r3, [r4, #52]	; 0x34
 8015328:	89a3      	ldrh	r3, [r4, #12]
 801532a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801532e:	81a3      	strh	r3, [r4, #12]
 8015330:	2300      	movs	r3, #0
 8015332:	6063      	str	r3, [r4, #4]
 8015334:	6923      	ldr	r3, [r4, #16]
 8015336:	6023      	str	r3, [r4, #0]
 8015338:	89a3      	ldrh	r3, [r4, #12]
 801533a:	f043 0308 	orr.w	r3, r3, #8
 801533e:	81a3      	strh	r3, [r4, #12]
 8015340:	6923      	ldr	r3, [r4, #16]
 8015342:	b94b      	cbnz	r3, 8015358 <__swsetup_r+0x7c>
 8015344:	89a3      	ldrh	r3, [r4, #12]
 8015346:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801534a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801534e:	d003      	beq.n	8015358 <__swsetup_r+0x7c>
 8015350:	4621      	mov	r1, r4
 8015352:	4628      	mov	r0, r5
 8015354:	f000 f88c 	bl	8015470 <__smakebuf_r>
 8015358:	89a0      	ldrh	r0, [r4, #12]
 801535a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801535e:	f010 0301 	ands.w	r3, r0, #1
 8015362:	d00a      	beq.n	801537a <__swsetup_r+0x9e>
 8015364:	2300      	movs	r3, #0
 8015366:	60a3      	str	r3, [r4, #8]
 8015368:	6963      	ldr	r3, [r4, #20]
 801536a:	425b      	negs	r3, r3
 801536c:	61a3      	str	r3, [r4, #24]
 801536e:	6923      	ldr	r3, [r4, #16]
 8015370:	b943      	cbnz	r3, 8015384 <__swsetup_r+0xa8>
 8015372:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015376:	d1c4      	bne.n	8015302 <__swsetup_r+0x26>
 8015378:	bd38      	pop	{r3, r4, r5, pc}
 801537a:	0781      	lsls	r1, r0, #30
 801537c:	bf58      	it	pl
 801537e:	6963      	ldrpl	r3, [r4, #20]
 8015380:	60a3      	str	r3, [r4, #8]
 8015382:	e7f4      	b.n	801536e <__swsetup_r+0x92>
 8015384:	2000      	movs	r0, #0
 8015386:	e7f7      	b.n	8015378 <__swsetup_r+0x9c>
 8015388:	20000310 	.word	0x20000310

0801538c <_raise_r>:
 801538c:	291f      	cmp	r1, #31
 801538e:	b538      	push	{r3, r4, r5, lr}
 8015390:	4604      	mov	r4, r0
 8015392:	460d      	mov	r5, r1
 8015394:	d904      	bls.n	80153a0 <_raise_r+0x14>
 8015396:	2316      	movs	r3, #22
 8015398:	6003      	str	r3, [r0, #0]
 801539a:	f04f 30ff 	mov.w	r0, #4294967295
 801539e:	bd38      	pop	{r3, r4, r5, pc}
 80153a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80153a2:	b112      	cbz	r2, 80153aa <_raise_r+0x1e>
 80153a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80153a8:	b94b      	cbnz	r3, 80153be <_raise_r+0x32>
 80153aa:	4620      	mov	r0, r4
 80153ac:	f000 f830 	bl	8015410 <_getpid_r>
 80153b0:	462a      	mov	r2, r5
 80153b2:	4601      	mov	r1, r0
 80153b4:	4620      	mov	r0, r4
 80153b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153ba:	f000 b817 	b.w	80153ec <_kill_r>
 80153be:	2b01      	cmp	r3, #1
 80153c0:	d00a      	beq.n	80153d8 <_raise_r+0x4c>
 80153c2:	1c59      	adds	r1, r3, #1
 80153c4:	d103      	bne.n	80153ce <_raise_r+0x42>
 80153c6:	2316      	movs	r3, #22
 80153c8:	6003      	str	r3, [r0, #0]
 80153ca:	2001      	movs	r0, #1
 80153cc:	e7e7      	b.n	801539e <_raise_r+0x12>
 80153ce:	2400      	movs	r4, #0
 80153d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80153d4:	4628      	mov	r0, r5
 80153d6:	4798      	blx	r3
 80153d8:	2000      	movs	r0, #0
 80153da:	e7e0      	b.n	801539e <_raise_r+0x12>

080153dc <raise>:
 80153dc:	4b02      	ldr	r3, [pc, #8]	; (80153e8 <raise+0xc>)
 80153de:	4601      	mov	r1, r0
 80153e0:	6818      	ldr	r0, [r3, #0]
 80153e2:	f7ff bfd3 	b.w	801538c <_raise_r>
 80153e6:	bf00      	nop
 80153e8:	20000310 	.word	0x20000310

080153ec <_kill_r>:
 80153ec:	b538      	push	{r3, r4, r5, lr}
 80153ee:	4d07      	ldr	r5, [pc, #28]	; (801540c <_kill_r+0x20>)
 80153f0:	2300      	movs	r3, #0
 80153f2:	4604      	mov	r4, r0
 80153f4:	4608      	mov	r0, r1
 80153f6:	4611      	mov	r1, r2
 80153f8:	602b      	str	r3, [r5, #0]
 80153fa:	f7ee ff7d 	bl	80042f8 <_kill>
 80153fe:	1c43      	adds	r3, r0, #1
 8015400:	d102      	bne.n	8015408 <_kill_r+0x1c>
 8015402:	682b      	ldr	r3, [r5, #0]
 8015404:	b103      	cbz	r3, 8015408 <_kill_r+0x1c>
 8015406:	6023      	str	r3, [r4, #0]
 8015408:	bd38      	pop	{r3, r4, r5, pc}
 801540a:	bf00      	nop
 801540c:	200015d0 	.word	0x200015d0

08015410 <_getpid_r>:
 8015410:	f7ee bf6a 	b.w	80042e8 <_getpid>

08015414 <_malloc_usable_size_r>:
 8015414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015418:	1f18      	subs	r0, r3, #4
 801541a:	2b00      	cmp	r3, #0
 801541c:	bfbc      	itt	lt
 801541e:	580b      	ldrlt	r3, [r1, r0]
 8015420:	18c0      	addlt	r0, r0, r3
 8015422:	4770      	bx	lr

08015424 <__swhatbuf_r>:
 8015424:	b570      	push	{r4, r5, r6, lr}
 8015426:	460c      	mov	r4, r1
 8015428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801542c:	2900      	cmp	r1, #0
 801542e:	b096      	sub	sp, #88	; 0x58
 8015430:	4615      	mov	r5, r2
 8015432:	461e      	mov	r6, r3
 8015434:	da0d      	bge.n	8015452 <__swhatbuf_r+0x2e>
 8015436:	89a3      	ldrh	r3, [r4, #12]
 8015438:	f013 0f80 	tst.w	r3, #128	; 0x80
 801543c:	f04f 0100 	mov.w	r1, #0
 8015440:	bf0c      	ite	eq
 8015442:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015446:	2340      	movne	r3, #64	; 0x40
 8015448:	2000      	movs	r0, #0
 801544a:	6031      	str	r1, [r6, #0]
 801544c:	602b      	str	r3, [r5, #0]
 801544e:	b016      	add	sp, #88	; 0x58
 8015450:	bd70      	pop	{r4, r5, r6, pc}
 8015452:	466a      	mov	r2, sp
 8015454:	f000 f848 	bl	80154e8 <_fstat_r>
 8015458:	2800      	cmp	r0, #0
 801545a:	dbec      	blt.n	8015436 <__swhatbuf_r+0x12>
 801545c:	9901      	ldr	r1, [sp, #4]
 801545e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015462:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015466:	4259      	negs	r1, r3
 8015468:	4159      	adcs	r1, r3
 801546a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801546e:	e7eb      	b.n	8015448 <__swhatbuf_r+0x24>

08015470 <__smakebuf_r>:
 8015470:	898b      	ldrh	r3, [r1, #12]
 8015472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015474:	079d      	lsls	r5, r3, #30
 8015476:	4606      	mov	r6, r0
 8015478:	460c      	mov	r4, r1
 801547a:	d507      	bpl.n	801548c <__smakebuf_r+0x1c>
 801547c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015480:	6023      	str	r3, [r4, #0]
 8015482:	6123      	str	r3, [r4, #16]
 8015484:	2301      	movs	r3, #1
 8015486:	6163      	str	r3, [r4, #20]
 8015488:	b002      	add	sp, #8
 801548a:	bd70      	pop	{r4, r5, r6, pc}
 801548c:	ab01      	add	r3, sp, #4
 801548e:	466a      	mov	r2, sp
 8015490:	f7ff ffc8 	bl	8015424 <__swhatbuf_r>
 8015494:	9900      	ldr	r1, [sp, #0]
 8015496:	4605      	mov	r5, r0
 8015498:	4630      	mov	r0, r6
 801549a:	f7fb fb7b 	bl	8010b94 <_malloc_r>
 801549e:	b948      	cbnz	r0, 80154b4 <__smakebuf_r+0x44>
 80154a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154a4:	059a      	lsls	r2, r3, #22
 80154a6:	d4ef      	bmi.n	8015488 <__smakebuf_r+0x18>
 80154a8:	f023 0303 	bic.w	r3, r3, #3
 80154ac:	f043 0302 	orr.w	r3, r3, #2
 80154b0:	81a3      	strh	r3, [r4, #12]
 80154b2:	e7e3      	b.n	801547c <__smakebuf_r+0xc>
 80154b4:	89a3      	ldrh	r3, [r4, #12]
 80154b6:	6020      	str	r0, [r4, #0]
 80154b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154bc:	81a3      	strh	r3, [r4, #12]
 80154be:	9b00      	ldr	r3, [sp, #0]
 80154c0:	6163      	str	r3, [r4, #20]
 80154c2:	9b01      	ldr	r3, [sp, #4]
 80154c4:	6120      	str	r0, [r4, #16]
 80154c6:	b15b      	cbz	r3, 80154e0 <__smakebuf_r+0x70>
 80154c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154cc:	4630      	mov	r0, r6
 80154ce:	f000 f81d 	bl	801550c <_isatty_r>
 80154d2:	b128      	cbz	r0, 80154e0 <__smakebuf_r+0x70>
 80154d4:	89a3      	ldrh	r3, [r4, #12]
 80154d6:	f023 0303 	bic.w	r3, r3, #3
 80154da:	f043 0301 	orr.w	r3, r3, #1
 80154de:	81a3      	strh	r3, [r4, #12]
 80154e0:	89a3      	ldrh	r3, [r4, #12]
 80154e2:	431d      	orrs	r5, r3
 80154e4:	81a5      	strh	r5, [r4, #12]
 80154e6:	e7cf      	b.n	8015488 <__smakebuf_r+0x18>

080154e8 <_fstat_r>:
 80154e8:	b538      	push	{r3, r4, r5, lr}
 80154ea:	4d07      	ldr	r5, [pc, #28]	; (8015508 <_fstat_r+0x20>)
 80154ec:	2300      	movs	r3, #0
 80154ee:	4604      	mov	r4, r0
 80154f0:	4608      	mov	r0, r1
 80154f2:	4611      	mov	r1, r2
 80154f4:	602b      	str	r3, [r5, #0]
 80154f6:	f7ee ff5e 	bl	80043b6 <_fstat>
 80154fa:	1c43      	adds	r3, r0, #1
 80154fc:	d102      	bne.n	8015504 <_fstat_r+0x1c>
 80154fe:	682b      	ldr	r3, [r5, #0]
 8015500:	b103      	cbz	r3, 8015504 <_fstat_r+0x1c>
 8015502:	6023      	str	r3, [r4, #0]
 8015504:	bd38      	pop	{r3, r4, r5, pc}
 8015506:	bf00      	nop
 8015508:	200015d0 	.word	0x200015d0

0801550c <_isatty_r>:
 801550c:	b538      	push	{r3, r4, r5, lr}
 801550e:	4d06      	ldr	r5, [pc, #24]	; (8015528 <_isatty_r+0x1c>)
 8015510:	2300      	movs	r3, #0
 8015512:	4604      	mov	r4, r0
 8015514:	4608      	mov	r0, r1
 8015516:	602b      	str	r3, [r5, #0]
 8015518:	f7ee ff5d 	bl	80043d6 <_isatty>
 801551c:	1c43      	adds	r3, r0, #1
 801551e:	d102      	bne.n	8015526 <_isatty_r+0x1a>
 8015520:	682b      	ldr	r3, [r5, #0]
 8015522:	b103      	cbz	r3, 8015526 <_isatty_r+0x1a>
 8015524:	6023      	str	r3, [r4, #0]
 8015526:	bd38      	pop	{r3, r4, r5, pc}
 8015528:	200015d0 	.word	0x200015d0
 801552c:	00000000 	.word	0x00000000

08015530 <cos>:
 8015530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015532:	ec53 2b10 	vmov	r2, r3, d0
 8015536:	4826      	ldr	r0, [pc, #152]	; (80155d0 <cos+0xa0>)
 8015538:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801553c:	4281      	cmp	r1, r0
 801553e:	dc06      	bgt.n	801554e <cos+0x1e>
 8015540:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80155c8 <cos+0x98>
 8015544:	b005      	add	sp, #20
 8015546:	f85d eb04 	ldr.w	lr, [sp], #4
 801554a:	f000 b961 	b.w	8015810 <__kernel_cos>
 801554e:	4821      	ldr	r0, [pc, #132]	; (80155d4 <cos+0xa4>)
 8015550:	4281      	cmp	r1, r0
 8015552:	dd09      	ble.n	8015568 <cos+0x38>
 8015554:	ee10 0a10 	vmov	r0, s0
 8015558:	4619      	mov	r1, r3
 801555a:	f7ea fe95 	bl	8000288 <__aeabi_dsub>
 801555e:	ec41 0b10 	vmov	d0, r0, r1
 8015562:	b005      	add	sp, #20
 8015564:	f85d fb04 	ldr.w	pc, [sp], #4
 8015568:	4668      	mov	r0, sp
 801556a:	f000 fad9 	bl	8015b20 <__ieee754_rem_pio2>
 801556e:	f000 0003 	and.w	r0, r0, #3
 8015572:	2801      	cmp	r0, #1
 8015574:	d00b      	beq.n	801558e <cos+0x5e>
 8015576:	2802      	cmp	r0, #2
 8015578:	d016      	beq.n	80155a8 <cos+0x78>
 801557a:	b9e0      	cbnz	r0, 80155b6 <cos+0x86>
 801557c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015580:	ed9d 0b00 	vldr	d0, [sp]
 8015584:	f000 f944 	bl	8015810 <__kernel_cos>
 8015588:	ec51 0b10 	vmov	r0, r1, d0
 801558c:	e7e7      	b.n	801555e <cos+0x2e>
 801558e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015592:	ed9d 0b00 	vldr	d0, [sp]
 8015596:	f000 fa03 	bl	80159a0 <__kernel_sin>
 801559a:	ec53 2b10 	vmov	r2, r3, d0
 801559e:	ee10 0a10 	vmov	r0, s0
 80155a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80155a6:	e7da      	b.n	801555e <cos+0x2e>
 80155a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80155ac:	ed9d 0b00 	vldr	d0, [sp]
 80155b0:	f000 f92e 	bl	8015810 <__kernel_cos>
 80155b4:	e7f1      	b.n	801559a <cos+0x6a>
 80155b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80155ba:	ed9d 0b00 	vldr	d0, [sp]
 80155be:	2001      	movs	r0, #1
 80155c0:	f000 f9ee 	bl	80159a0 <__kernel_sin>
 80155c4:	e7e0      	b.n	8015588 <cos+0x58>
 80155c6:	bf00      	nop
	...
 80155d0:	3fe921fb 	.word	0x3fe921fb
 80155d4:	7fefffff 	.word	0x7fefffff

080155d8 <sin>:
 80155d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80155da:	ec53 2b10 	vmov	r2, r3, d0
 80155de:	4828      	ldr	r0, [pc, #160]	; (8015680 <sin+0xa8>)
 80155e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80155e4:	4281      	cmp	r1, r0
 80155e6:	dc07      	bgt.n	80155f8 <sin+0x20>
 80155e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8015678 <sin+0xa0>
 80155ec:	2000      	movs	r0, #0
 80155ee:	b005      	add	sp, #20
 80155f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80155f4:	f000 b9d4 	b.w	80159a0 <__kernel_sin>
 80155f8:	4822      	ldr	r0, [pc, #136]	; (8015684 <sin+0xac>)
 80155fa:	4281      	cmp	r1, r0
 80155fc:	dd09      	ble.n	8015612 <sin+0x3a>
 80155fe:	ee10 0a10 	vmov	r0, s0
 8015602:	4619      	mov	r1, r3
 8015604:	f7ea fe40 	bl	8000288 <__aeabi_dsub>
 8015608:	ec41 0b10 	vmov	d0, r0, r1
 801560c:	b005      	add	sp, #20
 801560e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015612:	4668      	mov	r0, sp
 8015614:	f000 fa84 	bl	8015b20 <__ieee754_rem_pio2>
 8015618:	f000 0003 	and.w	r0, r0, #3
 801561c:	2801      	cmp	r0, #1
 801561e:	d00c      	beq.n	801563a <sin+0x62>
 8015620:	2802      	cmp	r0, #2
 8015622:	d011      	beq.n	8015648 <sin+0x70>
 8015624:	b9f0      	cbnz	r0, 8015664 <sin+0x8c>
 8015626:	ed9d 1b02 	vldr	d1, [sp, #8]
 801562a:	ed9d 0b00 	vldr	d0, [sp]
 801562e:	2001      	movs	r0, #1
 8015630:	f000 f9b6 	bl	80159a0 <__kernel_sin>
 8015634:	ec51 0b10 	vmov	r0, r1, d0
 8015638:	e7e6      	b.n	8015608 <sin+0x30>
 801563a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801563e:	ed9d 0b00 	vldr	d0, [sp]
 8015642:	f000 f8e5 	bl	8015810 <__kernel_cos>
 8015646:	e7f5      	b.n	8015634 <sin+0x5c>
 8015648:	ed9d 1b02 	vldr	d1, [sp, #8]
 801564c:	ed9d 0b00 	vldr	d0, [sp]
 8015650:	2001      	movs	r0, #1
 8015652:	f000 f9a5 	bl	80159a0 <__kernel_sin>
 8015656:	ec53 2b10 	vmov	r2, r3, d0
 801565a:	ee10 0a10 	vmov	r0, s0
 801565e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015662:	e7d1      	b.n	8015608 <sin+0x30>
 8015664:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015668:	ed9d 0b00 	vldr	d0, [sp]
 801566c:	f000 f8d0 	bl	8015810 <__kernel_cos>
 8015670:	e7f1      	b.n	8015656 <sin+0x7e>
 8015672:	bf00      	nop
 8015674:	f3af 8000 	nop.w
	...
 8015680:	3fe921fb 	.word	0x3fe921fb
 8015684:	7fefffff 	.word	0x7fefffff

08015688 <expf>:
 8015688:	b508      	push	{r3, lr}
 801568a:	ed2d 8b02 	vpush	{d8}
 801568e:	eef0 8a40 	vmov.f32	s17, s0
 8015692:	f000 fc55 	bl	8015f40 <__ieee754_expf>
 8015696:	eeb0 8a40 	vmov.f32	s16, s0
 801569a:	eeb0 0a68 	vmov.f32	s0, s17
 801569e:	f000 f829 	bl	80156f4 <finitef>
 80156a2:	b160      	cbz	r0, 80156be <expf+0x36>
 80156a4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80156e4 <expf+0x5c>
 80156a8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80156ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156b0:	dd0a      	ble.n	80156c8 <expf+0x40>
 80156b2:	f7fd fab9 	bl	8012c28 <__errno>
 80156b6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80156e8 <expf+0x60>
 80156ba:	2322      	movs	r3, #34	; 0x22
 80156bc:	6003      	str	r3, [r0, #0]
 80156be:	eeb0 0a48 	vmov.f32	s0, s16
 80156c2:	ecbd 8b02 	vpop	{d8}
 80156c6:	bd08      	pop	{r3, pc}
 80156c8:	eddf 7a08 	vldr	s15, [pc, #32]	; 80156ec <expf+0x64>
 80156cc:	eef4 8ae7 	vcmpe.f32	s17, s15
 80156d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156d4:	d5f3      	bpl.n	80156be <expf+0x36>
 80156d6:	f7fd faa7 	bl	8012c28 <__errno>
 80156da:	2322      	movs	r3, #34	; 0x22
 80156dc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80156f0 <expf+0x68>
 80156e0:	6003      	str	r3, [r0, #0]
 80156e2:	e7ec      	b.n	80156be <expf+0x36>
 80156e4:	42b17217 	.word	0x42b17217
 80156e8:	7f800000 	.word	0x7f800000
 80156ec:	c2cff1b5 	.word	0xc2cff1b5
 80156f0:	00000000 	.word	0x00000000

080156f4 <finitef>:
 80156f4:	b082      	sub	sp, #8
 80156f6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80156fa:	9801      	ldr	r0, [sp, #4]
 80156fc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015700:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8015704:	bfac      	ite	ge
 8015706:	2000      	movge	r0, #0
 8015708:	2001      	movlt	r0, #1
 801570a:	b002      	add	sp, #8
 801570c:	4770      	bx	lr
	...

08015710 <floor>:
 8015710:	ec51 0b10 	vmov	r0, r1, d0
 8015714:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801571c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8015720:	2e13      	cmp	r6, #19
 8015722:	ee10 5a10 	vmov	r5, s0
 8015726:	ee10 8a10 	vmov	r8, s0
 801572a:	460c      	mov	r4, r1
 801572c:	dc31      	bgt.n	8015792 <floor+0x82>
 801572e:	2e00      	cmp	r6, #0
 8015730:	da14      	bge.n	801575c <floor+0x4c>
 8015732:	a333      	add	r3, pc, #204	; (adr r3, 8015800 <floor+0xf0>)
 8015734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015738:	f7ea fda8 	bl	800028c <__adddf3>
 801573c:	2200      	movs	r2, #0
 801573e:	2300      	movs	r3, #0
 8015740:	f7eb f9ea 	bl	8000b18 <__aeabi_dcmpgt>
 8015744:	b138      	cbz	r0, 8015756 <floor+0x46>
 8015746:	2c00      	cmp	r4, #0
 8015748:	da53      	bge.n	80157f2 <floor+0xe2>
 801574a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801574e:	4325      	orrs	r5, r4
 8015750:	d052      	beq.n	80157f8 <floor+0xe8>
 8015752:	4c2d      	ldr	r4, [pc, #180]	; (8015808 <floor+0xf8>)
 8015754:	2500      	movs	r5, #0
 8015756:	4621      	mov	r1, r4
 8015758:	4628      	mov	r0, r5
 801575a:	e024      	b.n	80157a6 <floor+0x96>
 801575c:	4f2b      	ldr	r7, [pc, #172]	; (801580c <floor+0xfc>)
 801575e:	4137      	asrs	r7, r6
 8015760:	ea01 0307 	and.w	r3, r1, r7
 8015764:	4303      	orrs	r3, r0
 8015766:	d01e      	beq.n	80157a6 <floor+0x96>
 8015768:	a325      	add	r3, pc, #148	; (adr r3, 8015800 <floor+0xf0>)
 801576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801576e:	f7ea fd8d 	bl	800028c <__adddf3>
 8015772:	2200      	movs	r2, #0
 8015774:	2300      	movs	r3, #0
 8015776:	f7eb f9cf 	bl	8000b18 <__aeabi_dcmpgt>
 801577a:	2800      	cmp	r0, #0
 801577c:	d0eb      	beq.n	8015756 <floor+0x46>
 801577e:	2c00      	cmp	r4, #0
 8015780:	bfbe      	ittt	lt
 8015782:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015786:	4133      	asrlt	r3, r6
 8015788:	18e4      	addlt	r4, r4, r3
 801578a:	ea24 0407 	bic.w	r4, r4, r7
 801578e:	2500      	movs	r5, #0
 8015790:	e7e1      	b.n	8015756 <floor+0x46>
 8015792:	2e33      	cmp	r6, #51	; 0x33
 8015794:	dd0b      	ble.n	80157ae <floor+0x9e>
 8015796:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801579a:	d104      	bne.n	80157a6 <floor+0x96>
 801579c:	ee10 2a10 	vmov	r2, s0
 80157a0:	460b      	mov	r3, r1
 80157a2:	f7ea fd73 	bl	800028c <__adddf3>
 80157a6:	ec41 0b10 	vmov	d0, r0, r1
 80157aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157ae:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80157b2:	f04f 37ff 	mov.w	r7, #4294967295
 80157b6:	40df      	lsrs	r7, r3
 80157b8:	4238      	tst	r0, r7
 80157ba:	d0f4      	beq.n	80157a6 <floor+0x96>
 80157bc:	a310      	add	r3, pc, #64	; (adr r3, 8015800 <floor+0xf0>)
 80157be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c2:	f7ea fd63 	bl	800028c <__adddf3>
 80157c6:	2200      	movs	r2, #0
 80157c8:	2300      	movs	r3, #0
 80157ca:	f7eb f9a5 	bl	8000b18 <__aeabi_dcmpgt>
 80157ce:	2800      	cmp	r0, #0
 80157d0:	d0c1      	beq.n	8015756 <floor+0x46>
 80157d2:	2c00      	cmp	r4, #0
 80157d4:	da0a      	bge.n	80157ec <floor+0xdc>
 80157d6:	2e14      	cmp	r6, #20
 80157d8:	d101      	bne.n	80157de <floor+0xce>
 80157da:	3401      	adds	r4, #1
 80157dc:	e006      	b.n	80157ec <floor+0xdc>
 80157de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80157e2:	2301      	movs	r3, #1
 80157e4:	40b3      	lsls	r3, r6
 80157e6:	441d      	add	r5, r3
 80157e8:	45a8      	cmp	r8, r5
 80157ea:	d8f6      	bhi.n	80157da <floor+0xca>
 80157ec:	ea25 0507 	bic.w	r5, r5, r7
 80157f0:	e7b1      	b.n	8015756 <floor+0x46>
 80157f2:	2500      	movs	r5, #0
 80157f4:	462c      	mov	r4, r5
 80157f6:	e7ae      	b.n	8015756 <floor+0x46>
 80157f8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80157fc:	e7ab      	b.n	8015756 <floor+0x46>
 80157fe:	bf00      	nop
 8015800:	8800759c 	.word	0x8800759c
 8015804:	7e37e43c 	.word	0x7e37e43c
 8015808:	bff00000 	.word	0xbff00000
 801580c:	000fffff 	.word	0x000fffff

08015810 <__kernel_cos>:
 8015810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015814:	ec57 6b10 	vmov	r6, r7, d0
 8015818:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801581c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8015820:	ed8d 1b00 	vstr	d1, [sp]
 8015824:	da07      	bge.n	8015836 <__kernel_cos+0x26>
 8015826:	ee10 0a10 	vmov	r0, s0
 801582a:	4639      	mov	r1, r7
 801582c:	f7eb f994 	bl	8000b58 <__aeabi_d2iz>
 8015830:	2800      	cmp	r0, #0
 8015832:	f000 8088 	beq.w	8015946 <__kernel_cos+0x136>
 8015836:	4632      	mov	r2, r6
 8015838:	463b      	mov	r3, r7
 801583a:	4630      	mov	r0, r6
 801583c:	4639      	mov	r1, r7
 801583e:	f7ea fedb 	bl	80005f8 <__aeabi_dmul>
 8015842:	4b51      	ldr	r3, [pc, #324]	; (8015988 <__kernel_cos+0x178>)
 8015844:	2200      	movs	r2, #0
 8015846:	4604      	mov	r4, r0
 8015848:	460d      	mov	r5, r1
 801584a:	f7ea fed5 	bl	80005f8 <__aeabi_dmul>
 801584e:	a340      	add	r3, pc, #256	; (adr r3, 8015950 <__kernel_cos+0x140>)
 8015850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015854:	4682      	mov	sl, r0
 8015856:	468b      	mov	fp, r1
 8015858:	4620      	mov	r0, r4
 801585a:	4629      	mov	r1, r5
 801585c:	f7ea fecc 	bl	80005f8 <__aeabi_dmul>
 8015860:	a33d      	add	r3, pc, #244	; (adr r3, 8015958 <__kernel_cos+0x148>)
 8015862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015866:	f7ea fd11 	bl	800028c <__adddf3>
 801586a:	4622      	mov	r2, r4
 801586c:	462b      	mov	r3, r5
 801586e:	f7ea fec3 	bl	80005f8 <__aeabi_dmul>
 8015872:	a33b      	add	r3, pc, #236	; (adr r3, 8015960 <__kernel_cos+0x150>)
 8015874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015878:	f7ea fd06 	bl	8000288 <__aeabi_dsub>
 801587c:	4622      	mov	r2, r4
 801587e:	462b      	mov	r3, r5
 8015880:	f7ea feba 	bl	80005f8 <__aeabi_dmul>
 8015884:	a338      	add	r3, pc, #224	; (adr r3, 8015968 <__kernel_cos+0x158>)
 8015886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801588a:	f7ea fcff 	bl	800028c <__adddf3>
 801588e:	4622      	mov	r2, r4
 8015890:	462b      	mov	r3, r5
 8015892:	f7ea feb1 	bl	80005f8 <__aeabi_dmul>
 8015896:	a336      	add	r3, pc, #216	; (adr r3, 8015970 <__kernel_cos+0x160>)
 8015898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801589c:	f7ea fcf4 	bl	8000288 <__aeabi_dsub>
 80158a0:	4622      	mov	r2, r4
 80158a2:	462b      	mov	r3, r5
 80158a4:	f7ea fea8 	bl	80005f8 <__aeabi_dmul>
 80158a8:	a333      	add	r3, pc, #204	; (adr r3, 8015978 <__kernel_cos+0x168>)
 80158aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158ae:	f7ea fced 	bl	800028c <__adddf3>
 80158b2:	4622      	mov	r2, r4
 80158b4:	462b      	mov	r3, r5
 80158b6:	f7ea fe9f 	bl	80005f8 <__aeabi_dmul>
 80158ba:	4622      	mov	r2, r4
 80158bc:	462b      	mov	r3, r5
 80158be:	f7ea fe9b 	bl	80005f8 <__aeabi_dmul>
 80158c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80158c6:	4604      	mov	r4, r0
 80158c8:	460d      	mov	r5, r1
 80158ca:	4630      	mov	r0, r6
 80158cc:	4639      	mov	r1, r7
 80158ce:	f7ea fe93 	bl	80005f8 <__aeabi_dmul>
 80158d2:	460b      	mov	r3, r1
 80158d4:	4602      	mov	r2, r0
 80158d6:	4629      	mov	r1, r5
 80158d8:	4620      	mov	r0, r4
 80158da:	f7ea fcd5 	bl	8000288 <__aeabi_dsub>
 80158de:	4b2b      	ldr	r3, [pc, #172]	; (801598c <__kernel_cos+0x17c>)
 80158e0:	4598      	cmp	r8, r3
 80158e2:	4606      	mov	r6, r0
 80158e4:	460f      	mov	r7, r1
 80158e6:	dc10      	bgt.n	801590a <__kernel_cos+0xfa>
 80158e8:	4602      	mov	r2, r0
 80158ea:	460b      	mov	r3, r1
 80158ec:	4650      	mov	r0, sl
 80158ee:	4659      	mov	r1, fp
 80158f0:	f7ea fcca 	bl	8000288 <__aeabi_dsub>
 80158f4:	460b      	mov	r3, r1
 80158f6:	4926      	ldr	r1, [pc, #152]	; (8015990 <__kernel_cos+0x180>)
 80158f8:	4602      	mov	r2, r0
 80158fa:	2000      	movs	r0, #0
 80158fc:	f7ea fcc4 	bl	8000288 <__aeabi_dsub>
 8015900:	ec41 0b10 	vmov	d0, r0, r1
 8015904:	b003      	add	sp, #12
 8015906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801590a:	4b22      	ldr	r3, [pc, #136]	; (8015994 <__kernel_cos+0x184>)
 801590c:	4920      	ldr	r1, [pc, #128]	; (8015990 <__kernel_cos+0x180>)
 801590e:	4598      	cmp	r8, r3
 8015910:	bfcc      	ite	gt
 8015912:	4d21      	ldrgt	r5, [pc, #132]	; (8015998 <__kernel_cos+0x188>)
 8015914:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8015918:	2400      	movs	r4, #0
 801591a:	4622      	mov	r2, r4
 801591c:	462b      	mov	r3, r5
 801591e:	2000      	movs	r0, #0
 8015920:	f7ea fcb2 	bl	8000288 <__aeabi_dsub>
 8015924:	4622      	mov	r2, r4
 8015926:	4680      	mov	r8, r0
 8015928:	4689      	mov	r9, r1
 801592a:	462b      	mov	r3, r5
 801592c:	4650      	mov	r0, sl
 801592e:	4659      	mov	r1, fp
 8015930:	f7ea fcaa 	bl	8000288 <__aeabi_dsub>
 8015934:	4632      	mov	r2, r6
 8015936:	463b      	mov	r3, r7
 8015938:	f7ea fca6 	bl	8000288 <__aeabi_dsub>
 801593c:	4602      	mov	r2, r0
 801593e:	460b      	mov	r3, r1
 8015940:	4640      	mov	r0, r8
 8015942:	4649      	mov	r1, r9
 8015944:	e7da      	b.n	80158fc <__kernel_cos+0xec>
 8015946:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8015980 <__kernel_cos+0x170>
 801594a:	e7db      	b.n	8015904 <__kernel_cos+0xf4>
 801594c:	f3af 8000 	nop.w
 8015950:	be8838d4 	.word	0xbe8838d4
 8015954:	bda8fae9 	.word	0xbda8fae9
 8015958:	bdb4b1c4 	.word	0xbdb4b1c4
 801595c:	3e21ee9e 	.word	0x3e21ee9e
 8015960:	809c52ad 	.word	0x809c52ad
 8015964:	3e927e4f 	.word	0x3e927e4f
 8015968:	19cb1590 	.word	0x19cb1590
 801596c:	3efa01a0 	.word	0x3efa01a0
 8015970:	16c15177 	.word	0x16c15177
 8015974:	3f56c16c 	.word	0x3f56c16c
 8015978:	5555554c 	.word	0x5555554c
 801597c:	3fa55555 	.word	0x3fa55555
 8015980:	00000000 	.word	0x00000000
 8015984:	3ff00000 	.word	0x3ff00000
 8015988:	3fe00000 	.word	0x3fe00000
 801598c:	3fd33332 	.word	0x3fd33332
 8015990:	3ff00000 	.word	0x3ff00000
 8015994:	3fe90000 	.word	0x3fe90000
 8015998:	3fd20000 	.word	0x3fd20000
 801599c:	00000000 	.word	0x00000000

080159a0 <__kernel_sin>:
 80159a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159a4:	ed2d 8b04 	vpush	{d8-d9}
 80159a8:	eeb0 8a41 	vmov.f32	s16, s2
 80159ac:	eef0 8a61 	vmov.f32	s17, s3
 80159b0:	ec55 4b10 	vmov	r4, r5, d0
 80159b4:	b083      	sub	sp, #12
 80159b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80159ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80159be:	9001      	str	r0, [sp, #4]
 80159c0:	da06      	bge.n	80159d0 <__kernel_sin+0x30>
 80159c2:	ee10 0a10 	vmov	r0, s0
 80159c6:	4629      	mov	r1, r5
 80159c8:	f7eb f8c6 	bl	8000b58 <__aeabi_d2iz>
 80159cc:	2800      	cmp	r0, #0
 80159ce:	d051      	beq.n	8015a74 <__kernel_sin+0xd4>
 80159d0:	4622      	mov	r2, r4
 80159d2:	462b      	mov	r3, r5
 80159d4:	4620      	mov	r0, r4
 80159d6:	4629      	mov	r1, r5
 80159d8:	f7ea fe0e 	bl	80005f8 <__aeabi_dmul>
 80159dc:	4682      	mov	sl, r0
 80159de:	468b      	mov	fp, r1
 80159e0:	4602      	mov	r2, r0
 80159e2:	460b      	mov	r3, r1
 80159e4:	4620      	mov	r0, r4
 80159e6:	4629      	mov	r1, r5
 80159e8:	f7ea fe06 	bl	80005f8 <__aeabi_dmul>
 80159ec:	a341      	add	r3, pc, #260	; (adr r3, 8015af4 <__kernel_sin+0x154>)
 80159ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159f2:	4680      	mov	r8, r0
 80159f4:	4689      	mov	r9, r1
 80159f6:	4650      	mov	r0, sl
 80159f8:	4659      	mov	r1, fp
 80159fa:	f7ea fdfd 	bl	80005f8 <__aeabi_dmul>
 80159fe:	a33f      	add	r3, pc, #252	; (adr r3, 8015afc <__kernel_sin+0x15c>)
 8015a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a04:	f7ea fc40 	bl	8000288 <__aeabi_dsub>
 8015a08:	4652      	mov	r2, sl
 8015a0a:	465b      	mov	r3, fp
 8015a0c:	f7ea fdf4 	bl	80005f8 <__aeabi_dmul>
 8015a10:	a33c      	add	r3, pc, #240	; (adr r3, 8015b04 <__kernel_sin+0x164>)
 8015a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a16:	f7ea fc39 	bl	800028c <__adddf3>
 8015a1a:	4652      	mov	r2, sl
 8015a1c:	465b      	mov	r3, fp
 8015a1e:	f7ea fdeb 	bl	80005f8 <__aeabi_dmul>
 8015a22:	a33a      	add	r3, pc, #232	; (adr r3, 8015b0c <__kernel_sin+0x16c>)
 8015a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a28:	f7ea fc2e 	bl	8000288 <__aeabi_dsub>
 8015a2c:	4652      	mov	r2, sl
 8015a2e:	465b      	mov	r3, fp
 8015a30:	f7ea fde2 	bl	80005f8 <__aeabi_dmul>
 8015a34:	a337      	add	r3, pc, #220	; (adr r3, 8015b14 <__kernel_sin+0x174>)
 8015a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a3a:	f7ea fc27 	bl	800028c <__adddf3>
 8015a3e:	9b01      	ldr	r3, [sp, #4]
 8015a40:	4606      	mov	r6, r0
 8015a42:	460f      	mov	r7, r1
 8015a44:	b9eb      	cbnz	r3, 8015a82 <__kernel_sin+0xe2>
 8015a46:	4602      	mov	r2, r0
 8015a48:	460b      	mov	r3, r1
 8015a4a:	4650      	mov	r0, sl
 8015a4c:	4659      	mov	r1, fp
 8015a4e:	f7ea fdd3 	bl	80005f8 <__aeabi_dmul>
 8015a52:	a325      	add	r3, pc, #148	; (adr r3, 8015ae8 <__kernel_sin+0x148>)
 8015a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a58:	f7ea fc16 	bl	8000288 <__aeabi_dsub>
 8015a5c:	4642      	mov	r2, r8
 8015a5e:	464b      	mov	r3, r9
 8015a60:	f7ea fdca 	bl	80005f8 <__aeabi_dmul>
 8015a64:	4602      	mov	r2, r0
 8015a66:	460b      	mov	r3, r1
 8015a68:	4620      	mov	r0, r4
 8015a6a:	4629      	mov	r1, r5
 8015a6c:	f7ea fc0e 	bl	800028c <__adddf3>
 8015a70:	4604      	mov	r4, r0
 8015a72:	460d      	mov	r5, r1
 8015a74:	ec45 4b10 	vmov	d0, r4, r5
 8015a78:	b003      	add	sp, #12
 8015a7a:	ecbd 8b04 	vpop	{d8-d9}
 8015a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a82:	4b1b      	ldr	r3, [pc, #108]	; (8015af0 <__kernel_sin+0x150>)
 8015a84:	ec51 0b18 	vmov	r0, r1, d8
 8015a88:	2200      	movs	r2, #0
 8015a8a:	f7ea fdb5 	bl	80005f8 <__aeabi_dmul>
 8015a8e:	4632      	mov	r2, r6
 8015a90:	ec41 0b19 	vmov	d9, r0, r1
 8015a94:	463b      	mov	r3, r7
 8015a96:	4640      	mov	r0, r8
 8015a98:	4649      	mov	r1, r9
 8015a9a:	f7ea fdad 	bl	80005f8 <__aeabi_dmul>
 8015a9e:	4602      	mov	r2, r0
 8015aa0:	460b      	mov	r3, r1
 8015aa2:	ec51 0b19 	vmov	r0, r1, d9
 8015aa6:	f7ea fbef 	bl	8000288 <__aeabi_dsub>
 8015aaa:	4652      	mov	r2, sl
 8015aac:	465b      	mov	r3, fp
 8015aae:	f7ea fda3 	bl	80005f8 <__aeabi_dmul>
 8015ab2:	ec53 2b18 	vmov	r2, r3, d8
 8015ab6:	f7ea fbe7 	bl	8000288 <__aeabi_dsub>
 8015aba:	a30b      	add	r3, pc, #44	; (adr r3, 8015ae8 <__kernel_sin+0x148>)
 8015abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac0:	4606      	mov	r6, r0
 8015ac2:	460f      	mov	r7, r1
 8015ac4:	4640      	mov	r0, r8
 8015ac6:	4649      	mov	r1, r9
 8015ac8:	f7ea fd96 	bl	80005f8 <__aeabi_dmul>
 8015acc:	4602      	mov	r2, r0
 8015ace:	460b      	mov	r3, r1
 8015ad0:	4630      	mov	r0, r6
 8015ad2:	4639      	mov	r1, r7
 8015ad4:	f7ea fbda 	bl	800028c <__adddf3>
 8015ad8:	4602      	mov	r2, r0
 8015ada:	460b      	mov	r3, r1
 8015adc:	4620      	mov	r0, r4
 8015ade:	4629      	mov	r1, r5
 8015ae0:	f7ea fbd2 	bl	8000288 <__aeabi_dsub>
 8015ae4:	e7c4      	b.n	8015a70 <__kernel_sin+0xd0>
 8015ae6:	bf00      	nop
 8015ae8:	55555549 	.word	0x55555549
 8015aec:	3fc55555 	.word	0x3fc55555
 8015af0:	3fe00000 	.word	0x3fe00000
 8015af4:	5acfd57c 	.word	0x5acfd57c
 8015af8:	3de5d93a 	.word	0x3de5d93a
 8015afc:	8a2b9ceb 	.word	0x8a2b9ceb
 8015b00:	3e5ae5e6 	.word	0x3e5ae5e6
 8015b04:	57b1fe7d 	.word	0x57b1fe7d
 8015b08:	3ec71de3 	.word	0x3ec71de3
 8015b0c:	19c161d5 	.word	0x19c161d5
 8015b10:	3f2a01a0 	.word	0x3f2a01a0
 8015b14:	1110f8a6 	.word	0x1110f8a6
 8015b18:	3f811111 	.word	0x3f811111
 8015b1c:	00000000 	.word	0x00000000

08015b20 <__ieee754_rem_pio2>:
 8015b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b24:	ed2d 8b02 	vpush	{d8}
 8015b28:	ec55 4b10 	vmov	r4, r5, d0
 8015b2c:	4bca      	ldr	r3, [pc, #808]	; (8015e58 <__ieee754_rem_pio2+0x338>)
 8015b2e:	b08b      	sub	sp, #44	; 0x2c
 8015b30:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8015b34:	4598      	cmp	r8, r3
 8015b36:	4682      	mov	sl, r0
 8015b38:	9502      	str	r5, [sp, #8]
 8015b3a:	dc08      	bgt.n	8015b4e <__ieee754_rem_pio2+0x2e>
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	2300      	movs	r3, #0
 8015b40:	ed80 0b00 	vstr	d0, [r0]
 8015b44:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015b48:	f04f 0b00 	mov.w	fp, #0
 8015b4c:	e028      	b.n	8015ba0 <__ieee754_rem_pio2+0x80>
 8015b4e:	4bc3      	ldr	r3, [pc, #780]	; (8015e5c <__ieee754_rem_pio2+0x33c>)
 8015b50:	4598      	cmp	r8, r3
 8015b52:	dc78      	bgt.n	8015c46 <__ieee754_rem_pio2+0x126>
 8015b54:	9b02      	ldr	r3, [sp, #8]
 8015b56:	4ec2      	ldr	r6, [pc, #776]	; (8015e60 <__ieee754_rem_pio2+0x340>)
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	ee10 0a10 	vmov	r0, s0
 8015b5e:	a3b0      	add	r3, pc, #704	; (adr r3, 8015e20 <__ieee754_rem_pio2+0x300>)
 8015b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b64:	4629      	mov	r1, r5
 8015b66:	dd39      	ble.n	8015bdc <__ieee754_rem_pio2+0xbc>
 8015b68:	f7ea fb8e 	bl	8000288 <__aeabi_dsub>
 8015b6c:	45b0      	cmp	r8, r6
 8015b6e:	4604      	mov	r4, r0
 8015b70:	460d      	mov	r5, r1
 8015b72:	d01b      	beq.n	8015bac <__ieee754_rem_pio2+0x8c>
 8015b74:	a3ac      	add	r3, pc, #688	; (adr r3, 8015e28 <__ieee754_rem_pio2+0x308>)
 8015b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b7a:	f7ea fb85 	bl	8000288 <__aeabi_dsub>
 8015b7e:	4602      	mov	r2, r0
 8015b80:	460b      	mov	r3, r1
 8015b82:	e9ca 2300 	strd	r2, r3, [sl]
 8015b86:	4620      	mov	r0, r4
 8015b88:	4629      	mov	r1, r5
 8015b8a:	f7ea fb7d 	bl	8000288 <__aeabi_dsub>
 8015b8e:	a3a6      	add	r3, pc, #664	; (adr r3, 8015e28 <__ieee754_rem_pio2+0x308>)
 8015b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b94:	f7ea fb78 	bl	8000288 <__aeabi_dsub>
 8015b98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015b9c:	f04f 0b01 	mov.w	fp, #1
 8015ba0:	4658      	mov	r0, fp
 8015ba2:	b00b      	add	sp, #44	; 0x2c
 8015ba4:	ecbd 8b02 	vpop	{d8}
 8015ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bac:	a3a0      	add	r3, pc, #640	; (adr r3, 8015e30 <__ieee754_rem_pio2+0x310>)
 8015bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bb2:	f7ea fb69 	bl	8000288 <__aeabi_dsub>
 8015bb6:	a3a0      	add	r3, pc, #640	; (adr r3, 8015e38 <__ieee754_rem_pio2+0x318>)
 8015bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bbc:	4604      	mov	r4, r0
 8015bbe:	460d      	mov	r5, r1
 8015bc0:	f7ea fb62 	bl	8000288 <__aeabi_dsub>
 8015bc4:	4602      	mov	r2, r0
 8015bc6:	460b      	mov	r3, r1
 8015bc8:	e9ca 2300 	strd	r2, r3, [sl]
 8015bcc:	4620      	mov	r0, r4
 8015bce:	4629      	mov	r1, r5
 8015bd0:	f7ea fb5a 	bl	8000288 <__aeabi_dsub>
 8015bd4:	a398      	add	r3, pc, #608	; (adr r3, 8015e38 <__ieee754_rem_pio2+0x318>)
 8015bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bda:	e7db      	b.n	8015b94 <__ieee754_rem_pio2+0x74>
 8015bdc:	f7ea fb56 	bl	800028c <__adddf3>
 8015be0:	45b0      	cmp	r8, r6
 8015be2:	4604      	mov	r4, r0
 8015be4:	460d      	mov	r5, r1
 8015be6:	d016      	beq.n	8015c16 <__ieee754_rem_pio2+0xf6>
 8015be8:	a38f      	add	r3, pc, #572	; (adr r3, 8015e28 <__ieee754_rem_pio2+0x308>)
 8015bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bee:	f7ea fb4d 	bl	800028c <__adddf3>
 8015bf2:	4602      	mov	r2, r0
 8015bf4:	460b      	mov	r3, r1
 8015bf6:	e9ca 2300 	strd	r2, r3, [sl]
 8015bfa:	4620      	mov	r0, r4
 8015bfc:	4629      	mov	r1, r5
 8015bfe:	f7ea fb43 	bl	8000288 <__aeabi_dsub>
 8015c02:	a389      	add	r3, pc, #548	; (adr r3, 8015e28 <__ieee754_rem_pio2+0x308>)
 8015c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c08:	f7ea fb40 	bl	800028c <__adddf3>
 8015c0c:	f04f 3bff 	mov.w	fp, #4294967295
 8015c10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015c14:	e7c4      	b.n	8015ba0 <__ieee754_rem_pio2+0x80>
 8015c16:	a386      	add	r3, pc, #536	; (adr r3, 8015e30 <__ieee754_rem_pio2+0x310>)
 8015c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c1c:	f7ea fb36 	bl	800028c <__adddf3>
 8015c20:	a385      	add	r3, pc, #532	; (adr r3, 8015e38 <__ieee754_rem_pio2+0x318>)
 8015c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c26:	4604      	mov	r4, r0
 8015c28:	460d      	mov	r5, r1
 8015c2a:	f7ea fb2f 	bl	800028c <__adddf3>
 8015c2e:	4602      	mov	r2, r0
 8015c30:	460b      	mov	r3, r1
 8015c32:	e9ca 2300 	strd	r2, r3, [sl]
 8015c36:	4620      	mov	r0, r4
 8015c38:	4629      	mov	r1, r5
 8015c3a:	f7ea fb25 	bl	8000288 <__aeabi_dsub>
 8015c3e:	a37e      	add	r3, pc, #504	; (adr r3, 8015e38 <__ieee754_rem_pio2+0x318>)
 8015c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c44:	e7e0      	b.n	8015c08 <__ieee754_rem_pio2+0xe8>
 8015c46:	4b87      	ldr	r3, [pc, #540]	; (8015e64 <__ieee754_rem_pio2+0x344>)
 8015c48:	4598      	cmp	r8, r3
 8015c4a:	f300 80d8 	bgt.w	8015dfe <__ieee754_rem_pio2+0x2de>
 8015c4e:	f000 f96d 	bl	8015f2c <fabs>
 8015c52:	ec55 4b10 	vmov	r4, r5, d0
 8015c56:	ee10 0a10 	vmov	r0, s0
 8015c5a:	a379      	add	r3, pc, #484	; (adr r3, 8015e40 <__ieee754_rem_pio2+0x320>)
 8015c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c60:	4629      	mov	r1, r5
 8015c62:	f7ea fcc9 	bl	80005f8 <__aeabi_dmul>
 8015c66:	4b80      	ldr	r3, [pc, #512]	; (8015e68 <__ieee754_rem_pio2+0x348>)
 8015c68:	2200      	movs	r2, #0
 8015c6a:	f7ea fb0f 	bl	800028c <__adddf3>
 8015c6e:	f7ea ff73 	bl	8000b58 <__aeabi_d2iz>
 8015c72:	4683      	mov	fp, r0
 8015c74:	f7ea fc56 	bl	8000524 <__aeabi_i2d>
 8015c78:	4602      	mov	r2, r0
 8015c7a:	460b      	mov	r3, r1
 8015c7c:	ec43 2b18 	vmov	d8, r2, r3
 8015c80:	a367      	add	r3, pc, #412	; (adr r3, 8015e20 <__ieee754_rem_pio2+0x300>)
 8015c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c86:	f7ea fcb7 	bl	80005f8 <__aeabi_dmul>
 8015c8a:	4602      	mov	r2, r0
 8015c8c:	460b      	mov	r3, r1
 8015c8e:	4620      	mov	r0, r4
 8015c90:	4629      	mov	r1, r5
 8015c92:	f7ea faf9 	bl	8000288 <__aeabi_dsub>
 8015c96:	a364      	add	r3, pc, #400	; (adr r3, 8015e28 <__ieee754_rem_pio2+0x308>)
 8015c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c9c:	4606      	mov	r6, r0
 8015c9e:	460f      	mov	r7, r1
 8015ca0:	ec51 0b18 	vmov	r0, r1, d8
 8015ca4:	f7ea fca8 	bl	80005f8 <__aeabi_dmul>
 8015ca8:	f1bb 0f1f 	cmp.w	fp, #31
 8015cac:	4604      	mov	r4, r0
 8015cae:	460d      	mov	r5, r1
 8015cb0:	dc0d      	bgt.n	8015cce <__ieee754_rem_pio2+0x1ae>
 8015cb2:	4b6e      	ldr	r3, [pc, #440]	; (8015e6c <__ieee754_rem_pio2+0x34c>)
 8015cb4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8015cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cbc:	4543      	cmp	r3, r8
 8015cbe:	d006      	beq.n	8015cce <__ieee754_rem_pio2+0x1ae>
 8015cc0:	4622      	mov	r2, r4
 8015cc2:	462b      	mov	r3, r5
 8015cc4:	4630      	mov	r0, r6
 8015cc6:	4639      	mov	r1, r7
 8015cc8:	f7ea fade 	bl	8000288 <__aeabi_dsub>
 8015ccc:	e00e      	b.n	8015cec <__ieee754_rem_pio2+0x1cc>
 8015cce:	462b      	mov	r3, r5
 8015cd0:	4622      	mov	r2, r4
 8015cd2:	4630      	mov	r0, r6
 8015cd4:	4639      	mov	r1, r7
 8015cd6:	f7ea fad7 	bl	8000288 <__aeabi_dsub>
 8015cda:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015cde:	9303      	str	r3, [sp, #12]
 8015ce0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015ce4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8015ce8:	2b10      	cmp	r3, #16
 8015cea:	dc02      	bgt.n	8015cf2 <__ieee754_rem_pio2+0x1d2>
 8015cec:	e9ca 0100 	strd	r0, r1, [sl]
 8015cf0:	e039      	b.n	8015d66 <__ieee754_rem_pio2+0x246>
 8015cf2:	a34f      	add	r3, pc, #316	; (adr r3, 8015e30 <__ieee754_rem_pio2+0x310>)
 8015cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cf8:	ec51 0b18 	vmov	r0, r1, d8
 8015cfc:	f7ea fc7c 	bl	80005f8 <__aeabi_dmul>
 8015d00:	4604      	mov	r4, r0
 8015d02:	460d      	mov	r5, r1
 8015d04:	4602      	mov	r2, r0
 8015d06:	460b      	mov	r3, r1
 8015d08:	4630      	mov	r0, r6
 8015d0a:	4639      	mov	r1, r7
 8015d0c:	f7ea fabc 	bl	8000288 <__aeabi_dsub>
 8015d10:	4602      	mov	r2, r0
 8015d12:	460b      	mov	r3, r1
 8015d14:	4680      	mov	r8, r0
 8015d16:	4689      	mov	r9, r1
 8015d18:	4630      	mov	r0, r6
 8015d1a:	4639      	mov	r1, r7
 8015d1c:	f7ea fab4 	bl	8000288 <__aeabi_dsub>
 8015d20:	4622      	mov	r2, r4
 8015d22:	462b      	mov	r3, r5
 8015d24:	f7ea fab0 	bl	8000288 <__aeabi_dsub>
 8015d28:	a343      	add	r3, pc, #268	; (adr r3, 8015e38 <__ieee754_rem_pio2+0x318>)
 8015d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d2e:	4604      	mov	r4, r0
 8015d30:	460d      	mov	r5, r1
 8015d32:	ec51 0b18 	vmov	r0, r1, d8
 8015d36:	f7ea fc5f 	bl	80005f8 <__aeabi_dmul>
 8015d3a:	4622      	mov	r2, r4
 8015d3c:	462b      	mov	r3, r5
 8015d3e:	f7ea faa3 	bl	8000288 <__aeabi_dsub>
 8015d42:	4602      	mov	r2, r0
 8015d44:	460b      	mov	r3, r1
 8015d46:	4604      	mov	r4, r0
 8015d48:	460d      	mov	r5, r1
 8015d4a:	4640      	mov	r0, r8
 8015d4c:	4649      	mov	r1, r9
 8015d4e:	f7ea fa9b 	bl	8000288 <__aeabi_dsub>
 8015d52:	9a03      	ldr	r2, [sp, #12]
 8015d54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015d58:	1ad3      	subs	r3, r2, r3
 8015d5a:	2b31      	cmp	r3, #49	; 0x31
 8015d5c:	dc24      	bgt.n	8015da8 <__ieee754_rem_pio2+0x288>
 8015d5e:	e9ca 0100 	strd	r0, r1, [sl]
 8015d62:	4646      	mov	r6, r8
 8015d64:	464f      	mov	r7, r9
 8015d66:	e9da 8900 	ldrd	r8, r9, [sl]
 8015d6a:	4630      	mov	r0, r6
 8015d6c:	4642      	mov	r2, r8
 8015d6e:	464b      	mov	r3, r9
 8015d70:	4639      	mov	r1, r7
 8015d72:	f7ea fa89 	bl	8000288 <__aeabi_dsub>
 8015d76:	462b      	mov	r3, r5
 8015d78:	4622      	mov	r2, r4
 8015d7a:	f7ea fa85 	bl	8000288 <__aeabi_dsub>
 8015d7e:	9b02      	ldr	r3, [sp, #8]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015d86:	f6bf af0b 	bge.w	8015ba0 <__ieee754_rem_pio2+0x80>
 8015d8a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015d8e:	f8ca 3004 	str.w	r3, [sl, #4]
 8015d92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015d96:	f8ca 8000 	str.w	r8, [sl]
 8015d9a:	f8ca 0008 	str.w	r0, [sl, #8]
 8015d9e:	f8ca 300c 	str.w	r3, [sl, #12]
 8015da2:	f1cb 0b00 	rsb	fp, fp, #0
 8015da6:	e6fb      	b.n	8015ba0 <__ieee754_rem_pio2+0x80>
 8015da8:	a327      	add	r3, pc, #156	; (adr r3, 8015e48 <__ieee754_rem_pio2+0x328>)
 8015daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dae:	ec51 0b18 	vmov	r0, r1, d8
 8015db2:	f7ea fc21 	bl	80005f8 <__aeabi_dmul>
 8015db6:	4604      	mov	r4, r0
 8015db8:	460d      	mov	r5, r1
 8015dba:	4602      	mov	r2, r0
 8015dbc:	460b      	mov	r3, r1
 8015dbe:	4640      	mov	r0, r8
 8015dc0:	4649      	mov	r1, r9
 8015dc2:	f7ea fa61 	bl	8000288 <__aeabi_dsub>
 8015dc6:	4602      	mov	r2, r0
 8015dc8:	460b      	mov	r3, r1
 8015dca:	4606      	mov	r6, r0
 8015dcc:	460f      	mov	r7, r1
 8015dce:	4640      	mov	r0, r8
 8015dd0:	4649      	mov	r1, r9
 8015dd2:	f7ea fa59 	bl	8000288 <__aeabi_dsub>
 8015dd6:	4622      	mov	r2, r4
 8015dd8:	462b      	mov	r3, r5
 8015dda:	f7ea fa55 	bl	8000288 <__aeabi_dsub>
 8015dde:	a31c      	add	r3, pc, #112	; (adr r3, 8015e50 <__ieee754_rem_pio2+0x330>)
 8015de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015de4:	4604      	mov	r4, r0
 8015de6:	460d      	mov	r5, r1
 8015de8:	ec51 0b18 	vmov	r0, r1, d8
 8015dec:	f7ea fc04 	bl	80005f8 <__aeabi_dmul>
 8015df0:	4622      	mov	r2, r4
 8015df2:	462b      	mov	r3, r5
 8015df4:	f7ea fa48 	bl	8000288 <__aeabi_dsub>
 8015df8:	4604      	mov	r4, r0
 8015dfa:	460d      	mov	r5, r1
 8015dfc:	e760      	b.n	8015cc0 <__ieee754_rem_pio2+0x1a0>
 8015dfe:	4b1c      	ldr	r3, [pc, #112]	; (8015e70 <__ieee754_rem_pio2+0x350>)
 8015e00:	4598      	cmp	r8, r3
 8015e02:	dd37      	ble.n	8015e74 <__ieee754_rem_pio2+0x354>
 8015e04:	ee10 2a10 	vmov	r2, s0
 8015e08:	462b      	mov	r3, r5
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	4629      	mov	r1, r5
 8015e0e:	f7ea fa3b 	bl	8000288 <__aeabi_dsub>
 8015e12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015e16:	e9ca 0100 	strd	r0, r1, [sl]
 8015e1a:	e695      	b.n	8015b48 <__ieee754_rem_pio2+0x28>
 8015e1c:	f3af 8000 	nop.w
 8015e20:	54400000 	.word	0x54400000
 8015e24:	3ff921fb 	.word	0x3ff921fb
 8015e28:	1a626331 	.word	0x1a626331
 8015e2c:	3dd0b461 	.word	0x3dd0b461
 8015e30:	1a600000 	.word	0x1a600000
 8015e34:	3dd0b461 	.word	0x3dd0b461
 8015e38:	2e037073 	.word	0x2e037073
 8015e3c:	3ba3198a 	.word	0x3ba3198a
 8015e40:	6dc9c883 	.word	0x6dc9c883
 8015e44:	3fe45f30 	.word	0x3fe45f30
 8015e48:	2e000000 	.word	0x2e000000
 8015e4c:	3ba3198a 	.word	0x3ba3198a
 8015e50:	252049c1 	.word	0x252049c1
 8015e54:	397b839a 	.word	0x397b839a
 8015e58:	3fe921fb 	.word	0x3fe921fb
 8015e5c:	4002d97b 	.word	0x4002d97b
 8015e60:	3ff921fb 	.word	0x3ff921fb
 8015e64:	413921fb 	.word	0x413921fb
 8015e68:	3fe00000 	.word	0x3fe00000
 8015e6c:	08018b98 	.word	0x08018b98
 8015e70:	7fefffff 	.word	0x7fefffff
 8015e74:	ea4f 5628 	mov.w	r6, r8, asr #20
 8015e78:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8015e7c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8015e80:	4620      	mov	r0, r4
 8015e82:	460d      	mov	r5, r1
 8015e84:	f7ea fe68 	bl	8000b58 <__aeabi_d2iz>
 8015e88:	f7ea fb4c 	bl	8000524 <__aeabi_i2d>
 8015e8c:	4602      	mov	r2, r0
 8015e8e:	460b      	mov	r3, r1
 8015e90:	4620      	mov	r0, r4
 8015e92:	4629      	mov	r1, r5
 8015e94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015e98:	f7ea f9f6 	bl	8000288 <__aeabi_dsub>
 8015e9c:	4b21      	ldr	r3, [pc, #132]	; (8015f24 <__ieee754_rem_pio2+0x404>)
 8015e9e:	2200      	movs	r2, #0
 8015ea0:	f7ea fbaa 	bl	80005f8 <__aeabi_dmul>
 8015ea4:	460d      	mov	r5, r1
 8015ea6:	4604      	mov	r4, r0
 8015ea8:	f7ea fe56 	bl	8000b58 <__aeabi_d2iz>
 8015eac:	f7ea fb3a 	bl	8000524 <__aeabi_i2d>
 8015eb0:	4602      	mov	r2, r0
 8015eb2:	460b      	mov	r3, r1
 8015eb4:	4620      	mov	r0, r4
 8015eb6:	4629      	mov	r1, r5
 8015eb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015ebc:	f7ea f9e4 	bl	8000288 <__aeabi_dsub>
 8015ec0:	4b18      	ldr	r3, [pc, #96]	; (8015f24 <__ieee754_rem_pio2+0x404>)
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	f7ea fb98 	bl	80005f8 <__aeabi_dmul>
 8015ec8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015ecc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8015ed0:	2703      	movs	r7, #3
 8015ed2:	2400      	movs	r4, #0
 8015ed4:	2500      	movs	r5, #0
 8015ed6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8015eda:	4622      	mov	r2, r4
 8015edc:	462b      	mov	r3, r5
 8015ede:	46b9      	mov	r9, r7
 8015ee0:	3f01      	subs	r7, #1
 8015ee2:	f7ea fdf1 	bl	8000ac8 <__aeabi_dcmpeq>
 8015ee6:	2800      	cmp	r0, #0
 8015ee8:	d1f5      	bne.n	8015ed6 <__ieee754_rem_pio2+0x3b6>
 8015eea:	4b0f      	ldr	r3, [pc, #60]	; (8015f28 <__ieee754_rem_pio2+0x408>)
 8015eec:	9301      	str	r3, [sp, #4]
 8015eee:	2302      	movs	r3, #2
 8015ef0:	9300      	str	r3, [sp, #0]
 8015ef2:	4632      	mov	r2, r6
 8015ef4:	464b      	mov	r3, r9
 8015ef6:	4651      	mov	r1, sl
 8015ef8:	a804      	add	r0, sp, #16
 8015efa:	f000 f911 	bl	8016120 <__kernel_rem_pio2>
 8015efe:	9b02      	ldr	r3, [sp, #8]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	4683      	mov	fp, r0
 8015f04:	f6bf ae4c 	bge.w	8015ba0 <__ieee754_rem_pio2+0x80>
 8015f08:	e9da 2100 	ldrd	r2, r1, [sl]
 8015f0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015f10:	e9ca 2300 	strd	r2, r3, [sl]
 8015f14:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8015f18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015f1c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8015f20:	e73f      	b.n	8015da2 <__ieee754_rem_pio2+0x282>
 8015f22:	bf00      	nop
 8015f24:	41700000 	.word	0x41700000
 8015f28:	08018c18 	.word	0x08018c18

08015f2c <fabs>:
 8015f2c:	ec51 0b10 	vmov	r0, r1, d0
 8015f30:	ee10 2a10 	vmov	r2, s0
 8015f34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015f38:	ec43 2b10 	vmov	d0, r2, r3
 8015f3c:	4770      	bx	lr
	...

08015f40 <__ieee754_expf>:
 8015f40:	ee10 2a10 	vmov	r2, s0
 8015f44:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8015f48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015f4c:	d902      	bls.n	8015f54 <__ieee754_expf+0x14>
 8015f4e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015f52:	4770      	bx	lr
 8015f54:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8015f58:	d106      	bne.n	8015f68 <__ieee754_expf+0x28>
 8015f5a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8016094 <__ieee754_expf+0x154>
 8015f5e:	2900      	cmp	r1, #0
 8015f60:	bf18      	it	ne
 8015f62:	eeb0 0a67 	vmovne.f32	s0, s15
 8015f66:	4770      	bx	lr
 8015f68:	484b      	ldr	r0, [pc, #300]	; (8016098 <__ieee754_expf+0x158>)
 8015f6a:	4282      	cmp	r2, r0
 8015f6c:	dd02      	ble.n	8015f74 <__ieee754_expf+0x34>
 8015f6e:	2000      	movs	r0, #0
 8015f70:	f000 b8d0 	b.w	8016114 <__math_oflowf>
 8015f74:	2a00      	cmp	r2, #0
 8015f76:	da05      	bge.n	8015f84 <__ieee754_expf+0x44>
 8015f78:	4a48      	ldr	r2, [pc, #288]	; (801609c <__ieee754_expf+0x15c>)
 8015f7a:	4293      	cmp	r3, r2
 8015f7c:	d902      	bls.n	8015f84 <__ieee754_expf+0x44>
 8015f7e:	2000      	movs	r0, #0
 8015f80:	f000 b8c2 	b.w	8016108 <__math_uflowf>
 8015f84:	4a46      	ldr	r2, [pc, #280]	; (80160a0 <__ieee754_expf+0x160>)
 8015f86:	4293      	cmp	r3, r2
 8015f88:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015f8c:	d952      	bls.n	8016034 <__ieee754_expf+0xf4>
 8015f8e:	4a45      	ldr	r2, [pc, #276]	; (80160a4 <__ieee754_expf+0x164>)
 8015f90:	4293      	cmp	r3, r2
 8015f92:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8015f96:	d834      	bhi.n	8016002 <__ieee754_expf+0xc2>
 8015f98:	4b43      	ldr	r3, [pc, #268]	; (80160a8 <__ieee754_expf+0x168>)
 8015f9a:	4413      	add	r3, r2
 8015f9c:	ed93 7a00 	vldr	s14, [r3]
 8015fa0:	4b42      	ldr	r3, [pc, #264]	; (80160ac <__ieee754_expf+0x16c>)
 8015fa2:	4413      	add	r3, r2
 8015fa4:	ee30 7a47 	vsub.f32	s14, s0, s14
 8015fa8:	f1c1 0201 	rsb	r2, r1, #1
 8015fac:	edd3 7a00 	vldr	s15, [r3]
 8015fb0:	1a52      	subs	r2, r2, r1
 8015fb2:	ee37 0a67 	vsub.f32	s0, s14, s15
 8015fb6:	ee20 6a00 	vmul.f32	s12, s0, s0
 8015fba:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80160b0 <__ieee754_expf+0x170>
 8015fbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80160b4 <__ieee754_expf+0x174>
 8015fc2:	eee6 6a05 	vfma.f32	s13, s12, s10
 8015fc6:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80160b8 <__ieee754_expf+0x178>
 8015fca:	eea6 5a86 	vfma.f32	s10, s13, s12
 8015fce:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80160bc <__ieee754_expf+0x17c>
 8015fd2:	eee5 6a06 	vfma.f32	s13, s10, s12
 8015fd6:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80160c0 <__ieee754_expf+0x180>
 8015fda:	eea6 5a86 	vfma.f32	s10, s13, s12
 8015fde:	eef0 6a40 	vmov.f32	s13, s0
 8015fe2:	eee5 6a46 	vfms.f32	s13, s10, s12
 8015fe6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8015fea:	ee20 5a26 	vmul.f32	s10, s0, s13
 8015fee:	bb92      	cbnz	r2, 8016056 <__ieee754_expf+0x116>
 8015ff0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8015ff4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8015ff8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015ffc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8016000:	4770      	bx	lr
 8016002:	4b30      	ldr	r3, [pc, #192]	; (80160c4 <__ieee754_expf+0x184>)
 8016004:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80160c8 <__ieee754_expf+0x188>
 8016008:	eddf 6a30 	vldr	s13, [pc, #192]	; 80160cc <__ieee754_expf+0x18c>
 801600c:	4413      	add	r3, r2
 801600e:	edd3 7a00 	vldr	s15, [r3]
 8016012:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016016:	eeb0 7a40 	vmov.f32	s14, s0
 801601a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801601e:	ee17 2a90 	vmov	r2, s15
 8016022:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016026:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801602a:	eddf 6a29 	vldr	s13, [pc, #164]	; 80160d0 <__ieee754_expf+0x190>
 801602e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016032:	e7be      	b.n	8015fb2 <__ieee754_expf+0x72>
 8016034:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8016038:	d20b      	bcs.n	8016052 <__ieee754_expf+0x112>
 801603a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80160d4 <__ieee754_expf+0x194>
 801603e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8016042:	eef4 6ae5 	vcmpe.f32	s13, s11
 8016046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801604a:	dd02      	ble.n	8016052 <__ieee754_expf+0x112>
 801604c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8016050:	4770      	bx	lr
 8016052:	2200      	movs	r2, #0
 8016054:	e7af      	b.n	8015fb6 <__ieee754_expf+0x76>
 8016056:	ee36 6a66 	vsub.f32	s12, s12, s13
 801605a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801605e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8016062:	bfb8      	it	lt
 8016064:	3264      	addlt	r2, #100	; 0x64
 8016066:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801606a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801606e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8016072:	ee17 3a90 	vmov	r3, s15
 8016076:	bfab      	itete	ge
 8016078:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801607c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8016080:	ee00 3a10 	vmovge	s0, r3
 8016084:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80160d8 <__ieee754_expf+0x198>
 8016088:	bfbc      	itt	lt
 801608a:	ee00 3a10 	vmovlt	s0, r3
 801608e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8016092:	4770      	bx	lr
 8016094:	00000000 	.word	0x00000000
 8016098:	42b17217 	.word	0x42b17217
 801609c:	42cff1b5 	.word	0x42cff1b5
 80160a0:	3eb17218 	.word	0x3eb17218
 80160a4:	3f851591 	.word	0x3f851591
 80160a8:	08018d28 	.word	0x08018d28
 80160ac:	08018d30 	.word	0x08018d30
 80160b0:	3331bb4c 	.word	0x3331bb4c
 80160b4:	b5ddea0e 	.word	0xb5ddea0e
 80160b8:	388ab355 	.word	0x388ab355
 80160bc:	bb360b61 	.word	0xbb360b61
 80160c0:	3e2aaaab 	.word	0x3e2aaaab
 80160c4:	08018d20 	.word	0x08018d20
 80160c8:	3fb8aa3b 	.word	0x3fb8aa3b
 80160cc:	3f317180 	.word	0x3f317180
 80160d0:	3717f7d1 	.word	0x3717f7d1
 80160d4:	7149f2ca 	.word	0x7149f2ca
 80160d8:	0d800000 	.word	0x0d800000

080160dc <with_errnof>:
 80160dc:	b513      	push	{r0, r1, r4, lr}
 80160de:	4604      	mov	r4, r0
 80160e0:	ed8d 0a01 	vstr	s0, [sp, #4]
 80160e4:	f7fc fda0 	bl	8012c28 <__errno>
 80160e8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80160ec:	6004      	str	r4, [r0, #0]
 80160ee:	b002      	add	sp, #8
 80160f0:	bd10      	pop	{r4, pc}

080160f2 <xflowf>:
 80160f2:	b130      	cbz	r0, 8016102 <xflowf+0x10>
 80160f4:	eef1 7a40 	vneg.f32	s15, s0
 80160f8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80160fc:	2022      	movs	r0, #34	; 0x22
 80160fe:	f7ff bfed 	b.w	80160dc <with_errnof>
 8016102:	eef0 7a40 	vmov.f32	s15, s0
 8016106:	e7f7      	b.n	80160f8 <xflowf+0x6>

08016108 <__math_uflowf>:
 8016108:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016110 <__math_uflowf+0x8>
 801610c:	f7ff bff1 	b.w	80160f2 <xflowf>
 8016110:	10000000 	.word	0x10000000

08016114 <__math_oflowf>:
 8016114:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801611c <__math_oflowf+0x8>
 8016118:	f7ff bfeb 	b.w	80160f2 <xflowf>
 801611c:	70000000 	.word	0x70000000

08016120 <__kernel_rem_pio2>:
 8016120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016124:	ed2d 8b02 	vpush	{d8}
 8016128:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801612c:	f112 0f14 	cmn.w	r2, #20
 8016130:	9306      	str	r3, [sp, #24]
 8016132:	9104      	str	r1, [sp, #16]
 8016134:	4bc2      	ldr	r3, [pc, #776]	; (8016440 <__kernel_rem_pio2+0x320>)
 8016136:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8016138:	9009      	str	r0, [sp, #36]	; 0x24
 801613a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801613e:	9300      	str	r3, [sp, #0]
 8016140:	9b06      	ldr	r3, [sp, #24]
 8016142:	f103 33ff 	add.w	r3, r3, #4294967295
 8016146:	bfa8      	it	ge
 8016148:	1ed4      	subge	r4, r2, #3
 801614a:	9305      	str	r3, [sp, #20]
 801614c:	bfb2      	itee	lt
 801614e:	2400      	movlt	r4, #0
 8016150:	2318      	movge	r3, #24
 8016152:	fb94 f4f3 	sdivge	r4, r4, r3
 8016156:	f06f 0317 	mvn.w	r3, #23
 801615a:	fb04 3303 	mla	r3, r4, r3, r3
 801615e:	eb03 0a02 	add.w	sl, r3, r2
 8016162:	9b00      	ldr	r3, [sp, #0]
 8016164:	9a05      	ldr	r2, [sp, #20]
 8016166:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8016430 <__kernel_rem_pio2+0x310>
 801616a:	eb03 0802 	add.w	r8, r3, r2
 801616e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8016170:	1aa7      	subs	r7, r4, r2
 8016172:	ae20      	add	r6, sp, #128	; 0x80
 8016174:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8016178:	2500      	movs	r5, #0
 801617a:	4545      	cmp	r5, r8
 801617c:	dd13      	ble.n	80161a6 <__kernel_rem_pio2+0x86>
 801617e:	9b06      	ldr	r3, [sp, #24]
 8016180:	aa20      	add	r2, sp, #128	; 0x80
 8016182:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8016186:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801618a:	f04f 0800 	mov.w	r8, #0
 801618e:	9b00      	ldr	r3, [sp, #0]
 8016190:	4598      	cmp	r8, r3
 8016192:	dc31      	bgt.n	80161f8 <__kernel_rem_pio2+0xd8>
 8016194:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8016430 <__kernel_rem_pio2+0x310>
 8016198:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801619c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80161a0:	462f      	mov	r7, r5
 80161a2:	2600      	movs	r6, #0
 80161a4:	e01b      	b.n	80161de <__kernel_rem_pio2+0xbe>
 80161a6:	42ef      	cmn	r7, r5
 80161a8:	d407      	bmi.n	80161ba <__kernel_rem_pio2+0x9a>
 80161aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80161ae:	f7ea f9b9 	bl	8000524 <__aeabi_i2d>
 80161b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80161b6:	3501      	adds	r5, #1
 80161b8:	e7df      	b.n	801617a <__kernel_rem_pio2+0x5a>
 80161ba:	ec51 0b18 	vmov	r0, r1, d8
 80161be:	e7f8      	b.n	80161b2 <__kernel_rem_pio2+0x92>
 80161c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80161c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80161c8:	f7ea fa16 	bl	80005f8 <__aeabi_dmul>
 80161cc:	4602      	mov	r2, r0
 80161ce:	460b      	mov	r3, r1
 80161d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80161d4:	f7ea f85a 	bl	800028c <__adddf3>
 80161d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80161dc:	3601      	adds	r6, #1
 80161de:	9b05      	ldr	r3, [sp, #20]
 80161e0:	429e      	cmp	r6, r3
 80161e2:	f1a7 0708 	sub.w	r7, r7, #8
 80161e6:	ddeb      	ble.n	80161c0 <__kernel_rem_pio2+0xa0>
 80161e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80161ec:	f108 0801 	add.w	r8, r8, #1
 80161f0:	ecab 7b02 	vstmia	fp!, {d7}
 80161f4:	3508      	adds	r5, #8
 80161f6:	e7ca      	b.n	801618e <__kernel_rem_pio2+0x6e>
 80161f8:	9b00      	ldr	r3, [sp, #0]
 80161fa:	aa0c      	add	r2, sp, #48	; 0x30
 80161fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016200:	930b      	str	r3, [sp, #44]	; 0x2c
 8016202:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8016204:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016208:	9c00      	ldr	r4, [sp, #0]
 801620a:	930a      	str	r3, [sp, #40]	; 0x28
 801620c:	00e3      	lsls	r3, r4, #3
 801620e:	9308      	str	r3, [sp, #32]
 8016210:	ab98      	add	r3, sp, #608	; 0x260
 8016212:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016216:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801621a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801621e:	ab70      	add	r3, sp, #448	; 0x1c0
 8016220:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8016224:	46c3      	mov	fp, r8
 8016226:	46a1      	mov	r9, r4
 8016228:	f1b9 0f00 	cmp.w	r9, #0
 801622c:	f1a5 0508 	sub.w	r5, r5, #8
 8016230:	dc77      	bgt.n	8016322 <__kernel_rem_pio2+0x202>
 8016232:	ec47 6b10 	vmov	d0, r6, r7
 8016236:	4650      	mov	r0, sl
 8016238:	f000 fac2 	bl	80167c0 <scalbn>
 801623c:	ec57 6b10 	vmov	r6, r7, d0
 8016240:	2200      	movs	r2, #0
 8016242:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8016246:	ee10 0a10 	vmov	r0, s0
 801624a:	4639      	mov	r1, r7
 801624c:	f7ea f9d4 	bl	80005f8 <__aeabi_dmul>
 8016250:	ec41 0b10 	vmov	d0, r0, r1
 8016254:	f7ff fa5c 	bl	8015710 <floor>
 8016258:	4b7a      	ldr	r3, [pc, #488]	; (8016444 <__kernel_rem_pio2+0x324>)
 801625a:	ec51 0b10 	vmov	r0, r1, d0
 801625e:	2200      	movs	r2, #0
 8016260:	f7ea f9ca 	bl	80005f8 <__aeabi_dmul>
 8016264:	4602      	mov	r2, r0
 8016266:	460b      	mov	r3, r1
 8016268:	4630      	mov	r0, r6
 801626a:	4639      	mov	r1, r7
 801626c:	f7ea f80c 	bl	8000288 <__aeabi_dsub>
 8016270:	460f      	mov	r7, r1
 8016272:	4606      	mov	r6, r0
 8016274:	f7ea fc70 	bl	8000b58 <__aeabi_d2iz>
 8016278:	9002      	str	r0, [sp, #8]
 801627a:	f7ea f953 	bl	8000524 <__aeabi_i2d>
 801627e:	4602      	mov	r2, r0
 8016280:	460b      	mov	r3, r1
 8016282:	4630      	mov	r0, r6
 8016284:	4639      	mov	r1, r7
 8016286:	f7e9 ffff 	bl	8000288 <__aeabi_dsub>
 801628a:	f1ba 0f00 	cmp.w	sl, #0
 801628e:	4606      	mov	r6, r0
 8016290:	460f      	mov	r7, r1
 8016292:	dd6d      	ble.n	8016370 <__kernel_rem_pio2+0x250>
 8016294:	1e61      	subs	r1, r4, #1
 8016296:	ab0c      	add	r3, sp, #48	; 0x30
 8016298:	9d02      	ldr	r5, [sp, #8]
 801629a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801629e:	f1ca 0018 	rsb	r0, sl, #24
 80162a2:	fa43 f200 	asr.w	r2, r3, r0
 80162a6:	4415      	add	r5, r2
 80162a8:	4082      	lsls	r2, r0
 80162aa:	1a9b      	subs	r3, r3, r2
 80162ac:	aa0c      	add	r2, sp, #48	; 0x30
 80162ae:	9502      	str	r5, [sp, #8]
 80162b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80162b4:	f1ca 0217 	rsb	r2, sl, #23
 80162b8:	fa43 fb02 	asr.w	fp, r3, r2
 80162bc:	f1bb 0f00 	cmp.w	fp, #0
 80162c0:	dd65      	ble.n	801638e <__kernel_rem_pio2+0x26e>
 80162c2:	9b02      	ldr	r3, [sp, #8]
 80162c4:	2200      	movs	r2, #0
 80162c6:	3301      	adds	r3, #1
 80162c8:	9302      	str	r3, [sp, #8]
 80162ca:	4615      	mov	r5, r2
 80162cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80162d0:	4294      	cmp	r4, r2
 80162d2:	f300 809f 	bgt.w	8016414 <__kernel_rem_pio2+0x2f4>
 80162d6:	f1ba 0f00 	cmp.w	sl, #0
 80162da:	dd07      	ble.n	80162ec <__kernel_rem_pio2+0x1cc>
 80162dc:	f1ba 0f01 	cmp.w	sl, #1
 80162e0:	f000 80c1 	beq.w	8016466 <__kernel_rem_pio2+0x346>
 80162e4:	f1ba 0f02 	cmp.w	sl, #2
 80162e8:	f000 80c7 	beq.w	801647a <__kernel_rem_pio2+0x35a>
 80162ec:	f1bb 0f02 	cmp.w	fp, #2
 80162f0:	d14d      	bne.n	801638e <__kernel_rem_pio2+0x26e>
 80162f2:	4632      	mov	r2, r6
 80162f4:	463b      	mov	r3, r7
 80162f6:	4954      	ldr	r1, [pc, #336]	; (8016448 <__kernel_rem_pio2+0x328>)
 80162f8:	2000      	movs	r0, #0
 80162fa:	f7e9 ffc5 	bl	8000288 <__aeabi_dsub>
 80162fe:	4606      	mov	r6, r0
 8016300:	460f      	mov	r7, r1
 8016302:	2d00      	cmp	r5, #0
 8016304:	d043      	beq.n	801638e <__kernel_rem_pio2+0x26e>
 8016306:	4650      	mov	r0, sl
 8016308:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8016438 <__kernel_rem_pio2+0x318>
 801630c:	f000 fa58 	bl	80167c0 <scalbn>
 8016310:	4630      	mov	r0, r6
 8016312:	4639      	mov	r1, r7
 8016314:	ec53 2b10 	vmov	r2, r3, d0
 8016318:	f7e9 ffb6 	bl	8000288 <__aeabi_dsub>
 801631c:	4606      	mov	r6, r0
 801631e:	460f      	mov	r7, r1
 8016320:	e035      	b.n	801638e <__kernel_rem_pio2+0x26e>
 8016322:	4b4a      	ldr	r3, [pc, #296]	; (801644c <__kernel_rem_pio2+0x32c>)
 8016324:	2200      	movs	r2, #0
 8016326:	4630      	mov	r0, r6
 8016328:	4639      	mov	r1, r7
 801632a:	f7ea f965 	bl	80005f8 <__aeabi_dmul>
 801632e:	f7ea fc13 	bl	8000b58 <__aeabi_d2iz>
 8016332:	f7ea f8f7 	bl	8000524 <__aeabi_i2d>
 8016336:	4602      	mov	r2, r0
 8016338:	460b      	mov	r3, r1
 801633a:	ec43 2b18 	vmov	d8, r2, r3
 801633e:	4b44      	ldr	r3, [pc, #272]	; (8016450 <__kernel_rem_pio2+0x330>)
 8016340:	2200      	movs	r2, #0
 8016342:	f7ea f959 	bl	80005f8 <__aeabi_dmul>
 8016346:	4602      	mov	r2, r0
 8016348:	460b      	mov	r3, r1
 801634a:	4630      	mov	r0, r6
 801634c:	4639      	mov	r1, r7
 801634e:	f7e9 ff9b 	bl	8000288 <__aeabi_dsub>
 8016352:	f7ea fc01 	bl	8000b58 <__aeabi_d2iz>
 8016356:	e9d5 2300 	ldrd	r2, r3, [r5]
 801635a:	f84b 0b04 	str.w	r0, [fp], #4
 801635e:	ec51 0b18 	vmov	r0, r1, d8
 8016362:	f7e9 ff93 	bl	800028c <__adddf3>
 8016366:	f109 39ff 	add.w	r9, r9, #4294967295
 801636a:	4606      	mov	r6, r0
 801636c:	460f      	mov	r7, r1
 801636e:	e75b      	b.n	8016228 <__kernel_rem_pio2+0x108>
 8016370:	d106      	bne.n	8016380 <__kernel_rem_pio2+0x260>
 8016372:	1e63      	subs	r3, r4, #1
 8016374:	aa0c      	add	r2, sp, #48	; 0x30
 8016376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801637a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801637e:	e79d      	b.n	80162bc <__kernel_rem_pio2+0x19c>
 8016380:	4b34      	ldr	r3, [pc, #208]	; (8016454 <__kernel_rem_pio2+0x334>)
 8016382:	2200      	movs	r2, #0
 8016384:	f7ea fbbe 	bl	8000b04 <__aeabi_dcmpge>
 8016388:	2800      	cmp	r0, #0
 801638a:	d140      	bne.n	801640e <__kernel_rem_pio2+0x2ee>
 801638c:	4683      	mov	fp, r0
 801638e:	2200      	movs	r2, #0
 8016390:	2300      	movs	r3, #0
 8016392:	4630      	mov	r0, r6
 8016394:	4639      	mov	r1, r7
 8016396:	f7ea fb97 	bl	8000ac8 <__aeabi_dcmpeq>
 801639a:	2800      	cmp	r0, #0
 801639c:	f000 80c1 	beq.w	8016522 <__kernel_rem_pio2+0x402>
 80163a0:	1e65      	subs	r5, r4, #1
 80163a2:	462b      	mov	r3, r5
 80163a4:	2200      	movs	r2, #0
 80163a6:	9900      	ldr	r1, [sp, #0]
 80163a8:	428b      	cmp	r3, r1
 80163aa:	da6d      	bge.n	8016488 <__kernel_rem_pio2+0x368>
 80163ac:	2a00      	cmp	r2, #0
 80163ae:	f000 808a 	beq.w	80164c6 <__kernel_rem_pio2+0x3a6>
 80163b2:	ab0c      	add	r3, sp, #48	; 0x30
 80163b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80163b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	f000 80ae 	beq.w	801651e <__kernel_rem_pio2+0x3fe>
 80163c2:	4650      	mov	r0, sl
 80163c4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8016438 <__kernel_rem_pio2+0x318>
 80163c8:	f000 f9fa 	bl	80167c0 <scalbn>
 80163cc:	1c6b      	adds	r3, r5, #1
 80163ce:	00da      	lsls	r2, r3, #3
 80163d0:	9205      	str	r2, [sp, #20]
 80163d2:	ec57 6b10 	vmov	r6, r7, d0
 80163d6:	aa70      	add	r2, sp, #448	; 0x1c0
 80163d8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801644c <__kernel_rem_pio2+0x32c>
 80163dc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80163e0:	462c      	mov	r4, r5
 80163e2:	f04f 0800 	mov.w	r8, #0
 80163e6:	2c00      	cmp	r4, #0
 80163e8:	f280 80d4 	bge.w	8016594 <__kernel_rem_pio2+0x474>
 80163ec:	462c      	mov	r4, r5
 80163ee:	2c00      	cmp	r4, #0
 80163f0:	f2c0 8102 	blt.w	80165f8 <__kernel_rem_pio2+0x4d8>
 80163f4:	4b18      	ldr	r3, [pc, #96]	; (8016458 <__kernel_rem_pio2+0x338>)
 80163f6:	461e      	mov	r6, r3
 80163f8:	ab70      	add	r3, sp, #448	; 0x1c0
 80163fa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80163fe:	1b2b      	subs	r3, r5, r4
 8016400:	f04f 0900 	mov.w	r9, #0
 8016404:	f04f 0a00 	mov.w	sl, #0
 8016408:	2700      	movs	r7, #0
 801640a:	9306      	str	r3, [sp, #24]
 801640c:	e0e6      	b.n	80165dc <__kernel_rem_pio2+0x4bc>
 801640e:	f04f 0b02 	mov.w	fp, #2
 8016412:	e756      	b.n	80162c2 <__kernel_rem_pio2+0x1a2>
 8016414:	f8d8 3000 	ldr.w	r3, [r8]
 8016418:	bb05      	cbnz	r5, 801645c <__kernel_rem_pio2+0x33c>
 801641a:	b123      	cbz	r3, 8016426 <__kernel_rem_pio2+0x306>
 801641c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8016420:	f8c8 3000 	str.w	r3, [r8]
 8016424:	2301      	movs	r3, #1
 8016426:	3201      	adds	r2, #1
 8016428:	f108 0804 	add.w	r8, r8, #4
 801642c:	461d      	mov	r5, r3
 801642e:	e74f      	b.n	80162d0 <__kernel_rem_pio2+0x1b0>
	...
 801643c:	3ff00000 	.word	0x3ff00000
 8016440:	08018d78 	.word	0x08018d78
 8016444:	40200000 	.word	0x40200000
 8016448:	3ff00000 	.word	0x3ff00000
 801644c:	3e700000 	.word	0x3e700000
 8016450:	41700000 	.word	0x41700000
 8016454:	3fe00000 	.word	0x3fe00000
 8016458:	08018d38 	.word	0x08018d38
 801645c:	1acb      	subs	r3, r1, r3
 801645e:	f8c8 3000 	str.w	r3, [r8]
 8016462:	462b      	mov	r3, r5
 8016464:	e7df      	b.n	8016426 <__kernel_rem_pio2+0x306>
 8016466:	1e62      	subs	r2, r4, #1
 8016468:	ab0c      	add	r3, sp, #48	; 0x30
 801646a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801646e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8016472:	a90c      	add	r1, sp, #48	; 0x30
 8016474:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016478:	e738      	b.n	80162ec <__kernel_rem_pio2+0x1cc>
 801647a:	1e62      	subs	r2, r4, #1
 801647c:	ab0c      	add	r3, sp, #48	; 0x30
 801647e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016482:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016486:	e7f4      	b.n	8016472 <__kernel_rem_pio2+0x352>
 8016488:	a90c      	add	r1, sp, #48	; 0x30
 801648a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801648e:	3b01      	subs	r3, #1
 8016490:	430a      	orrs	r2, r1
 8016492:	e788      	b.n	80163a6 <__kernel_rem_pio2+0x286>
 8016494:	3301      	adds	r3, #1
 8016496:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801649a:	2900      	cmp	r1, #0
 801649c:	d0fa      	beq.n	8016494 <__kernel_rem_pio2+0x374>
 801649e:	9a08      	ldr	r2, [sp, #32]
 80164a0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80164a4:	446a      	add	r2, sp
 80164a6:	3a98      	subs	r2, #152	; 0x98
 80164a8:	9208      	str	r2, [sp, #32]
 80164aa:	9a06      	ldr	r2, [sp, #24]
 80164ac:	a920      	add	r1, sp, #128	; 0x80
 80164ae:	18a2      	adds	r2, r4, r2
 80164b0:	18e3      	adds	r3, r4, r3
 80164b2:	f104 0801 	add.w	r8, r4, #1
 80164b6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80164ba:	9302      	str	r3, [sp, #8]
 80164bc:	9b02      	ldr	r3, [sp, #8]
 80164be:	4543      	cmp	r3, r8
 80164c0:	da04      	bge.n	80164cc <__kernel_rem_pio2+0x3ac>
 80164c2:	461c      	mov	r4, r3
 80164c4:	e6a2      	b.n	801620c <__kernel_rem_pio2+0xec>
 80164c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80164c8:	2301      	movs	r3, #1
 80164ca:	e7e4      	b.n	8016496 <__kernel_rem_pio2+0x376>
 80164cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164ce:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80164d2:	f7ea f827 	bl	8000524 <__aeabi_i2d>
 80164d6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80164da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164dc:	46ab      	mov	fp, r5
 80164de:	461c      	mov	r4, r3
 80164e0:	f04f 0900 	mov.w	r9, #0
 80164e4:	2600      	movs	r6, #0
 80164e6:	2700      	movs	r7, #0
 80164e8:	9b05      	ldr	r3, [sp, #20]
 80164ea:	4599      	cmp	r9, r3
 80164ec:	dd06      	ble.n	80164fc <__kernel_rem_pio2+0x3dc>
 80164ee:	9b08      	ldr	r3, [sp, #32]
 80164f0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80164f4:	f108 0801 	add.w	r8, r8, #1
 80164f8:	9308      	str	r3, [sp, #32]
 80164fa:	e7df      	b.n	80164bc <__kernel_rem_pio2+0x39c>
 80164fc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8016500:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8016504:	f7ea f878 	bl	80005f8 <__aeabi_dmul>
 8016508:	4602      	mov	r2, r0
 801650a:	460b      	mov	r3, r1
 801650c:	4630      	mov	r0, r6
 801650e:	4639      	mov	r1, r7
 8016510:	f7e9 febc 	bl	800028c <__adddf3>
 8016514:	f109 0901 	add.w	r9, r9, #1
 8016518:	4606      	mov	r6, r0
 801651a:	460f      	mov	r7, r1
 801651c:	e7e4      	b.n	80164e8 <__kernel_rem_pio2+0x3c8>
 801651e:	3d01      	subs	r5, #1
 8016520:	e747      	b.n	80163b2 <__kernel_rem_pio2+0x292>
 8016522:	ec47 6b10 	vmov	d0, r6, r7
 8016526:	f1ca 0000 	rsb	r0, sl, #0
 801652a:	f000 f949 	bl	80167c0 <scalbn>
 801652e:	ec57 6b10 	vmov	r6, r7, d0
 8016532:	4ba0      	ldr	r3, [pc, #640]	; (80167b4 <__kernel_rem_pio2+0x694>)
 8016534:	ee10 0a10 	vmov	r0, s0
 8016538:	2200      	movs	r2, #0
 801653a:	4639      	mov	r1, r7
 801653c:	f7ea fae2 	bl	8000b04 <__aeabi_dcmpge>
 8016540:	b1f8      	cbz	r0, 8016582 <__kernel_rem_pio2+0x462>
 8016542:	4b9d      	ldr	r3, [pc, #628]	; (80167b8 <__kernel_rem_pio2+0x698>)
 8016544:	2200      	movs	r2, #0
 8016546:	4630      	mov	r0, r6
 8016548:	4639      	mov	r1, r7
 801654a:	f7ea f855 	bl	80005f8 <__aeabi_dmul>
 801654e:	f7ea fb03 	bl	8000b58 <__aeabi_d2iz>
 8016552:	4680      	mov	r8, r0
 8016554:	f7e9 ffe6 	bl	8000524 <__aeabi_i2d>
 8016558:	4b96      	ldr	r3, [pc, #600]	; (80167b4 <__kernel_rem_pio2+0x694>)
 801655a:	2200      	movs	r2, #0
 801655c:	f7ea f84c 	bl	80005f8 <__aeabi_dmul>
 8016560:	460b      	mov	r3, r1
 8016562:	4602      	mov	r2, r0
 8016564:	4639      	mov	r1, r7
 8016566:	4630      	mov	r0, r6
 8016568:	f7e9 fe8e 	bl	8000288 <__aeabi_dsub>
 801656c:	f7ea faf4 	bl	8000b58 <__aeabi_d2iz>
 8016570:	1c65      	adds	r5, r4, #1
 8016572:	ab0c      	add	r3, sp, #48	; 0x30
 8016574:	f10a 0a18 	add.w	sl, sl, #24
 8016578:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801657c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8016580:	e71f      	b.n	80163c2 <__kernel_rem_pio2+0x2a2>
 8016582:	4630      	mov	r0, r6
 8016584:	4639      	mov	r1, r7
 8016586:	f7ea fae7 	bl	8000b58 <__aeabi_d2iz>
 801658a:	ab0c      	add	r3, sp, #48	; 0x30
 801658c:	4625      	mov	r5, r4
 801658e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016592:	e716      	b.n	80163c2 <__kernel_rem_pio2+0x2a2>
 8016594:	ab0c      	add	r3, sp, #48	; 0x30
 8016596:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801659a:	f7e9 ffc3 	bl	8000524 <__aeabi_i2d>
 801659e:	4632      	mov	r2, r6
 80165a0:	463b      	mov	r3, r7
 80165a2:	f7ea f829 	bl	80005f8 <__aeabi_dmul>
 80165a6:	4642      	mov	r2, r8
 80165a8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80165ac:	464b      	mov	r3, r9
 80165ae:	4630      	mov	r0, r6
 80165b0:	4639      	mov	r1, r7
 80165b2:	f7ea f821 	bl	80005f8 <__aeabi_dmul>
 80165b6:	3c01      	subs	r4, #1
 80165b8:	4606      	mov	r6, r0
 80165ba:	460f      	mov	r7, r1
 80165bc:	e713      	b.n	80163e6 <__kernel_rem_pio2+0x2c6>
 80165be:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80165c2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80165c6:	f7ea f817 	bl	80005f8 <__aeabi_dmul>
 80165ca:	4602      	mov	r2, r0
 80165cc:	460b      	mov	r3, r1
 80165ce:	4648      	mov	r0, r9
 80165d0:	4651      	mov	r1, sl
 80165d2:	f7e9 fe5b 	bl	800028c <__adddf3>
 80165d6:	3701      	adds	r7, #1
 80165d8:	4681      	mov	r9, r0
 80165da:	468a      	mov	sl, r1
 80165dc:	9b00      	ldr	r3, [sp, #0]
 80165de:	429f      	cmp	r7, r3
 80165e0:	dc02      	bgt.n	80165e8 <__kernel_rem_pio2+0x4c8>
 80165e2:	9b06      	ldr	r3, [sp, #24]
 80165e4:	429f      	cmp	r7, r3
 80165e6:	ddea      	ble.n	80165be <__kernel_rem_pio2+0x49e>
 80165e8:	9a06      	ldr	r2, [sp, #24]
 80165ea:	ab48      	add	r3, sp, #288	; 0x120
 80165ec:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80165f0:	e9c6 9a00 	strd	r9, sl, [r6]
 80165f4:	3c01      	subs	r4, #1
 80165f6:	e6fa      	b.n	80163ee <__kernel_rem_pio2+0x2ce>
 80165f8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80165fa:	2b02      	cmp	r3, #2
 80165fc:	dc0b      	bgt.n	8016616 <__kernel_rem_pio2+0x4f6>
 80165fe:	2b00      	cmp	r3, #0
 8016600:	dc39      	bgt.n	8016676 <__kernel_rem_pio2+0x556>
 8016602:	d05d      	beq.n	80166c0 <__kernel_rem_pio2+0x5a0>
 8016604:	9b02      	ldr	r3, [sp, #8]
 8016606:	f003 0007 	and.w	r0, r3, #7
 801660a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801660e:	ecbd 8b02 	vpop	{d8}
 8016612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016616:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8016618:	2b03      	cmp	r3, #3
 801661a:	d1f3      	bne.n	8016604 <__kernel_rem_pio2+0x4e4>
 801661c:	9b05      	ldr	r3, [sp, #20]
 801661e:	9500      	str	r5, [sp, #0]
 8016620:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8016624:	eb0d 0403 	add.w	r4, sp, r3
 8016628:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801662c:	46a2      	mov	sl, r4
 801662e:	9b00      	ldr	r3, [sp, #0]
 8016630:	2b00      	cmp	r3, #0
 8016632:	f1aa 0a08 	sub.w	sl, sl, #8
 8016636:	dc69      	bgt.n	801670c <__kernel_rem_pio2+0x5ec>
 8016638:	46aa      	mov	sl, r5
 801663a:	f1ba 0f01 	cmp.w	sl, #1
 801663e:	f1a4 0408 	sub.w	r4, r4, #8
 8016642:	f300 8083 	bgt.w	801674c <__kernel_rem_pio2+0x62c>
 8016646:	9c05      	ldr	r4, [sp, #20]
 8016648:	ab48      	add	r3, sp, #288	; 0x120
 801664a:	441c      	add	r4, r3
 801664c:	2000      	movs	r0, #0
 801664e:	2100      	movs	r1, #0
 8016650:	2d01      	cmp	r5, #1
 8016652:	f300 809a 	bgt.w	801678a <__kernel_rem_pio2+0x66a>
 8016656:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801665a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801665e:	f1bb 0f00 	cmp.w	fp, #0
 8016662:	f040 8098 	bne.w	8016796 <__kernel_rem_pio2+0x676>
 8016666:	9b04      	ldr	r3, [sp, #16]
 8016668:	e9c3 7800 	strd	r7, r8, [r3]
 801666c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8016670:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8016674:	e7c6      	b.n	8016604 <__kernel_rem_pio2+0x4e4>
 8016676:	9e05      	ldr	r6, [sp, #20]
 8016678:	ab48      	add	r3, sp, #288	; 0x120
 801667a:	441e      	add	r6, r3
 801667c:	462c      	mov	r4, r5
 801667e:	2000      	movs	r0, #0
 8016680:	2100      	movs	r1, #0
 8016682:	2c00      	cmp	r4, #0
 8016684:	da33      	bge.n	80166ee <__kernel_rem_pio2+0x5ce>
 8016686:	f1bb 0f00 	cmp.w	fp, #0
 801668a:	d036      	beq.n	80166fa <__kernel_rem_pio2+0x5da>
 801668c:	4602      	mov	r2, r0
 801668e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016692:	9c04      	ldr	r4, [sp, #16]
 8016694:	e9c4 2300 	strd	r2, r3, [r4]
 8016698:	4602      	mov	r2, r0
 801669a:	460b      	mov	r3, r1
 801669c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80166a0:	f7e9 fdf2 	bl	8000288 <__aeabi_dsub>
 80166a4:	ae4a      	add	r6, sp, #296	; 0x128
 80166a6:	2401      	movs	r4, #1
 80166a8:	42a5      	cmp	r5, r4
 80166aa:	da29      	bge.n	8016700 <__kernel_rem_pio2+0x5e0>
 80166ac:	f1bb 0f00 	cmp.w	fp, #0
 80166b0:	d002      	beq.n	80166b8 <__kernel_rem_pio2+0x598>
 80166b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80166b6:	4619      	mov	r1, r3
 80166b8:	9b04      	ldr	r3, [sp, #16]
 80166ba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80166be:	e7a1      	b.n	8016604 <__kernel_rem_pio2+0x4e4>
 80166c0:	9c05      	ldr	r4, [sp, #20]
 80166c2:	ab48      	add	r3, sp, #288	; 0x120
 80166c4:	441c      	add	r4, r3
 80166c6:	2000      	movs	r0, #0
 80166c8:	2100      	movs	r1, #0
 80166ca:	2d00      	cmp	r5, #0
 80166cc:	da09      	bge.n	80166e2 <__kernel_rem_pio2+0x5c2>
 80166ce:	f1bb 0f00 	cmp.w	fp, #0
 80166d2:	d002      	beq.n	80166da <__kernel_rem_pio2+0x5ba>
 80166d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80166d8:	4619      	mov	r1, r3
 80166da:	9b04      	ldr	r3, [sp, #16]
 80166dc:	e9c3 0100 	strd	r0, r1, [r3]
 80166e0:	e790      	b.n	8016604 <__kernel_rem_pio2+0x4e4>
 80166e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80166e6:	f7e9 fdd1 	bl	800028c <__adddf3>
 80166ea:	3d01      	subs	r5, #1
 80166ec:	e7ed      	b.n	80166ca <__kernel_rem_pio2+0x5aa>
 80166ee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80166f2:	f7e9 fdcb 	bl	800028c <__adddf3>
 80166f6:	3c01      	subs	r4, #1
 80166f8:	e7c3      	b.n	8016682 <__kernel_rem_pio2+0x562>
 80166fa:	4602      	mov	r2, r0
 80166fc:	460b      	mov	r3, r1
 80166fe:	e7c8      	b.n	8016692 <__kernel_rem_pio2+0x572>
 8016700:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8016704:	f7e9 fdc2 	bl	800028c <__adddf3>
 8016708:	3401      	adds	r4, #1
 801670a:	e7cd      	b.n	80166a8 <__kernel_rem_pio2+0x588>
 801670c:	e9da 8900 	ldrd	r8, r9, [sl]
 8016710:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8016714:	9b00      	ldr	r3, [sp, #0]
 8016716:	3b01      	subs	r3, #1
 8016718:	9300      	str	r3, [sp, #0]
 801671a:	4632      	mov	r2, r6
 801671c:	463b      	mov	r3, r7
 801671e:	4640      	mov	r0, r8
 8016720:	4649      	mov	r1, r9
 8016722:	f7e9 fdb3 	bl	800028c <__adddf3>
 8016726:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801672a:	4602      	mov	r2, r0
 801672c:	460b      	mov	r3, r1
 801672e:	4640      	mov	r0, r8
 8016730:	4649      	mov	r1, r9
 8016732:	f7e9 fda9 	bl	8000288 <__aeabi_dsub>
 8016736:	4632      	mov	r2, r6
 8016738:	463b      	mov	r3, r7
 801673a:	f7e9 fda7 	bl	800028c <__adddf3>
 801673e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8016742:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8016746:	ed8a 7b00 	vstr	d7, [sl]
 801674a:	e770      	b.n	801662e <__kernel_rem_pio2+0x50e>
 801674c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8016750:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8016754:	4640      	mov	r0, r8
 8016756:	4632      	mov	r2, r6
 8016758:	463b      	mov	r3, r7
 801675a:	4649      	mov	r1, r9
 801675c:	f7e9 fd96 	bl	800028c <__adddf3>
 8016760:	e9cd 0100 	strd	r0, r1, [sp]
 8016764:	4602      	mov	r2, r0
 8016766:	460b      	mov	r3, r1
 8016768:	4640      	mov	r0, r8
 801676a:	4649      	mov	r1, r9
 801676c:	f7e9 fd8c 	bl	8000288 <__aeabi_dsub>
 8016770:	4632      	mov	r2, r6
 8016772:	463b      	mov	r3, r7
 8016774:	f7e9 fd8a 	bl	800028c <__adddf3>
 8016778:	ed9d 7b00 	vldr	d7, [sp]
 801677c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016780:	ed84 7b00 	vstr	d7, [r4]
 8016784:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016788:	e757      	b.n	801663a <__kernel_rem_pio2+0x51a>
 801678a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801678e:	f7e9 fd7d 	bl	800028c <__adddf3>
 8016792:	3d01      	subs	r5, #1
 8016794:	e75c      	b.n	8016650 <__kernel_rem_pio2+0x530>
 8016796:	9b04      	ldr	r3, [sp, #16]
 8016798:	9a04      	ldr	r2, [sp, #16]
 801679a:	601f      	str	r7, [r3, #0]
 801679c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80167a0:	605c      	str	r4, [r3, #4]
 80167a2:	609d      	str	r5, [r3, #8]
 80167a4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80167a8:	60d3      	str	r3, [r2, #12]
 80167aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80167ae:	6110      	str	r0, [r2, #16]
 80167b0:	6153      	str	r3, [r2, #20]
 80167b2:	e727      	b.n	8016604 <__kernel_rem_pio2+0x4e4>
 80167b4:	41700000 	.word	0x41700000
 80167b8:	3e700000 	.word	0x3e700000
 80167bc:	00000000 	.word	0x00000000

080167c0 <scalbn>:
 80167c0:	b570      	push	{r4, r5, r6, lr}
 80167c2:	ec55 4b10 	vmov	r4, r5, d0
 80167c6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80167ca:	4606      	mov	r6, r0
 80167cc:	462b      	mov	r3, r5
 80167ce:	b999      	cbnz	r1, 80167f8 <scalbn+0x38>
 80167d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80167d4:	4323      	orrs	r3, r4
 80167d6:	d03f      	beq.n	8016858 <scalbn+0x98>
 80167d8:	4b35      	ldr	r3, [pc, #212]	; (80168b0 <scalbn+0xf0>)
 80167da:	4629      	mov	r1, r5
 80167dc:	ee10 0a10 	vmov	r0, s0
 80167e0:	2200      	movs	r2, #0
 80167e2:	f7e9 ff09 	bl	80005f8 <__aeabi_dmul>
 80167e6:	4b33      	ldr	r3, [pc, #204]	; (80168b4 <scalbn+0xf4>)
 80167e8:	429e      	cmp	r6, r3
 80167ea:	4604      	mov	r4, r0
 80167ec:	460d      	mov	r5, r1
 80167ee:	da10      	bge.n	8016812 <scalbn+0x52>
 80167f0:	a327      	add	r3, pc, #156	; (adr r3, 8016890 <scalbn+0xd0>)
 80167f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167f6:	e01f      	b.n	8016838 <scalbn+0x78>
 80167f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80167fc:	4291      	cmp	r1, r2
 80167fe:	d10c      	bne.n	801681a <scalbn+0x5a>
 8016800:	ee10 2a10 	vmov	r2, s0
 8016804:	4620      	mov	r0, r4
 8016806:	4629      	mov	r1, r5
 8016808:	f7e9 fd40 	bl	800028c <__adddf3>
 801680c:	4604      	mov	r4, r0
 801680e:	460d      	mov	r5, r1
 8016810:	e022      	b.n	8016858 <scalbn+0x98>
 8016812:	460b      	mov	r3, r1
 8016814:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016818:	3936      	subs	r1, #54	; 0x36
 801681a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801681e:	4296      	cmp	r6, r2
 8016820:	dd0d      	ble.n	801683e <scalbn+0x7e>
 8016822:	2d00      	cmp	r5, #0
 8016824:	a11c      	add	r1, pc, #112	; (adr r1, 8016898 <scalbn+0xd8>)
 8016826:	e9d1 0100 	ldrd	r0, r1, [r1]
 801682a:	da02      	bge.n	8016832 <scalbn+0x72>
 801682c:	a11c      	add	r1, pc, #112	; (adr r1, 80168a0 <scalbn+0xe0>)
 801682e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016832:	a319      	add	r3, pc, #100	; (adr r3, 8016898 <scalbn+0xd8>)
 8016834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016838:	f7e9 fede 	bl	80005f8 <__aeabi_dmul>
 801683c:	e7e6      	b.n	801680c <scalbn+0x4c>
 801683e:	1872      	adds	r2, r6, r1
 8016840:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016844:	428a      	cmp	r2, r1
 8016846:	dcec      	bgt.n	8016822 <scalbn+0x62>
 8016848:	2a00      	cmp	r2, #0
 801684a:	dd08      	ble.n	801685e <scalbn+0x9e>
 801684c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016850:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016854:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016858:	ec45 4b10 	vmov	d0, r4, r5
 801685c:	bd70      	pop	{r4, r5, r6, pc}
 801685e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016862:	da08      	bge.n	8016876 <scalbn+0xb6>
 8016864:	2d00      	cmp	r5, #0
 8016866:	a10a      	add	r1, pc, #40	; (adr r1, 8016890 <scalbn+0xd0>)
 8016868:	e9d1 0100 	ldrd	r0, r1, [r1]
 801686c:	dac0      	bge.n	80167f0 <scalbn+0x30>
 801686e:	a10e      	add	r1, pc, #56	; (adr r1, 80168a8 <scalbn+0xe8>)
 8016870:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016874:	e7bc      	b.n	80167f0 <scalbn+0x30>
 8016876:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801687a:	3236      	adds	r2, #54	; 0x36
 801687c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016880:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016884:	4620      	mov	r0, r4
 8016886:	4b0c      	ldr	r3, [pc, #48]	; (80168b8 <scalbn+0xf8>)
 8016888:	2200      	movs	r2, #0
 801688a:	e7d5      	b.n	8016838 <scalbn+0x78>
 801688c:	f3af 8000 	nop.w
 8016890:	c2f8f359 	.word	0xc2f8f359
 8016894:	01a56e1f 	.word	0x01a56e1f
 8016898:	8800759c 	.word	0x8800759c
 801689c:	7e37e43c 	.word	0x7e37e43c
 80168a0:	8800759c 	.word	0x8800759c
 80168a4:	fe37e43c 	.word	0xfe37e43c
 80168a8:	c2f8f359 	.word	0xc2f8f359
 80168ac:	81a56e1f 	.word	0x81a56e1f
 80168b0:	43500000 	.word	0x43500000
 80168b4:	ffff3cb0 	.word	0xffff3cb0
 80168b8:	3c900000 	.word	0x3c900000

080168bc <_init>:
 80168bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168be:	bf00      	nop
 80168c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168c2:	bc08      	pop	{r3}
 80168c4:	469e      	mov	lr, r3
 80168c6:	4770      	bx	lr

080168c8 <_fini>:
 80168c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168ca:	bf00      	nop
 80168cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168ce:	bc08      	pop	{r3}
 80168d0:	469e      	mov	lr, r3
 80168d2:	4770      	bx	lr
