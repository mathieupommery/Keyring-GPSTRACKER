
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000162cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002470  08016460  08016460  00026460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080188d0  080188d0  00030308  2**0
                  CONTENTS
  4 .ARM          00000008  080188d0  080188d0  000288d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080188d8  080188d8  00030308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080188d8  080188d8  000288d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080188dc  080188dc  000288dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  080188e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000133c  20000308  08018be8  00030308  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001644  08018be8  00031644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002568c  00000000  00000000  0003037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050f3  00000000  00000000  00055a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001eb0  00000000  00000000  0005ab00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017b1  00000000  00000000  0005c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028167  00000000  00000000  0005e161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000282f9  00000000  00000000  000862c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e532b  00000000  00000000  000ae5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009ba0  00000000  00000000  001938ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0019d48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000308 	.word	0x20000308
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016444 	.word	0x08016444

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000030c 	.word	0x2000030c
 80001cc:	08016444 	.word	0x08016444

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <QMC_init>:
//code recuperer et fonctionnel, il utilise une fonction init, permettant d'initialiser le capteur correctement en ecrivant dans ces registres selon le datasheet,
//puis d'une fonction read, qui lit le capteur puis met à jour la structurede donnée

//###############################################################################################################
uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	71fb      	strb	r3, [r7, #7]
	uint8_t array[2];
	qmc->i2c=i2c;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	601a      	str	r2, [r3, #0]
	qmc->Control_Register=0x11;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2211      	movs	r2, #17
 8001008:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 800100a:	2301      	movs	r3, #1
 800100c:	753b      	strb	r3, [r7, #20]
	array[1]=qmc->Control_Register;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	791b      	ldrb	r3, [r3, #4]
 8001012:	757b      	strb	r3, [r7, #21]

	if(Output_Data_Rate==200)qmc->Control_Register|=0b00001100;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2bc8      	cmp	r3, #200	; 0xc8
 8001018:	d107      	bne.n	800102a <QMC_init+0x3a>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	791b      	ldrb	r3, [r3, #4]
 800101e:	f043 030c 	orr.w	r3, r3, #12
 8001022:	b2da      	uxtb	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	711a      	strb	r2, [r3, #4]
 8001028:	e024      	b.n	8001074 <QMC_init+0x84>
	else if(Output_Data_Rate==100)qmc->Control_Register|=0b00001000;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b64      	cmp	r3, #100	; 0x64
 800102e:	d107      	bne.n	8001040 <QMC_init+0x50>
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	791b      	ldrb	r3, [r3, #4]
 8001034:	f043 0308 	orr.w	r3, r3, #8
 8001038:	b2da      	uxtb	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	711a      	strb	r2, [r3, #4]
 800103e:	e019      	b.n	8001074 <QMC_init+0x84>
	else if(Output_Data_Rate==50)qmc->Control_Register|=0b00000100;
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b32      	cmp	r3, #50	; 0x32
 8001044:	d107      	bne.n	8001056 <QMC_init+0x66>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	b2da      	uxtb	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	711a      	strb	r2, [r3, #4]
 8001054:	e00e      	b.n	8001074 <QMC_init+0x84>
	else if(Output_Data_Rate==10)qmc->Control_Register|=0b00000000;
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b0a      	cmp	r3, #10
 800105a:	d104      	bne.n	8001066 <QMC_init+0x76>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	791a      	ldrb	r2, [r3, #4]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	711a      	strb	r2, [r3, #4]
 8001064:	e006      	b.n	8001074 <QMC_init+0x84>
	else qmc->Control_Register|=0b00001100;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	791b      	ldrb	r3, [r3, #4]
 800106a:	f043 030c 	orr.w	r3, r3, #12
 800106e:	b2da      	uxtb	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	2301      	movs	r3, #1
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	220b      	movs	r2, #11
 800108a:	211a      	movs	r1, #26
 800108c:	f005 fbcc 	bl	8006828 <HAL_I2C_Mem_Write>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <QMC_init+0xaa>
 8001096:	2301      	movs	r3, #1
 8001098:	e014      	b.n	80010c4 <QMC_init+0xd4>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	2364      	movs	r3, #100	; 0x64
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	3301      	adds	r3, #1
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	2209      	movs	r2, #9
 80010b2:	211a      	movs	r1, #26
 80010b4:	f005 fbb8 	bl	8006828 <HAL_I2C_Mem_Write>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <QMC_init+0xd2>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <QMC_init+0xd4>

	return 0;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010dc:	d104      	bne.n	80010e8 <HAL_GPIO_EXTI_Callback+0x1c>
//		ssd1306_SetCursor(33, 44);
//		ssd1306_WriteString("btna", Font_6x8, White);
//		ssd1306_UpdateScreen();
		BTN_A++;//sert à reconnaitre lorsque le bouto na est appuyer, cette variable est mise à 1 par un e interruption.
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_GPIO_EXTI_Callback+0x3c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_GPIO_EXTI_Callback+0x3c>)
 80010e6:	6013      	str	r3, [r2, #0]


	}
	if(GPIO_Pin==GPIO_PIN_15){
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010ee:	d104      	bne.n	80010fa <HAL_GPIO_EXTI_Callback+0x2e>
		//ssd1306_SetCursor(33, 44);
		//ssd1306_WriteString("btnb", Font_6x8, White);
		//ssd1306_UpdateScreen();
		BTN_B++;//de meme pour le bouton b
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_GPIO_EXTI_Callback+0x40>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3301      	adds	r3, #1
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <HAL_GPIO_EXTI_Callback+0x40>)
 80010f8:	6013      	str	r3, [r2, #0]

	}
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000868 	.word	0x20000868
 800110c:	2000086c 	.word	0x2000086c

08001110 <HAL_UART_RxCpltCallback>:

 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <HAL_UART_RxCpltCallback+0xc4>)
 800111a:	881a      	ldrh	r2, [r3, #0]
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800111e:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001122:	881b      	ldrh	r3, [r3, #0]
 8001124:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001128:	d922      	bls.n	8001170 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001132:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b28      	ldr	r3, [pc, #160]	; (80011dc <HAL_UART_RxCpltCallback+0xcc>)
 800113c:	4413      	add	r3, r2
 800113e:	89fa      	ldrh	r2, [r7, #14]
 8001140:	4927      	ldr	r1, [pc, #156]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001142:	4618      	mov	r0, r3
 8001144:	f011 fb69 	bl	801281a <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800114a:	2200      	movs	r2, #0
 800114c:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 800114e:	89fb      	ldrh	r3, [r7, #14]
 8001150:	4a23      	ldr	r2, [pc, #140]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 8001152:	1899      	adds	r1, r3, r2
 8001154:	89fb      	ldrh	r3, [r7, #14]
 8001156:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800115a:	461a      	mov	r2, r3
 800115c:	481f      	ldr	r0, [pc, #124]	; (80011dc <HAL_UART_RxCpltCallback+0xcc>)
 800115e:	f011 fb5c 	bl	801281a <memcpy>
				newPos = (64-datatocopy);  // update the position
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001168:	b29a      	uxth	r2, r3
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_UART_RxCpltCallback+0xc4>)
 800116c:	801a      	strh	r2, [r3, #0]
 800116e:	e01b      	b.n	80011a8 <HAL_UART_RxCpltCallback+0x98>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <HAL_UART_RxCpltCallback+0xcc>)
 8001178:	4413      	add	r3, r2
 800117a:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 800117c:	4614      	mov	r4, r2
 800117e:	469c      	mov	ip, r3
 8001180:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8001184:	4665      	mov	r5, ip
 8001186:	4626      	mov	r6, r4
 8001188:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800118a:	6028      	str	r0, [r5, #0]
 800118c:	6069      	str	r1, [r5, #4]
 800118e:	60aa      	str	r2, [r5, #8]
 8001190:	60eb      	str	r3, [r5, #12]
 8001192:	3410      	adds	r4, #16
 8001194:	f10c 0c10 	add.w	ip, ip, #16
 8001198:	4574      	cmp	r4, lr
 800119a:	d1f3      	bne.n	8001184 <HAL_UART_RxCpltCallback+0x74>
				newPos = 64+oldPos; //update buffer position
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_UART_RxCpltCallback+0xc8>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	3340      	adds	r3, #64	; 0x40
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <HAL_UART_RxCpltCallback+0xc4>)
 80011a6:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 80011a8:	2240      	movs	r2, #64	; 0x40
 80011aa:	490d      	ldr	r1, [pc, #52]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <HAL_UART_RxCpltCallback+0xd4>)
 80011ae:	f009 fab7 	bl	800a720 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_UART_RxCpltCallback+0xd8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_UART_RxCpltCallback+0xd8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0204 	bic.w	r2, r2, #4
 80011c0:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 80011c2:	2240      	movs	r2, #64	; 0x40
 80011c4:	4906      	ldr	r1, [pc, #24]	; (80011e0 <HAL_UART_RxCpltCallback+0xd0>)
 80011c6:	4807      	ldr	r0, [pc, #28]	; (80011e4 <HAL_UART_RxCpltCallback+0xd4>)
 80011c8:	f009 faaa 	bl	800a720 <HAL_UART_Receive_DMA>
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d4:	200005e2 	.word	0x200005e2
 80011d8:	200005e0 	.word	0x200005e0
 80011dc:	20000624 	.word	0x20000624
 80011e0:	200005e4 	.word	0x200005e4
 80011e4:	20000478 	.word	0x20000478
 80011e8:	20000500 	.word	0x20000500
 80011ec:	00000000 	.word	0x00000000

080011f0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80011f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a3c      	ldr	r2, [pc, #240]	; (80012f0 <HAL_ADC_ConvCpltCallback+0x100>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d166      	bne.n	80012d2 <HAL_ADC_ConvCpltCallback+0xe2>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 8001204:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <HAL_ADC_ConvCpltCallback+0x104>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f98b 	bl	8000524 <__aeabi_i2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	a135      	add	r1, pc, #212	; (adr r1, 80012e8 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001218:	f7ff fb18 	bl	800084c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fce0 	bl	8000be8 <__aeabi_d2f>
 8001228:	4603      	mov	r3, r0
 800122a:	4a33      	ldr	r2, [pc, #204]	; (80012f8 <HAL_ADC_ConvCpltCallback+0x108>)
 800122c:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_ADC_ConvCpltCallback+0x10c>)
 8001230:	ed93 7a00 	vldr	s14, [r3]
 8001234:	4b32      	ldr	r3, [pc, #200]	; (8001300 <HAL_ADC_ConvCpltCallback+0x110>)
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800123e:	ee17 0a90 	vmov	r0, s15
 8001242:	f7ff f981 	bl	8000548 <__aeabi_f2d>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	f04f 0000 	mov.w	r0, #0
 800124e:	492d      	ldr	r1, [pc, #180]	; (8001304 <HAL_ADC_ConvCpltCallback+0x114>)
 8001250:	f7ff fafc 	bl	800084c <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4690      	mov	r8, r2
 800125a:	4699      	mov	r9, r3
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <HAL_ADC_ConvCpltCallback+0x104>)
 800125e:	885b      	ldrh	r3, [r3, #2]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f95f 	bl	8000524 <__aeabi_i2d>
 8001266:	4604      	mov	r4, r0
 8001268:	460d      	mov	r5, r1
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <HAL_ADC_ConvCpltCallback+0x108>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f96a 	bl	8000548 <__aeabi_f2d>
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HAL_ADC_ConvCpltCallback+0x118>)
 800127a:	f7ff fae7 	bl	800084c <__aeabi_ddiv>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4620      	mov	r0, r4
 8001284:	4629      	mov	r1, r5
 8001286:	f7ff f9b7 	bl	80005f8 <__aeabi_dmul>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4614      	mov	r4, r2
 8001290:	461d      	mov	r5, r3
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_ADC_ConvCpltCallback+0x110>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f956 	bl	8000548 <__aeabi_f2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4620      	mov	r0, r4
 80012a2:	4629      	mov	r1, r5
 80012a4:	f7fe fff0 	bl	8000288 <__aeabi_dsub>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4640      	mov	r0, r8
 80012ae:	4649      	mov	r1, r9
 80012b0:	f7ff f9a2 	bl	80005f8 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc94 	bl	8000be8 <__aeabi_d2f>
 80012c0:	ee07 0a10 	vmov	s14, r0
 80012c4:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80012c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <HAL_ADC_ConvCpltCallback+0x11c>)
 80012ce:	edc3 7a00 	vstr	s15, [r3]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 2);
 80012d2:	2202      	movs	r2, #2
 80012d4:	4907      	ldr	r1, [pc, #28]	; (80012f4 <HAL_ADC_ConvCpltCallback+0x104>)
 80012d6:	480e      	ldr	r0, [pc, #56]	; (8001310 <HAL_ADC_ConvCpltCallback+0x120>)
 80012d8:	f003 fd58 	bl	8004d8c <HAL_ADC_Start_DMA>



}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012e6:	bf00      	nop
 80012e8:	d70a3d70 	.word	0xd70a3d70
 80012ec:	40b36323 	.word	0x40b36323
 80012f0:	50040000 	.word	0x50040000
 80012f4:	20000880 	.word	0x20000880
 80012f8:	20000888 	.word	0x20000888
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000004 	.word	0x20000004
 8001304:	40590000 	.word	0x40590000
 8001308:	40080000 	.word	0x40080000
 800130c:	20000884 	.word	0x20000884
 8001310:	20000324 	.word	0x20000324

08001314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131a:	f003 f982 	bl	8004622 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131e:	f000 f867 	bl	80013f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001322:	f000 f8b8 	bl	8001496 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001326:	f000 fabf 	bl	80018a8 <MX_GPIO_Init>
  MX_DMA_Init();
 800132a:	f000 fa8b 	bl	8001844 <MX_DMA_Init>
  MX_I2C1_Init();
 800132e:	f000 f957 	bl	80015e0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001332:	f000 f995 	bl	8001660 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001336:	f000 f9d3 	bl	80016e0 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800133a:	f000 f8db 	bl	80014f4 <MX_ADC1_Init>
  MX_TIM2_Init();
 800133e:	f000 f9fb 	bl	8001738 <MX_TIM2_Init>
  MX_TIM7_Init();
 8001342:	f000 fa47 	bl	80017d4 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8001346:	f00e fd19 	bl	800fd7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */



	ssd1306_Init();
 800134a:	f000 ff35 	bl	80021b8 <ssd1306_Init>
	HAL_Delay(100);
 800134e:	2064      	movs	r0, #100	; 0x64
 8001350:	f003 f9dc 	bl	800470c <HAL_Delay>
	ssd1306_Fill(Black);
 8001354:	2000      	movs	r0, #0
 8001356:	f000 ff99 	bl	800228c <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);//start screen
 800135a:	2301      	movs	r3, #1
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	2340      	movs	r3, #64	; 0x40
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2340      	movs	r3, #64	; 0x40
 8001364:	4a19      	ldr	r2, [pc, #100]	; (80013cc <main+0xb8>)
 8001366:	2120      	movs	r1, #32
 8001368:	2020      	movs	r0, #32
 800136a:	f001 fa61 	bl	8002830 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();//demarrage des différents périphériques en i2c, qui ont besoin detre configuré
 800136e:	f000 ffa5 	bl	80022bc <ssd1306_UpdateScreen>
	QMC_init(&compasdata,&hi2c1,10);
 8001372:	220a      	movs	r2, #10
 8001374:	4916      	ldr	r1, [pc, #88]	; (80013d0 <main+0xbc>)
 8001376:	4817      	ldr	r0, [pc, #92]	; (80013d4 <main+0xc0>)
 8001378:	f7ff fe3a 	bl	8000ff0 <QMC_init>

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);//pour l'instant le gps est toujours alimenté
 800137c:	2201      	movs	r2, #1
 800137e:	2102      	movs	r1, #2
 8001380:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001384:	f005 f984 	bl	8006690 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800138c:	f003 f9be 	bl	800470c <HAL_Delay>
	//memset(eepromold,'/0',sizeof(eepromold));
	//ee_init();
	//ee_read(0,2048,(uint8_t*)eepromold);

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 2);
 8001390:	2202      	movs	r2, #2
 8001392:	4911      	ldr	r1, [pc, #68]	; (80013d8 <main+0xc4>)
 8001394:	4811      	ldr	r0, [pc, #68]	; (80013dc <main+0xc8>)
 8001396:	f003 fcf9 	bl	8004d8c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 800139a:	4811      	ldr	r0, [pc, #68]	; (80013e0 <main+0xcc>)
 800139c:	f008 fda6 	bl	8009eec <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim7);
 80013a0:	4810      	ldr	r0, [pc, #64]	; (80013e4 <main+0xd0>)
 80013a2:	f008 fda3 	bl	8009eec <HAL_TIM_Base_Start>

	HAL_UART_Abort(&hlpuart1);
 80013a6:	4810      	ldr	r0, [pc, #64]	; (80013e8 <main+0xd4>)
 80013a8:	f009 fa06 	bl	800a7b8 <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//lancement du dma pour le gps
 80013ac:	2240      	movs	r2, #64	; 0x40
 80013ae:	490f      	ldr	r1, [pc, #60]	; (80013ec <main+0xd8>)
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <main+0xd4>)
 80013b2:	f009 f9b5 	bl	800a720 <HAL_UART_Receive_DMA>

	ssd1306_Fill(Black);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f000 ff68 	bl	800228c <ssd1306_Fill>
	ssd1306_UpdateScreen();
 80013bc:	f000 ff7e 	bl	80022bc <ssd1306_UpdateScreen>

    /* USER CODE BEGIN 3 */



		statemachine();//on execute la machine à etat
 80013c0:	f001 fac2 	bl	8002948 <statemachine>
		ssd1306_UpdateScreen();//la machine a état ce sera occupe de mettre les choses necessaire dans le buffer du processeur necessaire a envoyer a l'ecran, il reste plus qu'a l'envoyer en i2c
 80013c4:	f000 ff7a 	bl	80022bc <ssd1306_UpdateScreen>
		statemachine();//on execute la machine à etat
 80013c8:	e7fa      	b.n	80013c0 <main+0xac>
 80013ca:	bf00      	nop
 80013cc:	0801665c 	.word	0x0801665c
 80013d0:	200003d0 	.word	0x200003d0
 80013d4:	20000ce4 	.word	0x20000ce4
 80013d8:	20000880 	.word	0x20000880
 80013dc:	20000324 	.word	0x20000324
 80013e0:	20000548 	.word	0x20000548
 80013e4:	20000594 	.word	0x20000594
 80013e8:	20000478 	.word	0x20000478
 80013ec:	200005e4 	.word	0x200005e4

080013f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b096      	sub	sp, #88	; 0x58
 80013f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	2244      	movs	r2, #68	; 0x44
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f011 f8ef 	bl	80125e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001404:	463b      	mov	r3, r7
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001412:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001416:	f007 fb8b 	bl	8008b30 <HAL_PWREx_ControlVoltageScaling>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001420:	f000 fac6 	bl	80019b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001424:	2310      	movs	r3, #16
 8001426:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001428:	2301      	movs	r3, #1
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001430:	2360      	movs	r3, #96	; 0x60
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001434:	2302      	movs	r3, #2
 8001436:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001438:	2301      	movs	r3, #1
 800143a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800143c:	2301      	movs	r3, #1
 800143e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001440:	2314      	movs	r3, #20
 8001442:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001444:	2307      	movs	r3, #7
 8001446:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001448:	2302      	movs	r3, #2
 800144a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4618      	mov	r0, r3
 8001456:	f007 fbd1 	bl	8008bfc <HAL_RCC_OscConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001460:	f000 faa6 	bl	80019b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001464:	230f      	movs	r3, #15
 8001466:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001468:	2303      	movs	r3, #3
 800146a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001470:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001474:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800147a:	463b      	mov	r3, r7
 800147c:	2102      	movs	r1, #2
 800147e:	4618      	mov	r0, r3
 8001480:	f007 ffd0 	bl	8009424 <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800148a:	f000 fa91 	bl	80019b0 <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3758      	adds	r7, #88	; 0x58
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b096      	sub	sp, #88	; 0x58
 800149a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2254      	movs	r2, #84	; 0x54
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f011 f89d 	bl	80125e2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80014a8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80014ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80014b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014b8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014ba:	2301      	movs	r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014be:	2301      	movs	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80014c2:	2318      	movs	r3, #24
 80014c4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014c6:	2307      	movs	r3, #7
 80014c8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80014d2:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80014d6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4618      	mov	r0, r3
 80014dc:	f008 f9c6 	bl	800986c <HAL_RCCEx_PeriphCLKConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80014e6:	f000 fa63 	bl	80019b0 <Error_Handler>
  }
}
 80014ea:	bf00      	nop
 80014ec:	3758      	adds	r7, #88	; 0x58
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <MX_ADC1_Init+0xdc>)
 800150c:	4a31      	ldr	r2, [pc, #196]	; (80015d4 <MX_ADC1_Init+0xe0>)
 800150e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001510:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001516:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800151c:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <MX_ADC1_Init+0xdc>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001524:	2201      	movs	r2, #1
 8001526:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <MX_ADC1_Init+0xdc>)
 800152a:	2204      	movs	r2, #4
 800152c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001530:	2200      	movs	r2, #0
 8001532:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001536:	2201      	movs	r2, #1
 8001538:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800153a:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <MX_ADC1_Init+0xdc>)
 800153c:	2202      	movs	r2, #2
 800153e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <MX_ADC1_Init+0xdc>)
 800154a:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001552:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <MX_ADC1_Init+0xdc>)
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001562:	2200      	movs	r2, #0
 8001564:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800156e:	4818      	ldr	r0, [pc, #96]	; (80015d0 <MX_ADC1_Init+0xdc>)
 8001570:	f003 faca 	bl	8004b08 <HAL_ADC_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800157a:	f000 fa19 	bl	80019b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_ADC1_Init+0xe4>)
 8001580:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001582:	2306      	movs	r3, #6
 8001584:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001586:	2307      	movs	r3, #7
 8001588:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800158a:	237f      	movs	r3, #127	; 0x7f
 800158c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800158e:	2304      	movs	r3, #4
 8001590:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001596:	463b      	mov	r3, r7
 8001598:	4619      	mov	r1, r3
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_ADC1_Init+0xdc>)
 800159c:	f003 fe4c 	bl	8005238 <HAL_ADC_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80015a6:	f000 fa03 	bl	80019b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_ADC1_Init+0xe8>)
 80015ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015ae:	230c      	movs	r3, #12
 80015b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b2:	463b      	mov	r3, r7
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	; (80015d0 <MX_ADC1_Init+0xdc>)
 80015b8:	f003 fe3e 	bl	8005238 <HAL_ADC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80015c2:	f000 f9f5 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000324 	.word	0x20000324
 80015d4:	50040000 	.word	0x50040000
 80015d8:	80000001 	.word	0x80000001
 80015dc:	c7520000 	.word	0xc7520000

080015e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_I2C1_Init+0x74>)
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <MX_I2C1_Init+0x78>)
 80015e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_I2C1_Init+0x74>)
 80015ec:	4a1b      	ldr	r2, [pc, #108]	; (800165c <MX_I2C1_Init+0x7c>)
 80015ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <MX_I2C1_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <MX_I2C1_Init+0x74>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_I2C1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_I2C1_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_I2C1_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_I2C1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_I2C1_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800161a:	480e      	ldr	r0, [pc, #56]	; (8001654 <MX_I2C1_Init+0x74>)
 800161c:	f005 f868 	bl	80066f0 <HAL_I2C_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001626:	f000 f9c3 	bl	80019b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800162a:	2100      	movs	r1, #0
 800162c:	4809      	ldr	r0, [pc, #36]	; (8001654 <MX_I2C1_Init+0x74>)
 800162e:	f005 fc73 	bl	8006f18 <HAL_I2CEx_ConfigAnalogFilter>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001638:	f000 f9ba 	bl	80019b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800163c:	2100      	movs	r1, #0
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_I2C1_Init+0x74>)
 8001640:	f005 fcb5 	bl	8006fae <HAL_I2CEx_ConfigDigitalFilter>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800164a:	f000 f9b1 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200003d0 	.word	0x200003d0
 8001658:	40005400 	.word	0x40005400
 800165c:	00202538 	.word	0x00202538

08001660 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <MX_I2C3_Init+0x74>)
 8001666:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <MX_I2C3_Init+0x78>)
 8001668:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00202538;
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <MX_I2C3_Init+0x74>)
 800166c:	4a1b      	ldr	r2, [pc, #108]	; (80016dc <MX_I2C3_Init+0x7c>)
 800166e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <MX_I2C3_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <MX_I2C3_Init+0x74>)
 8001678:	2201      	movs	r2, #1
 800167a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <MX_I2C3_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <MX_I2C3_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <MX_I2C3_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_I2C3_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_I2C3_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800169a:	480e      	ldr	r0, [pc, #56]	; (80016d4 <MX_I2C3_Init+0x74>)
 800169c:	f005 f828 	bl	80066f0 <HAL_I2C_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80016a6:	f000 f983 	bl	80019b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016aa:	2100      	movs	r1, #0
 80016ac:	4809      	ldr	r0, [pc, #36]	; (80016d4 <MX_I2C3_Init+0x74>)
 80016ae:	f005 fc33 	bl	8006f18 <HAL_I2CEx_ConfigAnalogFilter>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80016b8:	f000 f97a 	bl	80019b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80016bc:	2100      	movs	r1, #0
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_I2C3_Init+0x74>)
 80016c0:	f005 fc75 	bl	8006fae <HAL_I2CEx_ConfigDigitalFilter>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80016ca:	f000 f971 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000424 	.word	0x20000424
 80016d8:	40005c00 	.word	0x40005c00
 80016dc:	00202538 	.word	0x00202538

080016e0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_LPUART1_UART_Init+0x50>)
 80016e6:	4a13      	ldr	r2, [pc, #76]	; (8001734 <MX_LPUART1_UART_Init+0x54>)
 80016e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_LPUART1_UART_Init+0x50>)
 80016ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016f0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_LPUART1_UART_Init+0x50>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <MX_LPUART1_UART_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_LPUART1_UART_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <MX_LPUART1_UART_Init+0x50>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_LPUART1_UART_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <MX_LPUART1_UART_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_LPUART1_UART_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <MX_LPUART1_UART_Init+0x50>)
 800171e:	f008 ffb1 	bl	800a684 <HAL_UART_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001728:	f000 f942 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000478 	.word	0x20000478
 8001734:	40008000 	.word	0x40008000

08001738 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001756:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <MX_TIM2_Init+0x98>)
 8001758:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800175c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <MX_TIM2_Init+0x98>)
 8001760:	f240 128f 	movw	r2, #399	; 0x18f
 8001764:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MX_TIM2_Init+0x98>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800176c:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <MX_TIM2_Init+0x98>)
 800176e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001772:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <MX_TIM2_Init+0x98>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <MX_TIM2_Init+0x98>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001780:	4813      	ldr	r0, [pc, #76]	; (80017d0 <MX_TIM2_Init+0x98>)
 8001782:	f008 fb5b 	bl	8009e3c <HAL_TIM_Base_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800178c:	f000 f910 	bl	80019b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001794:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	4619      	mov	r1, r3
 800179c:	480c      	ldr	r0, [pc, #48]	; (80017d0 <MX_TIM2_Init+0x98>)
 800179e:	f008 fcf3 	bl	800a188 <HAL_TIM_ConfigClockSource>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80017a8:	f000 f902 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017ac:	2320      	movs	r3, #32
 80017ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_TIM2_Init+0x98>)
 80017ba:	f008 fedf 	bl	800a57c <HAL_TIMEx_MasterConfigSynchronization>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80017c4:	f000 f8f4 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	3720      	adds	r7, #32
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000548 	.word	0x20000548

080017d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_TIM7_Init+0x68>)
 80017e6:	4a16      	ldr	r2, [pc, #88]	; (8001840 <MX_TIM7_Init+0x6c>)
 80017e8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000-1;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_TIM7_Init+0x68>)
 80017ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80017f0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_TIM7_Init+0x68>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8000-1;
 80017f8:	4b10      	ldr	r3, [pc, #64]	; (800183c <MX_TIM7_Init+0x68>)
 80017fa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80017fe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_TIM7_Init+0x68>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001806:	480d      	ldr	r0, [pc, #52]	; (800183c <MX_TIM7_Init+0x68>)
 8001808:	f008 fb18 	bl	8009e3c <HAL_TIM_Base_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001812:	f000 f8cd 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <MX_TIM7_Init+0x68>)
 8001824:	f008 feaa 	bl	800a57c <HAL_TIMEx_MasterConfigSynchronization>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800182e:	f000 f8bf 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000594 	.word	0x20000594
 8001840:	40001400 	.word	0x40001400

08001844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_DMA_Init+0x60>)
 800184c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800184e:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <MX_DMA_Init+0x60>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6493      	str	r3, [r2, #72]	; 0x48
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <MX_DMA_Init+0x60>)
 8001858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <MX_DMA_Init+0x60>)
 8001864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001866:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <MX_DMA_Init+0x60>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6493      	str	r3, [r2, #72]	; 0x48
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <MX_DMA_Init+0x60>)
 8001870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	200b      	movs	r0, #11
 8001880:	f004 fae3 	bl	8005e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001884:	200b      	movs	r0, #11
 8001886:	f004 fafc 	bl	8005e82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 1, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2101      	movs	r1, #1
 800188e:	2045      	movs	r0, #69	; 0x45
 8001890:	f004 fadb 	bl	8005e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 8001894:	2045      	movs	r0, #69	; 0x45
 8001896:	f004 faf4 	bl	8005e82 <HAL_NVIC_EnableIRQ>

}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000

080018a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018be:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <MX_GPIO_Init+0xfc>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	4a38      	ldr	r2, [pc, #224]	; (80019a4 <MX_GPIO_Init+0xfc>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ca:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <MX_GPIO_Init+0xfc>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <MX_GPIO_Init+0xfc>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	4a32      	ldr	r2, [pc, #200]	; (80019a4 <MX_GPIO_Init+0xfc>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <MX_GPIO_Init+0xfc>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <MX_GPIO_Init+0xfc>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	4a2c      	ldr	r2, [pc, #176]	; (80019a4 <MX_GPIO_Init+0xfc>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <MX_GPIO_Init+0xfc>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	2102      	movs	r1, #2
 800190a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190e:	f004 febf 	bl	8006690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	2101      	movs	r1, #1
 8001916:	4824      	ldr	r0, [pc, #144]	; (80019a8 <MX_GPIO_Init+0x100>)
 8001918:	f004 feba 	bl	8006690 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800191c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001922:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001928:	2302      	movs	r3, #2
 800192a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192c:	f107 030c 	add.w	r3, r7, #12
 8001930:	4619      	mov	r1, r3
 8001932:	481e      	ldr	r0, [pc, #120]	; (80019ac <MX_GPIO_Init+0x104>)
 8001934:	f004 fd42 	bl	80063bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001938:	2302      	movs	r3, #2
 800193a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193c:	2301      	movs	r3, #1
 800193e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	4619      	mov	r1, r3
 800194e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001952:	f004 fd33 	bl	80063bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001956:	2310      	movs	r3, #16
 8001958:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800195a:	2303      	movs	r3, #3
 800195c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f004 fd26 	bl	80063bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001970:	2301      	movs	r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001974:	2301      	movs	r3, #1
 8001976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	4619      	mov	r1, r3
 8001986:	4808      	ldr	r0, [pc, #32]	; (80019a8 <MX_GPIO_Init+0x100>)
 8001988:	f004 fd18 	bl	80063bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	2028      	movs	r0, #40	; 0x28
 8001992:	f004 fa5a 	bl	8005e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001996:	2028      	movs	r0, #40	; 0x28
 8001998:	f004 fa73 	bl	8005e82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800199c:	bf00      	nop
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40021000 	.word	0x40021000
 80019a8:	48000400 	.word	0x48000400
 80019ac:	48000800 	.word	0x48000800

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
}
 80019b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019b8:	e7fe      	b.n	80019b8 <Error_Handler+0x8>

080019ba <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7fe fc54 	bl	8000270 <strlen>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d801      	bhi.n	80019d2 <gps_checksum+0x18>
 80019ce:	2300      	movs	r3, #0
 80019d0:	e038      	b.n	8001a44 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7fe fc4c 	bl	8000270 <strlen>
 80019d8:	4603      	mov	r3, r0
 80019da:	3b04      	subs	r3, #4
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	4413      	add	r3, r2
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7fe fc43 	bl	8000270 <strlen>
 80019ea:	4603      	mov	r3, r0
 80019ec:	3b03      	subs	r3, #3
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	e00a      	b.n	8001a16 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	4053      	eors	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	3301      	adds	r3, #1
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7fe fc2a 	bl	8000270 <strlen>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	1f5a      	subs	r2, r3, #5
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d8ec      	bhi.n	8001a00 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8001a26:	f107 0308 	add.w	r3, r7, #8
 8001a2a:	2210      	movs	r2, #16
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f00f fdfe 	bl	8011630 <strtol>
 8001a34:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d101      	bne.n	8001a42 <gps_checksum+0x88>
        return 1;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001a42:	2300      	movs	r3, #0
    }
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b0b7      	sub	sp, #220	; 0xdc
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8001a5c:	f107 0320 	add.w	r3, r7, #32
 8001a60:	2264      	movs	r2, #100	; 0x64
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f010 fdbc 	bl	80125e2 <memset>
    char *marker = strtok(inputString, ",");
 8001a6a:	49c2      	ldr	r1, [pc, #776]	; (8001d74 <nmea_GPGGA+0x328>)
 8001a6c:	6838      	ldr	r0, [r7, #0]
 8001a6e:	f010 fdd3 	bl	8012618 <strtok>
 8001a72:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001a76:	e027      	b.n	8001ac8 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001a78:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001a7c:	f7fe fbf8 	bl	8000270 <strlen>
 8001a80:	4603      	mov	r3, r0
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001a88:	1c63      	adds	r3, r4, #1
 8001a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a8e:	4610      	mov	r0, r2
 8001a90:	f00e fe16 	bl	80106c0 <malloc>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	00a3      	lsls	r3, r4, #2
 8001a9a:	33d8      	adds	r3, #216	; 0xd8
 8001a9c:	443b      	add	r3, r7
 8001a9e:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	33d8      	adds	r3, #216	; 0xd8
 8001aac:	443b      	add	r3, r7
 8001aae:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001ab2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f010 fea7 	bl	801280a <strcpy>
        marker = strtok(NULL, ",");
 8001abc:	49ad      	ldr	r1, [pc, #692]	; (8001d74 <nmea_GPGGA+0x328>)
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f010 fdaa 	bl	8012618 <strtok>
 8001ac4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001ac8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1d3      	bne.n	8001a78 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8001ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	332c      	adds	r3, #44	; 0x2c
 8001ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f010 fe8e 	bl	801280a <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001aee:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001af2:	2b53      	cmp	r3, #83	; 0x53
 8001af4:	d004      	beq.n	8001b00 <nmea_GPGGA+0xb4>
 8001af6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001afa:	2b4e      	cmp	r3, #78	; 0x4e
 8001afc:	f040 8159 	bne.w	8001db2 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b06:	e010      	b.n	8001b2a <nmea_GPGGA+0xde>
 8001b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b0e:	4413      	add	r3, r2
 8001b10:	7819      	ldrb	r1, [r3, #0]
 8001b12:	f107 021c 	add.w	r2, r7, #28
 8001b16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b1a:	4413      	add	r3, r2
 8001b1c:	460a      	mov	r2, r1
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b24:	3301      	adds	r3, #1
 8001b26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	ddea      	ble.n	8001b08 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b38:	e011      	b.n	8001b5e <nmea_GPGGA+0x112>
 8001b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b40:	3302      	adds	r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	7819      	ldrb	r1, [r3, #0]
 8001b46:	f107 0214 	add.w	r2, r7, #20
 8001b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b4e:	4413      	add	r3, r2
 8001b50:	460a      	mov	r2, r1
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b62:	2b05      	cmp	r3, #5
 8001b64:	dde9      	ble.n	8001b3a <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001b66:	f107 031c 	add.w	r3, r7, #28
 8001b6a:	220a      	movs	r2, #10
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f00f fd5e 	bl	8011630 <strtol>
 8001b74:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f00f fc6c 	bl	801145c <strtof>
 8001b84:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001b88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b94:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001b98:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001d78 <nmea_GPGGA+0x32c>
 8001b9c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba4:	ee17 0a90 	vmov	r0, s15
 8001ba8:	f7fe fcce 	bl	8000548 <__aeabi_f2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001bba:	e010      	b.n	8001bde <nmea_GPGGA+0x192>
 8001bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bc2:	4413      	add	r3, r2
 8001bc4:	7819      	ldrb	r1, [r3, #0]
 8001bc6:	f107 0210 	add.w	r2, r7, #16
 8001bca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bce:	4413      	add	r3, r2
 8001bd0:	460a      	mov	r2, r1
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001bde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	ddea      	ble.n	8001bbc <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001bec:	e011      	b.n	8001c12 <nmea_GPGGA+0x1c6>
 8001bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bf4:	3303      	adds	r3, #3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	7819      	ldrb	r1, [r3, #0]
 8001bfa:	f107 0208 	add.w	r2, r7, #8
 8001bfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c02:	4413      	add	r3, r2
 8001c04:	460a      	mov	r2, r1
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	dde9      	ble.n	8001bee <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	220a      	movs	r2, #10
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f00f fd04 	bl	8011630 <strtol>
 8001c28:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8001c2c:	f107 0308 	add.w	r3, r7, #8
 8001c30:	2100      	movs	r1, #0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f00f fc12 	bl	801145c <strtof>
 8001c38:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c40:	ee07 3a90 	vmov	s15, r3
 8001c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c48:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001c4c:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001d78 <nmea_GPGGA+0x32c>
 8001c50:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c58:	ee17 0a90 	vmov	r0, s15
 8001c5c:	f7fe fc74 	bl	8000548 <__aeabi_f2d>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001c74:	f7fe ff28 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d176      	bne.n	8001d6c <nmea_GPGGA+0x320>
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001c8a:	f7fe ff1d 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d16b      	bne.n	8001d6c <nmea_GPGGA+0x320>
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <nmea_GPGGA+0x330>)
 8001c9a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001c9e:	f7fe ff1d 	bl	8000adc <__aeabi_dcmplt>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d061      	beq.n	8001d6c <nmea_GPGGA+0x320>
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <nmea_GPGGA+0x334>)
 8001cae:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001cb2:	f7fe ff13 	bl	8000adc <__aeabi_dcmplt>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d057      	beq.n	8001d6c <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001cc2:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001ccc:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001cd4:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001cde:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8001ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f00f fbb9 	bl	801145c <strtof>
 8001cea:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8001cee:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001cf2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	d102      	bne.n	8001d02 <nmea_GPGGA+0x2b6>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	e001      	b.n	8001d06 <nmea_GPGGA+0x2ba>
 8001d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8001d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d0c:	220a      	movs	r2, #10
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f00f fc8d 	bl	8011630 <strtol>
 8001d16:	4602      	mov	r2, r0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8001d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d1e:	220a      	movs	r2, #10
 8001d20:	2100      	movs	r1, #0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f00f fc84 	bl	8011630 <strtol>
 8001d28:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8001d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bfcc      	ite	gt
 8001d34:	2301      	movgt	r3, #1
 8001d36:	2300      	movle	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f00f fb89 	bl	801145c <strtof>
 8001d4a:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001d4e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001d52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5a:	d102      	bne.n	8001d62 <nmea_GPGGA+0x316>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	e001      	b.n	8001d66 <nmea_GPGGA+0x31a>
 8001d62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001d6a:	e022      	b.n	8001db2 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d72:	e016      	b.n	8001da2 <nmea_GPGGA+0x356>
 8001d74:	08016460 	.word	0x08016460
 8001d78:	42700000 	.word	0x42700000
 8001d7c:	40568000 	.word	0x40568000
 8001d80:	40668000 	.word	0x40668000
 8001d84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	33d8      	adds	r3, #216	; 0xd8
 8001d8c:	443b      	add	r3, r7
 8001d8e:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f00e fc9c 	bl	80106d0 <free>
 8001d98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001da2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001daa:	429a      	cmp	r2, r3
 8001dac:	dbea      	blt.n	8001d84 <nmea_GPGGA+0x338>
            return 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e019      	b.n	8001de6 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001db8:	e00e      	b.n	8001dd8 <nmea_GPGGA+0x38c>
 8001dba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	33d8      	adds	r3, #216	; 0xd8
 8001dc2:	443b      	add	r3, r7
 8001dc4:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00e fc81 	bl	80106d0 <free>
 8001dce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001dd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001ddc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dbea      	blt.n	8001dba <nmea_GPGGA+0x36e>
    return 1;
 8001de4:	2301      	movs	r3, #1
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	37dc      	adds	r7, #220	; 0xdc
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	bf00      	nop

08001df0 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b0a3      	sub	sp, #140	; 0x8c
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	2264      	movs	r2, #100	; 0x64
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f010 fbea 	bl	80125e2 <memset>
    char *marker = strtok(inputString, ",");
 8001e0e:	493b      	ldr	r1, [pc, #236]	; (8001efc <nmea_GPGSA+0x10c>)
 8001e10:	6838      	ldr	r0, [r7, #0]
 8001e12:	f010 fc01 	bl	8012618 <strtok>
 8001e16:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001e1a:	e027      	b.n	8001e6c <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001e1c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001e20:	f7fe fa26 	bl	8000270 <strlen>
 8001e24:	4603      	mov	r3, r0
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001e2c:	1c63      	adds	r3, r4, #1
 8001e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e32:	4610      	mov	r0, r2
 8001e34:	f00e fc44 	bl	80106c0 <malloc>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	00a3      	lsls	r3, r4, #2
 8001e3e:	3388      	adds	r3, #136	; 0x88
 8001e40:	443b      	add	r3, r7
 8001e42:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001e46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	3388      	adds	r3, #136	; 0x88
 8001e50:	443b      	add	r3, r7
 8001e52:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001e56:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f010 fcd5 	bl	801280a <strcpy>
        marker = strtok(NULL, ",");
 8001e60:	4926      	ldr	r1, [pc, #152]	; (8001efc <nmea_GPGSA+0x10c>)
 8001e62:	2000      	movs	r0, #0
 8001e64:	f010 fbd8 	bl	8012618 <strtok>
 8001e68:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1d3      	bne.n	8001e1c <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	220a      	movs	r2, #10
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f00f fbd8 	bl	8011630 <strtol>
 8001e80:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001e82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	bfcc      	ite	gt
 8001e88:	2301      	movgt	r3, #1
 8001e8a:	2300      	movle	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001e98:	2303      	movs	r3, #3
 8001e9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e9c:	e00e      	b.n	8001ebc <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001e9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	3388      	adds	r3, #136	; 0x88
 8001ea4:	443b      	add	r3, r7
 8001ea6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001eb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eb8:	3301      	adds	r3, #1
 8001eba:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ebe:	2b0e      	cmp	r3, #14
 8001ec0:	dded      	ble.n	8001e9e <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001ec8:	2300      	movs	r3, #0
 8001eca:	677b      	str	r3, [r7, #116]	; 0x74
 8001ecc:	e00b      	b.n	8001ee6 <nmea_GPGSA+0xf6>
 8001ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	3388      	adds	r3, #136	; 0x88
 8001ed4:	443b      	add	r3, r7
 8001ed6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f00e fbf8 	bl	80106d0 <free>
 8001ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	677b      	str	r3, [r7, #116]	; 0x74
 8001ee6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001ee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dbee      	blt.n	8001ece <nmea_GPGSA+0xde>
    return 1;
 8001ef0:	2301      	movs	r3, #1
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	378c      	adds	r7, #140	; 0x8c
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}
 8001efa:	bf00      	nop
 8001efc:	08016460 	.word	0x08016460

08001f00 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b0a1      	sub	sp, #132	; 0x84
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001f0e:	f107 030c 	add.w	r3, r7, #12
 8001f12:	2264      	movs	r2, #100	; 0x64
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f010 fb63 	bl	80125e2 <memset>
    char *marker = strtok(inputString, ",");
 8001f1c:	4930      	ldr	r1, [pc, #192]	; (8001fe0 <nmea_GNRMC+0xe0>)
 8001f1e:	6838      	ldr	r0, [r7, #0]
 8001f20:	f010 fb7a 	bl	8012618 <strtok>
 8001f24:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001f26:	e021      	b.n	8001f6c <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001f28:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001f2a:	f7fe f9a1 	bl	8000270 <strlen>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001f34:	1c63      	adds	r3, r4, #1
 8001f36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f38:	4610      	mov	r0, r2
 8001f3a:	f00e fbc1 	bl	80106c0 <malloc>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	461a      	mov	r2, r3
 8001f42:	00a3      	lsls	r3, r4, #2
 8001f44:	3380      	adds	r3, #128	; 0x80
 8001f46:	443b      	add	r3, r7
 8001f48:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8001f4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	3380      	adds	r3, #128	; 0x80
 8001f54:	443b      	add	r3, r7
 8001f56:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001f5a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f010 fc54 	bl	801280a <strcpy>
        marker = strtok(NULL, ",");
 8001f62:	491f      	ldr	r1, [pc, #124]	; (8001fe0 <nmea_GNRMC+0xe0>)
 8001f64:	2000      	movs	r0, #0
 8001f66:	f010 fb57 	bl	8012618 <strtok>
 8001f6a:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8001f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1da      	bne.n	8001f28 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8001f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f00f fa70 	bl	801145c <strtof>
 8001f7c:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8001f80:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001f82:	f7fe fae1 	bl	8000548 <__aeabi_f2d>
 8001f86:	a314      	add	r3, pc, #80	; (adr r3, 8001fd8 <nmea_GNRMC+0xd8>)
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	f7fe fc5e 	bl	800084c <__aeabi_ddiv>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7fe fe26 	bl	8000be8 <__aeabi_d2f>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	677b      	str	r3, [r7, #116]	; 0x74
 8001fa6:	e00b      	b.n	8001fc0 <nmea_GNRMC+0xc0>
 8001fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	3380      	adds	r3, #128	; 0x80
 8001fae:	443b      	add	r3, r7
 8001fb0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00e fb8b 	bl	80106d0 <free>
 8001fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	677b      	str	r3, [r7, #116]	; 0x74
 8001fc0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	dbef      	blt.n	8001fa8 <nmea_GNRMC+0xa8>
    return 1;
 8001fc8:	2301      	movs	r3, #1
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3784      	adds	r7, #132	; 0x84
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd90      	pop	{r4, r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	f3af 8000 	nop.w
 8001fd8:	be76c8b4 	.word	0xbe76c8b4
 8001fdc:	3fff1a9f 	.word	0x3fff1a9f
 8001fe0:	08016460 	.word	0x08016460

08001fe4 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8001fee:	223c      	movs	r2, #60	; 0x3c
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	484e      	ldr	r0, [pc, #312]	; (800212c <nmea_parse+0x148>)
 8001ff4:	f010 faf5 	bl	80125e2 <memset>
    char * token = strtok(buffer, "$");
 8001ff8:	494d      	ldr	r1, [pc, #308]	; (8002130 <nmea_parse+0x14c>)
 8001ffa:	6838      	ldr	r0, [r7, #0]
 8001ffc:	f010 fb0c 	bl	8012618 <strtok>
 8002000:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8002006:	e01d      	b.n	8002044 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002008:	6978      	ldr	r0, [r7, #20]
 800200a:	f7fe f931 	bl	8000270 <strlen>
 800200e:	4603      	mov	r3, r0
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	693c      	ldr	r4, [r7, #16]
 8002014:	1c63      	adds	r3, r4, #1
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	4610      	mov	r0, r2
 800201a:	f00e fb51 	bl	80106c0 <malloc>
 800201e:	4603      	mov	r3, r0
 8002020:	461a      	mov	r2, r3
 8002022:	4b42      	ldr	r3, [pc, #264]	; (800212c <nmea_parse+0x148>)
 8002024:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	3b01      	subs	r3, #1
 800202c:	4a3f      	ldr	r2, [pc, #252]	; (800212c <nmea_parse+0x148>)
 800202e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002032:	6979      	ldr	r1, [r7, #20]
 8002034:	4618      	mov	r0, r3
 8002036:	f010 fbe8 	bl	801280a <strcpy>
        token = strtok(NULL, "$");
 800203a:	493d      	ldr	r1, [pc, #244]	; (8002130 <nmea_parse+0x14c>)
 800203c:	2000      	movs	r0, #0
 800203e:	f010 faeb 	bl	8012618 <strtok>
 8002042:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1de      	bne.n	8002008 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	e052      	b.n	80020f6 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8002050:	4a36      	ldr	r2, [pc, #216]	; (800212c <nmea_parse+0x148>)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002058:	4936      	ldr	r1, [pc, #216]	; (8002134 <nmea_parse+0x150>)
 800205a:	4618      	mov	r0, r3
 800205c:	f010 fb38 	bl	80126d0 <strstr>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d044      	beq.n	80020f0 <nmea_parse+0x10c>
 8002066:	4a31      	ldr	r2, [pc, #196]	; (800212c <nmea_parse+0x148>)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fca3 	bl	80019ba <gps_checksum>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d03a      	beq.n	80020f0 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 800207a:	4a2c      	ldr	r2, [pc, #176]	; (800212c <nmea_parse+0x148>)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	492d      	ldr	r1, [pc, #180]	; (8002138 <nmea_parse+0x154>)
 8002084:	4618      	mov	r0, r3
 8002086:	f010 fb23 	bl	80126d0 <strstr>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d008      	beq.n	80020a2 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8002090:	4a26      	ldr	r2, [pc, #152]	; (800212c <nmea_parse+0x148>)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002098:	4619      	mov	r1, r3
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ff30 	bl	8001f00 <nmea_GNRMC>
 80020a0:	e026      	b.n	80020f0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 80020a2:	4a22      	ldr	r2, [pc, #136]	; (800212c <nmea_parse+0x148>)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020aa:	4924      	ldr	r1, [pc, #144]	; (800213c <nmea_parse+0x158>)
 80020ac:	4618      	mov	r0, r3
 80020ae:	f010 fb0f 	bl	80126d0 <strstr>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 80020b8:	4a1c      	ldr	r2, [pc, #112]	; (800212c <nmea_parse+0x148>)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c0:	4619      	mov	r1, r3
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff fe94 	bl	8001df0 <nmea_GPGSA>
 80020c8:	e012      	b.n	80020f0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 80020ca:	4a18      	ldr	r2, [pc, #96]	; (800212c <nmea_parse+0x148>)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d2:	491b      	ldr	r1, [pc, #108]	; (8002140 <nmea_parse+0x15c>)
 80020d4:	4618      	mov	r0, r3
 80020d6:	f010 fafb 	bl	80126d0 <strstr>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 80020e0:	4a12      	ldr	r2, [pc, #72]	; (800212c <nmea_parse+0x148>)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	4619      	mov	r1, r3
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fcae 	bl	8001a4c <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3301      	adds	r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	dba8      	blt.n	8002050 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	e009      	b.n	8002118 <nmea_parse+0x134>
 8002104:	4a09      	ldr	r2, [pc, #36]	; (800212c <nmea_parse+0x148>)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210c:	4618      	mov	r0, r3
 800210e:	f00e fadf 	bl	80106d0 <free>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	3301      	adds	r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	429a      	cmp	r2, r3
 800211e:	dbf1      	blt.n	8002104 <nmea_parse+0x120>


}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	371c      	adds	r7, #28
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}
 800212a:	bf00      	nop
 800212c:	2000088c 	.word	0x2000088c
 8002130:	08016464 	.word	0x08016464
 8002134:	08016468 	.word	0x08016468
 8002138:	0801646c 	.word	0x0801646c
 800213c:	08016474 	.word	0x08016474
 8002140:	0801647c 	.word	0x0801647c

08002144 <ssd1306_Reset>:
#include <math.h>
#include <stdlib.h>
#include <string.h>  // For memcpy


void ssd1306_Reset(void) {
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af04      	add	r7, sp, #16
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
 8002162:	9302      	str	r3, [sp, #8]
 8002164:	2301      	movs	r3, #1
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	1dfb      	adds	r3, r7, #7
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2301      	movs	r3, #1
 800216e:	2200      	movs	r2, #0
 8002170:	2178      	movs	r1, #120	; 0x78
 8002172:	4803      	ldr	r0, [pc, #12]	; (8002180 <ssd1306_WriteCommand+0x2c>)
 8002174:	f004 fb58 	bl	8006828 <HAL_I2C_Mem_Write>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000424 	.word	0x20000424

08002184 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af04      	add	r7, sp, #16
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	f04f 32ff 	mov.w	r2, #4294967295
 8002196:	9202      	str	r2, [sp, #8]
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2301      	movs	r3, #1
 80021a0:	2240      	movs	r2, #64	; 0x40
 80021a2:	2178      	movs	r1, #120	; 0x78
 80021a4:	4803      	ldr	r0, [pc, #12]	; (80021b4 <ssd1306_WriteData+0x30>)
 80021a6:	f004 fb3f 	bl	8006828 <HAL_I2C_Mem_Write>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000424 	.word	0x20000424

080021b8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80021bc:	f7ff ffc2 	bl	8002144 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80021c0:	2064      	movs	r0, #100	; 0x64
 80021c2:	f002 faa3 	bl	800470c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80021c6:	2000      	movs	r0, #0
 80021c8:	f000 fba0 	bl	800290c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80021cc:	2020      	movs	r0, #32
 80021ce:	f7ff ffc1 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80021d2:	2000      	movs	r0, #0
 80021d4:	f7ff ffbe 	bl	8002154 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80021d8:	20b0      	movs	r0, #176	; 0xb0
 80021da:	f7ff ffbb 	bl	8002154 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80021de:	20c8      	movs	r0, #200	; 0xc8
 80021e0:	f7ff ffb8 	bl	8002154 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80021e4:	2000      	movs	r0, #0
 80021e6:	f7ff ffb5 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80021ea:	2010      	movs	r0, #16
 80021ec:	f7ff ffb2 	bl	8002154 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80021f0:	2040      	movs	r0, #64	; 0x40
 80021f2:	f7ff ffaf 	bl	8002154 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80021f6:	20ff      	movs	r0, #255	; 0xff
 80021f8:	f000 fb75 	bl	80028e6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80021fc:	20a1      	movs	r0, #161	; 0xa1
 80021fe:	f7ff ffa9 	bl	8002154 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002202:	20a6      	movs	r0, #166	; 0xa6
 8002204:	f7ff ffa6 	bl	8002154 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002208:	20a8      	movs	r0, #168	; 0xa8
 800220a:	f7ff ffa3 	bl	8002154 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800220e:	203f      	movs	r0, #63	; 0x3f
 8002210:	f7ff ffa0 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002214:	20a4      	movs	r0, #164	; 0xa4
 8002216:	f7ff ff9d 	bl	8002154 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800221a:	20d3      	movs	r0, #211	; 0xd3
 800221c:	f7ff ff9a 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002220:	2000      	movs	r0, #0
 8002222:	f7ff ff97 	bl	8002154 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002226:	20d5      	movs	r0, #213	; 0xd5
 8002228:	f7ff ff94 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800222c:	20f0      	movs	r0, #240	; 0xf0
 800222e:	f7ff ff91 	bl	8002154 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002232:	20d9      	movs	r0, #217	; 0xd9
 8002234:	f7ff ff8e 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002238:	2022      	movs	r0, #34	; 0x22
 800223a:	f7ff ff8b 	bl	8002154 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800223e:	20da      	movs	r0, #218	; 0xda
 8002240:	f7ff ff88 	bl	8002154 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002244:	2012      	movs	r0, #18
 8002246:	f7ff ff85 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800224a:	20db      	movs	r0, #219	; 0xdb
 800224c:	f7ff ff82 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002250:	2020      	movs	r0, #32
 8002252:	f7ff ff7f 	bl	8002154 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002256:	208d      	movs	r0, #141	; 0x8d
 8002258:	f7ff ff7c 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800225c:	2014      	movs	r0, #20
 800225e:	f7ff ff79 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002262:	2001      	movs	r0, #1
 8002264:	f000 fb52 	bl	800290c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002268:	2000      	movs	r0, #0
 800226a:	f000 f80f 	bl	800228c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800226e:	f000 f825 	bl	80022bc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <ssd1306_Init+0xd0>)
 8002274:	2200      	movs	r2, #0
 8002276:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <ssd1306_Init+0xd0>)
 800227a:	2200      	movs	r2, #0
 800227c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800227e:	4b02      	ldr	r3, [pc, #8]	; (8002288 <ssd1306_Init+0xd0>)
 8002280:	2201      	movs	r2, #1
 8002282:	711a      	strb	r2, [r3, #4]
}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000cc8 	.word	0x20000cc8

0800228c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <ssd1306_Fill+0x14>
 800229c:	2300      	movs	r3, #0
 800229e:	e000      	b.n	80022a2 <ssd1306_Fill+0x16>
 80022a0:	23ff      	movs	r3, #255	; 0xff
 80022a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a6:	4619      	mov	r1, r3
 80022a8:	4803      	ldr	r0, [pc, #12]	; (80022b8 <ssd1306_Fill+0x2c>)
 80022aa:	f010 f99a 	bl	80125e2 <memset>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200008c8 	.word	0x200008c8

080022bc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80022c2:	2300      	movs	r3, #0
 80022c4:	71fb      	strb	r3, [r7, #7]
 80022c6:	e016      	b.n	80022f6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	3b50      	subs	r3, #80	; 0x50
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff40 	bl	8002154 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff ff3d 	bl	8002154 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80022da:	2010      	movs	r0, #16
 80022dc:	f7ff ff3a 	bl	8002154 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	01db      	lsls	r3, r3, #7
 80022e4:	4a08      	ldr	r2, [pc, #32]	; (8002308 <ssd1306_UpdateScreen+0x4c>)
 80022e6:	4413      	add	r3, r2
 80022e8:	2180      	movs	r1, #128	; 0x80
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff4a 	bl	8002184 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	3301      	adds	r3, #1
 80022f4:	71fb      	strb	r3, [r7, #7]
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	2b07      	cmp	r3, #7
 80022fa:	d9e5      	bls.n	80022c8 <ssd1306_UpdateScreen+0xc>
    }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200008c8 	.word	0x200008c8

0800230c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
 8002316:	460b      	mov	r3, r1
 8002318:	71bb      	strb	r3, [r7, #6]
 800231a:	4613      	mov	r3, r2
 800231c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	db3d      	blt.n	80023a2 <ssd1306_DrawPixel+0x96>
 8002326:	79bb      	ldrb	r3, [r7, #6]
 8002328:	2b3f      	cmp	r3, #63	; 0x3f
 800232a:	d83a      	bhi.n	80023a2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800232c:	797b      	ldrb	r3, [r7, #5]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d11a      	bne.n	8002368 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002332:	79fa      	ldrb	r2, [r7, #7]
 8002334:	79bb      	ldrb	r3, [r7, #6]
 8002336:	08db      	lsrs	r3, r3, #3
 8002338:	b2d8      	uxtb	r0, r3
 800233a:	4603      	mov	r3, r0
 800233c:	01db      	lsls	r3, r3, #7
 800233e:	4413      	add	r3, r2
 8002340:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <ssd1306_DrawPixel+0xa4>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	b25a      	sxtb	r2, r3
 8002346:	79bb      	ldrb	r3, [r7, #6]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	2101      	movs	r1, #1
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	b25b      	sxtb	r3, r3
 8002354:	4313      	orrs	r3, r2
 8002356:	b259      	sxtb	r1, r3
 8002358:	79fa      	ldrb	r2, [r7, #7]
 800235a:	4603      	mov	r3, r0
 800235c:	01db      	lsls	r3, r3, #7
 800235e:	4413      	add	r3, r2
 8002360:	b2c9      	uxtb	r1, r1
 8002362:	4a13      	ldr	r2, [pc, #76]	; (80023b0 <ssd1306_DrawPixel+0xa4>)
 8002364:	54d1      	strb	r1, [r2, r3]
 8002366:	e01d      	b.n	80023a4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002368:	79fa      	ldrb	r2, [r7, #7]
 800236a:	79bb      	ldrb	r3, [r7, #6]
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	b2d8      	uxtb	r0, r3
 8002370:	4603      	mov	r3, r0
 8002372:	01db      	lsls	r3, r3, #7
 8002374:	4413      	add	r3, r2
 8002376:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <ssd1306_DrawPixel+0xa4>)
 8002378:	5cd3      	ldrb	r3, [r2, r3]
 800237a:	b25a      	sxtb	r2, r3
 800237c:	79bb      	ldrb	r3, [r7, #6]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	2101      	movs	r1, #1
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	b25b      	sxtb	r3, r3
 800238a:	43db      	mvns	r3, r3
 800238c:	b25b      	sxtb	r3, r3
 800238e:	4013      	ands	r3, r2
 8002390:	b259      	sxtb	r1, r3
 8002392:	79fa      	ldrb	r2, [r7, #7]
 8002394:	4603      	mov	r3, r0
 8002396:	01db      	lsls	r3, r3, #7
 8002398:	4413      	add	r3, r2
 800239a:	b2c9      	uxtb	r1, r1
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <ssd1306_DrawPixel+0xa4>)
 800239e:	54d1      	strb	r1, [r2, r3]
 80023a0:	e000      	b.n	80023a4 <ssd1306_DrawPixel+0x98>
        return;
 80023a2:	bf00      	nop
    }
}
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	200008c8 	.word	0x200008c8

080023b4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4604      	mov	r4, r0
 80023bc:	1d38      	adds	r0, r7, #4
 80023be:	e880 0006 	stmia.w	r0, {r1, r2}
 80023c2:	461a      	mov	r2, r3
 80023c4:	4623      	mov	r3, r4
 80023c6:	73fb      	strb	r3, [r7, #15]
 80023c8:	4613      	mov	r3, r2
 80023ca:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2b1f      	cmp	r3, #31
 80023d0:	d902      	bls.n	80023d8 <ssd1306_WriteChar+0x24>
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b7e      	cmp	r3, #126	; 0x7e
 80023d6:	d901      	bls.n	80023dc <ssd1306_WriteChar+0x28>
        return 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	e06d      	b.n	80024b8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80023dc:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <ssd1306_WriteChar+0x10c>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	461a      	mov	r2, r3
 80023e2:	793b      	ldrb	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	2b80      	cmp	r3, #128	; 0x80
 80023e8:	dc06      	bgt.n	80023f8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80023ea:	4b35      	ldr	r3, [pc, #212]	; (80024c0 <ssd1306_WriteChar+0x10c>)
 80023ec:	885b      	ldrh	r3, [r3, #2]
 80023ee:	461a      	mov	r2, r3
 80023f0:	797b      	ldrb	r3, [r7, #5]
 80023f2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80023f4:	2b40      	cmp	r3, #64	; 0x40
 80023f6:	dd01      	ble.n	80023fc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e05d      	b.n	80024b8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	e04c      	b.n	800249c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	3b20      	subs	r3, #32
 8002408:	7979      	ldrb	r1, [r7, #5]
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4619      	mov	r1, r3
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	440b      	add	r3, r1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4413      	add	r3, r2
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800241c:	2300      	movs	r3, #0
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	e034      	b.n	800248c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d012      	beq.n	8002458 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002432:	4b23      	ldr	r3, [pc, #140]	; (80024c0 <ssd1306_WriteChar+0x10c>)
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b2da      	uxtb	r2, r3
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	4413      	add	r3, r2
 800243e:	b2d8      	uxtb	r0, r3
 8002440:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <ssd1306_WriteChar+0x10c>)
 8002442:	885b      	ldrh	r3, [r3, #2]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	4413      	add	r3, r2
 800244c:	b2db      	uxtb	r3, r3
 800244e:	7bba      	ldrb	r2, [r7, #14]
 8002450:	4619      	mov	r1, r3
 8002452:	f7ff ff5b 	bl	800230c <ssd1306_DrawPixel>
 8002456:	e016      	b.n	8002486 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <ssd1306_WriteChar+0x10c>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4413      	add	r3, r2
 8002464:	b2d8      	uxtb	r0, r3
 8002466:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <ssd1306_WriteChar+0x10c>)
 8002468:	885b      	ldrh	r3, [r3, #2]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	4413      	add	r3, r2
 8002472:	b2d9      	uxtb	r1, r3
 8002474:	7bbb      	ldrb	r3, [r7, #14]
 8002476:	2b00      	cmp	r3, #0
 8002478:	bf0c      	ite	eq
 800247a:	2301      	moveq	r3, #1
 800247c:	2300      	movne	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	f7ff ff43 	bl	800230c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	3301      	adds	r3, #1
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	793b      	ldrb	r3, [r7, #4]
 800248e:	461a      	mov	r2, r3
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	4293      	cmp	r3, r2
 8002494:	d3c5      	bcc.n	8002422 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3301      	adds	r3, #1
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	797b      	ldrb	r3, [r7, #5]
 800249e:	461a      	mov	r2, r3
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d3ad      	bcc.n	8002402 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <ssd1306_WriteChar+0x10c>)
 80024a8:	881a      	ldrh	r2, [r3, #0]
 80024aa:	793b      	ldrb	r3, [r7, #4]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <ssd1306_WriteChar+0x10c>)
 80024b4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3724      	adds	r7, #36	; 0x24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd90      	pop	{r4, r7, pc}
 80024c0:	20000cc8 	.word	0x20000cc8

080024c4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	1d38      	adds	r0, r7, #4
 80024ce:	e880 0006 	stmia.w	r0, {r1, r2}
 80024d2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80024d4:	e012      	b.n	80024fc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	7818      	ldrb	r0, [r3, #0]
 80024da:	78fb      	ldrb	r3, [r7, #3]
 80024dc:	1d3a      	adds	r2, r7, #4
 80024de:	ca06      	ldmia	r2, {r1, r2}
 80024e0:	f7ff ff68 	bl	80023b4 <ssd1306_WriteChar>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d002      	beq.n	80024f6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	e008      	b.n	8002508 <ssd1306_WriteString+0x44>
        }
        str++;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	3301      	adds	r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e8      	bne.n	80024d6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	781b      	ldrb	r3, [r3, #0]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	460a      	mov	r2, r1
 800251a:	71fb      	strb	r3, [r7, #7]
 800251c:	4613      	mov	r3, r2
 800251e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	b29a      	uxth	r2, r3
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <ssd1306_SetCursor+0x2c>)
 8002526:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002528:	79bb      	ldrb	r3, [r7, #6]
 800252a:	b29a      	uxth	r2, r3
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <ssd1306_SetCursor+0x2c>)
 800252e:	805a      	strh	r2, [r3, #2]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	20000cc8 	.word	0x20000cc8

08002540 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	4604      	mov	r4, r0
 8002548:	4608      	mov	r0, r1
 800254a:	4611      	mov	r1, r2
 800254c:	461a      	mov	r2, r3
 800254e:	4623      	mov	r3, r4
 8002550:	71fb      	strb	r3, [r7, #7]
 8002552:	4603      	mov	r3, r0
 8002554:	71bb      	strb	r3, [r7, #6]
 8002556:	460b      	mov	r3, r1
 8002558:	717b      	strb	r3, [r7, #5]
 800255a:	4613      	mov	r3, r2
 800255c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800255e:	797a      	ldrb	r2, [r7, #5]
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	bfb8      	it	lt
 8002568:	425b      	neglt	r3, r3
 800256a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 800256c:	793a      	ldrb	r2, [r7, #4]
 800256e:	79bb      	ldrb	r3, [r7, #6]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	bfb8      	it	lt
 8002576:	425b      	neglt	r3, r3
 8002578:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800257a:	79fa      	ldrb	r2, [r7, #7]
 800257c:	797b      	ldrb	r3, [r7, #5]
 800257e:	429a      	cmp	r2, r3
 8002580:	d201      	bcs.n	8002586 <ssd1306_Line+0x46>
 8002582:	2301      	movs	r3, #1
 8002584:	e001      	b.n	800258a <ssd1306_Line+0x4a>
 8002586:	f04f 33ff 	mov.w	r3, #4294967295
 800258a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800258c:	79ba      	ldrb	r2, [r7, #6]
 800258e:	793b      	ldrb	r3, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	d201      	bcs.n	8002598 <ssd1306_Line+0x58>
 8002594:	2301      	movs	r3, #1
 8002596:	e001      	b.n	800259c <ssd1306_Line+0x5c>
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
 800259c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80025a6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80025aa:	7939      	ldrb	r1, [r7, #4]
 80025ac:	797b      	ldrb	r3, [r7, #5]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff feac 	bl	800230c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80025b4:	e024      	b.n	8002600 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80025b6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80025ba:	79b9      	ldrb	r1, [r7, #6]
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fea4 	bl	800230c <ssd1306_DrawPixel>
        error2 = error * 2;
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	425b      	negs	r3, r3
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	dd08      	ble.n	80025e6 <ssd1306_Line+0xa6>
            error -= deltaY;
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	4413      	add	r3, r2
 80025e4:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	da08      	bge.n	8002600 <ssd1306_Line+0xc0>
            error += deltaX;
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	4413      	add	r3, r2
 80025f4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	79bb      	ldrb	r3, [r7, #6]
 80025fc:	4413      	add	r3, r2
 80025fe:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002600:	79fa      	ldrb	r2, [r7, #7]
 8002602:	797b      	ldrb	r3, [r7, #5]
 8002604:	429a      	cmp	r2, r3
 8002606:	d1d6      	bne.n	80025b6 <ssd1306_Line+0x76>
 8002608:	79ba      	ldrb	r2, [r7, #6]
 800260a:	793b      	ldrb	r3, [r7, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	d1d2      	bne.n	80025b6 <ssd1306_Line+0x76>
        }
    }
    return;
 8002610:	bf00      	nop
}
 8002612:	3724      	adds	r7, #36	; 0x24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd90      	pop	{r4, r7, pc}

08002618 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	4604      	mov	r4, r0
 8002620:	4608      	mov	r0, r1
 8002622:	4611      	mov	r1, r2
 8002624:	461a      	mov	r2, r3
 8002626:	4623      	mov	r3, r4
 8002628:	71fb      	strb	r3, [r7, #7]
 800262a:	4603      	mov	r3, r0
 800262c:	71bb      	strb	r3, [r7, #6]
 800262e:	460b      	mov	r3, r1
 8002630:	717b      	strb	r3, [r7, #5]
 8002632:	4613      	mov	r3, r2
 8002634:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8002636:	797b      	ldrb	r3, [r7, #5]
 8002638:	425b      	negs	r3, r3
 800263a:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002640:	797b      	ldrb	r3, [r7, #5]
 8002642:	f1c3 0301 	rsb	r3, r3, #1
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	2b00      	cmp	r3, #0
 8002650:	db65      	blt.n	800271e <ssd1306_DrawCircle+0x106>
 8002652:	79bb      	ldrb	r3, [r7, #6]
 8002654:	2b3f      	cmp	r3, #63	; 0x3f
 8002656:	d862      	bhi.n	800271e <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	79fa      	ldrb	r2, [r7, #7]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	b2d8      	uxtb	r0, r3
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	79bb      	ldrb	r3, [r7, #6]
 8002668:	4413      	add	r3, r2
 800266a:	b2db      	uxtb	r3, r3
 800266c:	793a      	ldrb	r2, [r7, #4]
 800266e:	4619      	mov	r1, r3
 8002670:	f7ff fe4c 	bl	800230c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	4413      	add	r3, r2
 800267c:	b2d8      	uxtb	r0, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	79bb      	ldrb	r3, [r7, #6]
 8002684:	4413      	add	r3, r2
 8002686:	b2db      	uxtb	r3, r3
 8002688:	793a      	ldrb	r2, [r7, #4]
 800268a:	4619      	mov	r1, r3
 800268c:	f7ff fe3e 	bl	800230c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	4413      	add	r3, r2
 8002698:	b2d8      	uxtb	r0, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	79ba      	ldrb	r2, [r7, #6]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	793a      	ldrb	r2, [r7, #4]
 80026a6:	4619      	mov	r1, r3
 80026a8:	f7ff fe30 	bl	800230c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	79fa      	ldrb	r2, [r7, #7]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	b2d8      	uxtb	r0, r3
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	79ba      	ldrb	r2, [r7, #6]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	793a      	ldrb	r2, [r7, #4]
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7ff fe22 	bl	800230c <ssd1306_DrawPixel>
        e2 = err;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	dc13      	bgt.n	80026fc <ssd1306_DrawCircle+0xe4>
            y++;
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	3301      	adds	r3, #1
 80026d8:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	3301      	adds	r3, #1
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	425b      	negs	r3, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d105      	bne.n	80026fc <ssd1306_DrawCircle+0xe4>
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dc01      	bgt.n	80026fc <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	429a      	cmp	r2, r3
 8002702:	dd08      	ble.n	8002716 <ssd1306_DrawCircle+0xfe>
            x++;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3301      	adds	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	3301      	adds	r3, #1
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4413      	add	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	dd9d      	ble.n	8002658 <ssd1306_DrawCircle+0x40>

    return;
 800271c:	e000      	b.n	8002720 <ssd1306_DrawCircle+0x108>
        return;
 800271e:	bf00      	nop
}
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	bd90      	pop	{r4, r7, pc}

08002726 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002726:	b590      	push	{r4, r7, lr}
 8002728:	b085      	sub	sp, #20
 800272a:	af02      	add	r7, sp, #8
 800272c:	4604      	mov	r4, r0
 800272e:	4608      	mov	r0, r1
 8002730:	4611      	mov	r1, r2
 8002732:	461a      	mov	r2, r3
 8002734:	4623      	mov	r3, r4
 8002736:	71fb      	strb	r3, [r7, #7]
 8002738:	4603      	mov	r3, r0
 800273a:	71bb      	strb	r3, [r7, #6]
 800273c:	460b      	mov	r3, r1
 800273e:	717b      	strb	r3, [r7, #5]
 8002740:	4613      	mov	r3, r2
 8002742:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002744:	79bc      	ldrb	r4, [r7, #6]
 8002746:	797a      	ldrb	r2, [r7, #5]
 8002748:	79b9      	ldrb	r1, [r7, #6]
 800274a:	79f8      	ldrb	r0, [r7, #7]
 800274c:	7e3b      	ldrb	r3, [r7, #24]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	4623      	mov	r3, r4
 8002752:	f7ff fef5 	bl	8002540 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002756:	793c      	ldrb	r4, [r7, #4]
 8002758:	797a      	ldrb	r2, [r7, #5]
 800275a:	79b9      	ldrb	r1, [r7, #6]
 800275c:	7978      	ldrb	r0, [r7, #5]
 800275e:	7e3b      	ldrb	r3, [r7, #24]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	4623      	mov	r3, r4
 8002764:	f7ff feec 	bl	8002540 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002768:	793c      	ldrb	r4, [r7, #4]
 800276a:	79fa      	ldrb	r2, [r7, #7]
 800276c:	7939      	ldrb	r1, [r7, #4]
 800276e:	7978      	ldrb	r0, [r7, #5]
 8002770:	7e3b      	ldrb	r3, [r7, #24]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	4623      	mov	r3, r4
 8002776:	f7ff fee3 	bl	8002540 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 800277a:	79bc      	ldrb	r4, [r7, #6]
 800277c:	79fa      	ldrb	r2, [r7, #7]
 800277e:	7939      	ldrb	r1, [r7, #4]
 8002780:	79f8      	ldrb	r0, [r7, #7]
 8002782:	7e3b      	ldrb	r3, [r7, #24]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	4623      	mov	r3, r4
 8002788:	f7ff feda 	bl	8002540 <ssd1306_Line>

    return;
 800278c:	bf00      	nop
}
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bd90      	pop	{r4, r7, pc}

08002794 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002794:	b590      	push	{r4, r7, lr}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	4604      	mov	r4, r0
 800279c:	4608      	mov	r0, r1
 800279e:	4611      	mov	r1, r2
 80027a0:	461a      	mov	r2, r3
 80027a2:	4623      	mov	r3, r4
 80027a4:	71fb      	strb	r3, [r7, #7]
 80027a6:	4603      	mov	r3, r0
 80027a8:	71bb      	strb	r3, [r7, #6]
 80027aa:	460b      	mov	r3, r1
 80027ac:	717b      	strb	r3, [r7, #5]
 80027ae:	4613      	mov	r3, r2
 80027b0:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80027b2:	79fa      	ldrb	r2, [r7, #7]
 80027b4:	797b      	ldrb	r3, [r7, #5]
 80027b6:	4293      	cmp	r3, r2
 80027b8:	bf28      	it	cs
 80027ba:	4613      	movcs	r3, r2
 80027bc:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80027be:	797a      	ldrb	r2, [r7, #5]
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	4293      	cmp	r3, r2
 80027c4:	bf38      	it	cc
 80027c6:	4613      	movcc	r3, r2
 80027c8:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80027ca:	79ba      	ldrb	r2, [r7, #6]
 80027cc:	793b      	ldrb	r3, [r7, #4]
 80027ce:	4293      	cmp	r3, r2
 80027d0:	bf28      	it	cs
 80027d2:	4613      	movcs	r3, r2
 80027d4:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80027d6:	793a      	ldrb	r2, [r7, #4]
 80027d8:	79bb      	ldrb	r3, [r7, #6]
 80027da:	4293      	cmp	r3, r2
 80027dc:	bf38      	it	cc
 80027de:	4613      	movcc	r3, r2
 80027e0:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80027e2:	7afb      	ldrb	r3, [r7, #11]
 80027e4:	73fb      	strb	r3, [r7, #15]
 80027e6:	e017      	b.n	8002818 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80027e8:	7b7b      	ldrb	r3, [r7, #13]
 80027ea:	73bb      	strb	r3, [r7, #14]
 80027ec:	e009      	b.n	8002802 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 80027ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80027f2:	7bf9      	ldrb	r1, [r7, #15]
 80027f4:	7bbb      	ldrb	r3, [r7, #14]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fd88 	bl	800230c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80027fc:	7bbb      	ldrb	r3, [r7, #14]
 80027fe:	3301      	adds	r3, #1
 8002800:	73bb      	strb	r3, [r7, #14]
 8002802:	7bba      	ldrb	r2, [r7, #14]
 8002804:	7b3b      	ldrb	r3, [r7, #12]
 8002806:	429a      	cmp	r2, r3
 8002808:	d803      	bhi.n	8002812 <ssd1306_FillRectangle+0x7e>
 800280a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800280e:	2b00      	cmp	r3, #0
 8002810:	daed      	bge.n	80027ee <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	3301      	adds	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	7abb      	ldrb	r3, [r7, #10]
 800281c:	429a      	cmp	r2, r3
 800281e:	d803      	bhi.n	8002828 <ssd1306_FillRectangle+0x94>
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b3f      	cmp	r3, #63	; 0x3f
 8002824:	d9e0      	bls.n	80027e8 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8002826:	bf00      	nop
 8002828:	bf00      	nop
}
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bd90      	pop	{r4, r7, pc}

08002830 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	603a      	str	r2, [r7, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
 800283e:	460b      	mov	r3, r1
 8002840:	71bb      	strb	r3, [r7, #6]
 8002842:	4613      	mov	r3, r2
 8002844:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002846:	797b      	ldrb	r3, [r7, #5]
 8002848:	3307      	adds	r3, #7
 800284a:	2b00      	cmp	r3, #0
 800284c:	da00      	bge.n	8002850 <ssd1306_DrawBitmap+0x20>
 800284e:	3307      	adds	r3, #7
 8002850:	10db      	asrs	r3, r3, #3
 8002852:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285c:	2b00      	cmp	r3, #0
 800285e:	db3e      	blt.n	80028de <ssd1306_DrawBitmap+0xae>
 8002860:	79bb      	ldrb	r3, [r7, #6]
 8002862:	2b3f      	cmp	r3, #63	; 0x3f
 8002864:	d83b      	bhi.n	80028de <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8002866:	2300      	movs	r3, #0
 8002868:	73bb      	strb	r3, [r7, #14]
 800286a:	e033      	b.n	80028d4 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 800286c:	2300      	movs	r3, #0
 800286e:	737b      	strb	r3, [r7, #13]
 8002870:	e026      	b.n	80028c0 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8002872:	7b7b      	ldrb	r3, [r7, #13]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
 8002882:	e00d      	b.n	80028a0 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002884:	7bbb      	ldrb	r3, [r7, #14]
 8002886:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800288a:	fb02 f303 	mul.w	r3, r2, r3
 800288e:	7b7a      	ldrb	r2, [r7, #13]
 8002890:	08d2      	lsrs	r2, r2, #3
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	4413      	add	r3, r2
 8002896:	461a      	mov	r2, r3
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	4413      	add	r3, r2
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80028a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	da08      	bge.n	80028ba <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80028a8:	79fa      	ldrb	r2, [r7, #7]
 80028aa:	7b7b      	ldrb	r3, [r7, #13]
 80028ac:	4413      	add	r3, r2
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	7f3a      	ldrb	r2, [r7, #28]
 80028b2:	79b9      	ldrb	r1, [r7, #6]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fd29 	bl	800230c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80028ba:	7b7b      	ldrb	r3, [r7, #13]
 80028bc:	3301      	adds	r3, #1
 80028be:	737b      	strb	r3, [r7, #13]
 80028c0:	7b7a      	ldrb	r2, [r7, #13]
 80028c2:	797b      	ldrb	r3, [r7, #5]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d3d4      	bcc.n	8002872 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80028c8:	7bbb      	ldrb	r3, [r7, #14]
 80028ca:	3301      	adds	r3, #1
 80028cc:	73bb      	strb	r3, [r7, #14]
 80028ce:	79bb      	ldrb	r3, [r7, #6]
 80028d0:	3301      	adds	r3, #1
 80028d2:	71bb      	strb	r3, [r7, #6]
 80028d4:	7bba      	ldrb	r2, [r7, #14]
 80028d6:	7e3b      	ldrb	r3, [r7, #24]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d3c7      	bcc.n	800286c <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80028dc:	e000      	b.n	80028e0 <ssd1306_DrawBitmap+0xb0>
        return;
 80028de:	bf00      	nop
}
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4603      	mov	r3, r0
 80028ee:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80028f0:	2381      	movs	r3, #129	; 0x81
 80028f2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fc2c 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fc28 	bl	8002154 <ssd1306_WriteCommand>
}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800291c:	23af      	movs	r3, #175	; 0xaf
 800291e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <ssd1306_SetDisplayOn+0x38>)
 8002922:	2201      	movs	r2, #1
 8002924:	715a      	strb	r2, [r3, #5]
 8002926:	e004      	b.n	8002932 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002928:	23ae      	movs	r3, #174	; 0xae
 800292a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <ssd1306_SetDisplayOn+0x38>)
 800292e:	2200      	movs	r2, #0
 8002930:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fc0d 	bl	8002154 <ssd1306_WriteCommand>
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000cc8 	.word	0x20000cc8

08002948 <statemachine>:
		};



//le code qui permet d'avoir les ecran de donnée que l'on souhaite, changeable a souhait on peut d'ailleur rajouter des état ou rajouter des fonctionnalité au sein de chaque état, pas encore décidé de la version définitive.
void statemachine(void){
 8002948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294a:	ed2d 8b02 	vpush	{d8}
 800294e:	b09d      	sub	sp, #116	; 0x74
 8002950:	af04      	add	r7, sp, #16
	switch(state){
 8002952:	4b93      	ldr	r3, [pc, #588]	; (8002ba0 <statemachine+0x258>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b06      	cmp	r3, #6
 8002958:	f201 82ae 	bhi.w	8003eb8 <statemachine+0x1570>
 800295c:	a201      	add	r2, pc, #4	; (adr r2, 8002964 <statemachine+0x1c>)
 800295e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002962:	bf00      	nop
 8002964:	08002981 	.word	0x08002981
 8002968:	08002de3 	.word	0x08002de3
 800296c:	08003303 	.word	0x08003303
 8002970:	08003969 	.word	0x08003969
 8002974:	08003af1 	.word	0x08003af1
 8002978:	08003cb1 	.word	0x08003cb1
 800297c:	08003e25 	.word	0x08003e25
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8002980:	2000      	movs	r0, #0
 8002982:	f7ff fc83 	bl	800228c <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 8002986:	2120      	movs	r1, #32
 8002988:	2020      	movs	r0, #32
 800298a:	f7ff fdc1 	bl	8002510 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 800298e:	4985      	ldr	r1, [pc, #532]	; (8002ba4 <statemachine+0x25c>)
 8002990:	4885      	ldr	r0, [pc, #532]	; (8002ba8 <statemachine+0x260>)
 8002992:	f7ff fb27 	bl	8001fe4 <nmea_parse>
				 if(myData.speed>=vitmax){
 8002996:	4b84      	ldr	r3, [pc, #528]	; (8002ba8 <statemachine+0x260>)
 8002998:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800299c:	4b83      	ldr	r3, [pc, #524]	; (8002bac <statemachine+0x264>)
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029aa:	db03      	blt.n	80029b4 <statemachine+0x6c>
									 vitmax=myData.speed;
 80029ac:	4b7e      	ldr	r3, [pc, #504]	; (8002ba8 <statemachine+0x260>)
 80029ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b0:	4a7e      	ldr	r2, [pc, #504]	; (8002bac <statemachine+0x264>)
 80029b2:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	65fb      	str	r3, [r7, #92]	; 0x5c
								 float sec=0;
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	65bb      	str	r3, [r7, #88]	; 0x58
								 if (myData.speed!=0){
 80029c0:	4b79      	ldr	r3, [pc, #484]	; (8002ba8 <statemachine+0x260>)
 80029c2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80029c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ce:	d032      	beq.n	8002a36 <statemachine+0xee>
									 pace=1000/(60*myData.speed);
 80029d0:	4b75      	ldr	r3, [pc, #468]	; (8002ba8 <statemachine+0x260>)
 80029d2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80029d6:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002bb0 <statemachine+0x268>
 80029da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029de:	eddf 6a75 	vldr	s13, [pc, #468]	; 8002bb4 <statemachine+0x26c>
 80029e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029e6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
									 sec=(pace-floor(pace))*60;
 80029ea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80029ec:	f7fd fdac 	bl	8000548 <__aeabi_f2d>
 80029f0:	4604      	mov	r4, r0
 80029f2:	460d      	mov	r5, r1
 80029f4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80029f6:	f7fd fda7 	bl	8000548 <__aeabi_f2d>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	ec43 2b10 	vmov	d0, r2, r3
 8002a02:	f012 fc49 	bl	8015298 <floor>
 8002a06:	ec53 2b10 	vmov	r2, r3, d0
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	f7fd fc3b 	bl	8000288 <__aeabi_dsub>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4610      	mov	r0, r2
 8002a18:	4619      	mov	r1, r3
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	4b66      	ldr	r3, [pc, #408]	; (8002bb8 <statemachine+0x270>)
 8002a20:	f7fd fdea 	bl	80005f8 <__aeabi_dmul>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f7fe f8dc 	bl	8000be8 <__aeabi_d2f>
 8002a30:	4603      	mov	r3, r0
 8002a32:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a34:	e001      	b.n	8002a3a <statemachine+0xf2>
								 }
								 else {
									 pace=9999;//en cas de division par 0, techniquement le temps devient infini mais ce n'est pas intérréssant
 8002a36:	4b61      	ldr	r3, [pc, #388]	; (8002bbc <statemachine+0x274>)
 8002a38:	65fb      	str	r3, [r7, #92]	; 0x5c
								 }


				  switch(spdstate){
 8002a3a:	4b61      	ldr	r3, [pc, #388]	; (8002bc0 <statemachine+0x278>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	f000 8156 	beq.w	8002cf0 <statemachine+0x3a8>
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	f300 81bc 	bgt.w	8002dc2 <statemachine+0x47a>
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <statemachine+0x10e>
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	f000 80c6 	beq.w	8002be0 <statemachine+0x298>
 8002a54:	e1b5      	b.n	8002dc2 <statemachine+0x47a>


				 case STATE_SUMMARY:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 8002a56:	4b54      	ldr	r3, [pc, #336]	; (8002ba8 <statemachine+0x260>)
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d16f      	bne.n	8002b3e <statemachine+0x1f6>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8002a5e:	2014      	movs	r0, #20
 8002a60:	f00d fe2e 	bl	80106c0 <malloc>
 8002a64:	4603      	mov	r3, r0
 8002a66:	603b      	str	r3, [r7, #0]
					 				 						snprintf(str,15, "MaxV=%.1f",vitmax*3.6);//amélioration possible la stocker en eeprom
 8002a68:	4b50      	ldr	r3, [pc, #320]	; (8002bac <statemachine+0x264>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd6b 	bl	8000548 <__aeabi_f2d>
 8002a72:	a349      	add	r3, pc, #292	; (adr r3, 8002b98 <statemachine+0x250>)
 8002a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a78:	f7fd fdbe 	bl	80005f8 <__aeabi_dmul>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	e9cd 2300 	strd	r2, r3, [sp]
 8002a84:	4a4f      	ldr	r2, [pc, #316]	; (8002bc4 <statemachine+0x27c>)
 8002a86:	210f      	movs	r1, #15
 8002a88:	6838      	ldr	r0, [r7, #0]
 8002a8a:	f00f fd13 	bl	80124b4 <sniprintf>
					 				 						ssd1306_SetCursor(32, 32);
 8002a8e:	2120      	movs	r1, #32
 8002a90:	2020      	movs	r0, #32
 8002a92:	f7ff fd3d 	bl	8002510 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002a96:	4a4c      	ldr	r2, [pc, #304]	; (8002bc8 <statemachine+0x280>)
 8002a98:	2301      	movs	r3, #1
 8002a9a:	ca06      	ldmia	r2, {r1, r2}
 8002a9c:	6838      	ldr	r0, [r7, #0]
 8002a9e:	f7ff fd11 	bl	80024c4 <ssd1306_WriteString>
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 8002aa2:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <statemachine+0x260>)
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fd fd4e 	bl	8000548 <__aeabi_f2d>
 8002aac:	a33a      	add	r3, pc, #232	; (adr r3, 8002b98 <statemachine+0x250>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	f7fd fda1 	bl	80005f8 <__aeabi_dmul>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	e9cd 2300 	strd	r2, r3, [sp]
 8002abe:	4a43      	ldr	r2, [pc, #268]	; (8002bcc <statemachine+0x284>)
 8002ac0:	210f      	movs	r1, #15
 8002ac2:	6838      	ldr	r0, [r7, #0]
 8002ac4:	f00f fcf6 	bl	80124b4 <sniprintf>
					 				 						ssd1306_SetCursor(32, 42);
 8002ac8:	212a      	movs	r1, #42	; 0x2a
 8002aca:	2020      	movs	r0, #32
 8002acc:	f7ff fd20 	bl	8002510 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002ad0:	4a3d      	ldr	r2, [pc, #244]	; (8002bc8 <statemachine+0x280>)
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	ca06      	ldmia	r2, {r1, r2}
 8002ad6:	6838      	ldr	r0, [r7, #0]
 8002ad8:	f7ff fcf4 	bl	80024c4 <ssd1306_WriteString>
					 				 						snprintf(str,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));//affichage au format minute puis seconde
 8002adc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002ade:	f7fd fd33 	bl	8000548 <__aeabi_f2d>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	ec43 2b10 	vmov	d0, r2, r3
 8002aea:	f012 fbd5 	bl	8015298 <floor>
 8002aee:	eeb0 8a40 	vmov.f32	s16, s0
 8002af2:	eef0 8a60 	vmov.f32	s17, s1
 8002af6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002af8:	f7fd fd26 	bl	8000548 <__aeabi_f2d>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	ec43 2b10 	vmov	d0, r2, r3
 8002b04:	f012 fbc8 	bl	8015298 <floor>
 8002b08:	eeb0 7a40 	vmov.f32	s14, s0
 8002b0c:	eef0 7a60 	vmov.f32	s15, s1
 8002b10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002b14:	ed8d 8b00 	vstr	d8, [sp]
 8002b18:	4a2d      	ldr	r2, [pc, #180]	; (8002bd0 <statemachine+0x288>)
 8002b1a:	210f      	movs	r1, #15
 8002b1c:	6838      	ldr	r0, [r7, #0]
 8002b1e:	f00f fcc9 	bl	80124b4 <sniprintf>
					 				 						ssd1306_SetCursor(32, 52);
 8002b22:	2134      	movs	r1, #52	; 0x34
 8002b24:	2020      	movs	r0, #32
 8002b26:	f7ff fcf3 	bl	8002510 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002b2a:	4a27      	ldr	r2, [pc, #156]	; (8002bc8 <statemachine+0x280>)
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	ca06      	ldmia	r2, {r1, r2}
 8002b30:	6838      	ldr	r0, [r7, #0]
 8002b32:	f7ff fcc7 	bl	80024c4 <ssd1306_WriteString>
					 				 						free(str);
 8002b36:	6838      	ldr	r0, [r7, #0]
 8002b38:	f00d fdca 	bl	80106d0 <free>
 8002b3c:	e01b      	b.n	8002b76 <statemachine+0x22e>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002b3e:	2014      	movs	r0, #20
 8002b40:	f00d fdbe 	bl	80106c0 <malloc>
 8002b44:	4603      	mov	r3, r0
 8002b46:	607b      	str	r3, [r7, #4]
					 				 						ssd1306_SetCursor(32, 32);
 8002b48:	2120      	movs	r1, #32
 8002b4a:	2020      	movs	r0, #32
 8002b4c:	f7ff fce0 	bl	8002510 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 1", Font_6x8, White);
 8002b50:	4a1d      	ldr	r2, [pc, #116]	; (8002bc8 <statemachine+0x280>)
 8002b52:	2301      	movs	r3, #1
 8002b54:	ca06      	ldmia	r2, {r1, r2}
 8002b56:	481f      	ldr	r0, [pc, #124]	; (8002bd4 <statemachine+0x28c>)
 8002b58:	f7ff fcb4 	bl	80024c4 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	2020      	movs	r0, #32
 8002b60:	f7ff fcd6 	bl	8002510 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002b64:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <statemachine+0x280>)
 8002b66:	2301      	movs	r3, #1
 8002b68:	ca06      	ldmia	r2, {r1, r2}
 8002b6a:	481b      	ldr	r0, [pc, #108]	; (8002bd8 <statemachine+0x290>)
 8002b6c:	f7ff fcaa 	bl	80024c4 <ssd1306_WriteString>
					 				 						free(str);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f00d fdad 	bl	80106d0 <free>
					 				 					}
					 if(BTN_B>=1){
 8002b76:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <statemachine+0x294>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f340 811c 	ble.w	8002db8 <statemachine+0x470>
					 					 				 					spdstate++;
 8002b80:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <statemachine+0x278>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <statemachine+0x278>)
 8002b8a:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <statemachine+0x294>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
					 					 				  	}



					 break;
 8002b92:	e111      	b.n	8002db8 <statemachine+0x470>
 8002b94:	f3af 8000 	nop.w
 8002b98:	cccccccd 	.word	0xcccccccd
 8002b9c:	400ccccc 	.word	0x400ccccc
 8002ba0:	20000870 	.word	0x20000870
 8002ba4:	20000624 	.word	0x20000624
 8002ba8:	20000828 	.word	0x20000828
 8002bac:	20000cd0 	.word	0x20000cd0
 8002bb0:	42700000 	.word	0x42700000
 8002bb4:	447a0000 	.word	0x447a0000
 8002bb8:	404e0000 	.word	0x404e0000
 8002bbc:	461c3c00 	.word	0x461c3c00
 8002bc0:	20000872 	.word	0x20000872
 8002bc4:	08016484 	.word	0x08016484
 8002bc8:	20000008 	.word	0x20000008
 8002bcc:	08016490 	.word	0x08016490
 8002bd0:	08016498 	.word	0x08016498
 8002bd4:	080164ac 	.word	0x080164ac
 8002bd8:	080164b4 	.word	0x080164b4
 8002bdc:	2000086c 	.word	0x2000086c
				 case STATE_COMPTEUR:
					 if(myData.fix == 1){ //if the GPS has a fix, print the data
 8002be0:	4b8f      	ldr	r3, [pc, #572]	; (8002e20 <statemachine+0x4d8>)
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d159      	bne.n	8002c9c <statemachine+0x354>
					 				 						char * str = (char*)malloc(sizeof(char)*20);
 8002be8:	2014      	movs	r0, #20
 8002bea:	f00d fd69 	bl	80106c0 <malloc>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	60bb      	str	r3, [r7, #8]
					 				 						snprintf(str,15, "V=%0.1f",(myData.speed)*3.6);
 8002bf2:	4b8b      	ldr	r3, [pc, #556]	; (8002e20 <statemachine+0x4d8>)
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fd fca6 	bl	8000548 <__aeabi_f2d>
 8002bfc:	a384      	add	r3, pc, #528	; (adr r3, 8002e10 <statemachine+0x4c8>)
 8002bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c02:	f7fd fcf9 	bl	80005f8 <__aeabi_dmul>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	e9cd 2300 	strd	r2, r3, [sp]
 8002c0e:	4a85      	ldr	r2, [pc, #532]	; (8002e24 <statemachine+0x4dc>)
 8002c10:	210f      	movs	r1, #15
 8002c12:	68b8      	ldr	r0, [r7, #8]
 8002c14:	f00f fc4e 	bl	80124b4 <sniprintf>
					 				 						ssd1306_SetCursor(32, 54);
 8002c18:	2136      	movs	r1, #54	; 0x36
 8002c1a:	2020      	movs	r0, #32
 8002c1c:	f7ff fc78 	bl	8002510 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString(str, Font_6x8, White);
 8002c20:	4a81      	ldr	r2, [pc, #516]	; (8002e28 <statemachine+0x4e0>)
 8002c22:	2301      	movs	r3, #1
 8002c24:	ca06      	ldmia	r2, {r1, r2}
 8002c26:	68b8      	ldr	r0, [r7, #8]
 8002c28:	f7ff fc4c 	bl	80024c4 <ssd1306_WriteString>
					 				 						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	2335      	movs	r3, #53	; 0x35
 8002c32:	225f      	movs	r2, #95	; 0x5f
 8002c34:	2126      	movs	r1, #38	; 0x26
 8002c36:	2020      	movs	r0, #32
 8002c38:	f7ff fd75 	bl	8002726 <ssd1306_DrawRectangle>
					 				 						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 8002c3c:	4b78      	ldr	r3, [pc, #480]	; (8002e20 <statemachine+0x4d8>)
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd fc81 	bl	8000548 <__aeabi_f2d>
 8002c46:	a374      	add	r3, pc, #464	; (adr r3, 8002e18 <statemachine+0x4d0>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f7fd fcd4 	bl	80005f8 <__aeabi_dmul>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	4b73      	ldr	r3, [pc, #460]	; (8002e2c <statemachine+0x4e4>)
 8002c5e:	f7fd fb15 	bl	800028c <__adddf3>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	ec43 2b17 	vmov	d7, r2, r3
 8002c6a:	eeb0 0a47 	vmov.f32	s0, s14
 8002c6e:	eef0 0a67 	vmov.f32	s1, s15
 8002c72:	f012 fb11 	bl	8015298 <floor>
 8002c76:	ec53 2b10 	vmov	r2, r3, d0
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f7fd ff6b 	bl	8000b58 <__aeabi_d2iz>
 8002c82:	4603      	mov	r3, r0
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	2301      	movs	r3, #1
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	2335      	movs	r3, #53	; 0x35
 8002c8c:	2126      	movs	r1, #38	; 0x26
 8002c8e:	2020      	movs	r0, #32
 8002c90:	f7ff fd80 	bl	8002794 <ssd1306_FillRectangle>

					 				 						free(str);
 8002c94:	68b8      	ldr	r0, [r7, #8]
 8002c96:	f00d fd1b 	bl	80106d0 <free>
 8002c9a:	e01b      	b.n	8002cd4 <statemachine+0x38c>
					 				 					}
					 				 	else{ //if the GPS doesn't have a fix, print a message
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002c9c:	2014      	movs	r0, #20
 8002c9e:	f00d fd0f 	bl	80106c0 <malloc>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	60fb      	str	r3, [r7, #12]
					 				 						ssd1306_SetCursor(32, 32);
 8002ca6:	2120      	movs	r1, #32
 8002ca8:	2020      	movs	r0, #32
 8002caa:	f7ff fc31 	bl	8002510 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Speed 2", Font_6x8, White);
 8002cae:	4a5e      	ldr	r2, [pc, #376]	; (8002e28 <statemachine+0x4e0>)
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	ca06      	ldmia	r2, {r1, r2}
 8002cb4:	485e      	ldr	r0, [pc, #376]	; (8002e30 <statemachine+0x4e8>)
 8002cb6:	f7ff fc05 	bl	80024c4 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 44);
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	2020      	movs	r0, #32
 8002cbe:	f7ff fc27 	bl	8002510 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002cc2:	4a59      	ldr	r2, [pc, #356]	; (8002e28 <statemachine+0x4e0>)
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	ca06      	ldmia	r2, {r1, r2}
 8002cc8:	485a      	ldr	r0, [pc, #360]	; (8002e34 <statemachine+0x4ec>)
 8002cca:	f7ff fbfb 	bl	80024c4 <ssd1306_WriteString>
					 				 						free(str);
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f00d fcfe 	bl	80106d0 <free>
					 				 					}
					 if(BTN_B>=1){
 8002cd4:	4b58      	ldr	r3, [pc, #352]	; (8002e38 <statemachine+0x4f0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	dd6f      	ble.n	8002dbc <statemachine+0x474>
					 				 					spdstate++;
 8002cdc:	4b57      	ldr	r3, [pc, #348]	; (8002e3c <statemachine+0x4f4>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	4b55      	ldr	r3, [pc, #340]	; (8002e3c <statemachine+0x4f4>)
 8002ce6:	701a      	strb	r2, [r3, #0]
					 				 					BTN_B=0;
 8002ce8:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <statemachine+0x4f0>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 8002cee:	e065      	b.n	8002dbc <statemachine+0x474>
				 case STATE_GRAPH:
					 if(myData.fix == 1){
 8002cf0:	4b4b      	ldr	r3, [pc, #300]	; (8002e20 <statemachine+0x4d8>)
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d12f      	bne.n	8002d58 <statemachine+0x410>
					 				 						char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002cf8:	2014      	movs	r0, #20
 8002cfa:	f00d fce1 	bl	80106c0 <malloc>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	613b      	str	r3, [r7, #16]

					 				 						ssd1306_SetCursor(32, 32);
 8002d02:	2120      	movs	r1, #32
 8002d04:	2020      	movs	r0, #32
 8002d06:	f7ff fc03 	bl	8002510 <ssd1306_SetCursor>
					 				 						snprintf(str,15, "%0.1f",(myData.speed)*3.6);
 8002d0a:	4b45      	ldr	r3, [pc, #276]	; (8002e20 <statemachine+0x4d8>)
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fc1a 	bl	8000548 <__aeabi_f2d>
 8002d14:	a33e      	add	r3, pc, #248	; (adr r3, 8002e10 <statemachine+0x4c8>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f7fd fc6d 	bl	80005f8 <__aeabi_dmul>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	e9cd 2300 	strd	r2, r3, [sp]
 8002d26:	4a46      	ldr	r2, [pc, #280]	; (8002e40 <statemachine+0x4f8>)
 8002d28:	210f      	movs	r1, #15
 8002d2a:	6938      	ldr	r0, [r7, #16]
 8002d2c:	f00f fbc2 	bl	80124b4 <sniprintf>
					 				 						ssd1306_WriteString(str, Font_11x18, White);
 8002d30:	4a44      	ldr	r2, [pc, #272]	; (8002e44 <statemachine+0x4fc>)
 8002d32:	2301      	movs	r3, #1
 8002d34:	ca06      	ldmia	r2, {r1, r2}
 8002d36:	6938      	ldr	r0, [r7, #16]
 8002d38:	f7ff fbc4 	bl	80024c4 <ssd1306_WriteString>
					 				 						ssd1306_SetCursor(32, 54);
 8002d3c:	2136      	movs	r1, #54	; 0x36
 8002d3e:	2020      	movs	r0, #32
 8002d40:	f7ff fbe6 	bl	8002510 <ssd1306_SetCursor>
					 				 						ssd1306_WriteString("kmh", Font_6x8, White);
 8002d44:	4a38      	ldr	r2, [pc, #224]	; (8002e28 <statemachine+0x4e0>)
 8002d46:	2301      	movs	r3, #1
 8002d48:	ca06      	ldmia	r2, {r1, r2}
 8002d4a:	483f      	ldr	r0, [pc, #252]	; (8002e48 <statemachine+0x500>)
 8002d4c:	f7ff fbba 	bl	80024c4 <ssd1306_WriteString>

					 				 						free(str);
 8002d50:	6938      	ldr	r0, [r7, #16]
 8002d52:	f00d fcbd 	bl	80106d0 <free>
 8002d56:	e01b      	b.n	8002d90 <statemachine+0x448>
					 }
					 else{
						 char *str = (char*)malloc(sizeof(char)*20);// message qui sra dans tous les etat si l'on ne capte pas de sattelites.
 8002d58:	2014      	movs	r0, #20
 8002d5a:	f00d fcb1 	bl	80106c0 <malloc>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	617b      	str	r3, [r7, #20]
						 ssd1306_SetCursor(32, 32);
 8002d62:	2120      	movs	r1, #32
 8002d64:	2020      	movs	r0, #32
 8002d66:	f7ff fbd3 	bl	8002510 <ssd1306_SetCursor>
						 ssd1306_WriteString("Speed 3", Font_6x8, White);
 8002d6a:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <statemachine+0x4e0>)
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	ca06      	ldmia	r2, {r1, r2}
 8002d70:	4836      	ldr	r0, [pc, #216]	; (8002e4c <statemachine+0x504>)
 8002d72:	f7ff fba7 	bl	80024c4 <ssd1306_WriteString>
						 ssd1306_SetCursor(32, 44);
 8002d76:	212c      	movs	r1, #44	; 0x2c
 8002d78:	2020      	movs	r0, #32
 8002d7a:	f7ff fbc9 	bl	8002510 <ssd1306_SetCursor>
						 ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002d7e:	4a2a      	ldr	r2, [pc, #168]	; (8002e28 <statemachine+0x4e0>)
 8002d80:	2301      	movs	r3, #1
 8002d82:	ca06      	ldmia	r2, {r1, r2}
 8002d84:	482b      	ldr	r0, [pc, #172]	; (8002e34 <statemachine+0x4ec>)
 8002d86:	f7ff fb9d 	bl	80024c4 <ssd1306_WriteString>
						 free(str);
 8002d8a:	6978      	ldr	r0, [r7, #20]
 8002d8c:	f00d fca0 	bl	80106d0 <free>
					 }

					 if(BTN_B>=1){
 8002d90:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <statemachine+0x4f0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	dd13      	ble.n	8002dc0 <statemachine+0x478>
					 					 				 					spdstate--;
 8002d98:	4b28      	ldr	r3, [pc, #160]	; (8002e3c <statemachine+0x4f4>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	4b26      	ldr	r3, [pc, #152]	; (8002e3c <statemachine+0x4f4>)
 8002da2:	701a      	strb	r2, [r3, #0]
					 					 				 					spdstate--;
 8002da4:	4b25      	ldr	r3, [pc, #148]	; (8002e3c <statemachine+0x4f4>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	4b23      	ldr	r3, [pc, #140]	; (8002e3c <statemachine+0x4f4>)
 8002dae:	701a      	strb	r2, [r3, #0]
					 					 				 					BTN_B=0;
 8002db0:	4b21      	ldr	r3, [pc, #132]	; (8002e38 <statemachine+0x4f0>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 8002db6:	e003      	b.n	8002dc0 <statemachine+0x478>
					 break;
 8002db8:	bf00      	nop
 8002dba:	e002      	b.n	8002dc2 <statemachine+0x47a>
					 break;
 8002dbc:	bf00      	nop
 8002dbe:	e000      	b.n	8002dc2 <statemachine+0x47a>
					 break;
 8002dc0:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 8002dc2:	4b23      	ldr	r3, [pc, #140]	; (8002e50 <statemachine+0x508>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f341 8068 	ble.w	8003e9c <statemachine+0x1554>
				 					state++;
 8002dcc:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <statemachine+0x50c>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <statemachine+0x50c>)
 8002dd6:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <statemachine+0x508>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
				  	}
				  break;
 8002dde:	f001 b85d 	b.w	8003e9c <statemachine+0x1554>


	case STATE_POS:
			  ssd1306_Fill(Black);
 8002de2:	2000      	movs	r0, #0
 8002de4:	f7ff fa52 	bl	800228c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8002de8:	491b      	ldr	r1, [pc, #108]	; (8002e58 <statemachine+0x510>)
 8002dea:	480d      	ldr	r0, [pc, #52]	; (8002e20 <statemachine+0x4d8>)
 8002dec:	f7ff f8fa 	bl	8001fe4 <nmea_parse>
			  switch(posstate){
 8002df0:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <statemachine+0x514>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	f200 8274 	bhi.w	80032e2 <statemachine+0x99a>
 8002dfa:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <statemachine+0x4b8>)
 8002dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e00:	08002e61 	.word	0x08002e61
 8002e04:	08002f5d 	.word	0x08002f5d
 8002e08:	08003053 	.word	0x08003053
 8002e0c:	0800317f 	.word	0x0800317f
 8002e10:	cccccccd 	.word	0xcccccccd
 8002e14:	400ccccc 	.word	0x400ccccc
 8002e18:	c28f5c29 	.word	0xc28f5c29
 8002e1c:	3fe428f5 	.word	0x3fe428f5
 8002e20:	20000828 	.word	0x20000828
 8002e24:	08016490 	.word	0x08016490
 8002e28:	20000008 	.word	0x20000008
 8002e2c:	40400000 	.word	0x40400000
 8002e30:	080164c0 	.word	0x080164c0
 8002e34:	080164b4 	.word	0x080164b4
 8002e38:	2000086c 	.word	0x2000086c
 8002e3c:	20000872 	.word	0x20000872
 8002e40:	080164c8 	.word	0x080164c8
 8002e44:	20000018 	.word	0x20000018
 8002e48:	080164d0 	.word	0x080164d0
 8002e4c:	080164d4 	.word	0x080164d4
 8002e50:	20000868 	.word	0x20000868
 8002e54:	20000870 	.word	0x20000870
 8002e58:	20000624 	.word	0x20000624
 8002e5c:	20000873 	.word	0x20000873

			  case STATE_SUMMARY1:
				  if(myData.fix == 1){
 8002e60:	4ba4      	ldr	r3, [pc, #656]	; (80030f4 <statemachine+0x7ac>)
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d14e      	bne.n	8002f06 <statemachine+0x5be>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002e68:	2014      	movs	r0, #20
 8002e6a:	f00d fc29 	bl	80106c0 <malloc>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	61bb      	str	r3, [r7, #24]
				  						ssd1306_SetCursor(32, 32);
 8002e72:	2120      	movs	r1, #32
 8002e74:	2020      	movs	r0, #32
 8002e76:	f7ff fb4b 	bl	8002510 <ssd1306_SetCursor>
				  						snprintf(str,15, "Latitude:");
 8002e7a:	4a9f      	ldr	r2, [pc, #636]	; (80030f8 <statemachine+0x7b0>)
 8002e7c:	210f      	movs	r1, #15
 8002e7e:	69b8      	ldr	r0, [r7, #24]
 8002e80:	f00f fb18 	bl	80124b4 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002e84:	4a9d      	ldr	r2, [pc, #628]	; (80030fc <statemachine+0x7b4>)
 8002e86:	2301      	movs	r3, #1
 8002e88:	ca06      	ldmia	r2, {r1, r2}
 8002e8a:	69b8      	ldr	r0, [r7, #24]
 8002e8c:	f7ff fb1a 	bl	80024c4 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8002e90:	4b98      	ldr	r3, [pc, #608]	; (80030f4 <statemachine+0x7ac>)
 8002e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e96:	e9cd 2300 	strd	r2, r3, [sp]
 8002e9a:	4a99      	ldr	r2, [pc, #612]	; (8003100 <statemachine+0x7b8>)
 8002e9c:	210f      	movs	r1, #15
 8002e9e:	69b8      	ldr	r0, [r7, #24]
 8002ea0:	f00f fb08 	bl	80124b4 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8002ea4:	2128      	movs	r1, #40	; 0x28
 8002ea6:	2020      	movs	r0, #32
 8002ea8:	f7ff fb32 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002eac:	4a93      	ldr	r2, [pc, #588]	; (80030fc <statemachine+0x7b4>)
 8002eae:	2301      	movs	r3, #1
 8002eb0:	ca06      	ldmia	r2, {r1, r2}
 8002eb2:	69b8      	ldr	r0, [r7, #24]
 8002eb4:	f7ff fb06 	bl	80024c4 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 8002eb8:	4a92      	ldr	r2, [pc, #584]	; (8003104 <statemachine+0x7bc>)
 8002eba:	210f      	movs	r1, #15
 8002ebc:	69b8      	ldr	r0, [r7, #24]
 8002ebe:	f00f faf9 	bl	80124b4 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8002ec2:	2130      	movs	r1, #48	; 0x30
 8002ec4:	2020      	movs	r0, #32
 8002ec6:	f7ff fb23 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002eca:	4a8c      	ldr	r2, [pc, #560]	; (80030fc <statemachine+0x7b4>)
 8002ecc:	2301      	movs	r3, #1
 8002ece:	ca06      	ldmia	r2, {r1, r2}
 8002ed0:	69b8      	ldr	r0, [r7, #24]
 8002ed2:	f7ff faf7 	bl	80024c4 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 8002ed6:	4b87      	ldr	r3, [pc, #540]	; (80030f4 <statemachine+0x7ac>)
 8002ed8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002edc:	e9cd 2300 	strd	r2, r3, [sp]
 8002ee0:	4a87      	ldr	r2, [pc, #540]	; (8003100 <statemachine+0x7b8>)
 8002ee2:	210f      	movs	r1, #15
 8002ee4:	69b8      	ldr	r0, [r7, #24]
 8002ee6:	f00f fae5 	bl	80124b4 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8002eea:	2138      	movs	r1, #56	; 0x38
 8002eec:	2020      	movs	r0, #32
 8002eee:	f7ff fb0f 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002ef2:	4a82      	ldr	r2, [pc, #520]	; (80030fc <statemachine+0x7b4>)
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	ca06      	ldmia	r2, {r1, r2}
 8002ef8:	69b8      	ldr	r0, [r7, #24]
 8002efa:	f7ff fae3 	bl	80024c4 <ssd1306_WriteString>
				  						free(str);
 8002efe:	69b8      	ldr	r0, [r7, #24]
 8002f00:	f00d fbe6 	bl	80106d0 <free>
 8002f04:	e01b      	b.n	8002f3e <statemachine+0x5f6>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8002f06:	2014      	movs	r0, #20
 8002f08:	f00d fbda 	bl	80106c0 <malloc>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	61fb      	str	r3, [r7, #28]
				  						ssd1306_SetCursor(32, 32);
 8002f10:	2120      	movs	r1, #32
 8002f12:	2020      	movs	r0, #32
 8002f14:	f7ff fafc 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos1", Font_6x8, White);
 8002f18:	4a78      	ldr	r2, [pc, #480]	; (80030fc <statemachine+0x7b4>)
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	ca06      	ldmia	r2, {r1, r2}
 8002f1e:	487a      	ldr	r0, [pc, #488]	; (8003108 <statemachine+0x7c0>)
 8002f20:	f7ff fad0 	bl	80024c4 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8002f24:	212c      	movs	r1, #44	; 0x2c
 8002f26:	2020      	movs	r0, #32
 8002f28:	f7ff faf2 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8002f2c:	4a73      	ldr	r2, [pc, #460]	; (80030fc <statemachine+0x7b4>)
 8002f2e:	2301      	movs	r3, #1
 8002f30:	ca06      	ldmia	r2, {r1, r2}
 8002f32:	4876      	ldr	r0, [pc, #472]	; (800310c <statemachine+0x7c4>)
 8002f34:	f7ff fac6 	bl	80024c4 <ssd1306_WriteString>
				  						free(str);
 8002f38:	69f8      	ldr	r0, [r7, #28]
 8002f3a:	f00d fbc9 	bl	80106d0 <free>
				  					}
				  if(BTN_B>=1){
 8002f3e:	4b74      	ldr	r3, [pc, #464]	; (8003110 <statemachine+0x7c8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f340 81c6 	ble.w	80032d4 <statemachine+0x98c>
					  posstate++;
 8002f48:	4b72      	ldr	r3, [pc, #456]	; (8003114 <statemachine+0x7cc>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	4b70      	ldr	r3, [pc, #448]	; (8003114 <statemachine+0x7cc>)
 8002f52:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8002f54:	4b6e      	ldr	r3, [pc, #440]	; (8003110 <statemachine+0x7c8>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]





				  break;
 8002f5a:	e1bb      	b.n	80032d4 <statemachine+0x98c>
			  case STATE_LAT:
				  if(myData.fix == 1){
 8002f5c:	4b65      	ldr	r3, [pc, #404]	; (80030f4 <statemachine+0x7ac>)
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d14b      	bne.n	8002ffc <statemachine+0x6b4>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8002f64:	2014      	movs	r0, #20
 8002f66:	f00d fbab 	bl	80106c0 <malloc>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	623b      	str	r3, [r7, #32]
				  						ssd1306_SetCursor(32, 32);
 8002f6e:	2120      	movs	r1, #32
 8002f70:	2020      	movs	r0, #32
 8002f72:	f7ff facd 	bl	8002510 <ssd1306_SetCursor>
				  						snprintf(str,15, "LatSide:");
 8002f76:	4a68      	ldr	r2, [pc, #416]	; (8003118 <statemachine+0x7d0>)
 8002f78:	210f      	movs	r1, #15
 8002f7a:	6a38      	ldr	r0, [r7, #32]
 8002f7c:	f00f fa9a 	bl	80124b4 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002f80:	4a5e      	ldr	r2, [pc, #376]	; (80030fc <statemachine+0x7b4>)
 8002f82:	2301      	movs	r3, #1
 8002f84:	ca06      	ldmia	r2, {r1, r2}
 8002f86:	6a38      	ldr	r0, [r7, #32]
 8002f88:	f7ff fa9c 	bl	80024c4 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8002f8c:	4b59      	ldr	r3, [pc, #356]	; (80030f4 <statemachine+0x7ac>)
 8002f8e:	7a1b      	ldrb	r3, [r3, #8]
 8002f90:	4a62      	ldr	r2, [pc, #392]	; (800311c <statemachine+0x7d4>)
 8002f92:	210f      	movs	r1, #15
 8002f94:	6a38      	ldr	r0, [r7, #32]
 8002f96:	f00f fa8d 	bl	80124b4 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8002f9a:	2128      	movs	r1, #40	; 0x28
 8002f9c:	2020      	movs	r0, #32
 8002f9e:	f7ff fab7 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002fa2:	4a56      	ldr	r2, [pc, #344]	; (80030fc <statemachine+0x7b4>)
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	ca06      	ldmia	r2, {r1, r2}
 8002fa8:	6a38      	ldr	r0, [r7, #32]
 8002faa:	f7ff fa8b 	bl	80024c4 <ssd1306_WriteString>
				  						snprintf(str,15, "Latitude:");
 8002fae:	4a52      	ldr	r2, [pc, #328]	; (80030f8 <statemachine+0x7b0>)
 8002fb0:	210f      	movs	r1, #15
 8002fb2:	6a38      	ldr	r0, [r7, #32]
 8002fb4:	f00f fa7e 	bl	80124b4 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8002fb8:	2130      	movs	r1, #48	; 0x30
 8002fba:	2020      	movs	r0, #32
 8002fbc:	f7ff faa8 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002fc0:	4a4e      	ldr	r2, [pc, #312]	; (80030fc <statemachine+0x7b4>)
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	ca06      	ldmia	r2, {r1, r2}
 8002fc6:	6a38      	ldr	r0, [r7, #32]
 8002fc8:	f7ff fa7c 	bl	80024c4 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.latitude);
 8002fcc:	4b49      	ldr	r3, [pc, #292]	; (80030f4 <statemachine+0x7ac>)
 8002fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd2:	e9cd 2300 	strd	r2, r3, [sp]
 8002fd6:	4a4a      	ldr	r2, [pc, #296]	; (8003100 <statemachine+0x7b8>)
 8002fd8:	210f      	movs	r1, #15
 8002fda:	6a38      	ldr	r0, [r7, #32]
 8002fdc:	f00f fa6a 	bl	80124b4 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8002fe0:	2138      	movs	r1, #56	; 0x38
 8002fe2:	2020      	movs	r0, #32
 8002fe4:	f7ff fa94 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8002fe8:	4a44      	ldr	r2, [pc, #272]	; (80030fc <statemachine+0x7b4>)
 8002fea:	2301      	movs	r3, #1
 8002fec:	ca06      	ldmia	r2, {r1, r2}
 8002fee:	6a38      	ldr	r0, [r7, #32]
 8002ff0:	f7ff fa68 	bl	80024c4 <ssd1306_WriteString>
				  						free(str);
 8002ff4:	6a38      	ldr	r0, [r7, #32]
 8002ff6:	f00d fb6b 	bl	80106d0 <free>
 8002ffa:	e01b      	b.n	8003034 <statemachine+0x6ec>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8002ffc:	2014      	movs	r0, #20
 8002ffe:	f00d fb5f 	bl	80106c0 <malloc>
 8003002:	4603      	mov	r3, r0
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
				  						ssd1306_SetCursor(32, 32);
 8003006:	2120      	movs	r1, #32
 8003008:	2020      	movs	r0, #32
 800300a:	f7ff fa81 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos2", Font_6x8, White);
 800300e:	4a3b      	ldr	r2, [pc, #236]	; (80030fc <statemachine+0x7b4>)
 8003010:	2301      	movs	r3, #1
 8003012:	ca06      	ldmia	r2, {r1, r2}
 8003014:	4842      	ldr	r0, [pc, #264]	; (8003120 <statemachine+0x7d8>)
 8003016:	f7ff fa55 	bl	80024c4 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	2020      	movs	r0, #32
 800301e:	f7ff fa77 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003022:	4a36      	ldr	r2, [pc, #216]	; (80030fc <statemachine+0x7b4>)
 8003024:	2301      	movs	r3, #1
 8003026:	ca06      	ldmia	r2, {r1, r2}
 8003028:	4838      	ldr	r0, [pc, #224]	; (800310c <statemachine+0x7c4>)
 800302a:	f7ff fa4b 	bl	80024c4 <ssd1306_WriteString>
				  						free(str);
 800302e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003030:	f00d fb4e 	bl	80106d0 <free>
				  					}
				  if(BTN_B>=1){
 8003034:	4b36      	ldr	r3, [pc, #216]	; (8003110 <statemachine+0x7c8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f340 814d 	ble.w	80032d8 <statemachine+0x990>
				  					  posstate++;
 800303e:	4b35      	ldr	r3, [pc, #212]	; (8003114 <statemachine+0x7cc>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	3301      	adds	r3, #1
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4b33      	ldr	r3, [pc, #204]	; (8003114 <statemachine+0x7cc>)
 8003048:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 800304a:	4b31      	ldr	r3, [pc, #196]	; (8003110 <statemachine+0x7c8>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
				  				  }



				  break;
 8003050:	e142      	b.n	80032d8 <statemachine+0x990>
			  case STATE_LONG:
				  if(myData.fix == 1){
 8003052:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <statemachine+0x7ac>)
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	2b01      	cmp	r3, #1
 8003058:	d166      	bne.n	8003128 <statemachine+0x7e0>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 800305a:	2014      	movs	r0, #20
 800305c:	f00d fb30 	bl	80106c0 <malloc>
 8003060:	4603      	mov	r3, r0
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
				  						ssd1306_SetCursor(32, 32);
 8003064:	2120      	movs	r1, #32
 8003066:	2020      	movs	r0, #32
 8003068:	f7ff fa52 	bl	8002510 <ssd1306_SetCursor>
				  						snprintf(str,15, "LonSide:");
 800306c:	4a2d      	ldr	r2, [pc, #180]	; (8003124 <statemachine+0x7dc>)
 800306e:	210f      	movs	r1, #15
 8003070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003072:	f00f fa1f 	bl	80124b4 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003076:	4a21      	ldr	r2, [pc, #132]	; (80030fc <statemachine+0x7b4>)
 8003078:	2301      	movs	r3, #1
 800307a:	ca06      	ldmia	r2, {r1, r2}
 800307c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800307e:	f7ff fa21 	bl	80024c4 <ssd1306_WriteString>
				  						snprintf(str,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003082:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <statemachine+0x7ac>)
 8003084:	7e1b      	ldrb	r3, [r3, #24]
 8003086:	4a25      	ldr	r2, [pc, #148]	; (800311c <statemachine+0x7d4>)
 8003088:	210f      	movs	r1, #15
 800308a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800308c:	f00f fa12 	bl	80124b4 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003090:	2128      	movs	r1, #40	; 0x28
 8003092:	2020      	movs	r0, #32
 8003094:	f7ff fa3c 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003098:	4a18      	ldr	r2, [pc, #96]	; (80030fc <statemachine+0x7b4>)
 800309a:	2301      	movs	r3, #1
 800309c:	ca06      	ldmia	r2, {r1, r2}
 800309e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030a0:	f7ff fa10 	bl	80024c4 <ssd1306_WriteString>
				  						snprintf(str,15, "Longitude:");
 80030a4:	4a17      	ldr	r2, [pc, #92]	; (8003104 <statemachine+0x7bc>)
 80030a6:	210f      	movs	r1, #15
 80030a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030aa:	f00f fa03 	bl	80124b4 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80030ae:	2130      	movs	r1, #48	; 0x30
 80030b0:	2020      	movs	r0, #32
 80030b2:	f7ff fa2d 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80030b6:	4a11      	ldr	r2, [pc, #68]	; (80030fc <statemachine+0x7b4>)
 80030b8:	2301      	movs	r3, #1
 80030ba:	ca06      	ldmia	r2, {r1, r2}
 80030bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030be:	f7ff fa01 	bl	80024c4 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.7f",myData.longitude);
 80030c2:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <statemachine+0x7ac>)
 80030c4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030c8:	e9cd 2300 	strd	r2, r3, [sp]
 80030cc:	4a0c      	ldr	r2, [pc, #48]	; (8003100 <statemachine+0x7b8>)
 80030ce:	210f      	movs	r1, #15
 80030d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d2:	f00f f9ef 	bl	80124b4 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80030d6:	2138      	movs	r1, #56	; 0x38
 80030d8:	2020      	movs	r0, #32
 80030da:	f7ff fa19 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80030de:	4a07      	ldr	r2, [pc, #28]	; (80030fc <statemachine+0x7b4>)
 80030e0:	2301      	movs	r3, #1
 80030e2:	ca06      	ldmia	r2, {r1, r2}
 80030e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030e6:	f7ff f9ed 	bl	80024c4 <ssd1306_WriteString>
				  						free(str);
 80030ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ec:	f00d faf0 	bl	80106d0 <free>
 80030f0:	e036      	b.n	8003160 <statemachine+0x818>
 80030f2:	bf00      	nop
 80030f4:	20000828 	.word	0x20000828
 80030f8:	080164dc 	.word	0x080164dc
 80030fc:	20000008 	.word	0x20000008
 8003100:	080164e8 	.word	0x080164e8
 8003104:	080164f0 	.word	0x080164f0
 8003108:	080164fc 	.word	0x080164fc
 800310c:	080164b4 	.word	0x080164b4
 8003110:	2000086c 	.word	0x2000086c
 8003114:	20000873 	.word	0x20000873
 8003118:	08016504 	.word	0x08016504
 800311c:	08016510 	.word	0x08016510
 8003120:	08016514 	.word	0x08016514
 8003124:	0801651c 	.word	0x0801651c
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003128:	2014      	movs	r0, #20
 800312a:	f00d fac9 	bl	80106c0 <malloc>
 800312e:	4603      	mov	r3, r0
 8003130:	62fb      	str	r3, [r7, #44]	; 0x2c
				  						ssd1306_SetCursor(32, 32);
 8003132:	2120      	movs	r1, #32
 8003134:	2020      	movs	r0, #32
 8003136:	f7ff f9eb 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos3", Font_6x8, White);
 800313a:	4a9f      	ldr	r2, [pc, #636]	; (80033b8 <statemachine+0xa70>)
 800313c:	2301      	movs	r3, #1
 800313e:	ca06      	ldmia	r2, {r1, r2}
 8003140:	489e      	ldr	r0, [pc, #632]	; (80033bc <statemachine+0xa74>)
 8003142:	f7ff f9bf 	bl	80024c4 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003146:	212c      	movs	r1, #44	; 0x2c
 8003148:	2020      	movs	r0, #32
 800314a:	f7ff f9e1 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800314e:	4a9a      	ldr	r2, [pc, #616]	; (80033b8 <statemachine+0xa70>)
 8003150:	2301      	movs	r3, #1
 8003152:	ca06      	ldmia	r2, {r1, r2}
 8003154:	489a      	ldr	r0, [pc, #616]	; (80033c0 <statemachine+0xa78>)
 8003156:	f7ff f9b5 	bl	80024c4 <ssd1306_WriteString>
				  						free(str);
 800315a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800315c:	f00d fab8 	bl	80106d0 <free>
				  					}
				  if(BTN_B>=1){
 8003160:	4b98      	ldr	r3, [pc, #608]	; (80033c4 <statemachine+0xa7c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	f340 80b9 	ble.w	80032dc <statemachine+0x994>
				  					  posstate++;
 800316a:	4b97      	ldr	r3, [pc, #604]	; (80033c8 <statemachine+0xa80>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	3301      	adds	r3, #1
 8003170:	b2da      	uxtb	r2, r3
 8003172:	4b95      	ldr	r3, [pc, #596]	; (80033c8 <statemachine+0xa80>)
 8003174:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8003176:	4b93      	ldr	r3, [pc, #588]	; (80033c4 <statemachine+0xa7c>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
				  				  }


				  break;
 800317c:	e0ae      	b.n	80032dc <statemachine+0x994>
			  case STATE_ALT:
				  if(myData.fix == 1){
 800317e:	4b93      	ldr	r3, [pc, #588]	; (80033cc <statemachine+0xa84>)
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	2b01      	cmp	r3, #1
 8003184:	d170      	bne.n	8003268 <statemachine+0x920>
				  				  char * str = (char*)malloc(sizeof(char)*20);//tout le long, on utilisera le meme buffer str pour tous les affichages
 8003186:	2014      	movs	r0, #20
 8003188:	f00d fa9a 	bl	80106c0 <malloc>
 800318c:	4603      	mov	r3, r0
 800318e:	633b      	str	r3, [r7, #48]	; 0x30
				  						ssd1306_SetCursor(32, 32);
 8003190:	2120      	movs	r1, #32
 8003192:	2020      	movs	r0, #32
 8003194:	f7ff f9bc 	bl	8002510 <ssd1306_SetCursor>
				  						snprintf(str,15, "altitude:");
 8003198:	4a8d      	ldr	r2, [pc, #564]	; (80033d0 <statemachine+0xa88>)
 800319a:	210f      	movs	r1, #15
 800319c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800319e:	f00f f989 	bl	80124b4 <sniprintf>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80031a2:	4a85      	ldr	r2, [pc, #532]	; (80033b8 <statemachine+0xa70>)
 80031a4:	2301      	movs	r3, #1
 80031a6:	ca06      	ldmia	r2, {r1, r2}
 80031a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031aa:	f7ff f98b 	bl	80024c4 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80031ae:	4b87      	ldr	r3, [pc, #540]	; (80033cc <statemachine+0xa84>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd f9c8 	bl	8000548 <__aeabi_f2d>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	e9cd 2300 	strd	r2, r3, [sp]
 80031c0:	4a84      	ldr	r2, [pc, #528]	; (80033d4 <statemachine+0xa8c>)
 80031c2:	210f      	movs	r1, #15
 80031c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031c6:	f00f f975 	bl	80124b4 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 80031ca:	2128      	movs	r1, #40	; 0x28
 80031cc:	2020      	movs	r0, #32
 80031ce:	f7ff f99f 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80031d2:	4a79      	ldr	r2, [pc, #484]	; (80033b8 <statemachine+0xa70>)
 80031d4:	2301      	movs	r3, #1
 80031d6:	ca06      	ldmia	r2, {r1, r2}
 80031d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031da:	f7ff f973 	bl	80024c4 <ssd1306_WriteString>
				  						snprintf(str,15, "Pressure:");
 80031de:	4a7e      	ldr	r2, [pc, #504]	; (80033d8 <statemachine+0xa90>)
 80031e0:	210f      	movs	r1, #15
 80031e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031e4:	f00f f966 	bl	80124b4 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80031e8:	2130      	movs	r1, #48	; 0x30
 80031ea:	2020      	movs	r0, #32
 80031ec:	f7ff f990 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 80031f0:	4a71      	ldr	r2, [pc, #452]	; (80033b8 <statemachine+0xa70>)
 80031f2:	2301      	movs	r3, #1
 80031f4:	ca06      	ldmia	r2, {r1, r2}
 80031f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031f8:	f7ff f964 	bl	80024c4 <ssd1306_WriteString>
				  						snprintf(str,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 80031fc:	4b73      	ldr	r3, [pc, #460]	; (80033cc <statemachine+0xa84>)
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd f9a1 	bl	8000548 <__aeabi_f2d>
 8003206:	a36a      	add	r3, pc, #424	; (adr r3, 80033b0 <statemachine+0xa68>)
 8003208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320c:	f7fd f9f4 	bl	80005f8 <__aeabi_dmul>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	f7fd fce6 	bl	8000be8 <__aeabi_d2f>
 800321c:	4603      	mov	r3, r0
 800321e:	ee00 3a10 	vmov	s0, r3
 8003222:	f011 fff5 	bl	8015210 <expf>
 8003226:	eef0 7a40 	vmov.f32	s15, s0
 800322a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80033dc <statemachine+0xa94>
 800322e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003232:	ee17 0a90 	vmov	r0, s15
 8003236:	f7fd f987 	bl	8000548 <__aeabi_f2d>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	e9cd 2300 	strd	r2, r3, [sp]
 8003242:	4a67      	ldr	r2, [pc, #412]	; (80033e0 <statemachine+0xa98>)
 8003244:	210f      	movs	r1, #15
 8003246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003248:	f00f f934 	bl	80124b4 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 800324c:	2138      	movs	r1, #56	; 0x38
 800324e:	2020      	movs	r0, #32
 8003250:	f7ff f95e 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString(str, Font_6x8, White);
 8003254:	4a58      	ldr	r2, [pc, #352]	; (80033b8 <statemachine+0xa70>)
 8003256:	2301      	movs	r3, #1
 8003258:	ca06      	ldmia	r2, {r1, r2}
 800325a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800325c:	f7ff f932 	bl	80024c4 <ssd1306_WriteString>
				  						free(str);
 8003260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003262:	f00d fa35 	bl	80106d0 <free>
 8003266:	e01b      	b.n	80032a0 <statemachine+0x958>
				  					}
				  				else{ //if the GPS doesn't have a fix, print a message
				  						char *str = (char*)malloc(sizeof(char)*20);
 8003268:	2014      	movs	r0, #20
 800326a:	f00d fa29 	bl	80106c0 <malloc>
 800326e:	4603      	mov	r3, r0
 8003270:	637b      	str	r3, [r7, #52]	; 0x34
				  						ssd1306_SetCursor(32, 32);
 8003272:	2120      	movs	r1, #32
 8003274:	2020      	movs	r0, #32
 8003276:	f7ff f94b 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Pos4", Font_6x8, White);
 800327a:	4a4f      	ldr	r2, [pc, #316]	; (80033b8 <statemachine+0xa70>)
 800327c:	2301      	movs	r3, #1
 800327e:	ca06      	ldmia	r2, {r1, r2}
 8003280:	4858      	ldr	r0, [pc, #352]	; (80033e4 <statemachine+0xa9c>)
 8003282:	f7ff f91f 	bl	80024c4 <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 44);
 8003286:	212c      	movs	r1, #44	; 0x2c
 8003288:	2020      	movs	r0, #32
 800328a:	f7ff f941 	bl	8002510 <ssd1306_SetCursor>
				  						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800328e:	4a4a      	ldr	r2, [pc, #296]	; (80033b8 <statemachine+0xa70>)
 8003290:	2301      	movs	r3, #1
 8003292:	ca06      	ldmia	r2, {r1, r2}
 8003294:	484a      	ldr	r0, [pc, #296]	; (80033c0 <statemachine+0xa78>)
 8003296:	f7ff f915 	bl	80024c4 <ssd1306_WriteString>
				  						free(str);
 800329a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800329c:	f00d fa18 	bl	80106d0 <free>
				  					}
				  if(BTN_B>=1){
 80032a0:	4b48      	ldr	r3, [pc, #288]	; (80033c4 <statemachine+0xa7c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	dd1b      	ble.n	80032e0 <statemachine+0x998>
				  					posstate--;
 80032a8:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <statemachine+0xa80>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	4b45      	ldr	r3, [pc, #276]	; (80033c8 <statemachine+0xa80>)
 80032b2:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 80032b4:	4b44      	ldr	r3, [pc, #272]	; (80033c8 <statemachine+0xa80>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	4b42      	ldr	r3, [pc, #264]	; (80033c8 <statemachine+0xa80>)
 80032be:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 80032c0:	4b41      	ldr	r3, [pc, #260]	; (80033c8 <statemachine+0xa80>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	4b3f      	ldr	r3, [pc, #252]	; (80033c8 <statemachine+0xa80>)
 80032ca:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 80032cc:	4b3d      	ldr	r3, [pc, #244]	; (80033c4 <statemachine+0xa7c>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
				  				  }
				  break;
 80032d2:	e005      	b.n	80032e0 <statemachine+0x998>
				  break;
 80032d4:	bf00      	nop
 80032d6:	e004      	b.n	80032e2 <statemachine+0x99a>
				  break;
 80032d8:	bf00      	nop
 80032da:	e002      	b.n	80032e2 <statemachine+0x99a>
				  break;
 80032dc:	bf00      	nop
 80032de:	e000      	b.n	80032e2 <statemachine+0x99a>
				  break;
 80032e0:	bf00      	nop
			  }

					if(BTN_A>=1){
 80032e2:	4b41      	ldr	r3, [pc, #260]	; (80033e8 <statemachine+0xaa0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f340 85da 	ble.w	8003ea0 <statemachine+0x1558>
							state++;
 80032ec:	4b3f      	ldr	r3, [pc, #252]	; (80033ec <statemachine+0xaa4>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	4b3d      	ldr	r3, [pc, #244]	; (80033ec <statemachine+0xaa4>)
 80032f6:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 80032f8:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <statemachine+0xaa0>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
						}
			  break;
 80032fe:	f000 bdcf 	b.w	8003ea0 <statemachine+0x1558>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 8003302:	2000      	movs	r0, #0
 8003304:	f7fe ffc2 	bl	800228c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003308:	4939      	ldr	r1, [pc, #228]	; (80033f0 <statemachine+0xaa8>)
 800330a:	4830      	ldr	r0, [pc, #192]	; (80033cc <statemachine+0xa84>)
 800330c:	f7fe fe6a 	bl	8001fe4 <nmea_parse>
			  int heure=0;
 8003310:	2300      	movs	r3, #0
 8003312:	657b      	str	r3, [r7, #84]	; 0x54
			  heure=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8003314:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <statemachine+0xa84>)
 8003316:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800331a:	f003 020f 	and.w	r2, r3, #15
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	461a      	mov	r2, r3
 8003328:	4b28      	ldr	r3, [pc, #160]	; (80033cc <statemachine+0xa84>)
 800332a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	4413      	add	r3, r2
 8003334:	657b      	str	r3, [r7, #84]	; 0x54
			  if((heure+2)>=24){
 8003336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003338:	2b15      	cmp	r3, #21
 800333a:	dd03      	ble.n	8003344 <statemachine+0x9fc>
				  heure=heure-22;
 800333c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800333e:	3b16      	subs	r3, #22
 8003340:	657b      	str	r3, [r7, #84]	; 0x54
 8003342:	e002      	b.n	800334a <statemachine+0xa02>
			  }
			  else{
				  heure=heure+2;
 8003344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003346:	3302      	adds	r3, #2
 8003348:	657b      	str	r3, [r7, #84]	; 0x54
			  }

			  if(myData.fix == 1){
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <statemachine+0xa84>)
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	2b01      	cmp	r3, #1
 8003350:	f040 82e2 	bne.w	8003918 <statemachine+0xfd0>

				  switch(hrstate){
 8003354:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <statemachine+0xaac>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <statemachine+0xa1c>
 800335c:	2b01      	cmp	r3, #1
 800335e:	f000 808e 	beq.w	800347e <statemachine+0xb36>
 8003362:	e2ef      	b.n	8003944 <statemachine+0xffc>
				  case STATE_DIGIT:
					  char * str = (char*)malloc(sizeof(char)*20);
 8003364:	2014      	movs	r0, #20
 8003366:	f00d f9ab 	bl	80106c0 <malloc>
 800336a:	4603      	mov	r3, r0
 800336c:	63bb      	str	r3, [r7, #56]	; 0x38
					  ssd1306_SetCursor(32, 32);
 800336e:	2120      	movs	r1, #32
 8003370:	2020      	movs	r0, #32
 8003372:	f7ff f8cd 	bl	8002510 <ssd1306_SetCursor>
					  ssd1306_WriteString("hr GMT+2:", Font_6x8, White);
 8003376:	4a10      	ldr	r2, [pc, #64]	; (80033b8 <statemachine+0xa70>)
 8003378:	2301      	movs	r3, #1
 800337a:	ca06      	ldmia	r2, {r1, r2}
 800337c:	481e      	ldr	r0, [pc, #120]	; (80033f8 <statemachine+0xab0>)
 800337e:	f7ff f8a1 	bl	80024c4 <ssd1306_WriteString>
					 ssd1306_SetCursor(34, 42);
 8003382:	212a      	movs	r1, #42	; 0x2a
 8003384:	2022      	movs	r0, #34	; 0x22
 8003386:	f7ff f8c3 	bl	8002510 <ssd1306_SetCursor>
					 if(heure>=10){
 800338a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800338c:	2b09      	cmp	r3, #9
 800338e:	dd37      	ble.n	8003400 <statemachine+0xab8>
					snprintf(str,15, "%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8003390:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <statemachine+0xa84>)
 8003392:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003396:	461a      	mov	r2, r3
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <statemachine+0xa84>)
 800339a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	9200      	str	r2, [sp, #0]
 80033a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a4:	4a15      	ldr	r2, [pc, #84]	; (80033fc <statemachine+0xab4>)
 80033a6:	210f      	movs	r1, #15
 80033a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80033aa:	f00f f883 	bl	80124b4 <sniprintf>
 80033ae:	e036      	b.n	800341e <statemachine+0xad6>
 80033b0:	fb798882 	.word	0xfb798882
 80033b4:	bf1e1818 	.word	0xbf1e1818
 80033b8:	20000008 	.word	0x20000008
 80033bc:	08016528 	.word	0x08016528
 80033c0:	080164b4 	.word	0x080164b4
 80033c4:	2000086c 	.word	0x2000086c
 80033c8:	20000873 	.word	0x20000873
 80033cc:	20000828 	.word	0x20000828
 80033d0:	08016530 	.word	0x08016530
 80033d4:	0801653c 	.word	0x0801653c
 80033d8:	08016544 	.word	0x08016544
 80033dc:	447a0000 	.word	0x447a0000
 80033e0:	08016550 	.word	0x08016550
 80033e4:	0801655c 	.word	0x0801655c
 80033e8:	20000868 	.word	0x20000868
 80033ec:	20000870 	.word	0x20000870
 80033f0:	20000624 	.word	0x20000624
 80033f4:	20000871 	.word	0x20000871
 80033f8:	08016564 	.word	0x08016564
 80033fc:	08016570 	.word	0x08016570
					}
					else{
					 	snprintf(str,15, "0%d:%c%c",heure,myData.lastMeasure[2],myData.lastMeasure[3]);
 8003400:	4bb5      	ldr	r3, [pc, #724]	; (80036d8 <statemachine+0xd90>)
 8003402:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003406:	461a      	mov	r2, r3
 8003408:	4bb3      	ldr	r3, [pc, #716]	; (80036d8 <statemachine+0xd90>)
 800340a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	9200      	str	r2, [sp, #0]
 8003412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003414:	4ab1      	ldr	r2, [pc, #708]	; (80036dc <statemachine+0xd94>)
 8003416:	210f      	movs	r1, #15
 8003418:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800341a:	f00f f84b 	bl	80124b4 <sniprintf>
					}
					ssd1306_WriteString(str, Font_7x10, White);
 800341e:	4ab0      	ldr	r2, [pc, #704]	; (80036e0 <statemachine+0xd98>)
 8003420:	2301      	movs	r3, #1
 8003422:	ca06      	ldmia	r2, {r1, r2}
 8003424:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003426:	f7ff f84d 	bl	80024c4 <ssd1306_WriteString>
					ssd1306_SetCursor(34, 52);
 800342a:	2134      	movs	r1, #52	; 0x34
 800342c:	2022      	movs	r0, #34	; 0x22
 800342e:	f7ff f86f 	bl	8002510 <ssd1306_SetCursor>
					snprintf(str,15, "%c%c sec",myData.lastMeasure[4],myData.lastMeasure[5]);
 8003432:	4ba9      	ldr	r3, [pc, #676]	; (80036d8 <statemachine+0xd90>)
 8003434:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003438:	461a      	mov	r2, r3
 800343a:	4ba7      	ldr	r3, [pc, #668]	; (80036d8 <statemachine+0xd90>)
 800343c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	4613      	mov	r3, r2
 8003444:	4aa7      	ldr	r2, [pc, #668]	; (80036e4 <statemachine+0xd9c>)
 8003446:	210f      	movs	r1, #15
 8003448:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800344a:	f00f f833 	bl	80124b4 <sniprintf>
					ssd1306_WriteString(str, Font_6x8, White);
 800344e:	4aa6      	ldr	r2, [pc, #664]	; (80036e8 <statemachine+0xda0>)
 8003450:	2301      	movs	r3, #1
 8003452:	ca06      	ldmia	r2, {r1, r2}
 8003454:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003456:	f7ff f835 	bl	80024c4 <ssd1306_WriteString>
					free(str);
 800345a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800345c:	f00d f938 	bl	80106d0 <free>
					if(BTN_B>=1){
 8003460:	4ba2      	ldr	r3, [pc, #648]	; (80036ec <statemachine+0xda4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f340 826a 	ble.w	800393e <statemachine+0xff6>
												hrstate++;
 800346a:	4ba1      	ldr	r3, [pc, #644]	; (80036f0 <statemachine+0xda8>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	3301      	adds	r3, #1
 8003470:	b2da      	uxtb	r2, r3
 8003472:	4b9f      	ldr	r3, [pc, #636]	; (80036f0 <statemachine+0xda8>)
 8003474:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 8003476:	4b9d      	ldr	r3, [pc, #628]	; (80036ec <statemachine+0xda4>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
											}




					  break;
 800347c:	e25f      	b.n	800393e <statemachine+0xff6>
				  case STATE_OLD:
					  if(heure>12){
 800347e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003480:	2b0c      	cmp	r3, #12
 8003482:	dd02      	ble.n	800348a <statemachine+0xb42>
						  heure=heure-12;
 8003484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003486:	3b0c      	subs	r3, #12
 8003488:	657b      	str	r3, [r7, #84]	; 0x54
					  }
					  int minute=0;
 800348a:	2300      	movs	r3, #0
 800348c:	63fb      	str	r3, [r7, #60]	; 0x3c
					  minute=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 800348e:	4b92      	ldr	r3, [pc, #584]	; (80036d8 <statemachine+0xd90>)
 8003490:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003494:	f003 020f 	and.w	r2, r3, #15
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	461a      	mov	r2, r3
 80034a2:	4b8d      	ldr	r3, [pc, #564]	; (80036d8 <statemachine+0xd90>)
 80034a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	4413      	add	r3, r2
 80034ae:	63fb      	str	r3, [r7, #60]	; 0x3c
					  ssd1306_DrawCircle(64, 48, 12, White);
 80034b0:	2301      	movs	r3, #1
 80034b2:	220c      	movs	r2, #12
 80034b4:	2130      	movs	r1, #48	; 0x30
 80034b6:	2040      	movs	r0, #64	; 0x40
 80034b8:	f7ff f8ae 	bl	8002618 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-heure)*M_PI/6)),48-floor(6*sin((3-heure)*M_PI/6)),White);
 80034bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034be:	f1c3 0303 	rsb	r3, r3, #3
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd f82e 	bl	8000524 <__aeabi_i2d>
 80034c8:	a381      	add	r3, pc, #516	; (adr r3, 80036d0 <statemachine+0xd88>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f7fd f893 	bl	80005f8 <__aeabi_dmul>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	4b85      	ldr	r3, [pc, #532]	; (80036f4 <statemachine+0xdac>)
 80034e0:	f7fd f9b4 	bl	800084c <__aeabi_ddiv>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	ec43 2b17 	vmov	d7, r2, r3
 80034ec:	eeb0 0a47 	vmov.f32	s0, s14
 80034f0:	eef0 0a67 	vmov.f32	s1, s15
 80034f4:	f011 fde0 	bl	80150b8 <cos>
 80034f8:	ec51 0b10 	vmov	r0, r1, d0
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	4b7c      	ldr	r3, [pc, #496]	; (80036f4 <statemachine+0xdac>)
 8003502:	f7fd f879 	bl	80005f8 <__aeabi_dmul>
 8003506:	4602      	mov	r2, r0
 8003508:	460b      	mov	r3, r1
 800350a:	ec43 2b17 	vmov	d7, r2, r3
 800350e:	eeb0 0a47 	vmov.f32	s0, s14
 8003512:	eef0 0a67 	vmov.f32	s1, s15
 8003516:	f011 febf 	bl	8015298 <floor>
 800351a:	ec51 0b10 	vmov	r0, r1, d0
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	4b75      	ldr	r3, [pc, #468]	; (80036f8 <statemachine+0xdb0>)
 8003524:	f7fc feb2 	bl	800028c <__adddf3>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	f7fd fb3a 	bl	8000ba8 <__aeabi_d2uiz>
 8003534:	4603      	mov	r3, r0
 8003536:	b2dc      	uxtb	r4, r3
 8003538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353a:	f1c3 0303 	rsb	r3, r3, #3
 800353e:	4618      	mov	r0, r3
 8003540:	f7fc fff0 	bl	8000524 <__aeabi_i2d>
 8003544:	a362      	add	r3, pc, #392	; (adr r3, 80036d0 <statemachine+0xd88>)
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f7fd f855 	bl	80005f8 <__aeabi_dmul>
 800354e:	4602      	mov	r2, r0
 8003550:	460b      	mov	r3, r1
 8003552:	4610      	mov	r0, r2
 8003554:	4619      	mov	r1, r3
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	4b66      	ldr	r3, [pc, #408]	; (80036f4 <statemachine+0xdac>)
 800355c:	f7fd f976 	bl	800084c <__aeabi_ddiv>
 8003560:	4602      	mov	r2, r0
 8003562:	460b      	mov	r3, r1
 8003564:	ec43 2b17 	vmov	d7, r2, r3
 8003568:	eeb0 0a47 	vmov.f32	s0, s14
 800356c:	eef0 0a67 	vmov.f32	s1, s15
 8003570:	f011 fdf6 	bl	8015160 <sin>
 8003574:	ec51 0b10 	vmov	r0, r1, d0
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	4b5d      	ldr	r3, [pc, #372]	; (80036f4 <statemachine+0xdac>)
 800357e:	f7fd f83b 	bl	80005f8 <__aeabi_dmul>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	ec43 2b17 	vmov	d7, r2, r3
 800358a:	eeb0 0a47 	vmov.f32	s0, s14
 800358e:	eef0 0a67 	vmov.f32	s1, s15
 8003592:	f011 fe81 	bl	8015298 <floor>
 8003596:	ec53 2b10 	vmov	r2, r3, d0
 800359a:	f04f 0000 	mov.w	r0, #0
 800359e:	4957      	ldr	r1, [pc, #348]	; (80036fc <statemachine+0xdb4>)
 80035a0:	f7fc fe72 	bl	8000288 <__aeabi_dsub>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4610      	mov	r0, r2
 80035aa:	4619      	mov	r1, r3
 80035ac:	f7fd fafc 	bl	8000ba8 <__aeabi_d2uiz>
 80035b0:	4603      	mov	r3, r0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2201      	movs	r2, #1
 80035b6:	9200      	str	r2, [sp, #0]
 80035b8:	4622      	mov	r2, r4
 80035ba:	2130      	movs	r1, #48	; 0x30
 80035bc:	2040      	movs	r0, #64	; 0x40
 80035be:	f7fe ffbf 	bl	8002540 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-minute)*M_PI/30)),48-floor(12*sin((15-minute)*M_PI/30)),White);
 80035c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c4:	f1c3 030f 	rsb	r3, r3, #15
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fc ffab 	bl	8000524 <__aeabi_i2d>
 80035ce:	a340      	add	r3, pc, #256	; (adr r3, 80036d0 <statemachine+0xd88>)
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	f7fd f810 	bl	80005f8 <__aeabi_dmul>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	4b46      	ldr	r3, [pc, #280]	; (8003700 <statemachine+0xdb8>)
 80035e6:	f7fd f931 	bl	800084c <__aeabi_ddiv>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	ec43 2b17 	vmov	d7, r2, r3
 80035f2:	eeb0 0a47 	vmov.f32	s0, s14
 80035f6:	eef0 0a67 	vmov.f32	s1, s15
 80035fa:	f011 fd5d 	bl	80150b8 <cos>
 80035fe:	ec51 0b10 	vmov	r0, r1, d0
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	4b3f      	ldr	r3, [pc, #252]	; (8003704 <statemachine+0xdbc>)
 8003608:	f7fc fff6 	bl	80005f8 <__aeabi_dmul>
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	ec43 2b17 	vmov	d7, r2, r3
 8003614:	eeb0 0a47 	vmov.f32	s0, s14
 8003618:	eef0 0a67 	vmov.f32	s1, s15
 800361c:	f011 fe3c 	bl	8015298 <floor>
 8003620:	ec51 0b10 	vmov	r0, r1, d0
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	4b33      	ldr	r3, [pc, #204]	; (80036f8 <statemachine+0xdb0>)
 800362a:	f7fc fe2f 	bl	800028c <__adddf3>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4610      	mov	r0, r2
 8003634:	4619      	mov	r1, r3
 8003636:	f7fd fab7 	bl	8000ba8 <__aeabi_d2uiz>
 800363a:	4603      	mov	r3, r0
 800363c:	b2dc      	uxtb	r4, r3
 800363e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003640:	f1c3 030f 	rsb	r3, r3, #15
 8003644:	4618      	mov	r0, r3
 8003646:	f7fc ff6d 	bl	8000524 <__aeabi_i2d>
 800364a:	a321      	add	r3, pc, #132	; (adr r3, 80036d0 <statemachine+0xd88>)
 800364c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003650:	f7fc ffd2 	bl	80005f8 <__aeabi_dmul>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4610      	mov	r0, r2
 800365a:	4619      	mov	r1, r3
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <statemachine+0xdb8>)
 8003662:	f7fd f8f3 	bl	800084c <__aeabi_ddiv>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	ec43 2b17 	vmov	d7, r2, r3
 800366e:	eeb0 0a47 	vmov.f32	s0, s14
 8003672:	eef0 0a67 	vmov.f32	s1, s15
 8003676:	f011 fd73 	bl	8015160 <sin>
 800367a:	ec51 0b10 	vmov	r0, r1, d0
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <statemachine+0xdbc>)
 8003684:	f7fc ffb8 	bl	80005f8 <__aeabi_dmul>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	ec43 2b17 	vmov	d7, r2, r3
 8003690:	eeb0 0a47 	vmov.f32	s0, s14
 8003694:	eef0 0a67 	vmov.f32	s1, s15
 8003698:	f011 fdfe 	bl	8015298 <floor>
 800369c:	ec53 2b10 	vmov	r2, r3, d0
 80036a0:	f04f 0000 	mov.w	r0, #0
 80036a4:	4915      	ldr	r1, [pc, #84]	; (80036fc <statemachine+0xdb4>)
 80036a6:	f7fc fdef 	bl	8000288 <__aeabi_dsub>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4610      	mov	r0, r2
 80036b0:	4619      	mov	r1, r3
 80036b2:	f7fd fa79 	bl	8000ba8 <__aeabi_d2uiz>
 80036b6:	4603      	mov	r3, r0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2201      	movs	r2, #1
 80036bc:	9200      	str	r2, [sp, #0]
 80036be:	4622      	mov	r2, r4
 80036c0:	2130      	movs	r1, #48	; 0x30
 80036c2:	2040      	movs	r0, #64	; 0x40
 80036c4:	f7fe ff3c 	bl	8002540 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 80036c8:	2300      	movs	r3, #0
 80036ca:	653b      	str	r3, [r7, #80]	; 0x50
 80036cc:	e112      	b.n	80038f4 <statemachine+0xfac>
 80036ce:	bf00      	nop
 80036d0:	54442d18 	.word	0x54442d18
 80036d4:	400921fb 	.word	0x400921fb
 80036d8:	20000828 	.word	0x20000828
 80036dc:	08016578 	.word	0x08016578
 80036e0:	20000010 	.word	0x20000010
 80036e4:	08016584 	.word	0x08016584
 80036e8:	20000008 	.word	0x20000008
 80036ec:	2000086c 	.word	0x2000086c
 80036f0:	20000871 	.word	0x20000871
 80036f4:	40180000 	.word	0x40180000
 80036f8:	40500000 	.word	0x40500000
 80036fc:	40480000 	.word	0x40480000
 8003700:	403e0000 	.word	0x403e0000
 8003704:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 8003708:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800370a:	f7fc ff0b 	bl	8000524 <__aeabi_i2d>
 800370e:	a3c2      	add	r3, pc, #776	; (adr r3, 8003a18 <statemachine+0x10d0>)
 8003710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003714:	f7fc ff70 	bl	80005f8 <__aeabi_dmul>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4610      	mov	r0, r2
 800371e:	4619      	mov	r1, r3
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	4bbe      	ldr	r3, [pc, #760]	; (8003a20 <statemachine+0x10d8>)
 8003726:	f7fd f891 	bl	800084c <__aeabi_ddiv>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	ec43 2b17 	vmov	d7, r2, r3
 8003732:	eeb0 0a47 	vmov.f32	s0, s14
 8003736:	eef0 0a67 	vmov.f32	s1, s15
 800373a:	f011 fcbd 	bl	80150b8 <cos>
 800373e:	ec51 0b10 	vmov	r0, r1, d0
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	4bb7      	ldr	r3, [pc, #732]	; (8003a24 <statemachine+0x10dc>)
 8003748:	f7fc ff56 	bl	80005f8 <__aeabi_dmul>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	ec43 2b17 	vmov	d7, r2, r3
 8003754:	eeb0 0a47 	vmov.f32	s0, s14
 8003758:	eef0 0a67 	vmov.f32	s1, s15
 800375c:	f011 fd9c 	bl	8015298 <floor>
 8003760:	ec51 0b10 	vmov	r0, r1, d0
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	4baf      	ldr	r3, [pc, #700]	; (8003a28 <statemachine+0x10e0>)
 800376a:	f7fc fd8f 	bl	800028c <__adddf3>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4610      	mov	r0, r2
 8003774:	4619      	mov	r1, r3
 8003776:	f7fd fa17 	bl	8000ba8 <__aeabi_d2uiz>
 800377a:	4603      	mov	r3, r0
 800377c:	b2dc      	uxtb	r4, r3
 800377e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003780:	f7fc fed0 	bl	8000524 <__aeabi_i2d>
 8003784:	a3a4      	add	r3, pc, #656	; (adr r3, 8003a18 <statemachine+0x10d0>)
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f7fc ff35 	bl	80005f8 <__aeabi_dmul>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4610      	mov	r0, r2
 8003794:	4619      	mov	r1, r3
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	4ba1      	ldr	r3, [pc, #644]	; (8003a20 <statemachine+0x10d8>)
 800379c:	f7fd f856 	bl	800084c <__aeabi_ddiv>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	ec43 2b17 	vmov	d7, r2, r3
 80037a8:	eeb0 0a47 	vmov.f32	s0, s14
 80037ac:	eef0 0a67 	vmov.f32	s1, s15
 80037b0:	f011 fcd6 	bl	8015160 <sin>
 80037b4:	ec51 0b10 	vmov	r0, r1, d0
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	4b99      	ldr	r3, [pc, #612]	; (8003a24 <statemachine+0x10dc>)
 80037be:	f7fc ff1b 	bl	80005f8 <__aeabi_dmul>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	ec43 2b17 	vmov	d7, r2, r3
 80037ca:	eeb0 0a47 	vmov.f32	s0, s14
 80037ce:	eef0 0a67 	vmov.f32	s1, s15
 80037d2:	f011 fd61 	bl	8015298 <floor>
 80037d6:	ec51 0b10 	vmov	r0, r1, d0
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	4b93      	ldr	r3, [pc, #588]	; (8003a2c <statemachine+0x10e4>)
 80037e0:	f7fc fd54 	bl	800028c <__adddf3>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	f7fd f9dc 	bl	8000ba8 <__aeabi_d2uiz>
 80037f0:	4603      	mov	r3, r0
 80037f2:	b2dd      	uxtb	r5, r3
 80037f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80037f6:	f7fc fe95 	bl	8000524 <__aeabi_i2d>
 80037fa:	a387      	add	r3, pc, #540	; (adr r3, 8003a18 <statemachine+0x10d0>)
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	f7fc fefa 	bl	80005f8 <__aeabi_dmul>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4610      	mov	r0, r2
 800380a:	4619      	mov	r1, r3
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	4b83      	ldr	r3, [pc, #524]	; (8003a20 <statemachine+0x10d8>)
 8003812:	f7fd f81b 	bl	800084c <__aeabi_ddiv>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	ec43 2b17 	vmov	d7, r2, r3
 800381e:	eeb0 0a47 	vmov.f32	s0, s14
 8003822:	eef0 0a67 	vmov.f32	s1, s15
 8003826:	f011 fc47 	bl	80150b8 <cos>
 800382a:	ec51 0b10 	vmov	r0, r1, d0
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	4b7f      	ldr	r3, [pc, #508]	; (8003a30 <statemachine+0x10e8>)
 8003834:	f7fc fee0 	bl	80005f8 <__aeabi_dmul>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	ec43 2b17 	vmov	d7, r2, r3
 8003840:	eeb0 0a47 	vmov.f32	s0, s14
 8003844:	eef0 0a67 	vmov.f32	s1, s15
 8003848:	f011 fd26 	bl	8015298 <floor>
 800384c:	ec51 0b10 	vmov	r0, r1, d0
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	4b74      	ldr	r3, [pc, #464]	; (8003a28 <statemachine+0x10e0>)
 8003856:	f7fc fd19 	bl	800028c <__adddf3>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4610      	mov	r0, r2
 8003860:	4619      	mov	r1, r3
 8003862:	f7fd f9a1 	bl	8000ba8 <__aeabi_d2uiz>
 8003866:	4603      	mov	r3, r0
 8003868:	b2de      	uxtb	r6, r3
 800386a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800386c:	f7fc fe5a 	bl	8000524 <__aeabi_i2d>
 8003870:	a369      	add	r3, pc, #420	; (adr r3, 8003a18 <statemachine+0x10d0>)
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f7fc febf 	bl	80005f8 <__aeabi_dmul>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4610      	mov	r0, r2
 8003880:	4619      	mov	r1, r3
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	4b66      	ldr	r3, [pc, #408]	; (8003a20 <statemachine+0x10d8>)
 8003888:	f7fc ffe0 	bl	800084c <__aeabi_ddiv>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	ec43 2b17 	vmov	d7, r2, r3
 8003894:	eeb0 0a47 	vmov.f32	s0, s14
 8003898:	eef0 0a67 	vmov.f32	s1, s15
 800389c:	f011 fc60 	bl	8015160 <sin>
 80038a0:	ec51 0b10 	vmov	r0, r1, d0
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	4b61      	ldr	r3, [pc, #388]	; (8003a30 <statemachine+0x10e8>)
 80038aa:	f7fc fea5 	bl	80005f8 <__aeabi_dmul>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	ec43 2b17 	vmov	d7, r2, r3
 80038b6:	eeb0 0a47 	vmov.f32	s0, s14
 80038ba:	eef0 0a67 	vmov.f32	s1, s15
 80038be:	f011 fceb 	bl	8015298 <floor>
 80038c2:	ec51 0b10 	vmov	r0, r1, d0
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	4b58      	ldr	r3, [pc, #352]	; (8003a2c <statemachine+0x10e4>)
 80038cc:	f7fc fcde 	bl	800028c <__adddf3>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4610      	mov	r0, r2
 80038d6:	4619      	mov	r1, r3
 80038d8:	f7fd f966 	bl	8000ba8 <__aeabi_d2uiz>
 80038dc:	4603      	mov	r3, r0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2201      	movs	r2, #1
 80038e2:	9200      	str	r2, [sp, #0]
 80038e4:	4632      	mov	r2, r6
 80038e6:	4629      	mov	r1, r5
 80038e8:	4620      	mov	r0, r4
 80038ea:	f7fe fe29 	bl	8002540 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 80038ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f0:	3301      	adds	r3, #1
 80038f2:	653b      	str	r3, [r7, #80]	; 0x50
 80038f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	f77f af06 	ble.w	8003708 <statemachine+0xdc0>
					  }
					  if(BTN_B>=1){
 80038fc:	4b4d      	ldr	r3, [pc, #308]	; (8003a34 <statemachine+0x10ec>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	dd1e      	ble.n	8003942 <statemachine+0xffa>
					  	hrstate--;
 8003904:	4b4c      	ldr	r3, [pc, #304]	; (8003a38 <statemachine+0x10f0>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	3b01      	subs	r3, #1
 800390a:	b2da      	uxtb	r2, r3
 800390c:	4b4a      	ldr	r3, [pc, #296]	; (8003a38 <statemachine+0x10f0>)
 800390e:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 8003910:	4b48      	ldr	r3, [pc, #288]	; (8003a34 <statemachine+0x10ec>)
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]
					  }


					  break;
 8003916:	e014      	b.n	8003942 <statemachine+0xffa>

				  }

			  			 					}
			  			 	else{ //if the GPS doesn't have a fix, print a message
			  			 						char *str = (char*)malloc(sizeof(char)*20);
 8003918:	2014      	movs	r0, #20
 800391a:	f00c fed1 	bl	80106c0 <malloc>
 800391e:	4603      	mov	r3, r0
 8003920:	643b      	str	r3, [r7, #64]	; 0x40
			  			 						ssd1306_SetCursor(32, 44);
 8003922:	212c      	movs	r1, #44	; 0x2c
 8003924:	2020      	movs	r0, #32
 8003926:	f7fe fdf3 	bl	8002510 <ssd1306_SetCursor>
			  			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 800392a:	4a44      	ldr	r2, [pc, #272]	; (8003a3c <statemachine+0x10f4>)
 800392c:	2301      	movs	r3, #1
 800392e:	ca06      	ldmia	r2, {r1, r2}
 8003930:	4843      	ldr	r0, [pc, #268]	; (8003a40 <statemachine+0x10f8>)
 8003932:	f7fe fdc7 	bl	80024c4 <ssd1306_WriteString>
			  			 						free(str);
 8003936:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003938:	f00c feca 	bl	80106d0 <free>
 800393c:	e002      	b.n	8003944 <statemachine+0xffc>
					  break;
 800393e:	bf00      	nop
 8003940:	e000      	b.n	8003944 <statemachine+0xffc>
					  break;
 8003942:	bf00      	nop
			  			 	}
				  if(BTN_A>=1){
 8003944:	4b3f      	ldr	r3, [pc, #252]	; (8003a44 <statemachine+0x10fc>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	f340 82ab 	ble.w	8003ea4 <statemachine+0x155c>
			  		state++;
 800394e:	4b3e      	ldr	r3, [pc, #248]	; (8003a48 <statemachine+0x1100>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	3301      	adds	r3, #1
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4b3c      	ldr	r3, [pc, #240]	; (8003a48 <statemachine+0x1100>)
 8003958:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 800395a:	4b3a      	ldr	r3, [pc, #232]	; (8003a44 <statemachine+0x10fc>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8003960:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <statemachine+0x10ec>)
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8003966:	e29d      	b.n	8003ea4 <statemachine+0x155c>
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 8003968:	2000      	movs	r0, #0
 800396a:	f7fe fc8f 	bl	800228c <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 800396e:	4937      	ldr	r1, [pc, #220]	; (8003a4c <statemachine+0x1104>)
 8003970:	4837      	ldr	r0, [pc, #220]	; (8003a50 <statemachine+0x1108>)
 8003972:	f7fe fb37 	bl	8001fe4 <nmea_parse>
			  if(myData.fix == 1){ //if the GPS has a fix, print the data
 8003976:	4b36      	ldr	r3, [pc, #216]	; (8003a50 <statemachine+0x1108>)
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	2b01      	cmp	r3, #1
 800397c:	d172      	bne.n	8003a64 <statemachine+0x111c>
			 			 						char * str = (char*)malloc(sizeof(char)*20);
 800397e:	2014      	movs	r0, #20
 8003980:	f00c fe9e 	bl	80106c0 <malloc>
 8003984:	4603      	mov	r3, r0
 8003986:	647b      	str	r3, [r7, #68]	; 0x44
			 			 						snprintf(str,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8003988:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <statemachine+0x1108>)
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	4618      	mov	r0, r3
 800398e:	f7fc fddb 	bl	8000548 <__aeabi_f2d>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	e9cd 2300 	strd	r2, r3, [sp]
 800399a:	4a2e      	ldr	r2, [pc, #184]	; (8003a54 <statemachine+0x110c>)
 800399c:	210f      	movs	r1, #15
 800399e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80039a0:	f00e fd88 	bl	80124b4 <sniprintf>
			 			 						ssd1306_SetCursor(32, 32);
 80039a4:	2120      	movs	r1, #32
 80039a6:	2020      	movs	r0, #32
 80039a8:	f7fe fdb2 	bl	8002510 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80039ac:	4a23      	ldr	r2, [pc, #140]	; (8003a3c <statemachine+0x10f4>)
 80039ae:	2301      	movs	r3, #1
 80039b0:	ca06      	ldmia	r2, {r1, r2}
 80039b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80039b4:	f7fe fd86 	bl	80024c4 <ssd1306_WriteString>
			 			 						snprintf(str,15, "SatNb :%d",myData.satelliteCount);
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <statemachine+0x1108>)
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	4a26      	ldr	r2, [pc, #152]	; (8003a58 <statemachine+0x1110>)
 80039be:	210f      	movs	r1, #15
 80039c0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80039c2:	f00e fd77 	bl	80124b4 <sniprintf>
			 			 						ssd1306_SetCursor(32, 42);
 80039c6:	212a      	movs	r1, #42	; 0x2a
 80039c8:	2020      	movs	r0, #32
 80039ca:	f7fe fda1 	bl	8002510 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80039ce:	4a1b      	ldr	r2, [pc, #108]	; (8003a3c <statemachine+0x10f4>)
 80039d0:	2301      	movs	r3, #1
 80039d2:	ca06      	ldmia	r2, {r1, r2}
 80039d4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80039d6:	f7fe fd75 	bl	80024c4 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 80039da:	2132      	movs	r1, #50	; 0x32
 80039dc:	2020      	movs	r0, #32
 80039de:	f7fe fd97 	bl	8002510 <ssd1306_SetCursor>
			 			 						snprintf(str,15,  "T=%0.2fC",temp);
 80039e2:	4b1e      	ldr	r3, [pc, #120]	; (8003a5c <statemachine+0x1114>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fc fdae 	bl	8000548 <__aeabi_f2d>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	e9cd 2300 	strd	r2, r3, [sp]
 80039f4:	4a1a      	ldr	r2, [pc, #104]	; (8003a60 <statemachine+0x1118>)
 80039f6:	210f      	movs	r1, #15
 80039f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80039fa:	f00e fd5b 	bl	80124b4 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 80039fe:	4a0f      	ldr	r2, [pc, #60]	; (8003a3c <statemachine+0x10f4>)
 8003a00:	2301      	movs	r3, #1
 8003a02:	ca06      	ldmia	r2, {r1, r2}
 8003a04:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003a06:	f7fe fd5d 	bl	80024c4 <ssd1306_WriteString>
			 			 						free(str);
 8003a0a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003a0c:	f00c fe60 	bl	80106d0 <free>
 8003a10:	e05c      	b.n	8003acc <statemachine+0x1184>
 8003a12:	bf00      	nop
 8003a14:	f3af 8000 	nop.w
 8003a18:	54442d18 	.word	0x54442d18
 8003a1c:	400921fb 	.word	0x400921fb
 8003a20:	40180000 	.word	0x40180000
 8003a24:	40240000 	.word	0x40240000
 8003a28:	40500000 	.word	0x40500000
 8003a2c:	40480000 	.word	0x40480000
 8003a30:	40280000 	.word	0x40280000
 8003a34:	2000086c 	.word	0x2000086c
 8003a38:	20000871 	.word	0x20000871
 8003a3c:	20000008 	.word	0x20000008
 8003a40:	080164b4 	.word	0x080164b4
 8003a44:	20000868 	.word	0x20000868
 8003a48:	20000870 	.word	0x20000870
 8003a4c:	20000624 	.word	0x20000624
 8003a50:	20000828 	.word	0x20000828
 8003a54:	08016590 	.word	0x08016590
 8003a58:	0801659c 	.word	0x0801659c
 8003a5c:	20000884 	.word	0x20000884
 8003a60:	080165a8 	.word	0x080165a8
			 			 					}
			 			 	else{ //if the GPS doesn't have a fix, print a message
			 			 						char *str = (char*)malloc(sizeof(char)*20);
 8003a64:	2014      	movs	r0, #20
 8003a66:	f00c fe2b 	bl	80106c0 <malloc>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	64bb      	str	r3, [r7, #72]	; 0x48
			 			 						ssd1306_SetCursor(32, 32);
 8003a6e:	2120      	movs	r1, #32
 8003a70:	2020      	movs	r0, #32
 8003a72:	f7fe fd4d 	bl	8002510 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("INFO", Font_6x8, White);
 8003a76:	4a9a      	ldr	r2, [pc, #616]	; (8003ce0 <statemachine+0x1398>)
 8003a78:	2301      	movs	r3, #1
 8003a7a:	ca06      	ldmia	r2, {r1, r2}
 8003a7c:	4899      	ldr	r0, [pc, #612]	; (8003ce4 <statemachine+0x139c>)
 8003a7e:	f7fe fd21 	bl	80024c4 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 41);
 8003a82:	2129      	movs	r1, #41	; 0x29
 8003a84:	2020      	movs	r0, #32
 8003a86:	f7fe fd43 	bl	8002510 <ssd1306_SetCursor>
			 			 						ssd1306_WriteString("Wait GPS", Font_6x8, White);
 8003a8a:	4a95      	ldr	r2, [pc, #596]	; (8003ce0 <statemachine+0x1398>)
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	ca06      	ldmia	r2, {r1, r2}
 8003a90:	4895      	ldr	r0, [pc, #596]	; (8003ce8 <statemachine+0x13a0>)
 8003a92:	f7fe fd17 	bl	80024c4 <ssd1306_WriteString>
			 			 						ssd1306_SetCursor(32, 50);
 8003a96:	2132      	movs	r1, #50	; 0x32
 8003a98:	2020      	movs	r0, #32
 8003a9a:	f7fe fd39 	bl	8002510 <ssd1306_SetCursor>
			 			 						snprintf(str,15, "T=%0.2fC",temp);
 8003a9e:	4b93      	ldr	r3, [pc, #588]	; (8003cec <statemachine+0x13a4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fc fd50 	bl	8000548 <__aeabi_f2d>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	e9cd 2300 	strd	r2, r3, [sp]
 8003ab0:	4a8f      	ldr	r2, [pc, #572]	; (8003cf0 <statemachine+0x13a8>)
 8003ab2:	210f      	movs	r1, #15
 8003ab4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003ab6:	f00e fcfd 	bl	80124b4 <sniprintf>
			 			 						ssd1306_WriteString(str, Font_6x8, White);
 8003aba:	4a89      	ldr	r2, [pc, #548]	; (8003ce0 <statemachine+0x1398>)
 8003abc:	2301      	movs	r3, #1
 8003abe:	ca06      	ldmia	r2, {r1, r2}
 8003ac0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003ac2:	f7fe fcff 	bl	80024c4 <ssd1306_WriteString>
			 			 						free(str);
 8003ac6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003ac8:	f00c fe02 	bl	80106d0 <free>
			 			 					}
			  if(BTN_A>=1){
 8003acc:	4b89      	ldr	r3, [pc, #548]	; (8003cf4 <statemachine+0x13ac>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f340 81e9 	ble.w	8003ea8 <statemachine+0x1560>
			  		state++;
 8003ad6:	4b88      	ldr	r3, [pc, #544]	; (8003cf8 <statemachine+0x13b0>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	3301      	adds	r3, #1
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	4b86      	ldr	r3, [pc, #536]	; (8003cf8 <statemachine+0x13b0>)
 8003ae0:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 8003ae2:	4b84      	ldr	r3, [pc, #528]	; (8003cf4 <statemachine+0x13ac>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8003ae8:	4b84      	ldr	r3, [pc, #528]	; (8003cfc <statemachine+0x13b4>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]
			  		}
			  break;
 8003aee:	e1db      	b.n	8003ea8 <statemachine+0x1560>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8003af0:	2000      	movs	r0, #0
 8003af2:	f7fe fbcb 	bl	800228c <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 8003af6:	2120      	movs	r1, #32
 8003af8:	2020      	movs	r0, #32
 8003afa:	f7fe fd09 	bl	8002510 <ssd1306_SetCursor>
			  char *str = (char*)malloc(sizeof(char)*20);
 8003afe:	2014      	movs	r0, #20
 8003b00:	f00c fdde 	bl	80106c0 <malloc>
 8003b04:	4603      	mov	r3, r0
 8003b06:	64fb      	str	r3, [r7, #76]	; 0x4c
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8003b08:	4a75      	ldr	r2, [pc, #468]	; (8003ce0 <statemachine+0x1398>)
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	ca06      	ldmia	r2, {r1, r2}
 8003b0e:	487c      	ldr	r0, [pc, #496]	; (8003d00 <statemachine+0x13b8>)
 8003b10:	f7fe fcd8 	bl	80024c4 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 8003b14:	2128      	movs	r1, #40	; 0x28
 8003b16:	2020      	movs	r0, #32
 8003b18:	f7fe fcfa 	bl	8002510 <ssd1306_SetCursor>

			  switch(chronostate){
 8003b1c:	4b79      	ldr	r3, [pc, #484]	; (8003d04 <statemachine+0x13bc>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d038      	beq.n	8003b96 <statemachine+0x124e>
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	dc4f      	bgt.n	8003bc8 <statemachine+0x1280>
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <statemachine+0x11ea>
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d01d      	beq.n	8003b6c <statemachine+0x1224>
 8003b30:	e04a      	b.n	8003bc8 <statemachine+0x1280>
			  case STATE_RESET:
				  min=0;
 8003b32:	4b75      	ldr	r3, [pc, #468]	; (8003d08 <statemachine+0x13c0>)
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8003b3a:	4b74      	ldr	r3, [pc, #464]	; (8003d0c <statemachine+0x13c4>)
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8003b42:	4b73      	ldr	r3, [pc, #460]	; (8003d10 <statemachine+0x13c8>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
				  	 if(BTN_B>=1){
 8003b48:	4b6c      	ldr	r3, [pc, #432]	; (8003cfc <statemachine+0x13b4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	dd36      	ble.n	8003bbe <statemachine+0x1276>
				  		chronostate++;
 8003b50:	4b6c      	ldr	r3, [pc, #432]	; (8003d04 <statemachine+0x13bc>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	4b6a      	ldr	r3, [pc, #424]	; (8003d04 <statemachine+0x13bc>)
 8003b5a:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8003b5c:	4b67      	ldr	r3, [pc, #412]	; (8003cfc <statemachine+0x13b4>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8003b62:	4b6c      	ldr	r3, [pc, #432]	; (8003d14 <statemachine+0x13cc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a6c      	ldr	r2, [pc, #432]	; (8003d18 <statemachine+0x13d0>)
 8003b68:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8003b6a:	e028      	b.n	8003bbe <statemachine+0x1276>
			  case STATE_RUN:
				  calctime=uwTick-starttime;
 8003b6c:	4b69      	ldr	r3, [pc, #420]	; (8003d14 <statemachine+0x13cc>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4b69      	ldr	r3, [pc, #420]	; (8003d18 <statemachine+0x13d0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	4a66      	ldr	r2, [pc, #408]	; (8003d10 <statemachine+0x13c8>)
 8003b78:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8003b7a:	4b60      	ldr	r3, [pc, #384]	; (8003cfc <statemachine+0x13b4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	dd1f      	ble.n	8003bc2 <statemachine+0x127a>
				  		chronostate++;
 8003b82:	4b60      	ldr	r3, [pc, #384]	; (8003d04 <statemachine+0x13bc>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	3301      	adds	r3, #1
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	4b5e      	ldr	r3, [pc, #376]	; (8003d04 <statemachine+0x13bc>)
 8003b8c:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8003b8e:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <statemachine+0x13b4>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8003b94:	e015      	b.n	8003bc2 <statemachine+0x127a>
			  case STATE_PAUSE:
				  if(BTN_B>=1){
 8003b96:	4b59      	ldr	r3, [pc, #356]	; (8003cfc <statemachine+0x13b4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	dd13      	ble.n	8003bc6 <statemachine+0x127e>
				  			chronostate--;
 8003b9e:	4b59      	ldr	r3, [pc, #356]	; (8003d04 <statemachine+0x13bc>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4b57      	ldr	r3, [pc, #348]	; (8003d04 <statemachine+0x13bc>)
 8003ba8:	701a      	strb	r2, [r3, #0]
				  			chronostate--;
 8003baa:	4b56      	ldr	r3, [pc, #344]	; (8003d04 <statemachine+0x13bc>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	4b54      	ldr	r3, [pc, #336]	; (8003d04 <statemachine+0x13bc>)
 8003bb4:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8003bb6:	4b51      	ldr	r3, [pc, #324]	; (8003cfc <statemachine+0x13b4>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
			 }

				  break;
 8003bbc:	e003      	b.n	8003bc6 <statemachine+0x127e>
				  break;
 8003bbe:	bf00      	nop
 8003bc0:	e002      	b.n	8003bc8 <statemachine+0x1280>
				  break;
 8003bc2:	bf00      	nop
 8003bc4:	e000      	b.n	8003bc8 <statemachine+0x1280>
				  break;
 8003bc6:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8003bc8:	4b51      	ldr	r3, [pc, #324]	; (8003d10 <statemachine+0x13c8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd4:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8003d1c <statemachine+0x13d4>
 8003bd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003bdc:	ee16 0a90 	vmov	r0, s13
 8003be0:	f7fc fcb2 	bl	8000548 <__aeabi_f2d>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	ec43 2b10 	vmov	d0, r2, r3
 8003bec:	f011 fb54 	bl	8015298 <floor>
 8003bf0:	ec53 2b10 	vmov	r2, r3, d0
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f7fc fff6 	bl	8000be8 <__aeabi_d2f>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4a42      	ldr	r2, [pc, #264]	; (8003d08 <statemachine+0x13c0>)
 8003c00:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8003c02:	4b43      	ldr	r3, [pc, #268]	; (8003d10 <statemachine+0x13c8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c0e:	4b3e      	ldr	r3, [pc, #248]	; (8003d08 <statemachine+0x13c0>)
 8003c10:	edd3 7a00 	vldr	s15, [r3]
 8003c14:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003d1c <statemachine+0x13d4>
 8003c18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c20:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8003d20 <statemachine+0x13d8>
 8003c24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c28:	4b38      	ldr	r3, [pc, #224]	; (8003d0c <statemachine+0x13c4>)
 8003c2a:	edc3 7a00 	vstr	s15, [r3]
			  snprintf(str,15, "%0.0fmin",min);
 8003c2e:	4b36      	ldr	r3, [pc, #216]	; (8003d08 <statemachine+0x13c0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fc fc88 	bl	8000548 <__aeabi_f2d>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	e9cd 2300 	strd	r2, r3, [sp]
 8003c40:	4a38      	ldr	r2, [pc, #224]	; (8003d24 <statemachine+0x13dc>)
 8003c42:	210f      	movs	r1, #15
 8003c44:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003c46:	f00e fc35 	bl	80124b4 <sniprintf>
			  ssd1306_WriteString(str, Font_7x10, White);
 8003c4a:	4a37      	ldr	r2, [pc, #220]	; (8003d28 <statemachine+0x13e0>)
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	ca06      	ldmia	r2, {r1, r2}
 8003c50:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003c52:	f7fe fc37 	bl	80024c4 <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8003c56:	2132      	movs	r1, #50	; 0x32
 8003c58:	2020      	movs	r0, #32
 8003c5a:	f7fe fc59 	bl	8002510 <ssd1306_SetCursor>
			  snprintf(str,15, "%0.3fsec",seconde);
 8003c5e:	4b2b      	ldr	r3, [pc, #172]	; (8003d0c <statemachine+0x13c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fc fc70 	bl	8000548 <__aeabi_f2d>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	e9cd 2300 	strd	r2, r3, [sp]
 8003c70:	4a2e      	ldr	r2, [pc, #184]	; (8003d2c <statemachine+0x13e4>)
 8003c72:	210f      	movs	r1, #15
 8003c74:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003c76:	f00e fc1d 	bl	80124b4 <sniprintf>
			  ssd1306_WriteString(str, Font_6x8, White);
 8003c7a:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <statemachine+0x1398>)
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	ca06      	ldmia	r2, {r1, r2}
 8003c80:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003c82:	f7fe fc1f 	bl	80024c4 <ssd1306_WriteString>
			  free(str);
 8003c86:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003c88:	f00c fd22 	bl	80106d0 <free>


			  if(BTN_A>=1){
 8003c8c:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <statemachine+0x13ac>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f340 810b 	ble.w	8003eac <statemachine+0x1564>
			 	state++;
 8003c96:	4b18      	ldr	r3, [pc, #96]	; (8003cf8 <statemachine+0x13b0>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	4b16      	ldr	r3, [pc, #88]	; (8003cf8 <statemachine+0x13b0>)
 8003ca0:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <statemachine+0x13ac>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8003ca8:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <statemachine+0x13b4>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]


	}
			  break;
 8003cae:	e0fd      	b.n	8003eac <statemachine+0x1564>
			  case STATE_SPEEDTEST:
				  ssd1306_Fill(Black);
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	f7fe faeb 	bl	800228c <ssd1306_Fill>
				  ssd1306_SetCursor(32, 32);
 8003cb6:	2120      	movs	r1, #32
 8003cb8:	2020      	movs	r0, #32
 8003cba:	f7fe fc29 	bl	8002510 <ssd1306_SetCursor>
				  ssd1306_WriteString("clavierusb", Font_6x8, White);
 8003cbe:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <statemachine+0x1398>)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	ca06      	ldmia	r2, {r1, r2}
 8003cc4:	481a      	ldr	r0, [pc, #104]	; (8003d30 <statemachine+0x13e8>)
 8003cc6:	f7fe fbfd 	bl	80024c4 <ssd1306_WriteString>
				  ssd1306_SetCursor(32, 40);
 8003cca:	2128      	movs	r1, #40	; 0x28
 8003ccc:	2020      	movs	r0, #32
 8003cce:	f7fe fc1f 	bl	8002510 <ssd1306_SetCursor>

				  switch(keyboardstate){
 8003cd2:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <statemachine+0x13ec>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d02e      	beq.n	8003d38 <statemachine+0x13f0>
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d07a      	beq.n	8003dd4 <statemachine+0x148c>
 8003cde:	e090      	b.n	8003e02 <statemachine+0x14ba>
 8003ce0:	20000008 	.word	0x20000008
 8003ce4:	080165b4 	.word	0x080165b4
 8003ce8:	080164b4 	.word	0x080164b4
 8003cec:	20000884 	.word	0x20000884
 8003cf0:	080165a8 	.word	0x080165a8
 8003cf4:	20000868 	.word	0x20000868
 8003cf8:	20000870 	.word	0x20000870
 8003cfc:	2000086c 	.word	0x2000086c
 8003d00:	080165bc 	.word	0x080165bc
 8003d04:	20000874 	.word	0x20000874
 8003d08:	20000cd8 	.word	0x20000cd8
 8003d0c:	20000cd4 	.word	0x20000cd4
 8003d10:	20000ce0 	.word	0x20000ce0
 8003d14:	20000d08 	.word	0x20000d08
 8003d18:	20000cdc 	.word	0x20000cdc
 8003d1c:	476a6000 	.word	0x476a6000
 8003d20:	447a0000 	.word	0x447a0000
 8003d24:	080165c4 	.word	0x080165c4
 8003d28:	20000010 	.word	0x20000010
 8003d2c:	080165d0 	.word	0x080165d0
 8003d30:	080165dc 	.word	0x080165dc
 8003d34:	20000875 	.word	0x20000875

				  case STATE_MARCHE:
					  ssd1306_WriteString("NIGGER", Font_6x8, White);
 8003d38:	4a62      	ldr	r2, [pc, #392]	; (8003ec4 <statemachine+0x157c>)
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	ca06      	ldmia	r2, {r1, r2}
 8003d3e:	4862      	ldr	r0, [pc, #392]	; (8003ec8 <statemachine+0x1580>)
 8003d40:	f7fe fbc0 	bl	80024c4 <ssd1306_WriteString>
					  keyboardhid.MODIFIER = 0x02;
 8003d44:	4b61      	ldr	r3, [pc, #388]	; (8003ecc <statemachine+0x1584>)
 8003d46:	2202      	movs	r2, #2
 8003d48:	701a      	strb	r2, [r3, #0]
					  keyboardhid.KEYCODE1 = 0x11;
 8003d4a:	4b60      	ldr	r3, [pc, #384]	; (8003ecc <statemachine+0x1584>)
 8003d4c:	2211      	movs	r2, #17
 8003d4e:	709a      	strb	r2, [r3, #2]
					  keyboardhid.KEYCODE2 = 0x0C;
 8003d50:	4b5e      	ldr	r3, [pc, #376]	; (8003ecc <statemachine+0x1584>)
 8003d52:	220c      	movs	r2, #12
 8003d54:	70da      	strb	r2, [r3, #3]
					  keyboardhid.KEYCODE3 = 0x0A;
 8003d56:	4b5d      	ldr	r3, [pc, #372]	; (8003ecc <statemachine+0x1584>)
 8003d58:	220a      	movs	r2, #10
 8003d5a:	711a      	strb	r2, [r3, #4]
					  keyboardhid.KEYCODE4 = 0x08;
 8003d5c:	4b5b      	ldr	r3, [pc, #364]	; (8003ecc <statemachine+0x1584>)
 8003d5e:	2208      	movs	r2, #8
 8003d60:	715a      	strb	r2, [r3, #5]
					  keyboardhid.KEYCODE5 = 0x15;
 8003d62:	4b5a      	ldr	r3, [pc, #360]	; (8003ecc <statemachine+0x1584>)
 8003d64:	2215      	movs	r2, #21
 8003d66:	719a      	strb	r2, [r3, #6]
					  keyboardhid.KEYCODE6 = 0x58;
 8003d68:	4b58      	ldr	r3, [pc, #352]	; (8003ecc <statemachine+0x1584>)
 8003d6a:	2258      	movs	r2, #88	; 0x58
 8003d6c:	71da      	strb	r2, [r3, #7]
					  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8003d6e:	2208      	movs	r2, #8
 8003d70:	4956      	ldr	r1, [pc, #344]	; (8003ecc <statemachine+0x1584>)
 8003d72:	4857      	ldr	r0, [pc, #348]	; (8003ed0 <statemachine+0x1588>)
 8003d74:	f00a fcea 	bl	800e74c <USBD_HID_SendReport>
					  HAL_Delay (50);
 8003d78:	2032      	movs	r0, #50	; 0x32
 8003d7a:	f000 fcc7 	bl	800470c <HAL_Delay>
					  keyboardhid.MODIFIER = 0x00;
 8003d7e:	4b53      	ldr	r3, [pc, #332]	; (8003ecc <statemachine+0x1584>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
					  keyboardhid.KEYCODE1 = 0x00;
 8003d84:	4b51      	ldr	r3, [pc, #324]	; (8003ecc <statemachine+0x1584>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	709a      	strb	r2, [r3, #2]
					  keyboardhid.KEYCODE2 = 0x00;
 8003d8a:	4b50      	ldr	r3, [pc, #320]	; (8003ecc <statemachine+0x1584>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	70da      	strb	r2, [r3, #3]
					  keyboardhid.KEYCODE3 = 0x00;
 8003d90:	4b4e      	ldr	r3, [pc, #312]	; (8003ecc <statemachine+0x1584>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	711a      	strb	r2, [r3, #4]
					  keyboardhid.KEYCODE4 = 0x00;
 8003d96:	4b4d      	ldr	r3, [pc, #308]	; (8003ecc <statemachine+0x1584>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	715a      	strb	r2, [r3, #5]
					  keyboardhid.KEYCODE5 = 0x00;
 8003d9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ecc <statemachine+0x1584>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	719a      	strb	r2, [r3, #6]
					  keyboardhid.KEYCODE6 = 0x00;
 8003da2:	4b4a      	ldr	r3, [pc, #296]	; (8003ecc <statemachine+0x1584>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	71da      	strb	r2, [r3, #7]
					  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof (keyboardhid));
 8003da8:	2208      	movs	r2, #8
 8003daa:	4948      	ldr	r1, [pc, #288]	; (8003ecc <statemachine+0x1584>)
 8003dac:	4848      	ldr	r0, [pc, #288]	; (8003ed0 <statemachine+0x1588>)
 8003dae:	f00a fccd 	bl	800e74c <USBD_HID_SendReport>
					  HAL_Delay (50);
 8003db2:	2032      	movs	r0, #50	; 0x32
 8003db4:	f000 fcaa 	bl	800470c <HAL_Delay>





					  if(BTN_B>=1){
 8003db8:	4b46      	ldr	r3, [pc, #280]	; (8003ed4 <statemachine+0x158c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	dd1d      	ble.n	8003dfc <statemachine+0x14b4>
						  keyboardstate++;
 8003dc0:	4b45      	ldr	r3, [pc, #276]	; (8003ed8 <statemachine+0x1590>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	4b43      	ldr	r3, [pc, #268]	; (8003ed8 <statemachine+0x1590>)
 8003dca:	701a      	strb	r2, [r3, #0]
						  BTN_B=0;
 8003dcc:	4b41      	ldr	r3, [pc, #260]	; (8003ed4 <statemachine+0x158c>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
					  }


					  break;
 8003dd2:	e013      	b.n	8003dfc <statemachine+0x14b4>
				  case STATE_REPOS:

					  ssd1306_WriteString("repos", Font_6x8, White);
 8003dd4:	4a3b      	ldr	r2, [pc, #236]	; (8003ec4 <statemachine+0x157c>)
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	ca06      	ldmia	r2, {r1, r2}
 8003dda:	4840      	ldr	r0, [pc, #256]	; (8003edc <statemachine+0x1594>)
 8003ddc:	f7fe fb72 	bl	80024c4 <ssd1306_WriteString>

					  if(BTN_B>=1){
 8003de0:	4b3c      	ldr	r3, [pc, #240]	; (8003ed4 <statemachine+0x158c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	dd0b      	ble.n	8003e00 <statemachine+0x14b8>
						  keyboardstate--;
 8003de8:	4b3b      	ldr	r3, [pc, #236]	; (8003ed8 <statemachine+0x1590>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	4b39      	ldr	r3, [pc, #228]	; (8003ed8 <statemachine+0x1590>)
 8003df2:	701a      	strb	r2, [r3, #0]
						  BTN_B=0;
 8003df4:	4b37      	ldr	r3, [pc, #220]	; (8003ed4 <statemachine+0x158c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
					  }


					  break;
 8003dfa:	e001      	b.n	8003e00 <statemachine+0x14b8>
					  break;
 8003dfc:	bf00      	nop
 8003dfe:	e000      	b.n	8003e02 <statemachine+0x14ba>
					  break;
 8003e00:	bf00      	nop
				  }

				  if(BTN_A>=1){
 8003e02:	4b37      	ldr	r3, [pc, #220]	; (8003ee0 <statemachine+0x1598>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	dd52      	ble.n	8003eb0 <statemachine+0x1568>
				  				  				  			 	state++;
 8003e0a:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <statemachine+0x159c>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4b34      	ldr	r3, [pc, #208]	; (8003ee4 <statemachine+0x159c>)
 8003e14:	701a      	strb	r2, [r3, #0]
				  				  				  			 	BTN_A=0;
 8003e16:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <statemachine+0x1598>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
				  				  				  			 	BTN_B=0;
 8003e1c:	4b2d      	ldr	r3, [pc, #180]	; (8003ed4 <statemachine+0x158c>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]





				  break;
 8003e22:	e045      	b.n	8003eb0 <statemachine+0x1568>
			  case STATE_MEMTEST:
				  ssd1306_Fill(Black);
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7fe fa31 	bl	800228c <ssd1306_Fill>
				  ssd1306_SetCursor(32, 32);
 8003e2a:	2120      	movs	r1, #32
 8003e2c:	2020      	movs	r0, #32
 8003e2e:	f7fe fb6f 	bl	8002510 <ssd1306_SetCursor>
				  ssd1306_WriteString("memtest", Font_6x8, White);
 8003e32:	4a24      	ldr	r2, [pc, #144]	; (8003ec4 <statemachine+0x157c>)
 8003e34:	2301      	movs	r3, #1
 8003e36:	ca06      	ldmia	r2, {r1, r2}
 8003e38:	482b      	ldr	r0, [pc, #172]	; (8003ee8 <statemachine+0x15a0>)
 8003e3a:	f7fe fb43 	bl	80024c4 <ssd1306_WriteString>
				  if(BTN_A>=1){
 8003e3e:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <statemachine+0x1598>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	dd36      	ble.n	8003eb4 <statemachine+0x156c>
				  				  			 	state--;
 8003e46:	4b27      	ldr	r3, [pc, #156]	; (8003ee4 <statemachine+0x159c>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4b25      	ldr	r3, [pc, #148]	; (8003ee4 <statemachine+0x159c>)
 8003e50:	701a      	strb	r2, [r3, #0]
				  				  			 	state--;
 8003e52:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <statemachine+0x159c>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b2da      	uxtb	r2, r3
 8003e5a:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <statemachine+0x159c>)
 8003e5c:	701a      	strb	r2, [r3, #0]
				  				  			 	state--;
 8003e5e:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <statemachine+0x159c>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	4b1f      	ldr	r3, [pc, #124]	; (8003ee4 <statemachine+0x159c>)
 8003e68:	701a      	strb	r2, [r3, #0]
				  				  			 	state--;
 8003e6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ee4 <statemachine+0x159c>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	4b1c      	ldr	r3, [pc, #112]	; (8003ee4 <statemachine+0x159c>)
 8003e74:	701a      	strb	r2, [r3, #0]
				  				  			 	state--;
 8003e76:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <statemachine+0x159c>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <statemachine+0x159c>)
 8003e80:	701a      	strb	r2, [r3, #0]
				  				  			 	state--;
 8003e82:	4b18      	ldr	r3, [pc, #96]	; (8003ee4 <statemachine+0x159c>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <statemachine+0x159c>)
 8003e8c:	701a      	strb	r2, [r3, #0]
				  				  			 	BTN_A=0;
 8003e8e:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <statemachine+0x1598>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
				  				  			 	BTN_B=0;
 8003e94:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <statemachine+0x158c>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
				  				  	}




				  break;
 8003e9a:	e00b      	b.n	8003eb4 <statemachine+0x156c>
				  break;
 8003e9c:	bf00      	nop
 8003e9e:	e00a      	b.n	8003eb6 <statemachine+0x156e>
			  break;
 8003ea0:	bf00      	nop
 8003ea2:	e008      	b.n	8003eb6 <statemachine+0x156e>
			  break;
 8003ea4:	bf00      	nop
 8003ea6:	e006      	b.n	8003eb6 <statemachine+0x156e>
			  break;
 8003ea8:	bf00      	nop
 8003eaa:	e004      	b.n	8003eb6 <statemachine+0x156e>
			  break;
 8003eac:	bf00      	nop
 8003eae:	e002      	b.n	8003eb6 <statemachine+0x156e>
				  break;
 8003eb0:	bf00      	nop
 8003eb2:	e000      	b.n	8003eb6 <statemachine+0x156e>
				  break;
 8003eb4:	bf00      	nop


	}

return ;
 8003eb6:	bf00      	nop
 8003eb8:	bf00      	nop
}
 8003eba:	3764      	adds	r7, #100	; 0x64
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	ecbd 8b02 	vpop	{d8}
 8003ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ec4:	20000008 	.word	0x20000008
 8003ec8:	080165e8 	.word	0x080165e8
 8003ecc:	20000878 	.word	0x20000878
 8003ed0:	20000d10 	.word	0x20000d10
 8003ed4:	2000086c 	.word	0x2000086c
 8003ed8:	20000875 	.word	0x20000875
 8003edc:	080165f0 	.word	0x080165f0
 8003ee0:	20000868 	.word	0x20000868
 8003ee4:	20000870 	.word	0x20000870
 8003ee8:	080165f8 	.word	0x080165f8

08003eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ef2:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <HAL_MspInit+0x44>)
 8003ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef6:	4a0e      	ldr	r2, [pc, #56]	; (8003f30 <HAL_MspInit+0x44>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6613      	str	r3, [r2, #96]	; 0x60
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <HAL_MspInit+0x44>)
 8003f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	607b      	str	r3, [r7, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <HAL_MspInit+0x44>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	4a08      	ldr	r2, [pc, #32]	; (8003f30 <HAL_MspInit+0x44>)
 8003f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6593      	str	r3, [r2, #88]	; 0x58
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_MspInit+0x44>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000

08003f34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a22      	ldr	r2, [pc, #136]	; (8003fcc <HAL_ADC_MspInit+0x98>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d13e      	bne.n	8003fc4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003f46:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <HAL_ADC_MspInit+0x9c>)
 8003f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4a:	4a21      	ldr	r2, [pc, #132]	; (8003fd0 <HAL_ADC_MspInit+0x9c>)
 8003f4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f52:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <HAL_ADC_MspInit+0x9c>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003f5e:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <HAL_ADC_MspInit+0xa0>)
 8003f60:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <HAL_ADC_MspInit+0xa4>)
 8003f62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <HAL_ADC_MspInit+0xa0>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <HAL_ADC_MspInit+0xa0>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f70:	4b18      	ldr	r3, [pc, #96]	; (8003fd4 <HAL_ADC_MspInit+0xa0>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003f76:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <HAL_ADC_MspInit+0xa0>)
 8003f78:	2280      	movs	r2, #128	; 0x80
 8003f7a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f7c:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <HAL_ADC_MspInit+0xa0>)
 8003f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f82:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f84:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <HAL_ADC_MspInit+0xa0>)
 8003f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f8a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003f8c:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <HAL_ADC_MspInit+0xa0>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <HAL_ADC_MspInit+0xa0>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f98:	480e      	ldr	r0, [pc, #56]	; (8003fd4 <HAL_ADC_MspInit+0xa0>)
 8003f9a:	f001 ff8d 	bl	8005eb8 <HAL_DMA_Init>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_ADC_MspInit+0x74>
    {
      Error_Handler();
 8003fa4:	f7fd fd04 	bl	80019b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <HAL_ADC_MspInit+0xa0>)
 8003fac:	64da      	str	r2, [r3, #76]	; 0x4c
 8003fae:	4a09      	ldr	r2, [pc, #36]	; (8003fd4 <HAL_ADC_MspInit+0xa0>)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	2012      	movs	r0, #18
 8003fba:	f001 ff46 	bl	8005e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003fbe:	2012      	movs	r0, #18
 8003fc0:	f001 ff5f 	bl	8005e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	50040000 	.word	0x50040000
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	20000388 	.word	0x20000388
 8003fd8:	40020008 	.word	0x40020008

08003fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b0a2      	sub	sp, #136	; 0x88
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	609a      	str	r2, [r3, #8]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ff4:	f107 0320 	add.w	r3, r7, #32
 8003ff8:	2254      	movs	r2, #84	; 0x54
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f00e faf0 	bl	80125e2 <memset>
  if(hi2c->Instance==I2C1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a4f      	ldr	r2, [pc, #316]	; (8004144 <HAL_I2C_MspInit+0x168>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d13a      	bne.n	8004082 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800400c:	2340      	movs	r3, #64	; 0x40
 800400e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004010:	2300      	movs	r3, #0
 8004012:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004014:	f107 0320 	add.w	r3, r7, #32
 8004018:	4618      	mov	r0, r3
 800401a:	f005 fc27 	bl	800986c <HAL_RCCEx_PeriphCLKConfig>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004024:	f7fd fcc4 	bl	80019b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004028:	4b47      	ldr	r3, [pc, #284]	; (8004148 <HAL_I2C_MspInit+0x16c>)
 800402a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402c:	4a46      	ldr	r2, [pc, #280]	; (8004148 <HAL_I2C_MspInit+0x16c>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004034:	4b44      	ldr	r3, [pc, #272]	; (8004148 <HAL_I2C_MspInit+0x16c>)
 8004036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004040:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004044:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004046:	2312      	movs	r3, #18
 8004048:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404a:	2300      	movs	r3, #0
 800404c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404e:	2303      	movs	r3, #3
 8004050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004054:	2304      	movs	r3, #4
 8004056:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800405a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800405e:	4619      	mov	r1, r3
 8004060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004064:	f002 f9aa 	bl	80063bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004068:	4b37      	ldr	r3, [pc, #220]	; (8004148 <HAL_I2C_MspInit+0x16c>)
 800406a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406c:	4a36      	ldr	r2, [pc, #216]	; (8004148 <HAL_I2C_MspInit+0x16c>)
 800406e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004072:	6593      	str	r3, [r2, #88]	; 0x58
 8004074:	4b34      	ldr	r3, [pc, #208]	; (8004148 <HAL_I2C_MspInit+0x16c>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004080:	e05c      	b.n	800413c <HAL_I2C_MspInit+0x160>
  else if(hi2c->Instance==I2C3)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a31      	ldr	r2, [pc, #196]	; (800414c <HAL_I2C_MspInit+0x170>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d157      	bne.n	800413c <HAL_I2C_MspInit+0x160>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800408c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004090:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004092:	2300      	movs	r3, #0
 8004094:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004096:	f107 0320 	add.w	r3, r7, #32
 800409a:	4618      	mov	r0, r3
 800409c:	f005 fbe6 	bl	800986c <HAL_RCCEx_PeriphCLKConfig>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80040a6:	f7fd fc83 	bl	80019b0 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040aa:	4b27      	ldr	r3, [pc, #156]	; (8004148 <HAL_I2C_MspInit+0x16c>)
 80040ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ae:	4a26      	ldr	r2, [pc, #152]	; (8004148 <HAL_I2C_MspInit+0x16c>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040b6:	4b24      	ldr	r3, [pc, #144]	; (8004148 <HAL_I2C_MspInit+0x16c>)
 80040b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040c2:	4b21      	ldr	r3, [pc, #132]	; (8004148 <HAL_I2C_MspInit+0x16c>)
 80040c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c6:	4a20      	ldr	r2, [pc, #128]	; (8004148 <HAL_I2C_MspInit+0x16c>)
 80040c8:	f043 0302 	orr.w	r3, r3, #2
 80040cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ce:	4b1e      	ldr	r3, [pc, #120]	; (8004148 <HAL_I2C_MspInit+0x16c>)
 80040d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040de:	2312      	movs	r3, #18
 80040e0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e6:	2303      	movs	r3, #3
 80040e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80040ec:	2304      	movs	r3, #4
 80040ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80040f6:	4619      	mov	r1, r3
 80040f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040fc:	f002 f95e 	bl	80063bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004100:	2310      	movs	r3, #16
 8004102:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004104:	2312      	movs	r3, #18
 8004106:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004108:	2300      	movs	r3, #0
 800410a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800410c:	2303      	movs	r3, #3
 800410e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004112:	2304      	movs	r3, #4
 8004114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004118:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800411c:	4619      	mov	r1, r3
 800411e:	480c      	ldr	r0, [pc, #48]	; (8004150 <HAL_I2C_MspInit+0x174>)
 8004120:	f002 f94c 	bl	80063bc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004124:	4b08      	ldr	r3, [pc, #32]	; (8004148 <HAL_I2C_MspInit+0x16c>)
 8004126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004128:	4a07      	ldr	r2, [pc, #28]	; (8004148 <HAL_I2C_MspInit+0x16c>)
 800412a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800412e:	6593      	str	r3, [r2, #88]	; 0x58
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_I2C_MspInit+0x16c>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004134:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	68fb      	ldr	r3, [r7, #12]
}
 800413c:	bf00      	nop
 800413e:	3788      	adds	r7, #136	; 0x88
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40005400 	.word	0x40005400
 8004148:	40021000 	.word	0x40021000
 800414c:	40005c00 	.word	0x40005c00
 8004150:	48000400 	.word	0x48000400

08004154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b09e      	sub	sp, #120	; 0x78
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800415c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	609a      	str	r2, [r3, #8]
 8004168:	60da      	str	r2, [r3, #12]
 800416a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800416c:	f107 0310 	add.w	r3, r7, #16
 8004170:	2254      	movs	r2, #84	; 0x54
 8004172:	2100      	movs	r1, #0
 8004174:	4618      	mov	r0, r3
 8004176:	f00e fa34 	bl	80125e2 <memset>
  if(huart->Instance==LPUART1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a38      	ldr	r2, [pc, #224]	; (8004260 <HAL_UART_MspInit+0x10c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d168      	bne.n	8004256 <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004184:	2320      	movs	r3, #32
 8004186:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004188:	2300      	movs	r3, #0
 800418a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800418c:	f107 0310 	add.w	r3, r7, #16
 8004190:	4618      	mov	r0, r3
 8004192:	f005 fb6b 	bl	800986c <HAL_RCCEx_PeriphCLKConfig>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800419c:	f7fd fc08 	bl	80019b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80041a0:	4b30      	ldr	r3, [pc, #192]	; (8004264 <HAL_UART_MspInit+0x110>)
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	4a2f      	ldr	r2, [pc, #188]	; (8004264 <HAL_UART_MspInit+0x110>)
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	65d3      	str	r3, [r2, #92]	; 0x5c
 80041ac:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <HAL_UART_MspInit+0x110>)
 80041ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b8:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <HAL_UART_MspInit+0x110>)
 80041ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041bc:	4a29      	ldr	r2, [pc, #164]	; (8004264 <HAL_UART_MspInit+0x110>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041c4:	4b27      	ldr	r3, [pc, #156]	; (8004264 <HAL_UART_MspInit+0x110>)
 80041c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80041d0:	230c      	movs	r3, #12
 80041d2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d4:	2302      	movs	r3, #2
 80041d6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041dc:	2303      	movs	r3, #3
 80041de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80041e0:	2308      	movs	r3, #8
 80041e2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80041e8:	4619      	mov	r1, r3
 80041ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041ee:	f002 f8e5 	bl	80063bc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 80041f2:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <HAL_UART_MspInit+0x114>)
 80041f4:	4a1d      	ldr	r2, [pc, #116]	; (800426c <HAL_UART_MspInit+0x118>)
 80041f6:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 80041f8:	4b1b      	ldr	r3, [pc, #108]	; (8004268 <HAL_UART_MspInit+0x114>)
 80041fa:	2204      	movs	r2, #4
 80041fc:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041fe:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <HAL_UART_MspInit+0x114>)
 8004200:	2200      	movs	r2, #0
 8004202:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004204:	4b18      	ldr	r3, [pc, #96]	; (8004268 <HAL_UART_MspInit+0x114>)
 8004206:	2200      	movs	r2, #0
 8004208:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 800420a:	4b17      	ldr	r3, [pc, #92]	; (8004268 <HAL_UART_MspInit+0x114>)
 800420c:	2280      	movs	r2, #128	; 0x80
 800420e:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004210:	4b15      	ldr	r3, [pc, #84]	; (8004268 <HAL_UART_MspInit+0x114>)
 8004212:	2200      	movs	r2, #0
 8004214:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004216:	4b14      	ldr	r3, [pc, #80]	; (8004268 <HAL_UART_MspInit+0x114>)
 8004218:	2200      	movs	r2, #0
 800421a:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_CIRCULAR;
 800421c:	4b12      	ldr	r3, [pc, #72]	; (8004268 <HAL_UART_MspInit+0x114>)
 800421e:	2220      	movs	r2, #32
 8004220:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004222:	4b11      	ldr	r3, [pc, #68]	; (8004268 <HAL_UART_MspInit+0x114>)
 8004224:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004228:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 800422a:	480f      	ldr	r0, [pc, #60]	; (8004268 <HAL_UART_MspInit+0x114>)
 800422c:	f001 fe44 	bl	8005eb8 <HAL_DMA_Init>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004236:	f7fd fbbb 	bl	80019b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart_rx);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a0a      	ldr	r2, [pc, #40]	; (8004268 <HAL_UART_MspInit+0x114>)
 800423e:	675a      	str	r2, [r3, #116]	; 0x74
 8004240:	4a09      	ldr	r2, [pc, #36]	; (8004268 <HAL_UART_MspInit+0x114>)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004246:	2200      	movs	r2, #0
 8004248:	2100      	movs	r1, #0
 800424a:	2046      	movs	r0, #70	; 0x46
 800424c:	f001 fdfd 	bl	8005e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004250:	2046      	movs	r0, #70	; 0x46
 8004252:	f001 fe16 	bl	8005e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8004256:	bf00      	nop
 8004258:	3778      	adds	r7, #120	; 0x78
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40008000 	.word	0x40008000
 8004264:	40021000 	.word	0x40021000
 8004268:	20000500 	.word	0x20000500
 800426c:	40020480 	.word	0x40020480

08004270 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004280:	d10c      	bne.n	800429c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004282:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004286:	4a14      	ldr	r2, [pc, #80]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	6593      	str	r3, [r2, #88]	; 0x58
 800428e:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 8004290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800429a:	e018      	b.n	80042ce <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <HAL_TIM_Base_MspInit+0x6c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d113      	bne.n	80042ce <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80042a6:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	4a0b      	ldr	r2, [pc, #44]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 80042ac:	f043 0320 	orr.w	r3, r3, #32
 80042b0:	6593      	str	r3, [r2, #88]	; 0x58
 80042b2:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <HAL_TIM_Base_MspInit+0x68>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	2100      	movs	r1, #0
 80042c2:	2037      	movs	r0, #55	; 0x37
 80042c4:	f001 fdc1 	bl	8005e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80042c8:	2037      	movs	r0, #55	; 0x37
 80042ca:	f001 fdda 	bl	8005e82 <HAL_NVIC_EnableIRQ>
}
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40001400 	.word	0x40001400

080042e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80042e4:	e7fe      	b.n	80042e4 <NMI_Handler+0x4>
	...

080042e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_Fill(Black);
 80042ec:	2000      	movs	r0, #0
 80042ee:	f7fd ffcd 	bl	800228c <ssd1306_Fill>
	  ssd1306_SetCursor(33, 36);
 80042f2:	2124      	movs	r1, #36	; 0x24
 80042f4:	2021      	movs	r0, #33	; 0x21
 80042f6:	f7fe f90b 	bl	8002510 <ssd1306_SetCursor>
	  ssd1306_WriteString("rincee en", Font_6x8, White);
 80042fa:	4a09      	ldr	r2, [pc, #36]	; (8004320 <HardFault_Handler+0x38>)
 80042fc:	2301      	movs	r3, #1
 80042fe:	ca06      	ldmia	r2, {r1, r2}
 8004300:	4808      	ldr	r0, [pc, #32]	; (8004324 <HardFault_Handler+0x3c>)
 8004302:	f7fe f8df 	bl	80024c4 <ssd1306_WriteString>
	  ssd1306_SetCursor(33, 46);
 8004306:	212e      	movs	r1, #46	; 0x2e
 8004308:	2021      	movs	r0, #33	; 0x21
 800430a:	f7fe f901 	bl	8002510 <ssd1306_SetCursor>
	  ssd1306_WriteString("code", Font_6x8, White);
 800430e:	4a04      	ldr	r2, [pc, #16]	; (8004320 <HardFault_Handler+0x38>)
 8004310:	2301      	movs	r3, #1
 8004312:	ca06      	ldmia	r2, {r1, r2}
 8004314:	4804      	ldr	r0, [pc, #16]	; (8004328 <HardFault_Handler+0x40>)
 8004316:	f7fe f8d5 	bl	80024c4 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 800431a:	f7fd ffcf 	bl	80022bc <ssd1306_UpdateScreen>
	  ssd1306_Fill(Black);
 800431e:	e7e5      	b.n	80042ec <HardFault_Handler+0x4>
 8004320:	20000008 	.word	0x20000008
 8004324:	08016600 	.word	0x08016600
 8004328:	0801660c 	.word	0x0801660c

0800432c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004330:	e7fe      	b.n	8004330 <MemManage_Handler+0x4>

08004332 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004332:	b480      	push	{r7}
 8004334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004336:	e7fe      	b.n	8004336 <BusFault_Handler+0x4>

08004338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800433c:	e7fe      	b.n	800433c <UsageFault_Handler+0x4>

0800433e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800433e:	b480      	push	{r7}
 8004340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004342:	bf00      	nop
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004350:	bf00      	nop
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800435e:	bf00      	nop
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	distanceparcouru+=1;
 800436c:	4b04      	ldr	r3, [pc, #16]	; (8004380 <SysTick_Handler+0x18>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3301      	adds	r3, #1
 8004372:	4a03      	ldr	r2, [pc, #12]	; (8004380 <SysTick_Handler+0x18>)
 8004374:	6013      	str	r3, [r2, #0]


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004376:	f000 f9a9 	bl	80046cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20000d00 	.word	0x20000d00

08004384 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004388:	4802      	ldr	r0, [pc, #8]	; (8004394 <DMA1_Channel1_IRQHandler+0x10>)
 800438a:	f001 ff2c 	bl	80061e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800438e:	bf00      	nop
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20000388 	.word	0x20000388

08004398 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800439c:	4802      	ldr	r0, [pc, #8]	; (80043a8 <ADC1_IRQHandler+0x10>)
 800439e:	f000 fd79 	bl	8004e94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80043a2:	bf00      	nop
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	20000324 	.word	0x20000324

080043ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80043b0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80043b4:	f002 f984 	bl	80066c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80043b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80043bc:	f002 f980 	bl	80066c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80043c0:	bf00      	nop
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	distanceparcouru+=1;
 80043c8:	4b04      	ldr	r3, [pc, #16]	; (80043dc <TIM7_IRQHandler+0x18>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3301      	adds	r3, #1
 80043ce:	4a03      	ldr	r2, [pc, #12]	; (80043dc <TIM7_IRQHandler+0x18>)
 80043d0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80043d2:	4803      	ldr	r0, [pc, #12]	; (80043e0 <TIM7_IRQHandler+0x1c>)
 80043d4:	f005 fdd6 	bl	8009f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80043d8:	bf00      	nop
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000d00 	.word	0x20000d00
 80043e0:	20000594 	.word	0x20000594

080043e4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80043e8:	4802      	ldr	r0, [pc, #8]	; (80043f4 <USB_IRQHandler+0x10>)
 80043ea:	f002 ff54 	bl	8007296 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80043ee:	bf00      	nop
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	200011ec 	.word	0x200011ec

080043f8 <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 80043fc:	4802      	ldr	r0, [pc, #8]	; (8004408 <DMA2_Channel7_IRQHandler+0x10>)
 80043fe:	f001 fef2 	bl	80061e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8004402:	bf00      	nop
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000500 	.word	0x20000500

0800440c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */


  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004410:	4802      	ldr	r0, [pc, #8]	; (800441c <LPUART1_IRQHandler+0x10>)
 8004412:	f006 facd 	bl	800a9b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000478 	.word	0x20000478

08004420 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return 1;
 8004424:	2301      	movs	r3, #1
}
 8004426:	4618      	mov	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <_kill>:

int _kill(int pid, int sig)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800443a:	f00e f9b9 	bl	80127b0 <__errno>
 800443e:	4603      	mov	r3, r0
 8004440:	2216      	movs	r2, #22
 8004442:	601a      	str	r2, [r3, #0]
  return -1;
 8004444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <_exit>:

void _exit (int status)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004458:	f04f 31ff 	mov.w	r1, #4294967295
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff ffe7 	bl	8004430 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004462:	e7fe      	b.n	8004462 <_exit+0x12>

08004464 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	e00a      	b.n	800448c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004476:	f3af 8000 	nop.w
 800447a:	4601      	mov	r1, r0
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	60ba      	str	r2, [r7, #8]
 8004482:	b2ca      	uxtb	r2, r1
 8004484:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	3301      	adds	r3, #1
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	429a      	cmp	r2, r3
 8004492:	dbf0      	blt.n	8004476 <_read+0x12>
  }

  return len;
 8004494:	687b      	ldr	r3, [r7, #4]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b086      	sub	sp, #24
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	e009      	b.n	80044c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	60ba      	str	r2, [r7, #8]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	3301      	adds	r3, #1
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	dbf1      	blt.n	80044b0 <_write+0x12>
  }
  return len;
 80044cc:	687b      	ldr	r3, [r7, #4]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <_close>:

int _close(int file)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044fe:	605a      	str	r2, [r3, #4]
  return 0;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <_isatty>:

int _isatty(int file)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004516:	2301      	movs	r3, #1
}
 8004518:	4618      	mov	r0, r3
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004548:	4a14      	ldr	r2, [pc, #80]	; (800459c <_sbrk+0x5c>)
 800454a:	4b15      	ldr	r3, [pc, #84]	; (80045a0 <_sbrk+0x60>)
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004554:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <_sbrk+0x64>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d102      	bne.n	8004562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800455c:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <_sbrk+0x64>)
 800455e:	4a12      	ldr	r2, [pc, #72]	; (80045a8 <_sbrk+0x68>)
 8004560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004562:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <_sbrk+0x64>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4413      	add	r3, r2
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	429a      	cmp	r2, r3
 800456e:	d207      	bcs.n	8004580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004570:	f00e f91e 	bl	80127b0 <__errno>
 8004574:	4603      	mov	r3, r0
 8004576:	220c      	movs	r2, #12
 8004578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	e009      	b.n	8004594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004580:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <_sbrk+0x64>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004586:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <_sbrk+0x64>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	4a05      	ldr	r2, [pc, #20]	; (80045a4 <_sbrk+0x64>)
 8004590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004592:	68fb      	ldr	r3, [r7, #12]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20010000 	.word	0x20010000
 80045a0:	00000400 	.word	0x00000400
 80045a4:	20000d04 	.word	0x20000d04
 80045a8:	20001648 	.word	0x20001648

080045ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80045b0:	4b06      	ldr	r3, [pc, #24]	; (80045cc <SystemInit+0x20>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	4a05      	ldr	r2, [pc, #20]	; (80045cc <SystemInit+0x20>)
 80045b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80045c0:	bf00      	nop
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	e000ed00 	.word	0xe000ed00

080045d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80045d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004608 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80045d4:	f7ff ffea 	bl	80045ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045d8:	480c      	ldr	r0, [pc, #48]	; (800460c <LoopForever+0x6>)
  ldr r1, =_edata
 80045da:	490d      	ldr	r1, [pc, #52]	; (8004610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80045dc:	4a0d      	ldr	r2, [pc, #52]	; (8004614 <LoopForever+0xe>)
  movs r3, #0
 80045de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045e0:	e002      	b.n	80045e8 <LoopCopyDataInit>

080045e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045e6:	3304      	adds	r3, #4

080045e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045ec:	d3f9      	bcc.n	80045e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045ee:	4a0a      	ldr	r2, [pc, #40]	; (8004618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80045f0:	4c0a      	ldr	r4, [pc, #40]	; (800461c <LoopForever+0x16>)
  movs r3, #0
 80045f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045f4:	e001      	b.n	80045fa <LoopFillZerobss>

080045f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045f8:	3204      	adds	r2, #4

080045fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045fc:	d3fb      	bcc.n	80045f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80045fe:	f00e f8dd 	bl	80127bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004602:	f7fc fe87 	bl	8001314 <main>

08004606 <LoopForever>:

LoopForever:
    b LoopForever
 8004606:	e7fe      	b.n	8004606 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004608:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800460c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004610:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8004614:	080188e0 	.word	0x080188e0
  ldr r2, =_sbss
 8004618:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 800461c:	20001644 	.word	0x20001644

08004620 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004620:	e7fe      	b.n	8004620 <CAN1_RX0_IRQHandler>

08004622 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800462c:	2003      	movs	r0, #3
 800462e:	f001 fc01 	bl	8005e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004632:	200f      	movs	r0, #15
 8004634:	f000 f80e 	bl	8004654 <HAL_InitTick>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	71fb      	strb	r3, [r7, #7]
 8004642:	e001      	b.n	8004648 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004644:	f7ff fc52 	bl	8003eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004648:	79fb      	ldrb	r3, [r7, #7]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004660:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <HAL_InitTick+0x6c>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d023      	beq.n	80046b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004668:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <HAL_InitTick+0x70>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <HAL_InitTick+0x6c>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	4619      	mov	r1, r3
 8004672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004676:	fbb3 f3f1 	udiv	r3, r3, r1
 800467a:	fbb2 f3f3 	udiv	r3, r2, r3
 800467e:	4618      	mov	r0, r3
 8004680:	f001 fc0d 	bl	8005e9e <HAL_SYSTICK_Config>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b0f      	cmp	r3, #15
 800468e:	d809      	bhi.n	80046a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004690:	2200      	movs	r2, #0
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	f001 fbd7 	bl	8005e4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800469c:	4a0a      	ldr	r2, [pc, #40]	; (80046c8 <HAL_InitTick+0x74>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	e007      	b.n	80046b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
 80046a8:	e004      	b.n	80046b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	73fb      	strb	r3, [r7, #15]
 80046ae:	e001      	b.n	80046b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000028 	.word	0x20000028
 80046c4:	20000020 	.word	0x20000020
 80046c8:	20000024 	.word	0x20000024

080046cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80046d0:	4b06      	ldr	r3, [pc, #24]	; (80046ec <HAL_IncTick+0x20>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_IncTick+0x24>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4413      	add	r3, r2
 80046dc:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <HAL_IncTick+0x24>)
 80046de:	6013      	str	r3, [r2, #0]
}
 80046e0:	bf00      	nop
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000028 	.word	0x20000028
 80046f0:	20000d08 	.word	0x20000d08

080046f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return uwTick;
 80046f8:	4b03      	ldr	r3, [pc, #12]	; (8004708 <HAL_GetTick+0x14>)
 80046fa:	681b      	ldr	r3, [r3, #0]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20000d08 	.word	0x20000d08

0800470c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004714:	f7ff ffee 	bl	80046f4 <HAL_GetTick>
 8004718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d005      	beq.n	8004732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <HAL_Delay+0x44>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4413      	add	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004732:	bf00      	nop
 8004734:	f7ff ffde 	bl	80046f4 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	429a      	cmp	r2, r3
 8004742:	d8f7      	bhi.n	8004734 <HAL_Delay+0x28>
  {
  }
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	20000028 	.word	0x20000028

08004754 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	609a      	str	r2, [r3, #8]
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	609a      	str	r2, [r3, #8]
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3360      	adds	r3, #96	; 0x60
 80047ce:	461a      	mov	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b08      	ldr	r3, [pc, #32]	; (8004800 <LL_ADC_SetOffset+0x44>)
 80047de:	4013      	ands	r3, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	4313      	orrs	r3, r2
 80047ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80047f4:	bf00      	nop
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	03fff000 	.word	0x03fff000

08004804 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3360      	adds	r3, #96	; 0x60
 8004812:	461a      	mov	r2, r3
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3360      	adds	r3, #96	; 0x60
 8004840:	461a      	mov	r2, r3
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	431a      	orrs	r2, r3
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3330      	adds	r3, #48	; 0x30
 800489c:	461a      	mov	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	0a1b      	lsrs	r3, r3, #8
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	4413      	add	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	211f      	movs	r1, #31
 80048b8:	fa01 f303 	lsl.w	r3, r1, r3
 80048bc:	43db      	mvns	r3, r3
 80048be:	401a      	ands	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	0e9b      	lsrs	r3, r3, #26
 80048c4:	f003 011f 	and.w	r1, r3, #31
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	fa01 f303 	lsl.w	r3, r1, r3
 80048d2:	431a      	orrs	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80048d8:	bf00      	nop
 80048da:	371c      	adds	r7, #28
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800490a:	b480      	push	{r7}
 800490c:	b087      	sub	sp, #28
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3314      	adds	r3, #20
 800491a:	461a      	mov	r2, r3
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	0e5b      	lsrs	r3, r3, #25
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	4413      	add	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	0d1b      	lsrs	r3, r3, #20
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	2107      	movs	r1, #7
 8004938:	fa01 f303 	lsl.w	r3, r1, r3
 800493c:	43db      	mvns	r3, r3
 800493e:	401a      	ands	r2, r3
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	0d1b      	lsrs	r3, r3, #20
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	fa01 f303 	lsl.w	r3, r1, r3
 800494e:	431a      	orrs	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004978:	43db      	mvns	r3, r3
 800497a:	401a      	ands	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f003 0318 	and.w	r3, r3, #24
 8004982:	4908      	ldr	r1, [pc, #32]	; (80049a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004984:	40d9      	lsrs	r1, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	400b      	ands	r3, r1
 800498a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800498e:	431a      	orrs	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	0007ffff 	.word	0x0007ffff

080049a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80049b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6093      	str	r3, [r2, #8]
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049e0:	d101      	bne.n	80049e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004a04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a30:	d101      	bne.n	8004a36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004a58:	f043 0201 	orr.w	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <LL_ADC_IsEnabled+0x18>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <LL_ADC_IsEnabled+0x1a>
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004aa2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004aa6:	f043 0204 	orr.w	r2, r3, #4
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004aba:	b480      	push	{r7}
 8004abc:	b083      	sub	sp, #12
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d101      	bne.n	8004ad2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d101      	bne.n	8004af8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004af4:	2301      	movs	r3, #1
 8004af6:	e000      	b.n	8004afa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e126      	b.n	8004d70 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d109      	bne.n	8004b44 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff f9ff 	bl	8003f34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff ff3f 	bl	80049cc <LL_ADC_IsDeepPowerDownEnabled>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff ff25 	bl	80049a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff ff5a 	bl	8004a1c <LL_ADC_IsInternalRegulatorEnabled>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d115      	bne.n	8004b9a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff ff3e 	bl	80049f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b78:	4b7f      	ldr	r3, [pc, #508]	; (8004d78 <HAL_ADC_Init+0x270>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	099b      	lsrs	r3, r3, #6
 8004b7e:	4a7f      	ldr	r2, [pc, #508]	; (8004d7c <HAL_ADC_Init+0x274>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	3301      	adds	r3, #1
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b8c:	e002      	b.n	8004b94 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f9      	bne.n	8004b8e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff ff3c 	bl	8004a1c <LL_ADC_IsInternalRegulatorEnabled>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10d      	bne.n	8004bc6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bae:	f043 0210 	orr.w	r2, r3, #16
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bba:	f043 0201 	orr.w	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff ff75 	bl	8004aba <LL_ADC_REG_IsConversionOngoing>
 8004bd0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f040 80bf 	bne.w	8004d5e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f040 80bb 	bne.w	8004d5e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004bf0:	f043 0202 	orr.w	r2, r3, #2
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff ff35 	bl	8004a6c <LL_ADC_IsEnabled>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10b      	bne.n	8004c20 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c08:	485d      	ldr	r0, [pc, #372]	; (8004d80 <HAL_ADC_Init+0x278>)
 8004c0a:	f7ff ff2f 	bl	8004a6c <LL_ADC_IsEnabled>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d105      	bne.n	8004c20 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	485a      	ldr	r0, [pc, #360]	; (8004d84 <HAL_ADC_Init+0x27c>)
 8004c1c:	f7ff fd9a 	bl	8004754 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	7e5b      	ldrb	r3, [r3, #25]
 8004c24:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c2a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004c30:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004c36:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c3e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c40:	4313      	orrs	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d106      	bne.n	8004c5c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	3b01      	subs	r3, #1
 8004c54:	045b      	lsls	r3, r3, #17
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d009      	beq.n	8004c78 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68da      	ldr	r2, [r3, #12]
 8004c7e:	4b42      	ldr	r3, [pc, #264]	; (8004d88 <HAL_ADC_Init+0x280>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	6812      	ldr	r2, [r2, #0]
 8004c86:	69b9      	ldr	r1, [r7, #24]
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7ff ff25 	bl	8004ae0 <LL_ADC_INJ_IsConversionOngoing>
 8004c96:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d13d      	bne.n	8004d1a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d13a      	bne.n	8004d1a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004ca8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cb0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cc0:	f023 0302 	bic.w	r3, r3, #2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6812      	ldr	r2, [r2, #0]
 8004cc8:	69b9      	ldr	r1, [r7, #24]
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d118      	bne.n	8004d0a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ce2:	f023 0304 	bic.w	r3, r3, #4
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cee:	4311      	orrs	r1, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004cf4:	4311      	orrs	r1, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	611a      	str	r2, [r3, #16]
 8004d08:	e007      	b.n	8004d1a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0201 	bic.w	r2, r2, #1
 8004d18:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d10c      	bne.n	8004d3c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	f023 010f 	bic.w	r1, r3, #15
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	1e5a      	subs	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	631a      	str	r2, [r3, #48]	; 0x30
 8004d3a:	e007      	b.n	8004d4c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 020f 	bic.w	r2, r2, #15
 8004d4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	f023 0303 	bic.w	r3, r3, #3
 8004d54:	f043 0201 	orr.w	r2, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	655a      	str	r2, [r3, #84]	; 0x54
 8004d5c:	e007      	b.n	8004d6e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	f043 0210 	orr.w	r2, r3, #16
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000020 	.word	0x20000020
 8004d7c:	053e2d63 	.word	0x053e2d63
 8004d80:	50040000 	.word	0x50040000
 8004d84:	50040300 	.word	0x50040300
 8004d88:	fff0c007 	.word	0xfff0c007

08004d8c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fe8c 	bl	8004aba <LL_ADC_REG_IsConversionOngoing>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d167      	bne.n	8004e78 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <HAL_ADC_Start_DMA+0x2a>
 8004db2:	2302      	movs	r3, #2
 8004db4:	e063      	b.n	8004e7e <HAL_ADC_Start_DMA+0xf2>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fe1c 	bl	80059fc <ADC_Enable>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d14f      	bne.n	8004e6e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d006      	beq.n	8004dfc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df2:	f023 0206 	bic.w	r2, r3, #6
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	659a      	str	r2, [r3, #88]	; 0x58
 8004dfa:	e002      	b.n	8004e02 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e06:	4a20      	ldr	r2, [pc, #128]	; (8004e88 <HAL_ADC_Start_DMA+0xfc>)
 8004e08:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0e:	4a1f      	ldr	r2, [pc, #124]	; (8004e8c <HAL_ADC_Start_DMA+0x100>)
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e16:	4a1e      	ldr	r2, [pc, #120]	; (8004e90 <HAL_ADC_Start_DMA+0x104>)
 8004e18:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	221c      	movs	r2, #28
 8004e20:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0210 	orr.w	r2, r2, #16
 8004e38:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3340      	adds	r3, #64	; 0x40
 8004e54:	4619      	mov	r1, r3
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f001 f8e5 	bl	8006028 <HAL_DMA_Start_IT>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff fe13 	bl	8004a92 <LL_ADC_REG_StartConversion>
 8004e6c:	e006      	b.n	8004e7c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004e76:	e001      	b.n	8004e7c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	08005b09 	.word	0x08005b09
 8004e8c:	08005be1 	.word	0x08005be1
 8004e90:	08005bfd 	.word	0x08005bfd

08004e94 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d017      	beq.n	8004eea <HAL_ADC_IRQHandler+0x56>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d012      	beq.n	8004eea <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d105      	bne.n	8004edc <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fecf 	bl	8005c80 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d004      	beq.n	8004efe <HAL_ADC_IRQHandler+0x6a>
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f003 0304 	and.w	r3, r3, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d05e      	beq.n	8004fc6 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d059      	beq.n	8004fc6 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d105      	bne.n	8004f2a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fc99 	bl	8004866 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d03e      	beq.n	8004fb8 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d135      	bne.n	8004fb8 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d12e      	bne.n	8004fb8 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fdab 	bl	8004aba <LL_ADC_REG_IsConversionOngoing>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d11a      	bne.n	8004fa0 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 020c 	bic.w	r2, r2, #12
 8004f78:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d112      	bne.n	8004fb8 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f96:	f043 0201 	orr.w	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	655a      	str	r2, [r3, #84]	; 0x54
 8004f9e:	e00b      	b.n	8004fb8 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa4:	f043 0210 	orr.w	r2, r3, #16
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	f043 0201 	orr.w	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7fc f919 	bl	80011f0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	220c      	movs	r2, #12
 8004fc4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d004      	beq.n	8004fda <HAL_ADC_IRQHandler+0x146>
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f003 0320 	and.w	r3, r3, #32
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d072      	beq.n	80050ca <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d06d      	beq.n	80050ca <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d105      	bne.n	8005006 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff fc6a 	bl	80048e4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005010:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fc25 	bl	8004866 <LL_ADC_REG_IsTriggerSourceSWStart>
 800501c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d047      	beq.n	80050bc <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <HAL_ADC_IRQHandler+0x1b2>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d03f      	beq.n	80050bc <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005042:	2b00      	cmp	r3, #0
 8005044:	d13a      	bne.n	80050bc <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d133      	bne.n	80050bc <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d12e      	bne.n	80050bc <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fd3c 	bl	8004ae0 <LL_ADC_INJ_IsConversionOngoing>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d11a      	bne.n	80050a4 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800507c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005092:	2b00      	cmp	r3, #0
 8005094:	d112      	bne.n	80050bc <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	f043 0201 	orr.w	r2, r3, #1
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
 80050a2:	e00b      	b.n	80050bc <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a8:	f043 0210 	orr.w	r2, r3, #16
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	f043 0201 	orr.w	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fdb7 	bl	8005c30 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2260      	movs	r2, #96	; 0x60
 80050c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d011      	beq.n	80050f8 <HAL_ADC_IRQHandler+0x264>
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00c      	beq.n	80050f8 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f890 	bl	8005210 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2280      	movs	r2, #128	; 0x80
 80050f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d012      	beq.n	8005128 <HAL_ADC_IRQHandler+0x294>
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00d      	beq.n	8005128 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005110:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fd9d 	bl	8005c58 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005126:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800512e:	2b00      	cmp	r3, #0
 8005130:	d012      	beq.n	8005158 <HAL_ADC_IRQHandler+0x2c4>
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00d      	beq.n	8005158 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005140:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fd8f 	bl	8005c6c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005156:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b00      	cmp	r3, #0
 8005160:	d02a      	beq.n	80051b8 <HAL_ADC_IRQHandler+0x324>
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b00      	cmp	r3, #0
 800516a:	d025      	beq.n	80051b8 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8005174:	2301      	movs	r3, #1
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	e008      	b.n	800518c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8005188:	2301      	movs	r3, #1
 800518a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d10e      	bne.n	80051b0 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a2:	f043 0202 	orr.w	r2, r3, #2
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f83a 	bl	8005224 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2210      	movs	r2, #16
 80051b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d018      	beq.n	80051f4 <HAL_ADC_IRQHandler+0x360>
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d013      	beq.n	80051f4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051dc:	f043 0208 	orr.w	r2, r3, #8
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051ec:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fd28 	bl	8005c44 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80051f4:	bf00      	nop
 80051f6:	3720      	adds	r7, #32
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b0b6      	sub	sp, #216	; 0xd8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005248:	2300      	movs	r3, #0
 800524a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_ADC_ConfigChannel+0x22>
 8005256:	2302      	movs	r3, #2
 8005258:	e3bb      	b.n	80059d2 <HAL_ADC_ConfigChannel+0x79a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff fc27 	bl	8004aba <LL_ADC_REG_IsConversionOngoing>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 83a0 	bne.w	80059b4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b05      	cmp	r3, #5
 8005282:	d824      	bhi.n	80052ce <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	3b02      	subs	r3, #2
 800528a:	2b03      	cmp	r3, #3
 800528c:	d81b      	bhi.n	80052c6 <HAL_ADC_ConfigChannel+0x8e>
 800528e:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <HAL_ADC_ConfigChannel+0x5c>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052a5 	.word	0x080052a5
 8005298:	080052ad 	.word	0x080052ad
 800529c:	080052b5 	.word	0x080052b5
 80052a0:	080052bd 	.word	0x080052bd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80052a4:	230c      	movs	r3, #12
 80052a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80052aa:	e010      	b.n	80052ce <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80052ac:	2312      	movs	r3, #18
 80052ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80052b2:	e00c      	b.n	80052ce <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80052b4:	2318      	movs	r3, #24
 80052b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80052ba:	e008      	b.n	80052ce <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80052bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80052c4:	e003      	b.n	80052ce <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80052c6:	2306      	movs	r3, #6
 80052c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80052cc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80052dc:	f7ff fad6 	bl	800488c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff fbe8 	bl	8004aba <LL_ADC_REG_IsConversionOngoing>
 80052ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fbf4 	bl	8004ae0 <LL_ADC_INJ_IsConversionOngoing>
 80052f8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005300:	2b00      	cmp	r3, #0
 8005302:	f040 81a4 	bne.w	800564e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800530a:	2b00      	cmp	r3, #0
 800530c:	f040 819f 	bne.w	800564e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6818      	ldr	r0, [r3, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	6819      	ldr	r1, [r3, #0]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	461a      	mov	r2, r3
 800531e:	f7ff faf4 	bl	800490a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	695a      	ldr	r2, [r3, #20]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	08db      	lsrs	r3, r3, #3
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	2b04      	cmp	r3, #4
 8005342:	d00a      	beq.n	800535a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	6919      	ldr	r1, [r3, #16]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005354:	f7ff fa32 	bl	80047bc <LL_ADC_SetOffset>
 8005358:	e179      	b.n	800564e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2100      	movs	r1, #0
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fa4f 	bl	8004804 <LL_ADC_GetOffsetChannel>
 8005366:	4603      	mov	r3, r0
 8005368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <HAL_ADC_ConfigChannel+0x14e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2100      	movs	r1, #0
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff fa44 	bl	8004804 <LL_ADC_GetOffsetChannel>
 800537c:	4603      	mov	r3, r0
 800537e:	0e9b      	lsrs	r3, r3, #26
 8005380:	f003 021f 	and.w	r2, r3, #31
 8005384:	e01e      	b.n	80053c4 <HAL_ADC_ConfigChannel+0x18c>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2100      	movs	r1, #0
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff fa39 	bl	8004804 <LL_ADC_GetOffsetChannel>
 8005392:	4603      	mov	r3, r0
 8005394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005398:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800539c:	fa93 f3a3 	rbit	r3, r3
 80053a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80053a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80053a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80053ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80053b4:	2320      	movs	r3, #32
 80053b6:	e004      	b.n	80053c2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80053b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053bc:	fab3 f383 	clz	r3, r3
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d105      	bne.n	80053dc <HAL_ADC_ConfigChannel+0x1a4>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	0e9b      	lsrs	r3, r3, #26
 80053d6:	f003 031f 	and.w	r3, r3, #31
 80053da:	e018      	b.n	800540e <HAL_ADC_ConfigChannel+0x1d6>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053e8:	fa93 f3a3 	rbit	r3, r3
 80053ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80053f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80053f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d101      	bne.n	8005404 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8005400:	2320      	movs	r3, #32
 8005402:	e004      	b.n	800540e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8005404:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005408:	fab3 f383 	clz	r3, r3
 800540c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800540e:	429a      	cmp	r2, r3
 8005410:	d106      	bne.n	8005420 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2200      	movs	r2, #0
 8005418:	2100      	movs	r1, #0
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fa08 	bl	8004830 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2101      	movs	r1, #1
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff f9ec 	bl	8004804 <LL_ADC_GetOffsetChannel>
 800542c:	4603      	mov	r3, r0
 800542e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10a      	bne.n	800544c <HAL_ADC_ConfigChannel+0x214>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2101      	movs	r1, #1
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff f9e1 	bl	8004804 <LL_ADC_GetOffsetChannel>
 8005442:	4603      	mov	r3, r0
 8005444:	0e9b      	lsrs	r3, r3, #26
 8005446:	f003 021f 	and.w	r2, r3, #31
 800544a:	e01e      	b.n	800548a <HAL_ADC_ConfigChannel+0x252>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2101      	movs	r1, #1
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff f9d6 	bl	8004804 <LL_ADC_GetOffsetChannel>
 8005458:	4603      	mov	r3, r0
 800545a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005462:	fa93 f3a3 	rbit	r3, r3
 8005466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800546a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800546e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8005472:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800547a:	2320      	movs	r3, #32
 800547c:	e004      	b.n	8005488 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800547e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005482:	fab3 f383 	clz	r3, r3
 8005486:	b2db      	uxtb	r3, r3
 8005488:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005492:	2b00      	cmp	r3, #0
 8005494:	d105      	bne.n	80054a2 <HAL_ADC_ConfigChannel+0x26a>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	0e9b      	lsrs	r3, r3, #26
 800549c:	f003 031f 	and.w	r3, r3, #31
 80054a0:	e018      	b.n	80054d4 <HAL_ADC_ConfigChannel+0x29c>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054ae:	fa93 f3a3 	rbit	r3, r3
 80054b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80054b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80054be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80054c6:	2320      	movs	r3, #32
 80054c8:	e004      	b.n	80054d4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80054ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054ce:	fab3 f383 	clz	r3, r3
 80054d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d106      	bne.n	80054e6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2200      	movs	r2, #0
 80054de:	2101      	movs	r1, #1
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff f9a5 	bl	8004830 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2102      	movs	r1, #2
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff f989 	bl	8004804 <LL_ADC_GetOffsetChannel>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <HAL_ADC_ConfigChannel+0x2da>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2102      	movs	r1, #2
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff f97e 	bl	8004804 <LL_ADC_GetOffsetChannel>
 8005508:	4603      	mov	r3, r0
 800550a:	0e9b      	lsrs	r3, r3, #26
 800550c:	f003 021f 	and.w	r2, r3, #31
 8005510:	e01e      	b.n	8005550 <HAL_ADC_ConfigChannel+0x318>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2102      	movs	r1, #2
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff f973 	bl	8004804 <LL_ADC_GetOffsetChannel>
 800551e:	4603      	mov	r3, r0
 8005520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005528:	fa93 f3a3 	rbit	r3, r3
 800552c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005530:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8005540:	2320      	movs	r3, #32
 8005542:	e004      	b.n	800554e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8005544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005548:	fab3 f383 	clz	r3, r3
 800554c:	b2db      	uxtb	r3, r3
 800554e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005558:	2b00      	cmp	r3, #0
 800555a:	d105      	bne.n	8005568 <HAL_ADC_ConfigChannel+0x330>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	0e9b      	lsrs	r3, r3, #26
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	e014      	b.n	8005592 <HAL_ADC_ConfigChannel+0x35a>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005570:	fa93 f3a3 	rbit	r3, r3
 8005574:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8005576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800557c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8005584:	2320      	movs	r3, #32
 8005586:	e004      	b.n	8005592 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8005588:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800558c:	fab3 f383 	clz	r3, r3
 8005590:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005592:	429a      	cmp	r2, r3
 8005594:	d106      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2200      	movs	r2, #0
 800559c:	2102      	movs	r1, #2
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff f946 	bl	8004830 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2103      	movs	r1, #3
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff f92a 	bl	8004804 <LL_ADC_GetOffsetChannel>
 80055b0:	4603      	mov	r3, r0
 80055b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x398>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2103      	movs	r1, #3
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff f91f 	bl	8004804 <LL_ADC_GetOffsetChannel>
 80055c6:	4603      	mov	r3, r0
 80055c8:	0e9b      	lsrs	r3, r3, #26
 80055ca:	f003 021f 	and.w	r2, r3, #31
 80055ce:	e017      	b.n	8005600 <HAL_ADC_ConfigChannel+0x3c8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2103      	movs	r1, #3
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7ff f914 	bl	8004804 <LL_ADC_GetOffsetChannel>
 80055dc:	4603      	mov	r3, r0
 80055de:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055e2:	fa93 f3a3 	rbit	r3, r3
 80055e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80055e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ea:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80055ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80055f2:	2320      	movs	r3, #32
 80055f4:	e003      	b.n	80055fe <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80055f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055f8:	fab3 f383 	clz	r3, r3
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005608:	2b00      	cmp	r3, #0
 800560a:	d105      	bne.n	8005618 <HAL_ADC_ConfigChannel+0x3e0>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	0e9b      	lsrs	r3, r3, #26
 8005612:	f003 031f 	and.w	r3, r3, #31
 8005616:	e011      	b.n	800563c <HAL_ADC_ConfigChannel+0x404>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005620:	fa93 f3a3 	rbit	r3, r3
 8005624:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005628:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800562a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005630:	2320      	movs	r3, #32
 8005632:	e003      	b.n	800563c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005634:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005636:	fab3 f383 	clz	r3, r3
 800563a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800563c:	429a      	cmp	r2, r3
 800563e:	d106      	bne.n	800564e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2200      	movs	r2, #0
 8005646:	2103      	movs	r1, #3
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff f8f1 	bl	8004830 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff fa0a 	bl	8004a6c <LL_ADC_IsEnabled>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	f040 8140 	bne.w	80058e0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	6819      	ldr	r1, [r3, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	461a      	mov	r2, r3
 800566e:	f7ff f977 	bl	8004960 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	4a8f      	ldr	r2, [pc, #572]	; (80058b4 <HAL_ADC_ConfigChannel+0x67c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	f040 8131 	bne.w	80058e0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10b      	bne.n	80056a6 <HAL_ADC_ConfigChannel+0x46e>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	0e9b      	lsrs	r3, r3, #26
 8005694:	3301      	adds	r3, #1
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	2b09      	cmp	r3, #9
 800569c:	bf94      	ite	ls
 800569e:	2301      	movls	r3, #1
 80056a0:	2300      	movhi	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	e019      	b.n	80056da <HAL_ADC_ConfigChannel+0x4a2>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056ae:	fa93 f3a3 	rbit	r3, r3
 80056b2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80056b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80056b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80056be:	2320      	movs	r3, #32
 80056c0:	e003      	b.n	80056ca <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80056c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056c4:	fab3 f383 	clz	r3, r3
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	3301      	adds	r3, #1
 80056cc:	f003 031f 	and.w	r3, r3, #31
 80056d0:	2b09      	cmp	r3, #9
 80056d2:	bf94      	ite	ls
 80056d4:	2301      	movls	r3, #1
 80056d6:	2300      	movhi	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d079      	beq.n	80057d2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d107      	bne.n	80056fa <HAL_ADC_ConfigChannel+0x4c2>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	0e9b      	lsrs	r3, r3, #26
 80056f0:	3301      	adds	r3, #1
 80056f2:	069b      	lsls	r3, r3, #26
 80056f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80056f8:	e015      	b.n	8005726 <HAL_ADC_ConfigChannel+0x4ee>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005702:	fa93 f3a3 	rbit	r3, r3
 8005706:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800570a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800570c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8005712:	2320      	movs	r3, #32
 8005714:	e003      	b.n	800571e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8005716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005718:	fab3 f383 	clz	r3, r3
 800571c:	b2db      	uxtb	r3, r3
 800571e:	3301      	adds	r3, #1
 8005720:	069b      	lsls	r3, r3, #26
 8005722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <HAL_ADC_ConfigChannel+0x50e>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	0e9b      	lsrs	r3, r3, #26
 8005738:	3301      	adds	r3, #1
 800573a:	f003 031f 	and.w	r3, r3, #31
 800573e:	2101      	movs	r1, #1
 8005740:	fa01 f303 	lsl.w	r3, r1, r3
 8005744:	e017      	b.n	8005776 <HAL_ADC_ConfigChannel+0x53e>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800574c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800574e:	fa93 f3a3 	rbit	r3, r3
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005756:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800575e:	2320      	movs	r3, #32
 8005760:	e003      	b.n	800576a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005764:	fab3 f383 	clz	r3, r3
 8005768:	b2db      	uxtb	r3, r3
 800576a:	3301      	adds	r3, #1
 800576c:	f003 031f 	and.w	r3, r3, #31
 8005770:	2101      	movs	r1, #1
 8005772:	fa01 f303 	lsl.w	r3, r1, r3
 8005776:	ea42 0103 	orr.w	r1, r2, r3
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <HAL_ADC_ConfigChannel+0x564>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	0e9b      	lsrs	r3, r3, #26
 800578c:	3301      	adds	r3, #1
 800578e:	f003 021f 	and.w	r2, r3, #31
 8005792:	4613      	mov	r3, r2
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	4413      	add	r3, r2
 8005798:	051b      	lsls	r3, r3, #20
 800579a:	e018      	b.n	80057ce <HAL_ADC_ConfigChannel+0x596>
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a4:	fa93 f3a3 	rbit	r3, r3
 80057a8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80057b4:	2320      	movs	r3, #32
 80057b6:	e003      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80057b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ba:	fab3 f383 	clz	r3, r3
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	3301      	adds	r3, #1
 80057c2:	f003 021f 	and.w	r2, r3, #31
 80057c6:	4613      	mov	r3, r2
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	4413      	add	r3, r2
 80057cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057ce:	430b      	orrs	r3, r1
 80057d0:	e081      	b.n	80058d6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d107      	bne.n	80057ee <HAL_ADC_ConfigChannel+0x5b6>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	0e9b      	lsrs	r3, r3, #26
 80057e4:	3301      	adds	r3, #1
 80057e6:	069b      	lsls	r3, r3, #26
 80057e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80057ec:	e015      	b.n	800581a <HAL_ADC_ConfigChannel+0x5e2>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f6:	fa93 f3a3 	rbit	r3, r3
 80057fa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8005806:	2320      	movs	r3, #32
 8005808:	e003      	b.n	8005812 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	fab3 f383 	clz	r3, r3
 8005810:	b2db      	uxtb	r3, r3
 8005812:	3301      	adds	r3, #1
 8005814:	069b      	lsls	r3, r3, #26
 8005816:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <HAL_ADC_ConfigChannel+0x602>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	0e9b      	lsrs	r3, r3, #26
 800582c:	3301      	adds	r3, #1
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	2101      	movs	r1, #1
 8005834:	fa01 f303 	lsl.w	r3, r1, r3
 8005838:	e017      	b.n	800586a <HAL_ADC_ConfigChannel+0x632>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	fa93 f3a3 	rbit	r3, r3
 8005846:	61bb      	str	r3, [r7, #24]
  return result;
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d101      	bne.n	8005856 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8005852:	2320      	movs	r3, #32
 8005854:	e003      	b.n	800585e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	fab3 f383 	clz	r3, r3
 800585c:	b2db      	uxtb	r3, r3
 800585e:	3301      	adds	r3, #1
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	2101      	movs	r1, #1
 8005866:	fa01 f303 	lsl.w	r3, r1, r3
 800586a:	ea42 0103 	orr.w	r1, r2, r3
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10d      	bne.n	8005896 <HAL_ADC_ConfigChannel+0x65e>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	0e9b      	lsrs	r3, r3, #26
 8005880:	3301      	adds	r3, #1
 8005882:	f003 021f 	and.w	r2, r3, #31
 8005886:	4613      	mov	r3, r2
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	4413      	add	r3, r2
 800588c:	3b1e      	subs	r3, #30
 800588e:	051b      	lsls	r3, r3, #20
 8005890:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005894:	e01e      	b.n	80058d4 <HAL_ADC_ConfigChannel+0x69c>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	fa93 f3a3 	rbit	r3, r3
 80058a2:	60fb      	str	r3, [r7, #12]
  return result;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d104      	bne.n	80058b8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80058ae:	2320      	movs	r3, #32
 80058b0:	e006      	b.n	80058c0 <HAL_ADC_ConfigChannel+0x688>
 80058b2:	bf00      	nop
 80058b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	fab3 f383 	clz	r3, r3
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	3301      	adds	r3, #1
 80058c2:	f003 021f 	and.w	r2, r3, #31
 80058c6:	4613      	mov	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	4413      	add	r3, r2
 80058cc:	3b1e      	subs	r3, #30
 80058ce:	051b      	lsls	r3, r3, #20
 80058d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058da:	4619      	mov	r1, r3
 80058dc:	f7ff f815 	bl	800490a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	4b3d      	ldr	r3, [pc, #244]	; (80059dc <HAL_ADC_ConfigChannel+0x7a4>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d06c      	beq.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058ec:	483c      	ldr	r0, [pc, #240]	; (80059e0 <HAL_ADC_ConfigChannel+0x7a8>)
 80058ee:	f7fe ff57 	bl	80047a0 <LL_ADC_GetCommonPathInternalCh>
 80058f2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a3a      	ldr	r2, [pc, #232]	; (80059e4 <HAL_ADC_ConfigChannel+0x7ac>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d127      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005900:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005904:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d121      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a35      	ldr	r2, [pc, #212]	; (80059e8 <HAL_ADC_ConfigChannel+0x7b0>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d157      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005916:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800591a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800591e:	4619      	mov	r1, r3
 8005920:	482f      	ldr	r0, [pc, #188]	; (80059e0 <HAL_ADC_ConfigChannel+0x7a8>)
 8005922:	f7fe ff2a 	bl	800477a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005926:	4b31      	ldr	r3, [pc, #196]	; (80059ec <HAL_ADC_ConfigChannel+0x7b4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	099b      	lsrs	r3, r3, #6
 800592c:	4a30      	ldr	r2, [pc, #192]	; (80059f0 <HAL_ADC_ConfigChannel+0x7b8>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	099b      	lsrs	r3, r3, #6
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	4613      	mov	r3, r2
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005940:	e002      	b.n	8005948 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	3b01      	subs	r3, #1
 8005946:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f9      	bne.n	8005942 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800594e:	e03a      	b.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a27      	ldr	r2, [pc, #156]	; (80059f4 <HAL_ADC_ConfigChannel+0x7bc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d113      	bne.n	8005982 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800595a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800595e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10d      	bne.n	8005982 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <HAL_ADC_ConfigChannel+0x7b0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d12a      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005970:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005974:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005978:	4619      	mov	r1, r3
 800597a:	4819      	ldr	r0, [pc, #100]	; (80059e0 <HAL_ADC_ConfigChannel+0x7a8>)
 800597c:	f7fe fefd 	bl	800477a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005980:	e021      	b.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1c      	ldr	r2, [pc, #112]	; (80059f8 <HAL_ADC_ConfigChannel+0x7c0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d11c      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800598c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d116      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a12      	ldr	r2, [pc, #72]	; (80059e8 <HAL_ADC_ConfigChannel+0x7b0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d111      	bne.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80059a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80059aa:	4619      	mov	r1, r3
 80059ac:	480c      	ldr	r0, [pc, #48]	; (80059e0 <HAL_ADC_ConfigChannel+0x7a8>)
 80059ae:	f7fe fee4 	bl	800477a <LL_ADC_SetCommonPathInternalCh>
 80059b2:	e008      	b.n	80059c6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80059ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	37d8      	adds	r7, #216	; 0xd8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	80080000 	.word	0x80080000
 80059e0:	50040300 	.word	0x50040300
 80059e4:	c7520000 	.word	0xc7520000
 80059e8:	50040000 	.word	0x50040000
 80059ec:	20000020 	.word	0x20000020
 80059f0:	053e2d63 	.word	0x053e2d63
 80059f4:	cb840000 	.word	0xcb840000
 80059f8:	80000001 	.word	0x80000001

080059fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f7ff f82d 	bl	8004a6c <LL_ADC_IsEnabled>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d169      	bne.n	8005aec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <ADC_Enable+0xfc>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00d      	beq.n	8005a42 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2a:	f043 0210 	orr.w	r2, r3, #16
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a36:	f043 0201 	orr.w	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e055      	b.n	8005aee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe fffc 	bl	8004a44 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005a4c:	482b      	ldr	r0, [pc, #172]	; (8005afc <ADC_Enable+0x100>)
 8005a4e:	f7fe fea7 	bl	80047a0 <LL_ADC_GetCommonPathInternalCh>
 8005a52:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d013      	beq.n	8005a84 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a5c:	4b28      	ldr	r3, [pc, #160]	; (8005b00 <ADC_Enable+0x104>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	099b      	lsrs	r3, r3, #6
 8005a62:	4a28      	ldr	r2, [pc, #160]	; (8005b04 <ADC_Enable+0x108>)
 8005a64:	fba2 2303 	umull	r2, r3, r2, r3
 8005a68:	099b      	lsrs	r3, r3, #6
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a76:	e002      	b.n	8005a7e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f9      	bne.n	8005a78 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005a84:	f7fe fe36 	bl	80046f4 <HAL_GetTick>
 8005a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a8a:	e028      	b.n	8005ade <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fe ffeb 	bl	8004a6c <LL_ADC_IsEnabled>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe ffcf 	bl	8004a44 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005aa6:	f7fe fe25 	bl	80046f4 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d914      	bls.n	8005ade <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d00d      	beq.n	8005ade <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac6:	f043 0210 	orr.w	r2, r3, #16
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad2:	f043 0201 	orr.w	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e007      	b.n	8005aee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d1cf      	bne.n	8005a8c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	8000003f 	.word	0x8000003f
 8005afc:	50040300 	.word	0x50040300
 8005b00:	20000020 	.word	0x20000020
 8005b04:	053e2d63 	.word	0x053e2d63

08005b08 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d14b      	bne.n	8005bba <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d021      	beq.n	8005b80 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7fe fe90 	bl	8004866 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d032      	beq.n	8005bb2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d12b      	bne.n	8005bb2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d11f      	bne.n	8005bb2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b76:	f043 0201 	orr.w	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	655a      	str	r2, [r3, #84]	; 0x54
 8005b7e:	e018      	b.n	8005bb2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d111      	bne.n	8005bb2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d105      	bne.n	8005bb2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005baa:	f043 0201 	orr.w	r2, r3, #1
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f7fb fb1c 	bl	80011f0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005bb8:	e00e      	b.n	8005bd8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f7ff fb2c 	bl	8005224 <HAL_ADC_ErrorCallback>
}
 8005bcc:	e004      	b.n	8005bd8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	4798      	blx	r3
}
 8005bd8:	bf00      	nop
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f7ff fb04 	bl	80051fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005bf4:	bf00      	nop
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1a:	f043 0204 	orr.w	r2, r3, #4
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7ff fafe 	bl	8005224 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005c74:	bf00      	nop
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005c88:	bf00      	nop
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ca4:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cc6:	4a04      	ldr	r2, [pc, #16]	; (8005cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	60d3      	str	r3, [r2, #12]
}
 8005ccc:	bf00      	nop
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	e000ed00 	.word	0xe000ed00

08005cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ce0:	4b04      	ldr	r3, [pc, #16]	; (8005cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	0a1b      	lsrs	r3, r3, #8
 8005ce6:	f003 0307 	and.w	r3, r3, #7
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr
 8005cf4:	e000ed00 	.word	0xe000ed00

08005cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	db0b      	blt.n	8005d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
 8005d0c:	f003 021f 	and.w	r2, r3, #31
 8005d10:	4907      	ldr	r1, [pc, #28]	; (8005d30 <__NVIC_EnableIRQ+0x38>)
 8005d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	2001      	movs	r0, #1
 8005d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	e000e100 	.word	0xe000e100

08005d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	6039      	str	r1, [r7, #0]
 8005d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	db0a      	blt.n	8005d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	490c      	ldr	r1, [pc, #48]	; (8005d80 <__NVIC_SetPriority+0x4c>)
 8005d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d52:	0112      	lsls	r2, r2, #4
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	440b      	add	r3, r1
 8005d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d5c:	e00a      	b.n	8005d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	4908      	ldr	r1, [pc, #32]	; (8005d84 <__NVIC_SetPriority+0x50>)
 8005d64:	79fb      	ldrb	r3, [r7, #7]
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	3b04      	subs	r3, #4
 8005d6c:	0112      	lsls	r2, r2, #4
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	440b      	add	r3, r1
 8005d72:	761a      	strb	r2, [r3, #24]
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	e000e100 	.word	0xe000e100
 8005d84:	e000ed00 	.word	0xe000ed00

08005d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b089      	sub	sp, #36	; 0x24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	f1c3 0307 	rsb	r3, r3, #7
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	bf28      	it	cs
 8005da6:	2304      	movcs	r3, #4
 8005da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	3304      	adds	r3, #4
 8005dae:	2b06      	cmp	r3, #6
 8005db0:	d902      	bls.n	8005db8 <NVIC_EncodePriority+0x30>
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	3b03      	subs	r3, #3
 8005db6:	e000      	b.n	8005dba <NVIC_EncodePriority+0x32>
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	43da      	mvns	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	401a      	ands	r2, r3
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dda:	43d9      	mvns	r1, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005de0:	4313      	orrs	r3, r2
         );
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3724      	adds	r7, #36	; 0x24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e00:	d301      	bcc.n	8005e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e02:	2301      	movs	r3, #1
 8005e04:	e00f      	b.n	8005e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e06:	4a0a      	ldr	r2, [pc, #40]	; (8005e30 <SysTick_Config+0x40>)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e0e:	210f      	movs	r1, #15
 8005e10:	f04f 30ff 	mov.w	r0, #4294967295
 8005e14:	f7ff ff8e 	bl	8005d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e18:	4b05      	ldr	r3, [pc, #20]	; (8005e30 <SysTick_Config+0x40>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e1e:	4b04      	ldr	r3, [pc, #16]	; (8005e30 <SysTick_Config+0x40>)
 8005e20:	2207      	movs	r2, #7
 8005e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	e000e010 	.word	0xe000e010

08005e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff ff29 	bl	8005c94 <__NVIC_SetPriorityGrouping>
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b086      	sub	sp, #24
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	4603      	mov	r3, r0
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	607a      	str	r2, [r7, #4]
 8005e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e5c:	f7ff ff3e 	bl	8005cdc <__NVIC_GetPriorityGrouping>
 8005e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	6978      	ldr	r0, [r7, #20]
 8005e68:	f7ff ff8e 	bl	8005d88 <NVIC_EncodePriority>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e72:	4611      	mov	r1, r2
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff ff5d 	bl	8005d34 <__NVIC_SetPriority>
}
 8005e7a:	bf00      	nop
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b082      	sub	sp, #8
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	4603      	mov	r3, r0
 8005e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff ff31 	bl	8005cf8 <__NVIC_EnableIRQ>
}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff ffa2 	bl	8005df0 <SysTick_Config>
 8005eac:	4603      	mov	r3, r0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
	...

08005eb8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e098      	b.n	8005ffc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	4b4d      	ldr	r3, [pc, #308]	; (8006008 <HAL_DMA_Init+0x150>)
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d80f      	bhi.n	8005ef6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	4b4b      	ldr	r3, [pc, #300]	; (800600c <HAL_DMA_Init+0x154>)
 8005ede:	4413      	add	r3, r2
 8005ee0:	4a4b      	ldr	r2, [pc, #300]	; (8006010 <HAL_DMA_Init+0x158>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	091b      	lsrs	r3, r3, #4
 8005ee8:	009a      	lsls	r2, r3, #2
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a48      	ldr	r2, [pc, #288]	; (8006014 <HAL_DMA_Init+0x15c>)
 8005ef2:	641a      	str	r2, [r3, #64]	; 0x40
 8005ef4:	e00e      	b.n	8005f14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	4b46      	ldr	r3, [pc, #280]	; (8006018 <HAL_DMA_Init+0x160>)
 8005efe:	4413      	add	r3, r2
 8005f00:	4a43      	ldr	r2, [pc, #268]	; (8006010 <HAL_DMA_Init+0x158>)
 8005f02:	fba2 2303 	umull	r2, r3, r2, r3
 8005f06:	091b      	lsrs	r3, r3, #4
 8005f08:	009a      	lsls	r2, r3, #2
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a42      	ldr	r2, [pc, #264]	; (800601c <HAL_DMA_Init+0x164>)
 8005f12:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a1b      	ldr	r3, [r3, #32]
 8005f56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f6e:	d039      	beq.n	8005fe4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	4a27      	ldr	r2, [pc, #156]	; (8006014 <HAL_DMA_Init+0x15c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d11a      	bne.n	8005fb0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005f7a:	4b29      	ldr	r3, [pc, #164]	; (8006020 <HAL_DMA_Init+0x168>)
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f82:	f003 031c 	and.w	r3, r3, #28
 8005f86:	210f      	movs	r1, #15
 8005f88:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8c:	43db      	mvns	r3, r3
 8005f8e:	4924      	ldr	r1, [pc, #144]	; (8006020 <HAL_DMA_Init+0x168>)
 8005f90:	4013      	ands	r3, r2
 8005f92:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005f94:	4b22      	ldr	r3, [pc, #136]	; (8006020 <HAL_DMA_Init+0x168>)
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6859      	ldr	r1, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa0:	f003 031c 	and.w	r3, r3, #28
 8005fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa8:	491d      	ldr	r1, [pc, #116]	; (8006020 <HAL_DMA_Init+0x168>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	600b      	str	r3, [r1, #0]
 8005fae:	e019      	b.n	8005fe4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005fb0:	4b1c      	ldr	r3, [pc, #112]	; (8006024 <HAL_DMA_Init+0x16c>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb8:	f003 031c 	and.w	r3, r3, #28
 8005fbc:	210f      	movs	r1, #15
 8005fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	4917      	ldr	r1, [pc, #92]	; (8006024 <HAL_DMA_Init+0x16c>)
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005fca:	4b16      	ldr	r3, [pc, #88]	; (8006024 <HAL_DMA_Init+0x16c>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6859      	ldr	r1, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	f003 031c 	and.w	r3, r3, #28
 8005fda:	fa01 f303 	lsl.w	r3, r1, r3
 8005fde:	4911      	ldr	r1, [pc, #68]	; (8006024 <HAL_DMA_Init+0x16c>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	40020407 	.word	0x40020407
 800600c:	bffdfff8 	.word	0xbffdfff8
 8006010:	cccccccd 	.word	0xcccccccd
 8006014:	40020000 	.word	0x40020000
 8006018:	bffdfbf8 	.word	0xbffdfbf8
 800601c:	40020400 	.word	0x40020400
 8006020:	400200a8 	.word	0x400200a8
 8006024:	400204a8 	.word	0x400204a8

08006028 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006040:	2b01      	cmp	r3, #1
 8006042:	d101      	bne.n	8006048 <HAL_DMA_Start_IT+0x20>
 8006044:	2302      	movs	r3, #2
 8006046:	e04b      	b.n	80060e0 <HAL_DMA_Start_IT+0xb8>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b01      	cmp	r3, #1
 800605a:	d13a      	bne.n	80060d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0201 	bic.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f96b 	bl	800635c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608a:	2b00      	cmp	r3, #0
 800608c:	d008      	beq.n	80060a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f042 020e 	orr.w	r2, r2, #14
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	e00f      	b.n	80060c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0204 	bic.w	r2, r2, #4
 80060ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 020a 	orr.w	r2, r2, #10
 80060be:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0201 	orr.w	r2, r2, #1
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	e005      	b.n	80060de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80060da:	2302      	movs	r3, #2
 80060dc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80060de:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d008      	beq.n	8006112 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2204      	movs	r2, #4
 8006104:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e022      	b.n	8006158 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 020e 	bic.w	r2, r2, #14
 8006120:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0201 	bic.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006136:	f003 021c 	and.w	r2, r3, #28
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	2101      	movs	r1, #1
 8006140:	fa01 f202 	lsl.w	r2, r1, r2
 8006144:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006156:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d005      	beq.n	8006188 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2204      	movs	r2, #4
 8006180:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	73fb      	strb	r3, [r7, #15]
 8006186:	e029      	b.n	80061dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 020e 	bic.w	r2, r2, #14
 8006196:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0201 	bic.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ac:	f003 021c 	and.w	r2, r3, #28
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	2101      	movs	r1, #1
 80061b6:	fa01 f202 	lsl.w	r2, r1, r2
 80061ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	4798      	blx	r3
    }
  }
  return status;
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006202:	f003 031c 	and.w	r3, r3, #28
 8006206:	2204      	movs	r2, #4
 8006208:	409a      	lsls	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4013      	ands	r3, r2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d026      	beq.n	8006260 <HAL_DMA_IRQHandler+0x7a>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d021      	beq.n	8006260 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0320 	and.w	r3, r3, #32
 8006226:	2b00      	cmp	r3, #0
 8006228:	d107      	bne.n	800623a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0204 	bic.w	r2, r2, #4
 8006238:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623e:	f003 021c 	and.w	r2, r3, #28
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	2104      	movs	r1, #4
 8006248:	fa01 f202 	lsl.w	r2, r1, r2
 800624c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	2b00      	cmp	r3, #0
 8006254:	d071      	beq.n	800633a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800625e:	e06c      	b.n	800633a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006264:	f003 031c 	and.w	r3, r3, #28
 8006268:	2202      	movs	r2, #2
 800626a:	409a      	lsls	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4013      	ands	r3, r2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d02e      	beq.n	80062d2 <HAL_DMA_IRQHandler+0xec>
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d029      	beq.n	80062d2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10b      	bne.n	80062a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 020a 	bic.w	r2, r2, #10
 800629a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a8:	f003 021c 	and.w	r2, r3, #28
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b0:	2102      	movs	r1, #2
 80062b2:	fa01 f202 	lsl.w	r2, r1, r2
 80062b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d038      	beq.n	800633a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80062d0:	e033      	b.n	800633a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	f003 031c 	and.w	r3, r3, #28
 80062da:	2208      	movs	r2, #8
 80062dc:	409a      	lsls	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d02a      	beq.n	800633c <HAL_DMA_IRQHandler+0x156>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f003 0308 	and.w	r3, r3, #8
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d025      	beq.n	800633c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 020e 	bic.w	r2, r2, #14
 80062fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006304:	f003 021c 	and.w	r2, r3, #28
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630c:	2101      	movs	r1, #1
 800630e:	fa01 f202 	lsl.w	r2, r1, r2
 8006312:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632e:	2b00      	cmp	r3, #0
 8006330:	d004      	beq.n	800633c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800633a:	bf00      	nop
 800633c:	bf00      	nop
}
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636e:	f003 021c 	and.w	r2, r3, #28
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	2101      	movs	r1, #1
 8006378:	fa01 f202 	lsl.w	r2, r1, r2
 800637c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	2b10      	cmp	r3, #16
 800638c:	d108      	bne.n	80063a0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800639e:	e007      	b.n	80063b0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	60da      	str	r2, [r3, #12]
}
 80063b0:	bf00      	nop
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063ca:	e148      	b.n	800665e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	2101      	movs	r1, #1
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	fa01 f303 	lsl.w	r3, r1, r3
 80063d8:	4013      	ands	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 813a 	beq.w	8006658 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f003 0303 	and.w	r3, r3, #3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d005      	beq.n	80063fc <HAL_GPIO_Init+0x40>
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	f003 0303 	and.w	r3, r3, #3
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d130      	bne.n	800645e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	2203      	movs	r2, #3
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	43db      	mvns	r3, r3
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	4013      	ands	r3, r2
 8006412:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	fa02 f303 	lsl.w	r3, r2, r3
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006432:	2201      	movs	r2, #1
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	43db      	mvns	r3, r3
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4013      	ands	r3, r2
 8006440:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	091b      	lsrs	r3, r3, #4
 8006448:	f003 0201 	and.w	r2, r3, #1
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	fa02 f303 	lsl.w	r3, r2, r3
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	2b03      	cmp	r3, #3
 8006468:	d017      	beq.n	800649a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	2203      	movs	r2, #3
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	43db      	mvns	r3, r3
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	4013      	ands	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	fa02 f303 	lsl.w	r3, r2, r3
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d123      	bne.n	80064ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	08da      	lsrs	r2, r3, #3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3208      	adds	r2, #8
 80064ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	220f      	movs	r2, #15
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	43db      	mvns	r3, r3
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4013      	ands	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	691a      	ldr	r2, [r3, #16]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f003 0307 	and.w	r3, r3, #7
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	fa02 f303 	lsl.w	r3, r2, r3
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	08da      	lsrs	r2, r3, #3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3208      	adds	r2, #8
 80064e8:	6939      	ldr	r1, [r7, #16]
 80064ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	2203      	movs	r2, #3
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	43db      	mvns	r3, r3
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4013      	ands	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f003 0203 	and.w	r2, r3, #3
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	693a      	ldr	r2, [r7, #16]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 8094 	beq.w	8006658 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006530:	4b52      	ldr	r3, [pc, #328]	; (800667c <HAL_GPIO_Init+0x2c0>)
 8006532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006534:	4a51      	ldr	r2, [pc, #324]	; (800667c <HAL_GPIO_Init+0x2c0>)
 8006536:	f043 0301 	orr.w	r3, r3, #1
 800653a:	6613      	str	r3, [r2, #96]	; 0x60
 800653c:	4b4f      	ldr	r3, [pc, #316]	; (800667c <HAL_GPIO_Init+0x2c0>)
 800653e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	60bb      	str	r3, [r7, #8]
 8006546:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006548:	4a4d      	ldr	r2, [pc, #308]	; (8006680 <HAL_GPIO_Init+0x2c4>)
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	089b      	lsrs	r3, r3, #2
 800654e:	3302      	adds	r3, #2
 8006550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006554:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f003 0303 	and.w	r3, r3, #3
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	220f      	movs	r2, #15
 8006560:	fa02 f303 	lsl.w	r3, r2, r3
 8006564:	43db      	mvns	r3, r3
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4013      	ands	r3, r2
 800656a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006572:	d00d      	beq.n	8006590 <HAL_GPIO_Init+0x1d4>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a43      	ldr	r2, [pc, #268]	; (8006684 <HAL_GPIO_Init+0x2c8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d007      	beq.n	800658c <HAL_GPIO_Init+0x1d0>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a42      	ldr	r2, [pc, #264]	; (8006688 <HAL_GPIO_Init+0x2cc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d101      	bne.n	8006588 <HAL_GPIO_Init+0x1cc>
 8006584:	2302      	movs	r3, #2
 8006586:	e004      	b.n	8006592 <HAL_GPIO_Init+0x1d6>
 8006588:	2307      	movs	r3, #7
 800658a:	e002      	b.n	8006592 <HAL_GPIO_Init+0x1d6>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <HAL_GPIO_Init+0x1d6>
 8006590:	2300      	movs	r3, #0
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	f002 0203 	and.w	r2, r2, #3
 8006598:	0092      	lsls	r2, r2, #2
 800659a:	4093      	lsls	r3, r2
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80065a2:	4937      	ldr	r1, [pc, #220]	; (8006680 <HAL_GPIO_Init+0x2c4>)
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	089b      	lsrs	r3, r3, #2
 80065a8:	3302      	adds	r3, #2
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80065b0:	4b36      	ldr	r3, [pc, #216]	; (800668c <HAL_GPIO_Init+0x2d0>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	43db      	mvns	r3, r3
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4013      	ands	r3, r2
 80065be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80065d4:	4a2d      	ldr	r2, [pc, #180]	; (800668c <HAL_GPIO_Init+0x2d0>)
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80065da:	4b2c      	ldr	r3, [pc, #176]	; (800668c <HAL_GPIO_Init+0x2d0>)
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	43db      	mvns	r3, r3
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	4013      	ands	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80065fe:	4a23      	ldr	r2, [pc, #140]	; (800668c <HAL_GPIO_Init+0x2d0>)
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006604:	4b21      	ldr	r3, [pc, #132]	; (800668c <HAL_GPIO_Init+0x2d0>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	43db      	mvns	r3, r3
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4013      	ands	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006628:	4a18      	ldr	r2, [pc, #96]	; (800668c <HAL_GPIO_Init+0x2d0>)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800662e:	4b17      	ldr	r3, [pc, #92]	; (800668c <HAL_GPIO_Init+0x2d0>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	43db      	mvns	r3, r3
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4013      	ands	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006652:	4a0e      	ldr	r2, [pc, #56]	; (800668c <HAL_GPIO_Init+0x2d0>)
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	3301      	adds	r3, #1
 800665c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	f47f aeaf 	bne.w	80063cc <HAL_GPIO_Init+0x10>
  }
}
 800666e:	bf00      	nop
 8006670:	bf00      	nop
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	40021000 	.word	0x40021000
 8006680:	40010000 	.word	0x40010000
 8006684:	48000400 	.word	0x48000400
 8006688:	48000800 	.word	0x48000800
 800668c:	40010400 	.word	0x40010400

08006690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	807b      	strh	r3, [r7, #2]
 800669c:	4613      	mov	r3, r2
 800669e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066a0:	787b      	ldrb	r3, [r7, #1]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80066a6:	887a      	ldrh	r2, [r7, #2]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80066ac:	e002      	b.n	80066b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80066ae:	887a      	ldrh	r2, [r7, #2]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80066ca:	4b08      	ldr	r3, [pc, #32]	; (80066ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066cc:	695a      	ldr	r2, [r3, #20]
 80066ce:	88fb      	ldrh	r3, [r7, #6]
 80066d0:	4013      	ands	r3, r2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d006      	beq.n	80066e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066d6:	4a05      	ldr	r2, [pc, #20]	; (80066ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80066d8:	88fb      	ldrh	r3, [r7, #6]
 80066da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066dc:	88fb      	ldrh	r3, [r7, #6]
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fa fcf4 	bl	80010cc <HAL_GPIO_EXTI_Callback>
  }
}
 80066e4:	bf00      	nop
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	40010400 	.word	0x40010400

080066f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e08d      	b.n	800681e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d106      	bne.n	800671c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7fd fc60 	bl	8003fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2224      	movs	r2, #36	; 0x24
 8006720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f022 0201 	bic.w	r2, r2, #1
 8006732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006740:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006750:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d107      	bne.n	800676a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006766:	609a      	str	r2, [r3, #8]
 8006768:	e006      	b.n	8006778 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006776:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	2b02      	cmp	r3, #2
 800677e:	d108      	bne.n	8006792 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800678e:	605a      	str	r2, [r3, #4]
 8006790:	e007      	b.n	80067a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6812      	ldr	r2, [r2, #0]
 80067ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80067b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	69d9      	ldr	r1, [r3, #28]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1a      	ldr	r2, [r3, #32]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 0201 	orr.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af02      	add	r7, sp, #8
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	4608      	mov	r0, r1
 8006832:	4611      	mov	r1, r2
 8006834:	461a      	mov	r2, r3
 8006836:	4603      	mov	r3, r0
 8006838:	817b      	strh	r3, [r7, #10]
 800683a:	460b      	mov	r3, r1
 800683c:	813b      	strh	r3, [r7, #8]
 800683e:	4613      	mov	r3, r2
 8006840:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b20      	cmp	r3, #32
 800684c:	f040 80f9 	bne.w	8006a42 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <HAL_I2C_Mem_Write+0x34>
 8006856:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	d105      	bne.n	8006868 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006862:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e0ed      	b.n	8006a44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_I2C_Mem_Write+0x4e>
 8006872:	2302      	movs	r3, #2
 8006874:	e0e6      	b.n	8006a44 <HAL_I2C_Mem_Write+0x21c>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800687e:	f7fd ff39 	bl	80046f4 <HAL_GetTick>
 8006882:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	2319      	movs	r3, #25
 800688a:	2201      	movs	r2, #1
 800688c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f955 	bl	8006b40 <I2C_WaitOnFlagUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e0d1      	b.n	8006a44 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2221      	movs	r2, #33	; 0x21
 80068a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2240      	movs	r2, #64	; 0x40
 80068ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a3a      	ldr	r2, [r7, #32]
 80068ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068c8:	88f8      	ldrh	r0, [r7, #6]
 80068ca:	893a      	ldrh	r2, [r7, #8]
 80068cc:	8979      	ldrh	r1, [r7, #10]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	9301      	str	r3, [sp, #4]
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	4603      	mov	r3, r0
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 f8b9 	bl	8006a50 <I2C_RequestMemoryWrite>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e0a9      	b.n	8006a44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	2bff      	cmp	r3, #255	; 0xff
 80068f8:	d90e      	bls.n	8006918 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	22ff      	movs	r2, #255	; 0xff
 80068fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006904:	b2da      	uxtb	r2, r3
 8006906:	8979      	ldrh	r1, [r7, #10]
 8006908:	2300      	movs	r3, #0
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 facf 	bl	8006eb4 <I2C_TransferConfig>
 8006916:	e00f      	b.n	8006938 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006926:	b2da      	uxtb	r2, r3
 8006928:	8979      	ldrh	r1, [r7, #10]
 800692a:	2300      	movs	r3, #0
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f000 fabe 	bl	8006eb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f94e 	bl	8006bde <I2C_WaitOnTXISFlagUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e07b      	b.n	8006a44 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	781a      	ldrb	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006974:	3b01      	subs	r3, #1
 8006976:	b29a      	uxth	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006980:	b29b      	uxth	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d034      	beq.n	80069f0 <HAL_I2C_Mem_Write+0x1c8>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800698a:	2b00      	cmp	r3, #0
 800698c:	d130      	bne.n	80069f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	2200      	movs	r2, #0
 8006996:	2180      	movs	r1, #128	; 0x80
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 f8d1 	bl	8006b40 <I2C_WaitOnFlagUntilTimeout>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e04d      	b.n	8006a44 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2bff      	cmp	r3, #255	; 0xff
 80069b0:	d90e      	bls.n	80069d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	22ff      	movs	r2, #255	; 0xff
 80069b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	8979      	ldrh	r1, [r7, #10]
 80069c0:	2300      	movs	r3, #0
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 fa73 	bl	8006eb4 <I2C_TransferConfig>
 80069ce:	e00f      	b.n	80069f0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	8979      	ldrh	r1, [r7, #10]
 80069e2:	2300      	movs	r3, #0
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 fa62 	bl	8006eb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d19e      	bne.n	8006938 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 f934 	bl	8006c6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e01a      	b.n	8006a44 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2220      	movs	r2, #32
 8006a14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6859      	ldr	r1, [r3, #4]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <HAL_I2C_Mem_Write+0x224>)
 8006a22:	400b      	ands	r3, r1
 8006a24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e000      	b.n	8006a44 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006a42:	2302      	movs	r3, #2
  }
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	fe00e800 	.word	0xfe00e800

08006a50 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	4608      	mov	r0, r1
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4603      	mov	r3, r0
 8006a60:	817b      	strh	r3, [r7, #10]
 8006a62:	460b      	mov	r3, r1
 8006a64:	813b      	strh	r3, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006a6a:	88fb      	ldrh	r3, [r7, #6]
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	8979      	ldrh	r1, [r7, #10]
 8006a70:	4b20      	ldr	r3, [pc, #128]	; (8006af4 <I2C_RequestMemoryWrite+0xa4>)
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 fa1b 	bl	8006eb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a7e:	69fa      	ldr	r2, [r7, #28]
 8006a80:	69b9      	ldr	r1, [r7, #24]
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 f8ab 	bl	8006bde <I2C_WaitOnTXISFlagUntilTimeout>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d001      	beq.n	8006a92 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e02c      	b.n	8006aec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a92:	88fb      	ldrh	r3, [r7, #6]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d105      	bne.n	8006aa4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a98:	893b      	ldrh	r3, [r7, #8]
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	629a      	str	r2, [r3, #40]	; 0x28
 8006aa2:	e015      	b.n	8006ad0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006aa4:	893b      	ldrh	r3, [r7, #8]
 8006aa6:	0a1b      	lsrs	r3, r3, #8
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ab2:	69fa      	ldr	r2, [r7, #28]
 8006ab4:	69b9      	ldr	r1, [r7, #24]
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 f891 	bl	8006bde <I2C_WaitOnTXISFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e012      	b.n	8006aec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ac6:	893b      	ldrh	r3, [r7, #8]
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2180      	movs	r1, #128	; 0x80
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 f830 	bl	8006b40 <I2C_WaitOnFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e000      	b.n	8006aec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	80002000 	.word	0x80002000

08006af8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d103      	bne.n	8006b16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2200      	movs	r2, #0
 8006b14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d007      	beq.n	8006b34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	619a      	str	r2, [r3, #24]
  }
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	603b      	str	r3, [r7, #0]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b50:	e031      	b.n	8006bb6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b58:	d02d      	beq.n	8006bb6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b5a:	f7fd fdcb 	bl	80046f4 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d302      	bcc.n	8006b70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d122      	bne.n	8006bb6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	4013      	ands	r3, r2
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	bf0c      	ite	eq
 8006b80:	2301      	moveq	r3, #1
 8006b82:	2300      	movne	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	461a      	mov	r2, r3
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d113      	bne.n	8006bb6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b92:	f043 0220 	orr.w	r2, r3, #32
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e00f      	b.n	8006bd6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	699a      	ldr	r2, [r3, #24]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	bf0c      	ite	eq
 8006bc6:	2301      	moveq	r3, #1
 8006bc8:	2300      	movne	r3, #0
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	461a      	mov	r2, r3
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d0be      	beq.n	8006b52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	60f8      	str	r0, [r7, #12]
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bea:	e033      	b.n	8006c54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	68b9      	ldr	r1, [r7, #8]
 8006bf0:	68f8      	ldr	r0, [r7, #12]
 8006bf2:	f000 f87f 	bl	8006cf4 <I2C_IsErrorOccurred>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e031      	b.n	8006c64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c06:	d025      	beq.n	8006c54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c08:	f7fd fd74 	bl	80046f4 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d302      	bcc.n	8006c1e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d11a      	bne.n	8006c54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d013      	beq.n	8006c54 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c30:	f043 0220 	orr.w	r2, r3, #32
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e007      	b.n	8006c64 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d1c4      	bne.n	8006bec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c78:	e02f      	b.n	8006cda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 f838 	bl	8006cf4 <I2C_IsErrorOccurred>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e02d      	b.n	8006cea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c8e:	f7fd fd31 	bl	80046f4 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d302      	bcc.n	8006ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d11a      	bne.n	8006cda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	f003 0320 	and.w	r3, r3, #32
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d013      	beq.n	8006cda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb6:	f043 0220 	orr.w	r2, r3, #32
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e007      	b.n	8006cea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	f003 0320 	and.w	r3, r3, #32
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	d1c8      	bne.n	8006c7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08a      	sub	sp, #40	; 0x28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	f003 0310 	and.w	r3, r3, #16
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d068      	beq.n	8006df2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2210      	movs	r2, #16
 8006d26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d28:	e049      	b.n	8006dbe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d30:	d045      	beq.n	8006dbe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006d32:	f7fd fcdf 	bl	80046f4 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d302      	bcc.n	8006d48 <I2C_IsErrorOccurred+0x54>
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d13a      	bne.n	8006dbe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d6a:	d121      	bne.n	8006db0 <I2C_IsErrorOccurred+0xbc>
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d72:	d01d      	beq.n	8006db0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006d74:	7cfb      	ldrb	r3, [r7, #19]
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d01a      	beq.n	8006db0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006d8a:	f7fd fcb3 	bl	80046f4 <HAL_GetTick>
 8006d8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d90:	e00e      	b.n	8006db0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006d92:	f7fd fcaf 	bl	80046f4 <HAL_GetTick>
 8006d96:	4602      	mov	r2, r0
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	2b19      	cmp	r3, #25
 8006d9e:	d907      	bls.n	8006db0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	f043 0320 	orr.w	r3, r3, #32
 8006da6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006dae:	e006      	b.n	8006dbe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	f003 0320 	and.w	r3, r3, #32
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	d1e9      	bne.n	8006d92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	d003      	beq.n	8006dd4 <I2C_IsErrorOccurred+0xe0>
 8006dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0aa      	beq.n	8006d2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d103      	bne.n	8006de4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2220      	movs	r2, #32
 8006de2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	f043 0304 	orr.w	r3, r3, #4
 8006dea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00b      	beq.n	8006e3e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	f043 0308 	orr.w	r3, r3, #8
 8006e2c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00b      	beq.n	8006e60 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	f043 0302 	orr.w	r3, r3, #2
 8006e4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d01c      	beq.n	8006ea2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f7ff fe45 	bl	8006af8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6859      	ldr	r1, [r3, #4]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	4b0d      	ldr	r3, [pc, #52]	; (8006eb0 <I2C_IsErrorOccurred+0x1bc>)
 8006e7a:	400b      	ands	r3, r1
 8006e7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	431a      	orrs	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3728      	adds	r7, #40	; 0x28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	fe00e800 	.word	0xfe00e800

08006eb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	607b      	str	r3, [r7, #4]
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	817b      	strh	r3, [r7, #10]
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ec6:	897b      	ldrh	r3, [r7, #10]
 8006ec8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ecc:	7a7b      	ldrb	r3, [r7, #9]
 8006ece:	041b      	lsls	r3, r3, #16
 8006ed0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ed4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ee2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	0d5b      	lsrs	r3, r3, #21
 8006eee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006ef2:	4b08      	ldr	r3, [pc, #32]	; (8006f14 <I2C_TransferConfig+0x60>)
 8006ef4:	430b      	orrs	r3, r1
 8006ef6:	43db      	mvns	r3, r3
 8006ef8:	ea02 0103 	and.w	r1, r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006f06:	bf00      	nop
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	03ff63ff 	.word	0x03ff63ff

08006f18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	d138      	bne.n	8006fa0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e032      	b.n	8006fa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2224      	movs	r2, #36	; 0x24
 8006f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f022 0201 	bic.w	r2, r2, #1
 8006f5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6819      	ldr	r1, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0201 	orr.w	r2, r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	e000      	b.n	8006fa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006fa0:	2302      	movs	r3, #2
  }
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	370c      	adds	r7, #12
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b085      	sub	sp, #20
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	d139      	bne.n	8007038 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d101      	bne.n	8006fd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	e033      	b.n	800703a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2224      	movs	r2, #36	; 0x24
 8006fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0201 	bic.w	r2, r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007000:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	4313      	orrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2220      	movs	r2, #32
 8007028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	e000      	b.n	800703a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007038:	2302      	movs	r3, #2
  }
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007046:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007048:	b08b      	sub	sp, #44	; 0x2c
 800704a:	af06      	add	r7, sp, #24
 800704c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e0f8      	b.n	800724a <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d106      	bne.n	8007072 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f008 ffcd 	bl	801000c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2203      	movs	r2, #3
 8007076:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4618      	mov	r0, r3
 8007080:	f004 fe18 	bl	800bcb4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	603b      	str	r3, [r7, #0]
 800708a:	687e      	ldr	r6, [r7, #4]
 800708c:	466d      	mov	r5, sp
 800708e:	f106 0410 	add.w	r4, r6, #16
 8007092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	602b      	str	r3, [r5, #0]
 800709a:	1d33      	adds	r3, r6, #4
 800709c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800709e:	6838      	ldr	r0, [r7, #0]
 80070a0:	f004 fde0 	bl	800bc64 <USB_CoreInit>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d005      	beq.n	80070b6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2202      	movs	r2, #2
 80070ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e0c9      	b.n	800724a <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2100      	movs	r1, #0
 80070bc:	4618      	mov	r0, r3
 80070be:	f004 fe14 	bl	800bcea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070c2:	2300      	movs	r3, #0
 80070c4:	73fb      	strb	r3, [r7, #15]
 80070c6:	e040      	b.n	800714a <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
 80070ca:	6879      	ldr	r1, [r7, #4]
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	4613      	mov	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	4413      	add	r3, r2
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	440b      	add	r3, r1
 80070d8:	3301      	adds	r3, #1
 80070da:	2201      	movs	r2, #1
 80070dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	4613      	mov	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	440b      	add	r3, r1
 80070ee:	7bfa      	ldrb	r2, [r7, #15]
 80070f0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	440b      	add	r3, r1
 8007102:	3303      	adds	r3, #3
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007108:	7bfa      	ldrb	r2, [r7, #15]
 800710a:	6879      	ldr	r1, [r7, #4]
 800710c:	4613      	mov	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	440b      	add	r3, r1
 8007116:	3338      	adds	r3, #56	; 0x38
 8007118:	2200      	movs	r2, #0
 800711a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800711c:	7bfa      	ldrb	r2, [r7, #15]
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4613      	mov	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	440b      	add	r3, r1
 800712a:	333c      	adds	r3, #60	; 0x3c
 800712c:	2200      	movs	r2, #0
 800712e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007130:	7bfa      	ldrb	r2, [r7, #15]
 8007132:	6879      	ldr	r1, [r7, #4]
 8007134:	4613      	mov	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4413      	add	r3, r2
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	440b      	add	r3, r1
 800713e:	3340      	adds	r3, #64	; 0x40
 8007140:	2200      	movs	r2, #0
 8007142:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	3301      	adds	r3, #1
 8007148:	73fb      	strb	r3, [r7, #15]
 800714a:	7bfa      	ldrb	r2, [r7, #15]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	d3b9      	bcc.n	80070c8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007154:	2300      	movs	r3, #0
 8007156:	73fb      	strb	r3, [r7, #15]
 8007158:	e044      	b.n	80071e4 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800715a:	7bfa      	ldrb	r2, [r7, #15]
 800715c:	6879      	ldr	r1, [r7, #4]
 800715e:	4613      	mov	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	440b      	add	r3, r1
 8007168:	f203 1369 	addw	r3, r3, #361	; 0x169
 800716c:	2200      	movs	r2, #0
 800716e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007170:	7bfa      	ldrb	r2, [r7, #15]
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	4613      	mov	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	440b      	add	r3, r1
 800717e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007182:	7bfa      	ldrb	r2, [r7, #15]
 8007184:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007186:	7bfa      	ldrb	r2, [r7, #15]
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	4613      	mov	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	440b      	add	r3, r1
 8007194:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8007198:	2200      	movs	r2, #0
 800719a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800719c:	7bfa      	ldrb	r2, [r7, #15]
 800719e:	6879      	ldr	r1, [r7, #4]
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	440b      	add	r3, r1
 80071aa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80071ae:	2200      	movs	r2, #0
 80071b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80071b2:	7bfa      	ldrb	r2, [r7, #15]
 80071b4:	6879      	ldr	r1, [r7, #4]
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	00db      	lsls	r3, r3, #3
 80071be:	440b      	add	r3, r1
 80071c0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80071c8:	7bfa      	ldrb	r2, [r7, #15]
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	4613      	mov	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	00db      	lsls	r3, r3, #3
 80071d4:	440b      	add	r3, r1
 80071d6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80071da:	2200      	movs	r2, #0
 80071dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071de:	7bfb      	ldrb	r3, [r7, #15]
 80071e0:	3301      	adds	r3, #1
 80071e2:	73fb      	strb	r3, [r7, #15]
 80071e4:	7bfa      	ldrb	r2, [r7, #15]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d3b5      	bcc.n	800715a <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	603b      	str	r3, [r7, #0]
 80071f4:	687e      	ldr	r6, [r7, #4]
 80071f6:	466d      	mov	r5, sp
 80071f8:	f106 0410 	add.w	r4, r6, #16
 80071fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	602b      	str	r3, [r5, #0]
 8007204:	1d33      	adds	r3, r6, #4
 8007206:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007208:	6838      	ldr	r0, [r7, #0]
 800720a:	f004 fd7b 	bl	800bd04 <USB_DevInit>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d005      	beq.n	8007220 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e014      	b.n	800724a <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d102      	bne.n	800723e <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 fc40 	bl	8008abe <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4618      	mov	r0, r3
 8007244:	f007 f80c 	bl	800e260 <USB_DevDisconnect>

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007252 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_PCD_Start+0x16>
 8007264:	2302      	movs	r3, #2
 8007266:	e012      	b.n	800728e <HAL_PCD_Start+0x3c>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4618      	mov	r0, r3
 8007276:	f004 fd06 	bl	800bc86 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4618      	mov	r0, r3
 8007280:	f006 ffd7 	bl	800e232 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b084      	sub	sp, #16
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f006 fff1 	bl	800e28a <USB_ReadInterrupts>
 80072a8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d003      	beq.n	80072bc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fafb 	bl	80078b0 <PCD_EP_ISR_Handler>

    return;
 80072ba:	e110      	b.n	80074de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d013      	beq.n	80072ee <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072d8:	b292      	uxth	r2, r2
 80072da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f008 ff0f 	bl	8010102 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80072e4:	2100      	movs	r1, #0
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f8fc 	bl	80074e4 <HAL_PCD_SetAddress>

    return;
 80072ec:	e0f7      	b.n	80074de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00c      	beq.n	8007312 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007300:	b29a      	uxth	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800730a:	b292      	uxth	r2, r2
 800730c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007310:	e0e5      	b.n	80074de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00c      	beq.n	8007336 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007324:	b29a      	uxth	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800732e:	b292      	uxth	r2, r2
 8007330:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007334:	e0d3      	b.n	80074de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d034      	beq.n	80073aa <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007348:	b29a      	uxth	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0204 	bic.w	r2, r2, #4
 8007352:	b292      	uxth	r2, r2
 8007354:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007360:	b29a      	uxth	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f022 0208 	bic.w	r2, r2, #8
 800736a:	b292      	uxth	r2, r2
 800736c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8007376:	2b01      	cmp	r3, #1
 8007378:	d107      	bne.n	800738a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007382:	2100      	movs	r1, #0
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f009 f947 	bl	8010618 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f008 fef2 	bl	8010174 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007398:	b29a      	uxth	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073a2:	b292      	uxth	r2, r2
 80073a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80073a8:	e099      	b.n	80074de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d027      	beq.n	8007404 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80073bc:	b29a      	uxth	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0208 	orr.w	r2, r2, #8
 80073c6:	b292      	uxth	r2, r2
 80073c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073de:	b292      	uxth	r2, r2
 80073e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80073ec:	b29a      	uxth	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0204 	orr.w	r2, r2, #4
 80073f6:	b292      	uxth	r2, r2
 80073f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f008 fe9f 	bl	8010140 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007402:	e06c      	b.n	80074de <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800740a:	2b00      	cmp	r3, #0
 800740c:	d040      	beq.n	8007490 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007416:	b29a      	uxth	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007420:	b292      	uxth	r2, r2
 8007422:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d12b      	bne.n	8007488 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007438:	b29a      	uxth	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0204 	orr.w	r2, r2, #4
 8007442:	b292      	uxth	r2, r2
 8007444:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007450:	b29a      	uxth	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0208 	orr.w	r2, r2, #8
 800745a:	b292      	uxth	r2, r2
 800745c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007470:	b29b      	uxth	r3, r3
 8007472:	089b      	lsrs	r3, r3, #2
 8007474:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800747e:	2101      	movs	r1, #1
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f009 f8c9 	bl	8010618 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8007486:	e02a      	b.n	80074de <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f008 fe59 	bl	8010140 <HAL_PCD_SuspendCallback>
    return;
 800748e:	e026      	b.n	80074de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00f      	beq.n	80074ba <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80074ac:	b292      	uxth	r2, r2
 80074ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f008 fe17 	bl	80100e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80074b8:	e011      	b.n	80074de <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00c      	beq.n	80074de <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074d6:	b292      	uxth	r2, r2
 80074d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80074dc:	bf00      	nop
  }
}
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d101      	bne.n	80074fe <HAL_PCD_SetAddress+0x1a>
 80074fa:	2302      	movs	r3, #2
 80074fc:	e013      	b.n	8007526 <HAL_PCD_SetAddress+0x42>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	78fa      	ldrb	r2, [r7, #3]
 800750a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	78fa      	ldrb	r2, [r7, #3]
 8007514:	4611      	mov	r1, r2
 8007516:	4618      	mov	r0, r3
 8007518:	f006 fe77 	bl	800e20a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	4608      	mov	r0, r1
 8007538:	4611      	mov	r1, r2
 800753a:	461a      	mov	r2, r3
 800753c:	4603      	mov	r3, r0
 800753e:	70fb      	strb	r3, [r7, #3]
 8007540:	460b      	mov	r3, r1
 8007542:	803b      	strh	r3, [r7, #0]
 8007544:	4613      	mov	r3, r2
 8007546:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800754c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007550:	2b00      	cmp	r3, #0
 8007552:	da0e      	bge.n	8007572 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	f003 0307 	and.w	r3, r3, #7
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	4413      	add	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2201      	movs	r2, #1
 800756e:	705a      	strb	r2, [r3, #1]
 8007570:	e00e      	b.n	8007590 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	f003 0207 	and.w	r2, r3, #7
 8007578:	4613      	mov	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	4413      	add	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007590:	78fb      	ldrb	r3, [r7, #3]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	b2da      	uxtb	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800759c:	883a      	ldrh	r2, [r7, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	78ba      	ldrb	r2, [r7, #2]
 80075a6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80075a8:	78bb      	ldrb	r3, [r7, #2]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d102      	bne.n	80075b4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_PCD_EP_Open+0x94>
 80075be:	2302      	movs	r3, #2
 80075c0:	e00e      	b.n	80075e0 <HAL_PCD_EP_Open+0xb2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68f9      	ldr	r1, [r7, #12]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f004 fbb9 	bl	800bd48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80075de:	7afb      	ldrb	r3, [r7, #11]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80075f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	da0e      	bge.n	800761a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	4613      	mov	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	4413      	add	r3, r2
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	4413      	add	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	705a      	strb	r2, [r3, #1]
 8007618:	e00e      	b.n	8007638 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	f003 0207 	and.w	r2, r3, #7
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	4413      	add	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	b2da      	uxtb	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800764a:	2b01      	cmp	r3, #1
 800764c:	d101      	bne.n	8007652 <HAL_PCD_EP_Close+0x6a>
 800764e:	2302      	movs	r3, #2
 8007650:	e00e      	b.n	8007670 <HAL_PCD_EP_Close+0x88>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68f9      	ldr	r1, [r7, #12]
 8007660:	4618      	mov	r0, r3
 8007662:	f004 ff35 	bl	800c4d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	607a      	str	r2, [r7, #4]
 8007682:	603b      	str	r3, [r7, #0]
 8007684:	460b      	mov	r3, r1
 8007686:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007688:	7afb      	ldrb	r3, [r7, #11]
 800768a:	f003 0207 	and.w	r2, r3, #7
 800768e:	4613      	mov	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4413      	add	r3, r2
 8007694:	00db      	lsls	r3, r3, #3
 8007696:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	4413      	add	r3, r2
 800769e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2200      	movs	r2, #0
 80076b0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2200      	movs	r2, #0
 80076b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80076b8:	7afb      	ldrb	r3, [r7, #11]
 80076ba:	f003 0307 	and.w	r3, r3, #7
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6979      	ldr	r1, [r7, #20]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f005 f8ed 	bl	800c8aa <USB_EPStartXfer>

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3718      	adds	r7, #24
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b086      	sub	sp, #24
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	603b      	str	r3, [r7, #0]
 80076e6:	460b      	mov	r3, r1
 80076e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80076ea:	7afb      	ldrb	r3, [r7, #11]
 80076ec:	f003 0307 	and.w	r3, r3, #7
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	4613      	mov	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	00db      	lsls	r3, r3, #3
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	4413      	add	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2200      	movs	r2, #0
 800771e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	2201      	movs	r2, #1
 8007724:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007726:	7afb      	ldrb	r3, [r7, #11]
 8007728:	f003 0307 	and.w	r3, r3, #7
 800772c:	b2da      	uxtb	r2, r3
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6979      	ldr	r1, [r7, #20]
 8007738:	4618      	mov	r0, r3
 800773a:	f005 f8b6 	bl	800c8aa <USB_EPStartXfer>

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007754:	78fb      	ldrb	r3, [r7, #3]
 8007756:	f003 0207 	and.w	r2, r3, #7
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	429a      	cmp	r2, r3
 8007760:	d901      	bls.n	8007766 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e04c      	b.n	8007800 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007766:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800776a:	2b00      	cmp	r3, #0
 800776c:	da0e      	bge.n	800778c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800776e:	78fb      	ldrb	r3, [r7, #3]
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	00db      	lsls	r3, r3, #3
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	4413      	add	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2201      	movs	r2, #1
 8007788:	705a      	strb	r2, [r3, #1]
 800778a:	e00c      	b.n	80077a6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800778c:	78fa      	ldrb	r2, [r7, #3]
 800778e:	4613      	mov	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	4413      	add	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	f003 0307 	and.w	r3, r3, #7
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_PCD_EP_SetStall+0x7e>
 80077c2:	2302      	movs	r3, #2
 80077c4:	e01c      	b.n	8007800 <HAL_PCD_EP_SetStall+0xb8>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68f9      	ldr	r1, [r7, #12]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f006 fc19 	bl	800e00c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	f003 0307 	and.w	r3, r3, #7
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d108      	bne.n	80077f6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80077ee:	4619      	mov	r1, r3
 80077f0:	4610      	mov	r0, r2
 80077f2:	f006 fd5a 	bl	800e2aa <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007814:	78fb      	ldrb	r3, [r7, #3]
 8007816:	f003 020f 	and.w	r2, r3, #15
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	429a      	cmp	r2, r3
 8007820:	d901      	bls.n	8007826 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e040      	b.n	80078a8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007826:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800782a:	2b00      	cmp	r3, #0
 800782c:	da0e      	bge.n	800784c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800782e:	78fb      	ldrb	r3, [r7, #3]
 8007830:	f003 0307 	and.w	r3, r3, #7
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	4613      	mov	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4413      	add	r3, r2
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	705a      	strb	r2, [r3, #1]
 800784a:	e00e      	b.n	800786a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800784c:	78fb      	ldrb	r3, [r7, #3]
 800784e:	f003 0207 	and.w	r2, r3, #7
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	00db      	lsls	r3, r3, #3
 800785a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	4413      	add	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2200      	movs	r2, #0
 8007868:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	f003 0307 	and.w	r3, r3, #7
 8007876:	b2da      	uxtb	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007882:	2b01      	cmp	r3, #1
 8007884:	d101      	bne.n	800788a <HAL_PCD_EP_ClrStall+0x82>
 8007886:	2302      	movs	r3, #2
 8007888:	e00e      	b.n	80078a8 <HAL_PCD_EP_ClrStall+0xa0>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68f9      	ldr	r1, [r7, #12]
 8007898:	4618      	mov	r0, r3
 800789a:	f006 fc08 	bl	800e0ae <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b096      	sub	sp, #88	; 0x58
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80078b8:	e3b1      	b.n	800801e <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80078c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80078c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	f003 030f 	and.w	r3, r3, #15
 80078d0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80078d4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f040 8173 	bne.w	8007bc4 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80078de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078e2:	f003 0310 	and.w	r3, r3, #16
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d150      	bne.n	800798c <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80078f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fa:	81fb      	strh	r3, [r7, #14]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	89fb      	ldrh	r3, [r7, #14]
 8007902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800790a:	b29b      	uxth	r3, r3
 800790c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3328      	adds	r3, #40	; 0x28
 8007912:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791c:	b29b      	uxth	r3, r3
 800791e:	461a      	mov	r2, r3
 8007920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	00db      	lsls	r3, r3, #3
 8007926:	4413      	add	r3, r2
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	6812      	ldr	r2, [r2, #0]
 800792c:	4413      	add	r3, r2
 800792e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800793a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800793c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800793e:	695a      	ldr	r2, [r3, #20]
 8007940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	441a      	add	r2, r3
 8007946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007948:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800794a:	2100      	movs	r1, #0
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f008 fbb0 	bl	80100b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 835f 	beq.w	800801e <PCD_EP_ISR_Handler+0x76e>
 8007960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	2b00      	cmp	r3, #0
 8007966:	f040 835a 	bne.w	800801e <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007970:	b2db      	uxtb	r3, r3
 8007972:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007976:	b2da      	uxtb	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	b292      	uxth	r2, r2
 800797e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800798a:	e348      	b.n	800801e <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007992:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800799e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80079a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d032      	beq.n	8007a10 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	4413      	add	r3, r2
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	6812      	ldr	r2, [r2, #0]
 80079c2:	4413      	add	r3, r2
 80079c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079c8:	881b      	ldrh	r3, [r3, #0]
 80079ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80079ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079d0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6818      	ldr	r0, [r3, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80079dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079de:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80079e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079e2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	f006 fcae 	bl	800e346 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80079f6:	4013      	ands	r3, r2
 80079f8:	823b      	strh	r3, [r7, #16]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	8a3a      	ldrh	r2, [r7, #16]
 8007a00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a04:	b292      	uxth	r2, r2
 8007a06:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f008 fb25 	bl	8010058 <HAL_PCD_SetupStageCallback>
 8007a0e:	e306      	b.n	800801e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007a10:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f280 8302 	bge.w	800801e <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007a26:	4013      	ands	r3, r2
 8007a28:	83fb      	strh	r3, [r7, #30]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	8bfa      	ldrh	r2, [r7, #30]
 8007a30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a34:	b292      	uxth	r2, r2
 8007a36:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	461a      	mov	r2, r3
 8007a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	00db      	lsls	r3, r3, #3
 8007a4a:	4413      	add	r3, r2
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6812      	ldr	r2, [r2, #0]
 8007a50:	4413      	add	r3, r2
 8007a52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a5e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d019      	beq.n	8007a9c <PCD_EP_ISR_Handler+0x1ec>
 8007a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d015      	beq.n	8007a9c <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6818      	ldr	r0, [r3, #0]
 8007a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a76:	6959      	ldr	r1, [r3, #20]
 8007a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a7a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a7e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f006 fc60 	bl	800e346 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a88:	695a      	ldr	r2, [r3, #20]
 8007a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	441a      	add	r2, r3
 8007a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a92:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007a94:	2100      	movs	r1, #0
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f008 faf0 	bl	801007c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007aa6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f040 82b5 	bne.w	800801e <PCD_EP_ISR_Handler+0x76e>
 8007ab4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ab8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007abc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ac0:	f000 82ad 	beq.w	800801e <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	61bb      	str	r3, [r7, #24]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	4413      	add	r3, r2
 8007ada:	61bb      	str	r3, [r7, #24]
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	801a      	strh	r2, [r3, #0]
 8007af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	2b3e      	cmp	r3, #62	; 0x3e
 8007afa:	d91d      	bls.n	8007b38 <PCD_EP_ISR_Handler+0x288>
 8007afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	095b      	lsrs	r3, r3, #5
 8007b02:	647b      	str	r3, [r7, #68]	; 0x44
 8007b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	f003 031f 	and.w	r3, r3, #31
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d102      	bne.n	8007b16 <PCD_EP_ISR_Handler+0x266>
 8007b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b12:	3b01      	subs	r3, #1
 8007b14:	647b      	str	r3, [r7, #68]	; 0x44
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	029b      	lsls	r3, r3, #10
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	4313      	orrs	r3, r2
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	801a      	strh	r2, [r3, #0]
 8007b36:	e026      	b.n	8007b86 <PCD_EP_ISR_Handler+0x2d6>
 8007b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10a      	bne.n	8007b56 <PCD_EP_ISR_Handler+0x2a6>
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	801a      	strh	r2, [r3, #0]
 8007b54:	e017      	b.n	8007b86 <PCD_EP_ISR_Handler+0x2d6>
 8007b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	085b      	lsrs	r3, r3, #1
 8007b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8007b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <PCD_EP_ISR_Handler+0x2c0>
 8007b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	029b      	lsls	r3, r3, #10
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	b29a      	uxth	r2, r3
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b96:	827b      	strh	r3, [r7, #18]
 8007b98:	8a7b      	ldrh	r3, [r7, #18]
 8007b9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b9e:	827b      	strh	r3, [r7, #18]
 8007ba0:	8a7b      	ldrh	r3, [r7, #18]
 8007ba2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ba6:	827b      	strh	r3, [r7, #18]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	8a7b      	ldrh	r3, [r7, #18]
 8007bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	8013      	strh	r3, [r2, #0]
 8007bc2:	e22c      	b.n	800801e <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	881b      	ldrh	r3, [r3, #0]
 8007bd4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007bd8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f280 80f6 	bge.w	8007dce <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	461a      	mov	r2, r3
 8007be8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007c10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c14:	b292      	uxth	r2, r2
 8007c16:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007c18:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c30:	7b1b      	ldrb	r3, [r3, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d123      	bne.n	8007c7e <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	461a      	mov	r2, r3
 8007c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	4413      	add	r3, r2
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	6812      	ldr	r2, [r2, #0]
 8007c4e:	4413      	add	r3, r2
 8007c50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c5a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8007c5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 808e 	beq.w	8007d84 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6818      	ldr	r0, [r3, #0]
 8007c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c6e:	6959      	ldr	r1, [r3, #20]
 8007c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c72:	88da      	ldrh	r2, [r3, #6]
 8007c74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007c78:	f006 fb65 	bl	800e346 <USB_ReadPMA>
 8007c7c:	e082      	b.n	8007d84 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c80:	78db      	ldrb	r3, [r3, #3]
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d10a      	bne.n	8007c9c <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007c86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f9d3 	bl	800803a <HAL_PCD_EP_DB_Receive>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8007c9a:	e073      	b.n	8007d84 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	441a      	add	r2, r3
 8007cc8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8007ccc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	4413      	add	r3, r2
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d022      	beq.n	8007d40 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	461a      	mov	r2, r3
 8007d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	00db      	lsls	r3, r3, #3
 8007d0c:	4413      	add	r3, r2
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6812      	ldr	r2, [r2, #0]
 8007d12:	4413      	add	r3, r2
 8007d14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d1e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007d22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d02c      	beq.n	8007d84 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6818      	ldr	r0, [r3, #0]
 8007d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d30:	6959      	ldr	r1, [r3, #20]
 8007d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d34:	891a      	ldrh	r2, [r3, #8]
 8007d36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007d3a:	f006 fb04 	bl	800e346 <USB_ReadPMA>
 8007d3e:	e021      	b.n	8007d84 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	00db      	lsls	r3, r3, #3
 8007d52:	4413      	add	r3, r2
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6812      	ldr	r2, [r2, #0]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d5e:	881b      	ldrh	r3, [r3, #0]
 8007d60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d64:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8007d68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d009      	beq.n	8007d84 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d76:	6959      	ldr	r1, [r3, #20]
 8007d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d7a:	895a      	ldrh	r2, [r3, #10]
 8007d7c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007d80:	f006 fae1 	bl	800e346 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d86:	69da      	ldr	r2, [r3, #28]
 8007d88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007d8c:	441a      	add	r2, r3
 8007d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d90:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d94:	695a      	ldr	r2, [r3, #20]
 8007d96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8007d9a:	441a      	add	r2, r3
 8007d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d9e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d005      	beq.n	8007db4 <PCD_EP_ISR_Handler+0x504>
 8007da8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8007dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d206      	bcs.n	8007dc2 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f008 f95e 	bl	801007c <HAL_PCD_DataOutStageCallback>
 8007dc0:	e005      	b.n	8007dce <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f004 fd6e 	bl	800c8aa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007dce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 8121 	beq.w	800801e <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8007ddc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007de0:	1c5a      	adds	r2, r3, #1
 8007de2:	4613      	mov	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	00db      	lsls	r3, r3, #3
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	4413      	add	r3, r2
 8007dee:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	461a      	mov	r2, r3
 8007df6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	441a      	add	r2, r3
 8007e1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e2e:	78db      	ldrb	r3, [r3, #3]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	f040 80a2 	bne.w	8007f7a <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8007e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e38:	2200      	movs	r2, #0
 8007e3a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e3e:	7b1b      	ldrb	r3, [r3, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 8093 	beq.w	8007f6c <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007e46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d046      	beq.n	8007ee0 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e54:	785b      	ldrb	r3, [r3, #1]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d126      	bne.n	8007ea8 <PCD_EP_ISR_Handler+0x5f8>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	4413      	add	r3, r2
 8007e70:	627b      	str	r3, [r7, #36]	; 0x24
 8007e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	00da      	lsls	r2, r3, #3
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007e80:	623b      	str	r3, [r7, #32]
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	801a      	strh	r2, [r3, #0]
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	801a      	strh	r2, [r3, #0]
 8007ea6:	e061      	b.n	8007f6c <PCD_EP_ISR_Handler+0x6bc>
 8007ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eaa:	785b      	ldrb	r3, [r3, #1]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d15d      	bne.n	8007f6c <PCD_EP_ISR_Handler+0x6bc>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec4:	4413      	add	r3, r2
 8007ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	00da      	lsls	r2, r3, #3
 8007ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eda:	2200      	movs	r2, #0
 8007edc:	801a      	strh	r2, [r3, #0]
 8007ede:	e045      	b.n	8007f6c <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ee8:	785b      	ldrb	r3, [r3, #1]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d126      	bne.n	8007f3c <PCD_EP_ISR_Handler+0x68c>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	461a      	mov	r2, r3
 8007f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f02:	4413      	add	r3, r2
 8007f04:	637b      	str	r3, [r7, #52]	; 0x34
 8007f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	00da      	lsls	r2, r3, #3
 8007f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0e:	4413      	add	r3, r2
 8007f10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f14:	633b      	str	r3, [r7, #48]	; 0x30
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	801a      	strh	r2, [r3, #0]
 8007f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	801a      	strh	r2, [r3, #0]
 8007f3a:	e017      	b.n	8007f6c <PCD_EP_ISR_Handler+0x6bc>
 8007f3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f3e:	785b      	ldrb	r3, [r3, #1]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d113      	bne.n	8007f6c <PCD_EP_ISR_Handler+0x6bc>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	461a      	mov	r2, r3
 8007f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f52:	4413      	add	r3, r2
 8007f54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	00da      	lsls	r2, r3, #3
 8007f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f5e:	4413      	add	r3, r2
 8007f60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f64:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f68:	2200      	movs	r2, #0
 8007f6a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f008 f89d 	bl	80100b2 <HAL_PCD_DataInStageCallback>
 8007f78:	e051      	b.n	800801e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007f7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d144      	bne.n	8008010 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	461a      	mov	r2, r3
 8007f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	4413      	add	r3, r2
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	6812      	ldr	r2, [r2, #0]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007faa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8007fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fb0:	699a      	ldr	r2, [r3, #24]
 8007fb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d907      	bls.n	8007fca <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8007fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fbc:	699a      	ldr	r2, [r3, #24]
 8007fbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007fc2:	1ad2      	subs	r2, r2, r3
 8007fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fc6:	619a      	str	r2, [r3, #24]
 8007fc8:	e002      	b.n	8007fd0 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8007fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fcc:	2200      	movs	r2, #0
 8007fce:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d106      	bne.n	8007fe6 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f008 f867 	bl	80100b2 <HAL_PCD_DataInStageCallback>
 8007fe4:	e01b      	b.n	800801e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fe8:	695a      	ldr	r2, [r3, #20]
 8007fea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007fee:	441a      	add	r2, r3
 8007ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ff2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ff6:	69da      	ldr	r2, [r3, #28]
 8007ff8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007ffc:	441a      	add	r2, r3
 8007ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008000:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008008:	4618      	mov	r0, r3
 800800a:	f004 fc4e 	bl	800c8aa <USB_EPStartXfer>
 800800e:	e006      	b.n	800801e <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008010:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008014:	461a      	mov	r2, r3
 8008016:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f917 	bl	800824c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008026:	b29b      	uxth	r3, r3
 8008028:	b21b      	sxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	f6ff ac45 	blt.w	80078ba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3758      	adds	r7, #88	; 0x58
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b088      	sub	sp, #32
 800803e:	af00      	add	r7, sp, #0
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	4613      	mov	r3, r2
 8008046:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008048:	88fb      	ldrh	r3, [r7, #6]
 800804a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d07c      	beq.n	800814c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800805a:	b29b      	uxth	r3, r3
 800805c:	461a      	mov	r2, r3
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	4413      	add	r3, r2
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	6812      	ldr	r2, [r2, #0]
 800806a:	4413      	add	r3, r2
 800806c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008076:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	699a      	ldr	r2, [r3, #24]
 800807c:	8b7b      	ldrh	r3, [r7, #26]
 800807e:	429a      	cmp	r2, r3
 8008080:	d306      	bcc.n	8008090 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	699a      	ldr	r2, [r3, #24]
 8008086:	8b7b      	ldrh	r3, [r7, #26]
 8008088:	1ad2      	subs	r2, r2, r3
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	619a      	str	r2, [r3, #24]
 800808e:	e002      	b.n	8008096 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	2200      	movs	r2, #0
 8008094:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d123      	bne.n	80080e6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b8:	833b      	strh	r3, [r7, #24]
 80080ba:	8b3b      	ldrh	r3, [r7, #24]
 80080bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080c0:	833b      	strh	r3, [r7, #24]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	441a      	add	r2, r3
 80080d0:	8b3b      	ldrh	r3, [r7, #24]
 80080d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80080e6:	88fb      	ldrh	r3, [r7, #6]
 80080e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01f      	beq.n	8008130 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	461a      	mov	r2, r3
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	009b      	lsls	r3, r3, #2
 80080fc:	4413      	add	r3, r2
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	b29b      	uxth	r3, r3
 8008102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810a:	82fb      	strh	r3, [r7, #22]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	461a      	mov	r2, r3
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	441a      	add	r2, r3
 800811a:	8afb      	ldrh	r3, [r7, #22]
 800811c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008128:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800812c:	b29b      	uxth	r3, r3
 800812e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008130:	8b7b      	ldrh	r3, [r7, #26]
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 8085 	beq.w	8008242 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	6959      	ldr	r1, [r3, #20]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	891a      	ldrh	r2, [r3, #8]
 8008144:	8b7b      	ldrh	r3, [r7, #26]
 8008146:	f006 f8fe 	bl	800e346 <USB_ReadPMA>
 800814a:	e07a      	b.n	8008242 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008154:	b29b      	uxth	r3, r3
 8008156:	461a      	mov	r2, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	00db      	lsls	r3, r3, #3
 800815e:	4413      	add	r3, r2
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	6812      	ldr	r2, [r2, #0]
 8008164:	4413      	add	r3, r2
 8008166:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800816a:	881b      	ldrh	r3, [r3, #0]
 800816c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008170:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	699a      	ldr	r2, [r3, #24]
 8008176:	8b7b      	ldrh	r3, [r7, #26]
 8008178:	429a      	cmp	r2, r3
 800817a:	d306      	bcc.n	800818a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	699a      	ldr	r2, [r3, #24]
 8008180:	8b7b      	ldrh	r3, [r7, #26]
 8008182:	1ad2      	subs	r2, r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	619a      	str	r2, [r3, #24]
 8008188:	e002      	b.n	8008190 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	2200      	movs	r2, #0
 800818e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d123      	bne.n	80081e0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b2:	83fb      	strh	r3, [r7, #30]
 80081b4:	8bfb      	ldrh	r3, [r7, #30]
 80081b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081ba:	83fb      	strh	r3, [r7, #30]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	461a      	mov	r2, r3
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	441a      	add	r2, r3
 80081ca:	8bfb      	ldrh	r3, [r7, #30]
 80081cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081dc:	b29b      	uxth	r3, r3
 80081de:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80081e0:	88fb      	ldrh	r3, [r7, #6]
 80081e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d11f      	bne.n	800822a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008204:	83bb      	strh	r3, [r7, #28]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	441a      	add	r2, r3
 8008214:	8bbb      	ldrh	r3, [r7, #28]
 8008216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800821a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800821e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008222:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008226:	b29b      	uxth	r3, r3
 8008228:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800822a:	8b7b      	ldrh	r3, [r7, #26]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d008      	beq.n	8008242 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6818      	ldr	r0, [r3, #0]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	6959      	ldr	r1, [r3, #20]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	895a      	ldrh	r2, [r3, #10]
 800823c:	8b7b      	ldrh	r3, [r7, #26]
 800823e:	f006 f882 	bl	800e346 <USB_ReadPMA>
    }
  }

  return count;
 8008242:	8b7b      	ldrh	r3, [r7, #26]
}
 8008244:	4618      	mov	r0, r3
 8008246:	3720      	adds	r7, #32
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b0a4      	sub	sp, #144	; 0x90
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4613      	mov	r3, r2
 8008258:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800825a:	88fb      	ldrh	r3, [r7, #6]
 800825c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 81db 	beq.w	800861c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800826e:	b29b      	uxth	r3, r3
 8008270:	461a      	mov	r2, r3
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	4413      	add	r3, r2
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	6812      	ldr	r2, [r2, #0]
 800827e:	4413      	add	r3, r2
 8008280:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800828a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	699a      	ldr	r2, [r3, #24]
 8008292:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008296:	429a      	cmp	r2, r3
 8008298:	d907      	bls.n	80082aa <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	699a      	ldr	r2, [r3, #24]
 800829e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80082a2:	1ad2      	subs	r2, r2, r3
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	619a      	str	r2, [r3, #24]
 80082a8:	e002      	b.n	80082b0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2200      	movs	r2, #0
 80082ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f040 80b9 	bne.w	800842c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d126      	bne.n	8008310 <HAL_PCD_EP_DB_Transmit+0xc4>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	461a      	mov	r2, r3
 80082d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d6:	4413      	add	r3, r2
 80082d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	00da      	lsls	r2, r3, #3
 80082e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e2:	4413      	add	r3, r2
 80082e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80082e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	801a      	strh	r2, [r3, #0]
 80082fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008308:	b29a      	uxth	r2, r3
 800830a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830c:	801a      	strh	r2, [r3, #0]
 800830e:	e01a      	b.n	8008346 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	785b      	ldrb	r3, [r3, #1]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d116      	bne.n	8008346 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	637b      	str	r3, [r7, #52]	; 0x34
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008326:	b29b      	uxth	r3, r3
 8008328:	461a      	mov	r2, r3
 800832a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832c:	4413      	add	r3, r2
 800832e:	637b      	str	r3, [r7, #52]	; 0x34
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	00da      	lsls	r2, r3, #3
 8008336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008338:	4413      	add	r3, r2
 800833a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800833e:	633b      	str	r3, [r7, #48]	; 0x30
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	2200      	movs	r2, #0
 8008344:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	627b      	str	r3, [r7, #36]	; 0x24
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	785b      	ldrb	r3, [r3, #1]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d126      	bne.n	80083a2 <HAL_PCD_EP_DB_Transmit+0x156>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	61fb      	str	r3, [r7, #28]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008362:	b29b      	uxth	r3, r3
 8008364:	461a      	mov	r2, r3
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4413      	add	r3, r2
 800836a:	61fb      	str	r3, [r7, #28]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	00da      	lsls	r2, r3, #3
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	4413      	add	r3, r2
 8008376:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800837a:	61bb      	str	r3, [r7, #24]
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	b29b      	uxth	r3, r3
 8008382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008386:	b29a      	uxth	r2, r3
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	801a      	strh	r2, [r3, #0]
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	b29b      	uxth	r3, r3
 8008392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800839a:	b29a      	uxth	r2, r3
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	801a      	strh	r2, [r3, #0]
 80083a0:	e017      	b.n	80083d2 <HAL_PCD_EP_DB_Transmit+0x186>
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	785b      	ldrb	r3, [r3, #1]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d113      	bne.n	80083d2 <HAL_PCD_EP_DB_Transmit+0x186>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b8:	4413      	add	r3, r2
 80083ba:	627b      	str	r3, [r7, #36]	; 0x24
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	00da      	lsls	r2, r3, #3
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	4413      	add	r3, r2
 80083c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083ca:	623b      	str	r3, [r7, #32]
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	2200      	movs	r2, #0
 80083d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	4619      	mov	r1, r3
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f007 fe6a 	bl	80100b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80083de:	88fb      	ldrh	r3, [r7, #6]
 80083e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 82fa 	beq.w	80089de <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008404:	82fb      	strh	r3, [r7, #22]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	461a      	mov	r2, r3
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	441a      	add	r2, r3
 8008414:	8afb      	ldrh	r3, [r7, #22]
 8008416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800841a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800841e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008426:	b29b      	uxth	r3, r3
 8008428:	8013      	strh	r3, [r2, #0]
 800842a:	e2d8      	b.n	80089de <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800842c:	88fb      	ldrh	r3, [r7, #6]
 800842e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d021      	beq.n	800847a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	b29b      	uxth	r3, r3
 8008448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800844c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008450:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	441a      	add	r2, r3
 8008462:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800846a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800846e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008476:	b29b      	uxth	r3, r3
 8008478:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008480:	2b01      	cmp	r3, #1
 8008482:	f040 82ac 	bne.w	80089de <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	695a      	ldr	r2, [r3, #20]
 800848a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800848e:	441a      	add	r2, r3
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	69da      	ldr	r2, [r3, #28]
 8008498:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800849c:	441a      	add	r2, r3
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	6a1a      	ldr	r2, [r3, #32]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d30b      	bcc.n	80084c6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	6a1a      	ldr	r2, [r3, #32]
 80084ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084be:	1ad2      	subs	r2, r2, r3
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	621a      	str	r2, [r3, #32]
 80084c4:	e017      	b.n	80084f6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d108      	bne.n	80084e0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80084ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80084d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80084de:	e00a      	b.n	80084f6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2200      	movs	r2, #0
 80084f4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	785b      	ldrb	r3, [r3, #1]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d165      	bne.n	80085ca <HAL_PCD_EP_DB_Transmit+0x37e>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800850c:	b29b      	uxth	r3, r3
 800850e:	461a      	mov	r2, r3
 8008510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008512:	4413      	add	r3, r2
 8008514:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	00da      	lsls	r2, r3, #3
 800851c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851e:	4413      	add	r3, r2
 8008520:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008524:	63bb      	str	r3, [r7, #56]	; 0x38
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	b29b      	uxth	r3, r3
 800852c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008530:	b29a      	uxth	r2, r3
 8008532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008534:	801a      	strh	r2, [r3, #0]
 8008536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800853a:	2b3e      	cmp	r3, #62	; 0x3e
 800853c:	d91d      	bls.n	800857a <HAL_PCD_EP_DB_Transmit+0x32e>
 800853e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008542:	095b      	lsrs	r3, r3, #5
 8008544:	64bb      	str	r3, [r7, #72]	; 0x48
 8008546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800854a:	f003 031f 	and.w	r3, r3, #31
 800854e:	2b00      	cmp	r3, #0
 8008550:	d102      	bne.n	8008558 <HAL_PCD_EP_DB_Transmit+0x30c>
 8008552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008554:	3b01      	subs	r3, #1
 8008556:	64bb      	str	r3, [r7, #72]	; 0x48
 8008558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	b29a      	uxth	r2, r3
 800855e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008560:	b29b      	uxth	r3, r3
 8008562:	029b      	lsls	r3, r3, #10
 8008564:	b29b      	uxth	r3, r3
 8008566:	4313      	orrs	r3, r2
 8008568:	b29b      	uxth	r3, r3
 800856a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800856e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008572:	b29a      	uxth	r2, r3
 8008574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008576:	801a      	strh	r2, [r3, #0]
 8008578:	e044      	b.n	8008604 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800857a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10a      	bne.n	8008598 <HAL_PCD_EP_DB_Transmit+0x34c>
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	881b      	ldrh	r3, [r3, #0]
 8008586:	b29b      	uxth	r3, r3
 8008588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800858c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008590:	b29a      	uxth	r2, r3
 8008592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008594:	801a      	strh	r2, [r3, #0]
 8008596:	e035      	b.n	8008604 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800859c:	085b      	lsrs	r3, r3, #1
 800859e:	64bb      	str	r3, [r7, #72]	; 0x48
 80085a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <HAL_PCD_EP_DB_Transmit+0x366>
 80085ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ae:	3301      	adds	r3, #1
 80085b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80085b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	029b      	lsls	r3, r3, #10
 80085be:	b29b      	uxth	r3, r3
 80085c0:	4313      	orrs	r3, r2
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c6:	801a      	strh	r2, [r3, #0]
 80085c8:	e01c      	b.n	8008604 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	785b      	ldrb	r3, [r3, #1]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d118      	bne.n	8008604 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	647b      	str	r3, [r7, #68]	; 0x44
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	461a      	mov	r2, r3
 80085e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085e6:	4413      	add	r3, r2
 80085e8:	647b      	str	r3, [r7, #68]	; 0x44
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	00da      	lsls	r2, r3, #3
 80085f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085f2:	4413      	add	r3, r2
 80085f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085f8:	643b      	str	r3, [r7, #64]	; 0x40
 80085fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085fe:	b29a      	uxth	r2, r3
 8008600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008602:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6818      	ldr	r0, [r3, #0]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	6959      	ldr	r1, [r3, #20]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	891a      	ldrh	r2, [r3, #8]
 8008610:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008614:	b29b      	uxth	r3, r3
 8008616:	f005 fe54 	bl	800e2c2 <USB_WritePMA>
 800861a:	e1e0      	b.n	80089de <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008624:	b29b      	uxth	r3, r3
 8008626:	461a      	mov	r2, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	00db      	lsls	r3, r3, #3
 800862e:	4413      	add	r3, r2
 8008630:	68fa      	ldr	r2, [r7, #12]
 8008632:	6812      	ldr	r2, [r2, #0]
 8008634:	4413      	add	r3, r2
 8008636:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800863a:	881b      	ldrh	r3, [r3, #0]
 800863c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008640:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	699a      	ldr	r2, [r3, #24]
 8008648:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800864c:	429a      	cmp	r2, r3
 800864e:	d307      	bcc.n	8008660 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	699a      	ldr	r2, [r3, #24]
 8008654:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008658:	1ad2      	subs	r2, r2, r3
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	619a      	str	r2, [r3, #24]
 800865e:	e002      	b.n	8008666 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2200      	movs	r2, #0
 8008664:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	2b00      	cmp	r3, #0
 800866c:	f040 80c0 	bne.w	80087f0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	785b      	ldrb	r3, [r3, #1]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d126      	bne.n	80086c6 <HAL_PCD_EP_DB_Transmit+0x47a>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008686:	b29b      	uxth	r3, r3
 8008688:	461a      	mov	r2, r3
 800868a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800868c:	4413      	add	r3, r2
 800868e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	00da      	lsls	r2, r3, #3
 8008696:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008698:	4413      	add	r3, r2
 800869a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800869e:	67bb      	str	r3, [r7, #120]	; 0x78
 80086a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086a2:	881b      	ldrh	r3, [r3, #0]
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086ae:	801a      	strh	r2, [r3, #0]
 80086b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086b2:	881b      	ldrh	r3, [r3, #0]
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086be:	b29a      	uxth	r2, r3
 80086c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086c2:	801a      	strh	r2, [r3, #0]
 80086c4:	e01a      	b.n	80086fc <HAL_PCD_EP_DB_Transmit+0x4b0>
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	785b      	ldrb	r3, [r3, #1]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d116      	bne.n	80086fc <HAL_PCD_EP_DB_Transmit+0x4b0>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	667b      	str	r3, [r7, #100]	; 0x64
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086dc:	b29b      	uxth	r3, r3
 80086de:	461a      	mov	r2, r3
 80086e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086e2:	4413      	add	r3, r2
 80086e4:	667b      	str	r3, [r7, #100]	; 0x64
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	00da      	lsls	r2, r3, #3
 80086ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086ee:	4413      	add	r3, r2
 80086f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80086f4:	663b      	str	r3, [r7, #96]	; 0x60
 80086f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086f8:	2200      	movs	r2, #0
 80086fa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	677b      	str	r3, [r7, #116]	; 0x74
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	785b      	ldrb	r3, [r3, #1]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d12b      	bne.n	8008762 <HAL_PCD_EP_DB_Transmit+0x516>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008718:	b29b      	uxth	r3, r3
 800871a:	461a      	mov	r2, r3
 800871c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800871e:	4413      	add	r3, r2
 8008720:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	00da      	lsls	r2, r3, #3
 8008728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800872a:	4413      	add	r3, r2
 800872c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008730:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008734:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008738:	881b      	ldrh	r3, [r3, #0]
 800873a:	b29b      	uxth	r3, r3
 800873c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008740:	b29a      	uxth	r2, r3
 8008742:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008746:	801a      	strh	r2, [r3, #0]
 8008748:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800874c:	881b      	ldrh	r3, [r3, #0]
 800874e:	b29b      	uxth	r3, r3
 8008750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008758:	b29a      	uxth	r2, r3
 800875a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800875e:	801a      	strh	r2, [r3, #0]
 8008760:	e017      	b.n	8008792 <HAL_PCD_EP_DB_Transmit+0x546>
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	785b      	ldrb	r3, [r3, #1]
 8008766:	2b01      	cmp	r3, #1
 8008768:	d113      	bne.n	8008792 <HAL_PCD_EP_DB_Transmit+0x546>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008772:	b29b      	uxth	r3, r3
 8008774:	461a      	mov	r2, r3
 8008776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008778:	4413      	add	r3, r2
 800877a:	677b      	str	r3, [r7, #116]	; 0x74
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	00da      	lsls	r2, r3, #3
 8008782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008784:	4413      	add	r3, r2
 8008786:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800878a:	673b      	str	r3, [r7, #112]	; 0x70
 800878c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800878e:	2200      	movs	r2, #0
 8008790:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	4619      	mov	r1, r3
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f007 fc8a 	bl	80100b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800879e:	88fb      	ldrh	r3, [r7, #6]
 80087a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f040 811a 	bne.w	80089de <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	461a      	mov	r2, r3
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	461a      	mov	r2, r3
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	441a      	add	r2, r3
 80087d6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80087da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	8013      	strh	r3, [r2, #0]
 80087ee:	e0f6      	b.n	80089de <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80087f0:	88fb      	ldrh	r3, [r7, #6]
 80087f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d121      	bne.n	800883e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	b29b      	uxth	r3, r3
 800880c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008814:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	461a      	mov	r2, r3
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	441a      	add	r2, r3
 8008826:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800882a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800882e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008832:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800883a:	b29b      	uxth	r3, r3
 800883c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008844:	2b01      	cmp	r3, #1
 8008846:	f040 80ca 	bne.w	80089de <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	695a      	ldr	r2, [r3, #20]
 800884e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008852:	441a      	add	r2, r3
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	69da      	ldr	r2, [r3, #28]
 800885c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008860:	441a      	add	r2, r3
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	6a1a      	ldr	r2, [r3, #32]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	429a      	cmp	r2, r3
 8008870:	d30b      	bcc.n	800888a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	6a1a      	ldr	r2, [r3, #32]
 800887e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008882:	1ad2      	subs	r2, r2, r3
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	621a      	str	r2, [r3, #32]
 8008888:	e017      	b.n	80088ba <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	6a1b      	ldr	r3, [r3, #32]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d108      	bne.n	80088a4 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8008892:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80088a2:	e00a      	b.n	80088ba <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	6a1b      	ldr	r3, [r3, #32]
 80088a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2200      	movs	r2, #0
 80088b0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	657b      	str	r3, [r7, #84]	; 0x54
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	785b      	ldrb	r3, [r3, #1]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d165      	bne.n	8008994 <HAL_PCD_EP_DB_Transmit+0x748>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	461a      	mov	r2, r3
 80088da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088dc:	4413      	add	r3, r2
 80088de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	00da      	lsls	r2, r3, #3
 80088e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088e8:	4413      	add	r3, r2
 80088ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80088f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088fe:	801a      	strh	r2, [r3, #0]
 8008900:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008904:	2b3e      	cmp	r3, #62	; 0x3e
 8008906:	d91d      	bls.n	8008944 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8008908:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800890c:	095b      	lsrs	r3, r3, #5
 800890e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008910:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008914:	f003 031f 	and.w	r3, r3, #31
 8008918:	2b00      	cmp	r3, #0
 800891a:	d102      	bne.n	8008922 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800891c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800891e:	3b01      	subs	r3, #1
 8008920:	66bb      	str	r3, [r7, #104]	; 0x68
 8008922:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	b29a      	uxth	r2, r3
 8008928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800892a:	b29b      	uxth	r3, r3
 800892c:	029b      	lsls	r3, r3, #10
 800892e:	b29b      	uxth	r3, r3
 8008930:	4313      	orrs	r3, r2
 8008932:	b29b      	uxth	r3, r3
 8008934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800893c:	b29a      	uxth	r2, r3
 800893e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008940:	801a      	strh	r2, [r3, #0]
 8008942:	e041      	b.n	80089c8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008944:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008948:	2b00      	cmp	r3, #0
 800894a:	d10a      	bne.n	8008962 <HAL_PCD_EP_DB_Transmit+0x716>
 800894c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800894e:	881b      	ldrh	r3, [r3, #0]
 8008950:	b29b      	uxth	r3, r3
 8008952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800895a:	b29a      	uxth	r2, r3
 800895c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800895e:	801a      	strh	r2, [r3, #0]
 8008960:	e032      	b.n	80089c8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008962:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008966:	085b      	lsrs	r3, r3, #1
 8008968:	66bb      	str	r3, [r7, #104]	; 0x68
 800896a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d002      	beq.n	800897c <HAL_PCD_EP_DB_Transmit+0x730>
 8008976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008978:	3301      	adds	r3, #1
 800897a:	66bb      	str	r3, [r7, #104]	; 0x68
 800897c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800897e:	881b      	ldrh	r3, [r3, #0]
 8008980:	b29a      	uxth	r2, r3
 8008982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008984:	b29b      	uxth	r3, r3
 8008986:	029b      	lsls	r3, r3, #10
 8008988:	b29b      	uxth	r3, r3
 800898a:	4313      	orrs	r3, r2
 800898c:	b29a      	uxth	r2, r3
 800898e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008990:	801a      	strh	r2, [r3, #0]
 8008992:	e019      	b.n	80089c8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	785b      	ldrb	r3, [r3, #1]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d115      	bne.n	80089c8 <HAL_PCD_EP_DB_Transmit+0x77c>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	461a      	mov	r2, r3
 80089a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089aa:	4413      	add	r3, r2
 80089ac:	657b      	str	r3, [r7, #84]	; 0x54
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	00da      	lsls	r2, r3, #3
 80089b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089b6:	4413      	add	r3, r2
 80089b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089bc:	653b      	str	r3, [r7, #80]	; 0x50
 80089be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089c6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6818      	ldr	r0, [r3, #0]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	6959      	ldr	r1, [r3, #20]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	895a      	ldrh	r2, [r3, #10]
 80089d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089d8:	b29b      	uxth	r3, r3
 80089da:	f005 fc72 	bl	800e2c2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089f8:	82bb      	strh	r3, [r7, #20]
 80089fa:	8abb      	ldrh	r3, [r7, #20]
 80089fc:	f083 0310 	eor.w	r3, r3, #16
 8008a00:	82bb      	strh	r3, [r7, #20]
 8008a02:	8abb      	ldrh	r3, [r7, #20]
 8008a04:	f083 0320 	eor.w	r3, r3, #32
 8008a08:	82bb      	strh	r3, [r7, #20]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	441a      	add	r2, r3
 8008a18:	8abb      	ldrh	r3, [r7, #20]
 8008a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3790      	adds	r7, #144	; 0x90
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b087      	sub	sp, #28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	607b      	str	r3, [r7, #4]
 8008a42:	460b      	mov	r3, r1
 8008a44:	817b      	strh	r3, [r7, #10]
 8008a46:	4613      	mov	r3, r2
 8008a48:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008a4a:	897b      	ldrh	r3, [r7, #10]
 8008a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00b      	beq.n	8008a6e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a56:	897b      	ldrh	r3, [r7, #10]
 8008a58:	f003 0307 	and.w	r3, r3, #7
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	4613      	mov	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	00db      	lsls	r3, r3, #3
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	4413      	add	r3, r2
 8008a6a:	617b      	str	r3, [r7, #20]
 8008a6c:	e009      	b.n	8008a82 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008a6e:	897a      	ldrh	r2, [r7, #10]
 8008a70:	4613      	mov	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	00db      	lsls	r3, r3, #3
 8008a78:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	4413      	add	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008a82:	893b      	ldrh	r3, [r7, #8]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d107      	bne.n	8008a98 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	80da      	strh	r2, [r3, #6]
 8008a96:	e00b      	b.n	8008ab0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	0c1b      	lsrs	r3, r3, #16
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	371c      	adds	r7, #28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b085      	sub	sp, #20
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	f043 0301 	orr.w	r3, r3, #1
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	f043 0302 	orr.w	r3, r3, #2
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
	...

08008b14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008b14:	b480      	push	{r7}
 8008b16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008b18:	4b04      	ldr	r3, [pc, #16]	; (8008b2c <HAL_PWREx_GetVoltageRange+0x18>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	40007000 	.word	0x40007000

08008b30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b3e:	d130      	bne.n	8008ba2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008b40:	4b23      	ldr	r3, [pc, #140]	; (8008bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b4c:	d038      	beq.n	8008bc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b4e:	4b20      	ldr	r3, [pc, #128]	; (8008bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008b56:	4a1e      	ldr	r2, [pc, #120]	; (8008bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008b5e:	4b1d      	ldr	r3, [pc, #116]	; (8008bd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2232      	movs	r2, #50	; 0x32
 8008b64:	fb02 f303 	mul.w	r3, r2, r3
 8008b68:	4a1b      	ldr	r2, [pc, #108]	; (8008bd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b6e:	0c9b      	lsrs	r3, r3, #18
 8008b70:	3301      	adds	r3, #1
 8008b72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b74:	e002      	b.n	8008b7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b7c:	4b14      	ldr	r3, [pc, #80]	; (8008bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b88:	d102      	bne.n	8008b90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1f2      	bne.n	8008b76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b90:	4b0f      	ldr	r3, [pc, #60]	; (8008bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b9c:	d110      	bne.n	8008bc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e00f      	b.n	8008bc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8008ba2:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bae:	d007      	beq.n	8008bc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008bb0:	4b07      	ldr	r3, [pc, #28]	; (8008bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008bb8:	4a05      	ldr	r2, [pc, #20]	; (8008bd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008bba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008bbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	40007000 	.word	0x40007000
 8008bd4:	20000020 	.word	0x20000020
 8008bd8:	431bde83 	.word	0x431bde83

08008bdc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8008be0:	4b05      	ldr	r3, [pc, #20]	; (8008bf8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	4a04      	ldr	r2, [pc, #16]	; (8008bf8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008bea:	6053      	str	r3, [r2, #4]
}
 8008bec:	bf00      	nop
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	40007000 	.word	0x40007000

08008bfc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d102      	bne.n	8008c10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	f000 bc02 	b.w	8009414 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c10:	4b96      	ldr	r3, [pc, #600]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f003 030c 	and.w	r3, r3, #12
 8008c18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c1a:	4b94      	ldr	r3, [pc, #592]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	f003 0303 	and.w	r3, r3, #3
 8008c22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0310 	and.w	r3, r3, #16
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 80e4 	beq.w	8008dfa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d007      	beq.n	8008c48 <HAL_RCC_OscConfig+0x4c>
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	2b0c      	cmp	r3, #12
 8008c3c:	f040 808b 	bne.w	8008d56 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	f040 8087 	bne.w	8008d56 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008c48:	4b88      	ldr	r3, [pc, #544]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d005      	beq.n	8008c60 <HAL_RCC_OscConfig+0x64>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e3d9      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a1a      	ldr	r2, [r3, #32]
 8008c64:	4b81      	ldr	r3, [pc, #516]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0308 	and.w	r3, r3, #8
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d004      	beq.n	8008c7a <HAL_RCC_OscConfig+0x7e>
 8008c70:	4b7e      	ldr	r3, [pc, #504]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c78:	e005      	b.n	8008c86 <HAL_RCC_OscConfig+0x8a>
 8008c7a:	4b7c      	ldr	r3, [pc, #496]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c80:	091b      	lsrs	r3, r3, #4
 8008c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d223      	bcs.n	8008cd2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 fd8c 	bl	80097ac <RCC_SetFlashLatencyFromMSIRange>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e3ba      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008c9e:	4b73      	ldr	r3, [pc, #460]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a72      	ldr	r2, [pc, #456]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008ca4:	f043 0308 	orr.w	r3, r3, #8
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	4b70      	ldr	r3, [pc, #448]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	496d      	ldr	r1, [pc, #436]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008cbc:	4b6b      	ldr	r3, [pc, #428]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	69db      	ldr	r3, [r3, #28]
 8008cc8:	021b      	lsls	r3, r3, #8
 8008cca:	4968      	ldr	r1, [pc, #416]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	604b      	str	r3, [r1, #4]
 8008cd0:	e025      	b.n	8008d1e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008cd2:	4b66      	ldr	r3, [pc, #408]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a65      	ldr	r2, [pc, #404]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008cd8:	f043 0308 	orr.w	r3, r3, #8
 8008cdc:	6013      	str	r3, [r2, #0]
 8008cde:	4b63      	ldr	r3, [pc, #396]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	4960      	ldr	r1, [pc, #384]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008cf0:	4b5e      	ldr	r3, [pc, #376]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	021b      	lsls	r3, r3, #8
 8008cfe:	495b      	ldr	r1, [pc, #364]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d109      	bne.n	8008d1e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fd4c 	bl	80097ac <RCC_SetFlashLatencyFromMSIRange>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e37a      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008d1e:	f000 fc81 	bl	8009624 <HAL_RCC_GetSysClockFreq>
 8008d22:	4602      	mov	r2, r0
 8008d24:	4b51      	ldr	r3, [pc, #324]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	091b      	lsrs	r3, r3, #4
 8008d2a:	f003 030f 	and.w	r3, r3, #15
 8008d2e:	4950      	ldr	r1, [pc, #320]	; (8008e70 <HAL_RCC_OscConfig+0x274>)
 8008d30:	5ccb      	ldrb	r3, [r1, r3]
 8008d32:	f003 031f 	and.w	r3, r3, #31
 8008d36:	fa22 f303 	lsr.w	r3, r2, r3
 8008d3a:	4a4e      	ldr	r2, [pc, #312]	; (8008e74 <HAL_RCC_OscConfig+0x278>)
 8008d3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008d3e:	4b4e      	ldr	r3, [pc, #312]	; (8008e78 <HAL_RCC_OscConfig+0x27c>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fb fc86 	bl	8004654 <HAL_InitTick>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d052      	beq.n	8008df8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
 8008d54:	e35e      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d032      	beq.n	8008dc4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008d5e:	4b43      	ldr	r3, [pc, #268]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a42      	ldr	r2, [pc, #264]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008d64:	f043 0301 	orr.w	r3, r3, #1
 8008d68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008d6a:	f7fb fcc3 	bl	80046f4 <HAL_GetTick>
 8008d6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008d70:	e008      	b.n	8008d84 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008d72:	f7fb fcbf 	bl	80046f4 <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d901      	bls.n	8008d84 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e347      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008d84:	4b39      	ldr	r3, [pc, #228]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0302 	and.w	r3, r3, #2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d0f0      	beq.n	8008d72 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008d90:	4b36      	ldr	r3, [pc, #216]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a35      	ldr	r2, [pc, #212]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008d96:	f043 0308 	orr.w	r3, r3, #8
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	4b33      	ldr	r3, [pc, #204]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a1b      	ldr	r3, [r3, #32]
 8008da8:	4930      	ldr	r1, [pc, #192]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008daa:	4313      	orrs	r3, r2
 8008dac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008dae:	4b2f      	ldr	r3, [pc, #188]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	69db      	ldr	r3, [r3, #28]
 8008dba:	021b      	lsls	r3, r3, #8
 8008dbc:	492b      	ldr	r1, [pc, #172]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	604b      	str	r3, [r1, #4]
 8008dc2:	e01a      	b.n	8008dfa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008dc4:	4b29      	ldr	r3, [pc, #164]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a28      	ldr	r2, [pc, #160]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008dca:	f023 0301 	bic.w	r3, r3, #1
 8008dce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008dd0:	f7fb fc90 	bl	80046f4 <HAL_GetTick>
 8008dd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008dd6:	e008      	b.n	8008dea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008dd8:	f7fb fc8c 	bl	80046f4 <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d901      	bls.n	8008dea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e314      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008dea:	4b20      	ldr	r3, [pc, #128]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0302 	and.w	r3, r3, #2
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1f0      	bne.n	8008dd8 <HAL_RCC_OscConfig+0x1dc>
 8008df6:	e000      	b.n	8008dfa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008df8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 0301 	and.w	r3, r3, #1
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d073      	beq.n	8008eee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	2b08      	cmp	r3, #8
 8008e0a:	d005      	beq.n	8008e18 <HAL_RCC_OscConfig+0x21c>
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	2b0c      	cmp	r3, #12
 8008e10:	d10e      	bne.n	8008e30 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2b03      	cmp	r3, #3
 8008e16:	d10b      	bne.n	8008e30 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e18:	4b14      	ldr	r3, [pc, #80]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d063      	beq.n	8008eec <HAL_RCC_OscConfig+0x2f0>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d15f      	bne.n	8008eec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e2f1      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e38:	d106      	bne.n	8008e48 <HAL_RCC_OscConfig+0x24c>
 8008e3a:	4b0c      	ldr	r3, [pc, #48]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a0b      	ldr	r2, [pc, #44]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	e025      	b.n	8008e94 <HAL_RCC_OscConfig+0x298>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e50:	d114      	bne.n	8008e7c <HAL_RCC_OscConfig+0x280>
 8008e52:	4b06      	ldr	r3, [pc, #24]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a05      	ldr	r2, [pc, #20]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e5c:	6013      	str	r3, [r2, #0]
 8008e5e:	4b03      	ldr	r3, [pc, #12]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a02      	ldr	r2, [pc, #8]	; (8008e6c <HAL_RCC_OscConfig+0x270>)
 8008e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e68:	6013      	str	r3, [r2, #0]
 8008e6a:	e013      	b.n	8008e94 <HAL_RCC_OscConfig+0x298>
 8008e6c:	40021000 	.word	0x40021000
 8008e70:	08018214 	.word	0x08018214
 8008e74:	20000020 	.word	0x20000020
 8008e78:	20000024 	.word	0x20000024
 8008e7c:	4ba0      	ldr	r3, [pc, #640]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a9f      	ldr	r2, [pc, #636]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e86:	6013      	str	r3, [r2, #0]
 8008e88:	4b9d      	ldr	r3, [pc, #628]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a9c      	ldr	r2, [pc, #624]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d013      	beq.n	8008ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e9c:	f7fb fc2a 	bl	80046f4 <HAL_GetTick>
 8008ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ea2:	e008      	b.n	8008eb6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ea4:	f7fb fc26 	bl	80046f4 <HAL_GetTick>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	2b64      	cmp	r3, #100	; 0x64
 8008eb0:	d901      	bls.n	8008eb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e2ae      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008eb6:	4b92      	ldr	r3, [pc, #584]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0f0      	beq.n	8008ea4 <HAL_RCC_OscConfig+0x2a8>
 8008ec2:	e014      	b.n	8008eee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec4:	f7fb fc16 	bl	80046f4 <HAL_GetTick>
 8008ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008eca:	e008      	b.n	8008ede <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ecc:	f7fb fc12 	bl	80046f4 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	2b64      	cmp	r3, #100	; 0x64
 8008ed8:	d901      	bls.n	8008ede <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e29a      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ede:	4b88      	ldr	r3, [pc, #544]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1f0      	bne.n	8008ecc <HAL_RCC_OscConfig+0x2d0>
 8008eea:	e000      	b.n	8008eee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0302 	and.w	r3, r3, #2
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d060      	beq.n	8008fbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	2b04      	cmp	r3, #4
 8008efe:	d005      	beq.n	8008f0c <HAL_RCC_OscConfig+0x310>
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	2b0c      	cmp	r3, #12
 8008f04:	d119      	bne.n	8008f3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d116      	bne.n	8008f3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f0c:	4b7c      	ldr	r3, [pc, #496]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d005      	beq.n	8008f24 <HAL_RCC_OscConfig+0x328>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d101      	bne.n	8008f24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e277      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f24:	4b76      	ldr	r3, [pc, #472]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	061b      	lsls	r3, r3, #24
 8008f32:	4973      	ldr	r1, [pc, #460]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008f34:	4313      	orrs	r3, r2
 8008f36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f38:	e040      	b.n	8008fbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d023      	beq.n	8008f8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f42:	4b6f      	ldr	r3, [pc, #444]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a6e      	ldr	r2, [pc, #440]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f4e:	f7fb fbd1 	bl	80046f4 <HAL_GetTick>
 8008f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f54:	e008      	b.n	8008f68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f56:	f7fb fbcd 	bl	80046f4 <HAL_GetTick>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d901      	bls.n	8008f68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e255      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f68:	4b65      	ldr	r3, [pc, #404]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d0f0      	beq.n	8008f56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f74:	4b62      	ldr	r3, [pc, #392]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	061b      	lsls	r3, r3, #24
 8008f82:	495f      	ldr	r1, [pc, #380]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	604b      	str	r3, [r1, #4]
 8008f88:	e018      	b.n	8008fbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f8a:	4b5d      	ldr	r3, [pc, #372]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a5c      	ldr	r2, [pc, #368]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f96:	f7fb fbad 	bl	80046f4 <HAL_GetTick>
 8008f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008f9c:	e008      	b.n	8008fb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f9e:	f7fb fba9 	bl	80046f4 <HAL_GetTick>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d901      	bls.n	8008fb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e231      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008fb0:	4b53      	ldr	r3, [pc, #332]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1f0      	bne.n	8008f9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f003 0308 	and.w	r3, r3, #8
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d03c      	beq.n	8009042 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	695b      	ldr	r3, [r3, #20]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d01c      	beq.n	800900a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fd0:	4b4b      	ldr	r3, [pc, #300]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fd6:	4a4a      	ldr	r2, [pc, #296]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008fd8:	f043 0301 	orr.w	r3, r3, #1
 8008fdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fe0:	f7fb fb88 	bl	80046f4 <HAL_GetTick>
 8008fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008fe6:	e008      	b.n	8008ffa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008fe8:	f7fb fb84 	bl	80046f4 <HAL_GetTick>
 8008fec:	4602      	mov	r2, r0
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d901      	bls.n	8008ffa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	e20c      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ffa:	4b41      	ldr	r3, [pc, #260]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8008ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009000:	f003 0302 	and.w	r3, r3, #2
 8009004:	2b00      	cmp	r3, #0
 8009006:	d0ef      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x3ec>
 8009008:	e01b      	b.n	8009042 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800900a:	4b3d      	ldr	r3, [pc, #244]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 800900c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009010:	4a3b      	ldr	r2, [pc, #236]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8009012:	f023 0301 	bic.w	r3, r3, #1
 8009016:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800901a:	f7fb fb6b 	bl	80046f4 <HAL_GetTick>
 800901e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009020:	e008      	b.n	8009034 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009022:	f7fb fb67 	bl	80046f4 <HAL_GetTick>
 8009026:	4602      	mov	r2, r0
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	2b02      	cmp	r3, #2
 800902e:	d901      	bls.n	8009034 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e1ef      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009034:	4b32      	ldr	r3, [pc, #200]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8009036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800903a:	f003 0302 	and.w	r3, r3, #2
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1ef      	bne.n	8009022 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 0304 	and.w	r3, r3, #4
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 80a6 	beq.w	800919c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009050:	2300      	movs	r3, #0
 8009052:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009054:	4b2a      	ldr	r3, [pc, #168]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8009056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10d      	bne.n	800907c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009060:	4b27      	ldr	r3, [pc, #156]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8009062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009064:	4a26      	ldr	r2, [pc, #152]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 8009066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800906a:	6593      	str	r3, [r2, #88]	; 0x58
 800906c:	4b24      	ldr	r3, [pc, #144]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 800906e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009074:	60bb      	str	r3, [r7, #8]
 8009076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009078:	2301      	movs	r3, #1
 800907a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800907c:	4b21      	ldr	r3, [pc, #132]	; (8009104 <HAL_RCC_OscConfig+0x508>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009084:	2b00      	cmp	r3, #0
 8009086:	d118      	bne.n	80090ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009088:	4b1e      	ldr	r3, [pc, #120]	; (8009104 <HAL_RCC_OscConfig+0x508>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a1d      	ldr	r2, [pc, #116]	; (8009104 <HAL_RCC_OscConfig+0x508>)
 800908e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009092:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009094:	f7fb fb2e 	bl	80046f4 <HAL_GetTick>
 8009098:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800909a:	e008      	b.n	80090ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800909c:	f7fb fb2a 	bl	80046f4 <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d901      	bls.n	80090ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80090aa:	2303      	movs	r3, #3
 80090ac:	e1b2      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80090ae:	4b15      	ldr	r3, [pc, #84]	; (8009104 <HAL_RCC_OscConfig+0x508>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0f0      	beq.n	800909c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d108      	bne.n	80090d4 <HAL_RCC_OscConfig+0x4d8>
 80090c2:	4b0f      	ldr	r3, [pc, #60]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 80090c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090c8:	4a0d      	ldr	r2, [pc, #52]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 80090ca:	f043 0301 	orr.w	r3, r3, #1
 80090ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80090d2:	e029      	b.n	8009128 <HAL_RCC_OscConfig+0x52c>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	2b05      	cmp	r3, #5
 80090da:	d115      	bne.n	8009108 <HAL_RCC_OscConfig+0x50c>
 80090dc:	4b08      	ldr	r3, [pc, #32]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 80090de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090e2:	4a07      	ldr	r2, [pc, #28]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 80090e4:	f043 0304 	orr.w	r3, r3, #4
 80090e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80090ec:	4b04      	ldr	r3, [pc, #16]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 80090ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090f2:	4a03      	ldr	r2, [pc, #12]	; (8009100 <HAL_RCC_OscConfig+0x504>)
 80090f4:	f043 0301 	orr.w	r3, r3, #1
 80090f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80090fc:	e014      	b.n	8009128 <HAL_RCC_OscConfig+0x52c>
 80090fe:	bf00      	nop
 8009100:	40021000 	.word	0x40021000
 8009104:	40007000 	.word	0x40007000
 8009108:	4b9a      	ldr	r3, [pc, #616]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 800910a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800910e:	4a99      	ldr	r2, [pc, #612]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 8009110:	f023 0301 	bic.w	r3, r3, #1
 8009114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009118:	4b96      	ldr	r3, [pc, #600]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 800911a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800911e:	4a95      	ldr	r2, [pc, #596]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 8009120:	f023 0304 	bic.w	r3, r3, #4
 8009124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d016      	beq.n	800915e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009130:	f7fb fae0 	bl	80046f4 <HAL_GetTick>
 8009134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009136:	e00a      	b.n	800914e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009138:	f7fb fadc 	bl	80046f4 <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	f241 3288 	movw	r2, #5000	; 0x1388
 8009146:	4293      	cmp	r3, r2
 8009148:	d901      	bls.n	800914e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800914a:	2303      	movs	r3, #3
 800914c:	e162      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800914e:	4b89      	ldr	r3, [pc, #548]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 8009150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009154:	f003 0302 	and.w	r3, r3, #2
 8009158:	2b00      	cmp	r3, #0
 800915a:	d0ed      	beq.n	8009138 <HAL_RCC_OscConfig+0x53c>
 800915c:	e015      	b.n	800918a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800915e:	f7fb fac9 	bl	80046f4 <HAL_GetTick>
 8009162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009164:	e00a      	b.n	800917c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009166:	f7fb fac5 	bl	80046f4 <HAL_GetTick>
 800916a:	4602      	mov	r2, r0
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	f241 3288 	movw	r2, #5000	; 0x1388
 8009174:	4293      	cmp	r3, r2
 8009176:	d901      	bls.n	800917c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009178:	2303      	movs	r3, #3
 800917a:	e14b      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800917c:	4b7d      	ldr	r3, [pc, #500]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 800917e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1ed      	bne.n	8009166 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800918a:	7ffb      	ldrb	r3, [r7, #31]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d105      	bne.n	800919c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009190:	4b78      	ldr	r3, [pc, #480]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 8009192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009194:	4a77      	ldr	r2, [pc, #476]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 8009196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800919a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 0320 	and.w	r3, r3, #32
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d03c      	beq.n	8009222 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01c      	beq.n	80091ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80091b0:	4b70      	ldr	r3, [pc, #448]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 80091b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091b6:	4a6f      	ldr	r2, [pc, #444]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 80091b8:	f043 0301 	orr.w	r3, r3, #1
 80091bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091c0:	f7fb fa98 	bl	80046f4 <HAL_GetTick>
 80091c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80091c6:	e008      	b.n	80091da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80091c8:	f7fb fa94 	bl	80046f4 <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d901      	bls.n	80091da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e11c      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80091da:	4b66      	ldr	r3, [pc, #408]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 80091dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091e0:	f003 0302 	and.w	r3, r3, #2
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d0ef      	beq.n	80091c8 <HAL_RCC_OscConfig+0x5cc>
 80091e8:	e01b      	b.n	8009222 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80091ea:	4b62      	ldr	r3, [pc, #392]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 80091ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091f0:	4a60      	ldr	r2, [pc, #384]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 80091f2:	f023 0301 	bic.w	r3, r3, #1
 80091f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091fa:	f7fb fa7b 	bl	80046f4 <HAL_GetTick>
 80091fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009200:	e008      	b.n	8009214 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009202:	f7fb fa77 	bl	80046f4 <HAL_GetTick>
 8009206:	4602      	mov	r2, r0
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	1ad3      	subs	r3, r2, r3
 800920c:	2b02      	cmp	r3, #2
 800920e:	d901      	bls.n	8009214 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e0ff      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009214:	4b57      	ldr	r3, [pc, #348]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 8009216:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1ef      	bne.n	8009202 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009226:	2b00      	cmp	r3, #0
 8009228:	f000 80f3 	beq.w	8009412 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009230:	2b02      	cmp	r3, #2
 8009232:	f040 80c9 	bne.w	80093c8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009236:	4b4f      	ldr	r3, [pc, #316]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f003 0203 	and.w	r2, r3, #3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009246:	429a      	cmp	r2, r3
 8009248:	d12c      	bne.n	80092a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009254:	3b01      	subs	r3, #1
 8009256:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009258:	429a      	cmp	r2, r3
 800925a:	d123      	bne.n	80092a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009266:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009268:	429a      	cmp	r2, r3
 800926a:	d11b      	bne.n	80092a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009276:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009278:	429a      	cmp	r2, r3
 800927a:	d113      	bne.n	80092a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009286:	085b      	lsrs	r3, r3, #1
 8009288:	3b01      	subs	r3, #1
 800928a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800928c:	429a      	cmp	r2, r3
 800928e:	d109      	bne.n	80092a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929a:	085b      	lsrs	r3, r3, #1
 800929c:	3b01      	subs	r3, #1
 800929e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d06b      	beq.n	800937c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	2b0c      	cmp	r3, #12
 80092a8:	d062      	beq.n	8009370 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80092aa:	4b32      	ldr	r3, [pc, #200]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e0ac      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80092ba:	4b2e      	ldr	r3, [pc, #184]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a2d      	ldr	r2, [pc, #180]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 80092c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80092c6:	f7fb fa15 	bl	80046f4 <HAL_GetTick>
 80092ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80092cc:	e008      	b.n	80092e0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092ce:	f7fb fa11 	bl	80046f4 <HAL_GetTick>
 80092d2:	4602      	mov	r2, r0
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d901      	bls.n	80092e0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e099      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80092e0:	4b24      	ldr	r3, [pc, #144]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1f0      	bne.n	80092ce <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092ec:	4b21      	ldr	r3, [pc, #132]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 80092ee:	68da      	ldr	r2, [r3, #12]
 80092f0:	4b21      	ldr	r3, [pc, #132]	; (8009378 <HAL_RCC_OscConfig+0x77c>)
 80092f2:	4013      	ands	r3, r2
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80092fc:	3a01      	subs	r2, #1
 80092fe:	0112      	lsls	r2, r2, #4
 8009300:	4311      	orrs	r1, r2
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009306:	0212      	lsls	r2, r2, #8
 8009308:	4311      	orrs	r1, r2
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800930e:	0852      	lsrs	r2, r2, #1
 8009310:	3a01      	subs	r2, #1
 8009312:	0552      	lsls	r2, r2, #21
 8009314:	4311      	orrs	r1, r2
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800931a:	0852      	lsrs	r2, r2, #1
 800931c:	3a01      	subs	r2, #1
 800931e:	0652      	lsls	r2, r2, #25
 8009320:	4311      	orrs	r1, r2
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009326:	06d2      	lsls	r2, r2, #27
 8009328:	430a      	orrs	r2, r1
 800932a:	4912      	ldr	r1, [pc, #72]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 800932c:	4313      	orrs	r3, r2
 800932e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009330:	4b10      	ldr	r3, [pc, #64]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a0f      	ldr	r2, [pc, #60]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 8009336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800933a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800933c:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	4a0c      	ldr	r2, [pc, #48]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 8009342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009346:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009348:	f7fb f9d4 	bl	80046f4 <HAL_GetTick>
 800934c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800934e:	e008      	b.n	8009362 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009350:	f7fb f9d0 	bl	80046f4 <HAL_GetTick>
 8009354:	4602      	mov	r2, r0
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	2b02      	cmp	r3, #2
 800935c:	d901      	bls.n	8009362 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e058      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009362:	4b04      	ldr	r3, [pc, #16]	; (8009374 <HAL_RCC_OscConfig+0x778>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d0f0      	beq.n	8009350 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800936e:	e050      	b.n	8009412 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	e04f      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
 8009374:	40021000 	.word	0x40021000
 8009378:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800937c:	4b27      	ldr	r3, [pc, #156]	; (800941c <HAL_RCC_OscConfig+0x820>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d144      	bne.n	8009412 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009388:	4b24      	ldr	r3, [pc, #144]	; (800941c <HAL_RCC_OscConfig+0x820>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a23      	ldr	r2, [pc, #140]	; (800941c <HAL_RCC_OscConfig+0x820>)
 800938e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009392:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009394:	4b21      	ldr	r3, [pc, #132]	; (800941c <HAL_RCC_OscConfig+0x820>)
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	4a20      	ldr	r2, [pc, #128]	; (800941c <HAL_RCC_OscConfig+0x820>)
 800939a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800939e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80093a0:	f7fb f9a8 	bl	80046f4 <HAL_GetTick>
 80093a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093a6:	e008      	b.n	80093ba <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093a8:	f7fb f9a4 	bl	80046f4 <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d901      	bls.n	80093ba <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e02c      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093ba:	4b18      	ldr	r3, [pc, #96]	; (800941c <HAL_RCC_OscConfig+0x820>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d0f0      	beq.n	80093a8 <HAL_RCC_OscConfig+0x7ac>
 80093c6:	e024      	b.n	8009412 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	2b0c      	cmp	r3, #12
 80093cc:	d01f      	beq.n	800940e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093ce:	4b13      	ldr	r3, [pc, #76]	; (800941c <HAL_RCC_OscConfig+0x820>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a12      	ldr	r2, [pc, #72]	; (800941c <HAL_RCC_OscConfig+0x820>)
 80093d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093da:	f7fb f98b 	bl	80046f4 <HAL_GetTick>
 80093de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093e0:	e008      	b.n	80093f4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093e2:	f7fb f987 	bl	80046f4 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d901      	bls.n	80093f4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e00f      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093f4:	4b09      	ldr	r3, [pc, #36]	; (800941c <HAL_RCC_OscConfig+0x820>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1f0      	bne.n	80093e2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8009400:	4b06      	ldr	r3, [pc, #24]	; (800941c <HAL_RCC_OscConfig+0x820>)
 8009402:	68da      	ldr	r2, [r3, #12]
 8009404:	4905      	ldr	r1, [pc, #20]	; (800941c <HAL_RCC_OscConfig+0x820>)
 8009406:	4b06      	ldr	r3, [pc, #24]	; (8009420 <HAL_RCC_OscConfig+0x824>)
 8009408:	4013      	ands	r3, r2
 800940a:	60cb      	str	r3, [r1, #12]
 800940c:	e001      	b.n	8009412 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e000      	b.n	8009414 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3720      	adds	r7, #32
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	40021000 	.word	0x40021000
 8009420:	feeefffc 	.word	0xfeeefffc

08009424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d101      	bne.n	8009438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e0e7      	b.n	8009608 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009438:	4b75      	ldr	r3, [pc, #468]	; (8009610 <HAL_RCC_ClockConfig+0x1ec>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 0307 	and.w	r3, r3, #7
 8009440:	683a      	ldr	r2, [r7, #0]
 8009442:	429a      	cmp	r2, r3
 8009444:	d910      	bls.n	8009468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009446:	4b72      	ldr	r3, [pc, #456]	; (8009610 <HAL_RCC_ClockConfig+0x1ec>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f023 0207 	bic.w	r2, r3, #7
 800944e:	4970      	ldr	r1, [pc, #448]	; (8009610 <HAL_RCC_ClockConfig+0x1ec>)
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	4313      	orrs	r3, r2
 8009454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009456:	4b6e      	ldr	r3, [pc, #440]	; (8009610 <HAL_RCC_ClockConfig+0x1ec>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0307 	and.w	r3, r3, #7
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	429a      	cmp	r2, r3
 8009462:	d001      	beq.n	8009468 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e0cf      	b.n	8009608 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 0302 	and.w	r3, r3, #2
 8009470:	2b00      	cmp	r3, #0
 8009472:	d010      	beq.n	8009496 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	689a      	ldr	r2, [r3, #8]
 8009478:	4b66      	ldr	r3, [pc, #408]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009480:	429a      	cmp	r2, r3
 8009482:	d908      	bls.n	8009496 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009484:	4b63      	ldr	r3, [pc, #396]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	4960      	ldr	r1, [pc, #384]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 8009492:	4313      	orrs	r3, r2
 8009494:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 0301 	and.w	r3, r3, #1
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d04c      	beq.n	800953c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d107      	bne.n	80094ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80094aa:	4b5a      	ldr	r3, [pc, #360]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d121      	bne.n	80094fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	e0a6      	b.n	8009608 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d107      	bne.n	80094d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80094c2:	4b54      	ldr	r3, [pc, #336]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d115      	bne.n	80094fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e09a      	b.n	8009608 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d107      	bne.n	80094ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80094da:	4b4e      	ldr	r3, [pc, #312]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0302 	and.w	r3, r3, #2
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d109      	bne.n	80094fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e08e      	b.n	8009608 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80094ea:	4b4a      	ldr	r3, [pc, #296]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d101      	bne.n	80094fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e086      	b.n	8009608 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80094fa:	4b46      	ldr	r3, [pc, #280]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f023 0203 	bic.w	r2, r3, #3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	4943      	ldr	r1, [pc, #268]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 8009508:	4313      	orrs	r3, r2
 800950a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800950c:	f7fb f8f2 	bl	80046f4 <HAL_GetTick>
 8009510:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009512:	e00a      	b.n	800952a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009514:	f7fb f8ee 	bl	80046f4 <HAL_GetTick>
 8009518:	4602      	mov	r2, r0
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009522:	4293      	cmp	r3, r2
 8009524:	d901      	bls.n	800952a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	e06e      	b.n	8009608 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800952a:	4b3a      	ldr	r3, [pc, #232]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	f003 020c 	and.w	r2, r3, #12
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	429a      	cmp	r2, r3
 800953a:	d1eb      	bne.n	8009514 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 0302 	and.w	r3, r3, #2
 8009544:	2b00      	cmp	r3, #0
 8009546:	d010      	beq.n	800956a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	689a      	ldr	r2, [r3, #8]
 800954c:	4b31      	ldr	r3, [pc, #196]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009554:	429a      	cmp	r2, r3
 8009556:	d208      	bcs.n	800956a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009558:	4b2e      	ldr	r3, [pc, #184]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	492b      	ldr	r1, [pc, #172]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 8009566:	4313      	orrs	r3, r2
 8009568:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800956a:	4b29      	ldr	r3, [pc, #164]	; (8009610 <HAL_RCC_ClockConfig+0x1ec>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0307 	and.w	r3, r3, #7
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	429a      	cmp	r2, r3
 8009576:	d210      	bcs.n	800959a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009578:	4b25      	ldr	r3, [pc, #148]	; (8009610 <HAL_RCC_ClockConfig+0x1ec>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f023 0207 	bic.w	r2, r3, #7
 8009580:	4923      	ldr	r1, [pc, #140]	; (8009610 <HAL_RCC_ClockConfig+0x1ec>)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	4313      	orrs	r3, r2
 8009586:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009588:	4b21      	ldr	r3, [pc, #132]	; (8009610 <HAL_RCC_ClockConfig+0x1ec>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0307 	and.w	r3, r3, #7
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	429a      	cmp	r2, r3
 8009594:	d001      	beq.n	800959a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	e036      	b.n	8009608 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0304 	and.w	r3, r3, #4
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d008      	beq.n	80095b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095a6:	4b1b      	ldr	r3, [pc, #108]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	4918      	ldr	r1, [pc, #96]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0308 	and.w	r3, r3, #8
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d009      	beq.n	80095d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095c4:	4b13      	ldr	r3, [pc, #76]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	00db      	lsls	r3, r3, #3
 80095d2:	4910      	ldr	r1, [pc, #64]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80095d8:	f000 f824 	bl	8009624 <HAL_RCC_GetSysClockFreq>
 80095dc:	4602      	mov	r2, r0
 80095de:	4b0d      	ldr	r3, [pc, #52]	; (8009614 <HAL_RCC_ClockConfig+0x1f0>)
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	091b      	lsrs	r3, r3, #4
 80095e4:	f003 030f 	and.w	r3, r3, #15
 80095e8:	490b      	ldr	r1, [pc, #44]	; (8009618 <HAL_RCC_ClockConfig+0x1f4>)
 80095ea:	5ccb      	ldrb	r3, [r1, r3]
 80095ec:	f003 031f 	and.w	r3, r3, #31
 80095f0:	fa22 f303 	lsr.w	r3, r2, r3
 80095f4:	4a09      	ldr	r2, [pc, #36]	; (800961c <HAL_RCC_ClockConfig+0x1f8>)
 80095f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80095f8:	4b09      	ldr	r3, [pc, #36]	; (8009620 <HAL_RCC_ClockConfig+0x1fc>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f7fb f829 	bl	8004654 <HAL_InitTick>
 8009602:	4603      	mov	r3, r0
 8009604:	72fb      	strb	r3, [r7, #11]

  return status;
 8009606:	7afb      	ldrb	r3, [r7, #11]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	40022000 	.word	0x40022000
 8009614:	40021000 	.word	0x40021000
 8009618:	08018214 	.word	0x08018214
 800961c:	20000020 	.word	0x20000020
 8009620:	20000024 	.word	0x20000024

08009624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009624:	b480      	push	{r7}
 8009626:	b089      	sub	sp, #36	; 0x24
 8009628:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800962a:	2300      	movs	r3, #0
 800962c:	61fb      	str	r3, [r7, #28]
 800962e:	2300      	movs	r3, #0
 8009630:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009632:	4b3e      	ldr	r3, [pc, #248]	; (800972c <HAL_RCC_GetSysClockFreq+0x108>)
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	f003 030c 	and.w	r3, r3, #12
 800963a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800963c:	4b3b      	ldr	r3, [pc, #236]	; (800972c <HAL_RCC_GetSysClockFreq+0x108>)
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	f003 0303 	and.w	r3, r3, #3
 8009644:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d005      	beq.n	8009658 <HAL_RCC_GetSysClockFreq+0x34>
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	2b0c      	cmp	r3, #12
 8009650:	d121      	bne.n	8009696 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d11e      	bne.n	8009696 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009658:	4b34      	ldr	r3, [pc, #208]	; (800972c <HAL_RCC_GetSysClockFreq+0x108>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 0308 	and.w	r3, r3, #8
 8009660:	2b00      	cmp	r3, #0
 8009662:	d107      	bne.n	8009674 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009664:	4b31      	ldr	r3, [pc, #196]	; (800972c <HAL_RCC_GetSysClockFreq+0x108>)
 8009666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800966a:	0a1b      	lsrs	r3, r3, #8
 800966c:	f003 030f 	and.w	r3, r3, #15
 8009670:	61fb      	str	r3, [r7, #28]
 8009672:	e005      	b.n	8009680 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009674:	4b2d      	ldr	r3, [pc, #180]	; (800972c <HAL_RCC_GetSysClockFreq+0x108>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	091b      	lsrs	r3, r3, #4
 800967a:	f003 030f 	and.w	r3, r3, #15
 800967e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009680:	4a2b      	ldr	r2, [pc, #172]	; (8009730 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009688:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10d      	bne.n	80096ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009694:	e00a      	b.n	80096ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	2b04      	cmp	r3, #4
 800969a:	d102      	bne.n	80096a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800969c:	4b25      	ldr	r3, [pc, #148]	; (8009734 <HAL_RCC_GetSysClockFreq+0x110>)
 800969e:	61bb      	str	r3, [r7, #24]
 80096a0:	e004      	b.n	80096ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	2b08      	cmp	r3, #8
 80096a6:	d101      	bne.n	80096ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80096a8:	4b23      	ldr	r3, [pc, #140]	; (8009738 <HAL_RCC_GetSysClockFreq+0x114>)
 80096aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	2b0c      	cmp	r3, #12
 80096b0:	d134      	bne.n	800971c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80096b2:	4b1e      	ldr	r3, [pc, #120]	; (800972c <HAL_RCC_GetSysClockFreq+0x108>)
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	f003 0303 	and.w	r3, r3, #3
 80096ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d003      	beq.n	80096ca <HAL_RCC_GetSysClockFreq+0xa6>
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	2b03      	cmp	r3, #3
 80096c6:	d003      	beq.n	80096d0 <HAL_RCC_GetSysClockFreq+0xac>
 80096c8:	e005      	b.n	80096d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80096ca:	4b1a      	ldr	r3, [pc, #104]	; (8009734 <HAL_RCC_GetSysClockFreq+0x110>)
 80096cc:	617b      	str	r3, [r7, #20]
      break;
 80096ce:	e005      	b.n	80096dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80096d0:	4b19      	ldr	r3, [pc, #100]	; (8009738 <HAL_RCC_GetSysClockFreq+0x114>)
 80096d2:	617b      	str	r3, [r7, #20]
      break;
 80096d4:	e002      	b.n	80096dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	617b      	str	r3, [r7, #20]
      break;
 80096da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80096dc:	4b13      	ldr	r3, [pc, #76]	; (800972c <HAL_RCC_GetSysClockFreq+0x108>)
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	091b      	lsrs	r3, r3, #4
 80096e2:	f003 0307 	and.w	r3, r3, #7
 80096e6:	3301      	adds	r3, #1
 80096e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80096ea:	4b10      	ldr	r3, [pc, #64]	; (800972c <HAL_RCC_GetSysClockFreq+0x108>)
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	0a1b      	lsrs	r3, r3, #8
 80096f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	fb03 f202 	mul.w	r2, r3, r2
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009700:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009702:	4b0a      	ldr	r3, [pc, #40]	; (800972c <HAL_RCC_GetSysClockFreq+0x108>)
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	0e5b      	lsrs	r3, r3, #25
 8009708:	f003 0303 	and.w	r3, r3, #3
 800970c:	3301      	adds	r3, #1
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009712:	697a      	ldr	r2, [r7, #20]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	fbb2 f3f3 	udiv	r3, r2, r3
 800971a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800971c:	69bb      	ldr	r3, [r7, #24]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3724      	adds	r7, #36	; 0x24
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	40021000 	.word	0x40021000
 8009730:	0801822c 	.word	0x0801822c
 8009734:	00f42400 	.word	0x00f42400
 8009738:	007a1200 	.word	0x007a1200

0800973c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800973c:	b480      	push	{r7}
 800973e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009740:	4b03      	ldr	r3, [pc, #12]	; (8009750 <HAL_RCC_GetHCLKFreq+0x14>)
 8009742:	681b      	ldr	r3, [r3, #0]
}
 8009744:	4618      	mov	r0, r3
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	20000020 	.word	0x20000020

08009754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009758:	f7ff fff0 	bl	800973c <HAL_RCC_GetHCLKFreq>
 800975c:	4602      	mov	r2, r0
 800975e:	4b06      	ldr	r3, [pc, #24]	; (8009778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	0a1b      	lsrs	r3, r3, #8
 8009764:	f003 0307 	and.w	r3, r3, #7
 8009768:	4904      	ldr	r1, [pc, #16]	; (800977c <HAL_RCC_GetPCLK1Freq+0x28>)
 800976a:	5ccb      	ldrb	r3, [r1, r3]
 800976c:	f003 031f 	and.w	r3, r3, #31
 8009770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009774:	4618      	mov	r0, r3
 8009776:	bd80      	pop	{r7, pc}
 8009778:	40021000 	.word	0x40021000
 800977c:	08018224 	.word	0x08018224

08009780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009784:	f7ff ffda 	bl	800973c <HAL_RCC_GetHCLKFreq>
 8009788:	4602      	mov	r2, r0
 800978a:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	0adb      	lsrs	r3, r3, #11
 8009790:	f003 0307 	and.w	r3, r3, #7
 8009794:	4904      	ldr	r1, [pc, #16]	; (80097a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009796:	5ccb      	ldrb	r3, [r1, r3]
 8009798:	f003 031f 	and.w	r3, r3, #31
 800979c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	40021000 	.word	0x40021000
 80097a8:	08018224 	.word	0x08018224

080097ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80097b4:	2300      	movs	r3, #0
 80097b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80097b8:	4b2a      	ldr	r3, [pc, #168]	; (8009864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d003      	beq.n	80097cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80097c4:	f7ff f9a6 	bl	8008b14 <HAL_PWREx_GetVoltageRange>
 80097c8:	6178      	str	r0, [r7, #20]
 80097ca:	e014      	b.n	80097f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80097cc:	4b25      	ldr	r3, [pc, #148]	; (8009864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d0:	4a24      	ldr	r2, [pc, #144]	; (8009864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097d6:	6593      	str	r3, [r2, #88]	; 0x58
 80097d8:	4b22      	ldr	r3, [pc, #136]	; (8009864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097e0:	60fb      	str	r3, [r7, #12]
 80097e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80097e4:	f7ff f996 	bl	8008b14 <HAL_PWREx_GetVoltageRange>
 80097e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80097ea:	4b1e      	ldr	r3, [pc, #120]	; (8009864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097ee:	4a1d      	ldr	r2, [pc, #116]	; (8009864 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80097f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097fc:	d10b      	bne.n	8009816 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2b80      	cmp	r3, #128	; 0x80
 8009802:	d919      	bls.n	8009838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2ba0      	cmp	r3, #160	; 0xa0
 8009808:	d902      	bls.n	8009810 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800980a:	2302      	movs	r3, #2
 800980c:	613b      	str	r3, [r7, #16]
 800980e:	e013      	b.n	8009838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009810:	2301      	movs	r3, #1
 8009812:	613b      	str	r3, [r7, #16]
 8009814:	e010      	b.n	8009838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2b80      	cmp	r3, #128	; 0x80
 800981a:	d902      	bls.n	8009822 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800981c:	2303      	movs	r3, #3
 800981e:	613b      	str	r3, [r7, #16]
 8009820:	e00a      	b.n	8009838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b80      	cmp	r3, #128	; 0x80
 8009826:	d102      	bne.n	800982e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009828:	2302      	movs	r3, #2
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	e004      	b.n	8009838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b70      	cmp	r3, #112	; 0x70
 8009832:	d101      	bne.n	8009838 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009834:	2301      	movs	r3, #1
 8009836:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009838:	4b0b      	ldr	r3, [pc, #44]	; (8009868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f023 0207 	bic.w	r2, r3, #7
 8009840:	4909      	ldr	r1, [pc, #36]	; (8009868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	4313      	orrs	r3, r2
 8009846:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009848:	4b07      	ldr	r3, [pc, #28]	; (8009868 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0307 	and.w	r3, r3, #7
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	429a      	cmp	r2, r3
 8009854:	d001      	beq.n	800985a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e000      	b.n	800985c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	40021000 	.word	0x40021000
 8009868:	40022000 	.word	0x40022000

0800986c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009874:	2300      	movs	r3, #0
 8009876:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009878:	2300      	movs	r3, #0
 800987a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009884:	2b00      	cmp	r3, #0
 8009886:	d031      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800988c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009890:	d01a      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8009892:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009896:	d814      	bhi.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009898:	2b00      	cmp	r3, #0
 800989a:	d009      	beq.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800989c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80098a0:	d10f      	bne.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80098a2:	4b5d      	ldr	r3, [pc, #372]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	4a5c      	ldr	r2, [pc, #368]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80098ae:	e00c      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3304      	adds	r3, #4
 80098b4:	2100      	movs	r1, #0
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 f9ce 	bl	8009c58 <RCCEx_PLLSAI1_Config>
 80098bc:	4603      	mov	r3, r0
 80098be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80098c0:	e003      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	74fb      	strb	r3, [r7, #19]
      break;
 80098c6:	e000      	b.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80098c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ca:	7cfb      	ldrb	r3, [r7, #19]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10b      	bne.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80098d0:	4b51      	ldr	r3, [pc, #324]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098de:	494e      	ldr	r1, [pc, #312]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80098e0:	4313      	orrs	r3, r2
 80098e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80098e6:	e001      	b.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098e8:	7cfb      	ldrb	r3, [r7, #19]
 80098ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 809e 	beq.w	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098fa:	2300      	movs	r3, #0
 80098fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80098fe:	4b46      	ldr	r3, [pc, #280]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d101      	bne.n	800990e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800990a:	2301      	movs	r3, #1
 800990c:	e000      	b.n	8009910 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800990e:	2300      	movs	r3, #0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00d      	beq.n	8009930 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009914:	4b40      	ldr	r3, [pc, #256]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009918:	4a3f      	ldr	r2, [pc, #252]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800991a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800991e:	6593      	str	r3, [r2, #88]	; 0x58
 8009920:	4b3d      	ldr	r3, [pc, #244]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009928:	60bb      	str	r3, [r7, #8]
 800992a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800992c:	2301      	movs	r3, #1
 800992e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009930:	4b3a      	ldr	r3, [pc, #232]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a39      	ldr	r2, [pc, #228]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8009936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800993a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800993c:	f7fa feda 	bl	80046f4 <HAL_GetTick>
 8009940:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009942:	e009      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009944:	f7fa fed6 	bl	80046f4 <HAL_GetTick>
 8009948:	4602      	mov	r2, r0
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	2b02      	cmp	r3, #2
 8009950:	d902      	bls.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8009952:	2303      	movs	r3, #3
 8009954:	74fb      	strb	r3, [r7, #19]
        break;
 8009956:	e005      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009958:	4b30      	ldr	r3, [pc, #192]	; (8009a1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009960:	2b00      	cmp	r3, #0
 8009962:	d0ef      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8009964:	7cfb      	ldrb	r3, [r7, #19]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d15a      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800996a:	4b2b      	ldr	r3, [pc, #172]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800996c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009974:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d01e      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	429a      	cmp	r2, r3
 8009984:	d019      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009986:	4b24      	ldr	r3, [pc, #144]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800998c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009990:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009992:	4b21      	ldr	r3, [pc, #132]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009998:	4a1f      	ldr	r2, [pc, #124]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800999a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800999e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80099a2:	4b1d      	ldr	r3, [pc, #116]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80099a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099a8:	4a1b      	ldr	r2, [pc, #108]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80099aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80099b2:	4a19      	ldr	r2, [pc, #100]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d016      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099c4:	f7fa fe96 	bl	80046f4 <HAL_GetTick>
 80099c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099ca:	e00b      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099cc:	f7fa fe92 	bl	80046f4 <HAL_GetTick>
 80099d0:	4602      	mov	r2, r0
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	1ad3      	subs	r3, r2, r3
 80099d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80099da:	4293      	cmp	r3, r2
 80099dc:	d902      	bls.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	74fb      	strb	r3, [r7, #19]
            break;
 80099e2:	e006      	b.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099e4:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80099e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ea:	f003 0302 	and.w	r3, r3, #2
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0ec      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80099f2:	7cfb      	ldrb	r3, [r7, #19]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10b      	bne.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099f8:	4b07      	ldr	r3, [pc, #28]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80099fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a06:	4904      	ldr	r1, [pc, #16]	; (8009a18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009a0e:	e009      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a10:	7cfb      	ldrb	r3, [r7, #19]
 8009a12:	74bb      	strb	r3, [r7, #18]
 8009a14:	e006      	b.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8009a16:	bf00      	nop
 8009a18:	40021000 	.word	0x40021000
 8009a1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a20:	7cfb      	ldrb	r3, [r7, #19]
 8009a22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a24:	7c7b      	ldrb	r3, [r7, #17]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d105      	bne.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a2a:	4b8a      	ldr	r3, [pc, #552]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a2e:	4a89      	ldr	r2, [pc, #548]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 0301 	and.w	r3, r3, #1
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00a      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a42:	4b84      	ldr	r3, [pc, #528]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a48:	f023 0203 	bic.w	r2, r3, #3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a1b      	ldr	r3, [r3, #32]
 8009a50:	4980      	ldr	r1, [pc, #512]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a52:	4313      	orrs	r3, r2
 8009a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f003 0302 	and.w	r3, r3, #2
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00a      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009a64:	4b7b      	ldr	r3, [pc, #492]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a6a:	f023 020c 	bic.w	r2, r3, #12
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a72:	4978      	ldr	r1, [pc, #480]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a74:	4313      	orrs	r3, r2
 8009a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 0320 	and.w	r3, r3, #32
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00a      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a86:	4b73      	ldr	r3, [pc, #460]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a94:	496f      	ldr	r1, [pc, #444]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00a      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009aa8:	4b6a      	ldr	r3, [pc, #424]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aae:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab6:	4967      	ldr	r1, [pc, #412]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00a      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009aca:	4b62      	ldr	r3, [pc, #392]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad8:	495e      	ldr	r1, [pc, #376]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00a      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009aec:	4b59      	ldr	r3, [pc, #356]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009af2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afa:	4956      	ldr	r1, [pc, #344]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00a      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009b0e:	4b51      	ldr	r3, [pc, #324]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1c:	494d      	ldr	r1, [pc, #308]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d028      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009b30:	4b48      	ldr	r3, [pc, #288]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3e:	4945      	ldr	r1, [pc, #276]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b40:	4313      	orrs	r3, r2
 8009b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b4e:	d106      	bne.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b50:	4b40      	ldr	r3, [pc, #256]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	4a3f      	ldr	r2, [pc, #252]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b5a:	60d3      	str	r3, [r2, #12]
 8009b5c:	e011      	b.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b66:	d10c      	bne.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	2101      	movs	r1, #1
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 f872 	bl	8009c58 <RCCEx_PLLSAI1_Config>
 8009b74:	4603      	mov	r3, r0
 8009b76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009b78:	7cfb      	ldrb	r3, [r7, #19]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d001      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8009b7e:	7cfb      	ldrb	r3, [r7, #19]
 8009b80:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d028      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b8e:	4b31      	ldr	r3, [pc, #196]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b9c:	492d      	ldr	r1, [pc, #180]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ba8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bac:	d106      	bne.n	8009bbc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009bae:	4b29      	ldr	r3, [pc, #164]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	4a28      	ldr	r2, [pc, #160]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bb8:	60d3      	str	r3, [r2, #12]
 8009bba:	e011      	b.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009bc4:	d10c      	bne.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3304      	adds	r3, #4
 8009bca:	2101      	movs	r1, #1
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 f843 	bl	8009c58 <RCCEx_PLLSAI1_Config>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009bd6:	7cfb      	ldrb	r3, [r7, #19]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8009bdc:	7cfb      	ldrb	r3, [r7, #19]
 8009bde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d01c      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009bec:	4b19      	ldr	r3, [pc, #100]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bfa:	4916      	ldr	r1, [pc, #88]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009c0a:	d10c      	bne.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	3304      	adds	r3, #4
 8009c10:	2102      	movs	r1, #2
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 f820 	bl	8009c58 <RCCEx_PLLSAI1_Config>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009c1c:	7cfb      	ldrb	r3, [r7, #19]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d001      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8009c22:	7cfb      	ldrb	r3, [r7, #19]
 8009c24:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00a      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c32:	4b08      	ldr	r3, [pc, #32]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c38:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c40:	4904      	ldr	r1, [pc, #16]	; (8009c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009c48:	7cbb      	ldrb	r3, [r7, #18]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3718      	adds	r7, #24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	40021000 	.word	0x40021000

08009c58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009c66:	4b74      	ldr	r3, [pc, #464]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	f003 0303 	and.w	r3, r3, #3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d018      	beq.n	8009ca4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009c72:	4b71      	ldr	r3, [pc, #452]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	f003 0203 	and.w	r2, r3, #3
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d10d      	bne.n	8009c9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
       ||
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d009      	beq.n	8009c9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8009c8a:	4b6b      	ldr	r3, [pc, #428]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009c8c:	68db      	ldr	r3, [r3, #12]
 8009c8e:	091b      	lsrs	r3, r3, #4
 8009c90:	f003 0307 	and.w	r3, r3, #7
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685b      	ldr	r3, [r3, #4]
       ||
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d047      	beq.n	8009d2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	73fb      	strb	r3, [r7, #15]
 8009ca2:	e044      	b.n	8009d2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2b03      	cmp	r3, #3
 8009caa:	d018      	beq.n	8009cde <RCCEx_PLLSAI1_Config+0x86>
 8009cac:	2b03      	cmp	r3, #3
 8009cae:	d825      	bhi.n	8009cfc <RCCEx_PLLSAI1_Config+0xa4>
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d002      	beq.n	8009cba <RCCEx_PLLSAI1_Config+0x62>
 8009cb4:	2b02      	cmp	r3, #2
 8009cb6:	d009      	beq.n	8009ccc <RCCEx_PLLSAI1_Config+0x74>
 8009cb8:	e020      	b.n	8009cfc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009cba:	4b5f      	ldr	r3, [pc, #380]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f003 0302 	and.w	r3, r3, #2
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d11d      	bne.n	8009d02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009cca:	e01a      	b.n	8009d02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009ccc:	4b5a      	ldr	r3, [pc, #360]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d116      	bne.n	8009d06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009cdc:	e013      	b.n	8009d06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009cde:	4b56      	ldr	r3, [pc, #344]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10f      	bne.n	8009d0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009cea:	4b53      	ldr	r3, [pc, #332]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d109      	bne.n	8009d0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009cfa:	e006      	b.n	8009d0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8009d00:	e004      	b.n	8009d0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009d02:	bf00      	nop
 8009d04:	e002      	b.n	8009d0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009d06:	bf00      	nop
 8009d08:	e000      	b.n	8009d0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009d0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10d      	bne.n	8009d2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009d12:	4b49      	ldr	r3, [pc, #292]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6819      	ldr	r1, [r3, #0]
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	3b01      	subs	r3, #1
 8009d24:	011b      	lsls	r3, r3, #4
 8009d26:	430b      	orrs	r3, r1
 8009d28:	4943      	ldr	r1, [pc, #268]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d17c      	bne.n	8009e2e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009d34:	4b40      	ldr	r3, [pc, #256]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a3f      	ldr	r2, [pc, #252]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d40:	f7fa fcd8 	bl	80046f4 <HAL_GetTick>
 8009d44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009d46:	e009      	b.n	8009d5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009d48:	f7fa fcd4 	bl	80046f4 <HAL_GetTick>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	d902      	bls.n	8009d5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	73fb      	strb	r3, [r7, #15]
        break;
 8009d5a:	e005      	b.n	8009d68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009d5c:	4b36      	ldr	r3, [pc, #216]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1ef      	bne.n	8009d48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d15f      	bne.n	8009e2e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d110      	bne.n	8009d96 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009d74:	4b30      	ldr	r3, [pc, #192]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009d7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	6892      	ldr	r2, [r2, #8]
 8009d84:	0211      	lsls	r1, r2, #8
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	68d2      	ldr	r2, [r2, #12]
 8009d8a:	06d2      	lsls	r2, r2, #27
 8009d8c:	430a      	orrs	r2, r1
 8009d8e:	492a      	ldr	r1, [pc, #168]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d90:	4313      	orrs	r3, r2
 8009d92:	610b      	str	r3, [r1, #16]
 8009d94:	e027      	b.n	8009de6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d112      	bne.n	8009dc2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009d9c:	4b26      	ldr	r3, [pc, #152]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009da4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	6892      	ldr	r2, [r2, #8]
 8009dac:	0211      	lsls	r1, r2, #8
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	6912      	ldr	r2, [r2, #16]
 8009db2:	0852      	lsrs	r2, r2, #1
 8009db4:	3a01      	subs	r2, #1
 8009db6:	0552      	lsls	r2, r2, #21
 8009db8:	430a      	orrs	r2, r1
 8009dba:	491f      	ldr	r1, [pc, #124]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	610b      	str	r3, [r1, #16]
 8009dc0:	e011      	b.n	8009de6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009dc2:	4b1d      	ldr	r3, [pc, #116]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009dca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	6892      	ldr	r2, [r2, #8]
 8009dd2:	0211      	lsls	r1, r2, #8
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	6952      	ldr	r2, [r2, #20]
 8009dd8:	0852      	lsrs	r2, r2, #1
 8009dda:	3a01      	subs	r2, #1
 8009ddc:	0652      	lsls	r2, r2, #25
 8009dde:	430a      	orrs	r2, r1
 8009de0:	4915      	ldr	r1, [pc, #84]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009de2:	4313      	orrs	r3, r2
 8009de4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009de6:	4b14      	ldr	r3, [pc, #80]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a13      	ldr	r2, [pc, #76]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009dec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009df0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009df2:	f7fa fc7f 	bl	80046f4 <HAL_GetTick>
 8009df6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009df8:	e009      	b.n	8009e0e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009dfa:	f7fa fc7b 	bl	80046f4 <HAL_GetTick>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	1ad3      	subs	r3, r2, r3
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d902      	bls.n	8009e0e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009e08:	2303      	movs	r3, #3
 8009e0a:	73fb      	strb	r3, [r7, #15]
          break;
 8009e0c:	e005      	b.n	8009e1a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009e0e:	4b0a      	ldr	r3, [pc, #40]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0ef      	beq.n	8009dfa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8009e1a:	7bfb      	ldrb	r3, [r7, #15]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d106      	bne.n	8009e2e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009e20:	4b05      	ldr	r3, [pc, #20]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e22:	691a      	ldr	r2, [r3, #16]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	4903      	ldr	r1, [pc, #12]	; (8009e38 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	40021000 	.word	0x40021000

08009e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d101      	bne.n	8009e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e049      	b.n	8009ee2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d106      	bne.n	8009e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7fa fa04 	bl	8004270 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	3304      	adds	r3, #4
 8009e78:	4619      	mov	r1, r3
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	f000 fa80 	bl	800a380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ee0:	2300      	movs	r3, #0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}
	...

08009eec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d001      	beq.n	8009f04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e033      	b.n	8009f6c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2202      	movs	r2, #2
 8009f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a19      	ldr	r2, [pc, #100]	; (8009f78 <HAL_TIM_Base_Start+0x8c>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d009      	beq.n	8009f2a <HAL_TIM_Base_Start+0x3e>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f1e:	d004      	beq.n	8009f2a <HAL_TIM_Base_Start+0x3e>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a15      	ldr	r2, [pc, #84]	; (8009f7c <HAL_TIM_Base_Start+0x90>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d115      	bne.n	8009f56 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	689a      	ldr	r2, [r3, #8]
 8009f30:	4b13      	ldr	r3, [pc, #76]	; (8009f80 <HAL_TIM_Base_Start+0x94>)
 8009f32:	4013      	ands	r3, r2
 8009f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2b06      	cmp	r3, #6
 8009f3a:	d015      	beq.n	8009f68 <HAL_TIM_Base_Start+0x7c>
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f42:	d011      	beq.n	8009f68 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f042 0201 	orr.w	r2, r2, #1
 8009f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f54:	e008      	b.n	8009f68 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f042 0201 	orr.w	r2, r2, #1
 8009f64:	601a      	str	r2, [r3, #0]
 8009f66:	e000      	b.n	8009f6a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3714      	adds	r7, #20
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	40012c00 	.word	0x40012c00
 8009f7c:	40014000 	.word	0x40014000
 8009f80:	00010007 	.word	0x00010007

08009f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	f003 0302 	and.w	r3, r3, #2
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d020      	beq.n	8009fe8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f003 0302 	and.w	r3, r3, #2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d01b      	beq.n	8009fe8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f06f 0202 	mvn.w	r2, #2
 8009fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	699b      	ldr	r3, [r3, #24]
 8009fc6:	f003 0303 	and.w	r3, r3, #3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f9b7 	bl	800a342 <HAL_TIM_IC_CaptureCallback>
 8009fd4:	e005      	b.n	8009fe2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f9a9 	bl	800a32e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f9ba 	bl	800a356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f003 0304 	and.w	r3, r3, #4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d020      	beq.n	800a034 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f003 0304 	and.w	r3, r3, #4
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d01b      	beq.n	800a034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f06f 0204 	mvn.w	r2, #4
 800a004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2202      	movs	r2, #2
 800a00a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a016:	2b00      	cmp	r3, #0
 800a018:	d003      	beq.n	800a022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f991 	bl	800a342 <HAL_TIM_IC_CaptureCallback>
 800a020:	e005      	b.n	800a02e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f983 	bl	800a32e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f994 	bl	800a356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	f003 0308 	and.w	r3, r3, #8
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d020      	beq.n	800a080 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f003 0308 	and.w	r3, r3, #8
 800a044:	2b00      	cmp	r3, #0
 800a046:	d01b      	beq.n	800a080 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f06f 0208 	mvn.w	r2, #8
 800a050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2204      	movs	r2, #4
 800a056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	f003 0303 	and.w	r3, r3, #3
 800a062:	2b00      	cmp	r3, #0
 800a064:	d003      	beq.n	800a06e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f96b 	bl	800a342 <HAL_TIM_IC_CaptureCallback>
 800a06c:	e005      	b.n	800a07a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f95d 	bl	800a32e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f96e 	bl	800a356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	f003 0310 	and.w	r3, r3, #16
 800a086:	2b00      	cmp	r3, #0
 800a088:	d020      	beq.n	800a0cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f003 0310 	and.w	r3, r3, #16
 800a090:	2b00      	cmp	r3, #0
 800a092:	d01b      	beq.n	800a0cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f06f 0210 	mvn.w	r2, #16
 800a09c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2208      	movs	r2, #8
 800a0a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	69db      	ldr	r3, [r3, #28]
 800a0aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f945 	bl	800a342 <HAL_TIM_IC_CaptureCallback>
 800a0b8:	e005      	b.n	800a0c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f937 	bl	800a32e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 f948 	bl	800a356 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	f003 0301 	and.w	r3, r3, #1
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00c      	beq.n	800a0f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f003 0301 	and.w	r3, r3, #1
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d007      	beq.n	800a0f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f06f 0201 	mvn.w	r2, #1
 800a0e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f915 	bl	800a31a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00c      	beq.n	800a114 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a100:	2b00      	cmp	r3, #0
 800a102:	d007      	beq.n	800a114 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a10c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 faa4 	bl	800a65c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00c      	beq.n	800a138 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a124:	2b00      	cmp	r3, #0
 800a126:	d007      	beq.n	800a138 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fa9c 	bl	800a670 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00c      	beq.n	800a15c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d007      	beq.n	800a15c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f907 	bl	800a36a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	f003 0320 	and.w	r3, r3, #32
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00c      	beq.n	800a180 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f003 0320 	and.w	r3, r3, #32
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d007      	beq.n	800a180 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f06f 0220 	mvn.w	r2, #32
 800a178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fa64 	bl	800a648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a180:	bf00      	nop
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d101      	bne.n	800a1a4 <HAL_TIM_ConfigClockSource+0x1c>
 800a1a0:	2302      	movs	r3, #2
 800a1a2:	e0b6      	b.n	800a312 <HAL_TIM_ConfigClockSource+0x18a>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a1c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1e0:	d03e      	beq.n	800a260 <HAL_TIM_ConfigClockSource+0xd8>
 800a1e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1e6:	f200 8087 	bhi.w	800a2f8 <HAL_TIM_ConfigClockSource+0x170>
 800a1ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ee:	f000 8086 	beq.w	800a2fe <HAL_TIM_ConfigClockSource+0x176>
 800a1f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1f6:	d87f      	bhi.n	800a2f8 <HAL_TIM_ConfigClockSource+0x170>
 800a1f8:	2b70      	cmp	r3, #112	; 0x70
 800a1fa:	d01a      	beq.n	800a232 <HAL_TIM_ConfigClockSource+0xaa>
 800a1fc:	2b70      	cmp	r3, #112	; 0x70
 800a1fe:	d87b      	bhi.n	800a2f8 <HAL_TIM_ConfigClockSource+0x170>
 800a200:	2b60      	cmp	r3, #96	; 0x60
 800a202:	d050      	beq.n	800a2a6 <HAL_TIM_ConfigClockSource+0x11e>
 800a204:	2b60      	cmp	r3, #96	; 0x60
 800a206:	d877      	bhi.n	800a2f8 <HAL_TIM_ConfigClockSource+0x170>
 800a208:	2b50      	cmp	r3, #80	; 0x50
 800a20a:	d03c      	beq.n	800a286 <HAL_TIM_ConfigClockSource+0xfe>
 800a20c:	2b50      	cmp	r3, #80	; 0x50
 800a20e:	d873      	bhi.n	800a2f8 <HAL_TIM_ConfigClockSource+0x170>
 800a210:	2b40      	cmp	r3, #64	; 0x40
 800a212:	d058      	beq.n	800a2c6 <HAL_TIM_ConfigClockSource+0x13e>
 800a214:	2b40      	cmp	r3, #64	; 0x40
 800a216:	d86f      	bhi.n	800a2f8 <HAL_TIM_ConfigClockSource+0x170>
 800a218:	2b30      	cmp	r3, #48	; 0x30
 800a21a:	d064      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x15e>
 800a21c:	2b30      	cmp	r3, #48	; 0x30
 800a21e:	d86b      	bhi.n	800a2f8 <HAL_TIM_ConfigClockSource+0x170>
 800a220:	2b20      	cmp	r3, #32
 800a222:	d060      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x15e>
 800a224:	2b20      	cmp	r3, #32
 800a226:	d867      	bhi.n	800a2f8 <HAL_TIM_ConfigClockSource+0x170>
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d05c      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x15e>
 800a22c:	2b10      	cmp	r3, #16
 800a22e:	d05a      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0x15e>
 800a230:	e062      	b.n	800a2f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a242:	f000 f97b 	bl	800a53c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a254:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	609a      	str	r2, [r3, #8]
      break;
 800a25e:	e04f      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a270:	f000 f964 	bl	800a53c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	689a      	ldr	r2, [r3, #8]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a282:	609a      	str	r2, [r3, #8]
      break;
 800a284:	e03c      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a292:	461a      	mov	r2, r3
 800a294:	f000 f8d8 	bl	800a448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2150      	movs	r1, #80	; 0x50
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 f931 	bl	800a506 <TIM_ITRx_SetConfig>
      break;
 800a2a4:	e02c      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	f000 f8f7 	bl	800a4a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2160      	movs	r1, #96	; 0x60
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f000 f921 	bl	800a506 <TIM_ITRx_SetConfig>
      break;
 800a2c4:	e01c      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	f000 f8b8 	bl	800a448 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2140      	movs	r1, #64	; 0x40
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 f911 	bl	800a506 <TIM_ITRx_SetConfig>
      break;
 800a2e4:	e00c      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	4610      	mov	r0, r2
 800a2f2:	f000 f908 	bl	800a506 <TIM_ITRx_SetConfig>
      break;
 800a2f6:	e003      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	73fb      	strb	r3, [r7, #15]
      break;
 800a2fc:	e000      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a2fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a310:	7bfb      	ldrb	r3, [r7, #15]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b083      	sub	sp, #12
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a322:	bf00      	nop
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a32e:	b480      	push	{r7}
 800a330:	b083      	sub	sp, #12
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a336:	bf00      	nop
 800a338:	370c      	adds	r7, #12
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a342:	b480      	push	{r7}
 800a344:	b083      	sub	sp, #12
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a34a:	bf00      	nop
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a356:	b480      	push	{r7}
 800a358:	b083      	sub	sp, #12
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a35e:	bf00      	nop
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a372:	bf00      	nop
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
	...

0800a380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a2a      	ldr	r2, [pc, #168]	; (800a43c <TIM_Base_SetConfig+0xbc>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d003      	beq.n	800a3a0 <TIM_Base_SetConfig+0x20>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a39e:	d108      	bne.n	800a3b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a21      	ldr	r2, [pc, #132]	; (800a43c <TIM_Base_SetConfig+0xbc>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d00b      	beq.n	800a3d2 <TIM_Base_SetConfig+0x52>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3c0:	d007      	beq.n	800a3d2 <TIM_Base_SetConfig+0x52>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	4a1e      	ldr	r2, [pc, #120]	; (800a440 <TIM_Base_SetConfig+0xc0>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d003      	beq.n	800a3d2 <TIM_Base_SetConfig+0x52>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a1d      	ldr	r2, [pc, #116]	; (800a444 <TIM_Base_SetConfig+0xc4>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d108      	bne.n	800a3e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	689a      	ldr	r2, [r3, #8]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a0c      	ldr	r2, [pc, #48]	; (800a43c <TIM_Base_SetConfig+0xbc>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d007      	beq.n	800a420 <TIM_Base_SetConfig+0xa0>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a0b      	ldr	r2, [pc, #44]	; (800a440 <TIM_Base_SetConfig+0xc0>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d003      	beq.n	800a420 <TIM_Base_SetConfig+0xa0>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a0a      	ldr	r2, [pc, #40]	; (800a444 <TIM_Base_SetConfig+0xc4>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d103      	bne.n	800a428 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	691a      	ldr	r2, [r3, #16]
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	615a      	str	r2, [r3, #20]
}
 800a42e:	bf00      	nop
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	40012c00 	.word	0x40012c00
 800a440:	40014000 	.word	0x40014000
 800a444:	40014400 	.word	0x40014400

0800a448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a448:	b480      	push	{r7}
 800a44a:	b087      	sub	sp, #28
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6a1b      	ldr	r3, [r3, #32]
 800a458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6a1b      	ldr	r3, [r3, #32]
 800a45e:	f023 0201 	bic.w	r2, r3, #1
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	699b      	ldr	r3, [r3, #24]
 800a46a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	011b      	lsls	r3, r3, #4
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	f023 030a 	bic.w	r3, r3, #10
 800a484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	621a      	str	r2, [r3, #32]
}
 800a49a:	bf00      	nop
 800a49c:	371c      	adds	r7, #28
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr

0800a4a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b087      	sub	sp, #28
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	60f8      	str	r0, [r7, #12]
 800a4ae:	60b9      	str	r1, [r7, #8]
 800a4b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6a1b      	ldr	r3, [r3, #32]
 800a4b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6a1b      	ldr	r3, [r3, #32]
 800a4bc:	f023 0210 	bic.w	r2, r3, #16
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	699b      	ldr	r3, [r3, #24]
 800a4c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	031b      	lsls	r3, r3, #12
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a4e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	011b      	lsls	r3, r3, #4
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	621a      	str	r2, [r3, #32]
}
 800a4fa:	bf00      	nop
 800a4fc:	371c      	adds	r7, #28
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a506:	b480      	push	{r7}
 800a508:	b085      	sub	sp, #20
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a51c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	4313      	orrs	r3, r2
 800a524:	f043 0307 	orr.w	r3, r3, #7
 800a528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	609a      	str	r2, [r3, #8]
}
 800a530:	bf00      	nop
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr

0800a53c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b087      	sub	sp, #28
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	021a      	lsls	r2, r3, #8
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	431a      	orrs	r2, r3
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	4313      	orrs	r3, r2
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	4313      	orrs	r3, r2
 800a568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	609a      	str	r2, [r3, #8]
}
 800a570:	bf00      	nop
 800a572:	371c      	adds	r7, #28
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d101      	bne.n	800a594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a590:	2302      	movs	r3, #2
 800a592:	e04f      	b.n	800a634 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a21      	ldr	r2, [pc, #132]	; (800a640 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d108      	bne.n	800a5d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a5c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a14      	ldr	r2, [pc, #80]	; (800a640 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d009      	beq.n	800a608 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5fc:	d004      	beq.n	800a608 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a10      	ldr	r2, [pc, #64]	; (800a644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d10c      	bne.n	800a622 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a60e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	68ba      	ldr	r2, [r7, #8]
 800a616:	4313      	orrs	r3, r2
 800a618:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3714      	adds	r7, #20
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	40012c00 	.word	0x40012c00
 800a644:	40014000 	.word	0x40014000

0800a648 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a678:	bf00      	nop
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d101      	bne.n	800a696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a692:	2301      	movs	r3, #1
 800a694:	e040      	b.n	800a718 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d106      	bne.n	800a6ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7f9 fd54 	bl	8004154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2224      	movs	r2, #36	; 0x24
 800a6b0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f022 0201 	bic.w	r2, r2, #1
 800a6c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 feb0 	bl	800b430 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fc81 	bl	800afd8 <UART_SetConfig>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d101      	bne.n	800a6e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e01b      	b.n	800a718 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	689a      	ldr	r2, [r3, #8]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f042 0201 	orr.w	r2, r2, #1
 800a70e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f000 ff2f 	bl	800b574 <UART_CheckIdleState>
 800a716:	4603      	mov	r3, r0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b08a      	sub	sp, #40	; 0x28
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	4613      	mov	r3, r2
 800a72c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a734:	2b20      	cmp	r3, #32
 800a736:	d137      	bne.n	800a7a8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d002      	beq.n	800a744 <HAL_UART_Receive_DMA+0x24>
 800a73e:	88fb      	ldrh	r3, [r7, #6]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d101      	bne.n	800a748 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	e030      	b.n	800a7aa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a18      	ldr	r2, [pc, #96]	; (800a7b4 <HAL_UART_Receive_DMA+0x94>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d01f      	beq.n	800a798 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a762:	2b00      	cmp	r3, #0
 800a764:	d018      	beq.n	800a798 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	e853 3f00 	ldrex	r3, [r3]
 800a772:	613b      	str	r3, [r7, #16]
   return(result);
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a77a:	627b      	str	r3, [r7, #36]	; 0x24
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	461a      	mov	r2, r3
 800a782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a784:	623b      	str	r3, [r7, #32]
 800a786:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a788:	69f9      	ldr	r1, [r7, #28]
 800a78a:	6a3a      	ldr	r2, [r7, #32]
 800a78c:	e841 2300 	strex	r3, r2, [r1]
 800a790:	61bb      	str	r3, [r7, #24]
   return(result);
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1e6      	bne.n	800a766 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a798:	88fb      	ldrh	r3, [r7, #6]
 800a79a:	461a      	mov	r2, r3
 800a79c:	68b9      	ldr	r1, [r7, #8]
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f000 fff8 	bl	800b794 <UART_Start_Receive_DMA>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	e000      	b.n	800a7aa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a7a8:	2302      	movs	r3, #2
  }
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3728      	adds	r7, #40	; 0x28
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	40008000 	.word	0x40008000

0800a7b8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b0a0      	sub	sp, #128	; 0x80
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7c8:	e853 3f00 	ldrex	r3, [r3]
 800a7cc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a7ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7d0:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800a7d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	461a      	mov	r2, r3
 800a7dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a7de:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7e0:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a7e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a7e6:	e841 2300 	strex	r3, r2, [r1]
 800a7ea:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a7ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1e6      	bne.n	800a7c0 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3308      	adds	r3, #8
 800a7f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7fc:	e853 3f00 	ldrex	r3, [r3]
 800a800:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a804:	f023 0301 	bic.w	r3, r3, #1
 800a808:	67bb      	str	r3, [r7, #120]	; 0x78
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3308      	adds	r3, #8
 800a810:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a812:	657a      	str	r2, [r7, #84]	; 0x54
 800a814:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a816:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a818:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a81a:	e841 2300 	strex	r3, r2, [r1]
 800a81e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1e5      	bne.n	800a7f2 <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d118      	bne.n	800a860 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a836:	e853 3f00 	ldrex	r3, [r3]
 800a83a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83e:	f023 0310 	bic.w	r3, r3, #16
 800a842:	677b      	str	r3, [r7, #116]	; 0x74
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	461a      	mov	r2, r3
 800a84a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a84c:	643b      	str	r3, [r7, #64]	; 0x40
 800a84e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a850:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a852:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a854:	e841 2300 	strex	r3, r2, [r1]
 800a858:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d1e6      	bne.n	800a82e <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a86a:	2b80      	cmp	r3, #128	; 0x80
 800a86c:	d137      	bne.n	800a8de <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	3308      	adds	r3, #8
 800a874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a876:	6a3b      	ldr	r3, [r7, #32]
 800a878:	e853 3f00 	ldrex	r3, [r3]
 800a87c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a884:	673b      	str	r3, [r7, #112]	; 0x70
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	3308      	adds	r3, #8
 800a88c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a88e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a890:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a892:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a896:	e841 2300 	strex	r3, r2, [r1]
 800a89a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1e5      	bne.n	800a86e <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d019      	beq.n	800a8de <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7fb fc16 	bl	80060e8 <HAL_DMA_Abort>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00d      	beq.n	800a8de <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7fb fd3c 	bl	8006344 <HAL_DMA_GetError>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b20      	cmp	r3, #32
 800a8d0:	d105      	bne.n	800a8de <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2210      	movs	r2, #16
 800a8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	e063      	b.n	800a9a6 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8e8:	2b40      	cmp	r3, #64	; 0x40
 800a8ea:	d137      	bne.n	800a95c <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	3308      	adds	r3, #8
 800a8f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	e853 3f00 	ldrex	r3, [r3]
 800a8fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a902:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	3308      	adds	r3, #8
 800a90a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a90c:	61ba      	str	r2, [r7, #24]
 800a90e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a910:	6979      	ldr	r1, [r7, #20]
 800a912:	69ba      	ldr	r2, [r7, #24]
 800a914:	e841 2300 	strex	r3, r2, [r1]
 800a918:	613b      	str	r3, [r7, #16]
   return(result);
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1e5      	bne.n	800a8ec <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a924:	2b00      	cmp	r3, #0
 800a926:	d019      	beq.n	800a95c <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a92c:	2200      	movs	r2, #0
 800a92e:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a934:	4618      	mov	r0, r3
 800a936:	f7fb fbd7 	bl	80060e8 <HAL_DMA_Abort>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00d      	beq.n	800a95c <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a944:	4618      	mov	r0, r3
 800a946:	f7fb fcfd 	bl	8006344 <HAL_DMA_GetError>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b20      	cmp	r3, #32
 800a94e:	d105      	bne.n	800a95c <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2210      	movs	r2, #16
 800a954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a958:	2303      	movs	r3, #3
 800a95a:	e024      	b.n	800a9a6 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	220f      	movs	r2, #15
 800a972:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	8b1b      	ldrh	r3, [r3, #24]
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f042 0208 	orr.w	r2, r2, #8
 800a984:	b292      	uxth	r2, r2
 800a986:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2220      	movs	r2, #32
 800a98c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2220      	movs	r2, #32
 800a992:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3780      	adds	r7, #128	; 0x80
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b0ba      	sub	sp, #232	; 0xe8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	69db      	ldr	r3, [r3, #28]
 800a9be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a9d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a9da:	f640 030f 	movw	r3, #2063	; 0x80f
 800a9de:	4013      	ands	r3, r2
 800a9e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a9e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d115      	bne.n	800aa18 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a9ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9f0:	f003 0320 	and.w	r3, r3, #32
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00f      	beq.n	800aa18 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a9f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9fc:	f003 0320 	and.w	r3, r3, #32
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d009      	beq.n	800aa18 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 82ae 	beq.w	800af6a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	4798      	blx	r3
      }
      return;
 800aa16:	e2a8      	b.n	800af6a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800aa18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 8117 	beq.w	800ac50 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aa22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa26:	f003 0301 	and.w	r3, r3, #1
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d106      	bne.n	800aa3c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800aa2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800aa32:	4b85      	ldr	r3, [pc, #532]	; (800ac48 <HAL_UART_IRQHandler+0x298>)
 800aa34:	4013      	ands	r3, r2
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f000 810a 	beq.w	800ac50 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa40:	f003 0301 	and.w	r3, r3, #1
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d011      	beq.n	800aa6c <HAL_UART_IRQHandler+0xbc>
 800aa48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d00b      	beq.n	800aa6c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa62:	f043 0201 	orr.w	r2, r3, #1
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa70:	f003 0302 	and.w	r3, r3, #2
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d011      	beq.n	800aa9c <HAL_UART_IRQHandler+0xec>
 800aa78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa7c:	f003 0301 	and.w	r3, r3, #1
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00b      	beq.n	800aa9c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2202      	movs	r2, #2
 800aa8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa92:	f043 0204 	orr.w	r2, r3, #4
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaa0:	f003 0304 	and.w	r3, r3, #4
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d011      	beq.n	800aacc <HAL_UART_IRQHandler+0x11c>
 800aaa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaac:	f003 0301 	and.w	r3, r3, #1
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00b      	beq.n	800aacc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2204      	movs	r2, #4
 800aaba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aac2:	f043 0202 	orr.w	r2, r3, #2
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aacc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aad0:	f003 0308 	and.w	r3, r3, #8
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d017      	beq.n	800ab08 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aadc:	f003 0320 	and.w	r3, r3, #32
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d105      	bne.n	800aaf0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aae8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00b      	beq.n	800ab08 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2208      	movs	r2, #8
 800aaf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aafe:	f043 0208 	orr.w	r2, r3, #8
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d012      	beq.n	800ab3a <HAL_UART_IRQHandler+0x18a>
 800ab14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00c      	beq.n	800ab3a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab30:	f043 0220 	orr.w	r2, r3, #32
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f000 8214 	beq.w	800af6e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab4a:	f003 0320 	and.w	r3, r3, #32
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00d      	beq.n	800ab6e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab56:	f003 0320 	and.w	r3, r3, #32
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d007      	beq.n	800ab6e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d003      	beq.n	800ab6e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab82:	2b40      	cmp	r3, #64	; 0x40
 800ab84:	d005      	beq.n	800ab92 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d04f      	beq.n	800ac32 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fec4 	bl	800b920 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aba2:	2b40      	cmp	r3, #64	; 0x40
 800aba4:	d141      	bne.n	800ac2a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3308      	adds	r3, #8
 800abac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800abb4:	e853 3f00 	ldrex	r3, [r3]
 800abb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800abbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3308      	adds	r3, #8
 800abce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800abd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800abd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800abde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800abe2:	e841 2300 	strex	r3, r2, [r1]
 800abe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800abea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1d9      	bne.n	800aba6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d013      	beq.n	800ac22 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abfe:	4a13      	ldr	r2, [pc, #76]	; (800ac4c <HAL_UART_IRQHandler+0x29c>)
 800ac00:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fb faac 	bl	8006164 <HAL_DMA_Abort_IT>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d017      	beq.n	800ac42 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac20:	e00f      	b.n	800ac42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f9c2 	bl	800afac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac28:	e00b      	b.n	800ac42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f9be 	bl	800afac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac30:	e007      	b.n	800ac42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 f9ba 	bl	800afac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800ac40:	e195      	b.n	800af6e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac42:	bf00      	nop
    return;
 800ac44:	e193      	b.n	800af6e <HAL_UART_IRQHandler+0x5be>
 800ac46:	bf00      	nop
 800ac48:	04000120 	.word	0x04000120
 800ac4c:	0800bbd1 	.word	0x0800bbd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	f040 814e 	bne.w	800aef6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ac5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac5e:	f003 0310 	and.w	r3, r3, #16
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f000 8147 	beq.w	800aef6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac6c:	f003 0310 	and.w	r3, r3, #16
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f000 8140 	beq.w	800aef6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2210      	movs	r2, #16
 800ac7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac88:	2b40      	cmp	r3, #64	; 0x40
 800ac8a:	f040 80b8 	bne.w	800adfe <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f000 8167 	beq.w	800af72 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800acaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800acae:	429a      	cmp	r2, r3
 800acb0:	f080 815f 	bcs.w	800af72 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800acba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 0320 	and.w	r3, r3, #32
 800acca:	2b00      	cmp	r3, #0
 800accc:	f040 8086 	bne.w	800addc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800acdc:	e853 3f00 	ldrex	r3, [r3]
 800ace0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ace4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ace8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	461a      	mov	r2, r3
 800acf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800acfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800acfe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ad06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ad0a:	e841 2300 	strex	r3, r2, [r1]
 800ad0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ad12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1da      	bne.n	800acd0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	3308      	adds	r3, #8
 800ad20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad24:	e853 3f00 	ldrex	r3, [r3]
 800ad28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ad2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad2c:	f023 0301 	bic.w	r3, r3, #1
 800ad30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	3308      	adds	r3, #8
 800ad3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ad3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ad42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ad46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ad4a:	e841 2300 	strex	r3, r2, [r1]
 800ad4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ad50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1e1      	bne.n	800ad1a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3308      	adds	r3, #8
 800ad5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad60:	e853 3f00 	ldrex	r3, [r3]
 800ad64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ad66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	3308      	adds	r3, #8
 800ad76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ad7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ad7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ad80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad82:	e841 2300 	strex	r3, r2, [r1]
 800ad86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ad88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1e3      	bne.n	800ad56 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2220      	movs	r2, #32
 800ad92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ada4:	e853 3f00 	ldrex	r3, [r3]
 800ada8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800adaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800adac:	f023 0310 	bic.w	r3, r3, #16
 800adb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	461a      	mov	r2, r3
 800adba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800adbe:	65bb      	str	r3, [r7, #88]	; 0x58
 800adc0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800adc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800adc6:	e841 2300 	strex	r3, r2, [r1]
 800adca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800adcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1e4      	bne.n	800ad9c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800add6:	4618      	mov	r0, r3
 800add8:	f7fb f986 	bl	80060e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2202      	movs	r2, #2
 800ade0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800adee:	b29b      	uxth	r3, r3
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	4619      	mov	r1, r3
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f8e2 	bl	800afc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800adfc:	e0b9      	b.n	800af72 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	1ad3      	subs	r3, r2, r3
 800ae0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	f000 80ab 	beq.w	800af76 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800ae20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 80a6 	beq.w	800af76 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	e853 3f00 	ldrex	r3, [r3]
 800ae36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	461a      	mov	r2, r3
 800ae48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae4c:	647b      	str	r3, [r7, #68]	; 0x44
 800ae4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae54:	e841 2300 	strex	r3, r2, [r1]
 800ae58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d1e4      	bne.n	800ae2a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	3308      	adds	r3, #8
 800ae66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6a:	e853 3f00 	ldrex	r3, [r3]
 800ae6e:	623b      	str	r3, [r7, #32]
   return(result);
 800ae70:	6a3b      	ldr	r3, [r7, #32]
 800ae72:	f023 0301 	bic.w	r3, r3, #1
 800ae76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	3308      	adds	r3, #8
 800ae80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ae84:	633a      	str	r2, [r7, #48]	; 0x30
 800ae86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae8c:	e841 2300 	strex	r3, r2, [r1]
 800ae90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1e3      	bne.n	800ae60 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2220      	movs	r2, #32
 800ae9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	e853 3f00 	ldrex	r3, [r3]
 800aeb8:	60fb      	str	r3, [r7, #12]
   return(result);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f023 0310 	bic.w	r3, r3, #16
 800aec0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	461a      	mov	r2, r3
 800aeca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aece:	61fb      	str	r3, [r7, #28]
 800aed0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed2:	69b9      	ldr	r1, [r7, #24]
 800aed4:	69fa      	ldr	r2, [r7, #28]
 800aed6:	e841 2300 	strex	r3, r2, [r1]
 800aeda:	617b      	str	r3, [r7, #20]
   return(result);
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1e4      	bne.n	800aeac <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2202      	movs	r2, #2
 800aee6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aeec:	4619      	mov	r1, r3
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 f866 	bl	800afc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aef4:	e03f      	b.n	800af76 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aefa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00e      	beq.n	800af20 <HAL_UART_IRQHandler+0x570>
 800af02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d008      	beq.n	800af20 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800af16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fe99 	bl	800bc50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af1e:	e02d      	b.n	800af7c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800af20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00e      	beq.n	800af4a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800af2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af34:	2b00      	cmp	r3, #0
 800af36:	d008      	beq.n	800af4a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d01c      	beq.n	800af7a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	4798      	blx	r3
    }
    return;
 800af48:	e017      	b.n	800af7a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800af4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af52:	2b00      	cmp	r3, #0
 800af54:	d012      	beq.n	800af7c <HAL_UART_IRQHandler+0x5cc>
 800af56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00c      	beq.n	800af7c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 fe4a 	bl	800bbfc <UART_EndTransmit_IT>
    return;
 800af68:	e008      	b.n	800af7c <HAL_UART_IRQHandler+0x5cc>
      return;
 800af6a:	bf00      	nop
 800af6c:	e006      	b.n	800af7c <HAL_UART_IRQHandler+0x5cc>
    return;
 800af6e:	bf00      	nop
 800af70:	e004      	b.n	800af7c <HAL_UART_IRQHandler+0x5cc>
      return;
 800af72:	bf00      	nop
 800af74:	e002      	b.n	800af7c <HAL_UART_IRQHandler+0x5cc>
      return;
 800af76:	bf00      	nop
 800af78:	e000      	b.n	800af7c <HAL_UART_IRQHandler+0x5cc>
    return;
 800af7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800af7c:	37e8      	adds	r7, #232	; 0xe8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop

0800af84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	460b      	mov	r3, r1
 800afca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afdc:	b08a      	sub	sp, #40	; 0x28
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	689a      	ldr	r2, [r3, #8]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	431a      	orrs	r2, r3
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	695b      	ldr	r3, [r3, #20]
 800aff6:	431a      	orrs	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	69db      	ldr	r3, [r3, #28]
 800affc:	4313      	orrs	r3, r2
 800affe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	4bb4      	ldr	r3, [pc, #720]	; (800b2d8 <UART_SetConfig+0x300>)
 800b008:	4013      	ands	r3, r2
 800b00a:	68fa      	ldr	r2, [r7, #12]
 800b00c:	6812      	ldr	r2, [r2, #0]
 800b00e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b010:	430b      	orrs	r3, r1
 800b012:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	68da      	ldr	r2, [r3, #12]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	430a      	orrs	r2, r1
 800b028:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	699b      	ldr	r3, [r3, #24]
 800b02e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4aa9      	ldr	r2, [pc, #676]	; (800b2dc <UART_SetConfig+0x304>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d004      	beq.n	800b044 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	6a1b      	ldr	r3, [r3, #32]
 800b03e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b040:	4313      	orrs	r3, r2
 800b042:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b054:	430a      	orrs	r2, r1
 800b056:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4aa0      	ldr	r2, [pc, #640]	; (800b2e0 <UART_SetConfig+0x308>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d126      	bne.n	800b0b0 <UART_SetConfig+0xd8>
 800b062:	4ba0      	ldr	r3, [pc, #640]	; (800b2e4 <UART_SetConfig+0x30c>)
 800b064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b068:	f003 0303 	and.w	r3, r3, #3
 800b06c:	2b03      	cmp	r3, #3
 800b06e:	d81b      	bhi.n	800b0a8 <UART_SetConfig+0xd0>
 800b070:	a201      	add	r2, pc, #4	; (adr r2, 800b078 <UART_SetConfig+0xa0>)
 800b072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b076:	bf00      	nop
 800b078:	0800b089 	.word	0x0800b089
 800b07c:	0800b099 	.word	0x0800b099
 800b080:	0800b091 	.word	0x0800b091
 800b084:	0800b0a1 	.word	0x0800b0a1
 800b088:	2301      	movs	r3, #1
 800b08a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b08e:	e080      	b.n	800b192 <UART_SetConfig+0x1ba>
 800b090:	2302      	movs	r3, #2
 800b092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b096:	e07c      	b.n	800b192 <UART_SetConfig+0x1ba>
 800b098:	2304      	movs	r3, #4
 800b09a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b09e:	e078      	b.n	800b192 <UART_SetConfig+0x1ba>
 800b0a0:	2308      	movs	r3, #8
 800b0a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b0a6:	e074      	b.n	800b192 <UART_SetConfig+0x1ba>
 800b0a8:	2310      	movs	r3, #16
 800b0aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b0ae:	e070      	b.n	800b192 <UART_SetConfig+0x1ba>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a8c      	ldr	r2, [pc, #560]	; (800b2e8 <UART_SetConfig+0x310>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d138      	bne.n	800b12c <UART_SetConfig+0x154>
 800b0ba:	4b8a      	ldr	r3, [pc, #552]	; (800b2e4 <UART_SetConfig+0x30c>)
 800b0bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0c0:	f003 030c 	and.w	r3, r3, #12
 800b0c4:	2b0c      	cmp	r3, #12
 800b0c6:	d82d      	bhi.n	800b124 <UART_SetConfig+0x14c>
 800b0c8:	a201      	add	r2, pc, #4	; (adr r2, 800b0d0 <UART_SetConfig+0xf8>)
 800b0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ce:	bf00      	nop
 800b0d0:	0800b105 	.word	0x0800b105
 800b0d4:	0800b125 	.word	0x0800b125
 800b0d8:	0800b125 	.word	0x0800b125
 800b0dc:	0800b125 	.word	0x0800b125
 800b0e0:	0800b115 	.word	0x0800b115
 800b0e4:	0800b125 	.word	0x0800b125
 800b0e8:	0800b125 	.word	0x0800b125
 800b0ec:	0800b125 	.word	0x0800b125
 800b0f0:	0800b10d 	.word	0x0800b10d
 800b0f4:	0800b125 	.word	0x0800b125
 800b0f8:	0800b125 	.word	0x0800b125
 800b0fc:	0800b125 	.word	0x0800b125
 800b100:	0800b11d 	.word	0x0800b11d
 800b104:	2300      	movs	r3, #0
 800b106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b10a:	e042      	b.n	800b192 <UART_SetConfig+0x1ba>
 800b10c:	2302      	movs	r3, #2
 800b10e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b112:	e03e      	b.n	800b192 <UART_SetConfig+0x1ba>
 800b114:	2304      	movs	r3, #4
 800b116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b11a:	e03a      	b.n	800b192 <UART_SetConfig+0x1ba>
 800b11c:	2308      	movs	r3, #8
 800b11e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b122:	e036      	b.n	800b192 <UART_SetConfig+0x1ba>
 800b124:	2310      	movs	r3, #16
 800b126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b12a:	e032      	b.n	800b192 <UART_SetConfig+0x1ba>
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a6a      	ldr	r2, [pc, #424]	; (800b2dc <UART_SetConfig+0x304>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d12a      	bne.n	800b18c <UART_SetConfig+0x1b4>
 800b136:	4b6b      	ldr	r3, [pc, #428]	; (800b2e4 <UART_SetConfig+0x30c>)
 800b138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b13c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b140:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b144:	d01a      	beq.n	800b17c <UART_SetConfig+0x1a4>
 800b146:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b14a:	d81b      	bhi.n	800b184 <UART_SetConfig+0x1ac>
 800b14c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b150:	d00c      	beq.n	800b16c <UART_SetConfig+0x194>
 800b152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b156:	d815      	bhi.n	800b184 <UART_SetConfig+0x1ac>
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d003      	beq.n	800b164 <UART_SetConfig+0x18c>
 800b15c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b160:	d008      	beq.n	800b174 <UART_SetConfig+0x19c>
 800b162:	e00f      	b.n	800b184 <UART_SetConfig+0x1ac>
 800b164:	2300      	movs	r3, #0
 800b166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b16a:	e012      	b.n	800b192 <UART_SetConfig+0x1ba>
 800b16c:	2302      	movs	r3, #2
 800b16e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b172:	e00e      	b.n	800b192 <UART_SetConfig+0x1ba>
 800b174:	2304      	movs	r3, #4
 800b176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b17a:	e00a      	b.n	800b192 <UART_SetConfig+0x1ba>
 800b17c:	2308      	movs	r3, #8
 800b17e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b182:	e006      	b.n	800b192 <UART_SetConfig+0x1ba>
 800b184:	2310      	movs	r3, #16
 800b186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b18a:	e002      	b.n	800b192 <UART_SetConfig+0x1ba>
 800b18c:	2310      	movs	r3, #16
 800b18e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a51      	ldr	r2, [pc, #324]	; (800b2dc <UART_SetConfig+0x304>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d17a      	bne.n	800b292 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b19c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1a0:	2b08      	cmp	r3, #8
 800b1a2:	d824      	bhi.n	800b1ee <UART_SetConfig+0x216>
 800b1a4:	a201      	add	r2, pc, #4	; (adr r2, 800b1ac <UART_SetConfig+0x1d4>)
 800b1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1aa:	bf00      	nop
 800b1ac:	0800b1d1 	.word	0x0800b1d1
 800b1b0:	0800b1ef 	.word	0x0800b1ef
 800b1b4:	0800b1d9 	.word	0x0800b1d9
 800b1b8:	0800b1ef 	.word	0x0800b1ef
 800b1bc:	0800b1df 	.word	0x0800b1df
 800b1c0:	0800b1ef 	.word	0x0800b1ef
 800b1c4:	0800b1ef 	.word	0x0800b1ef
 800b1c8:	0800b1ef 	.word	0x0800b1ef
 800b1cc:	0800b1e7 	.word	0x0800b1e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1d0:	f7fe fac0 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800b1d4:	61f8      	str	r0, [r7, #28]
        break;
 800b1d6:	e010      	b.n	800b1fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b1d8:	4b44      	ldr	r3, [pc, #272]	; (800b2ec <UART_SetConfig+0x314>)
 800b1da:	61fb      	str	r3, [r7, #28]
        break;
 800b1dc:	e00d      	b.n	800b1fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b1de:	f7fe fa21 	bl	8009624 <HAL_RCC_GetSysClockFreq>
 800b1e2:	61f8      	str	r0, [r7, #28]
        break;
 800b1e4:	e009      	b.n	800b1fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1ea:	61fb      	str	r3, [r7, #28]
        break;
 800b1ec:	e005      	b.n	800b1fa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b1f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 8107 	beq.w	800b410 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	685a      	ldr	r2, [r3, #4]
 800b206:	4613      	mov	r3, r2
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	4413      	add	r3, r2
 800b20c:	69fa      	ldr	r2, [r7, #28]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d305      	bcc.n	800b21e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b218:	69fa      	ldr	r2, [r7, #28]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d903      	bls.n	800b226 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b224:	e0f4      	b.n	800b410 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	2200      	movs	r2, #0
 800b22a:	461c      	mov	r4, r3
 800b22c:	4615      	mov	r5, r2
 800b22e:	f04f 0200 	mov.w	r2, #0
 800b232:	f04f 0300 	mov.w	r3, #0
 800b236:	022b      	lsls	r3, r5, #8
 800b238:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b23c:	0222      	lsls	r2, r4, #8
 800b23e:	68f9      	ldr	r1, [r7, #12]
 800b240:	6849      	ldr	r1, [r1, #4]
 800b242:	0849      	lsrs	r1, r1, #1
 800b244:	2000      	movs	r0, #0
 800b246:	4688      	mov	r8, r1
 800b248:	4681      	mov	r9, r0
 800b24a:	eb12 0a08 	adds.w	sl, r2, r8
 800b24e:	eb43 0b09 	adc.w	fp, r3, r9
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	603b      	str	r3, [r7, #0]
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b260:	4650      	mov	r0, sl
 800b262:	4659      	mov	r1, fp
 800b264:	f7f5 fd10 	bl	8000c88 <__aeabi_uldivmod>
 800b268:	4602      	mov	r2, r0
 800b26a:	460b      	mov	r3, r1
 800b26c:	4613      	mov	r3, r2
 800b26e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b276:	d308      	bcc.n	800b28a <UART_SetConfig+0x2b2>
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b27e:	d204      	bcs.n	800b28a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	69ba      	ldr	r2, [r7, #24]
 800b286:	60da      	str	r2, [r3, #12]
 800b288:	e0c2      	b.n	800b410 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800b28a:	2301      	movs	r3, #1
 800b28c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b290:	e0be      	b.n	800b410 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	69db      	ldr	r3, [r3, #28]
 800b296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b29a:	d16a      	bne.n	800b372 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800b29c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2a0:	2b08      	cmp	r3, #8
 800b2a2:	d834      	bhi.n	800b30e <UART_SetConfig+0x336>
 800b2a4:	a201      	add	r2, pc, #4	; (adr r2, 800b2ac <UART_SetConfig+0x2d4>)
 800b2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2aa:	bf00      	nop
 800b2ac:	0800b2d1 	.word	0x0800b2d1
 800b2b0:	0800b2f1 	.word	0x0800b2f1
 800b2b4:	0800b2f9 	.word	0x0800b2f9
 800b2b8:	0800b30f 	.word	0x0800b30f
 800b2bc:	0800b2ff 	.word	0x0800b2ff
 800b2c0:	0800b30f 	.word	0x0800b30f
 800b2c4:	0800b30f 	.word	0x0800b30f
 800b2c8:	0800b30f 	.word	0x0800b30f
 800b2cc:	0800b307 	.word	0x0800b307
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2d0:	f7fe fa40 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800b2d4:	61f8      	str	r0, [r7, #28]
        break;
 800b2d6:	e020      	b.n	800b31a <UART_SetConfig+0x342>
 800b2d8:	efff69f3 	.word	0xefff69f3
 800b2dc:	40008000 	.word	0x40008000
 800b2e0:	40013800 	.word	0x40013800
 800b2e4:	40021000 	.word	0x40021000
 800b2e8:	40004400 	.word	0x40004400
 800b2ec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2f0:	f7fe fa46 	bl	8009780 <HAL_RCC_GetPCLK2Freq>
 800b2f4:	61f8      	str	r0, [r7, #28]
        break;
 800b2f6:	e010      	b.n	800b31a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2f8:	4b4c      	ldr	r3, [pc, #304]	; (800b42c <UART_SetConfig+0x454>)
 800b2fa:	61fb      	str	r3, [r7, #28]
        break;
 800b2fc:	e00d      	b.n	800b31a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2fe:	f7fe f991 	bl	8009624 <HAL_RCC_GetSysClockFreq>
 800b302:	61f8      	str	r0, [r7, #28]
        break;
 800b304:	e009      	b.n	800b31a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b30a:	61fb      	str	r3, [r7, #28]
        break;
 800b30c:	e005      	b.n	800b31a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800b30e:	2300      	movs	r3, #0
 800b310:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b318:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d077      	beq.n	800b410 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	005a      	lsls	r2, r3, #1
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	085b      	lsrs	r3, r3, #1
 800b32a:	441a      	add	r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	fbb2 f3f3 	udiv	r3, r2, r3
 800b334:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	2b0f      	cmp	r3, #15
 800b33a:	d916      	bls.n	800b36a <UART_SetConfig+0x392>
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b342:	d212      	bcs.n	800b36a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	b29b      	uxth	r3, r3
 800b348:	f023 030f 	bic.w	r3, r3, #15
 800b34c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	085b      	lsrs	r3, r3, #1
 800b352:	b29b      	uxth	r3, r3
 800b354:	f003 0307 	and.w	r3, r3, #7
 800b358:	b29a      	uxth	r2, r3
 800b35a:	8afb      	ldrh	r3, [r7, #22]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	8afa      	ldrh	r2, [r7, #22]
 800b366:	60da      	str	r2, [r3, #12]
 800b368:	e052      	b.n	800b410 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b370:	e04e      	b.n	800b410 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b372:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b376:	2b08      	cmp	r3, #8
 800b378:	d827      	bhi.n	800b3ca <UART_SetConfig+0x3f2>
 800b37a:	a201      	add	r2, pc, #4	; (adr r2, 800b380 <UART_SetConfig+0x3a8>)
 800b37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b380:	0800b3a5 	.word	0x0800b3a5
 800b384:	0800b3ad 	.word	0x0800b3ad
 800b388:	0800b3b5 	.word	0x0800b3b5
 800b38c:	0800b3cb 	.word	0x0800b3cb
 800b390:	0800b3bb 	.word	0x0800b3bb
 800b394:	0800b3cb 	.word	0x0800b3cb
 800b398:	0800b3cb 	.word	0x0800b3cb
 800b39c:	0800b3cb 	.word	0x0800b3cb
 800b3a0:	0800b3c3 	.word	0x0800b3c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3a4:	f7fe f9d6 	bl	8009754 <HAL_RCC_GetPCLK1Freq>
 800b3a8:	61f8      	str	r0, [r7, #28]
        break;
 800b3aa:	e014      	b.n	800b3d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3ac:	f7fe f9e8 	bl	8009780 <HAL_RCC_GetPCLK2Freq>
 800b3b0:	61f8      	str	r0, [r7, #28]
        break;
 800b3b2:	e010      	b.n	800b3d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3b4:	4b1d      	ldr	r3, [pc, #116]	; (800b42c <UART_SetConfig+0x454>)
 800b3b6:	61fb      	str	r3, [r7, #28]
        break;
 800b3b8:	e00d      	b.n	800b3d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3ba:	f7fe f933 	bl	8009624 <HAL_RCC_GetSysClockFreq>
 800b3be:	61f8      	str	r0, [r7, #28]
        break;
 800b3c0:	e009      	b.n	800b3d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3c6:	61fb      	str	r3, [r7, #28]
        break;
 800b3c8:	e005      	b.n	800b3d6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b3d4:	bf00      	nop
    }

    if (pclk != 0U)
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d019      	beq.n	800b410 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	085a      	lsrs	r2, r3, #1
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	441a      	add	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	2b0f      	cmp	r3, #15
 800b3f4:	d909      	bls.n	800b40a <UART_SetConfig+0x432>
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3fc:	d205      	bcs.n	800b40a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	b29a      	uxth	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	60da      	str	r2, [r3, #12]
 800b408:	e002      	b.n	800b410 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2200      	movs	r2, #0
 800b41a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b41c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b420:	4618      	mov	r0, r3
 800b422:	3728      	adds	r7, #40	; 0x28
 800b424:	46bd      	mov	sp, r7
 800b426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b42a:	bf00      	nop
 800b42c:	00f42400 	.word	0x00f42400

0800b430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b43c:	f003 0308 	and.w	r3, r3, #8
 800b440:	2b00      	cmp	r3, #0
 800b442:	d00a      	beq.n	800b45a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	430a      	orrs	r2, r1
 800b458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45e:	f003 0301 	and.w	r3, r3, #1
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00a      	beq.n	800b47c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	430a      	orrs	r2, r1
 800b47a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b480:	f003 0302 	and.w	r3, r3, #2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00a      	beq.n	800b49e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	430a      	orrs	r2, r1
 800b49c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a2:	f003 0304 	and.w	r3, r3, #4
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	430a      	orrs	r2, r1
 800b4be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c4:	f003 0310 	and.w	r3, r3, #16
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00a      	beq.n	800b4e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	430a      	orrs	r2, r1
 800b4e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e6:	f003 0320 	and.w	r3, r3, #32
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00a      	beq.n	800b504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	430a      	orrs	r2, r1
 800b502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d01a      	beq.n	800b546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	430a      	orrs	r2, r1
 800b524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b52a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b52e:	d10a      	bne.n	800b546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	430a      	orrs	r2, r1
 800b544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00a      	beq.n	800b568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	430a      	orrs	r2, r1
 800b566:	605a      	str	r2, [r3, #4]
  }
}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b098      	sub	sp, #96	; 0x60
 800b578:	af02      	add	r7, sp, #8
 800b57a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b584:	f7f9 f8b6 	bl	80046f4 <HAL_GetTick>
 800b588:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f003 0308 	and.w	r3, r3, #8
 800b594:	2b08      	cmp	r3, #8
 800b596:	d12e      	bne.n	800b5f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f88c 	bl	800b6c4 <UART_WaitOnFlagUntilTimeout>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d021      	beq.n	800b5f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ba:	e853 3f00 	ldrex	r3, [r3]
 800b5be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b5c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5c6:	653b      	str	r3, [r7, #80]	; 0x50
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5d0:	647b      	str	r3, [r7, #68]	; 0x44
 800b5d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b5d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5d8:	e841 2300 	strex	r3, r2, [r1]
 800b5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1e6      	bne.n	800b5b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2220      	movs	r2, #32
 800b5e8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e062      	b.n	800b6bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f003 0304 	and.w	r3, r3, #4
 800b600:	2b04      	cmp	r3, #4
 800b602:	d149      	bne.n	800b698 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b604:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b608:	9300      	str	r3, [sp, #0]
 800b60a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b60c:	2200      	movs	r2, #0
 800b60e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f856 	bl	800b6c4 <UART_WaitOnFlagUntilTimeout>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d03c      	beq.n	800b698 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b626:	e853 3f00 	ldrex	r3, [r3]
 800b62a:	623b      	str	r3, [r7, #32]
   return(result);
 800b62c:	6a3b      	ldr	r3, [r7, #32]
 800b62e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b632:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	461a      	mov	r2, r3
 800b63a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b63c:	633b      	str	r3, [r7, #48]	; 0x30
 800b63e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b640:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b644:	e841 2300 	strex	r3, r2, [r1]
 800b648:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1e6      	bne.n	800b61e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	3308      	adds	r3, #8
 800b656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	e853 3f00 	ldrex	r3, [r3]
 800b65e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f023 0301 	bic.w	r3, r3, #1
 800b666:	64bb      	str	r3, [r7, #72]	; 0x48
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	3308      	adds	r3, #8
 800b66e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b670:	61fa      	str	r2, [r7, #28]
 800b672:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b674:	69b9      	ldr	r1, [r7, #24]
 800b676:	69fa      	ldr	r2, [r7, #28]
 800b678:	e841 2300 	strex	r3, r2, [r1]
 800b67c:	617b      	str	r3, [r7, #20]
   return(result);
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1e5      	bne.n	800b650 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2220      	movs	r2, #32
 800b688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b694:	2303      	movs	r3, #3
 800b696:	e011      	b.n	800b6bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2220      	movs	r2, #32
 800b69c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2220      	movs	r2, #32
 800b6a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3758      	adds	r7, #88	; 0x58
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	603b      	str	r3, [r7, #0]
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6d4:	e049      	b.n	800b76a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6dc:	d045      	beq.n	800b76a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6de:	f7f9 f809 	bl	80046f4 <HAL_GetTick>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	1ad3      	subs	r3, r2, r3
 800b6e8:	69ba      	ldr	r2, [r7, #24]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d302      	bcc.n	800b6f4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d101      	bne.n	800b6f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b6f4:	2303      	movs	r3, #3
 800b6f6:	e048      	b.n	800b78a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f003 0304 	and.w	r3, r3, #4
 800b702:	2b00      	cmp	r3, #0
 800b704:	d031      	beq.n	800b76a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	69db      	ldr	r3, [r3, #28]
 800b70c:	f003 0308 	and.w	r3, r3, #8
 800b710:	2b08      	cmp	r3, #8
 800b712:	d110      	bne.n	800b736 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2208      	movs	r2, #8
 800b71a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f000 f8ff 	bl	800b920 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2208      	movs	r2, #8
 800b726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e029      	b.n	800b78a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	69db      	ldr	r3, [r3, #28]
 800b73c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b744:	d111      	bne.n	800b76a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b74e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f000 f8e5 	bl	800b920 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2220      	movs	r2, #32
 800b75a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b766:	2303      	movs	r3, #3
 800b768:	e00f      	b.n	800b78a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	69da      	ldr	r2, [r3, #28]
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	4013      	ands	r3, r2
 800b774:	68ba      	ldr	r2, [r7, #8]
 800b776:	429a      	cmp	r2, r3
 800b778:	bf0c      	ite	eq
 800b77a:	2301      	moveq	r3, #1
 800b77c:	2300      	movne	r3, #0
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	461a      	mov	r2, r3
 800b782:	79fb      	ldrb	r3, [r7, #7]
 800b784:	429a      	cmp	r2, r3
 800b786:	d0a6      	beq.n	800b6d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
	...

0800b794 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b096      	sub	sp, #88	; 0x58
 800b798:	af00      	add	r7, sp, #0
 800b79a:	60f8      	str	r0, [r7, #12]
 800b79c:	60b9      	str	r1, [r7, #8]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	88fa      	ldrh	r2, [r7, #6]
 800b7ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2222      	movs	r2, #34	; 0x22
 800b7bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d028      	beq.n	800b81a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7cc:	4a3e      	ldr	r2, [pc, #248]	; (800b8c8 <UART_Start_Receive_DMA+0x134>)
 800b7ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7d4:	4a3d      	ldr	r2, [pc, #244]	; (800b8cc <UART_Start_Receive_DMA+0x138>)
 800b7d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7dc:	4a3c      	ldr	r2, [pc, #240]	; (800b8d0 <UART_Start_Receive_DMA+0x13c>)
 800b7de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	3324      	adds	r3, #36	; 0x24
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	88fb      	ldrh	r3, [r7, #6]
 800b7fc:	f7fa fc14 	bl	8006028 <HAL_DMA_Start_IT>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d009      	beq.n	800b81a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2210      	movs	r2, #16
 800b80a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2220      	movs	r2, #32
 800b812:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800b816:	2301      	movs	r3, #1
 800b818:	e051      	b.n	800b8be <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d018      	beq.n	800b854 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b82a:	e853 3f00 	ldrex	r3, [r3]
 800b82e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b836:	657b      	str	r3, [r7, #84]	; 0x54
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	461a      	mov	r2, r3
 800b83e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b840:	64bb      	str	r3, [r7, #72]	; 0x48
 800b842:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b844:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b848:	e841 2300 	strex	r3, r2, [r1]
 800b84c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b84e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b850:	2b00      	cmp	r3, #0
 800b852:	d1e6      	bne.n	800b822 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3308      	adds	r3, #8
 800b85a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85e:	e853 3f00 	ldrex	r3, [r3]
 800b862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b866:	f043 0301 	orr.w	r3, r3, #1
 800b86a:	653b      	str	r3, [r7, #80]	; 0x50
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3308      	adds	r3, #8
 800b872:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b874:	637a      	str	r2, [r7, #52]	; 0x34
 800b876:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b878:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b87a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b87c:	e841 2300 	strex	r3, r2, [r1]
 800b880:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1e5      	bne.n	800b854 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3308      	adds	r3, #8
 800b88e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	e853 3f00 	ldrex	r3, [r3]
 800b896:	613b      	str	r3, [r7, #16]
   return(result);
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b89e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	3308      	adds	r3, #8
 800b8a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8a8:	623a      	str	r2, [r7, #32]
 800b8aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ac:	69f9      	ldr	r1, [r7, #28]
 800b8ae:	6a3a      	ldr	r2, [r7, #32]
 800b8b0:	e841 2300 	strex	r3, r2, [r1]
 800b8b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1e5      	bne.n	800b888 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3758      	adds	r7, #88	; 0x58
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	0800b9e9 	.word	0x0800b9e9
 800b8cc:	0800bb15 	.word	0x0800bb15
 800b8d0:	0800bb53 	.word	0x0800bb53

0800b8d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b089      	sub	sp, #36	; 0x24
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	e853 3f00 	ldrex	r3, [r3]
 800b8e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b8f0:	61fb      	str	r3, [r7, #28]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	61bb      	str	r3, [r7, #24]
 800b8fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fe:	6979      	ldr	r1, [r7, #20]
 800b900:	69ba      	ldr	r2, [r7, #24]
 800b902:	e841 2300 	strex	r3, r2, [r1]
 800b906:	613b      	str	r3, [r7, #16]
   return(result);
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1e6      	bne.n	800b8dc <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2220      	movs	r2, #32
 800b912:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800b914:	bf00      	nop
 800b916:	3724      	adds	r7, #36	; 0x24
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b920:	b480      	push	{r7}
 800b922:	b095      	sub	sp, #84	; 0x54
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b930:	e853 3f00 	ldrex	r3, [r3]
 800b934:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b938:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b93c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b946:	643b      	str	r3, [r7, #64]	; 0x40
 800b948:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b94a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b94c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b94e:	e841 2300 	strex	r3, r2, [r1]
 800b952:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1e6      	bne.n	800b928 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	3308      	adds	r3, #8
 800b960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b962:	6a3b      	ldr	r3, [r7, #32]
 800b964:	e853 3f00 	ldrex	r3, [r3]
 800b968:	61fb      	str	r3, [r7, #28]
   return(result);
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	f023 0301 	bic.w	r3, r3, #1
 800b970:	64bb      	str	r3, [r7, #72]	; 0x48
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	3308      	adds	r3, #8
 800b978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b97a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b97c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b982:	e841 2300 	strex	r3, r2, [r1]
 800b986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1e5      	bne.n	800b95a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b992:	2b01      	cmp	r3, #1
 800b994:	d118      	bne.n	800b9c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	e853 3f00 	ldrex	r3, [r3]
 800b9a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	f023 0310 	bic.w	r3, r3, #16
 800b9aa:	647b      	str	r3, [r7, #68]	; 0x44
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9b4:	61bb      	str	r3, [r7, #24]
 800b9b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b8:	6979      	ldr	r1, [r7, #20]
 800b9ba:	69ba      	ldr	r2, [r7, #24]
 800b9bc:	e841 2300 	strex	r3, r2, [r1]
 800b9c0:	613b      	str	r3, [r7, #16]
   return(result);
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1e6      	bne.n	800b996 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2220      	movs	r2, #32
 800b9cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b9dc:	bf00      	nop
 800b9de:	3754      	adds	r7, #84	; 0x54
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b09c      	sub	sp, #112	; 0x70
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f003 0320 	and.w	r3, r3, #32
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d171      	bne.n	800bae8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ba04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba06:	2200      	movs	r2, #0
 800ba08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba14:	e853 3f00 	ldrex	r3, [r3]
 800ba18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba20:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	461a      	mov	r2, r3
 800ba28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba2a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba32:	e841 2300 	strex	r3, r2, [r1]
 800ba36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d1e6      	bne.n	800ba0c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	3308      	adds	r3, #8
 800ba44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba48:	e853 3f00 	ldrex	r3, [r3]
 800ba4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba50:	f023 0301 	bic.w	r3, r3, #1
 800ba54:	667b      	str	r3, [r7, #100]	; 0x64
 800ba56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3308      	adds	r3, #8
 800ba5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ba5e:	647a      	str	r2, [r7, #68]	; 0x44
 800ba60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba66:	e841 2300 	strex	r3, r2, [r1]
 800ba6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1e5      	bne.n	800ba3e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	3308      	adds	r3, #8
 800ba78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7c:	e853 3f00 	ldrex	r3, [r3]
 800ba80:	623b      	str	r3, [r7, #32]
   return(result);
 800ba82:	6a3b      	ldr	r3, [r7, #32]
 800ba84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba88:	663b      	str	r3, [r7, #96]	; 0x60
 800ba8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	3308      	adds	r3, #8
 800ba90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba92:	633a      	str	r2, [r7, #48]	; 0x30
 800ba94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba9a:	e841 2300 	strex	r3, r2, [r1]
 800ba9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800baa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d1e5      	bne.n	800ba72 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800baa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baa8:	2220      	movs	r2, #32
 800baaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d118      	bne.n	800bae8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	e853 3f00 	ldrex	r3, [r3]
 800bac2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f023 0310 	bic.w	r3, r3, #16
 800baca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bacc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	461a      	mov	r2, r3
 800bad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bad4:	61fb      	str	r3, [r7, #28]
 800bad6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad8:	69b9      	ldr	r1, [r7, #24]
 800bada:	69fa      	ldr	r2, [r7, #28]
 800badc:	e841 2300 	strex	r3, r2, [r1]
 800bae0:	617b      	str	r3, [r7, #20]
   return(result);
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d1e6      	bne.n	800bab6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baea:	2200      	movs	r2, #0
 800baec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d107      	bne.n	800bb06 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800baf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baf8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bafc:	4619      	mov	r1, r3
 800bafe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bb00:	f7ff fa5e 	bl	800afc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb04:	e002      	b.n	800bb0c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800bb06:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bb08:	f7f5 fb02 	bl	8001110 <HAL_UART_RxCpltCallback>
}
 800bb0c:	bf00      	nop
 800bb0e:	3770      	adds	r7, #112	; 0x70
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb20:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2201      	movs	r2, #1
 800bb26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d109      	bne.n	800bb44 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bb36:	085b      	lsrs	r3, r3, #1
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7ff fa3f 	bl	800afc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb42:	e002      	b.n	800bb4a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f7ff fa27 	bl	800af98 <HAL_UART_RxHalfCpltCallback>
}
 800bb4a:	bf00      	nop
 800bb4c:	3710      	adds	r7, #16
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b086      	sub	sp, #24
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb5e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb64:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb6c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb78:	2b80      	cmp	r3, #128	; 0x80
 800bb7a:	d109      	bne.n	800bb90 <UART_DMAError+0x3e>
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	2b21      	cmp	r3, #33	; 0x21
 800bb80:	d106      	bne.n	800bb90 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800bb8a:	6978      	ldr	r0, [r7, #20]
 800bb8c:	f7ff fea2 	bl	800b8d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9a:	2b40      	cmp	r3, #64	; 0x40
 800bb9c:	d109      	bne.n	800bbb2 <UART_DMAError+0x60>
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2b22      	cmp	r3, #34	; 0x22
 800bba2:	d106      	bne.n	800bbb2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800bbac:	6978      	ldr	r0, [r7, #20]
 800bbae:	f7ff feb7 	bl	800b920 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbb8:	f043 0210 	orr.w	r2, r3, #16
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbc2:	6978      	ldr	r0, [r7, #20]
 800bbc4:	f7ff f9f2 	bl	800afac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbc8:	bf00      	nop
 800bbca:	3718      	adds	r7, #24
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f7ff f9dc 	bl	800afac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbf4:	bf00      	nop
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b088      	sub	sp, #32
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	e853 3f00 	ldrex	r3, [r3]
 800bc10:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc18:	61fb      	str	r3, [r7, #28]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	61bb      	str	r3, [r7, #24]
 800bc24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc26:	6979      	ldr	r1, [r7, #20]
 800bc28:	69ba      	ldr	r2, [r7, #24]
 800bc2a:	e841 2300 	strex	r3, r2, [r1]
 800bc2e:	613b      	str	r3, [r7, #16]
   return(result);
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1e6      	bne.n	800bc04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2220      	movs	r2, #32
 800bc3a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7ff f99e 	bl	800af84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc48:	bf00      	nop
 800bc4a:	3720      	adds	r7, #32
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bc58:	bf00      	nop
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bc64:	b084      	sub	sp, #16
 800bc66:	b480      	push	{r7}
 800bc68:	b083      	sub	sp, #12
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
 800bc6e:	f107 0014 	add.w	r0, r7, #20
 800bc72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	b004      	add	sp, #16
 800bc84:	4770      	bx	lr

0800bc86 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bc86:	b480      	push	{r7}
 800bc88:	b085      	sub	sp, #20
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bc96:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800bc9a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3714      	adds	r7, #20
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bcbc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800bcc0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800bcc8:	b29a      	uxth	r2, r3
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	43db      	mvns	r3, r3
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	4013      	ands	r3, r2
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr

0800bcea <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800bcea:	b480      	push	{r7}
 800bcec:	b083      	sub	sp, #12
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bd04:	b084      	sub	sp, #16
 800bd06:	b480      	push	{r7}
 800bd08:	b083      	sub	sp, #12
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
 800bd0e:	f107 0014 	add.w	r0, r7, #20
 800bd12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	370c      	adds	r7, #12
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	b004      	add	sp, #16
 800bd44:	4770      	bx	lr
	...

0800bd48 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b09d      	sub	sp, #116	; 0x74
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bd52:	2300      	movs	r3, #0
 800bd54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	4413      	add	r3, r2
 800bd62:	881b      	ldrh	r3, [r3, #0]
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800bd6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd6e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	78db      	ldrb	r3, [r3, #3]
 800bd76:	2b03      	cmp	r3, #3
 800bd78:	d81f      	bhi.n	800bdba <USB_ActivateEndpoint+0x72>
 800bd7a:	a201      	add	r2, pc, #4	; (adr r2, 800bd80 <USB_ActivateEndpoint+0x38>)
 800bd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd80:	0800bd91 	.word	0x0800bd91
 800bd84:	0800bdad 	.word	0x0800bdad
 800bd88:	0800bdc3 	.word	0x0800bdc3
 800bd8c:	0800bd9f 	.word	0x0800bd9f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bd90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bd94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd98:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800bd9c:	e012      	b.n	800bdc4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bd9e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bda2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800bda6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800bdaa:	e00b      	b.n	800bdc4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bdac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bdb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bdb4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800bdb8:	e004      	b.n	800bdc4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800bdc0:	e000      	b.n	800bdc4 <USB_ActivateEndpoint+0x7c>
      break;
 800bdc2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	441a      	add	r2, r3
 800bdce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bdd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	4413      	add	r3, r2
 800bdf0:	881b      	ldrh	r3, [r3, #0]
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	b21b      	sxth	r3, r3
 800bdf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdfe:	b21a      	sxth	r2, r3
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	b21b      	sxth	r3, r3
 800be06:	4313      	orrs	r3, r2
 800be08:	b21b      	sxth	r3, r3
 800be0a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	781b      	ldrb	r3, [r3, #0]
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	441a      	add	r2, r3
 800be18:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800be1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	7b1b      	ldrb	r3, [r3, #12]
 800be34:	2b00      	cmp	r3, #0
 800be36:	f040 8178 	bne.w	800c12a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	785b      	ldrb	r3, [r3, #1]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f000 8084 	beq.w	800bf4c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	61bb      	str	r3, [r7, #24]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be4e:	b29b      	uxth	r3, r3
 800be50:	461a      	mov	r2, r3
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	4413      	add	r3, r2
 800be56:	61bb      	str	r3, [r7, #24]
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	00da      	lsls	r2, r3, #3
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	4413      	add	r3, r2
 800be62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be66:	617b      	str	r3, [r7, #20]
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	88db      	ldrh	r3, [r3, #6]
 800be6c:	085b      	lsrs	r3, r3, #1
 800be6e:	b29b      	uxth	r3, r3
 800be70:	005b      	lsls	r3, r3, #1
 800be72:	b29a      	uxth	r2, r3
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	4413      	add	r3, r2
 800be82:	881b      	ldrh	r3, [r3, #0]
 800be84:	827b      	strh	r3, [r7, #18]
 800be86:	8a7b      	ldrh	r3, [r7, #18]
 800be88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d01b      	beq.n	800bec8 <USB_ActivateEndpoint+0x180>
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4413      	add	r3, r2
 800be9a:	881b      	ldrh	r3, [r3, #0]
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bea6:	823b      	strh	r3, [r7, #16]
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	441a      	add	r2, r3
 800beb2:	8a3b      	ldrh	r3, [r7, #16]
 800beb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800beb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bec0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	78db      	ldrb	r3, [r3, #3]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d020      	beq.n	800bf12 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	881b      	ldrh	r3, [r3, #0]
 800bedc:	b29b      	uxth	r3, r3
 800bede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bee6:	81bb      	strh	r3, [r7, #12]
 800bee8:	89bb      	ldrh	r3, [r7, #12]
 800beea:	f083 0320 	eor.w	r3, r3, #32
 800beee:	81bb      	strh	r3, [r7, #12]
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	441a      	add	r2, r3
 800befa:	89bb      	ldrh	r3, [r7, #12]
 800befc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	8013      	strh	r3, [r2, #0]
 800bf10:	e2d5      	b.n	800c4be <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	4413      	add	r3, r2
 800bf1c:	881b      	ldrh	r3, [r3, #0]
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf28:	81fb      	strh	r3, [r7, #14]
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	441a      	add	r2, r3
 800bf34:	89fb      	ldrh	r3, [r7, #14]
 800bf36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	8013      	strh	r3, [r2, #0]
 800bf4a:	e2b8      	b.n	800c4be <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	633b      	str	r3, [r7, #48]	; 0x30
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	461a      	mov	r2, r3
 800bf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5c:	4413      	add	r3, r2
 800bf5e:	633b      	str	r3, [r7, #48]	; 0x30
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	00da      	lsls	r2, r3, #3
 800bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf68:	4413      	add	r3, r2
 800bf6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bf6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	88db      	ldrh	r3, [r3, #6]
 800bf74:	085b      	lsrs	r3, r3, #1
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	005b      	lsls	r3, r3, #1
 800bf7a:	b29a      	uxth	r2, r3
 800bf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf90:	4413      	add	r3, r2
 800bf92:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	00da      	lsls	r2, r3, #3
 800bf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9c:	4413      	add	r3, r2
 800bf9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bfa2:	627b      	str	r3, [r7, #36]	; 0x24
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	881b      	ldrh	r3, [r3, #0]
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	801a      	strh	r2, [r3, #0]
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	2b3e      	cmp	r3, #62	; 0x3e
 800bfba:	d91d      	bls.n	800bff8 <USB_ActivateEndpoint+0x2b0>
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	691b      	ldr	r3, [r3, #16]
 800bfc0:	095b      	lsrs	r3, r3, #5
 800bfc2:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	691b      	ldr	r3, [r3, #16]
 800bfc8:	f003 031f 	and.w	r3, r3, #31
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d102      	bne.n	800bfd6 <USB_ActivateEndpoint+0x28e>
 800bfd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	66bb      	str	r3, [r7, #104]	; 0x68
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd8:	881b      	ldrh	r3, [r3, #0]
 800bfda:	b29a      	uxth	r2, r3
 800bfdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	029b      	lsls	r3, r3, #10
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff4:	801a      	strh	r2, [r3, #0]
 800bff6:	e026      	b.n	800c046 <USB_ActivateEndpoint+0x2fe>
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10a      	bne.n	800c016 <USB_ActivateEndpoint+0x2ce>
 800c000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c002:	881b      	ldrh	r3, [r3, #0]
 800c004:	b29b      	uxth	r3, r3
 800c006:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c00a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c00e:	b29a      	uxth	r2, r3
 800c010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c012:	801a      	strh	r2, [r3, #0]
 800c014:	e017      	b.n	800c046 <USB_ActivateEndpoint+0x2fe>
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	085b      	lsrs	r3, r3, #1
 800c01c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	f003 0301 	and.w	r3, r3, #1
 800c026:	2b00      	cmp	r3, #0
 800c028:	d002      	beq.n	800c030 <USB_ActivateEndpoint+0x2e8>
 800c02a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c02c:	3301      	adds	r3, #1
 800c02e:	66bb      	str	r3, [r7, #104]	; 0x68
 800c030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c032:	881b      	ldrh	r3, [r3, #0]
 800c034:	b29a      	uxth	r2, r3
 800c036:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c038:	b29b      	uxth	r3, r3
 800c03a:	029b      	lsls	r3, r3, #10
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	4313      	orrs	r3, r2
 800c040:	b29a      	uxth	r2, r3
 800c042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c044:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4413      	add	r3, r2
 800c050:	881b      	ldrh	r3, [r3, #0]
 800c052:	847b      	strh	r3, [r7, #34]	; 0x22
 800c054:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d01b      	beq.n	800c096 <USB_ActivateEndpoint+0x34e>
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	881b      	ldrh	r3, [r3, #0]
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c074:	843b      	strh	r3, [r7, #32]
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	441a      	add	r2, r3
 800c080:	8c3b      	ldrh	r3, [r7, #32]
 800c082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c08a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c08e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c092:	b29b      	uxth	r3, r3
 800c094:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d124      	bne.n	800c0e8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	4413      	add	r3, r2
 800c0a8:	881b      	ldrh	r3, [r3, #0]
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0b4:	83bb      	strh	r3, [r7, #28]
 800c0b6:	8bbb      	ldrh	r3, [r7, #28]
 800c0b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c0bc:	83bb      	strh	r3, [r7, #28]
 800c0be:	8bbb      	ldrh	r3, [r7, #28]
 800c0c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c0c4:	83bb      	strh	r3, [r7, #28]
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	441a      	add	r2, r3
 800c0d0:	8bbb      	ldrh	r3, [r7, #28]
 800c0d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	8013      	strh	r3, [r2, #0]
 800c0e6:	e1ea      	b.n	800c4be <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	881b      	ldrh	r3, [r3, #0]
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0fe:	83fb      	strh	r3, [r7, #30]
 800c100:	8bfb      	ldrh	r3, [r7, #30]
 800c102:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c106:	83fb      	strh	r3, [r7, #30]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	441a      	add	r2, r3
 800c112:	8bfb      	ldrh	r3, [r7, #30]
 800c114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c11c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c124:	b29b      	uxth	r3, r3
 800c126:	8013      	strh	r3, [r2, #0]
 800c128:	e1c9      	b.n	800c4be <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	78db      	ldrb	r3, [r3, #3]
 800c12e:	2b02      	cmp	r3, #2
 800c130:	d11e      	bne.n	800c170 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	4413      	add	r3, r2
 800c13c:	881b      	ldrh	r3, [r3, #0]
 800c13e:	b29b      	uxth	r3, r3
 800c140:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c148:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	441a      	add	r2, r3
 800c156:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c15a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c15e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c162:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	8013      	strh	r3, [r2, #0]
 800c16e:	e01d      	b.n	800c1ac <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	4413      	add	r3, r2
 800c17a:	881b      	ldrh	r3, [r3, #0]
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c186:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	441a      	add	r2, r3
 800c194:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800c198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c19c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	461a      	mov	r2, r3
 800c1ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1bc:	4413      	add	r3, r2
 800c1be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	00da      	lsls	r2, r3, #3
 800c1c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c1c8:	4413      	add	r3, r2
 800c1ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1ce:	65bb      	str	r3, [r7, #88]	; 0x58
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	891b      	ldrh	r3, [r3, #8]
 800c1d4:	085b      	lsrs	r3, r3, #1
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	005b      	lsls	r3, r3, #1
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1de:	801a      	strh	r2, [r3, #0]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	657b      	str	r3, [r7, #84]	; 0x54
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1f0:	4413      	add	r3, r2
 800c1f2:	657b      	str	r3, [r7, #84]	; 0x54
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	00da      	lsls	r2, r3, #3
 800c1fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1fc:	4413      	add	r3, r2
 800c1fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800c202:	653b      	str	r3, [r7, #80]	; 0x50
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	895b      	ldrh	r3, [r3, #10]
 800c208:	085b      	lsrs	r3, r3, #1
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	005b      	lsls	r3, r3, #1
 800c20e:	b29a      	uxth	r2, r3
 800c210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c212:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	785b      	ldrb	r3, [r3, #1]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f040 8093 	bne.w	800c344 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	4413      	add	r3, r2
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800c22e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c236:	2b00      	cmp	r3, #0
 800c238:	d01b      	beq.n	800c272 <USB_ActivateEndpoint+0x52a>
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	4413      	add	r3, r2
 800c244:	881b      	ldrh	r3, [r3, #0]
 800c246:	b29b      	uxth	r3, r3
 800c248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c24c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c250:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	441a      	add	r2, r3
 800c25c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c25e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c26a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c26e:	b29b      	uxth	r3, r3
 800c270:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	4413      	add	r3, r2
 800c27c:	881b      	ldrh	r3, [r3, #0]
 800c27e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800c280:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c286:	2b00      	cmp	r3, #0
 800c288:	d01b      	beq.n	800c2c2 <USB_ActivateEndpoint+0x57a>
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	4413      	add	r3, r2
 800c294:	881b      	ldrh	r3, [r3, #0]
 800c296:	b29b      	uxth	r3, r3
 800c298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c29c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2a0:	877b      	strh	r3, [r7, #58]	; 0x3a
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	441a      	add	r2, r3
 800c2ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c2ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	4413      	add	r3, r2
 800c2cc:	881b      	ldrh	r3, [r3, #0]
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c2d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2d8:	873b      	strh	r3, [r7, #56]	; 0x38
 800c2da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c2dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c2e0:	873b      	strh	r3, [r7, #56]	; 0x38
 800c2e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c2e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c2e8:	873b      	strh	r3, [r7, #56]	; 0x38
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	441a      	add	r2, r3
 800c2f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c2f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c306:	b29b      	uxth	r3, r3
 800c308:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4413      	add	r3, r2
 800c314:	881b      	ldrh	r3, [r3, #0]
 800c316:	b29b      	uxth	r3, r3
 800c318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c31c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c320:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	441a      	add	r2, r3
 800c32c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c32e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c33a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c33e:	b29b      	uxth	r3, r3
 800c340:	8013      	strh	r3, [r2, #0]
 800c342:	e0bc      	b.n	800c4be <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	4413      	add	r3, r2
 800c34e:	881b      	ldrh	r3, [r3, #0]
 800c350:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800c354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d01d      	beq.n	800c39c <USB_ActivateEndpoint+0x654>
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	4413      	add	r3, r2
 800c36a:	881b      	ldrh	r3, [r3, #0]
 800c36c:	b29b      	uxth	r3, r3
 800c36e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c376:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	441a      	add	r2, r3
 800c384:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c38c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c398:	b29b      	uxth	r3, r3
 800c39a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	881b      	ldrh	r3, [r3, #0]
 800c3a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c3ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d01d      	beq.n	800c3f4 <USB_ActivateEndpoint+0x6ac>
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	4413      	add	r3, r2
 800c3c2:	881b      	ldrh	r3, [r3, #0]
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	441a      	add	r2, r3
 800c3dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800c3e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	78db      	ldrb	r3, [r3, #3]
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d024      	beq.n	800c446 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	4413      	add	r3, r2
 800c406:	881b      	ldrh	r3, [r3, #0]
 800c408:	b29b      	uxth	r3, r3
 800c40a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c40e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c412:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c416:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c41a:	f083 0320 	eor.w	r3, r3, #32
 800c41e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	441a      	add	r2, r3
 800c42c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c440:	b29b      	uxth	r3, r3
 800c442:	8013      	strh	r3, [r2, #0]
 800c444:	e01d      	b.n	800c482 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	4413      	add	r3, r2
 800c450:	881b      	ldrh	r3, [r3, #0]
 800c452:	b29b      	uxth	r3, r3
 800c454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c45c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	441a      	add	r2, r3
 800c46a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c46e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c47a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c47e:	b29b      	uxth	r3, r3
 800c480:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	4413      	add	r3, r2
 800c48c:	881b      	ldrh	r3, [r3, #0]
 800c48e:	b29b      	uxth	r3, r3
 800c490:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c498:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	441a      	add	r2, r3
 800c4a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c4aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c4be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3774      	adds	r7, #116	; 0x74
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop

0800c4d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b08d      	sub	sp, #52	; 0x34
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	7b1b      	ldrb	r3, [r3, #12]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f040 808e 	bne.w	800c600 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	785b      	ldrb	r3, [r3, #1]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d044      	beq.n	800c576 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	4413      	add	r3, r2
 800c4f6:	881b      	ldrh	r3, [r3, #0]
 800c4f8:	81bb      	strh	r3, [r7, #12]
 800c4fa:	89bb      	ldrh	r3, [r7, #12]
 800c4fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c500:	2b00      	cmp	r3, #0
 800c502:	d01b      	beq.n	800c53c <USB_DeactivateEndpoint+0x6c>
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4413      	add	r3, r2
 800c50e:	881b      	ldrh	r3, [r3, #0]
 800c510:	b29b      	uxth	r3, r3
 800c512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c51a:	817b      	strh	r3, [r7, #10]
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	441a      	add	r2, r3
 800c526:	897b      	ldrh	r3, [r7, #10]
 800c528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c52c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c534:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c538:	b29b      	uxth	r3, r3
 800c53a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	4413      	add	r3, r2
 800c546:	881b      	ldrh	r3, [r3, #0]
 800c548:	b29b      	uxth	r3, r3
 800c54a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c54e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c552:	813b      	strh	r3, [r7, #8]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	441a      	add	r2, r3
 800c55e:	893b      	ldrh	r3, [r7, #8]
 800c560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c570:	b29b      	uxth	r3, r3
 800c572:	8013      	strh	r3, [r2, #0]
 800c574:	e192      	b.n	800c89c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	4413      	add	r3, r2
 800c580:	881b      	ldrh	r3, [r3, #0]
 800c582:	827b      	strh	r3, [r7, #18]
 800c584:	8a7b      	ldrh	r3, [r7, #18]
 800c586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d01b      	beq.n	800c5c6 <USB_DeactivateEndpoint+0xf6>
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	4413      	add	r3, r2
 800c598:	881b      	ldrh	r3, [r3, #0]
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5a4:	823b      	strh	r3, [r7, #16]
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	441a      	add	r2, r3
 800c5b0:	8a3b      	ldrh	r3, [r7, #16]
 800c5b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c5be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4413      	add	r3, r2
 800c5d0:	881b      	ldrh	r3, [r3, #0]
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c5d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5dc:	81fb      	strh	r3, [r7, #14]
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	441a      	add	r2, r3
 800c5e8:	89fb      	ldrh	r3, [r7, #14]
 800c5ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c5ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c5f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	8013      	strh	r3, [r2, #0]
 800c5fe:	e14d      	b.n	800c89c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	785b      	ldrb	r3, [r3, #1]
 800c604:	2b00      	cmp	r3, #0
 800c606:	f040 80a5 	bne.w	800c754 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	4413      	add	r3, r2
 800c614:	881b      	ldrh	r3, [r3, #0]
 800c616:	843b      	strh	r3, [r7, #32]
 800c618:	8c3b      	ldrh	r3, [r7, #32]
 800c61a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d01b      	beq.n	800c65a <USB_DeactivateEndpoint+0x18a>
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	4413      	add	r3, r2
 800c62c:	881b      	ldrh	r3, [r3, #0]
 800c62e:	b29b      	uxth	r3, r3
 800c630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c638:	83fb      	strh	r3, [r7, #30]
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	441a      	add	r2, r3
 800c644:	8bfb      	ldrh	r3, [r7, #30]
 800c646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c64a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c64e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c656:	b29b      	uxth	r3, r3
 800c658:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	4413      	add	r3, r2
 800c664:	881b      	ldrh	r3, [r3, #0]
 800c666:	83bb      	strh	r3, [r7, #28]
 800c668:	8bbb      	ldrh	r3, [r7, #28]
 800c66a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d01b      	beq.n	800c6aa <USB_DeactivateEndpoint+0x1da>
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	4413      	add	r3, r2
 800c67c:	881b      	ldrh	r3, [r3, #0]
 800c67e:	b29b      	uxth	r3, r3
 800c680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c688:	837b      	strh	r3, [r7, #26]
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	441a      	add	r2, r3
 800c694:	8b7b      	ldrh	r3, [r7, #26]
 800c696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c69a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c69e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c6a6:	b29b      	uxth	r3, r3
 800c6a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	4413      	add	r3, r2
 800c6b4:	881b      	ldrh	r3, [r3, #0]
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6c0:	833b      	strh	r3, [r7, #24]
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	441a      	add	r2, r3
 800c6cc:	8b3b      	ldrh	r3, [r7, #24]
 800c6ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c6de:	b29b      	uxth	r3, r3
 800c6e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	4413      	add	r3, r2
 800c6ec:	881b      	ldrh	r3, [r3, #0]
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c6f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6f8:	82fb      	strh	r3, [r7, #22]
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	441a      	add	r2, r3
 800c704:	8afb      	ldrh	r3, [r7, #22]
 800c706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c70a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c70e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c716:	b29b      	uxth	r3, r3
 800c718:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	4413      	add	r3, r2
 800c724:	881b      	ldrh	r3, [r3, #0]
 800c726:	b29b      	uxth	r3, r3
 800c728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c72c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c730:	82bb      	strh	r3, [r7, #20]
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	441a      	add	r2, r3
 800c73c:	8abb      	ldrh	r3, [r7, #20]
 800c73e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c74a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c74e:	b29b      	uxth	r3, r3
 800c750:	8013      	strh	r3, [r2, #0]
 800c752:	e0a3      	b.n	800c89c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	009b      	lsls	r3, r3, #2
 800c75c:	4413      	add	r3, r2
 800c75e:	881b      	ldrh	r3, [r3, #0]
 800c760:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c762:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d01b      	beq.n	800c7a4 <USB_DeactivateEndpoint+0x2d4>
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	4413      	add	r3, r2
 800c776:	881b      	ldrh	r3, [r3, #0]
 800c778:	b29b      	uxth	r3, r3
 800c77a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c77e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c782:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	441a      	add	r2, r3
 800c78e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	009b      	lsls	r3, r3, #2
 800c7ac:	4413      	add	r3, r2
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c7b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d01b      	beq.n	800c7f4 <USB_DeactivateEndpoint+0x324>
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	4413      	add	r3, r2
 800c7c6:	881b      	ldrh	r3, [r3, #0]
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7d2:	853b      	strh	r3, [r7, #40]	; 0x28
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	441a      	add	r2, r3
 800c7de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c7e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	4413      	add	r3, r2
 800c7fe:	881b      	ldrh	r3, [r3, #0]
 800c800:	b29b      	uxth	r3, r3
 800c802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c80a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	441a      	add	r2, r3
 800c816:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c81c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c820:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c828:	b29b      	uxth	r3, r3
 800c82a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4413      	add	r3, r2
 800c836:	881b      	ldrh	r3, [r3, #0]
 800c838:	b29b      	uxth	r3, r3
 800c83a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c83e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c842:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	441a      	add	r2, r3
 800c84e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c85c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c860:	b29b      	uxth	r3, r3
 800c862:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	4413      	add	r3, r2
 800c86e:	881b      	ldrh	r3, [r3, #0]
 800c870:	b29b      	uxth	r3, r3
 800c872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c87a:	847b      	strh	r3, [r7, #34]	; 0x22
 800c87c:	687a      	ldr	r2, [r7, #4]
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	441a      	add	r2, r3
 800c886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c88c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c898:	b29b      	uxth	r3, r3
 800c89a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3734      	adds	r7, #52	; 0x34
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b0c2      	sub	sp, #264	; 0x108
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8b8:	6018      	str	r0, [r3, #0]
 800c8ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8c2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c8c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	785b      	ldrb	r3, [r3, #1]
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	f040 86b7 	bne.w	800d644 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c8d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	699a      	ldr	r2, [r3, #24]
 800c8e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	691b      	ldr	r3, [r3, #16]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d908      	bls.n	800c904 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800c8f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c902:	e007      	b.n	800c914 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	699b      	ldr	r3, [r3, #24]
 800c910:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	7b1b      	ldrb	r3, [r3, #12]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d13a      	bne.n	800c99a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	6959      	ldr	r1, [r3, #20]
 800c930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	88da      	ldrh	r2, [r3, #6]
 800c93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c940:	b29b      	uxth	r3, r3
 800c942:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c946:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c94a:	6800      	ldr	r0, [r0, #0]
 800c94c:	f001 fcb9 	bl	800e2c2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c954:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	613b      	str	r3, [r7, #16]
 800c95c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c960:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	461a      	mov	r2, r3
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	4413      	add	r3, r2
 800c972:	613b      	str	r3, [r7, #16]
 800c974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	00da      	lsls	r2, r3, #3
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	4413      	add	r3, r2
 800c986:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c98a:	60fb      	str	r3, [r7, #12]
 800c98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c990:	b29a      	uxth	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	801a      	strh	r2, [r3, #0]
 800c996:	f000 be1f 	b.w	800d5d8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c99a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c99e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	78db      	ldrb	r3, [r3, #3]
 800c9a6:	2b02      	cmp	r3, #2
 800c9a8:	f040 8462 	bne.w	800d270 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c9ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	6a1a      	ldr	r2, [r3, #32]
 800c9b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	691b      	ldr	r3, [r3, #16]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	f240 83df 	bls.w	800d188 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	009b      	lsls	r3, r3, #2
 800c9e2:	4413      	add	r3, r2
 800c9e4:	881b      	ldrh	r3, [r3, #0]
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800c9f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	009b      	lsls	r3, r3, #2
 800ca0c:	441a      	add	r2, r3
 800ca0e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ca12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca1a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ca1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ca26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	6a1a      	ldr	r2, [r3, #32]
 800ca32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca36:	1ad2      	subs	r2, r2, r3
 800ca38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ca44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	4413      	add	r3, r2
 800ca5e:	881b      	ldrh	r3, [r3, #0]
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f000 81c7 	beq.w	800cdfa <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ca6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	633b      	str	r3, [r7, #48]	; 0x30
 800ca78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	785b      	ldrb	r3, [r3, #1]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d177      	bne.n	800cb78 <USB_EPStartXfer+0x2ce>
 800ca88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800caa2:	b29b      	uxth	r3, r3
 800caa4:	461a      	mov	r2, r3
 800caa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa8:	4413      	add	r3, r2
 800caaa:	62bb      	str	r3, [r7, #40]	; 0x28
 800caac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cab0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	00da      	lsls	r2, r3, #3
 800caba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabc:	4413      	add	r3, r2
 800cabe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cac2:	627b      	str	r3, [r7, #36]	; 0x24
 800cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac6:	881b      	ldrh	r3, [r3, #0]
 800cac8:	b29b      	uxth	r3, r3
 800caca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cace:	b29a      	uxth	r2, r3
 800cad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad2:	801a      	strh	r2, [r3, #0]
 800cad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cad8:	2b3e      	cmp	r3, #62	; 0x3e
 800cada:	d921      	bls.n	800cb20 <USB_EPStartXfer+0x276>
 800cadc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cae0:	095b      	lsrs	r3, r3, #5
 800cae2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caea:	f003 031f 	and.w	r3, r3, #31
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d104      	bne.n	800cafc <USB_EPStartXfer+0x252>
 800caf2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800caf6:	3b01      	subs	r3, #1
 800caf8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafe:	881b      	ldrh	r3, [r3, #0]
 800cb00:	b29a      	uxth	r2, r3
 800cb02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	029b      	lsls	r3, r3, #10
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1c:	801a      	strh	r2, [r3, #0]
 800cb1e:	e050      	b.n	800cbc2 <USB_EPStartXfer+0x318>
 800cb20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d10a      	bne.n	800cb3e <USB_EPStartXfer+0x294>
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2a:	881b      	ldrh	r3, [r3, #0]
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb36:	b29a      	uxth	r2, r3
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	801a      	strh	r2, [r3, #0]
 800cb3c:	e041      	b.n	800cbc2 <USB_EPStartXfer+0x318>
 800cb3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb42:	085b      	lsrs	r3, r3, #1
 800cb44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb4c:	f003 0301 	and.w	r3, r3, #1
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d004      	beq.n	800cb5e <USB_EPStartXfer+0x2b4>
 800cb54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cb58:	3301      	adds	r3, #1
 800cb5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb60:	881b      	ldrh	r3, [r3, #0]
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	029b      	lsls	r3, r3, #10
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	b29a      	uxth	r2, r3
 800cb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb74:	801a      	strh	r2, [r3, #0]
 800cb76:	e024      	b.n	800cbc2 <USB_EPStartXfer+0x318>
 800cb78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	785b      	ldrb	r3, [r3, #1]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d11c      	bne.n	800cbc2 <USB_EPStartXfer+0x318>
 800cb88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	461a      	mov	r2, r3
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9c:	4413      	add	r3, r2
 800cb9e:	633b      	str	r3, [r7, #48]	; 0x30
 800cba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	00da      	lsls	r2, r3, #3
 800cbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb0:	4413      	add	r3, r2
 800cbb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cbb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbbc:	b29a      	uxth	r2, r3
 800cbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cbc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	895b      	ldrh	r3, [r3, #10]
 800cbce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cbd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	6959      	ldr	r1, [r3, #20]
 800cbde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cbe8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cbec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cbf0:	6800      	ldr	r0, [r0, #0]
 800cbf2:	f001 fb66 	bl	800e2c2 <USB_WritePMA>
            ep->xfer_buff += len;
 800cbf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	695a      	ldr	r2, [r3, #20]
 800cc02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc06:	441a      	add	r2, r3
 800cc08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cc14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	6a1a      	ldr	r2, [r3, #32]
 800cc20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	691b      	ldr	r3, [r3, #16]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d90f      	bls.n	800cc50 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800cc30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	6a1a      	ldr	r2, [r3, #32]
 800cc3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc40:	1ad2      	subs	r2, r2, r3
 800cc42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	621a      	str	r2, [r3, #32]
 800cc4e:	e00e      	b.n	800cc6e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800cc50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	6a1b      	ldr	r3, [r3, #32]
 800cc5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800cc60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cc6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	785b      	ldrb	r3, [r3, #1]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d177      	bne.n	800cd6e <USB_EPStartXfer+0x4c4>
 800cc7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	61bb      	str	r3, [r7, #24]
 800cc8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	4413      	add	r3, r2
 800cca0:	61bb      	str	r3, [r7, #24]
 800cca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	00da      	lsls	r2, r3, #3
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ccb8:	617b      	str	r3, [r7, #20]
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	881b      	ldrh	r3, [r3, #0]
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ccc4:	b29a      	uxth	r2, r3
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	801a      	strh	r2, [r3, #0]
 800ccca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccce:	2b3e      	cmp	r3, #62	; 0x3e
 800ccd0:	d921      	bls.n	800cd16 <USB_EPStartXfer+0x46c>
 800ccd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccd6:	095b      	lsrs	r3, r3, #5
 800ccd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ccdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cce0:	f003 031f 	and.w	r3, r3, #31
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d104      	bne.n	800ccf2 <USB_EPStartXfer+0x448>
 800cce8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ccec:	3b01      	subs	r3, #1
 800ccee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	881b      	ldrh	r3, [r3, #0]
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	029b      	lsls	r3, r3, #10
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	4313      	orrs	r3, r2
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd0e:	b29a      	uxth	r2, r3
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	801a      	strh	r2, [r3, #0]
 800cd14:	e056      	b.n	800cdc4 <USB_EPStartXfer+0x51a>
 800cd16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d10a      	bne.n	800cd34 <USB_EPStartXfer+0x48a>
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	881b      	ldrh	r3, [r3, #0]
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	801a      	strh	r2, [r3, #0]
 800cd32:	e047      	b.n	800cdc4 <USB_EPStartXfer+0x51a>
 800cd34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd38:	085b      	lsrs	r3, r3, #1
 800cd3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cd3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd42:	f003 0301 	and.w	r3, r3, #1
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d004      	beq.n	800cd54 <USB_EPStartXfer+0x4aa>
 800cd4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd4e:	3301      	adds	r3, #1
 800cd50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	881b      	ldrh	r3, [r3, #0]
 800cd58:	b29a      	uxth	r2, r3
 800cd5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd5e:	b29b      	uxth	r3, r3
 800cd60:	029b      	lsls	r3, r3, #10
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	4313      	orrs	r3, r2
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	801a      	strh	r2, [r3, #0]
 800cd6c:	e02a      	b.n	800cdc4 <USB_EPStartXfer+0x51a>
 800cd6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	785b      	ldrb	r3, [r3, #1]
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d122      	bne.n	800cdc4 <USB_EPStartXfer+0x51a>
 800cd7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	623b      	str	r3, [r7, #32]
 800cd8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	6a3b      	ldr	r3, [r7, #32]
 800cd9e:	4413      	add	r3, r2
 800cda0:	623b      	str	r3, [r7, #32]
 800cda2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cda6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	00da      	lsls	r2, r3, #3
 800cdb0:	6a3b      	ldr	r3, [r7, #32]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cdb8:	61fb      	str	r3, [r7, #28]
 800cdba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cdc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	891b      	ldrh	r3, [r3, #8]
 800cdd0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cdd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	6959      	ldr	r1, [r3, #20]
 800cde0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cdea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cdee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cdf2:	6800      	ldr	r0, [r0, #0]
 800cdf4:	f001 fa65 	bl	800e2c2 <USB_WritePMA>
 800cdf8:	e3ee      	b.n	800d5d8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cdfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	785b      	ldrb	r3, [r3, #1]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d177      	bne.n	800cefa <USB_EPStartXfer+0x650>
 800ce0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	461a      	mov	r2, r3
 800ce28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce2a:	4413      	add	r3, r2
 800ce2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	781b      	ldrb	r3, [r3, #0]
 800ce3a:	00da      	lsls	r2, r3, #3
 800ce3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce3e:	4413      	add	r3, r2
 800ce40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ce44:	647b      	str	r3, [r7, #68]	; 0x44
 800ce46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce48:	881b      	ldrh	r3, [r3, #0]
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce50:	b29a      	uxth	r2, r3
 800ce52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce54:	801a      	strh	r2, [r3, #0]
 800ce56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce5a:	2b3e      	cmp	r3, #62	; 0x3e
 800ce5c:	d921      	bls.n	800cea2 <USB_EPStartXfer+0x5f8>
 800ce5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce62:	095b      	lsrs	r3, r3, #5
 800ce64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ce68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce6c:	f003 031f 	and.w	r3, r3, #31
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d104      	bne.n	800ce7e <USB_EPStartXfer+0x5d4>
 800ce74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ce7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce80:	881b      	ldrh	r3, [r3, #0]
 800ce82:	b29a      	uxth	r2, r3
 800ce84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	029b      	lsls	r3, r3, #10
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce9a:	b29a      	uxth	r2, r3
 800ce9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce9e:	801a      	strh	r2, [r3, #0]
 800cea0:	e056      	b.n	800cf50 <USB_EPStartXfer+0x6a6>
 800cea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d10a      	bne.n	800cec0 <USB_EPStartXfer+0x616>
 800ceaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceac:	881b      	ldrh	r3, [r3, #0]
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ceb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ceb8:	b29a      	uxth	r2, r3
 800ceba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cebc:	801a      	strh	r2, [r3, #0]
 800cebe:	e047      	b.n	800cf50 <USB_EPStartXfer+0x6a6>
 800cec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cec4:	085b      	lsrs	r3, r3, #1
 800cec6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ceca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cece:	f003 0301 	and.w	r3, r3, #1
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d004      	beq.n	800cee0 <USB_EPStartXfer+0x636>
 800ced6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ceda:	3301      	adds	r3, #1
 800cedc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cee2:	881b      	ldrh	r3, [r3, #0]
 800cee4:	b29a      	uxth	r2, r3
 800cee6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	029b      	lsls	r3, r3, #10
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	4313      	orrs	r3, r2
 800cef2:	b29a      	uxth	r2, r3
 800cef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cef6:	801a      	strh	r2, [r3, #0]
 800cef8:	e02a      	b.n	800cf50 <USB_EPStartXfer+0x6a6>
 800cefa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cefe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	785b      	ldrb	r3, [r3, #1]
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d122      	bne.n	800cf50 <USB_EPStartXfer+0x6a6>
 800cf0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	653b      	str	r3, [r7, #80]	; 0x50
 800cf16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	461a      	mov	r2, r3
 800cf28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf2a:	4413      	add	r3, r2
 800cf2c:	653b      	str	r3, [r7, #80]	; 0x50
 800cf2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	00da      	lsls	r2, r3, #3
 800cf3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf3e:	4413      	add	r3, r2
 800cf40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cf44:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf4e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cf50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	891b      	ldrh	r3, [r3, #8]
 800cf5c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	6959      	ldr	r1, [r3, #20]
 800cf6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cf76:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cf7a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cf7e:	6800      	ldr	r0, [r0, #0]
 800cf80:	f001 f99f 	bl	800e2c2 <USB_WritePMA>
            ep->xfer_buff += len;
 800cf84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	695a      	ldr	r2, [r3, #20]
 800cf90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf94:	441a      	add	r2, r3
 800cf96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cfa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	6a1a      	ldr	r2, [r3, #32]
 800cfae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	691b      	ldr	r3, [r3, #16]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d90f      	bls.n	800cfde <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800cfbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6a1a      	ldr	r2, [r3, #32]
 800cfca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfce:	1ad2      	subs	r2, r2, r3
 800cfd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	621a      	str	r2, [r3, #32]
 800cfdc:	e00e      	b.n	800cffc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800cfde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	6a1b      	ldr	r3, [r3, #32]
 800cfea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800cfee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	2200      	movs	r2, #0
 800cffa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d000:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	643b      	str	r3, [r7, #64]	; 0x40
 800d008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d00c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	785b      	ldrb	r3, [r3, #1]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d177      	bne.n	800d108 <USB_EPStartXfer+0x85e>
 800d018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d01c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	63bb      	str	r3, [r7, #56]	; 0x38
 800d024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d028:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d032:	b29b      	uxth	r3, r3
 800d034:	461a      	mov	r2, r3
 800d036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d038:	4413      	add	r3, r2
 800d03a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d03c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	00da      	lsls	r2, r3, #3
 800d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04c:	4413      	add	r3, r2
 800d04e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d052:	637b      	str	r3, [r7, #52]	; 0x34
 800d054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d056:	881b      	ldrh	r3, [r3, #0]
 800d058:	b29b      	uxth	r3, r3
 800d05a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d05e:	b29a      	uxth	r2, r3
 800d060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d062:	801a      	strh	r2, [r3, #0]
 800d064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d068:	2b3e      	cmp	r3, #62	; 0x3e
 800d06a:	d921      	bls.n	800d0b0 <USB_EPStartXfer+0x806>
 800d06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d070:	095b      	lsrs	r3, r3, #5
 800d072:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d07a:	f003 031f 	and.w	r3, r3, #31
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d104      	bne.n	800d08c <USB_EPStartXfer+0x7e2>
 800d082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d086:	3b01      	subs	r3, #1
 800d088:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d08e:	881b      	ldrh	r3, [r3, #0]
 800d090:	b29a      	uxth	r2, r3
 800d092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d096:	b29b      	uxth	r3, r3
 800d098:	029b      	lsls	r3, r3, #10
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	4313      	orrs	r3, r2
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ac:	801a      	strh	r2, [r3, #0]
 800d0ae:	e050      	b.n	800d152 <USB_EPStartXfer+0x8a8>
 800d0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10a      	bne.n	800d0ce <USB_EPStartXfer+0x824>
 800d0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ba:	881b      	ldrh	r3, [r3, #0]
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0c6:	b29a      	uxth	r2, r3
 800d0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ca:	801a      	strh	r2, [r3, #0]
 800d0cc:	e041      	b.n	800d152 <USB_EPStartXfer+0x8a8>
 800d0ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0d2:	085b      	lsrs	r3, r3, #1
 800d0d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0dc:	f003 0301 	and.w	r3, r3, #1
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d004      	beq.n	800d0ee <USB_EPStartXfer+0x844>
 800d0e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f0:	881b      	ldrh	r3, [r3, #0]
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	029b      	lsls	r3, r3, #10
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	4313      	orrs	r3, r2
 800d100:	b29a      	uxth	r2, r3
 800d102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d104:	801a      	strh	r2, [r3, #0]
 800d106:	e024      	b.n	800d152 <USB_EPStartXfer+0x8a8>
 800d108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d10c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	785b      	ldrb	r3, [r3, #1]
 800d114:	2b01      	cmp	r3, #1
 800d116:	d11c      	bne.n	800d152 <USB_EPStartXfer+0x8a8>
 800d118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d11c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d126:	b29b      	uxth	r3, r3
 800d128:	461a      	mov	r2, r3
 800d12a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d12c:	4413      	add	r3, r2
 800d12e:	643b      	str	r3, [r7, #64]	; 0x40
 800d130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	00da      	lsls	r2, r3, #3
 800d13e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d140:	4413      	add	r3, r2
 800d142:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d146:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d150:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	895b      	ldrh	r3, [r3, #10]
 800d15e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	6959      	ldr	r1, [r3, #20]
 800d16e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d172:	b29b      	uxth	r3, r3
 800d174:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d178:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d17c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d180:	6800      	ldr	r0, [r0, #0]
 800d182:	f001 f89e 	bl	800e2c2 <USB_WritePMA>
 800d186:	e227      	b.n	800d5d8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d18c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	6a1b      	ldr	r3, [r3, #32]
 800d194:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d19c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	4413      	add	r3, r2
 800d1b2:	881b      	ldrh	r3, [r3, #0]
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d1ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1be:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d1c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	441a      	add	r2, r3
 800d1dc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d1e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1f0:	b29b      	uxth	r3, r3
 800d1f2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d204:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d20e:	b29b      	uxth	r3, r3
 800d210:	461a      	mov	r2, r3
 800d212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d214:	4413      	add	r3, r2
 800d216:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d21c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	00da      	lsls	r2, r3, #3
 800d226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d228:	4413      	add	r3, r2
 800d22a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d22e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d234:	b29a      	uxth	r2, r3
 800d236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d238:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d23a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d23e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	891b      	ldrh	r3, [r3, #8]
 800d246:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d24a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d24e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	6959      	ldr	r1, [r3, #20]
 800d256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d260:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d264:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d268:	6800      	ldr	r0, [r0, #0]
 800d26a:	f001 f82a 	bl	800e2c2 <USB_WritePMA>
 800d26e:	e1b3      	b.n	800d5d8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	6a1a      	ldr	r2, [r3, #32]
 800d27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d280:	1ad2      	subs	r2, r2, r3
 800d282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d28e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d29c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	4413      	add	r3, r2
 800d2a8:	881b      	ldrh	r3, [r3, #0]
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	f000 80c6 	beq.w	800d442 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d2b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	673b      	str	r3, [r7, #112]	; 0x70
 800d2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	785b      	ldrb	r3, [r3, #1]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d177      	bne.n	800d3c2 <USB_EPStartXfer+0xb18>
 800d2d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d2f2:	4413      	add	r3, r2
 800d2f4:	66bb      	str	r3, [r7, #104]	; 0x68
 800d2f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	00da      	lsls	r2, r3, #3
 800d304:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d306:	4413      	add	r3, r2
 800d308:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d30c:	667b      	str	r3, [r7, #100]	; 0x64
 800d30e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d310:	881b      	ldrh	r3, [r3, #0]
 800d312:	b29b      	uxth	r3, r3
 800d314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d318:	b29a      	uxth	r2, r3
 800d31a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d31c:	801a      	strh	r2, [r3, #0]
 800d31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d322:	2b3e      	cmp	r3, #62	; 0x3e
 800d324:	d921      	bls.n	800d36a <USB_EPStartXfer+0xac0>
 800d326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d32a:	095b      	lsrs	r3, r3, #5
 800d32c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d334:	f003 031f 	and.w	r3, r3, #31
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d104      	bne.n	800d346 <USB_EPStartXfer+0xa9c>
 800d33c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d340:	3b01      	subs	r3, #1
 800d342:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d348:	881b      	ldrh	r3, [r3, #0]
 800d34a:	b29a      	uxth	r2, r3
 800d34c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d350:	b29b      	uxth	r3, r3
 800d352:	029b      	lsls	r3, r3, #10
 800d354:	b29b      	uxth	r3, r3
 800d356:	4313      	orrs	r3, r2
 800d358:	b29b      	uxth	r3, r3
 800d35a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d35e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d362:	b29a      	uxth	r2, r3
 800d364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d366:	801a      	strh	r2, [r3, #0]
 800d368:	e050      	b.n	800d40c <USB_EPStartXfer+0xb62>
 800d36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d10a      	bne.n	800d388 <USB_EPStartXfer+0xade>
 800d372:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d374:	881b      	ldrh	r3, [r3, #0]
 800d376:	b29b      	uxth	r3, r3
 800d378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d37c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d380:	b29a      	uxth	r2, r3
 800d382:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d384:	801a      	strh	r2, [r3, #0]
 800d386:	e041      	b.n	800d40c <USB_EPStartXfer+0xb62>
 800d388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d38c:	085b      	lsrs	r3, r3, #1
 800d38e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d396:	f003 0301 	and.w	r3, r3, #1
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d004      	beq.n	800d3a8 <USB_EPStartXfer+0xafe>
 800d39e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d3a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3aa:	881b      	ldrh	r3, [r3, #0]
 800d3ac:	b29a      	uxth	r2, r3
 800d3ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	029b      	lsls	r3, r3, #10
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	b29a      	uxth	r2, r3
 800d3bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3be:	801a      	strh	r2, [r3, #0]
 800d3c0:	e024      	b.n	800d40c <USB_EPStartXfer+0xb62>
 800d3c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	785b      	ldrb	r3, [r3, #1]
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d11c      	bne.n	800d40c <USB_EPStartXfer+0xb62>
 800d3d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3e6:	4413      	add	r3, r2
 800d3e8:	673b      	str	r3, [r7, #112]	; 0x70
 800d3ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	00da      	lsls	r2, r3, #3
 800d3f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3fa:	4413      	add	r3, r2
 800d3fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d400:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d406:	b29a      	uxth	r2, r3
 800d408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d40a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	895b      	ldrh	r3, [r3, #10]
 800d418:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d41c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	6959      	ldr	r1, [r3, #20]
 800d428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d432:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d436:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d43a:	6800      	ldr	r0, [r0, #0]
 800d43c:	f000 ff41 	bl	800e2c2 <USB_WritePMA>
 800d440:	e0ca      	b.n	800d5d8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	785b      	ldrb	r3, [r3, #1]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d177      	bne.n	800d542 <USB_EPStartXfer+0xc98>
 800d452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d462:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	461a      	mov	r2, r3
 800d470:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d472:	4413      	add	r3, r2
 800d474:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d47a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	781b      	ldrb	r3, [r3, #0]
 800d482:	00da      	lsls	r2, r3, #3
 800d484:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d486:	4413      	add	r3, r2
 800d488:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d48c:	67bb      	str	r3, [r7, #120]	; 0x78
 800d48e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d490:	881b      	ldrh	r3, [r3, #0]
 800d492:	b29b      	uxth	r3, r3
 800d494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d498:	b29a      	uxth	r2, r3
 800d49a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d49c:	801a      	strh	r2, [r3, #0]
 800d49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4a2:	2b3e      	cmp	r3, #62	; 0x3e
 800d4a4:	d921      	bls.n	800d4ea <USB_EPStartXfer+0xc40>
 800d4a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4aa:	095b      	lsrs	r3, r3, #5
 800d4ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4b4:	f003 031f 	and.w	r3, r3, #31
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d104      	bne.n	800d4c6 <USB_EPStartXfer+0xc1c>
 800d4bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d4c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4c8:	881b      	ldrh	r3, [r3, #0]
 800d4ca:	b29a      	uxth	r2, r3
 800d4cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d4d0:	b29b      	uxth	r3, r3
 800d4d2:	029b      	lsls	r3, r3, #10
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4e2:	b29a      	uxth	r2, r3
 800d4e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4e6:	801a      	strh	r2, [r3, #0]
 800d4e8:	e05c      	b.n	800d5a4 <USB_EPStartXfer+0xcfa>
 800d4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10a      	bne.n	800d508 <USB_EPStartXfer+0xc5e>
 800d4f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4f4:	881b      	ldrh	r3, [r3, #0]
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d500:	b29a      	uxth	r2, r3
 800d502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d504:	801a      	strh	r2, [r3, #0]
 800d506:	e04d      	b.n	800d5a4 <USB_EPStartXfer+0xcfa>
 800d508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d50c:	085b      	lsrs	r3, r3, #1
 800d50e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d516:	f003 0301 	and.w	r3, r3, #1
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d004      	beq.n	800d528 <USB_EPStartXfer+0xc7e>
 800d51e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d522:	3301      	adds	r3, #1
 800d524:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d52a:	881b      	ldrh	r3, [r3, #0]
 800d52c:	b29a      	uxth	r2, r3
 800d52e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d532:	b29b      	uxth	r3, r3
 800d534:	029b      	lsls	r3, r3, #10
 800d536:	b29b      	uxth	r3, r3
 800d538:	4313      	orrs	r3, r2
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d53e:	801a      	strh	r2, [r3, #0]
 800d540:	e030      	b.n	800d5a4 <USB_EPStartXfer+0xcfa>
 800d542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	785b      	ldrb	r3, [r3, #1]
 800d54e:	2b01      	cmp	r3, #1
 800d550:	d128      	bne.n	800d5a4 <USB_EPStartXfer+0xcfa>
 800d552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d564:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d56e:	b29b      	uxth	r3, r3
 800d570:	461a      	mov	r2, r3
 800d572:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d576:	4413      	add	r3, r2
 800d578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d57c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	00da      	lsls	r2, r3, #3
 800d58a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d58e:	4413      	add	r3, r2
 800d590:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d594:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d5a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d5a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	891b      	ldrh	r3, [r3, #8]
 800d5b0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	6959      	ldr	r1, [r3, #20]
 800d5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d5ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d5ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d5d2:	6800      	ldr	r0, [r0, #0]
 800d5d4:	f000 fe75 	bl	800e2c2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d5d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	009b      	lsls	r3, r3, #2
 800d5f0:	4413      	add	r3, r2
 800d5f2:	881b      	ldrh	r3, [r3, #0]
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d5fe:	817b      	strh	r3, [r7, #10]
 800d600:	897b      	ldrh	r3, [r7, #10]
 800d602:	f083 0310 	eor.w	r3, r3, #16
 800d606:	817b      	strh	r3, [r7, #10]
 800d608:	897b      	ldrh	r3, [r7, #10]
 800d60a:	f083 0320 	eor.w	r3, r3, #32
 800d60e:	817b      	strh	r3, [r7, #10]
 800d610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d614:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d61e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	441a      	add	r2, r3
 800d62a:	897b      	ldrh	r3, [r7, #10]
 800d62c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	8013      	strh	r3, [r2, #0]
 800d640:	f000 bcde 	b.w	800e000 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	7b1b      	ldrb	r3, [r3, #12]
 800d650:	2b00      	cmp	r3, #0
 800d652:	f040 80bb 	bne.w	800d7cc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d65a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	699a      	ldr	r2, [r3, #24]
 800d662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	691b      	ldr	r3, [r3, #16]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d917      	bls.n	800d6a2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	691b      	ldr	r3, [r3, #16]
 800d67e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800d682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	699a      	ldr	r2, [r3, #24]
 800d68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d692:	1ad2      	subs	r2, r2, r3
 800d694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	619a      	str	r2, [r3, #24]
 800d6a0:	e00e      	b.n	800d6c0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	699b      	ldr	r3, [r3, #24]
 800d6ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800d6b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d6c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d6ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	461a      	mov	r2, r3
 800d6e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6e4:	4413      	add	r3, r2
 800d6e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d6ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	00da      	lsls	r2, r3, #3
 800d6f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6fc:	4413      	add	r3, r2
 800d6fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d702:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d70a:	881b      	ldrh	r3, [r3, #0]
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d712:	b29a      	uxth	r2, r3
 800d714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d718:	801a      	strh	r2, [r3, #0]
 800d71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d71e:	2b3e      	cmp	r3, #62	; 0x3e
 800d720:	d924      	bls.n	800d76c <USB_EPStartXfer+0xec2>
 800d722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d726:	095b      	lsrs	r3, r3, #5
 800d728:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d730:	f003 031f 	and.w	r3, r3, #31
 800d734:	2b00      	cmp	r3, #0
 800d736:	d104      	bne.n	800d742 <USB_EPStartXfer+0xe98>
 800d738:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d73c:	3b01      	subs	r3, #1
 800d73e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d746:	881b      	ldrh	r3, [r3, #0]
 800d748:	b29a      	uxth	r2, r3
 800d74a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d74e:	b29b      	uxth	r3, r3
 800d750:	029b      	lsls	r3, r3, #10
 800d752:	b29b      	uxth	r3, r3
 800d754:	4313      	orrs	r3, r2
 800d756:	b29b      	uxth	r3, r3
 800d758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d75c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d760:	b29a      	uxth	r2, r3
 800d762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d766:	801a      	strh	r2, [r3, #0]
 800d768:	f000 bc10 	b.w	800df8c <USB_EPStartXfer+0x16e2>
 800d76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d770:	2b00      	cmp	r3, #0
 800d772:	d10c      	bne.n	800d78e <USB_EPStartXfer+0xee4>
 800d774:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d778:	881b      	ldrh	r3, [r3, #0]
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d784:	b29a      	uxth	r2, r3
 800d786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d78a:	801a      	strh	r2, [r3, #0]
 800d78c:	e3fe      	b.n	800df8c <USB_EPStartXfer+0x16e2>
 800d78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d792:	085b      	lsrs	r3, r3, #1
 800d794:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d79c:	f003 0301 	and.w	r3, r3, #1
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d004      	beq.n	800d7ae <USB_EPStartXfer+0xf04>
 800d7a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d7ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7b2:	881b      	ldrh	r3, [r3, #0]
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	029b      	lsls	r3, r3, #10
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7c8:	801a      	strh	r2, [r3, #0]
 800d7ca:	e3df      	b.n	800df8c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	78db      	ldrb	r3, [r3, #3]
 800d7d8:	2b02      	cmp	r3, #2
 800d7da:	f040 8218 	bne.w	800dc0e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	785b      	ldrb	r3, [r3, #1]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	f040 809d 	bne.w	800d92a <USB_EPStartXfer+0x1080>
 800d7f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d7fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d802:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d80c:	b29b      	uxth	r3, r3
 800d80e:	461a      	mov	r2, r3
 800d810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d814:	4413      	add	r3, r2
 800d816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d81a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d81e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	00da      	lsls	r2, r3, #3
 800d828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d82c:	4413      	add	r3, r2
 800d82e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d832:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d836:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d83a:	881b      	ldrh	r3, [r3, #0]
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d842:	b29a      	uxth	r2, r3
 800d844:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d848:	801a      	strh	r2, [r3, #0]
 800d84a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d84e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	691b      	ldr	r3, [r3, #16]
 800d856:	2b3e      	cmp	r3, #62	; 0x3e
 800d858:	d92b      	bls.n	800d8b2 <USB_EPStartXfer+0x1008>
 800d85a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d85e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	691b      	ldr	r3, [r3, #16]
 800d866:	095b      	lsrs	r3, r3, #5
 800d868:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d86c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	f003 031f 	and.w	r3, r3, #31
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d104      	bne.n	800d88a <USB_EPStartXfer+0xfe0>
 800d880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d884:	3b01      	subs	r3, #1
 800d886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d88a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d88e:	881b      	ldrh	r3, [r3, #0]
 800d890:	b29a      	uxth	r2, r3
 800d892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d896:	b29b      	uxth	r3, r3
 800d898:	029b      	lsls	r3, r3, #10
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	4313      	orrs	r3, r2
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d8ae:	801a      	strh	r2, [r3, #0]
 800d8b0:	e070      	b.n	800d994 <USB_EPStartXfer+0x10ea>
 800d8b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	691b      	ldr	r3, [r3, #16]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d10c      	bne.n	800d8dc <USB_EPStartXfer+0x1032>
 800d8c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d8c6:	881b      	ldrh	r3, [r3, #0]
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d8d8:	801a      	strh	r2, [r3, #0]
 800d8da:	e05b      	b.n	800d994 <USB_EPStartXfer+0x10ea>
 800d8dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	691b      	ldr	r3, [r3, #16]
 800d8e8:	085b      	lsrs	r3, r3, #1
 800d8ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d8ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	691b      	ldr	r3, [r3, #16]
 800d8fa:	f003 0301 	and.w	r3, r3, #1
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d004      	beq.n	800d90c <USB_EPStartXfer+0x1062>
 800d902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d906:	3301      	adds	r3, #1
 800d908:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d90c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d910:	881b      	ldrh	r3, [r3, #0]
 800d912:	b29a      	uxth	r2, r3
 800d914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d918:	b29b      	uxth	r3, r3
 800d91a:	029b      	lsls	r3, r3, #10
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	4313      	orrs	r3, r2
 800d920:	b29a      	uxth	r2, r3
 800d922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d926:	801a      	strh	r2, [r3, #0]
 800d928:	e034      	b.n	800d994 <USB_EPStartXfer+0x10ea>
 800d92a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d92e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	785b      	ldrb	r3, [r3, #1]
 800d936:	2b01      	cmp	r3, #1
 800d938:	d12c      	bne.n	800d994 <USB_EPStartXfer+0x10ea>
 800d93a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d93e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d94c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d956:	b29b      	uxth	r3, r3
 800d958:	461a      	mov	r2, r3
 800d95a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d95e:	4413      	add	r3, r2
 800d960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	00da      	lsls	r2, r3, #3
 800d972:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d976:	4413      	add	r3, r2
 800d978:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d97c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	691b      	ldr	r3, [r3, #16]
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d992:	801a      	strh	r2, [r3, #0]
 800d994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	785b      	ldrb	r3, [r3, #1]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f040 809d 	bne.w	800daee <USB_EPStartXfer+0x1244>
 800d9b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d9c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d9d8:	4413      	add	r3, r2
 800d9da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d9de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	00da      	lsls	r2, r3, #3
 800d9ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d9f0:	4413      	add	r3, r2
 800d9f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d9f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d9fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	b29b      	uxth	r3, r3
 800da02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da06:	b29a      	uxth	r2, r3
 800da08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da0c:	801a      	strh	r2, [r3, #0]
 800da0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	691b      	ldr	r3, [r3, #16]
 800da1a:	2b3e      	cmp	r3, #62	; 0x3e
 800da1c:	d92b      	bls.n	800da76 <USB_EPStartXfer+0x11cc>
 800da1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	691b      	ldr	r3, [r3, #16]
 800da2a:	095b      	lsrs	r3, r3, #5
 800da2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800da30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	691b      	ldr	r3, [r3, #16]
 800da3c:	f003 031f 	and.w	r3, r3, #31
 800da40:	2b00      	cmp	r3, #0
 800da42:	d104      	bne.n	800da4e <USB_EPStartXfer+0x11a4>
 800da44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da48:	3b01      	subs	r3, #1
 800da4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800da4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da52:	881b      	ldrh	r3, [r3, #0]
 800da54:	b29a      	uxth	r2, r3
 800da56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	029b      	lsls	r3, r3, #10
 800da5e:	b29b      	uxth	r3, r3
 800da60:	4313      	orrs	r3, r2
 800da62:	b29b      	uxth	r3, r3
 800da64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da6c:	b29a      	uxth	r2, r3
 800da6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da72:	801a      	strh	r2, [r3, #0]
 800da74:	e069      	b.n	800db4a <USB_EPStartXfer+0x12a0>
 800da76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	691b      	ldr	r3, [r3, #16]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d10c      	bne.n	800daa0 <USB_EPStartXfer+0x11f6>
 800da86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da8a:	881b      	ldrh	r3, [r3, #0]
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da96:	b29a      	uxth	r2, r3
 800da98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da9c:	801a      	strh	r2, [r3, #0]
 800da9e:	e054      	b.n	800db4a <USB_EPStartXfer+0x12a0>
 800daa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	691b      	ldr	r3, [r3, #16]
 800daac:	085b      	lsrs	r3, r3, #1
 800daae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dab2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dab6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	691b      	ldr	r3, [r3, #16]
 800dabe:	f003 0301 	and.w	r3, r3, #1
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d004      	beq.n	800dad0 <USB_EPStartXfer+0x1226>
 800dac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800daca:	3301      	adds	r3, #1
 800dacc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dad4:	881b      	ldrh	r3, [r3, #0]
 800dad6:	b29a      	uxth	r2, r3
 800dad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dadc:	b29b      	uxth	r3, r3
 800dade:	029b      	lsls	r3, r3, #10
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	4313      	orrs	r3, r2
 800dae4:	b29a      	uxth	r2, r3
 800dae6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800daea:	801a      	strh	r2, [r3, #0]
 800daec:	e02d      	b.n	800db4a <USB_EPStartXfer+0x12a0>
 800daee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	785b      	ldrb	r3, [r3, #1]
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	d125      	bne.n	800db4a <USB_EPStartXfer+0x12a0>
 800dafe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	461a      	mov	r2, r3
 800db10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800db14:	4413      	add	r3, r2
 800db16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800db1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	00da      	lsls	r2, r3, #3
 800db28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800db2c:	4413      	add	r3, r2
 800db2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800db32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800db36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	691b      	ldr	r3, [r3, #16]
 800db42:	b29a      	uxth	r2, r3
 800db44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800db48:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800db4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	69db      	ldr	r3, [r3, #28]
 800db56:	2b00      	cmp	r3, #0
 800db58:	f000 8218 	beq.w	800df8c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800db5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	009b      	lsls	r3, r3, #2
 800db74:	4413      	add	r3, r2
 800db76:	881b      	ldrh	r3, [r3, #0]
 800db78:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800db7c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800db80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db84:	2b00      	cmp	r3, #0
 800db86:	d005      	beq.n	800db94 <USB_EPStartXfer+0x12ea>
 800db88:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800db8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db90:	2b00      	cmp	r3, #0
 800db92:	d10d      	bne.n	800dbb0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800db94:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800db98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f040 81f5 	bne.w	800df8c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dba2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800dba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	f040 81ee 	bne.w	800df8c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800dbb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbb8:	681a      	ldr	r2, [r3, #0]
 800dbba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	4413      	add	r3, r2
 800dbca:	881b      	ldrh	r3, [r3, #0]
 800dbcc:	b29b      	uxth	r3, r3
 800dbce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dbd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbd6:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800dbda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	441a      	add	r2, r3
 800dbf4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800dbf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dbfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	8013      	strh	r3, [r2, #0]
 800dc0c:	e1be      	b.n	800df8c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800dc0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	78db      	ldrb	r3, [r3, #3]
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	f040 81b4 	bne.w	800df88 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800dc20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	699a      	ldr	r2, [r3, #24]
 800dc2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	691b      	ldr	r3, [r3, #16]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d917      	bls.n	800dc6c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800dc3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800dc4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	699a      	ldr	r2, [r3, #24]
 800dc58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc5c:	1ad2      	subs	r2, r2, r3
 800dc5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	619a      	str	r2, [r3, #24]
 800dc6a:	e00e      	b.n	800dc8a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800dc6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	699b      	ldr	r3, [r3, #24]
 800dc78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800dc7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2200      	movs	r2, #0
 800dc88:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800dc8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	785b      	ldrb	r3, [r3, #1]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	f040 8085 	bne.w	800dda6 <USB_EPStartXfer+0x14fc>
 800dc9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dca0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dcaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	461a      	mov	r2, r3
 800dcbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800dcc0:	4413      	add	r3, r2
 800dcc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800dcc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	781b      	ldrb	r3, [r3, #0]
 800dcd2:	00da      	lsls	r2, r3, #3
 800dcd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800dcd8:	4413      	add	r3, r2
 800dcda:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800dcde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800dce2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dce6:	881b      	ldrh	r3, [r3, #0]
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dcee:	b29a      	uxth	r2, r3
 800dcf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dcf4:	801a      	strh	r2, [r3, #0]
 800dcf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcfa:	2b3e      	cmp	r3, #62	; 0x3e
 800dcfc:	d923      	bls.n	800dd46 <USB_EPStartXfer+0x149c>
 800dcfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd02:	095b      	lsrs	r3, r3, #5
 800dd04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800dd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd0c:	f003 031f 	and.w	r3, r3, #31
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d104      	bne.n	800dd1e <USB_EPStartXfer+0x1474>
 800dd14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd18:	3b01      	subs	r3, #1
 800dd1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800dd1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dd22:	881b      	ldrh	r3, [r3, #0]
 800dd24:	b29a      	uxth	r2, r3
 800dd26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	029b      	lsls	r3, r3, #10
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	4313      	orrs	r3, r2
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dd42:	801a      	strh	r2, [r3, #0]
 800dd44:	e060      	b.n	800de08 <USB_EPStartXfer+0x155e>
 800dd46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d10c      	bne.n	800dd68 <USB_EPStartXfer+0x14be>
 800dd4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dd52:	881b      	ldrh	r3, [r3, #0]
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dd64:	801a      	strh	r2, [r3, #0]
 800dd66:	e04f      	b.n	800de08 <USB_EPStartXfer+0x155e>
 800dd68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd6c:	085b      	lsrs	r3, r3, #1
 800dd6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800dd72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd76:	f003 0301 	and.w	r3, r3, #1
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d004      	beq.n	800dd88 <USB_EPStartXfer+0x14de>
 800dd7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd82:	3301      	adds	r3, #1
 800dd84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800dd88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dd8c:	881b      	ldrh	r3, [r3, #0]
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	029b      	lsls	r3, r3, #10
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dda2:	801a      	strh	r2, [r3, #0]
 800dda4:	e030      	b.n	800de08 <USB_EPStartXfer+0x155e>
 800dda6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	785b      	ldrb	r3, [r3, #1]
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d128      	bne.n	800de08 <USB_EPStartXfer+0x155e>
 800ddb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ddc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ddd2:	b29b      	uxth	r3, r3
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ddda:	4413      	add	r3, r2
 800dddc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800dde0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dde4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	00da      	lsls	r2, r3, #3
 800ddee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ddf2:	4413      	add	r3, r2
 800ddf4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ddf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ddfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de00:	b29a      	uxth	r2, r3
 800de02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800de06:	801a      	strh	r2, [r3, #0]
 800de08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800de16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	785b      	ldrb	r3, [r3, #1]
 800de22:	2b00      	cmp	r3, #0
 800de24:	f040 8085 	bne.w	800df32 <USB_EPStartXfer+0x1688>
 800de28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800de36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de44:	b29b      	uxth	r3, r3
 800de46:	461a      	mov	r2, r3
 800de48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800de4c:	4413      	add	r3, r2
 800de4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800de52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	00da      	lsls	r2, r3, #3
 800de60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800de64:	4413      	add	r3, r2
 800de66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800de6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800de6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800de72:	881b      	ldrh	r3, [r3, #0]
 800de74:	b29b      	uxth	r3, r3
 800de76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de7a:	b29a      	uxth	r2, r3
 800de7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800de80:	801a      	strh	r2, [r3, #0]
 800de82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de86:	2b3e      	cmp	r3, #62	; 0x3e
 800de88:	d923      	bls.n	800ded2 <USB_EPStartXfer+0x1628>
 800de8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de8e:	095b      	lsrs	r3, r3, #5
 800de90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800de94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de98:	f003 031f 	and.w	r3, r3, #31
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d104      	bne.n	800deaa <USB_EPStartXfer+0x1600>
 800dea0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dea4:	3b01      	subs	r3, #1
 800dea6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800deaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800deae:	881b      	ldrh	r3, [r3, #0]
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	029b      	lsls	r3, r3, #10
 800deba:	b29b      	uxth	r3, r3
 800debc:	4313      	orrs	r3, r2
 800debe:	b29b      	uxth	r3, r3
 800dec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dec8:	b29a      	uxth	r2, r3
 800deca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dece:	801a      	strh	r2, [r3, #0]
 800ded0:	e05c      	b.n	800df8c <USB_EPStartXfer+0x16e2>
 800ded2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d10c      	bne.n	800def4 <USB_EPStartXfer+0x164a>
 800deda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dede:	881b      	ldrh	r3, [r3, #0]
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800deea:	b29a      	uxth	r2, r3
 800deec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800def0:	801a      	strh	r2, [r3, #0]
 800def2:	e04b      	b.n	800df8c <USB_EPStartXfer+0x16e2>
 800def4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800def8:	085b      	lsrs	r3, r3, #1
 800defa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800defe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df02:	f003 0301 	and.w	r3, r3, #1
 800df06:	2b00      	cmp	r3, #0
 800df08:	d004      	beq.n	800df14 <USB_EPStartXfer+0x166a>
 800df0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df0e:	3301      	adds	r3, #1
 800df10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800df14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800df18:	881b      	ldrh	r3, [r3, #0]
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800df20:	b29b      	uxth	r3, r3
 800df22:	029b      	lsls	r3, r3, #10
 800df24:	b29b      	uxth	r3, r3
 800df26:	4313      	orrs	r3, r2
 800df28:	b29a      	uxth	r2, r3
 800df2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800df2e:	801a      	strh	r2, [r3, #0]
 800df30:	e02c      	b.n	800df8c <USB_EPStartXfer+0x16e2>
 800df32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	785b      	ldrb	r3, [r3, #1]
 800df3e:	2b01      	cmp	r3, #1
 800df40:	d124      	bne.n	800df8c <USB_EPStartXfer+0x16e2>
 800df42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df50:	b29b      	uxth	r3, r3
 800df52:	461a      	mov	r2, r3
 800df54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800df58:	4413      	add	r3, r2
 800df5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800df5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	00da      	lsls	r2, r3, #3
 800df6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800df70:	4413      	add	r3, r2
 800df72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800df76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800df7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df7e:	b29a      	uxth	r2, r3
 800df80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800df84:	801a      	strh	r2, [r3, #0]
 800df86:	e001      	b.n	800df8c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800df88:	2301      	movs	r3, #1
 800df8a:	e03a      	b.n	800e002 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800df8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	4413      	add	r3, r2
 800dfa6:	881b      	ldrh	r3, [r3, #0]
 800dfa8:	b29b      	uxth	r3, r3
 800dfaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dfae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfb2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dfb6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dfba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dfbe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dfc2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dfc6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dfca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dfce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	441a      	add	r2, r3
 800dfe8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dfec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e000:	2300      	movs	r3, #0
}
 800e002:	4618      	mov	r0, r3
 800e004:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e00c:	b480      	push	{r7}
 800e00e:	b085      	sub	sp, #20
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	785b      	ldrb	r3, [r3, #1]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d020      	beq.n	800e060 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	4413      	add	r3, r2
 800e028:	881b      	ldrh	r3, [r3, #0]
 800e02a:	b29b      	uxth	r3, r3
 800e02c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e034:	81bb      	strh	r3, [r7, #12]
 800e036:	89bb      	ldrh	r3, [r7, #12]
 800e038:	f083 0310 	eor.w	r3, r3, #16
 800e03c:	81bb      	strh	r3, [r7, #12]
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	009b      	lsls	r3, r3, #2
 800e046:	441a      	add	r2, r3
 800e048:	89bb      	ldrh	r3, [r7, #12]
 800e04a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e04e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	8013      	strh	r3, [r2, #0]
 800e05e:	e01f      	b.n	800e0a0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4413      	add	r3, r2
 800e06a:	881b      	ldrh	r3, [r3, #0]
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e076:	81fb      	strh	r3, [r7, #14]
 800e078:	89fb      	ldrh	r3, [r7, #14]
 800e07a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e07e:	81fb      	strh	r3, [r7, #14]
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	441a      	add	r2, r3
 800e08a:	89fb      	ldrh	r3, [r7, #14]
 800e08c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e0a0:	2300      	movs	r3, #0
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3714      	adds	r7, #20
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr

0800e0ae <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e0ae:	b480      	push	{r7}
 800e0b0:	b087      	sub	sp, #28
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
 800e0b6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	7b1b      	ldrb	r3, [r3, #12]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	f040 809d 	bne.w	800e1fc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	785b      	ldrb	r3, [r3, #1]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d04c      	beq.n	800e164 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	009b      	lsls	r3, r3, #2
 800e0d2:	4413      	add	r3, r2
 800e0d4:	881b      	ldrh	r3, [r3, #0]
 800e0d6:	823b      	strh	r3, [r7, #16]
 800e0d8:	8a3b      	ldrh	r3, [r7, #16]
 800e0da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d01b      	beq.n	800e11a <USB_EPClearStall+0x6c>
 800e0e2:	687a      	ldr	r2, [r7, #4]
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	4413      	add	r3, r2
 800e0ec:	881b      	ldrh	r3, [r3, #0]
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e0f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0f8:	81fb      	strh	r3, [r7, #14]
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	441a      	add	r2, r3
 800e104:	89fb      	ldrh	r3, [r7, #14]
 800e106:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e10a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e10e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e112:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e116:	b29b      	uxth	r3, r3
 800e118:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	78db      	ldrb	r3, [r3, #3]
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d06c      	beq.n	800e1fc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	4413      	add	r3, r2
 800e12c:	881b      	ldrh	r3, [r3, #0]
 800e12e:	b29b      	uxth	r3, r3
 800e130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e138:	81bb      	strh	r3, [r7, #12]
 800e13a:	89bb      	ldrh	r3, [r7, #12]
 800e13c:	f083 0320 	eor.w	r3, r3, #32
 800e140:	81bb      	strh	r3, [r7, #12]
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	441a      	add	r2, r3
 800e14c:	89bb      	ldrh	r3, [r7, #12]
 800e14e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e15a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e15e:	b29b      	uxth	r3, r3
 800e160:	8013      	strh	r3, [r2, #0]
 800e162:	e04b      	b.n	800e1fc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e164:	687a      	ldr	r2, [r7, #4]
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	4413      	add	r3, r2
 800e16e:	881b      	ldrh	r3, [r3, #0]
 800e170:	82fb      	strh	r3, [r7, #22]
 800e172:	8afb      	ldrh	r3, [r7, #22]
 800e174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d01b      	beq.n	800e1b4 <USB_EPClearStall+0x106>
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	009b      	lsls	r3, r3, #2
 800e184:	4413      	add	r3, r2
 800e186:	881b      	ldrh	r3, [r3, #0]
 800e188:	b29b      	uxth	r3, r3
 800e18a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e18e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e192:	82bb      	strh	r3, [r7, #20]
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	441a      	add	r2, r3
 800e19e:	8abb      	ldrh	r3, [r7, #20]
 800e1a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e1ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	4413      	add	r3, r2
 800e1be:	881b      	ldrh	r3, [r3, #0]
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e1c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1ca:	827b      	strh	r3, [r7, #18]
 800e1cc:	8a7b      	ldrh	r3, [r7, #18]
 800e1ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e1d2:	827b      	strh	r3, [r7, #18]
 800e1d4:	8a7b      	ldrh	r3, [r7, #18]
 800e1d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e1da:	827b      	strh	r3, [r7, #18]
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	441a      	add	r2, r3
 800e1e6:	8a7b      	ldrh	r3, [r7, #18]
 800e1e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e1f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1f8:	b29b      	uxth	r3, r3
 800e1fa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e1fc:	2300      	movs	r3, #0
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	371c      	adds	r7, #28
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr

0800e20a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e20a:	b480      	push	{r7}
 800e20c:	b083      	sub	sp, #12
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
 800e212:	460b      	mov	r3, r1
 800e214:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e216:	78fb      	ldrb	r3, [r7, #3]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d103      	bne.n	800e224 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2280      	movs	r2, #128	; 0x80
 800e220:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800e224:	2300      	movs	r3, #0
}
 800e226:	4618      	mov	r0, r3
 800e228:	370c      	adds	r7, #12
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr

0800e232 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e232:	b480      	push	{r7}
 800e234:	b083      	sub	sp, #12
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e240:	b29b      	uxth	r3, r3
 800e242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e24a:	b29a      	uxth	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e252:	2300      	movs	r3, #0
}
 800e254:	4618      	mov	r0, r3
 800e256:	370c      	adds	r7, #12
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr

0800e260 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800e260:	b480      	push	{r7}
 800e262:	b083      	sub	sp, #12
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e26e:	b29b      	uxth	r3, r3
 800e270:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800e274:	b29a      	uxth	r2, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800e27c:	2300      	movs	r3, #0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	370c      	adds	r7, #12
 800e282:	46bd      	mov	sp, r7
 800e284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e288:	4770      	bx	lr

0800e28a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e28a:	b480      	push	{r7}
 800e28c:	b085      	sub	sp, #20
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e298:	b29b      	uxth	r3, r3
 800e29a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e29c:	68fb      	ldr	r3, [r7, #12]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3714      	adds	r7, #20
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr

0800e2aa <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800e2aa:	b480      	push	{r7}
 800e2ac:	b083      	sub	sp, #12
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
 800e2b2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800e2b4:	2300      	movs	r3, #0
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	370c      	adds	r7, #12
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c0:	4770      	bx	lr

0800e2c2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e2c2:	b480      	push	{r7}
 800e2c4:	b08b      	sub	sp, #44	; 0x2c
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	60f8      	str	r0, [r7, #12]
 800e2ca:	60b9      	str	r1, [r7, #8]
 800e2cc:	4611      	mov	r1, r2
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	80fb      	strh	r3, [r7, #6]
 800e2d4:	4613      	mov	r3, r2
 800e2d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e2d8:	88bb      	ldrh	r3, [r7, #4]
 800e2da:	3301      	adds	r3, #1
 800e2dc:	085b      	lsrs	r3, r3, #1
 800e2de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e2e8:	88fa      	ldrh	r2, [r7, #6]
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	4413      	add	r3, r2
 800e2ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e2f2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e2f4:	69bb      	ldr	r3, [r7, #24]
 800e2f6:	627b      	str	r3, [r7, #36]	; 0x24
 800e2f8:	e01b      	b.n	800e332 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e300:	69fb      	ldr	r3, [r7, #28]
 800e302:	3301      	adds	r3, #1
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	021b      	lsls	r3, r3, #8
 800e308:	b21a      	sxth	r2, r3
 800e30a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e30e:	4313      	orrs	r3, r2
 800e310:	b21b      	sxth	r3, r3
 800e312:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e314:	6a3b      	ldr	r3, [r7, #32]
 800e316:	8a7a      	ldrh	r2, [r7, #18]
 800e318:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e31a:	6a3b      	ldr	r3, [r7, #32]
 800e31c:	3302      	adds	r3, #2
 800e31e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e320:	69fb      	ldr	r3, [r7, #28]
 800e322:	3301      	adds	r3, #1
 800e324:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e326:	69fb      	ldr	r3, [r7, #28]
 800e328:	3301      	adds	r3, #1
 800e32a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32e:	3b01      	subs	r3, #1
 800e330:	627b      	str	r3, [r7, #36]	; 0x24
 800e332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e334:	2b00      	cmp	r3, #0
 800e336:	d1e0      	bne.n	800e2fa <USB_WritePMA+0x38>
  }
}
 800e338:	bf00      	nop
 800e33a:	bf00      	nop
 800e33c:	372c      	adds	r7, #44	; 0x2c
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr

0800e346 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e346:	b480      	push	{r7}
 800e348:	b08b      	sub	sp, #44	; 0x2c
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	60f8      	str	r0, [r7, #12]
 800e34e:	60b9      	str	r1, [r7, #8]
 800e350:	4611      	mov	r1, r2
 800e352:	461a      	mov	r2, r3
 800e354:	460b      	mov	r3, r1
 800e356:	80fb      	strh	r3, [r7, #6]
 800e358:	4613      	mov	r3, r2
 800e35a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e35c:	88bb      	ldrh	r3, [r7, #4]
 800e35e:	085b      	lsrs	r3, r3, #1
 800e360:	b29b      	uxth	r3, r3
 800e362:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e36c:	88fa      	ldrh	r2, [r7, #6]
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	4413      	add	r3, r2
 800e372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e376:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	627b      	str	r3, [r7, #36]	; 0x24
 800e37c:	e018      	b.n	800e3b0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e37e:	6a3b      	ldr	r3, [r7, #32]
 800e380:	881b      	ldrh	r3, [r3, #0]
 800e382:	b29b      	uxth	r3, r3
 800e384:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e386:	6a3b      	ldr	r3, [r7, #32]
 800e388:	3302      	adds	r3, #2
 800e38a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	b2da      	uxtb	r2, r3
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	3301      	adds	r3, #1
 800e398:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e39a:	693b      	ldr	r3, [r7, #16]
 800e39c:	0a1b      	lsrs	r3, r3, #8
 800e39e:	b2da      	uxtb	r2, r3
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	627b      	str	r3, [r7, #36]	; 0x24
 800e3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d1e3      	bne.n	800e37e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e3b6:	88bb      	ldrh	r3, [r7, #4]
 800e3b8:	f003 0301 	and.w	r3, r3, #1
 800e3bc:	b29b      	uxth	r3, r3
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d007      	beq.n	800e3d2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e3c2:	6a3b      	ldr	r3, [r7, #32]
 800e3c4:	881b      	ldrh	r3, [r3, #0]
 800e3c6:	b29b      	uxth	r3, r3
 800e3c8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	b2da      	uxtb	r2, r3
 800e3ce:	69fb      	ldr	r3, [r7, #28]
 800e3d0:	701a      	strb	r2, [r3, #0]
  }
}
 800e3d2:	bf00      	nop
 800e3d4:	372c      	adds	r7, #44	; 0x2c
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr
	...

0800e3e0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	460b      	mov	r3, r1
 800e3ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800e3ec:	2010      	movs	r0, #16
 800e3ee:	f002 f949 	bl	8010684 <USBD_static_malloc>
 800e3f2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d109      	bne.n	800e40e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	32b0      	adds	r2, #176	; 0xb0
 800e404:	2100      	movs	r1, #0
 800e406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e40a:	2302      	movs	r3, #2
 800e40c:	e048      	b.n	800e4a0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	32b0      	adds	r2, #176	; 0xb0
 800e418:	68f9      	ldr	r1, [r7, #12]
 800e41a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	32b0      	adds	r2, #176	; 0xb0
 800e428:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	7c1b      	ldrb	r3, [r3, #16]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d10d      	bne.n	800e456 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800e43a:	4b1b      	ldr	r3, [pc, #108]	; (800e4a8 <USBD_HID_Init+0xc8>)
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	f003 020f 	and.w	r2, r3, #15
 800e442:	6879      	ldr	r1, [r7, #4]
 800e444:	4613      	mov	r3, r2
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	4413      	add	r3, r2
 800e44a:	009b      	lsls	r3, r3, #2
 800e44c:	440b      	add	r3, r1
 800e44e:	3326      	adds	r3, #38	; 0x26
 800e450:	2207      	movs	r2, #7
 800e452:	801a      	strh	r2, [r3, #0]
 800e454:	e00c      	b.n	800e470 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800e456:	4b14      	ldr	r3, [pc, #80]	; (800e4a8 <USBD_HID_Init+0xc8>)
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	f003 020f 	and.w	r2, r3, #15
 800e45e:	6879      	ldr	r1, [r7, #4]
 800e460:	4613      	mov	r3, r2
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	4413      	add	r3, r2
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	440b      	add	r3, r1
 800e46a:	3326      	adds	r3, #38	; 0x26
 800e46c:	220a      	movs	r2, #10
 800e46e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800e470:	4b0d      	ldr	r3, [pc, #52]	; (800e4a8 <USBD_HID_Init+0xc8>)
 800e472:	7819      	ldrb	r1, [r3, #0]
 800e474:	2304      	movs	r3, #4
 800e476:	2203      	movs	r2, #3
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f001 ff19 	bl	80102b0 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800e47e:	4b0a      	ldr	r3, [pc, #40]	; (800e4a8 <USBD_HID_Init+0xc8>)
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	f003 020f 	and.w	r2, r3, #15
 800e486:	6879      	ldr	r1, [r7, #4]
 800e488:	4613      	mov	r3, r2
 800e48a:	009b      	lsls	r3, r3, #2
 800e48c:	4413      	add	r3, r2
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	440b      	add	r3, r1
 800e492:	3324      	adds	r3, #36	; 0x24
 800e494:	2201      	movs	r2, #1
 800e496:	801a      	strh	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2200      	movs	r2, #0
 800e49c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800e49e:	2300      	movs	r3, #0
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3710      	adds	r7, #16
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}
 800e4a8:	200000df 	.word	0x200000df

0800e4ac <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800e4b8:	4b1f      	ldr	r3, [pc, #124]	; (800e538 <USBD_HID_DeInit+0x8c>)
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	4619      	mov	r1, r3
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f001 ff34 	bl	801032c <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800e4c4:	4b1c      	ldr	r3, [pc, #112]	; (800e538 <USBD_HID_DeInit+0x8c>)
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	f003 020f 	and.w	r2, r3, #15
 800e4cc:	6879      	ldr	r1, [r7, #4]
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	4413      	add	r3, r2
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	440b      	add	r3, r1
 800e4d8:	3324      	adds	r3, #36	; 0x24
 800e4da:	2200      	movs	r2, #0
 800e4dc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800e4de:	4b16      	ldr	r3, [pc, #88]	; (800e538 <USBD_HID_DeInit+0x8c>)
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	f003 020f 	and.w	r2, r3, #15
 800e4e6:	6879      	ldr	r1, [r7, #4]
 800e4e8:	4613      	mov	r3, r2
 800e4ea:	009b      	lsls	r3, r3, #2
 800e4ec:	4413      	add	r3, r2
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	440b      	add	r3, r1
 800e4f2:	3326      	adds	r3, #38	; 0x26
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	32b0      	adds	r2, #176	; 0xb0
 800e502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d011      	beq.n	800e52e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	32b0      	adds	r2, #176	; 0xb0
 800e514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e518:	4618      	mov	r0, r3
 800e51a:	f002 f8c1 	bl	80106a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	32b0      	adds	r2, #176	; 0xb0
 800e528:	2100      	movs	r1, #0
 800e52a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800e52e:	2300      	movs	r3, #0
}
 800e530:	4618      	mov	r0, r3
 800e532:	3708      	adds	r7, #8
 800e534:	46bd      	mov	sp, r7
 800e536:	bd80      	pop	{r7, pc}
 800e538:	200000df 	.word	0x200000df

0800e53c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b086      	sub	sp, #24
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	32b0      	adds	r2, #176	; 0xb0
 800e550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e554:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e556:	2300      	movs	r3, #0
 800e558:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800e55a:	2300      	movs	r3, #0
 800e55c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d101      	bne.n	800e568 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800e564:	2303      	movs	r3, #3
 800e566:	e0e8      	b.n	800e73a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	781b      	ldrb	r3, [r3, #0]
 800e56c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e570:	2b00      	cmp	r3, #0
 800e572:	d046      	beq.n	800e602 <USBD_HID_Setup+0xc6>
 800e574:	2b20      	cmp	r3, #32
 800e576:	f040 80d8 	bne.w	800e72a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	785b      	ldrb	r3, [r3, #1]
 800e57e:	3b02      	subs	r3, #2
 800e580:	2b09      	cmp	r3, #9
 800e582:	d836      	bhi.n	800e5f2 <USBD_HID_Setup+0xb6>
 800e584:	a201      	add	r2, pc, #4	; (adr r2, 800e58c <USBD_HID_Setup+0x50>)
 800e586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e58a:	bf00      	nop
 800e58c:	0800e5e3 	.word	0x0800e5e3
 800e590:	0800e5c3 	.word	0x0800e5c3
 800e594:	0800e5f3 	.word	0x0800e5f3
 800e598:	0800e5f3 	.word	0x0800e5f3
 800e59c:	0800e5f3 	.word	0x0800e5f3
 800e5a0:	0800e5f3 	.word	0x0800e5f3
 800e5a4:	0800e5f3 	.word	0x0800e5f3
 800e5a8:	0800e5f3 	.word	0x0800e5f3
 800e5ac:	0800e5d1 	.word	0x0800e5d1
 800e5b0:	0800e5b5 	.word	0x0800e5b5
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	885b      	ldrh	r3, [r3, #2]
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	601a      	str	r2, [r3, #0]
          break;
 800e5c0:	e01e      	b.n	800e600 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f001 fb73 	bl	800fcb4 <USBD_CtlSendData>
          break;
 800e5ce:	e017      	b.n	800e600 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	885b      	ldrh	r3, [r3, #2]
 800e5d4:	0a1b      	lsrs	r3, r3, #8
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	461a      	mov	r2, r3
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	605a      	str	r2, [r3, #4]
          break;
 800e5e0:	e00e      	b.n	800e600 <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	2201      	movs	r2, #1
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f001 fb62 	bl	800fcb4 <USBD_CtlSendData>
          break;
 800e5f0:	e006      	b.n	800e600 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e5f2:	6839      	ldr	r1, [r7, #0]
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f001 faec 	bl	800fbd2 <USBD_CtlError>
          ret = USBD_FAIL;
 800e5fa:	2303      	movs	r3, #3
 800e5fc:	75fb      	strb	r3, [r7, #23]
          break;
 800e5fe:	bf00      	nop
      }
      break;
 800e600:	e09a      	b.n	800e738 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	785b      	ldrb	r3, [r3, #1]
 800e606:	2b0b      	cmp	r3, #11
 800e608:	f200 8086 	bhi.w	800e718 <USBD_HID_Setup+0x1dc>
 800e60c:	a201      	add	r2, pc, #4	; (adr r2, 800e614 <USBD_HID_Setup+0xd8>)
 800e60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e612:	bf00      	nop
 800e614:	0800e645 	.word	0x0800e645
 800e618:	0800e727 	.word	0x0800e727
 800e61c:	0800e719 	.word	0x0800e719
 800e620:	0800e719 	.word	0x0800e719
 800e624:	0800e719 	.word	0x0800e719
 800e628:	0800e719 	.word	0x0800e719
 800e62c:	0800e66f 	.word	0x0800e66f
 800e630:	0800e719 	.word	0x0800e719
 800e634:	0800e719 	.word	0x0800e719
 800e638:	0800e719 	.word	0x0800e719
 800e63c:	0800e6c7 	.word	0x0800e6c7
 800e640:	0800e6f1 	.word	0x0800e6f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	2b03      	cmp	r3, #3
 800e64e:	d107      	bne.n	800e660 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e650:	f107 030a 	add.w	r3, r7, #10
 800e654:	2202      	movs	r2, #2
 800e656:	4619      	mov	r1, r3
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f001 fb2b 	bl	800fcb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e65e:	e063      	b.n	800e728 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800e660:	6839      	ldr	r1, [r7, #0]
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f001 fab5 	bl	800fbd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e668:	2303      	movs	r3, #3
 800e66a:	75fb      	strb	r3, [r7, #23]
          break;
 800e66c:	e05c      	b.n	800e728 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	885b      	ldrh	r3, [r3, #2]
 800e672:	0a1b      	lsrs	r3, r3, #8
 800e674:	b29b      	uxth	r3, r3
 800e676:	2b22      	cmp	r3, #34	; 0x22
 800e678:	d108      	bne.n	800e68c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	88db      	ldrh	r3, [r3, #6]
 800e67e:	2b3f      	cmp	r3, #63	; 0x3f
 800e680:	bf28      	it	cs
 800e682:	233f      	movcs	r3, #63	; 0x3f
 800e684:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800e686:	4b2f      	ldr	r3, [pc, #188]	; (800e744 <USBD_HID_Setup+0x208>)
 800e688:	613b      	str	r3, [r7, #16]
 800e68a:	e015      	b.n	800e6b8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	885b      	ldrh	r3, [r3, #2]
 800e690:	0a1b      	lsrs	r3, r3, #8
 800e692:	b29b      	uxth	r3, r3
 800e694:	2b21      	cmp	r3, #33	; 0x21
 800e696:	d108      	bne.n	800e6aa <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800e698:	4b2b      	ldr	r3, [pc, #172]	; (800e748 <USBD_HID_Setup+0x20c>)
 800e69a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	88db      	ldrh	r3, [r3, #6]
 800e6a0:	2b09      	cmp	r3, #9
 800e6a2:	bf28      	it	cs
 800e6a4:	2309      	movcs	r3, #9
 800e6a6:	82bb      	strh	r3, [r7, #20]
 800e6a8:	e006      	b.n	800e6b8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800e6aa:	6839      	ldr	r1, [r7, #0]
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f001 fa90 	bl	800fbd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e6b2:	2303      	movs	r3, #3
 800e6b4:	75fb      	strb	r3, [r7, #23]
            break;
 800e6b6:	e037      	b.n	800e728 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800e6b8:	8abb      	ldrh	r3, [r7, #20]
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	6939      	ldr	r1, [r7, #16]
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f001 faf8 	bl	800fcb4 <USBD_CtlSendData>
          break;
 800e6c4:	e030      	b.n	800e728 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6cc:	b2db      	uxtb	r3, r3
 800e6ce:	2b03      	cmp	r3, #3
 800e6d0:	d107      	bne.n	800e6e2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	3308      	adds	r3, #8
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	4619      	mov	r1, r3
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f001 faea 	bl	800fcb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e6e0:	e022      	b.n	800e728 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800e6e2:	6839      	ldr	r1, [r7, #0]
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f001 fa74 	bl	800fbd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e6ea:	2303      	movs	r3, #3
 800e6ec:	75fb      	strb	r3, [r7, #23]
          break;
 800e6ee:	e01b      	b.n	800e728 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	2b03      	cmp	r3, #3
 800e6fa:	d106      	bne.n	800e70a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	885b      	ldrh	r3, [r3, #2]
 800e700:	b2db      	uxtb	r3, r3
 800e702:	461a      	mov	r2, r3
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e708:	e00e      	b.n	800e728 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800e70a:	6839      	ldr	r1, [r7, #0]
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f001 fa60 	bl	800fbd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e712:	2303      	movs	r3, #3
 800e714:	75fb      	strb	r3, [r7, #23]
          break;
 800e716:	e007      	b.n	800e728 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e718:	6839      	ldr	r1, [r7, #0]
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f001 fa59 	bl	800fbd2 <USBD_CtlError>
          ret = USBD_FAIL;
 800e720:	2303      	movs	r3, #3
 800e722:	75fb      	strb	r3, [r7, #23]
          break;
 800e724:	e000      	b.n	800e728 <USBD_HID_Setup+0x1ec>
          break;
 800e726:	bf00      	nop
      }
      break;
 800e728:	e006      	b.n	800e738 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800e72a:	6839      	ldr	r1, [r7, #0]
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f001 fa50 	bl	800fbd2 <USBD_CtlError>
      ret = USBD_FAIL;
 800e732:	2303      	movs	r3, #3
 800e734:	75fb      	strb	r3, [r7, #23]
      break;
 800e736:	bf00      	nop
  }

  return (uint8_t)ret;
 800e738:	7dfb      	ldrb	r3, [r7, #23]
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	3718      	adds	r7, #24
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	200000a0 	.word	0x200000a0
 800e748:	20000088 	.word	0x20000088

0800e74c <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b086      	sub	sp, #24
 800e750:	af00      	add	r7, sp, #0
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	4613      	mov	r3, r2
 800e758:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	32b0      	adds	r2, #176	; 0xb0
 800e764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e768:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d101      	bne.n	800e774 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e770:	2303      	movs	r3, #3
 800e772:	e014      	b.n	800e79e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	2b03      	cmp	r3, #3
 800e77e:	d10d      	bne.n	800e79c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	7b1b      	ldrb	r3, [r3, #12]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d109      	bne.n	800e79c <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	2201      	movs	r2, #1
 800e78c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800e78e:	4b06      	ldr	r3, [pc, #24]	; (800e7a8 <USBD_HID_SendReport+0x5c>)
 800e790:	7819      	ldrb	r1, [r3, #0]
 800e792:	88fb      	ldrh	r3, [r7, #6]
 800e794:	68ba      	ldr	r2, [r7, #8]
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	f001 fece 	bl	8010538 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800e79c:	2300      	movs	r3, #0
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3718      	adds	r7, #24
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	200000df 	.word	0x200000df

0800e7ac <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800e7b4:	2181      	movs	r1, #129	; 0x81
 800e7b6:	4809      	ldr	r0, [pc, #36]	; (800e7dc <USBD_HID_GetFSCfgDesc+0x30>)
 800e7b8:	f000 fba9 	bl	800ef0e <USBD_GetEpDesc>
 800e7bc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d002      	beq.n	800e7ca <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	220a      	movs	r2, #10
 800e7c8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2222      	movs	r2, #34	; 0x22
 800e7ce:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800e7d0:	4b02      	ldr	r3, [pc, #8]	; (800e7dc <USBD_HID_GetFSCfgDesc+0x30>)
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
 800e7da:	bf00      	nop
 800e7dc:	20000064 	.word	0x20000064

0800e7e0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800e7e8:	2181      	movs	r1, #129	; 0x81
 800e7ea:	4809      	ldr	r0, [pc, #36]	; (800e810 <USBD_HID_GetHSCfgDesc+0x30>)
 800e7ec:	f000 fb8f 	bl	800ef0e <USBD_GetEpDesc>
 800e7f0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d002      	beq.n	800e7fe <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2207      	movs	r2, #7
 800e7fc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2222      	movs	r2, #34	; 0x22
 800e802:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800e804:	4b02      	ldr	r3, [pc, #8]	; (800e810 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800e806:	4618      	mov	r0, r3
 800e808:	3710      	adds	r7, #16
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop
 800e810:	20000064 	.word	0x20000064

0800e814 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800e81c:	2181      	movs	r1, #129	; 0x81
 800e81e:	4809      	ldr	r0, [pc, #36]	; (800e844 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800e820:	f000 fb75 	bl	800ef0e <USBD_GetEpDesc>
 800e824:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d002      	beq.n	800e832 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	220a      	movs	r2, #10
 800e830:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2222      	movs	r2, #34	; 0x22
 800e836:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800e838:	4b02      	ldr	r3, [pc, #8]	; (800e844 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	20000064 	.word	0x20000064

0800e848 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e848:	b480      	push	{r7}
 800e84a:	b083      	sub	sp, #12
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	460b      	mov	r3, r1
 800e852:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	32b0      	adds	r2, #176	; 0xb0
 800e85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e862:	2200      	movs	r2, #0
 800e864:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800e866:	2300      	movs	r3, #0
}
 800e868:	4618      	mov	r0, r3
 800e86a:	370c      	adds	r7, #12
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr

0800e874 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	220a      	movs	r2, #10
 800e880:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800e882:	4b03      	ldr	r3, [pc, #12]	; (800e890 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800e884:	4618      	mov	r0, r3
 800e886:	370c      	adds	r7, #12
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr
 800e890:	20000094 	.word	0x20000094

0800e894 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	4613      	mov	r3, r2
 800e8a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d101      	bne.n	800e8ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e8a8:	2303      	movs	r3, #3
 800e8aa:	e01f      	b.n	800e8ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d003      	beq.n	800e8d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	68ba      	ldr	r2, [r7, #8]
 800e8ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	79fa      	ldrb	r2, [r7, #7]
 800e8de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e8e0:	68f8      	ldr	r0, [r7, #12]
 800e8e2:	f001 fc63 	bl	80101ac <USBD_LL_Init>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e8ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3718      	adds	r7, #24
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e8fe:	2300      	movs	r3, #0
 800e900:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d101      	bne.n	800e90c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e908:	2303      	movs	r3, #3
 800e90a:	e025      	b.n	800e958 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	683a      	ldr	r2, [r7, #0]
 800e910:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	32ae      	adds	r2, #174	; 0xae
 800e91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e924:	2b00      	cmp	r3, #0
 800e926:	d00f      	beq.n	800e948 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	32ae      	adds	r2, #174	; 0xae
 800e932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e938:	f107 020e 	add.w	r2, r7, #14
 800e93c:	4610      	mov	r0, r2
 800e93e:	4798      	blx	r3
 800e940:	4602      	mov	r2, r0
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e94e:	1c5a      	adds	r2, r3, #1
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e956:	2300      	movs	r3, #0
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3710      	adds	r7, #16
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f001 fc6f 	bl	801024c <USBD_LL_Start>
 800e96e:	4603      	mov	r3, r0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3708      	adds	r7, #8
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e980:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e982:	4618      	mov	r0, r3
 800e984:	370c      	adds	r7, #12
 800e986:	46bd      	mov	sp, r7
 800e988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98c:	4770      	bx	lr

0800e98e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e98e:	b580      	push	{r7, lr}
 800e990:	b084      	sub	sp, #16
 800e992:	af00      	add	r7, sp, #0
 800e994:	6078      	str	r0, [r7, #4]
 800e996:	460b      	mov	r3, r1
 800e998:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e99a:	2300      	movs	r3, #0
 800e99c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d009      	beq.n	800e9bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	78fa      	ldrb	r2, [r7, #3]
 800e9b2:	4611      	mov	r1, r2
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	4798      	blx	r3
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3710      	adds	r7, #16
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}

0800e9c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e9c6:	b580      	push	{r7, lr}
 800e9c8:	b084      	sub	sp, #16
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
 800e9ce:	460b      	mov	r3, r1
 800e9d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	78fa      	ldrb	r2, [r7, #3]
 800e9e0:	4611      	mov	r1, r2
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	4798      	blx	r3
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d001      	beq.n	800e9f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e9ec:	2303      	movs	r3, #3
 800e9ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b084      	sub	sp, #16
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
 800ea02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea0a:	6839      	ldr	r1, [r7, #0]
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f001 f8a6 	bl	800fb5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2201      	movs	r2, #1
 800ea16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ea20:	461a      	mov	r2, r3
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ea2e:	f003 031f 	and.w	r3, r3, #31
 800ea32:	2b02      	cmp	r3, #2
 800ea34:	d01a      	beq.n	800ea6c <USBD_LL_SetupStage+0x72>
 800ea36:	2b02      	cmp	r3, #2
 800ea38:	d822      	bhi.n	800ea80 <USBD_LL_SetupStage+0x86>
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d002      	beq.n	800ea44 <USBD_LL_SetupStage+0x4a>
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d00a      	beq.n	800ea58 <USBD_LL_SetupStage+0x5e>
 800ea42:	e01d      	b.n	800ea80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f000 fad3 	bl	800eff8 <USBD_StdDevReq>
 800ea52:	4603      	mov	r3, r0
 800ea54:	73fb      	strb	r3, [r7, #15]
      break;
 800ea56:	e020      	b.n	800ea9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea5e:	4619      	mov	r1, r3
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f000 fb3b 	bl	800f0dc <USBD_StdItfReq>
 800ea66:	4603      	mov	r3, r0
 800ea68:	73fb      	strb	r3, [r7, #15]
      break;
 800ea6a:	e016      	b.n	800ea9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea72:	4619      	mov	r1, r3
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 fb9d 	bl	800f1b4 <USBD_StdEPReq>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	73fb      	strb	r3, [r7, #15]
      break;
 800ea7e:	e00c      	b.n	800ea9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ea86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f001 fc82 	bl	8010398 <USBD_LL_StallEP>
 800ea94:	4603      	mov	r3, r0
 800ea96:	73fb      	strb	r3, [r7, #15]
      break;
 800ea98:	bf00      	nop
  }

  return ret;
 800ea9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b086      	sub	sp, #24
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	460b      	mov	r3, r1
 800eaae:	607a      	str	r2, [r7, #4]
 800eab0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800eab2:	2300      	movs	r3, #0
 800eab4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800eab6:	7afb      	ldrb	r3, [r7, #11]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d16e      	bne.n	800eb9a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800eac2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eaca:	2b03      	cmp	r3, #3
 800eacc:	f040 8098 	bne.w	800ec00 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	689a      	ldr	r2, [r3, #8]
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	68db      	ldr	r3, [r3, #12]
 800ead8:	429a      	cmp	r2, r3
 800eada:	d913      	bls.n	800eb04 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	689a      	ldr	r2, [r3, #8]
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	1ad2      	subs	r2, r2, r3
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	68da      	ldr	r2, [r3, #12]
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	689b      	ldr	r3, [r3, #8]
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	bf28      	it	cs
 800eaf6:	4613      	movcs	r3, r2
 800eaf8:	461a      	mov	r2, r3
 800eafa:	6879      	ldr	r1, [r7, #4]
 800eafc:	68f8      	ldr	r0, [r7, #12]
 800eafe:	f001 f905 	bl	800fd0c <USBD_CtlContinueRx>
 800eb02:	e07d      	b.n	800ec00 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eb0a:	f003 031f 	and.w	r3, r3, #31
 800eb0e:	2b02      	cmp	r3, #2
 800eb10:	d014      	beq.n	800eb3c <USBD_LL_DataOutStage+0x98>
 800eb12:	2b02      	cmp	r3, #2
 800eb14:	d81d      	bhi.n	800eb52 <USBD_LL_DataOutStage+0xae>
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d002      	beq.n	800eb20 <USBD_LL_DataOutStage+0x7c>
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d003      	beq.n	800eb26 <USBD_LL_DataOutStage+0x82>
 800eb1e:	e018      	b.n	800eb52 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800eb20:	2300      	movs	r3, #0
 800eb22:	75bb      	strb	r3, [r7, #22]
            break;
 800eb24:	e018      	b.n	800eb58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	4619      	mov	r1, r3
 800eb30:	68f8      	ldr	r0, [r7, #12]
 800eb32:	f000 f9d2 	bl	800eeda <USBD_CoreFindIF>
 800eb36:	4603      	mov	r3, r0
 800eb38:	75bb      	strb	r3, [r7, #22]
            break;
 800eb3a:	e00d      	b.n	800eb58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	4619      	mov	r1, r3
 800eb46:	68f8      	ldr	r0, [r7, #12]
 800eb48:	f000 f9d4 	bl	800eef4 <USBD_CoreFindEP>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	75bb      	strb	r3, [r7, #22]
            break;
 800eb50:	e002      	b.n	800eb58 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800eb52:	2300      	movs	r3, #0
 800eb54:	75bb      	strb	r3, [r7, #22]
            break;
 800eb56:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800eb58:	7dbb      	ldrb	r3, [r7, #22]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d119      	bne.n	800eb92 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	2b03      	cmp	r3, #3
 800eb68:	d113      	bne.n	800eb92 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800eb6a:	7dba      	ldrb	r2, [r7, #22]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	32ae      	adds	r2, #174	; 0xae
 800eb70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb74:	691b      	ldr	r3, [r3, #16]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00b      	beq.n	800eb92 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800eb7a:	7dba      	ldrb	r2, [r7, #22]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800eb82:	7dba      	ldrb	r2, [r7, #22]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	32ae      	adds	r2, #174	; 0xae
 800eb88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb8c:	691b      	ldr	r3, [r3, #16]
 800eb8e:	68f8      	ldr	r0, [r7, #12]
 800eb90:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800eb92:	68f8      	ldr	r0, [r7, #12]
 800eb94:	f001 f8cb 	bl	800fd2e <USBD_CtlSendStatus>
 800eb98:	e032      	b.n	800ec00 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800eb9a:	7afb      	ldrb	r3, [r7, #11]
 800eb9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	4619      	mov	r1, r3
 800eba4:	68f8      	ldr	r0, [r7, #12]
 800eba6:	f000 f9a5 	bl	800eef4 <USBD_CoreFindEP>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ebae:	7dbb      	ldrb	r3, [r7, #22]
 800ebb0:	2bff      	cmp	r3, #255	; 0xff
 800ebb2:	d025      	beq.n	800ec00 <USBD_LL_DataOutStage+0x15c>
 800ebb4:	7dbb      	ldrb	r3, [r7, #22]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d122      	bne.n	800ec00 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	2b03      	cmp	r3, #3
 800ebc4:	d117      	bne.n	800ebf6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ebc6:	7dba      	ldrb	r2, [r7, #22]
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	32ae      	adds	r2, #174	; 0xae
 800ebcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebd0:	699b      	ldr	r3, [r3, #24]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d00f      	beq.n	800ebf6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ebd6:	7dba      	ldrb	r2, [r7, #22]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ebde:	7dba      	ldrb	r2, [r7, #22]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	32ae      	adds	r2, #174	; 0xae
 800ebe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebe8:	699b      	ldr	r3, [r3, #24]
 800ebea:	7afa      	ldrb	r2, [r7, #11]
 800ebec:	4611      	mov	r1, r2
 800ebee:	68f8      	ldr	r0, [r7, #12]
 800ebf0:	4798      	blx	r3
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ebf6:	7dfb      	ldrb	r3, [r7, #23]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d001      	beq.n	800ec00 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ebfc:	7dfb      	ldrb	r3, [r7, #23]
 800ebfe:	e000      	b.n	800ec02 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ec00:	2300      	movs	r3, #0
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3718      	adds	r7, #24
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}

0800ec0a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ec0a:	b580      	push	{r7, lr}
 800ec0c:	b086      	sub	sp, #24
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	60f8      	str	r0, [r7, #12]
 800ec12:	460b      	mov	r3, r1
 800ec14:	607a      	str	r2, [r7, #4]
 800ec16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ec18:	7afb      	ldrb	r3, [r7, #11]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d16f      	bne.n	800ecfe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	3314      	adds	r3, #20
 800ec22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ec2a:	2b02      	cmp	r3, #2
 800ec2c:	d15a      	bne.n	800ece4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	689a      	ldr	r2, [r3, #8]
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d914      	bls.n	800ec64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	689a      	ldr	r2, [r3, #8]
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	1ad2      	subs	r2, r2, r3
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	6879      	ldr	r1, [r7, #4]
 800ec50:	68f8      	ldr	r0, [r7, #12]
 800ec52:	f001 f84a 	bl	800fcea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec56:	2300      	movs	r3, #0
 800ec58:	2200      	movs	r2, #0
 800ec5a:	2100      	movs	r1, #0
 800ec5c:	68f8      	ldr	r0, [r7, #12]
 800ec5e:	f001 fca3 	bl	80105a8 <USBD_LL_PrepareReceive>
 800ec62:	e03f      	b.n	800ece4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	68da      	ldr	r2, [r3, #12]
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	689b      	ldr	r3, [r3, #8]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d11c      	bne.n	800ecaa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	685a      	ldr	r2, [r3, #4]
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d316      	bcc.n	800ecaa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	685a      	ldr	r2, [r3, #4]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d20f      	bcs.n	800ecaa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	68f8      	ldr	r0, [r7, #12]
 800ec90:	f001 f82b 	bl	800fcea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	2200      	movs	r2, #0
 800ec98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	2200      	movs	r2, #0
 800eca0:	2100      	movs	r1, #0
 800eca2:	68f8      	ldr	r0, [r7, #12]
 800eca4:	f001 fc80 	bl	80105a8 <USBD_LL_PrepareReceive>
 800eca8:	e01c      	b.n	800ece4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	2b03      	cmp	r3, #3
 800ecb4:	d10f      	bne.n	800ecd6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecbc:	68db      	ldr	r3, [r3, #12]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d009      	beq.n	800ecd6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecd0:	68db      	ldr	r3, [r3, #12]
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ecd6:	2180      	movs	r1, #128	; 0x80
 800ecd8:	68f8      	ldr	r0, [r7, #12]
 800ecda:	f001 fb5d 	bl	8010398 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ecde:	68f8      	ldr	r0, [r7, #12]
 800ece0:	f001 f838 	bl	800fd54 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d03a      	beq.n	800ed64 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ecee:	68f8      	ldr	r0, [r7, #12]
 800ecf0:	f7ff fe42 	bl	800e978 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ecfc:	e032      	b.n	800ed64 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ecfe:	7afb      	ldrb	r3, [r7, #11]
 800ed00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	4619      	mov	r1, r3
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f000 f8f3 	bl	800eef4 <USBD_CoreFindEP>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ed12:	7dfb      	ldrb	r3, [r7, #23]
 800ed14:	2bff      	cmp	r3, #255	; 0xff
 800ed16:	d025      	beq.n	800ed64 <USBD_LL_DataInStage+0x15a>
 800ed18:	7dfb      	ldrb	r3, [r7, #23]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d122      	bne.n	800ed64 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	2b03      	cmp	r3, #3
 800ed28:	d11c      	bne.n	800ed64 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ed2a:	7dfa      	ldrb	r2, [r7, #23]
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	32ae      	adds	r2, #174	; 0xae
 800ed30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed34:	695b      	ldr	r3, [r3, #20]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d014      	beq.n	800ed64 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ed3a:	7dfa      	ldrb	r2, [r7, #23]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ed42:	7dfa      	ldrb	r2, [r7, #23]
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	32ae      	adds	r2, #174	; 0xae
 800ed48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed4c:	695b      	ldr	r3, [r3, #20]
 800ed4e:	7afa      	ldrb	r2, [r7, #11]
 800ed50:	4611      	mov	r1, r2
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	4798      	blx	r3
 800ed56:	4603      	mov	r3, r0
 800ed58:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ed5a:	7dbb      	ldrb	r3, [r7, #22]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d001      	beq.n	800ed64 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ed60:	7dbb      	ldrb	r3, [r7, #22]
 800ed62:	e000      	b.n	800ed66 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ed64:	2300      	movs	r3, #0
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3718      	adds	r7, #24
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}

0800ed6e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ed6e:	b580      	push	{r7, lr}
 800ed70:	b084      	sub	sp, #16
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed76:	2300      	movs	r3, #0
 800ed78:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2200      	movs	r2, #0
 800ed94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d014      	beq.n	800edd4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d00e      	beq.n	800edd4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	687a      	ldr	r2, [r7, #4]
 800edc0:	6852      	ldr	r2, [r2, #4]
 800edc2:	b2d2      	uxtb	r2, r2
 800edc4:	4611      	mov	r1, r2
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	4798      	blx	r3
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d001      	beq.n	800edd4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800edd0:	2303      	movs	r3, #3
 800edd2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800edd4:	2340      	movs	r3, #64	; 0x40
 800edd6:	2200      	movs	r2, #0
 800edd8:	2100      	movs	r1, #0
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f001 fa68 	bl	80102b0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2240      	movs	r2, #64	; 0x40
 800edec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800edf0:	2340      	movs	r3, #64	; 0x40
 800edf2:	2200      	movs	r2, #0
 800edf4:	2180      	movs	r1, #128	; 0x80
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f001 fa5a 	bl	80102b0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2201      	movs	r2, #1
 800ee00:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2240      	movs	r2, #64	; 0x40
 800ee06:	621a      	str	r2, [r3, #32]

  return ret;
 800ee08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}

0800ee12 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ee12:	b480      	push	{r7}
 800ee14:	b083      	sub	sp, #12
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	78fa      	ldrb	r2, [r7, #3]
 800ee22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	370c      	adds	r7, #12
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr

0800ee32 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ee32:	b480      	push	{r7}
 800ee34:	b083      	sub	sp, #12
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	2b04      	cmp	r3, #4
 800ee44:	d006      	beq.n	800ee54 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee4c:	b2da      	uxtb	r2, r3
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2204      	movs	r2, #4
 800ee58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ee5c:	2300      	movs	r3, #0
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	370c      	adds	r7, #12
 800ee62:	46bd      	mov	sp, r7
 800ee64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee68:	4770      	bx	lr

0800ee6a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ee6a:	b480      	push	{r7}
 800ee6c:	b083      	sub	sp, #12
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee78:	b2db      	uxtb	r3, r3
 800ee7a:	2b04      	cmp	r3, #4
 800ee7c:	d106      	bne.n	800ee8c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ee84:	b2da      	uxtb	r2, r3
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ee8c:	2300      	movs	r3, #0
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	370c      	adds	r7, #12
 800ee92:	46bd      	mov	sp, r7
 800ee94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee98:	4770      	bx	lr

0800ee9a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ee9a:	b580      	push	{r7, lr}
 800ee9c:	b082      	sub	sp, #8
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eea8:	b2db      	uxtb	r3, r3
 800eeaa:	2b03      	cmp	r3, #3
 800eeac:	d110      	bne.n	800eed0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d00b      	beq.n	800eed0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eebe:	69db      	ldr	r3, [r3, #28]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d005      	beq.n	800eed0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeca:	69db      	ldr	r3, [r3, #28]
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800eed0:	2300      	movs	r3, #0
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3708      	adds	r7, #8
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800eeda:	b480      	push	{r7}
 800eedc:	b083      	sub	sp, #12
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
 800eee2:	460b      	mov	r3, r1
 800eee4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800eee6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	370c      	adds	r7, #12
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr

0800eef4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b083      	sub	sp, #12
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	460b      	mov	r3, r1
 800eefe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ef00:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	370c      	adds	r7, #12
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr

0800ef0e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b086      	sub	sp, #24
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
 800ef16:	460b      	mov	r3, r1
 800ef18:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ef22:	2300      	movs	r3, #0
 800ef24:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	885b      	ldrh	r3, [r3, #2]
 800ef2a:	b29a      	uxth	r2, r3
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	b29b      	uxth	r3, r3
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d920      	bls.n	800ef78 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	b29b      	uxth	r3, r3
 800ef3c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ef3e:	e013      	b.n	800ef68 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ef40:	f107 030a 	add.w	r3, r7, #10
 800ef44:	4619      	mov	r1, r3
 800ef46:	6978      	ldr	r0, [r7, #20]
 800ef48:	f000 f81b 	bl	800ef82 <USBD_GetNextDesc>
 800ef4c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	785b      	ldrb	r3, [r3, #1]
 800ef52:	2b05      	cmp	r3, #5
 800ef54:	d108      	bne.n	800ef68 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	789b      	ldrb	r3, [r3, #2]
 800ef5e:	78fa      	ldrb	r2, [r7, #3]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d008      	beq.n	800ef76 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ef64:	2300      	movs	r3, #0
 800ef66:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	885b      	ldrh	r3, [r3, #2]
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	897b      	ldrh	r3, [r7, #10]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d8e5      	bhi.n	800ef40 <USBD_GetEpDesc+0x32>
 800ef74:	e000      	b.n	800ef78 <USBD_GetEpDesc+0x6a>
          break;
 800ef76:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ef78:	693b      	ldr	r3, [r7, #16]
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3718      	adds	r7, #24
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}

0800ef82 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ef82:	b480      	push	{r7}
 800ef84:	b085      	sub	sp, #20
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	6078      	str	r0, [r7, #4]
 800ef8a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	881a      	ldrh	r2, [r3, #0]
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	4413      	add	r3, r2
 800ef9c:	b29a      	uxth	r2, r3
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	461a      	mov	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	4413      	add	r3, r2
 800efac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800efae:	68fb      	ldr	r3, [r7, #12]
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3714      	adds	r7, #20
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr

0800efbc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b087      	sub	sp, #28
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	3301      	adds	r3, #1
 800efd2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	781b      	ldrb	r3, [r3, #0]
 800efd8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800efda:	8a3b      	ldrh	r3, [r7, #16]
 800efdc:	021b      	lsls	r3, r3, #8
 800efde:	b21a      	sxth	r2, r3
 800efe0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800efe4:	4313      	orrs	r3, r2
 800efe6:	b21b      	sxth	r3, r3
 800efe8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800efea:	89fb      	ldrh	r3, [r7, #14]
}
 800efec:	4618      	mov	r0, r3
 800efee:	371c      	adds	r7, #28
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr

0800eff8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f002:	2300      	movs	r3, #0
 800f004:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f00e:	2b40      	cmp	r3, #64	; 0x40
 800f010:	d005      	beq.n	800f01e <USBD_StdDevReq+0x26>
 800f012:	2b40      	cmp	r3, #64	; 0x40
 800f014:	d857      	bhi.n	800f0c6 <USBD_StdDevReq+0xce>
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00f      	beq.n	800f03a <USBD_StdDevReq+0x42>
 800f01a:	2b20      	cmp	r3, #32
 800f01c:	d153      	bne.n	800f0c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	32ae      	adds	r2, #174	; 0xae
 800f028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f02c:	689b      	ldr	r3, [r3, #8]
 800f02e:	6839      	ldr	r1, [r7, #0]
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	4798      	blx	r3
 800f034:	4603      	mov	r3, r0
 800f036:	73fb      	strb	r3, [r7, #15]
      break;
 800f038:	e04a      	b.n	800f0d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	785b      	ldrb	r3, [r3, #1]
 800f03e:	2b09      	cmp	r3, #9
 800f040:	d83b      	bhi.n	800f0ba <USBD_StdDevReq+0xc2>
 800f042:	a201      	add	r2, pc, #4	; (adr r2, 800f048 <USBD_StdDevReq+0x50>)
 800f044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f048:	0800f09d 	.word	0x0800f09d
 800f04c:	0800f0b1 	.word	0x0800f0b1
 800f050:	0800f0bb 	.word	0x0800f0bb
 800f054:	0800f0a7 	.word	0x0800f0a7
 800f058:	0800f0bb 	.word	0x0800f0bb
 800f05c:	0800f07b 	.word	0x0800f07b
 800f060:	0800f071 	.word	0x0800f071
 800f064:	0800f0bb 	.word	0x0800f0bb
 800f068:	0800f093 	.word	0x0800f093
 800f06c:	0800f085 	.word	0x0800f085
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f070:	6839      	ldr	r1, [r7, #0]
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 fa3c 	bl	800f4f0 <USBD_GetDescriptor>
          break;
 800f078:	e024      	b.n	800f0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f07a:	6839      	ldr	r1, [r7, #0]
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f000 fbcb 	bl	800f818 <USBD_SetAddress>
          break;
 800f082:	e01f      	b.n	800f0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f084:	6839      	ldr	r1, [r7, #0]
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f000 fc0a 	bl	800f8a0 <USBD_SetConfig>
 800f08c:	4603      	mov	r3, r0
 800f08e:	73fb      	strb	r3, [r7, #15]
          break;
 800f090:	e018      	b.n	800f0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f092:	6839      	ldr	r1, [r7, #0]
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f000 fcad 	bl	800f9f4 <USBD_GetConfig>
          break;
 800f09a:	e013      	b.n	800f0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f09c:	6839      	ldr	r1, [r7, #0]
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f000 fcde 	bl	800fa60 <USBD_GetStatus>
          break;
 800f0a4:	e00e      	b.n	800f0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f0a6:	6839      	ldr	r1, [r7, #0]
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f000 fd0d 	bl	800fac8 <USBD_SetFeature>
          break;
 800f0ae:	e009      	b.n	800f0c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f0b0:	6839      	ldr	r1, [r7, #0]
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f000 fd31 	bl	800fb1a <USBD_ClrFeature>
          break;
 800f0b8:	e004      	b.n	800f0c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f0ba:	6839      	ldr	r1, [r7, #0]
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f000 fd88 	bl	800fbd2 <USBD_CtlError>
          break;
 800f0c2:	bf00      	nop
      }
      break;
 800f0c4:	e004      	b.n	800f0d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f0c6:	6839      	ldr	r1, [r7, #0]
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 fd82 	bl	800fbd2 <USBD_CtlError>
      break;
 800f0ce:	bf00      	nop
  }

  return ret;
 800f0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3710      	adds	r7, #16
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop

0800f0dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	781b      	ldrb	r3, [r3, #0]
 800f0ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f0f2:	2b40      	cmp	r3, #64	; 0x40
 800f0f4:	d005      	beq.n	800f102 <USBD_StdItfReq+0x26>
 800f0f6:	2b40      	cmp	r3, #64	; 0x40
 800f0f8:	d852      	bhi.n	800f1a0 <USBD_StdItfReq+0xc4>
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d001      	beq.n	800f102 <USBD_StdItfReq+0x26>
 800f0fe:	2b20      	cmp	r3, #32
 800f100:	d14e      	bne.n	800f1a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	3b01      	subs	r3, #1
 800f10c:	2b02      	cmp	r3, #2
 800f10e:	d840      	bhi.n	800f192 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	889b      	ldrh	r3, [r3, #4]
 800f114:	b2db      	uxtb	r3, r3
 800f116:	2b01      	cmp	r3, #1
 800f118:	d836      	bhi.n	800f188 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	889b      	ldrh	r3, [r3, #4]
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	4619      	mov	r1, r3
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f7ff fed9 	bl	800eeda <USBD_CoreFindIF>
 800f128:	4603      	mov	r3, r0
 800f12a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f12c:	7bbb      	ldrb	r3, [r7, #14]
 800f12e:	2bff      	cmp	r3, #255	; 0xff
 800f130:	d01d      	beq.n	800f16e <USBD_StdItfReq+0x92>
 800f132:	7bbb      	ldrb	r3, [r7, #14]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d11a      	bne.n	800f16e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f138:	7bba      	ldrb	r2, [r7, #14]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	32ae      	adds	r2, #174	; 0xae
 800f13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f142:	689b      	ldr	r3, [r3, #8]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d00f      	beq.n	800f168 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f148:	7bba      	ldrb	r2, [r7, #14]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f150:	7bba      	ldrb	r2, [r7, #14]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	32ae      	adds	r2, #174	; 0xae
 800f156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f15a:	689b      	ldr	r3, [r3, #8]
 800f15c:	6839      	ldr	r1, [r7, #0]
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	4798      	blx	r3
 800f162:	4603      	mov	r3, r0
 800f164:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f166:	e004      	b.n	800f172 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f168:	2303      	movs	r3, #3
 800f16a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f16c:	e001      	b.n	800f172 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f16e:	2303      	movs	r3, #3
 800f170:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	88db      	ldrh	r3, [r3, #6]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d110      	bne.n	800f19c <USBD_StdItfReq+0xc0>
 800f17a:	7bfb      	ldrb	r3, [r7, #15]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d10d      	bne.n	800f19c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f000 fdd4 	bl	800fd2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f186:	e009      	b.n	800f19c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f188:	6839      	ldr	r1, [r7, #0]
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f000 fd21 	bl	800fbd2 <USBD_CtlError>
          break;
 800f190:	e004      	b.n	800f19c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f192:	6839      	ldr	r1, [r7, #0]
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f000 fd1c 	bl	800fbd2 <USBD_CtlError>
          break;
 800f19a:	e000      	b.n	800f19e <USBD_StdItfReq+0xc2>
          break;
 800f19c:	bf00      	nop
      }
      break;
 800f19e:	e004      	b.n	800f1aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f1a0:	6839      	ldr	r1, [r7, #0]
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f000 fd15 	bl	800fbd2 <USBD_CtlError>
      break;
 800f1a8:	bf00      	nop
  }

  return ret;
 800f1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3710      	adds	r7, #16
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	889b      	ldrh	r3, [r3, #4]
 800f1c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f1d0:	2b40      	cmp	r3, #64	; 0x40
 800f1d2:	d007      	beq.n	800f1e4 <USBD_StdEPReq+0x30>
 800f1d4:	2b40      	cmp	r3, #64	; 0x40
 800f1d6:	f200 817f 	bhi.w	800f4d8 <USBD_StdEPReq+0x324>
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d02a      	beq.n	800f234 <USBD_StdEPReq+0x80>
 800f1de:	2b20      	cmp	r3, #32
 800f1e0:	f040 817a 	bne.w	800f4d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f1e4:	7bbb      	ldrb	r3, [r7, #14]
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f7ff fe83 	bl	800eef4 <USBD_CoreFindEP>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f1f2:	7b7b      	ldrb	r3, [r7, #13]
 800f1f4:	2bff      	cmp	r3, #255	; 0xff
 800f1f6:	f000 8174 	beq.w	800f4e2 <USBD_StdEPReq+0x32e>
 800f1fa:	7b7b      	ldrb	r3, [r7, #13]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	f040 8170 	bne.w	800f4e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f202:	7b7a      	ldrb	r2, [r7, #13]
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f20a:	7b7a      	ldrb	r2, [r7, #13]
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	32ae      	adds	r2, #174	; 0xae
 800f210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f214:	689b      	ldr	r3, [r3, #8]
 800f216:	2b00      	cmp	r3, #0
 800f218:	f000 8163 	beq.w	800f4e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f21c:	7b7a      	ldrb	r2, [r7, #13]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	32ae      	adds	r2, #174	; 0xae
 800f222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f226:	689b      	ldr	r3, [r3, #8]
 800f228:	6839      	ldr	r1, [r7, #0]
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	4798      	blx	r3
 800f22e:	4603      	mov	r3, r0
 800f230:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f232:	e156      	b.n	800f4e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	785b      	ldrb	r3, [r3, #1]
 800f238:	2b03      	cmp	r3, #3
 800f23a:	d008      	beq.n	800f24e <USBD_StdEPReq+0x9a>
 800f23c:	2b03      	cmp	r3, #3
 800f23e:	f300 8145 	bgt.w	800f4cc <USBD_StdEPReq+0x318>
 800f242:	2b00      	cmp	r3, #0
 800f244:	f000 809b 	beq.w	800f37e <USBD_StdEPReq+0x1ca>
 800f248:	2b01      	cmp	r3, #1
 800f24a:	d03c      	beq.n	800f2c6 <USBD_StdEPReq+0x112>
 800f24c:	e13e      	b.n	800f4cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f254:	b2db      	uxtb	r3, r3
 800f256:	2b02      	cmp	r3, #2
 800f258:	d002      	beq.n	800f260 <USBD_StdEPReq+0xac>
 800f25a:	2b03      	cmp	r3, #3
 800f25c:	d016      	beq.n	800f28c <USBD_StdEPReq+0xd8>
 800f25e:	e02c      	b.n	800f2ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f260:	7bbb      	ldrb	r3, [r7, #14]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d00d      	beq.n	800f282 <USBD_StdEPReq+0xce>
 800f266:	7bbb      	ldrb	r3, [r7, #14]
 800f268:	2b80      	cmp	r3, #128	; 0x80
 800f26a:	d00a      	beq.n	800f282 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f26c:	7bbb      	ldrb	r3, [r7, #14]
 800f26e:	4619      	mov	r1, r3
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f001 f891 	bl	8010398 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f276:	2180      	movs	r1, #128	; 0x80
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f001 f88d 	bl	8010398 <USBD_LL_StallEP>
 800f27e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f280:	e020      	b.n	800f2c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f282:	6839      	ldr	r1, [r7, #0]
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f000 fca4 	bl	800fbd2 <USBD_CtlError>
              break;
 800f28a:	e01b      	b.n	800f2c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	885b      	ldrh	r3, [r3, #2]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d10e      	bne.n	800f2b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f294:	7bbb      	ldrb	r3, [r7, #14]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d00b      	beq.n	800f2b2 <USBD_StdEPReq+0xfe>
 800f29a:	7bbb      	ldrb	r3, [r7, #14]
 800f29c:	2b80      	cmp	r3, #128	; 0x80
 800f29e:	d008      	beq.n	800f2b2 <USBD_StdEPReq+0xfe>
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	88db      	ldrh	r3, [r3, #6]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d104      	bne.n	800f2b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2a8:	7bbb      	ldrb	r3, [r7, #14]
 800f2aa:	4619      	mov	r1, r3
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f001 f873 	bl	8010398 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f000 fd3b 	bl	800fd2e <USBD_CtlSendStatus>

              break;
 800f2b8:	e004      	b.n	800f2c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f2ba:	6839      	ldr	r1, [r7, #0]
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 fc88 	bl	800fbd2 <USBD_CtlError>
              break;
 800f2c2:	bf00      	nop
          }
          break;
 800f2c4:	e107      	b.n	800f4d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	2b02      	cmp	r3, #2
 800f2d0:	d002      	beq.n	800f2d8 <USBD_StdEPReq+0x124>
 800f2d2:	2b03      	cmp	r3, #3
 800f2d4:	d016      	beq.n	800f304 <USBD_StdEPReq+0x150>
 800f2d6:	e04b      	b.n	800f370 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f2d8:	7bbb      	ldrb	r3, [r7, #14]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d00d      	beq.n	800f2fa <USBD_StdEPReq+0x146>
 800f2de:	7bbb      	ldrb	r3, [r7, #14]
 800f2e0:	2b80      	cmp	r3, #128	; 0x80
 800f2e2:	d00a      	beq.n	800f2fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f2e4:	7bbb      	ldrb	r3, [r7, #14]
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f001 f855 	bl	8010398 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f2ee:	2180      	movs	r1, #128	; 0x80
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f001 f851 	bl	8010398 <USBD_LL_StallEP>
 800f2f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f2f8:	e040      	b.n	800f37c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f2fa:	6839      	ldr	r1, [r7, #0]
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 fc68 	bl	800fbd2 <USBD_CtlError>
              break;
 800f302:	e03b      	b.n	800f37c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	885b      	ldrh	r3, [r3, #2]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d136      	bne.n	800f37a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f30c:	7bbb      	ldrb	r3, [r7, #14]
 800f30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f312:	2b00      	cmp	r3, #0
 800f314:	d004      	beq.n	800f320 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f316:	7bbb      	ldrb	r3, [r7, #14]
 800f318:	4619      	mov	r1, r3
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f001 f872 	bl	8010404 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f000 fd04 	bl	800fd2e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f326:	7bbb      	ldrb	r3, [r7, #14]
 800f328:	4619      	mov	r1, r3
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f7ff fde2 	bl	800eef4 <USBD_CoreFindEP>
 800f330:	4603      	mov	r3, r0
 800f332:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f334:	7b7b      	ldrb	r3, [r7, #13]
 800f336:	2bff      	cmp	r3, #255	; 0xff
 800f338:	d01f      	beq.n	800f37a <USBD_StdEPReq+0x1c6>
 800f33a:	7b7b      	ldrb	r3, [r7, #13]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d11c      	bne.n	800f37a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f340:	7b7a      	ldrb	r2, [r7, #13]
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f348:	7b7a      	ldrb	r2, [r7, #13]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	32ae      	adds	r2, #174	; 0xae
 800f34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f352:	689b      	ldr	r3, [r3, #8]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d010      	beq.n	800f37a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f358:	7b7a      	ldrb	r2, [r7, #13]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	32ae      	adds	r2, #174	; 0xae
 800f35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f362:	689b      	ldr	r3, [r3, #8]
 800f364:	6839      	ldr	r1, [r7, #0]
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	4798      	blx	r3
 800f36a:	4603      	mov	r3, r0
 800f36c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f36e:	e004      	b.n	800f37a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f370:	6839      	ldr	r1, [r7, #0]
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 fc2d 	bl	800fbd2 <USBD_CtlError>
              break;
 800f378:	e000      	b.n	800f37c <USBD_StdEPReq+0x1c8>
              break;
 800f37a:	bf00      	nop
          }
          break;
 800f37c:	e0ab      	b.n	800f4d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f384:	b2db      	uxtb	r3, r3
 800f386:	2b02      	cmp	r3, #2
 800f388:	d002      	beq.n	800f390 <USBD_StdEPReq+0x1dc>
 800f38a:	2b03      	cmp	r3, #3
 800f38c:	d032      	beq.n	800f3f4 <USBD_StdEPReq+0x240>
 800f38e:	e097      	b.n	800f4c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f390:	7bbb      	ldrb	r3, [r7, #14]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d007      	beq.n	800f3a6 <USBD_StdEPReq+0x1f2>
 800f396:	7bbb      	ldrb	r3, [r7, #14]
 800f398:	2b80      	cmp	r3, #128	; 0x80
 800f39a:	d004      	beq.n	800f3a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f39c:	6839      	ldr	r1, [r7, #0]
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f000 fc17 	bl	800fbd2 <USBD_CtlError>
                break;
 800f3a4:	e091      	b.n	800f4ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	da0b      	bge.n	800f3c6 <USBD_StdEPReq+0x212>
 800f3ae:	7bbb      	ldrb	r3, [r7, #14]
 800f3b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f3b4:	4613      	mov	r3, r2
 800f3b6:	009b      	lsls	r3, r3, #2
 800f3b8:	4413      	add	r3, r2
 800f3ba:	009b      	lsls	r3, r3, #2
 800f3bc:	3310      	adds	r3, #16
 800f3be:	687a      	ldr	r2, [r7, #4]
 800f3c0:	4413      	add	r3, r2
 800f3c2:	3304      	adds	r3, #4
 800f3c4:	e00b      	b.n	800f3de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f3c6:	7bbb      	ldrb	r3, [r7, #14]
 800f3c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3cc:	4613      	mov	r3, r2
 800f3ce:	009b      	lsls	r3, r3, #2
 800f3d0:	4413      	add	r3, r2
 800f3d2:	009b      	lsls	r3, r3, #2
 800f3d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f3d8:	687a      	ldr	r2, [r7, #4]
 800f3da:	4413      	add	r3, r2
 800f3dc:	3304      	adds	r3, #4
 800f3de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	2202      	movs	r2, #2
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f000 fc61 	bl	800fcb4 <USBD_CtlSendData>
              break;
 800f3f2:	e06a      	b.n	800f4ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f3f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	da11      	bge.n	800f420 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f3fc:	7bbb      	ldrb	r3, [r7, #14]
 800f3fe:	f003 020f 	and.w	r2, r3, #15
 800f402:	6879      	ldr	r1, [r7, #4]
 800f404:	4613      	mov	r3, r2
 800f406:	009b      	lsls	r3, r3, #2
 800f408:	4413      	add	r3, r2
 800f40a:	009b      	lsls	r3, r3, #2
 800f40c:	440b      	add	r3, r1
 800f40e:	3324      	adds	r3, #36	; 0x24
 800f410:	881b      	ldrh	r3, [r3, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d117      	bne.n	800f446 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f416:	6839      	ldr	r1, [r7, #0]
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f000 fbda 	bl	800fbd2 <USBD_CtlError>
                  break;
 800f41e:	e054      	b.n	800f4ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f420:	7bbb      	ldrb	r3, [r7, #14]
 800f422:	f003 020f 	and.w	r2, r3, #15
 800f426:	6879      	ldr	r1, [r7, #4]
 800f428:	4613      	mov	r3, r2
 800f42a:	009b      	lsls	r3, r3, #2
 800f42c:	4413      	add	r3, r2
 800f42e:	009b      	lsls	r3, r3, #2
 800f430:	440b      	add	r3, r1
 800f432:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f436:	881b      	ldrh	r3, [r3, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d104      	bne.n	800f446 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f43c:	6839      	ldr	r1, [r7, #0]
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f000 fbc7 	bl	800fbd2 <USBD_CtlError>
                  break;
 800f444:	e041      	b.n	800f4ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f446:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	da0b      	bge.n	800f466 <USBD_StdEPReq+0x2b2>
 800f44e:	7bbb      	ldrb	r3, [r7, #14]
 800f450:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f454:	4613      	mov	r3, r2
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	4413      	add	r3, r2
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	3310      	adds	r3, #16
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	4413      	add	r3, r2
 800f462:	3304      	adds	r3, #4
 800f464:	e00b      	b.n	800f47e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f466:	7bbb      	ldrb	r3, [r7, #14]
 800f468:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f46c:	4613      	mov	r3, r2
 800f46e:	009b      	lsls	r3, r3, #2
 800f470:	4413      	add	r3, r2
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f478:	687a      	ldr	r2, [r7, #4]
 800f47a:	4413      	add	r3, r2
 800f47c:	3304      	adds	r3, #4
 800f47e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f480:	7bbb      	ldrb	r3, [r7, #14]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d002      	beq.n	800f48c <USBD_StdEPReq+0x2d8>
 800f486:	7bbb      	ldrb	r3, [r7, #14]
 800f488:	2b80      	cmp	r3, #128	; 0x80
 800f48a:	d103      	bne.n	800f494 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	2200      	movs	r2, #0
 800f490:	601a      	str	r2, [r3, #0]
 800f492:	e00e      	b.n	800f4b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f494:	7bbb      	ldrb	r3, [r7, #14]
 800f496:	4619      	mov	r1, r3
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 ffe9 	bl	8010470 <USBD_LL_IsStallEP>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d003      	beq.n	800f4ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	601a      	str	r2, [r3, #0]
 800f4aa:	e002      	b.n	800f4b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	2202      	movs	r2, #2
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 fbfb 	bl	800fcb4 <USBD_CtlSendData>
              break;
 800f4be:	e004      	b.n	800f4ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f4c0:	6839      	ldr	r1, [r7, #0]
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f000 fb85 	bl	800fbd2 <USBD_CtlError>
              break;
 800f4c8:	bf00      	nop
          }
          break;
 800f4ca:	e004      	b.n	800f4d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f4cc:	6839      	ldr	r1, [r7, #0]
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f000 fb7f 	bl	800fbd2 <USBD_CtlError>
          break;
 800f4d4:	bf00      	nop
      }
      break;
 800f4d6:	e005      	b.n	800f4e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f4d8:	6839      	ldr	r1, [r7, #0]
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f000 fb79 	bl	800fbd2 <USBD_CtlError>
      break;
 800f4e0:	e000      	b.n	800f4e4 <USBD_StdEPReq+0x330>
      break;
 800f4e2:	bf00      	nop
  }

  return ret;
 800f4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
	...

0800f4f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f4fe:	2300      	movs	r3, #0
 800f500:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f502:	2300      	movs	r3, #0
 800f504:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	885b      	ldrh	r3, [r3, #2]
 800f50a:	0a1b      	lsrs	r3, r3, #8
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	3b01      	subs	r3, #1
 800f510:	2b0e      	cmp	r3, #14
 800f512:	f200 8152 	bhi.w	800f7ba <USBD_GetDescriptor+0x2ca>
 800f516:	a201      	add	r2, pc, #4	; (adr r2, 800f51c <USBD_GetDescriptor+0x2c>)
 800f518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51c:	0800f58d 	.word	0x0800f58d
 800f520:	0800f5a5 	.word	0x0800f5a5
 800f524:	0800f5e5 	.word	0x0800f5e5
 800f528:	0800f7bb 	.word	0x0800f7bb
 800f52c:	0800f7bb 	.word	0x0800f7bb
 800f530:	0800f75b 	.word	0x0800f75b
 800f534:	0800f787 	.word	0x0800f787
 800f538:	0800f7bb 	.word	0x0800f7bb
 800f53c:	0800f7bb 	.word	0x0800f7bb
 800f540:	0800f7bb 	.word	0x0800f7bb
 800f544:	0800f7bb 	.word	0x0800f7bb
 800f548:	0800f7bb 	.word	0x0800f7bb
 800f54c:	0800f7bb 	.word	0x0800f7bb
 800f550:	0800f7bb 	.word	0x0800f7bb
 800f554:	0800f559 	.word	0x0800f559
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f55e:	69db      	ldr	r3, [r3, #28]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d00b      	beq.n	800f57c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f56a:	69db      	ldr	r3, [r3, #28]
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	7c12      	ldrb	r2, [r2, #16]
 800f570:	f107 0108 	add.w	r1, r7, #8
 800f574:	4610      	mov	r0, r2
 800f576:	4798      	blx	r3
 800f578:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f57a:	e126      	b.n	800f7ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f57c:	6839      	ldr	r1, [r7, #0]
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f000 fb27 	bl	800fbd2 <USBD_CtlError>
        err++;
 800f584:	7afb      	ldrb	r3, [r7, #11]
 800f586:	3301      	adds	r3, #1
 800f588:	72fb      	strb	r3, [r7, #11]
      break;
 800f58a:	e11e      	b.n	800f7ca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	7c12      	ldrb	r2, [r2, #16]
 800f598:	f107 0108 	add.w	r1, r7, #8
 800f59c:	4610      	mov	r0, r2
 800f59e:	4798      	blx	r3
 800f5a0:	60f8      	str	r0, [r7, #12]
      break;
 800f5a2:	e112      	b.n	800f7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	7c1b      	ldrb	r3, [r3, #16]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d10d      	bne.n	800f5c8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5b4:	f107 0208 	add.w	r2, r7, #8
 800f5b8:	4610      	mov	r0, r2
 800f5ba:	4798      	blx	r3
 800f5bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	2202      	movs	r2, #2
 800f5c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f5c6:	e100      	b.n	800f7ca <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5d0:	f107 0208 	add.w	r2, r7, #8
 800f5d4:	4610      	mov	r0, r2
 800f5d6:	4798      	blx	r3
 800f5d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	2202      	movs	r2, #2
 800f5e0:	701a      	strb	r2, [r3, #0]
      break;
 800f5e2:	e0f2      	b.n	800f7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	885b      	ldrh	r3, [r3, #2]
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	2b05      	cmp	r3, #5
 800f5ec:	f200 80ac 	bhi.w	800f748 <USBD_GetDescriptor+0x258>
 800f5f0:	a201      	add	r2, pc, #4	; (adr r2, 800f5f8 <USBD_GetDescriptor+0x108>)
 800f5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f6:	bf00      	nop
 800f5f8:	0800f611 	.word	0x0800f611
 800f5fc:	0800f645 	.word	0x0800f645
 800f600:	0800f679 	.word	0x0800f679
 800f604:	0800f6ad 	.word	0x0800f6ad
 800f608:	0800f6e1 	.word	0x0800f6e1
 800f60c:	0800f715 	.word	0x0800f715
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d00b      	beq.n	800f634 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	687a      	ldr	r2, [r7, #4]
 800f626:	7c12      	ldrb	r2, [r2, #16]
 800f628:	f107 0108 	add.w	r1, r7, #8
 800f62c:	4610      	mov	r0, r2
 800f62e:	4798      	blx	r3
 800f630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f632:	e091      	b.n	800f758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f634:	6839      	ldr	r1, [r7, #0]
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f000 facb 	bl	800fbd2 <USBD_CtlError>
            err++;
 800f63c:	7afb      	ldrb	r3, [r7, #11]
 800f63e:	3301      	adds	r3, #1
 800f640:	72fb      	strb	r3, [r7, #11]
          break;
 800f642:	e089      	b.n	800f758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f64a:	689b      	ldr	r3, [r3, #8]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d00b      	beq.n	800f668 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f656:	689b      	ldr	r3, [r3, #8]
 800f658:	687a      	ldr	r2, [r7, #4]
 800f65a:	7c12      	ldrb	r2, [r2, #16]
 800f65c:	f107 0108 	add.w	r1, r7, #8
 800f660:	4610      	mov	r0, r2
 800f662:	4798      	blx	r3
 800f664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f666:	e077      	b.n	800f758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f668:	6839      	ldr	r1, [r7, #0]
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f000 fab1 	bl	800fbd2 <USBD_CtlError>
            err++;
 800f670:	7afb      	ldrb	r3, [r7, #11]
 800f672:	3301      	adds	r3, #1
 800f674:	72fb      	strb	r3, [r7, #11]
          break;
 800f676:	e06f      	b.n	800f758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f67e:	68db      	ldr	r3, [r3, #12]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d00b      	beq.n	800f69c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f68a:	68db      	ldr	r3, [r3, #12]
 800f68c:	687a      	ldr	r2, [r7, #4]
 800f68e:	7c12      	ldrb	r2, [r2, #16]
 800f690:	f107 0108 	add.w	r1, r7, #8
 800f694:	4610      	mov	r0, r2
 800f696:	4798      	blx	r3
 800f698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f69a:	e05d      	b.n	800f758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f69c:	6839      	ldr	r1, [r7, #0]
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f000 fa97 	bl	800fbd2 <USBD_CtlError>
            err++;
 800f6a4:	7afb      	ldrb	r3, [r7, #11]
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	72fb      	strb	r3, [r7, #11]
          break;
 800f6aa:	e055      	b.n	800f758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6b2:	691b      	ldr	r3, [r3, #16]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d00b      	beq.n	800f6d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6be:	691b      	ldr	r3, [r3, #16]
 800f6c0:	687a      	ldr	r2, [r7, #4]
 800f6c2:	7c12      	ldrb	r2, [r2, #16]
 800f6c4:	f107 0108 	add.w	r1, r7, #8
 800f6c8:	4610      	mov	r0, r2
 800f6ca:	4798      	blx	r3
 800f6cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6ce:	e043      	b.n	800f758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f6d0:	6839      	ldr	r1, [r7, #0]
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f000 fa7d 	bl	800fbd2 <USBD_CtlError>
            err++;
 800f6d8:	7afb      	ldrb	r3, [r7, #11]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	72fb      	strb	r3, [r7, #11]
          break;
 800f6de:	e03b      	b.n	800f758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6e6:	695b      	ldr	r3, [r3, #20]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d00b      	beq.n	800f704 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6f2:	695b      	ldr	r3, [r3, #20]
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	7c12      	ldrb	r2, [r2, #16]
 800f6f8:	f107 0108 	add.w	r1, r7, #8
 800f6fc:	4610      	mov	r0, r2
 800f6fe:	4798      	blx	r3
 800f700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f702:	e029      	b.n	800f758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f704:	6839      	ldr	r1, [r7, #0]
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f000 fa63 	bl	800fbd2 <USBD_CtlError>
            err++;
 800f70c:	7afb      	ldrb	r3, [r7, #11]
 800f70e:	3301      	adds	r3, #1
 800f710:	72fb      	strb	r3, [r7, #11]
          break;
 800f712:	e021      	b.n	800f758 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f71a:	699b      	ldr	r3, [r3, #24]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d00b      	beq.n	800f738 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f726:	699b      	ldr	r3, [r3, #24]
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	7c12      	ldrb	r2, [r2, #16]
 800f72c:	f107 0108 	add.w	r1, r7, #8
 800f730:	4610      	mov	r0, r2
 800f732:	4798      	blx	r3
 800f734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f736:	e00f      	b.n	800f758 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f738:	6839      	ldr	r1, [r7, #0]
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 fa49 	bl	800fbd2 <USBD_CtlError>
            err++;
 800f740:	7afb      	ldrb	r3, [r7, #11]
 800f742:	3301      	adds	r3, #1
 800f744:	72fb      	strb	r3, [r7, #11]
          break;
 800f746:	e007      	b.n	800f758 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f748:	6839      	ldr	r1, [r7, #0]
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 fa41 	bl	800fbd2 <USBD_CtlError>
          err++;
 800f750:	7afb      	ldrb	r3, [r7, #11]
 800f752:	3301      	adds	r3, #1
 800f754:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f756:	bf00      	nop
      }
      break;
 800f758:	e037      	b.n	800f7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	7c1b      	ldrb	r3, [r3, #16]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d109      	bne.n	800f776 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f76a:	f107 0208 	add.w	r2, r7, #8
 800f76e:	4610      	mov	r0, r2
 800f770:	4798      	blx	r3
 800f772:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f774:	e029      	b.n	800f7ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f776:	6839      	ldr	r1, [r7, #0]
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 fa2a 	bl	800fbd2 <USBD_CtlError>
        err++;
 800f77e:	7afb      	ldrb	r3, [r7, #11]
 800f780:	3301      	adds	r3, #1
 800f782:	72fb      	strb	r3, [r7, #11]
      break;
 800f784:	e021      	b.n	800f7ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	7c1b      	ldrb	r3, [r3, #16]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d10d      	bne.n	800f7aa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f796:	f107 0208 	add.w	r2, r7, #8
 800f79a:	4610      	mov	r0, r2
 800f79c:	4798      	blx	r3
 800f79e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	2207      	movs	r2, #7
 800f7a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7a8:	e00f      	b.n	800f7ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f7aa:	6839      	ldr	r1, [r7, #0]
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f000 fa10 	bl	800fbd2 <USBD_CtlError>
        err++;
 800f7b2:	7afb      	ldrb	r3, [r7, #11]
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	72fb      	strb	r3, [r7, #11]
      break;
 800f7b8:	e007      	b.n	800f7ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f7ba:	6839      	ldr	r1, [r7, #0]
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f000 fa08 	bl	800fbd2 <USBD_CtlError>
      err++;
 800f7c2:	7afb      	ldrb	r3, [r7, #11]
 800f7c4:	3301      	adds	r3, #1
 800f7c6:	72fb      	strb	r3, [r7, #11]
      break;
 800f7c8:	bf00      	nop
  }

  if (err != 0U)
 800f7ca:	7afb      	ldrb	r3, [r7, #11]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d11e      	bne.n	800f80e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	88db      	ldrh	r3, [r3, #6]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d016      	beq.n	800f806 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f7d8:	893b      	ldrh	r3, [r7, #8]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d00e      	beq.n	800f7fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	88da      	ldrh	r2, [r3, #6]
 800f7e2:	893b      	ldrh	r3, [r7, #8]
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	bf28      	it	cs
 800f7e8:	4613      	movcs	r3, r2
 800f7ea:	b29b      	uxth	r3, r3
 800f7ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f7ee:	893b      	ldrh	r3, [r7, #8]
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	68f9      	ldr	r1, [r7, #12]
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f000 fa5d 	bl	800fcb4 <USBD_CtlSendData>
 800f7fa:	e009      	b.n	800f810 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f7fc:	6839      	ldr	r1, [r7, #0]
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f000 f9e7 	bl	800fbd2 <USBD_CtlError>
 800f804:	e004      	b.n	800f810 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f000 fa91 	bl	800fd2e <USBD_CtlSendStatus>
 800f80c:	e000      	b.n	800f810 <USBD_GetDescriptor+0x320>
    return;
 800f80e:	bf00      	nop
  }
}
 800f810:	3710      	adds	r7, #16
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
 800f816:	bf00      	nop

0800f818 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	889b      	ldrh	r3, [r3, #4]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d131      	bne.n	800f88e <USBD_SetAddress+0x76>
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	88db      	ldrh	r3, [r3, #6]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d12d      	bne.n	800f88e <USBD_SetAddress+0x76>
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	885b      	ldrh	r3, [r3, #2]
 800f836:	2b7f      	cmp	r3, #127	; 0x7f
 800f838:	d829      	bhi.n	800f88e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	885b      	ldrh	r3, [r3, #2]
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f844:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f84c:	b2db      	uxtb	r3, r3
 800f84e:	2b03      	cmp	r3, #3
 800f850:	d104      	bne.n	800f85c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f852:	6839      	ldr	r1, [r7, #0]
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 f9bc 	bl	800fbd2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f85a:	e01d      	b.n	800f898 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	7bfa      	ldrb	r2, [r7, #15]
 800f860:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f864:	7bfb      	ldrb	r3, [r7, #15]
 800f866:	4619      	mov	r1, r3
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f000 fe2f 	bl	80104cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f000 fa5d 	bl	800fd2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f874:	7bfb      	ldrb	r3, [r7, #15]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d004      	beq.n	800f884 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2202      	movs	r2, #2
 800f87e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f882:	e009      	b.n	800f898 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2201      	movs	r2, #1
 800f888:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f88c:	e004      	b.n	800f898 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f88e:	6839      	ldr	r1, [r7, #0]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f000 f99e 	bl	800fbd2 <USBD_CtlError>
  }
}
 800f896:	bf00      	nop
 800f898:	bf00      	nop
 800f89a:	3710      	adds	r7, #16
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	885b      	ldrh	r3, [r3, #2]
 800f8b2:	b2da      	uxtb	r2, r3
 800f8b4:	4b4e      	ldr	r3, [pc, #312]	; (800f9f0 <USBD_SetConfig+0x150>)
 800f8b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f8b8:	4b4d      	ldr	r3, [pc, #308]	; (800f9f0 <USBD_SetConfig+0x150>)
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	d905      	bls.n	800f8cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f8c0:	6839      	ldr	r1, [r7, #0]
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 f985 	bl	800fbd2 <USBD_CtlError>
    return USBD_FAIL;
 800f8c8:	2303      	movs	r3, #3
 800f8ca:	e08c      	b.n	800f9e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8d2:	b2db      	uxtb	r3, r3
 800f8d4:	2b02      	cmp	r3, #2
 800f8d6:	d002      	beq.n	800f8de <USBD_SetConfig+0x3e>
 800f8d8:	2b03      	cmp	r3, #3
 800f8da:	d029      	beq.n	800f930 <USBD_SetConfig+0x90>
 800f8dc:	e075      	b.n	800f9ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f8de:	4b44      	ldr	r3, [pc, #272]	; (800f9f0 <USBD_SetConfig+0x150>)
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d020      	beq.n	800f928 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f8e6:	4b42      	ldr	r3, [pc, #264]	; (800f9f0 <USBD_SetConfig+0x150>)
 800f8e8:	781b      	ldrb	r3, [r3, #0]
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f8f0:	4b3f      	ldr	r3, [pc, #252]	; (800f9f0 <USBD_SetConfig+0x150>)
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f7ff f849 	bl	800e98e <USBD_SetClassConfig>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f900:	7bfb      	ldrb	r3, [r7, #15]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d008      	beq.n	800f918 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f906:	6839      	ldr	r1, [r7, #0]
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 f962 	bl	800fbd2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2202      	movs	r2, #2
 800f912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f916:	e065      	b.n	800f9e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f000 fa08 	bl	800fd2e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2203      	movs	r2, #3
 800f922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f926:	e05d      	b.n	800f9e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 fa00 	bl	800fd2e <USBD_CtlSendStatus>
      break;
 800f92e:	e059      	b.n	800f9e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f930:	4b2f      	ldr	r3, [pc, #188]	; (800f9f0 <USBD_SetConfig+0x150>)
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d112      	bne.n	800f95e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2202      	movs	r2, #2
 800f93c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f940:	4b2b      	ldr	r3, [pc, #172]	; (800f9f0 <USBD_SetConfig+0x150>)
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	461a      	mov	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f94a:	4b29      	ldr	r3, [pc, #164]	; (800f9f0 <USBD_SetConfig+0x150>)
 800f94c:	781b      	ldrb	r3, [r3, #0]
 800f94e:	4619      	mov	r1, r3
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7ff f838 	bl	800e9c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 f9e9 	bl	800fd2e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f95c:	e042      	b.n	800f9e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f95e:	4b24      	ldr	r3, [pc, #144]	; (800f9f0 <USBD_SetConfig+0x150>)
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	461a      	mov	r2, r3
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d02a      	beq.n	800f9c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	b2db      	uxtb	r3, r3
 800f972:	4619      	mov	r1, r3
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7ff f826 	bl	800e9c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f97a:	4b1d      	ldr	r3, [pc, #116]	; (800f9f0 <USBD_SetConfig+0x150>)
 800f97c:	781b      	ldrb	r3, [r3, #0]
 800f97e:	461a      	mov	r2, r3
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f984:	4b1a      	ldr	r3, [pc, #104]	; (800f9f0 <USBD_SetConfig+0x150>)
 800f986:	781b      	ldrb	r3, [r3, #0]
 800f988:	4619      	mov	r1, r3
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f7fe ffff 	bl	800e98e <USBD_SetClassConfig>
 800f990:	4603      	mov	r3, r0
 800f992:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f994:	7bfb      	ldrb	r3, [r7, #15]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d00f      	beq.n	800f9ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f99a:	6839      	ldr	r1, [r7, #0]
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f000 f918 	bl	800fbd2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	b2db      	uxtb	r3, r3
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f7ff f80b 	bl	800e9c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2202      	movs	r2, #2
 800f9b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f9b8:	e014      	b.n	800f9e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f000 f9b7 	bl	800fd2e <USBD_CtlSendStatus>
      break;
 800f9c0:	e010      	b.n	800f9e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f000 f9b3 	bl	800fd2e <USBD_CtlSendStatus>
      break;
 800f9c8:	e00c      	b.n	800f9e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f9ca:	6839      	ldr	r1, [r7, #0]
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f000 f900 	bl	800fbd2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f9d2:	4b07      	ldr	r3, [pc, #28]	; (800f9f0 <USBD_SetConfig+0x150>)
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7fe fff4 	bl	800e9c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f9de:	2303      	movs	r3, #3
 800f9e0:	73fb      	strb	r3, [r7, #15]
      break;
 800f9e2:	bf00      	nop
  }

  return ret;
 800f9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3710      	adds	r7, #16
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	bf00      	nop
 800f9f0:	20000d0c 	.word	0x20000d0c

0800f9f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	88db      	ldrh	r3, [r3, #6]
 800fa02:	2b01      	cmp	r3, #1
 800fa04:	d004      	beq.n	800fa10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fa06:	6839      	ldr	r1, [r7, #0]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 f8e2 	bl	800fbd2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fa0e:	e023      	b.n	800fa58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa16:	b2db      	uxtb	r3, r3
 800fa18:	2b02      	cmp	r3, #2
 800fa1a:	dc02      	bgt.n	800fa22 <USBD_GetConfig+0x2e>
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	dc03      	bgt.n	800fa28 <USBD_GetConfig+0x34>
 800fa20:	e015      	b.n	800fa4e <USBD_GetConfig+0x5a>
 800fa22:	2b03      	cmp	r3, #3
 800fa24:	d00b      	beq.n	800fa3e <USBD_GetConfig+0x4a>
 800fa26:	e012      	b.n	800fa4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	3308      	adds	r3, #8
 800fa32:	2201      	movs	r2, #1
 800fa34:	4619      	mov	r1, r3
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f000 f93c 	bl	800fcb4 <USBD_CtlSendData>
        break;
 800fa3c:	e00c      	b.n	800fa58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	3304      	adds	r3, #4
 800fa42:	2201      	movs	r2, #1
 800fa44:	4619      	mov	r1, r3
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f000 f934 	bl	800fcb4 <USBD_CtlSendData>
        break;
 800fa4c:	e004      	b.n	800fa58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800fa4e:	6839      	ldr	r1, [r7, #0]
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f000 f8be 	bl	800fbd2 <USBD_CtlError>
        break;
 800fa56:	bf00      	nop
}
 800fa58:	bf00      	nop
 800fa5a:	3708      	adds	r7, #8
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
 800fa68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	3b01      	subs	r3, #1
 800fa74:	2b02      	cmp	r3, #2
 800fa76:	d81e      	bhi.n	800fab6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	88db      	ldrh	r3, [r3, #6]
 800fa7c:	2b02      	cmp	r3, #2
 800fa7e:	d004      	beq.n	800fa8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fa80:	6839      	ldr	r1, [r7, #0]
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f000 f8a5 	bl	800fbd2 <USBD_CtlError>
        break;
 800fa88:	e01a      	b.n	800fac0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d005      	beq.n	800faa6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	68db      	ldr	r3, [r3, #12]
 800fa9e:	f043 0202 	orr.w	r2, r3, #2
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	330c      	adds	r3, #12
 800faaa:	2202      	movs	r2, #2
 800faac:	4619      	mov	r1, r3
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f000 f900 	bl	800fcb4 <USBD_CtlSendData>
      break;
 800fab4:	e004      	b.n	800fac0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fab6:	6839      	ldr	r1, [r7, #0]
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f000 f88a 	bl	800fbd2 <USBD_CtlError>
      break;
 800fabe:	bf00      	nop
  }
}
 800fac0:	bf00      	nop
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	885b      	ldrh	r3, [r3, #2]
 800fad6:	2b01      	cmp	r3, #1
 800fad8:	d107      	bne.n	800faea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2201      	movs	r2, #1
 800fade:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 f923 	bl	800fd2e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fae8:	e013      	b.n	800fb12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	885b      	ldrh	r3, [r3, #2]
 800faee:	2b02      	cmp	r3, #2
 800faf0:	d10b      	bne.n	800fb0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	889b      	ldrh	r3, [r3, #4]
 800faf6:	0a1b      	lsrs	r3, r3, #8
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	b2da      	uxtb	r2, r3
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f000 f913 	bl	800fd2e <USBD_CtlSendStatus>
}
 800fb08:	e003      	b.n	800fb12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fb0a:	6839      	ldr	r1, [r7, #0]
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f000 f860 	bl	800fbd2 <USBD_CtlError>
}
 800fb12:	bf00      	nop
 800fb14:	3708      	adds	r7, #8
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}

0800fb1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb1a:	b580      	push	{r7, lr}
 800fb1c:	b082      	sub	sp, #8
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	6078      	str	r0, [r7, #4]
 800fb22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	3b01      	subs	r3, #1
 800fb2e:	2b02      	cmp	r3, #2
 800fb30:	d80b      	bhi.n	800fb4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	885b      	ldrh	r3, [r3, #2]
 800fb36:	2b01      	cmp	r3, #1
 800fb38:	d10c      	bne.n	800fb54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f000 f8f3 	bl	800fd2e <USBD_CtlSendStatus>
      }
      break;
 800fb48:	e004      	b.n	800fb54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fb4a:	6839      	ldr	r1, [r7, #0]
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f000 f840 	bl	800fbd2 <USBD_CtlError>
      break;
 800fb52:	e000      	b.n	800fb56 <USBD_ClrFeature+0x3c>
      break;
 800fb54:	bf00      	nop
  }
}
 800fb56:	bf00      	nop
 800fb58:	3708      	adds	r7, #8
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}

0800fb5e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fb5e:	b580      	push	{r7, lr}
 800fb60:	b084      	sub	sp, #16
 800fb62:	af00      	add	r7, sp, #0
 800fb64:	6078      	str	r0, [r7, #4]
 800fb66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	781a      	ldrb	r2, [r3, #0]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	3301      	adds	r3, #1
 800fb78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	781a      	ldrb	r2, [r3, #0]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	3301      	adds	r3, #1
 800fb86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fb88:	68f8      	ldr	r0, [r7, #12]
 800fb8a:	f7ff fa17 	bl	800efbc <SWAPBYTE>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	461a      	mov	r2, r3
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	3301      	adds	r3, #1
 800fb9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fba2:	68f8      	ldr	r0, [r7, #12]
 800fba4:	f7ff fa0a 	bl	800efbc <SWAPBYTE>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	461a      	mov	r2, r3
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fbbc:	68f8      	ldr	r0, [r7, #12]
 800fbbe:	f7ff f9fd 	bl	800efbc <SWAPBYTE>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	80da      	strh	r2, [r3, #6]
}
 800fbca:	bf00      	nop
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}

0800fbd2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbd2:	b580      	push	{r7, lr}
 800fbd4:	b082      	sub	sp, #8
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
 800fbda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fbdc:	2180      	movs	r1, #128	; 0x80
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f000 fbda 	bl	8010398 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fbe4:	2100      	movs	r1, #0
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f000 fbd6 	bl	8010398 <USBD_LL_StallEP>
}
 800fbec:	bf00      	nop
 800fbee:	3708      	adds	r7, #8
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b086      	sub	sp, #24
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	60f8      	str	r0, [r7, #12]
 800fbfc:	60b9      	str	r1, [r7, #8]
 800fbfe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fc00:	2300      	movs	r3, #0
 800fc02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d036      	beq.n	800fc78 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fc0e:	6938      	ldr	r0, [r7, #16]
 800fc10:	f000 f836 	bl	800fc80 <USBD_GetLen>
 800fc14:	4603      	mov	r3, r0
 800fc16:	3301      	adds	r3, #1
 800fc18:	b29b      	uxth	r3, r3
 800fc1a:	005b      	lsls	r3, r3, #1
 800fc1c:	b29a      	uxth	r2, r3
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fc22:	7dfb      	ldrb	r3, [r7, #23]
 800fc24:	68ba      	ldr	r2, [r7, #8]
 800fc26:	4413      	add	r3, r2
 800fc28:	687a      	ldr	r2, [r7, #4]
 800fc2a:	7812      	ldrb	r2, [r2, #0]
 800fc2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc2e:	7dfb      	ldrb	r3, [r7, #23]
 800fc30:	3301      	adds	r3, #1
 800fc32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fc34:	7dfb      	ldrb	r3, [r7, #23]
 800fc36:	68ba      	ldr	r2, [r7, #8]
 800fc38:	4413      	add	r3, r2
 800fc3a:	2203      	movs	r2, #3
 800fc3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800fc3e:	7dfb      	ldrb	r3, [r7, #23]
 800fc40:	3301      	adds	r3, #1
 800fc42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fc44:	e013      	b.n	800fc6e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fc46:	7dfb      	ldrb	r3, [r7, #23]
 800fc48:	68ba      	ldr	r2, [r7, #8]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	693a      	ldr	r2, [r7, #16]
 800fc4e:	7812      	ldrb	r2, [r2, #0]
 800fc50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	3301      	adds	r3, #1
 800fc56:	613b      	str	r3, [r7, #16]
    idx++;
 800fc58:	7dfb      	ldrb	r3, [r7, #23]
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fc5e:	7dfb      	ldrb	r3, [r7, #23]
 800fc60:	68ba      	ldr	r2, [r7, #8]
 800fc62:	4413      	add	r3, r2
 800fc64:	2200      	movs	r2, #0
 800fc66:	701a      	strb	r2, [r3, #0]
    idx++;
 800fc68:	7dfb      	ldrb	r3, [r7, #23]
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	781b      	ldrb	r3, [r3, #0]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d1e7      	bne.n	800fc46 <USBD_GetString+0x52>
 800fc76:	e000      	b.n	800fc7a <USBD_GetString+0x86>
    return;
 800fc78:	bf00      	nop
  }
}
 800fc7a:	3718      	adds	r7, #24
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b085      	sub	sp, #20
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fc90:	e005      	b.n	800fc9e <USBD_GetLen+0x1e>
  {
    len++;
 800fc92:	7bfb      	ldrb	r3, [r7, #15]
 800fc94:	3301      	adds	r3, #1
 800fc96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d1f5      	bne.n	800fc92 <USBD_GetLen+0x12>
  }

  return len;
 800fca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3714      	adds	r7, #20
 800fcac:	46bd      	mov	sp, r7
 800fcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb2:	4770      	bx	lr

0800fcb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b084      	sub	sp, #16
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2202      	movs	r2, #2
 800fcc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	687a      	ldr	r2, [r7, #4]
 800fccc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	68ba      	ldr	r2, [r7, #8]
 800fcd8:	2100      	movs	r1, #0
 800fcda:	68f8      	ldr	r0, [r7, #12]
 800fcdc:	f000 fc2c 	bl	8010538 <USBD_LL_Transmit>

  return USBD_OK;
 800fce0:	2300      	movs	r3, #0
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3710      	adds	r7, #16
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}

0800fcea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fcea:	b580      	push	{r7, lr}
 800fcec:	b084      	sub	sp, #16
 800fcee:	af00      	add	r7, sp, #0
 800fcf0:	60f8      	str	r0, [r7, #12]
 800fcf2:	60b9      	str	r1, [r7, #8]
 800fcf4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	68ba      	ldr	r2, [r7, #8]
 800fcfa:	2100      	movs	r1, #0
 800fcfc:	68f8      	ldr	r0, [r7, #12]
 800fcfe:	f000 fc1b 	bl	8010538 <USBD_LL_Transmit>

  return USBD_OK;
 800fd02:	2300      	movs	r3, #0
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3710      	adds	r7, #16
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b084      	sub	sp, #16
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	60f8      	str	r0, [r7, #12]
 800fd14:	60b9      	str	r1, [r7, #8]
 800fd16:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	68ba      	ldr	r2, [r7, #8]
 800fd1c:	2100      	movs	r1, #0
 800fd1e:	68f8      	ldr	r0, [r7, #12]
 800fd20:	f000 fc42 	bl	80105a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd24:	2300      	movs	r3, #0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3710      	adds	r7, #16
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b082      	sub	sp, #8
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2204      	movs	r2, #4
 800fd3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fd3e:	2300      	movs	r3, #0
 800fd40:	2200      	movs	r2, #0
 800fd42:	2100      	movs	r1, #0
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 fbf7 	bl	8010538 <USBD_LL_Transmit>

  return USBD_OK;
 800fd4a:	2300      	movs	r3, #0
}
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	3708      	adds	r7, #8
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}

0800fd54 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2205      	movs	r2, #5
 800fd60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd64:	2300      	movs	r3, #0
 800fd66:	2200      	movs	r2, #0
 800fd68:	2100      	movs	r1, #0
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f000 fc1c 	bl	80105a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd70:	2300      	movs	r3, #0
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3708      	adds	r7, #8
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
	...

0800fd7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fd80:	2200      	movs	r2, #0
 800fd82:	490e      	ldr	r1, [pc, #56]	; (800fdbc <MX_USB_DEVICE_Init+0x40>)
 800fd84:	480e      	ldr	r0, [pc, #56]	; (800fdc0 <MX_USB_DEVICE_Init+0x44>)
 800fd86:	f7fe fd85 	bl	800e894 <USBD_Init>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d001      	beq.n	800fd94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fd90:	f7f1 fe0e 	bl	80019b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800fd94:	490b      	ldr	r1, [pc, #44]	; (800fdc4 <MX_USB_DEVICE_Init+0x48>)
 800fd96:	480a      	ldr	r0, [pc, #40]	; (800fdc0 <MX_USB_DEVICE_Init+0x44>)
 800fd98:	f7fe fdac 	bl	800e8f4 <USBD_RegisterClass>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d001      	beq.n	800fda6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fda2:	f7f1 fe05 	bl	80019b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fda6:	4806      	ldr	r0, [pc, #24]	; (800fdc0 <MX_USB_DEVICE_Init+0x44>)
 800fda8:	f7fe fdda 	bl	800e960 <USBD_Start>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d001      	beq.n	800fdb6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800fdb2:	f7f1 fdfd 	bl	80019b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fdb6:	bf00      	nop
 800fdb8:	bd80      	pop	{r7, pc}
 800fdba:	bf00      	nop
 800fdbc:	200000e0 	.word	0x200000e0
 800fdc0:	20000d10 	.word	0x20000d10
 800fdc4:	2000002c 	.word	0x2000002c

0800fdc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b083      	sub	sp, #12
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	4603      	mov	r3, r0
 800fdd0:	6039      	str	r1, [r7, #0]
 800fdd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	2212      	movs	r2, #18
 800fdd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fdda:	4b03      	ldr	r3, [pc, #12]	; (800fde8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	370c      	adds	r7, #12
 800fde0:	46bd      	mov	sp, r7
 800fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde6:	4770      	bx	lr
 800fde8:	20000100 	.word	0x20000100

0800fdec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b083      	sub	sp, #12
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	6039      	str	r1, [r7, #0]
 800fdf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	2204      	movs	r2, #4
 800fdfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fdfe:	4b03      	ldr	r3, [pc, #12]	; (800fe0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	370c      	adds	r7, #12
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr
 800fe0c:	20000120 	.word	0x20000120

0800fe10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	4603      	mov	r3, r0
 800fe18:	6039      	str	r1, [r7, #0]
 800fe1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fe1c:	79fb      	ldrb	r3, [r7, #7]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d105      	bne.n	800fe2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fe22:	683a      	ldr	r2, [r7, #0]
 800fe24:	4907      	ldr	r1, [pc, #28]	; (800fe44 <USBD_FS_ProductStrDescriptor+0x34>)
 800fe26:	4808      	ldr	r0, [pc, #32]	; (800fe48 <USBD_FS_ProductStrDescriptor+0x38>)
 800fe28:	f7ff fee4 	bl	800fbf4 <USBD_GetString>
 800fe2c:	e004      	b.n	800fe38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fe2e:	683a      	ldr	r2, [r7, #0]
 800fe30:	4904      	ldr	r1, [pc, #16]	; (800fe44 <USBD_FS_ProductStrDescriptor+0x34>)
 800fe32:	4805      	ldr	r0, [pc, #20]	; (800fe48 <USBD_FS_ProductStrDescriptor+0x38>)
 800fe34:	f7ff fede 	bl	800fbf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe38:	4b02      	ldr	r3, [pc, #8]	; (800fe44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	3708      	adds	r7, #8
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	bd80      	pop	{r7, pc}
 800fe42:	bf00      	nop
 800fe44:	20000fec 	.word	0x20000fec
 800fe48:	08016614 	.word	0x08016614

0800fe4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	4603      	mov	r3, r0
 800fe54:	6039      	str	r1, [r7, #0]
 800fe56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fe58:	683a      	ldr	r2, [r7, #0]
 800fe5a:	4904      	ldr	r1, [pc, #16]	; (800fe6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fe5c:	4804      	ldr	r0, [pc, #16]	; (800fe70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fe5e:	f7ff fec9 	bl	800fbf4 <USBD_GetString>
  return USBD_StrDesc;
 800fe62:	4b02      	ldr	r3, [pc, #8]	; (800fe6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3708      	adds	r7, #8
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	20000fec 	.word	0x20000fec
 800fe70:	0801662c 	.word	0x0801662c

0800fe74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	6039      	str	r1, [r7, #0]
 800fe7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	221a      	movs	r2, #26
 800fe84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fe86:	f000 f855 	bl	800ff34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fe8a:	4b02      	ldr	r3, [pc, #8]	; (800fe94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3708      	adds	r7, #8
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	20000124 	.word	0x20000124

0800fe98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	4603      	mov	r3, r0
 800fea0:	6039      	str	r1, [r7, #0]
 800fea2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fea4:	79fb      	ldrb	r3, [r7, #7]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d105      	bne.n	800feb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800feaa:	683a      	ldr	r2, [r7, #0]
 800feac:	4907      	ldr	r1, [pc, #28]	; (800fecc <USBD_FS_ConfigStrDescriptor+0x34>)
 800feae:	4808      	ldr	r0, [pc, #32]	; (800fed0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800feb0:	f7ff fea0 	bl	800fbf4 <USBD_GetString>
 800feb4:	e004      	b.n	800fec0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800feb6:	683a      	ldr	r2, [r7, #0]
 800feb8:	4904      	ldr	r1, [pc, #16]	; (800fecc <USBD_FS_ConfigStrDescriptor+0x34>)
 800feba:	4805      	ldr	r0, [pc, #20]	; (800fed0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800febc:	f7ff fe9a 	bl	800fbf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fec0:	4b02      	ldr	r3, [pc, #8]	; (800fecc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3708      	adds	r7, #8
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	20000fec 	.word	0x20000fec
 800fed0:	08016640 	.word	0x08016640

0800fed4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
 800feda:	4603      	mov	r3, r0
 800fedc:	6039      	str	r1, [r7, #0]
 800fede:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fee0:	79fb      	ldrb	r3, [r7, #7]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d105      	bne.n	800fef2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fee6:	683a      	ldr	r2, [r7, #0]
 800fee8:	4907      	ldr	r1, [pc, #28]	; (800ff08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800feea:	4808      	ldr	r0, [pc, #32]	; (800ff0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800feec:	f7ff fe82 	bl	800fbf4 <USBD_GetString>
 800fef0:	e004      	b.n	800fefc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fef2:	683a      	ldr	r2, [r7, #0]
 800fef4:	4904      	ldr	r1, [pc, #16]	; (800ff08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fef6:	4805      	ldr	r0, [pc, #20]	; (800ff0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fef8:	f7ff fe7c 	bl	800fbf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fefc:	4b02      	ldr	r3, [pc, #8]	; (800ff08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3708      	adds	r7, #8
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}
 800ff06:	bf00      	nop
 800ff08:	20000fec 	.word	0x20000fec
 800ff0c:	0801664c 	.word	0x0801664c

0800ff10 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	4603      	mov	r3, r0
 800ff18:	6039      	str	r1, [r7, #0]
 800ff1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	220c      	movs	r2, #12
 800ff20:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ff22:	4b03      	ldr	r3, [pc, #12]	; (800ff30 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ff24:	4618      	mov	r0, r3
 800ff26:	370c      	adds	r7, #12
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr
 800ff30:	20000114 	.word	0x20000114

0800ff34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ff3a:	4b0f      	ldr	r3, [pc, #60]	; (800ff78 <Get_SerialNum+0x44>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ff40:	4b0e      	ldr	r3, [pc, #56]	; (800ff7c <Get_SerialNum+0x48>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ff46:	4b0e      	ldr	r3, [pc, #56]	; (800ff80 <Get_SerialNum+0x4c>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ff4c:	68fa      	ldr	r2, [r7, #12]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	4413      	add	r3, r2
 800ff52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d009      	beq.n	800ff6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ff5a:	2208      	movs	r2, #8
 800ff5c:	4909      	ldr	r1, [pc, #36]	; (800ff84 <Get_SerialNum+0x50>)
 800ff5e:	68f8      	ldr	r0, [r7, #12]
 800ff60:	f000 f814 	bl	800ff8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ff64:	2204      	movs	r2, #4
 800ff66:	4908      	ldr	r1, [pc, #32]	; (800ff88 <Get_SerialNum+0x54>)
 800ff68:	68b8      	ldr	r0, [r7, #8]
 800ff6a:	f000 f80f 	bl	800ff8c <IntToUnicode>
  }
}
 800ff6e:	bf00      	nop
 800ff70:	3710      	adds	r7, #16
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	1fff7590 	.word	0x1fff7590
 800ff7c:	1fff7594 	.word	0x1fff7594
 800ff80:	1fff7598 	.word	0x1fff7598
 800ff84:	20000126 	.word	0x20000126
 800ff88:	20000136 	.word	0x20000136

0800ff8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b087      	sub	sp, #28
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	60b9      	str	r1, [r7, #8]
 800ff96:	4613      	mov	r3, r2
 800ff98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	75fb      	strb	r3, [r7, #23]
 800ffa2:	e027      	b.n	800fff4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	0f1b      	lsrs	r3, r3, #28
 800ffa8:	2b09      	cmp	r3, #9
 800ffaa:	d80b      	bhi.n	800ffc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	0f1b      	lsrs	r3, r3, #28
 800ffb0:	b2da      	uxtb	r2, r3
 800ffb2:	7dfb      	ldrb	r3, [r7, #23]
 800ffb4:	005b      	lsls	r3, r3, #1
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	440b      	add	r3, r1
 800ffbc:	3230      	adds	r2, #48	; 0x30
 800ffbe:	b2d2      	uxtb	r2, r2
 800ffc0:	701a      	strb	r2, [r3, #0]
 800ffc2:	e00a      	b.n	800ffda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	0f1b      	lsrs	r3, r3, #28
 800ffc8:	b2da      	uxtb	r2, r3
 800ffca:	7dfb      	ldrb	r3, [r7, #23]
 800ffcc:	005b      	lsls	r3, r3, #1
 800ffce:	4619      	mov	r1, r3
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	440b      	add	r3, r1
 800ffd4:	3237      	adds	r2, #55	; 0x37
 800ffd6:	b2d2      	uxtb	r2, r2
 800ffd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	011b      	lsls	r3, r3, #4
 800ffde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ffe0:	7dfb      	ldrb	r3, [r7, #23]
 800ffe2:	005b      	lsls	r3, r3, #1
 800ffe4:	3301      	adds	r3, #1
 800ffe6:	68ba      	ldr	r2, [r7, #8]
 800ffe8:	4413      	add	r3, r2
 800ffea:	2200      	movs	r2, #0
 800ffec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ffee:	7dfb      	ldrb	r3, [r7, #23]
 800fff0:	3301      	adds	r3, #1
 800fff2:	75fb      	strb	r3, [r7, #23]
 800fff4:	7dfa      	ldrb	r2, [r7, #23]
 800fff6:	79fb      	ldrb	r3, [r7, #7]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d3d3      	bcc.n	800ffa4 <IntToUnicode+0x18>
  }
}
 800fffc:	bf00      	nop
 800fffe:	bf00      	nop
 8010000:	371c      	adds	r7, #28
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr
	...

0801000c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b084      	sub	sp, #16
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	4a0d      	ldr	r2, [pc, #52]	; (8010050 <HAL_PCD_MspInit+0x44>)
 801001a:	4293      	cmp	r3, r2
 801001c:	d113      	bne.n	8010046 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801001e:	4b0d      	ldr	r3, [pc, #52]	; (8010054 <HAL_PCD_MspInit+0x48>)
 8010020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010022:	4a0c      	ldr	r2, [pc, #48]	; (8010054 <HAL_PCD_MspInit+0x48>)
 8010024:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010028:	6593      	str	r3, [r2, #88]	; 0x58
 801002a:	4b0a      	ldr	r3, [pc, #40]	; (8010054 <HAL_PCD_MspInit+0x48>)
 801002c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801002e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010032:	60fb      	str	r3, [r7, #12]
 8010034:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8010036:	2200      	movs	r2, #0
 8010038:	2100      	movs	r1, #0
 801003a:	2043      	movs	r0, #67	; 0x43
 801003c:	f7f5 ff05 	bl	8005e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8010040:	2043      	movs	r0, #67	; 0x43
 8010042:	f7f5 ff1e 	bl	8005e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010046:	bf00      	nop
 8010048:	3710      	adds	r7, #16
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}
 801004e:	bf00      	nop
 8010050:	40006800 	.word	0x40006800
 8010054:	40021000 	.word	0x40021000

08010058 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 801006c:	4619      	mov	r1, r3
 801006e:	4610      	mov	r0, r2
 8010070:	f7fe fcc3 	bl	800e9fa <USBD_LL_SetupStage>
}
 8010074:	bf00      	nop
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}

0801007c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	460b      	mov	r3, r1
 8010086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 801008e:	78fa      	ldrb	r2, [r7, #3]
 8010090:	6879      	ldr	r1, [r7, #4]
 8010092:	4613      	mov	r3, r2
 8010094:	009b      	lsls	r3, r3, #2
 8010096:	4413      	add	r3, r2
 8010098:	00db      	lsls	r3, r3, #3
 801009a:	440b      	add	r3, r1
 801009c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80100a0:	681a      	ldr	r2, [r3, #0]
 80100a2:	78fb      	ldrb	r3, [r7, #3]
 80100a4:	4619      	mov	r1, r3
 80100a6:	f7fe fcfd 	bl	800eaa4 <USBD_LL_DataOutStage>
}
 80100aa:	bf00      	nop
 80100ac:	3708      	adds	r7, #8
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}

080100b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100b2:	b580      	push	{r7, lr}
 80100b4:	b082      	sub	sp, #8
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	6078      	str	r0, [r7, #4]
 80100ba:	460b      	mov	r3, r1
 80100bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 80100c4:	78fa      	ldrb	r2, [r7, #3]
 80100c6:	6879      	ldr	r1, [r7, #4]
 80100c8:	4613      	mov	r3, r2
 80100ca:	009b      	lsls	r3, r3, #2
 80100cc:	4413      	add	r3, r2
 80100ce:	00db      	lsls	r3, r3, #3
 80100d0:	440b      	add	r3, r1
 80100d2:	333c      	adds	r3, #60	; 0x3c
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	78fb      	ldrb	r3, [r7, #3]
 80100d8:	4619      	mov	r1, r3
 80100da:	f7fe fd96 	bl	800ec0a <USBD_LL_DataInStage>
}
 80100de:	bf00      	nop
 80100e0:	3708      	adds	r7, #8
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}

080100e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b082      	sub	sp, #8
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7fe fed0 	bl	800ee9a <USBD_LL_SOF>
}
 80100fa:	bf00      	nop
 80100fc:	3708      	adds	r7, #8
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}

08010102 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010102:	b580      	push	{r7, lr}
 8010104:	b084      	sub	sp, #16
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801010a:	2301      	movs	r3, #1
 801010c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	689b      	ldr	r3, [r3, #8]
 8010112:	2b02      	cmp	r3, #2
 8010114:	d001      	beq.n	801011a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010116:	f7f1 fc4b 	bl	80019b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010120:	7bfa      	ldrb	r2, [r7, #15]
 8010122:	4611      	mov	r1, r2
 8010124:	4618      	mov	r0, r3
 8010126:	f7fe fe74 	bl	800ee12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8010130:	4618      	mov	r0, r3
 8010132:	f7fe fe1c 	bl	800ed6e <USBD_LL_Reset>
}
 8010136:	bf00      	nop
 8010138:	3710      	adds	r7, #16
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
	...

08010140 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b082      	sub	sp, #8
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801014e:	4618      	mov	r0, r3
 8010150:	f7fe fe6f 	bl	800ee32 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	699b      	ldr	r3, [r3, #24]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d005      	beq.n	8010168 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801015c:	4b04      	ldr	r3, [pc, #16]	; (8010170 <HAL_PCD_SuspendCallback+0x30>)
 801015e:	691b      	ldr	r3, [r3, #16]
 8010160:	4a03      	ldr	r2, [pc, #12]	; (8010170 <HAL_PCD_SuspendCallback+0x30>)
 8010162:	f043 0306 	orr.w	r3, r3, #6
 8010166:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010168:	bf00      	nop
 801016a:	3708      	adds	r7, #8
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}
 8010170:	e000ed00 	.word	0xe000ed00

08010174 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	699b      	ldr	r3, [r3, #24]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d007      	beq.n	8010194 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010184:	4b08      	ldr	r3, [pc, #32]	; (80101a8 <HAL_PCD_ResumeCallback+0x34>)
 8010186:	691b      	ldr	r3, [r3, #16]
 8010188:	4a07      	ldr	r2, [pc, #28]	; (80101a8 <HAL_PCD_ResumeCallback+0x34>)
 801018a:	f023 0306 	bic.w	r3, r3, #6
 801018e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010190:	f000 fa90 	bl	80106b4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801019a:	4618      	mov	r0, r3
 801019c:	f7fe fe65 	bl	800ee6a <USBD_LL_Resume>
}
 80101a0:	bf00      	nop
 80101a2:	3708      	adds	r7, #8
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}
 80101a8:	e000ed00 	.word	0xe000ed00

080101ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80101b4:	f7f8 fd12 	bl	8008bdc <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80101b8:	4a22      	ldr	r2, [pc, #136]	; (8010244 <USBD_LL_Init+0x98>)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	4a20      	ldr	r2, [pc, #128]	; (8010244 <USBD_LL_Init+0x98>)
 80101c4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 80101c8:	4b1e      	ldr	r3, [pc, #120]	; (8010244 <USBD_LL_Init+0x98>)
 80101ca:	4a1f      	ldr	r2, [pc, #124]	; (8010248 <USBD_LL_Init+0x9c>)
 80101cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80101ce:	4b1d      	ldr	r3, [pc, #116]	; (8010244 <USBD_LL_Init+0x98>)
 80101d0:	2208      	movs	r2, #8
 80101d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80101d4:	4b1b      	ldr	r3, [pc, #108]	; (8010244 <USBD_LL_Init+0x98>)
 80101d6:	2202      	movs	r2, #2
 80101d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80101da:	4b1a      	ldr	r3, [pc, #104]	; (8010244 <USBD_LL_Init+0x98>)
 80101dc:	2202      	movs	r2, #2
 80101de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80101e0:	4b18      	ldr	r3, [pc, #96]	; (8010244 <USBD_LL_Init+0x98>)
 80101e2:	2200      	movs	r2, #0
 80101e4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80101e6:	4b17      	ldr	r3, [pc, #92]	; (8010244 <USBD_LL_Init+0x98>)
 80101e8:	2200      	movs	r2, #0
 80101ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80101ec:	4b15      	ldr	r3, [pc, #84]	; (8010244 <USBD_LL_Init+0x98>)
 80101ee:	2200      	movs	r2, #0
 80101f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80101f2:	4b14      	ldr	r3, [pc, #80]	; (8010244 <USBD_LL_Init+0x98>)
 80101f4:	2200      	movs	r2, #0
 80101f6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80101f8:	4812      	ldr	r0, [pc, #72]	; (8010244 <USBD_LL_Init+0x98>)
 80101fa:	f7f6 ff24 	bl	8007046 <HAL_PCD_Init>
 80101fe:	4603      	mov	r3, r0
 8010200:	2b00      	cmp	r3, #0
 8010202:	d001      	beq.n	8010208 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8010204:	f7f1 fbd4 	bl	80019b0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801020e:	2318      	movs	r3, #24
 8010210:	2200      	movs	r2, #0
 8010212:	2100      	movs	r1, #0
 8010214:	f7f8 fc10 	bl	8008a38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801021e:	2358      	movs	r3, #88	; 0x58
 8010220:	2200      	movs	r2, #0
 8010222:	2180      	movs	r1, #128	; 0x80
 8010224:	f7f8 fc08 	bl	8008a38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801022e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010232:	2200      	movs	r2, #0
 8010234:	2181      	movs	r1, #129	; 0x81
 8010236:	f7f8 fbff 	bl	8008a38 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 801023a:	2300      	movs	r3, #0
}
 801023c:	4618      	mov	r0, r3
 801023e:	3708      	adds	r7, #8
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}
 8010244:	200011ec 	.word	0x200011ec
 8010248:	40006800 	.word	0x40006800

0801024c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010254:	2300      	movs	r3, #0
 8010256:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010258:	2300      	movs	r3, #0
 801025a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010262:	4618      	mov	r0, r3
 8010264:	f7f6 fff5 	bl	8007252 <HAL_PCD_Start>
 8010268:	4603      	mov	r3, r0
 801026a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801026c:	7bbb      	ldrb	r3, [r7, #14]
 801026e:	2b03      	cmp	r3, #3
 8010270:	d816      	bhi.n	80102a0 <USBD_LL_Start+0x54>
 8010272:	a201      	add	r2, pc, #4	; (adr r2, 8010278 <USBD_LL_Start+0x2c>)
 8010274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010278:	08010289 	.word	0x08010289
 801027c:	0801028f 	.word	0x0801028f
 8010280:	08010295 	.word	0x08010295
 8010284:	0801029b 	.word	0x0801029b
    case HAL_OK :
      usb_status = USBD_OK;
 8010288:	2300      	movs	r3, #0
 801028a:	73fb      	strb	r3, [r7, #15]
    break;
 801028c:	e00b      	b.n	80102a6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801028e:	2303      	movs	r3, #3
 8010290:	73fb      	strb	r3, [r7, #15]
    break;
 8010292:	e008      	b.n	80102a6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010294:	2301      	movs	r3, #1
 8010296:	73fb      	strb	r3, [r7, #15]
    break;
 8010298:	e005      	b.n	80102a6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801029a:	2303      	movs	r3, #3
 801029c:	73fb      	strb	r3, [r7, #15]
    break;
 801029e:	e002      	b.n	80102a6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80102a0:	2303      	movs	r3, #3
 80102a2:	73fb      	strb	r3, [r7, #15]
    break;
 80102a4:	bf00      	nop
  }
  return usb_status;
 80102a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3710      	adds	r7, #16
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	4608      	mov	r0, r1
 80102ba:	4611      	mov	r1, r2
 80102bc:	461a      	mov	r2, r3
 80102be:	4603      	mov	r3, r0
 80102c0:	70fb      	strb	r3, [r7, #3]
 80102c2:	460b      	mov	r3, r1
 80102c4:	70bb      	strb	r3, [r7, #2]
 80102c6:	4613      	mov	r3, r2
 80102c8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102ca:	2300      	movs	r3, #0
 80102cc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102ce:	2300      	movs	r3, #0
 80102d0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80102d8:	78bb      	ldrb	r3, [r7, #2]
 80102da:	883a      	ldrh	r2, [r7, #0]
 80102dc:	78f9      	ldrb	r1, [r7, #3]
 80102de:	f7f7 f926 	bl	800752e <HAL_PCD_EP_Open>
 80102e2:	4603      	mov	r3, r0
 80102e4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80102e6:	7bbb      	ldrb	r3, [r7, #14]
 80102e8:	2b03      	cmp	r3, #3
 80102ea:	d817      	bhi.n	801031c <USBD_LL_OpenEP+0x6c>
 80102ec:	a201      	add	r2, pc, #4	; (adr r2, 80102f4 <USBD_LL_OpenEP+0x44>)
 80102ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102f2:	bf00      	nop
 80102f4:	08010305 	.word	0x08010305
 80102f8:	0801030b 	.word	0x0801030b
 80102fc:	08010311 	.word	0x08010311
 8010300:	08010317 	.word	0x08010317
    case HAL_OK :
      usb_status = USBD_OK;
 8010304:	2300      	movs	r3, #0
 8010306:	73fb      	strb	r3, [r7, #15]
    break;
 8010308:	e00b      	b.n	8010322 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801030a:	2303      	movs	r3, #3
 801030c:	73fb      	strb	r3, [r7, #15]
    break;
 801030e:	e008      	b.n	8010322 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010310:	2301      	movs	r3, #1
 8010312:	73fb      	strb	r3, [r7, #15]
    break;
 8010314:	e005      	b.n	8010322 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010316:	2303      	movs	r3, #3
 8010318:	73fb      	strb	r3, [r7, #15]
    break;
 801031a:	e002      	b.n	8010322 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 801031c:	2303      	movs	r3, #3
 801031e:	73fb      	strb	r3, [r7, #15]
    break;
 8010320:	bf00      	nop
  }
  return usb_status;
 8010322:	7bfb      	ldrb	r3, [r7, #15]
}
 8010324:	4618      	mov	r0, r3
 8010326:	3710      	adds	r7, #16
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}

0801032c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b084      	sub	sp, #16
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	460b      	mov	r3, r1
 8010336:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010338:	2300      	movs	r3, #0
 801033a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801033c:	2300      	movs	r3, #0
 801033e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010346:	78fa      	ldrb	r2, [r7, #3]
 8010348:	4611      	mov	r1, r2
 801034a:	4618      	mov	r0, r3
 801034c:	f7f7 f94c 	bl	80075e8 <HAL_PCD_EP_Close>
 8010350:	4603      	mov	r3, r0
 8010352:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8010354:	7bbb      	ldrb	r3, [r7, #14]
 8010356:	2b03      	cmp	r3, #3
 8010358:	d816      	bhi.n	8010388 <USBD_LL_CloseEP+0x5c>
 801035a:	a201      	add	r2, pc, #4	; (adr r2, 8010360 <USBD_LL_CloseEP+0x34>)
 801035c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010360:	08010371 	.word	0x08010371
 8010364:	08010377 	.word	0x08010377
 8010368:	0801037d 	.word	0x0801037d
 801036c:	08010383 	.word	0x08010383
    case HAL_OK :
      usb_status = USBD_OK;
 8010370:	2300      	movs	r3, #0
 8010372:	73fb      	strb	r3, [r7, #15]
    break;
 8010374:	e00b      	b.n	801038e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010376:	2303      	movs	r3, #3
 8010378:	73fb      	strb	r3, [r7, #15]
    break;
 801037a:	e008      	b.n	801038e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801037c:	2301      	movs	r3, #1
 801037e:	73fb      	strb	r3, [r7, #15]
    break;
 8010380:	e005      	b.n	801038e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010382:	2303      	movs	r3, #3
 8010384:	73fb      	strb	r3, [r7, #15]
    break;
 8010386:	e002      	b.n	801038e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010388:	2303      	movs	r3, #3
 801038a:	73fb      	strb	r3, [r7, #15]
    break;
 801038c:	bf00      	nop
  }
  return usb_status;
 801038e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010390:	4618      	mov	r0, r3
 8010392:	3710      	adds	r7, #16
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}

08010398 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	460b      	mov	r3, r1
 80103a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103a4:	2300      	movs	r3, #0
 80103a6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103a8:	2300      	movs	r3, #0
 80103aa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80103b2:	78fa      	ldrb	r2, [r7, #3]
 80103b4:	4611      	mov	r1, r2
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7f7 f9c6 	bl	8007748 <HAL_PCD_EP_SetStall>
 80103bc:	4603      	mov	r3, r0
 80103be:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80103c0:	7bbb      	ldrb	r3, [r7, #14]
 80103c2:	2b03      	cmp	r3, #3
 80103c4:	d816      	bhi.n	80103f4 <USBD_LL_StallEP+0x5c>
 80103c6:	a201      	add	r2, pc, #4	; (adr r2, 80103cc <USBD_LL_StallEP+0x34>)
 80103c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103cc:	080103dd 	.word	0x080103dd
 80103d0:	080103e3 	.word	0x080103e3
 80103d4:	080103e9 	.word	0x080103e9
 80103d8:	080103ef 	.word	0x080103ef
    case HAL_OK :
      usb_status = USBD_OK;
 80103dc:	2300      	movs	r3, #0
 80103de:	73fb      	strb	r3, [r7, #15]
    break;
 80103e0:	e00b      	b.n	80103fa <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80103e2:	2303      	movs	r3, #3
 80103e4:	73fb      	strb	r3, [r7, #15]
    break;
 80103e6:	e008      	b.n	80103fa <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80103e8:	2301      	movs	r3, #1
 80103ea:	73fb      	strb	r3, [r7, #15]
    break;
 80103ec:	e005      	b.n	80103fa <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80103ee:	2303      	movs	r3, #3
 80103f0:	73fb      	strb	r3, [r7, #15]
    break;
 80103f2:	e002      	b.n	80103fa <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80103f4:	2303      	movs	r3, #3
 80103f6:	73fb      	strb	r3, [r7, #15]
    break;
 80103f8:	bf00      	nop
  }
  return usb_status;
 80103fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3710      	adds	r7, #16
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b084      	sub	sp, #16
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	460b      	mov	r3, r1
 801040e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010410:	2300      	movs	r3, #0
 8010412:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010414:	2300      	movs	r3, #0
 8010416:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801041e:	78fa      	ldrb	r2, [r7, #3]
 8010420:	4611      	mov	r1, r2
 8010422:	4618      	mov	r0, r3
 8010424:	f7f7 f9f0 	bl	8007808 <HAL_PCD_EP_ClrStall>
 8010428:	4603      	mov	r3, r0
 801042a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801042c:	7bbb      	ldrb	r3, [r7, #14]
 801042e:	2b03      	cmp	r3, #3
 8010430:	d816      	bhi.n	8010460 <USBD_LL_ClearStallEP+0x5c>
 8010432:	a201      	add	r2, pc, #4	; (adr r2, 8010438 <USBD_LL_ClearStallEP+0x34>)
 8010434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010438:	08010449 	.word	0x08010449
 801043c:	0801044f 	.word	0x0801044f
 8010440:	08010455 	.word	0x08010455
 8010444:	0801045b 	.word	0x0801045b
    case HAL_OK :
      usb_status = USBD_OK;
 8010448:	2300      	movs	r3, #0
 801044a:	73fb      	strb	r3, [r7, #15]
    break;
 801044c:	e00b      	b.n	8010466 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801044e:	2303      	movs	r3, #3
 8010450:	73fb      	strb	r3, [r7, #15]
    break;
 8010452:	e008      	b.n	8010466 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010454:	2301      	movs	r3, #1
 8010456:	73fb      	strb	r3, [r7, #15]
    break;
 8010458:	e005      	b.n	8010466 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801045a:	2303      	movs	r3, #3
 801045c:	73fb      	strb	r3, [r7, #15]
    break;
 801045e:	e002      	b.n	8010466 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8010460:	2303      	movs	r3, #3
 8010462:	73fb      	strb	r3, [r7, #15]
    break;
 8010464:	bf00      	nop
  }
  return usb_status;
 8010466:	7bfb      	ldrb	r3, [r7, #15]
}
 8010468:	4618      	mov	r0, r3
 801046a:	3710      	adds	r7, #16
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010470:	b480      	push	{r7}
 8010472:	b085      	sub	sp, #20
 8010474:	af00      	add	r7, sp, #0
 8010476:	6078      	str	r0, [r7, #4]
 8010478:	460b      	mov	r3, r1
 801047a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010482:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010484:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010488:	2b00      	cmp	r3, #0
 801048a:	da0c      	bge.n	80104a6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801048c:	78fb      	ldrb	r3, [r7, #3]
 801048e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010492:	68f9      	ldr	r1, [r7, #12]
 8010494:	1c5a      	adds	r2, r3, #1
 8010496:	4613      	mov	r3, r2
 8010498:	009b      	lsls	r3, r3, #2
 801049a:	4413      	add	r3, r2
 801049c:	00db      	lsls	r3, r3, #3
 801049e:	440b      	add	r3, r1
 80104a0:	3302      	adds	r3, #2
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	e00b      	b.n	80104be <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80104a6:	78fb      	ldrb	r3, [r7, #3]
 80104a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80104ac:	68f9      	ldr	r1, [r7, #12]
 80104ae:	4613      	mov	r3, r2
 80104b0:	009b      	lsls	r3, r3, #2
 80104b2:	4413      	add	r3, r2
 80104b4:	00db      	lsls	r3, r3, #3
 80104b6:	440b      	add	r3, r1
 80104b8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80104bc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3714      	adds	r7, #20
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr
	...

080104cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b084      	sub	sp, #16
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	460b      	mov	r3, r1
 80104d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104d8:	2300      	movs	r3, #0
 80104da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104dc:	2300      	movs	r3, #0
 80104de:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80104e6:	78fa      	ldrb	r2, [r7, #3]
 80104e8:	4611      	mov	r1, r2
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7f6 fffa 	bl	80074e4 <HAL_PCD_SetAddress>
 80104f0:	4603      	mov	r3, r0
 80104f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80104f4:	7bbb      	ldrb	r3, [r7, #14]
 80104f6:	2b03      	cmp	r3, #3
 80104f8:	d816      	bhi.n	8010528 <USBD_LL_SetUSBAddress+0x5c>
 80104fa:	a201      	add	r2, pc, #4	; (adr r2, 8010500 <USBD_LL_SetUSBAddress+0x34>)
 80104fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010500:	08010511 	.word	0x08010511
 8010504:	08010517 	.word	0x08010517
 8010508:	0801051d 	.word	0x0801051d
 801050c:	08010523 	.word	0x08010523
    case HAL_OK :
      usb_status = USBD_OK;
 8010510:	2300      	movs	r3, #0
 8010512:	73fb      	strb	r3, [r7, #15]
    break;
 8010514:	e00b      	b.n	801052e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010516:	2303      	movs	r3, #3
 8010518:	73fb      	strb	r3, [r7, #15]
    break;
 801051a:	e008      	b.n	801052e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801051c:	2301      	movs	r3, #1
 801051e:	73fb      	strb	r3, [r7, #15]
    break;
 8010520:	e005      	b.n	801052e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010522:	2303      	movs	r3, #3
 8010524:	73fb      	strb	r3, [r7, #15]
    break;
 8010526:	e002      	b.n	801052e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8010528:	2303      	movs	r3, #3
 801052a:	73fb      	strb	r3, [r7, #15]
    break;
 801052c:	bf00      	nop
  }
  return usb_status;
 801052e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010530:	4618      	mov	r0, r3
 8010532:	3710      	adds	r7, #16
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b086      	sub	sp, #24
 801053c:	af00      	add	r7, sp, #0
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	607a      	str	r2, [r7, #4]
 8010542:	603b      	str	r3, [r7, #0]
 8010544:	460b      	mov	r3, r1
 8010546:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010548:	2300      	movs	r3, #0
 801054a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801054c:	2300      	movs	r3, #0
 801054e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010556:	7af9      	ldrb	r1, [r7, #11]
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	687a      	ldr	r2, [r7, #4]
 801055c:	f7f7 f8bd 	bl	80076da <HAL_PCD_EP_Transmit>
 8010560:	4603      	mov	r3, r0
 8010562:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8010564:	7dbb      	ldrb	r3, [r7, #22]
 8010566:	2b03      	cmp	r3, #3
 8010568:	d816      	bhi.n	8010598 <USBD_LL_Transmit+0x60>
 801056a:	a201      	add	r2, pc, #4	; (adr r2, 8010570 <USBD_LL_Transmit+0x38>)
 801056c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010570:	08010581 	.word	0x08010581
 8010574:	08010587 	.word	0x08010587
 8010578:	0801058d 	.word	0x0801058d
 801057c:	08010593 	.word	0x08010593
    case HAL_OK :
      usb_status = USBD_OK;
 8010580:	2300      	movs	r3, #0
 8010582:	75fb      	strb	r3, [r7, #23]
    break;
 8010584:	e00b      	b.n	801059e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010586:	2303      	movs	r3, #3
 8010588:	75fb      	strb	r3, [r7, #23]
    break;
 801058a:	e008      	b.n	801059e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801058c:	2301      	movs	r3, #1
 801058e:	75fb      	strb	r3, [r7, #23]
    break;
 8010590:	e005      	b.n	801059e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010592:	2303      	movs	r3, #3
 8010594:	75fb      	strb	r3, [r7, #23]
    break;
 8010596:	e002      	b.n	801059e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8010598:	2303      	movs	r3, #3
 801059a:	75fb      	strb	r3, [r7, #23]
    break;
 801059c:	bf00      	nop
  }
  return usb_status;
 801059e:	7dfb      	ldrb	r3, [r7, #23]
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	3718      	adds	r7, #24
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b086      	sub	sp, #24
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	60f8      	str	r0, [r7, #12]
 80105b0:	607a      	str	r2, [r7, #4]
 80105b2:	603b      	str	r3, [r7, #0]
 80105b4:	460b      	mov	r3, r1
 80105b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105b8:	2300      	movs	r3, #0
 80105ba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105bc:	2300      	movs	r3, #0
 80105be:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80105c6:	7af9      	ldrb	r1, [r7, #11]
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	687a      	ldr	r2, [r7, #4]
 80105cc:	f7f7 f854 	bl	8007678 <HAL_PCD_EP_Receive>
 80105d0:	4603      	mov	r3, r0
 80105d2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80105d4:	7dbb      	ldrb	r3, [r7, #22]
 80105d6:	2b03      	cmp	r3, #3
 80105d8:	d816      	bhi.n	8010608 <USBD_LL_PrepareReceive+0x60>
 80105da:	a201      	add	r2, pc, #4	; (adr r2, 80105e0 <USBD_LL_PrepareReceive+0x38>)
 80105dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105e0:	080105f1 	.word	0x080105f1
 80105e4:	080105f7 	.word	0x080105f7
 80105e8:	080105fd 	.word	0x080105fd
 80105ec:	08010603 	.word	0x08010603
    case HAL_OK :
      usb_status = USBD_OK;
 80105f0:	2300      	movs	r3, #0
 80105f2:	75fb      	strb	r3, [r7, #23]
    break;
 80105f4:	e00b      	b.n	801060e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80105f6:	2303      	movs	r3, #3
 80105f8:	75fb      	strb	r3, [r7, #23]
    break;
 80105fa:	e008      	b.n	801060e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80105fc:	2301      	movs	r3, #1
 80105fe:	75fb      	strb	r3, [r7, #23]
    break;
 8010600:	e005      	b.n	801060e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010602:	2303      	movs	r3, #3
 8010604:	75fb      	strb	r3, [r7, #23]
    break;
 8010606:	e002      	b.n	801060e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8010608:	2303      	movs	r3, #3
 801060a:	75fb      	strb	r3, [r7, #23]
    break;
 801060c:	bf00      	nop
  }
  return usb_status;
 801060e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3718      	adds	r7, #24
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	460b      	mov	r3, r1
 8010622:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8010624:	78fb      	ldrb	r3, [r7, #3]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d002      	beq.n	8010630 <HAL_PCDEx_LPM_Callback+0x18>
 801062a:	2b01      	cmp	r3, #1
 801062c:	d013      	beq.n	8010656 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801062e:	e023      	b.n	8010678 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	699b      	ldr	r3, [r3, #24]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d007      	beq.n	8010648 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010638:	f000 f83c 	bl	80106b4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801063c:	4b10      	ldr	r3, [pc, #64]	; (8010680 <HAL_PCDEx_LPM_Callback+0x68>)
 801063e:	691b      	ldr	r3, [r3, #16]
 8010640:	4a0f      	ldr	r2, [pc, #60]	; (8010680 <HAL_PCDEx_LPM_Callback+0x68>)
 8010642:	f023 0306 	bic.w	r3, r3, #6
 8010646:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801064e:	4618      	mov	r0, r3
 8010650:	f7fe fc0b 	bl	800ee6a <USBD_LL_Resume>
    break;
 8010654:	e010      	b.n	8010678 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801065c:	4618      	mov	r0, r3
 801065e:	f7fe fbe8 	bl	800ee32 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	699b      	ldr	r3, [r3, #24]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d005      	beq.n	8010676 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801066a:	4b05      	ldr	r3, [pc, #20]	; (8010680 <HAL_PCDEx_LPM_Callback+0x68>)
 801066c:	691b      	ldr	r3, [r3, #16]
 801066e:	4a04      	ldr	r2, [pc, #16]	; (8010680 <HAL_PCDEx_LPM_Callback+0x68>)
 8010670:	f043 0306 	orr.w	r3, r3, #6
 8010674:	6113      	str	r3, [r2, #16]
    break;
 8010676:	bf00      	nop
}
 8010678:	bf00      	nop
 801067a:	3708      	adds	r7, #8
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}
 8010680:	e000ed00 	.word	0xe000ed00

08010684 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010684:	b480      	push	{r7}
 8010686:	b083      	sub	sp, #12
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801068c:	4b03      	ldr	r3, [pc, #12]	; (801069c <USBD_static_malloc+0x18>)
}
 801068e:	4618      	mov	r0, r3
 8010690:	370c      	adds	r7, #12
 8010692:	46bd      	mov	sp, r7
 8010694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010698:	4770      	bx	lr
 801069a:	bf00      	nop
 801069c:	200014e4 	.word	0x200014e4

080106a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80106a0:	b480      	push	{r7}
 80106a2:	b083      	sub	sp, #12
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]

}
 80106a8:	bf00      	nop
 80106aa:	370c      	adds	r7, #12
 80106ac:	46bd      	mov	sp, r7
 80106ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b2:	4770      	bx	lr

080106b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80106b8:	f7f0 fe9a 	bl	80013f0 <SystemClock_Config>
}
 80106bc:	bf00      	nop
 80106be:	bd80      	pop	{r7, pc}

080106c0 <malloc>:
 80106c0:	4b02      	ldr	r3, [pc, #8]	; (80106cc <malloc+0xc>)
 80106c2:	4601      	mov	r1, r0
 80106c4:	6818      	ldr	r0, [r3, #0]
 80106c6:	f000 b82b 	b.w	8010720 <_malloc_r>
 80106ca:	bf00      	nop
 80106cc:	20000304 	.word	0x20000304

080106d0 <free>:
 80106d0:	4b02      	ldr	r3, [pc, #8]	; (80106dc <free+0xc>)
 80106d2:	4601      	mov	r1, r0
 80106d4:	6818      	ldr	r0, [r3, #0]
 80106d6:	f002 bf55 	b.w	8013584 <_free_r>
 80106da:	bf00      	nop
 80106dc:	20000304 	.word	0x20000304

080106e0 <sbrk_aligned>:
 80106e0:	b570      	push	{r4, r5, r6, lr}
 80106e2:	4e0e      	ldr	r6, [pc, #56]	; (801071c <sbrk_aligned+0x3c>)
 80106e4:	460c      	mov	r4, r1
 80106e6:	6831      	ldr	r1, [r6, #0]
 80106e8:	4605      	mov	r5, r0
 80106ea:	b911      	cbnz	r1, 80106f2 <sbrk_aligned+0x12>
 80106ec:	f002 f83e 	bl	801276c <_sbrk_r>
 80106f0:	6030      	str	r0, [r6, #0]
 80106f2:	4621      	mov	r1, r4
 80106f4:	4628      	mov	r0, r5
 80106f6:	f002 f839 	bl	801276c <_sbrk_r>
 80106fa:	1c43      	adds	r3, r0, #1
 80106fc:	d00a      	beq.n	8010714 <sbrk_aligned+0x34>
 80106fe:	1cc4      	adds	r4, r0, #3
 8010700:	f024 0403 	bic.w	r4, r4, #3
 8010704:	42a0      	cmp	r0, r4
 8010706:	d007      	beq.n	8010718 <sbrk_aligned+0x38>
 8010708:	1a21      	subs	r1, r4, r0
 801070a:	4628      	mov	r0, r5
 801070c:	f002 f82e 	bl	801276c <_sbrk_r>
 8010710:	3001      	adds	r0, #1
 8010712:	d101      	bne.n	8010718 <sbrk_aligned+0x38>
 8010714:	f04f 34ff 	mov.w	r4, #4294967295
 8010718:	4620      	mov	r0, r4
 801071a:	bd70      	pop	{r4, r5, r6, pc}
 801071c:	200014fc 	.word	0x200014fc

08010720 <_malloc_r>:
 8010720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010724:	1ccd      	adds	r5, r1, #3
 8010726:	f025 0503 	bic.w	r5, r5, #3
 801072a:	3508      	adds	r5, #8
 801072c:	2d0c      	cmp	r5, #12
 801072e:	bf38      	it	cc
 8010730:	250c      	movcc	r5, #12
 8010732:	2d00      	cmp	r5, #0
 8010734:	4607      	mov	r7, r0
 8010736:	db01      	blt.n	801073c <_malloc_r+0x1c>
 8010738:	42a9      	cmp	r1, r5
 801073a:	d905      	bls.n	8010748 <_malloc_r+0x28>
 801073c:	230c      	movs	r3, #12
 801073e:	603b      	str	r3, [r7, #0]
 8010740:	2600      	movs	r6, #0
 8010742:	4630      	mov	r0, r6
 8010744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010748:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801081c <_malloc_r+0xfc>
 801074c:	f000 f868 	bl	8010820 <__malloc_lock>
 8010750:	f8d8 3000 	ldr.w	r3, [r8]
 8010754:	461c      	mov	r4, r3
 8010756:	bb5c      	cbnz	r4, 80107b0 <_malloc_r+0x90>
 8010758:	4629      	mov	r1, r5
 801075a:	4638      	mov	r0, r7
 801075c:	f7ff ffc0 	bl	80106e0 <sbrk_aligned>
 8010760:	1c43      	adds	r3, r0, #1
 8010762:	4604      	mov	r4, r0
 8010764:	d155      	bne.n	8010812 <_malloc_r+0xf2>
 8010766:	f8d8 4000 	ldr.w	r4, [r8]
 801076a:	4626      	mov	r6, r4
 801076c:	2e00      	cmp	r6, #0
 801076e:	d145      	bne.n	80107fc <_malloc_r+0xdc>
 8010770:	2c00      	cmp	r4, #0
 8010772:	d048      	beq.n	8010806 <_malloc_r+0xe6>
 8010774:	6823      	ldr	r3, [r4, #0]
 8010776:	4631      	mov	r1, r6
 8010778:	4638      	mov	r0, r7
 801077a:	eb04 0903 	add.w	r9, r4, r3
 801077e:	f001 fff5 	bl	801276c <_sbrk_r>
 8010782:	4581      	cmp	r9, r0
 8010784:	d13f      	bne.n	8010806 <_malloc_r+0xe6>
 8010786:	6821      	ldr	r1, [r4, #0]
 8010788:	1a6d      	subs	r5, r5, r1
 801078a:	4629      	mov	r1, r5
 801078c:	4638      	mov	r0, r7
 801078e:	f7ff ffa7 	bl	80106e0 <sbrk_aligned>
 8010792:	3001      	adds	r0, #1
 8010794:	d037      	beq.n	8010806 <_malloc_r+0xe6>
 8010796:	6823      	ldr	r3, [r4, #0]
 8010798:	442b      	add	r3, r5
 801079a:	6023      	str	r3, [r4, #0]
 801079c:	f8d8 3000 	ldr.w	r3, [r8]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d038      	beq.n	8010816 <_malloc_r+0xf6>
 80107a4:	685a      	ldr	r2, [r3, #4]
 80107a6:	42a2      	cmp	r2, r4
 80107a8:	d12b      	bne.n	8010802 <_malloc_r+0xe2>
 80107aa:	2200      	movs	r2, #0
 80107ac:	605a      	str	r2, [r3, #4]
 80107ae:	e00f      	b.n	80107d0 <_malloc_r+0xb0>
 80107b0:	6822      	ldr	r2, [r4, #0]
 80107b2:	1b52      	subs	r2, r2, r5
 80107b4:	d41f      	bmi.n	80107f6 <_malloc_r+0xd6>
 80107b6:	2a0b      	cmp	r2, #11
 80107b8:	d917      	bls.n	80107ea <_malloc_r+0xca>
 80107ba:	1961      	adds	r1, r4, r5
 80107bc:	42a3      	cmp	r3, r4
 80107be:	6025      	str	r5, [r4, #0]
 80107c0:	bf18      	it	ne
 80107c2:	6059      	strne	r1, [r3, #4]
 80107c4:	6863      	ldr	r3, [r4, #4]
 80107c6:	bf08      	it	eq
 80107c8:	f8c8 1000 	streq.w	r1, [r8]
 80107cc:	5162      	str	r2, [r4, r5]
 80107ce:	604b      	str	r3, [r1, #4]
 80107d0:	4638      	mov	r0, r7
 80107d2:	f104 060b 	add.w	r6, r4, #11
 80107d6:	f000 f829 	bl	801082c <__malloc_unlock>
 80107da:	f026 0607 	bic.w	r6, r6, #7
 80107de:	1d23      	adds	r3, r4, #4
 80107e0:	1af2      	subs	r2, r6, r3
 80107e2:	d0ae      	beq.n	8010742 <_malloc_r+0x22>
 80107e4:	1b9b      	subs	r3, r3, r6
 80107e6:	50a3      	str	r3, [r4, r2]
 80107e8:	e7ab      	b.n	8010742 <_malloc_r+0x22>
 80107ea:	42a3      	cmp	r3, r4
 80107ec:	6862      	ldr	r2, [r4, #4]
 80107ee:	d1dd      	bne.n	80107ac <_malloc_r+0x8c>
 80107f0:	f8c8 2000 	str.w	r2, [r8]
 80107f4:	e7ec      	b.n	80107d0 <_malloc_r+0xb0>
 80107f6:	4623      	mov	r3, r4
 80107f8:	6864      	ldr	r4, [r4, #4]
 80107fa:	e7ac      	b.n	8010756 <_malloc_r+0x36>
 80107fc:	4634      	mov	r4, r6
 80107fe:	6876      	ldr	r6, [r6, #4]
 8010800:	e7b4      	b.n	801076c <_malloc_r+0x4c>
 8010802:	4613      	mov	r3, r2
 8010804:	e7cc      	b.n	80107a0 <_malloc_r+0x80>
 8010806:	230c      	movs	r3, #12
 8010808:	603b      	str	r3, [r7, #0]
 801080a:	4638      	mov	r0, r7
 801080c:	f000 f80e 	bl	801082c <__malloc_unlock>
 8010810:	e797      	b.n	8010742 <_malloc_r+0x22>
 8010812:	6025      	str	r5, [r4, #0]
 8010814:	e7dc      	b.n	80107d0 <_malloc_r+0xb0>
 8010816:	605b      	str	r3, [r3, #4]
 8010818:	deff      	udf	#255	; 0xff
 801081a:	bf00      	nop
 801081c:	200014f8 	.word	0x200014f8

08010820 <__malloc_lock>:
 8010820:	4801      	ldr	r0, [pc, #4]	; (8010828 <__malloc_lock+0x8>)
 8010822:	f001 bff0 	b.w	8012806 <__retarget_lock_acquire_recursive>
 8010826:	bf00      	nop
 8010828:	20001640 	.word	0x20001640

0801082c <__malloc_unlock>:
 801082c:	4801      	ldr	r0, [pc, #4]	; (8010834 <__malloc_unlock+0x8>)
 801082e:	f001 bfeb 	b.w	8012808 <__retarget_lock_release_recursive>
 8010832:	bf00      	nop
 8010834:	20001640 	.word	0x20001640

08010838 <sulp>:
 8010838:	b570      	push	{r4, r5, r6, lr}
 801083a:	4604      	mov	r4, r0
 801083c:	460d      	mov	r5, r1
 801083e:	ec45 4b10 	vmov	d0, r4, r5
 8010842:	4616      	mov	r6, r2
 8010844:	f003 fdc0 	bl	80143c8 <__ulp>
 8010848:	ec51 0b10 	vmov	r0, r1, d0
 801084c:	b17e      	cbz	r6, 801086e <sulp+0x36>
 801084e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010852:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010856:	2b00      	cmp	r3, #0
 8010858:	dd09      	ble.n	801086e <sulp+0x36>
 801085a:	051b      	lsls	r3, r3, #20
 801085c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010860:	2400      	movs	r4, #0
 8010862:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010866:	4622      	mov	r2, r4
 8010868:	462b      	mov	r3, r5
 801086a:	f7ef fec5 	bl	80005f8 <__aeabi_dmul>
 801086e:	bd70      	pop	{r4, r5, r6, pc}

08010870 <_strtod_l>:
 8010870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010874:	ed2d 8b02 	vpush	{d8}
 8010878:	b09b      	sub	sp, #108	; 0x6c
 801087a:	4604      	mov	r4, r0
 801087c:	9213      	str	r2, [sp, #76]	; 0x4c
 801087e:	2200      	movs	r2, #0
 8010880:	9216      	str	r2, [sp, #88]	; 0x58
 8010882:	460d      	mov	r5, r1
 8010884:	f04f 0800 	mov.w	r8, #0
 8010888:	f04f 0900 	mov.w	r9, #0
 801088c:	460a      	mov	r2, r1
 801088e:	9215      	str	r2, [sp, #84]	; 0x54
 8010890:	7811      	ldrb	r1, [r2, #0]
 8010892:	292b      	cmp	r1, #43	; 0x2b
 8010894:	d04c      	beq.n	8010930 <_strtod_l+0xc0>
 8010896:	d83a      	bhi.n	801090e <_strtod_l+0x9e>
 8010898:	290d      	cmp	r1, #13
 801089a:	d834      	bhi.n	8010906 <_strtod_l+0x96>
 801089c:	2908      	cmp	r1, #8
 801089e:	d834      	bhi.n	801090a <_strtod_l+0x9a>
 80108a0:	2900      	cmp	r1, #0
 80108a2:	d03d      	beq.n	8010920 <_strtod_l+0xb0>
 80108a4:	2200      	movs	r2, #0
 80108a6:	920a      	str	r2, [sp, #40]	; 0x28
 80108a8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80108aa:	7832      	ldrb	r2, [r6, #0]
 80108ac:	2a30      	cmp	r2, #48	; 0x30
 80108ae:	f040 80b4 	bne.w	8010a1a <_strtod_l+0x1aa>
 80108b2:	7872      	ldrb	r2, [r6, #1]
 80108b4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80108b8:	2a58      	cmp	r2, #88	; 0x58
 80108ba:	d170      	bne.n	801099e <_strtod_l+0x12e>
 80108bc:	9302      	str	r3, [sp, #8]
 80108be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108c0:	9301      	str	r3, [sp, #4]
 80108c2:	ab16      	add	r3, sp, #88	; 0x58
 80108c4:	9300      	str	r3, [sp, #0]
 80108c6:	4a8e      	ldr	r2, [pc, #568]	; (8010b00 <_strtod_l+0x290>)
 80108c8:	ab17      	add	r3, sp, #92	; 0x5c
 80108ca:	a915      	add	r1, sp, #84	; 0x54
 80108cc:	4620      	mov	r0, r4
 80108ce:	f002 ff0d 	bl	80136ec <__gethex>
 80108d2:	f010 070f 	ands.w	r7, r0, #15
 80108d6:	4605      	mov	r5, r0
 80108d8:	d005      	beq.n	80108e6 <_strtod_l+0x76>
 80108da:	2f06      	cmp	r7, #6
 80108dc:	d12a      	bne.n	8010934 <_strtod_l+0xc4>
 80108de:	3601      	adds	r6, #1
 80108e0:	2300      	movs	r3, #0
 80108e2:	9615      	str	r6, [sp, #84]	; 0x54
 80108e4:	930a      	str	r3, [sp, #40]	; 0x28
 80108e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	f040 857f 	bne.w	80113ec <_strtod_l+0xb7c>
 80108ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108f0:	b1db      	cbz	r3, 801092a <_strtod_l+0xba>
 80108f2:	4642      	mov	r2, r8
 80108f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80108f8:	ec43 2b10 	vmov	d0, r2, r3
 80108fc:	b01b      	add	sp, #108	; 0x6c
 80108fe:	ecbd 8b02 	vpop	{d8}
 8010902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010906:	2920      	cmp	r1, #32
 8010908:	d1cc      	bne.n	80108a4 <_strtod_l+0x34>
 801090a:	3201      	adds	r2, #1
 801090c:	e7bf      	b.n	801088e <_strtod_l+0x1e>
 801090e:	292d      	cmp	r1, #45	; 0x2d
 8010910:	d1c8      	bne.n	80108a4 <_strtod_l+0x34>
 8010912:	2101      	movs	r1, #1
 8010914:	910a      	str	r1, [sp, #40]	; 0x28
 8010916:	1c51      	adds	r1, r2, #1
 8010918:	9115      	str	r1, [sp, #84]	; 0x54
 801091a:	7852      	ldrb	r2, [r2, #1]
 801091c:	2a00      	cmp	r2, #0
 801091e:	d1c3      	bne.n	80108a8 <_strtod_l+0x38>
 8010920:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010922:	9515      	str	r5, [sp, #84]	; 0x54
 8010924:	2b00      	cmp	r3, #0
 8010926:	f040 855f 	bne.w	80113e8 <_strtod_l+0xb78>
 801092a:	4642      	mov	r2, r8
 801092c:	464b      	mov	r3, r9
 801092e:	e7e3      	b.n	80108f8 <_strtod_l+0x88>
 8010930:	2100      	movs	r1, #0
 8010932:	e7ef      	b.n	8010914 <_strtod_l+0xa4>
 8010934:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010936:	b13a      	cbz	r2, 8010948 <_strtod_l+0xd8>
 8010938:	2135      	movs	r1, #53	; 0x35
 801093a:	a818      	add	r0, sp, #96	; 0x60
 801093c:	f003 fe41 	bl	80145c2 <__copybits>
 8010940:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010942:	4620      	mov	r0, r4
 8010944:	f003 fa14 	bl	8013d70 <_Bfree>
 8010948:	3f01      	subs	r7, #1
 801094a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801094c:	2f04      	cmp	r7, #4
 801094e:	d806      	bhi.n	801095e <_strtod_l+0xee>
 8010950:	e8df f007 	tbb	[pc, r7]
 8010954:	201d0314 	.word	0x201d0314
 8010958:	14          	.byte	0x14
 8010959:	00          	.byte	0x00
 801095a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801095e:	05e9      	lsls	r1, r5, #23
 8010960:	bf48      	it	mi
 8010962:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8010966:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801096a:	0d1b      	lsrs	r3, r3, #20
 801096c:	051b      	lsls	r3, r3, #20
 801096e:	2b00      	cmp	r3, #0
 8010970:	d1b9      	bne.n	80108e6 <_strtod_l+0x76>
 8010972:	f001 ff1d 	bl	80127b0 <__errno>
 8010976:	2322      	movs	r3, #34	; 0x22
 8010978:	6003      	str	r3, [r0, #0]
 801097a:	e7b4      	b.n	80108e6 <_strtod_l+0x76>
 801097c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8010980:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010984:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010988:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801098c:	e7e7      	b.n	801095e <_strtod_l+0xee>
 801098e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8010b08 <_strtod_l+0x298>
 8010992:	e7e4      	b.n	801095e <_strtod_l+0xee>
 8010994:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010998:	f04f 38ff 	mov.w	r8, #4294967295
 801099c:	e7df      	b.n	801095e <_strtod_l+0xee>
 801099e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109a0:	1c5a      	adds	r2, r3, #1
 80109a2:	9215      	str	r2, [sp, #84]	; 0x54
 80109a4:	785b      	ldrb	r3, [r3, #1]
 80109a6:	2b30      	cmp	r3, #48	; 0x30
 80109a8:	d0f9      	beq.n	801099e <_strtod_l+0x12e>
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d09b      	beq.n	80108e6 <_strtod_l+0x76>
 80109ae:	2301      	movs	r3, #1
 80109b0:	f04f 0a00 	mov.w	sl, #0
 80109b4:	9304      	str	r3, [sp, #16]
 80109b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80109ba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80109be:	46d3      	mov	fp, sl
 80109c0:	220a      	movs	r2, #10
 80109c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80109c4:	7806      	ldrb	r6, [r0, #0]
 80109c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80109ca:	b2d9      	uxtb	r1, r3
 80109cc:	2909      	cmp	r1, #9
 80109ce:	d926      	bls.n	8010a1e <_strtod_l+0x1ae>
 80109d0:	494c      	ldr	r1, [pc, #304]	; (8010b04 <_strtod_l+0x294>)
 80109d2:	2201      	movs	r2, #1
 80109d4:	f001 fe0d 	bl	80125f2 <strncmp>
 80109d8:	2800      	cmp	r0, #0
 80109da:	d030      	beq.n	8010a3e <_strtod_l+0x1ce>
 80109dc:	2000      	movs	r0, #0
 80109de:	4632      	mov	r2, r6
 80109e0:	9005      	str	r0, [sp, #20]
 80109e2:	465e      	mov	r6, fp
 80109e4:	4603      	mov	r3, r0
 80109e6:	2a65      	cmp	r2, #101	; 0x65
 80109e8:	d001      	beq.n	80109ee <_strtod_l+0x17e>
 80109ea:	2a45      	cmp	r2, #69	; 0x45
 80109ec:	d113      	bne.n	8010a16 <_strtod_l+0x1a6>
 80109ee:	b91e      	cbnz	r6, 80109f8 <_strtod_l+0x188>
 80109f0:	9a04      	ldr	r2, [sp, #16]
 80109f2:	4302      	orrs	r2, r0
 80109f4:	d094      	beq.n	8010920 <_strtod_l+0xb0>
 80109f6:	2600      	movs	r6, #0
 80109f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80109fa:	1c6a      	adds	r2, r5, #1
 80109fc:	9215      	str	r2, [sp, #84]	; 0x54
 80109fe:	786a      	ldrb	r2, [r5, #1]
 8010a00:	2a2b      	cmp	r2, #43	; 0x2b
 8010a02:	d074      	beq.n	8010aee <_strtod_l+0x27e>
 8010a04:	2a2d      	cmp	r2, #45	; 0x2d
 8010a06:	d078      	beq.n	8010afa <_strtod_l+0x28a>
 8010a08:	f04f 0c00 	mov.w	ip, #0
 8010a0c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010a10:	2909      	cmp	r1, #9
 8010a12:	d97f      	bls.n	8010b14 <_strtod_l+0x2a4>
 8010a14:	9515      	str	r5, [sp, #84]	; 0x54
 8010a16:	2700      	movs	r7, #0
 8010a18:	e09e      	b.n	8010b58 <_strtod_l+0x2e8>
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	e7c8      	b.n	80109b0 <_strtod_l+0x140>
 8010a1e:	f1bb 0f08 	cmp.w	fp, #8
 8010a22:	bfd8      	it	le
 8010a24:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010a26:	f100 0001 	add.w	r0, r0, #1
 8010a2a:	bfda      	itte	le
 8010a2c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010a30:	9309      	strle	r3, [sp, #36]	; 0x24
 8010a32:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010a36:	f10b 0b01 	add.w	fp, fp, #1
 8010a3a:	9015      	str	r0, [sp, #84]	; 0x54
 8010a3c:	e7c1      	b.n	80109c2 <_strtod_l+0x152>
 8010a3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a40:	1c5a      	adds	r2, r3, #1
 8010a42:	9215      	str	r2, [sp, #84]	; 0x54
 8010a44:	785a      	ldrb	r2, [r3, #1]
 8010a46:	f1bb 0f00 	cmp.w	fp, #0
 8010a4a:	d037      	beq.n	8010abc <_strtod_l+0x24c>
 8010a4c:	9005      	str	r0, [sp, #20]
 8010a4e:	465e      	mov	r6, fp
 8010a50:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010a54:	2b09      	cmp	r3, #9
 8010a56:	d912      	bls.n	8010a7e <_strtod_l+0x20e>
 8010a58:	2301      	movs	r3, #1
 8010a5a:	e7c4      	b.n	80109e6 <_strtod_l+0x176>
 8010a5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a5e:	1c5a      	adds	r2, r3, #1
 8010a60:	9215      	str	r2, [sp, #84]	; 0x54
 8010a62:	785a      	ldrb	r2, [r3, #1]
 8010a64:	3001      	adds	r0, #1
 8010a66:	2a30      	cmp	r2, #48	; 0x30
 8010a68:	d0f8      	beq.n	8010a5c <_strtod_l+0x1ec>
 8010a6a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8010a6e:	2b08      	cmp	r3, #8
 8010a70:	f200 84c1 	bhi.w	80113f6 <_strtod_l+0xb86>
 8010a74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010a76:	9005      	str	r0, [sp, #20]
 8010a78:	2000      	movs	r0, #0
 8010a7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a7c:	4606      	mov	r6, r0
 8010a7e:	3a30      	subs	r2, #48	; 0x30
 8010a80:	f100 0301 	add.w	r3, r0, #1
 8010a84:	d014      	beq.n	8010ab0 <_strtod_l+0x240>
 8010a86:	9905      	ldr	r1, [sp, #20]
 8010a88:	4419      	add	r1, r3
 8010a8a:	9105      	str	r1, [sp, #20]
 8010a8c:	4633      	mov	r3, r6
 8010a8e:	eb00 0c06 	add.w	ip, r0, r6
 8010a92:	210a      	movs	r1, #10
 8010a94:	4563      	cmp	r3, ip
 8010a96:	d113      	bne.n	8010ac0 <_strtod_l+0x250>
 8010a98:	1833      	adds	r3, r6, r0
 8010a9a:	2b08      	cmp	r3, #8
 8010a9c:	f106 0601 	add.w	r6, r6, #1
 8010aa0:	4406      	add	r6, r0
 8010aa2:	dc1a      	bgt.n	8010ada <_strtod_l+0x26a>
 8010aa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010aa6:	230a      	movs	r3, #10
 8010aa8:	fb03 2301 	mla	r3, r3, r1, r2
 8010aac:	9309      	str	r3, [sp, #36]	; 0x24
 8010aae:	2300      	movs	r3, #0
 8010ab0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010ab2:	1c51      	adds	r1, r2, #1
 8010ab4:	9115      	str	r1, [sp, #84]	; 0x54
 8010ab6:	7852      	ldrb	r2, [r2, #1]
 8010ab8:	4618      	mov	r0, r3
 8010aba:	e7c9      	b.n	8010a50 <_strtod_l+0x1e0>
 8010abc:	4658      	mov	r0, fp
 8010abe:	e7d2      	b.n	8010a66 <_strtod_l+0x1f6>
 8010ac0:	2b08      	cmp	r3, #8
 8010ac2:	f103 0301 	add.w	r3, r3, #1
 8010ac6:	dc03      	bgt.n	8010ad0 <_strtod_l+0x260>
 8010ac8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010aca:	434f      	muls	r7, r1
 8010acc:	9709      	str	r7, [sp, #36]	; 0x24
 8010ace:	e7e1      	b.n	8010a94 <_strtod_l+0x224>
 8010ad0:	2b10      	cmp	r3, #16
 8010ad2:	bfd8      	it	le
 8010ad4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8010ad8:	e7dc      	b.n	8010a94 <_strtod_l+0x224>
 8010ada:	2e10      	cmp	r6, #16
 8010adc:	bfdc      	itt	le
 8010ade:	230a      	movle	r3, #10
 8010ae0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8010ae4:	e7e3      	b.n	8010aae <_strtod_l+0x23e>
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	9305      	str	r3, [sp, #20]
 8010aea:	2301      	movs	r3, #1
 8010aec:	e780      	b.n	80109f0 <_strtod_l+0x180>
 8010aee:	f04f 0c00 	mov.w	ip, #0
 8010af2:	1caa      	adds	r2, r5, #2
 8010af4:	9215      	str	r2, [sp, #84]	; 0x54
 8010af6:	78aa      	ldrb	r2, [r5, #2]
 8010af8:	e788      	b.n	8010a0c <_strtod_l+0x19c>
 8010afa:	f04f 0c01 	mov.w	ip, #1
 8010afe:	e7f8      	b.n	8010af2 <_strtod_l+0x282>
 8010b00:	08018260 	.word	0x08018260
 8010b04:	0801825c 	.word	0x0801825c
 8010b08:	7ff00000 	.word	0x7ff00000
 8010b0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010b0e:	1c51      	adds	r1, r2, #1
 8010b10:	9115      	str	r1, [sp, #84]	; 0x54
 8010b12:	7852      	ldrb	r2, [r2, #1]
 8010b14:	2a30      	cmp	r2, #48	; 0x30
 8010b16:	d0f9      	beq.n	8010b0c <_strtod_l+0x29c>
 8010b18:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010b1c:	2908      	cmp	r1, #8
 8010b1e:	f63f af7a 	bhi.w	8010a16 <_strtod_l+0x1a6>
 8010b22:	3a30      	subs	r2, #48	; 0x30
 8010b24:	9208      	str	r2, [sp, #32]
 8010b26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010b28:	920c      	str	r2, [sp, #48]	; 0x30
 8010b2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010b2c:	1c57      	adds	r7, r2, #1
 8010b2e:	9715      	str	r7, [sp, #84]	; 0x54
 8010b30:	7852      	ldrb	r2, [r2, #1]
 8010b32:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010b36:	f1be 0f09 	cmp.w	lr, #9
 8010b3a:	d938      	bls.n	8010bae <_strtod_l+0x33e>
 8010b3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010b3e:	1a7f      	subs	r7, r7, r1
 8010b40:	2f08      	cmp	r7, #8
 8010b42:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8010b46:	dc03      	bgt.n	8010b50 <_strtod_l+0x2e0>
 8010b48:	9908      	ldr	r1, [sp, #32]
 8010b4a:	428f      	cmp	r7, r1
 8010b4c:	bfa8      	it	ge
 8010b4e:	460f      	movge	r7, r1
 8010b50:	f1bc 0f00 	cmp.w	ip, #0
 8010b54:	d000      	beq.n	8010b58 <_strtod_l+0x2e8>
 8010b56:	427f      	negs	r7, r7
 8010b58:	2e00      	cmp	r6, #0
 8010b5a:	d14f      	bne.n	8010bfc <_strtod_l+0x38c>
 8010b5c:	9904      	ldr	r1, [sp, #16]
 8010b5e:	4301      	orrs	r1, r0
 8010b60:	f47f aec1 	bne.w	80108e6 <_strtod_l+0x76>
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	f47f aedb 	bne.w	8010920 <_strtod_l+0xb0>
 8010b6a:	2a69      	cmp	r2, #105	; 0x69
 8010b6c:	d029      	beq.n	8010bc2 <_strtod_l+0x352>
 8010b6e:	dc26      	bgt.n	8010bbe <_strtod_l+0x34e>
 8010b70:	2a49      	cmp	r2, #73	; 0x49
 8010b72:	d026      	beq.n	8010bc2 <_strtod_l+0x352>
 8010b74:	2a4e      	cmp	r2, #78	; 0x4e
 8010b76:	f47f aed3 	bne.w	8010920 <_strtod_l+0xb0>
 8010b7a:	499b      	ldr	r1, [pc, #620]	; (8010de8 <_strtod_l+0x578>)
 8010b7c:	a815      	add	r0, sp, #84	; 0x54
 8010b7e:	f002 fff5 	bl	8013b6c <__match>
 8010b82:	2800      	cmp	r0, #0
 8010b84:	f43f aecc 	beq.w	8010920 <_strtod_l+0xb0>
 8010b88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010b8a:	781b      	ldrb	r3, [r3, #0]
 8010b8c:	2b28      	cmp	r3, #40	; 0x28
 8010b8e:	d12f      	bne.n	8010bf0 <_strtod_l+0x380>
 8010b90:	4996      	ldr	r1, [pc, #600]	; (8010dec <_strtod_l+0x57c>)
 8010b92:	aa18      	add	r2, sp, #96	; 0x60
 8010b94:	a815      	add	r0, sp, #84	; 0x54
 8010b96:	f002 fffd 	bl	8013b94 <__hexnan>
 8010b9a:	2805      	cmp	r0, #5
 8010b9c:	d128      	bne.n	8010bf0 <_strtod_l+0x380>
 8010b9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010ba0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010ba4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8010ba8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8010bac:	e69b      	b.n	80108e6 <_strtod_l+0x76>
 8010bae:	9f08      	ldr	r7, [sp, #32]
 8010bb0:	210a      	movs	r1, #10
 8010bb2:	fb01 2107 	mla	r1, r1, r7, r2
 8010bb6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8010bba:	9208      	str	r2, [sp, #32]
 8010bbc:	e7b5      	b.n	8010b2a <_strtod_l+0x2ba>
 8010bbe:	2a6e      	cmp	r2, #110	; 0x6e
 8010bc0:	e7d9      	b.n	8010b76 <_strtod_l+0x306>
 8010bc2:	498b      	ldr	r1, [pc, #556]	; (8010df0 <_strtod_l+0x580>)
 8010bc4:	a815      	add	r0, sp, #84	; 0x54
 8010bc6:	f002 ffd1 	bl	8013b6c <__match>
 8010bca:	2800      	cmp	r0, #0
 8010bcc:	f43f aea8 	beq.w	8010920 <_strtod_l+0xb0>
 8010bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010bd2:	4988      	ldr	r1, [pc, #544]	; (8010df4 <_strtod_l+0x584>)
 8010bd4:	3b01      	subs	r3, #1
 8010bd6:	a815      	add	r0, sp, #84	; 0x54
 8010bd8:	9315      	str	r3, [sp, #84]	; 0x54
 8010bda:	f002 ffc7 	bl	8013b6c <__match>
 8010bde:	b910      	cbnz	r0, 8010be6 <_strtod_l+0x376>
 8010be0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010be2:	3301      	adds	r3, #1
 8010be4:	9315      	str	r3, [sp, #84]	; 0x54
 8010be6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8010e04 <_strtod_l+0x594>
 8010bea:	f04f 0800 	mov.w	r8, #0
 8010bee:	e67a      	b.n	80108e6 <_strtod_l+0x76>
 8010bf0:	4881      	ldr	r0, [pc, #516]	; (8010df8 <_strtod_l+0x588>)
 8010bf2:	f001 fe21 	bl	8012838 <nan>
 8010bf6:	ec59 8b10 	vmov	r8, r9, d0
 8010bfa:	e674      	b.n	80108e6 <_strtod_l+0x76>
 8010bfc:	9b05      	ldr	r3, [sp, #20]
 8010bfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010c00:	1afb      	subs	r3, r7, r3
 8010c02:	f1bb 0f00 	cmp.w	fp, #0
 8010c06:	bf08      	it	eq
 8010c08:	46b3      	moveq	fp, r6
 8010c0a:	2e10      	cmp	r6, #16
 8010c0c:	9308      	str	r3, [sp, #32]
 8010c0e:	4635      	mov	r5, r6
 8010c10:	bfa8      	it	ge
 8010c12:	2510      	movge	r5, #16
 8010c14:	f7ef fc76 	bl	8000504 <__aeabi_ui2d>
 8010c18:	2e09      	cmp	r6, #9
 8010c1a:	4680      	mov	r8, r0
 8010c1c:	4689      	mov	r9, r1
 8010c1e:	dd13      	ble.n	8010c48 <_strtod_l+0x3d8>
 8010c20:	4b76      	ldr	r3, [pc, #472]	; (8010dfc <_strtod_l+0x58c>)
 8010c22:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010c26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010c2a:	f7ef fce5 	bl	80005f8 <__aeabi_dmul>
 8010c2e:	4680      	mov	r8, r0
 8010c30:	4650      	mov	r0, sl
 8010c32:	4689      	mov	r9, r1
 8010c34:	f7ef fc66 	bl	8000504 <__aeabi_ui2d>
 8010c38:	4602      	mov	r2, r0
 8010c3a:	460b      	mov	r3, r1
 8010c3c:	4640      	mov	r0, r8
 8010c3e:	4649      	mov	r1, r9
 8010c40:	f7ef fb24 	bl	800028c <__adddf3>
 8010c44:	4680      	mov	r8, r0
 8010c46:	4689      	mov	r9, r1
 8010c48:	2e0f      	cmp	r6, #15
 8010c4a:	dc38      	bgt.n	8010cbe <_strtod_l+0x44e>
 8010c4c:	9b08      	ldr	r3, [sp, #32]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	f43f ae49 	beq.w	80108e6 <_strtod_l+0x76>
 8010c54:	dd24      	ble.n	8010ca0 <_strtod_l+0x430>
 8010c56:	2b16      	cmp	r3, #22
 8010c58:	dc0b      	bgt.n	8010c72 <_strtod_l+0x402>
 8010c5a:	4968      	ldr	r1, [pc, #416]	; (8010dfc <_strtod_l+0x58c>)
 8010c5c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c64:	4642      	mov	r2, r8
 8010c66:	464b      	mov	r3, r9
 8010c68:	f7ef fcc6 	bl	80005f8 <__aeabi_dmul>
 8010c6c:	4680      	mov	r8, r0
 8010c6e:	4689      	mov	r9, r1
 8010c70:	e639      	b.n	80108e6 <_strtod_l+0x76>
 8010c72:	9a08      	ldr	r2, [sp, #32]
 8010c74:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	db20      	blt.n	8010cbe <_strtod_l+0x44e>
 8010c7c:	4c5f      	ldr	r4, [pc, #380]	; (8010dfc <_strtod_l+0x58c>)
 8010c7e:	f1c6 060f 	rsb	r6, r6, #15
 8010c82:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8010c86:	4642      	mov	r2, r8
 8010c88:	464b      	mov	r3, r9
 8010c8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c8e:	f7ef fcb3 	bl	80005f8 <__aeabi_dmul>
 8010c92:	9b08      	ldr	r3, [sp, #32]
 8010c94:	1b9e      	subs	r6, r3, r6
 8010c96:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8010c9a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010c9e:	e7e3      	b.n	8010c68 <_strtod_l+0x3f8>
 8010ca0:	9b08      	ldr	r3, [sp, #32]
 8010ca2:	3316      	adds	r3, #22
 8010ca4:	db0b      	blt.n	8010cbe <_strtod_l+0x44e>
 8010ca6:	9b05      	ldr	r3, [sp, #20]
 8010ca8:	1bdf      	subs	r7, r3, r7
 8010caa:	4b54      	ldr	r3, [pc, #336]	; (8010dfc <_strtod_l+0x58c>)
 8010cac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010cb4:	4640      	mov	r0, r8
 8010cb6:	4649      	mov	r1, r9
 8010cb8:	f7ef fdc8 	bl	800084c <__aeabi_ddiv>
 8010cbc:	e7d6      	b.n	8010c6c <_strtod_l+0x3fc>
 8010cbe:	9b08      	ldr	r3, [sp, #32]
 8010cc0:	1b75      	subs	r5, r6, r5
 8010cc2:	441d      	add	r5, r3
 8010cc4:	2d00      	cmp	r5, #0
 8010cc6:	dd70      	ble.n	8010daa <_strtod_l+0x53a>
 8010cc8:	f015 030f 	ands.w	r3, r5, #15
 8010ccc:	d00a      	beq.n	8010ce4 <_strtod_l+0x474>
 8010cce:	494b      	ldr	r1, [pc, #300]	; (8010dfc <_strtod_l+0x58c>)
 8010cd0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010cd4:	4642      	mov	r2, r8
 8010cd6:	464b      	mov	r3, r9
 8010cd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010cdc:	f7ef fc8c 	bl	80005f8 <__aeabi_dmul>
 8010ce0:	4680      	mov	r8, r0
 8010ce2:	4689      	mov	r9, r1
 8010ce4:	f035 050f 	bics.w	r5, r5, #15
 8010ce8:	d04d      	beq.n	8010d86 <_strtod_l+0x516>
 8010cea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8010cee:	dd22      	ble.n	8010d36 <_strtod_l+0x4c6>
 8010cf0:	2500      	movs	r5, #0
 8010cf2:	46ab      	mov	fp, r5
 8010cf4:	9509      	str	r5, [sp, #36]	; 0x24
 8010cf6:	9505      	str	r5, [sp, #20]
 8010cf8:	2322      	movs	r3, #34	; 0x22
 8010cfa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8010e04 <_strtod_l+0x594>
 8010cfe:	6023      	str	r3, [r4, #0]
 8010d00:	f04f 0800 	mov.w	r8, #0
 8010d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	f43f aded 	beq.w	80108e6 <_strtod_l+0x76>
 8010d0c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010d0e:	4620      	mov	r0, r4
 8010d10:	f003 f82e 	bl	8013d70 <_Bfree>
 8010d14:	9905      	ldr	r1, [sp, #20]
 8010d16:	4620      	mov	r0, r4
 8010d18:	f003 f82a 	bl	8013d70 <_Bfree>
 8010d1c:	4659      	mov	r1, fp
 8010d1e:	4620      	mov	r0, r4
 8010d20:	f003 f826 	bl	8013d70 <_Bfree>
 8010d24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d26:	4620      	mov	r0, r4
 8010d28:	f003 f822 	bl	8013d70 <_Bfree>
 8010d2c:	4629      	mov	r1, r5
 8010d2e:	4620      	mov	r0, r4
 8010d30:	f003 f81e 	bl	8013d70 <_Bfree>
 8010d34:	e5d7      	b.n	80108e6 <_strtod_l+0x76>
 8010d36:	4b32      	ldr	r3, [pc, #200]	; (8010e00 <_strtod_l+0x590>)
 8010d38:	9304      	str	r3, [sp, #16]
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	112d      	asrs	r5, r5, #4
 8010d3e:	4640      	mov	r0, r8
 8010d40:	4649      	mov	r1, r9
 8010d42:	469a      	mov	sl, r3
 8010d44:	2d01      	cmp	r5, #1
 8010d46:	dc21      	bgt.n	8010d8c <_strtod_l+0x51c>
 8010d48:	b10b      	cbz	r3, 8010d4e <_strtod_l+0x4de>
 8010d4a:	4680      	mov	r8, r0
 8010d4c:	4689      	mov	r9, r1
 8010d4e:	492c      	ldr	r1, [pc, #176]	; (8010e00 <_strtod_l+0x590>)
 8010d50:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8010d54:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010d58:	4642      	mov	r2, r8
 8010d5a:	464b      	mov	r3, r9
 8010d5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010d60:	f7ef fc4a 	bl	80005f8 <__aeabi_dmul>
 8010d64:	4b27      	ldr	r3, [pc, #156]	; (8010e04 <_strtod_l+0x594>)
 8010d66:	460a      	mov	r2, r1
 8010d68:	400b      	ands	r3, r1
 8010d6a:	4927      	ldr	r1, [pc, #156]	; (8010e08 <_strtod_l+0x598>)
 8010d6c:	428b      	cmp	r3, r1
 8010d6e:	4680      	mov	r8, r0
 8010d70:	d8be      	bhi.n	8010cf0 <_strtod_l+0x480>
 8010d72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010d76:	428b      	cmp	r3, r1
 8010d78:	bf86      	itte	hi
 8010d7a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8010e0c <_strtod_l+0x59c>
 8010d7e:	f04f 38ff 	movhi.w	r8, #4294967295
 8010d82:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8010d86:	2300      	movs	r3, #0
 8010d88:	9304      	str	r3, [sp, #16]
 8010d8a:	e07b      	b.n	8010e84 <_strtod_l+0x614>
 8010d8c:	07ea      	lsls	r2, r5, #31
 8010d8e:	d505      	bpl.n	8010d9c <_strtod_l+0x52c>
 8010d90:	9b04      	ldr	r3, [sp, #16]
 8010d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d96:	f7ef fc2f 	bl	80005f8 <__aeabi_dmul>
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	9a04      	ldr	r2, [sp, #16]
 8010d9e:	3208      	adds	r2, #8
 8010da0:	f10a 0a01 	add.w	sl, sl, #1
 8010da4:	106d      	asrs	r5, r5, #1
 8010da6:	9204      	str	r2, [sp, #16]
 8010da8:	e7cc      	b.n	8010d44 <_strtod_l+0x4d4>
 8010daa:	d0ec      	beq.n	8010d86 <_strtod_l+0x516>
 8010dac:	426d      	negs	r5, r5
 8010dae:	f015 020f 	ands.w	r2, r5, #15
 8010db2:	d00a      	beq.n	8010dca <_strtod_l+0x55a>
 8010db4:	4b11      	ldr	r3, [pc, #68]	; (8010dfc <_strtod_l+0x58c>)
 8010db6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010dba:	4640      	mov	r0, r8
 8010dbc:	4649      	mov	r1, r9
 8010dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc2:	f7ef fd43 	bl	800084c <__aeabi_ddiv>
 8010dc6:	4680      	mov	r8, r0
 8010dc8:	4689      	mov	r9, r1
 8010dca:	112d      	asrs	r5, r5, #4
 8010dcc:	d0db      	beq.n	8010d86 <_strtod_l+0x516>
 8010dce:	2d1f      	cmp	r5, #31
 8010dd0:	dd1e      	ble.n	8010e10 <_strtod_l+0x5a0>
 8010dd2:	2500      	movs	r5, #0
 8010dd4:	46ab      	mov	fp, r5
 8010dd6:	9509      	str	r5, [sp, #36]	; 0x24
 8010dd8:	9505      	str	r5, [sp, #20]
 8010dda:	2322      	movs	r3, #34	; 0x22
 8010ddc:	f04f 0800 	mov.w	r8, #0
 8010de0:	f04f 0900 	mov.w	r9, #0
 8010de4:	6023      	str	r3, [r4, #0]
 8010de6:	e78d      	b.n	8010d04 <_strtod_l+0x494>
 8010de8:	080183be 	.word	0x080183be
 8010dec:	08018274 	.word	0x08018274
 8010df0:	080183b6 	.word	0x080183b6
 8010df4:	080184a2 	.word	0x080184a2
 8010df8:	0801849e 	.word	0x0801849e
 8010dfc:	080185f8 	.word	0x080185f8
 8010e00:	080185d0 	.word	0x080185d0
 8010e04:	7ff00000 	.word	0x7ff00000
 8010e08:	7ca00000 	.word	0x7ca00000
 8010e0c:	7fefffff 	.word	0x7fefffff
 8010e10:	f015 0310 	ands.w	r3, r5, #16
 8010e14:	bf18      	it	ne
 8010e16:	236a      	movne	r3, #106	; 0x6a
 8010e18:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80111bc <_strtod_l+0x94c>
 8010e1c:	9304      	str	r3, [sp, #16]
 8010e1e:	4640      	mov	r0, r8
 8010e20:	4649      	mov	r1, r9
 8010e22:	2300      	movs	r3, #0
 8010e24:	07ea      	lsls	r2, r5, #31
 8010e26:	d504      	bpl.n	8010e32 <_strtod_l+0x5c2>
 8010e28:	e9da 2300 	ldrd	r2, r3, [sl]
 8010e2c:	f7ef fbe4 	bl	80005f8 <__aeabi_dmul>
 8010e30:	2301      	movs	r3, #1
 8010e32:	106d      	asrs	r5, r5, #1
 8010e34:	f10a 0a08 	add.w	sl, sl, #8
 8010e38:	d1f4      	bne.n	8010e24 <_strtod_l+0x5b4>
 8010e3a:	b10b      	cbz	r3, 8010e40 <_strtod_l+0x5d0>
 8010e3c:	4680      	mov	r8, r0
 8010e3e:	4689      	mov	r9, r1
 8010e40:	9b04      	ldr	r3, [sp, #16]
 8010e42:	b1bb      	cbz	r3, 8010e74 <_strtod_l+0x604>
 8010e44:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8010e48:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	4649      	mov	r1, r9
 8010e50:	dd10      	ble.n	8010e74 <_strtod_l+0x604>
 8010e52:	2b1f      	cmp	r3, #31
 8010e54:	f340 811e 	ble.w	8011094 <_strtod_l+0x824>
 8010e58:	2b34      	cmp	r3, #52	; 0x34
 8010e5a:	bfde      	ittt	le
 8010e5c:	f04f 33ff 	movle.w	r3, #4294967295
 8010e60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010e64:	4093      	lslle	r3, r2
 8010e66:	f04f 0800 	mov.w	r8, #0
 8010e6a:	bfcc      	ite	gt
 8010e6c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8010e70:	ea03 0901 	andle.w	r9, r3, r1
 8010e74:	2200      	movs	r2, #0
 8010e76:	2300      	movs	r3, #0
 8010e78:	4640      	mov	r0, r8
 8010e7a:	4649      	mov	r1, r9
 8010e7c:	f7ef fe24 	bl	8000ac8 <__aeabi_dcmpeq>
 8010e80:	2800      	cmp	r0, #0
 8010e82:	d1a6      	bne.n	8010dd2 <_strtod_l+0x562>
 8010e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e86:	9300      	str	r3, [sp, #0]
 8010e88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010e8a:	4633      	mov	r3, r6
 8010e8c:	465a      	mov	r2, fp
 8010e8e:	4620      	mov	r0, r4
 8010e90:	f002 ffd6 	bl	8013e40 <__s2b>
 8010e94:	9009      	str	r0, [sp, #36]	; 0x24
 8010e96:	2800      	cmp	r0, #0
 8010e98:	f43f af2a 	beq.w	8010cf0 <_strtod_l+0x480>
 8010e9c:	9a08      	ldr	r2, [sp, #32]
 8010e9e:	9b05      	ldr	r3, [sp, #20]
 8010ea0:	2a00      	cmp	r2, #0
 8010ea2:	eba3 0307 	sub.w	r3, r3, r7
 8010ea6:	bfa8      	it	ge
 8010ea8:	2300      	movge	r3, #0
 8010eaa:	930c      	str	r3, [sp, #48]	; 0x30
 8010eac:	2500      	movs	r5, #0
 8010eae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8010eb2:	9312      	str	r3, [sp, #72]	; 0x48
 8010eb4:	46ab      	mov	fp, r5
 8010eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eb8:	4620      	mov	r0, r4
 8010eba:	6859      	ldr	r1, [r3, #4]
 8010ebc:	f002 ff18 	bl	8013cf0 <_Balloc>
 8010ec0:	9005      	str	r0, [sp, #20]
 8010ec2:	2800      	cmp	r0, #0
 8010ec4:	f43f af18 	beq.w	8010cf8 <_strtod_l+0x488>
 8010ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eca:	691a      	ldr	r2, [r3, #16]
 8010ecc:	3202      	adds	r2, #2
 8010ece:	f103 010c 	add.w	r1, r3, #12
 8010ed2:	0092      	lsls	r2, r2, #2
 8010ed4:	300c      	adds	r0, #12
 8010ed6:	f001 fca0 	bl	801281a <memcpy>
 8010eda:	ec49 8b10 	vmov	d0, r8, r9
 8010ede:	aa18      	add	r2, sp, #96	; 0x60
 8010ee0:	a917      	add	r1, sp, #92	; 0x5c
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	f003 fae0 	bl	80144a8 <__d2b>
 8010ee8:	ec49 8b18 	vmov	d8, r8, r9
 8010eec:	9016      	str	r0, [sp, #88]	; 0x58
 8010eee:	2800      	cmp	r0, #0
 8010ef0:	f43f af02 	beq.w	8010cf8 <_strtod_l+0x488>
 8010ef4:	2101      	movs	r1, #1
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f003 f83a 	bl	8013f70 <__i2b>
 8010efc:	4683      	mov	fp, r0
 8010efe:	2800      	cmp	r0, #0
 8010f00:	f43f aefa 	beq.w	8010cf8 <_strtod_l+0x488>
 8010f04:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010f06:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010f08:	2e00      	cmp	r6, #0
 8010f0a:	bfab      	itete	ge
 8010f0c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8010f0e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8010f10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010f12:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8010f16:	bfac      	ite	ge
 8010f18:	eb06 0a03 	addge.w	sl, r6, r3
 8010f1c:	1b9f      	sublt	r7, r3, r6
 8010f1e:	9b04      	ldr	r3, [sp, #16]
 8010f20:	1af6      	subs	r6, r6, r3
 8010f22:	4416      	add	r6, r2
 8010f24:	4ba0      	ldr	r3, [pc, #640]	; (80111a8 <_strtod_l+0x938>)
 8010f26:	3e01      	subs	r6, #1
 8010f28:	429e      	cmp	r6, r3
 8010f2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010f2e:	f280 80c4 	bge.w	80110ba <_strtod_l+0x84a>
 8010f32:	1b9b      	subs	r3, r3, r6
 8010f34:	2b1f      	cmp	r3, #31
 8010f36:	eba2 0203 	sub.w	r2, r2, r3
 8010f3a:	f04f 0101 	mov.w	r1, #1
 8010f3e:	f300 80b0 	bgt.w	80110a2 <_strtod_l+0x832>
 8010f42:	fa01 f303 	lsl.w	r3, r1, r3
 8010f46:	930e      	str	r3, [sp, #56]	; 0x38
 8010f48:	2300      	movs	r3, #0
 8010f4a:	930d      	str	r3, [sp, #52]	; 0x34
 8010f4c:	eb0a 0602 	add.w	r6, sl, r2
 8010f50:	9b04      	ldr	r3, [sp, #16]
 8010f52:	45b2      	cmp	sl, r6
 8010f54:	4417      	add	r7, r2
 8010f56:	441f      	add	r7, r3
 8010f58:	4653      	mov	r3, sl
 8010f5a:	bfa8      	it	ge
 8010f5c:	4633      	movge	r3, r6
 8010f5e:	42bb      	cmp	r3, r7
 8010f60:	bfa8      	it	ge
 8010f62:	463b      	movge	r3, r7
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	bfc2      	ittt	gt
 8010f68:	1af6      	subgt	r6, r6, r3
 8010f6a:	1aff      	subgt	r7, r7, r3
 8010f6c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8010f70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	dd17      	ble.n	8010fa6 <_strtod_l+0x736>
 8010f76:	4659      	mov	r1, fp
 8010f78:	461a      	mov	r2, r3
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f003 f8b8 	bl	80140f0 <__pow5mult>
 8010f80:	4683      	mov	fp, r0
 8010f82:	2800      	cmp	r0, #0
 8010f84:	f43f aeb8 	beq.w	8010cf8 <_strtod_l+0x488>
 8010f88:	4601      	mov	r1, r0
 8010f8a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	f003 f805 	bl	8013f9c <__multiply>
 8010f92:	900b      	str	r0, [sp, #44]	; 0x2c
 8010f94:	2800      	cmp	r0, #0
 8010f96:	f43f aeaf 	beq.w	8010cf8 <_strtod_l+0x488>
 8010f9a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	f002 fee7 	bl	8013d70 <_Bfree>
 8010fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010fa4:	9316      	str	r3, [sp, #88]	; 0x58
 8010fa6:	2e00      	cmp	r6, #0
 8010fa8:	f300 808c 	bgt.w	80110c4 <_strtod_l+0x854>
 8010fac:	9b08      	ldr	r3, [sp, #32]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	dd08      	ble.n	8010fc4 <_strtod_l+0x754>
 8010fb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010fb4:	9905      	ldr	r1, [sp, #20]
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	f003 f89a 	bl	80140f0 <__pow5mult>
 8010fbc:	9005      	str	r0, [sp, #20]
 8010fbe:	2800      	cmp	r0, #0
 8010fc0:	f43f ae9a 	beq.w	8010cf8 <_strtod_l+0x488>
 8010fc4:	2f00      	cmp	r7, #0
 8010fc6:	dd08      	ble.n	8010fda <_strtod_l+0x76a>
 8010fc8:	9905      	ldr	r1, [sp, #20]
 8010fca:	463a      	mov	r2, r7
 8010fcc:	4620      	mov	r0, r4
 8010fce:	f003 f8e9 	bl	80141a4 <__lshift>
 8010fd2:	9005      	str	r0, [sp, #20]
 8010fd4:	2800      	cmp	r0, #0
 8010fd6:	f43f ae8f 	beq.w	8010cf8 <_strtod_l+0x488>
 8010fda:	f1ba 0f00 	cmp.w	sl, #0
 8010fde:	dd08      	ble.n	8010ff2 <_strtod_l+0x782>
 8010fe0:	4659      	mov	r1, fp
 8010fe2:	4652      	mov	r2, sl
 8010fe4:	4620      	mov	r0, r4
 8010fe6:	f003 f8dd 	bl	80141a4 <__lshift>
 8010fea:	4683      	mov	fp, r0
 8010fec:	2800      	cmp	r0, #0
 8010fee:	f43f ae83 	beq.w	8010cf8 <_strtod_l+0x488>
 8010ff2:	9a05      	ldr	r2, [sp, #20]
 8010ff4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010ff6:	4620      	mov	r0, r4
 8010ff8:	f003 f95c 	bl	80142b4 <__mdiff>
 8010ffc:	4605      	mov	r5, r0
 8010ffe:	2800      	cmp	r0, #0
 8011000:	f43f ae7a 	beq.w	8010cf8 <_strtod_l+0x488>
 8011004:	68c3      	ldr	r3, [r0, #12]
 8011006:	930b      	str	r3, [sp, #44]	; 0x2c
 8011008:	2300      	movs	r3, #0
 801100a:	60c3      	str	r3, [r0, #12]
 801100c:	4659      	mov	r1, fp
 801100e:	f003 f935 	bl	801427c <__mcmp>
 8011012:	2800      	cmp	r0, #0
 8011014:	da60      	bge.n	80110d8 <_strtod_l+0x868>
 8011016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011018:	ea53 0308 	orrs.w	r3, r3, r8
 801101c:	f040 8084 	bne.w	8011128 <_strtod_l+0x8b8>
 8011020:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011024:	2b00      	cmp	r3, #0
 8011026:	d17f      	bne.n	8011128 <_strtod_l+0x8b8>
 8011028:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801102c:	0d1b      	lsrs	r3, r3, #20
 801102e:	051b      	lsls	r3, r3, #20
 8011030:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011034:	d978      	bls.n	8011128 <_strtod_l+0x8b8>
 8011036:	696b      	ldr	r3, [r5, #20]
 8011038:	b913      	cbnz	r3, 8011040 <_strtod_l+0x7d0>
 801103a:	692b      	ldr	r3, [r5, #16]
 801103c:	2b01      	cmp	r3, #1
 801103e:	dd73      	ble.n	8011128 <_strtod_l+0x8b8>
 8011040:	4629      	mov	r1, r5
 8011042:	2201      	movs	r2, #1
 8011044:	4620      	mov	r0, r4
 8011046:	f003 f8ad 	bl	80141a4 <__lshift>
 801104a:	4659      	mov	r1, fp
 801104c:	4605      	mov	r5, r0
 801104e:	f003 f915 	bl	801427c <__mcmp>
 8011052:	2800      	cmp	r0, #0
 8011054:	dd68      	ble.n	8011128 <_strtod_l+0x8b8>
 8011056:	9904      	ldr	r1, [sp, #16]
 8011058:	4a54      	ldr	r2, [pc, #336]	; (80111ac <_strtod_l+0x93c>)
 801105a:	464b      	mov	r3, r9
 801105c:	2900      	cmp	r1, #0
 801105e:	f000 8084 	beq.w	801116a <_strtod_l+0x8fa>
 8011062:	ea02 0109 	and.w	r1, r2, r9
 8011066:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801106a:	dc7e      	bgt.n	801116a <_strtod_l+0x8fa>
 801106c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011070:	f77f aeb3 	ble.w	8010dda <_strtod_l+0x56a>
 8011074:	4b4e      	ldr	r3, [pc, #312]	; (80111b0 <_strtod_l+0x940>)
 8011076:	4640      	mov	r0, r8
 8011078:	4649      	mov	r1, r9
 801107a:	2200      	movs	r2, #0
 801107c:	f7ef fabc 	bl	80005f8 <__aeabi_dmul>
 8011080:	4b4a      	ldr	r3, [pc, #296]	; (80111ac <_strtod_l+0x93c>)
 8011082:	400b      	ands	r3, r1
 8011084:	4680      	mov	r8, r0
 8011086:	4689      	mov	r9, r1
 8011088:	2b00      	cmp	r3, #0
 801108a:	f47f ae3f 	bne.w	8010d0c <_strtod_l+0x49c>
 801108e:	2322      	movs	r3, #34	; 0x22
 8011090:	6023      	str	r3, [r4, #0]
 8011092:	e63b      	b.n	8010d0c <_strtod_l+0x49c>
 8011094:	f04f 32ff 	mov.w	r2, #4294967295
 8011098:	fa02 f303 	lsl.w	r3, r2, r3
 801109c:	ea03 0808 	and.w	r8, r3, r8
 80110a0:	e6e8      	b.n	8010e74 <_strtod_l+0x604>
 80110a2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80110a6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80110aa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80110ae:	36e2      	adds	r6, #226	; 0xe2
 80110b0:	fa01 f306 	lsl.w	r3, r1, r6
 80110b4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80110b8:	e748      	b.n	8010f4c <_strtod_l+0x6dc>
 80110ba:	2100      	movs	r1, #0
 80110bc:	2301      	movs	r3, #1
 80110be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80110c2:	e743      	b.n	8010f4c <_strtod_l+0x6dc>
 80110c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80110c6:	4632      	mov	r2, r6
 80110c8:	4620      	mov	r0, r4
 80110ca:	f003 f86b 	bl	80141a4 <__lshift>
 80110ce:	9016      	str	r0, [sp, #88]	; 0x58
 80110d0:	2800      	cmp	r0, #0
 80110d2:	f47f af6b 	bne.w	8010fac <_strtod_l+0x73c>
 80110d6:	e60f      	b.n	8010cf8 <_strtod_l+0x488>
 80110d8:	46ca      	mov	sl, r9
 80110da:	d171      	bne.n	80111c0 <_strtod_l+0x950>
 80110dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80110de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80110e2:	b352      	cbz	r2, 801113a <_strtod_l+0x8ca>
 80110e4:	4a33      	ldr	r2, [pc, #204]	; (80111b4 <_strtod_l+0x944>)
 80110e6:	4293      	cmp	r3, r2
 80110e8:	d12a      	bne.n	8011140 <_strtod_l+0x8d0>
 80110ea:	9b04      	ldr	r3, [sp, #16]
 80110ec:	4641      	mov	r1, r8
 80110ee:	b1fb      	cbz	r3, 8011130 <_strtod_l+0x8c0>
 80110f0:	4b2e      	ldr	r3, [pc, #184]	; (80111ac <_strtod_l+0x93c>)
 80110f2:	ea09 0303 	and.w	r3, r9, r3
 80110f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80110fa:	f04f 32ff 	mov.w	r2, #4294967295
 80110fe:	d81a      	bhi.n	8011136 <_strtod_l+0x8c6>
 8011100:	0d1b      	lsrs	r3, r3, #20
 8011102:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011106:	fa02 f303 	lsl.w	r3, r2, r3
 801110a:	4299      	cmp	r1, r3
 801110c:	d118      	bne.n	8011140 <_strtod_l+0x8d0>
 801110e:	4b2a      	ldr	r3, [pc, #168]	; (80111b8 <_strtod_l+0x948>)
 8011110:	459a      	cmp	sl, r3
 8011112:	d102      	bne.n	801111a <_strtod_l+0x8aa>
 8011114:	3101      	adds	r1, #1
 8011116:	f43f adef 	beq.w	8010cf8 <_strtod_l+0x488>
 801111a:	4b24      	ldr	r3, [pc, #144]	; (80111ac <_strtod_l+0x93c>)
 801111c:	ea0a 0303 	and.w	r3, sl, r3
 8011120:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8011124:	f04f 0800 	mov.w	r8, #0
 8011128:	9b04      	ldr	r3, [sp, #16]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d1a2      	bne.n	8011074 <_strtod_l+0x804>
 801112e:	e5ed      	b.n	8010d0c <_strtod_l+0x49c>
 8011130:	f04f 33ff 	mov.w	r3, #4294967295
 8011134:	e7e9      	b.n	801110a <_strtod_l+0x89a>
 8011136:	4613      	mov	r3, r2
 8011138:	e7e7      	b.n	801110a <_strtod_l+0x89a>
 801113a:	ea53 0308 	orrs.w	r3, r3, r8
 801113e:	d08a      	beq.n	8011056 <_strtod_l+0x7e6>
 8011140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011142:	b1e3      	cbz	r3, 801117e <_strtod_l+0x90e>
 8011144:	ea13 0f0a 	tst.w	r3, sl
 8011148:	d0ee      	beq.n	8011128 <_strtod_l+0x8b8>
 801114a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801114c:	9a04      	ldr	r2, [sp, #16]
 801114e:	4640      	mov	r0, r8
 8011150:	4649      	mov	r1, r9
 8011152:	b1c3      	cbz	r3, 8011186 <_strtod_l+0x916>
 8011154:	f7ff fb70 	bl	8010838 <sulp>
 8011158:	4602      	mov	r2, r0
 801115a:	460b      	mov	r3, r1
 801115c:	ec51 0b18 	vmov	r0, r1, d8
 8011160:	f7ef f894 	bl	800028c <__adddf3>
 8011164:	4680      	mov	r8, r0
 8011166:	4689      	mov	r9, r1
 8011168:	e7de      	b.n	8011128 <_strtod_l+0x8b8>
 801116a:	4013      	ands	r3, r2
 801116c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011170:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011174:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011178:	f04f 38ff 	mov.w	r8, #4294967295
 801117c:	e7d4      	b.n	8011128 <_strtod_l+0x8b8>
 801117e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011180:	ea13 0f08 	tst.w	r3, r8
 8011184:	e7e0      	b.n	8011148 <_strtod_l+0x8d8>
 8011186:	f7ff fb57 	bl	8010838 <sulp>
 801118a:	4602      	mov	r2, r0
 801118c:	460b      	mov	r3, r1
 801118e:	ec51 0b18 	vmov	r0, r1, d8
 8011192:	f7ef f879 	bl	8000288 <__aeabi_dsub>
 8011196:	2200      	movs	r2, #0
 8011198:	2300      	movs	r3, #0
 801119a:	4680      	mov	r8, r0
 801119c:	4689      	mov	r9, r1
 801119e:	f7ef fc93 	bl	8000ac8 <__aeabi_dcmpeq>
 80111a2:	2800      	cmp	r0, #0
 80111a4:	d0c0      	beq.n	8011128 <_strtod_l+0x8b8>
 80111a6:	e618      	b.n	8010dda <_strtod_l+0x56a>
 80111a8:	fffffc02 	.word	0xfffffc02
 80111ac:	7ff00000 	.word	0x7ff00000
 80111b0:	39500000 	.word	0x39500000
 80111b4:	000fffff 	.word	0x000fffff
 80111b8:	7fefffff 	.word	0x7fefffff
 80111bc:	08018288 	.word	0x08018288
 80111c0:	4659      	mov	r1, fp
 80111c2:	4628      	mov	r0, r5
 80111c4:	f003 f9ca 	bl	801455c <__ratio>
 80111c8:	ec57 6b10 	vmov	r6, r7, d0
 80111cc:	ee10 0a10 	vmov	r0, s0
 80111d0:	2200      	movs	r2, #0
 80111d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80111d6:	4639      	mov	r1, r7
 80111d8:	f7ef fc8a 	bl	8000af0 <__aeabi_dcmple>
 80111dc:	2800      	cmp	r0, #0
 80111de:	d071      	beq.n	80112c4 <_strtod_l+0xa54>
 80111e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d17c      	bne.n	80112e0 <_strtod_l+0xa70>
 80111e6:	f1b8 0f00 	cmp.w	r8, #0
 80111ea:	d15a      	bne.n	80112a2 <_strtod_l+0xa32>
 80111ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d15d      	bne.n	80112b0 <_strtod_l+0xa40>
 80111f4:	4b90      	ldr	r3, [pc, #576]	; (8011438 <_strtod_l+0xbc8>)
 80111f6:	2200      	movs	r2, #0
 80111f8:	4630      	mov	r0, r6
 80111fa:	4639      	mov	r1, r7
 80111fc:	f7ef fc6e 	bl	8000adc <__aeabi_dcmplt>
 8011200:	2800      	cmp	r0, #0
 8011202:	d15c      	bne.n	80112be <_strtod_l+0xa4e>
 8011204:	4630      	mov	r0, r6
 8011206:	4639      	mov	r1, r7
 8011208:	4b8c      	ldr	r3, [pc, #560]	; (801143c <_strtod_l+0xbcc>)
 801120a:	2200      	movs	r2, #0
 801120c:	f7ef f9f4 	bl	80005f8 <__aeabi_dmul>
 8011210:	4606      	mov	r6, r0
 8011212:	460f      	mov	r7, r1
 8011214:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8011218:	9606      	str	r6, [sp, #24]
 801121a:	9307      	str	r3, [sp, #28]
 801121c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011220:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8011224:	4b86      	ldr	r3, [pc, #536]	; (8011440 <_strtod_l+0xbd0>)
 8011226:	ea0a 0303 	and.w	r3, sl, r3
 801122a:	930d      	str	r3, [sp, #52]	; 0x34
 801122c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801122e:	4b85      	ldr	r3, [pc, #532]	; (8011444 <_strtod_l+0xbd4>)
 8011230:	429a      	cmp	r2, r3
 8011232:	f040 8090 	bne.w	8011356 <_strtod_l+0xae6>
 8011236:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801123a:	ec49 8b10 	vmov	d0, r8, r9
 801123e:	f003 f8c3 	bl	80143c8 <__ulp>
 8011242:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011246:	ec51 0b10 	vmov	r0, r1, d0
 801124a:	f7ef f9d5 	bl	80005f8 <__aeabi_dmul>
 801124e:	4642      	mov	r2, r8
 8011250:	464b      	mov	r3, r9
 8011252:	f7ef f81b 	bl	800028c <__adddf3>
 8011256:	460b      	mov	r3, r1
 8011258:	4979      	ldr	r1, [pc, #484]	; (8011440 <_strtod_l+0xbd0>)
 801125a:	4a7b      	ldr	r2, [pc, #492]	; (8011448 <_strtod_l+0xbd8>)
 801125c:	4019      	ands	r1, r3
 801125e:	4291      	cmp	r1, r2
 8011260:	4680      	mov	r8, r0
 8011262:	d944      	bls.n	80112ee <_strtod_l+0xa7e>
 8011264:	ee18 2a90 	vmov	r2, s17
 8011268:	4b78      	ldr	r3, [pc, #480]	; (801144c <_strtod_l+0xbdc>)
 801126a:	429a      	cmp	r2, r3
 801126c:	d104      	bne.n	8011278 <_strtod_l+0xa08>
 801126e:	ee18 3a10 	vmov	r3, s16
 8011272:	3301      	adds	r3, #1
 8011274:	f43f ad40 	beq.w	8010cf8 <_strtod_l+0x488>
 8011278:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801144c <_strtod_l+0xbdc>
 801127c:	f04f 38ff 	mov.w	r8, #4294967295
 8011280:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011282:	4620      	mov	r0, r4
 8011284:	f002 fd74 	bl	8013d70 <_Bfree>
 8011288:	9905      	ldr	r1, [sp, #20]
 801128a:	4620      	mov	r0, r4
 801128c:	f002 fd70 	bl	8013d70 <_Bfree>
 8011290:	4659      	mov	r1, fp
 8011292:	4620      	mov	r0, r4
 8011294:	f002 fd6c 	bl	8013d70 <_Bfree>
 8011298:	4629      	mov	r1, r5
 801129a:	4620      	mov	r0, r4
 801129c:	f002 fd68 	bl	8013d70 <_Bfree>
 80112a0:	e609      	b.n	8010eb6 <_strtod_l+0x646>
 80112a2:	f1b8 0f01 	cmp.w	r8, #1
 80112a6:	d103      	bne.n	80112b0 <_strtod_l+0xa40>
 80112a8:	f1b9 0f00 	cmp.w	r9, #0
 80112ac:	f43f ad95 	beq.w	8010dda <_strtod_l+0x56a>
 80112b0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8011408 <_strtod_l+0xb98>
 80112b4:	4f60      	ldr	r7, [pc, #384]	; (8011438 <_strtod_l+0xbc8>)
 80112b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80112ba:	2600      	movs	r6, #0
 80112bc:	e7ae      	b.n	801121c <_strtod_l+0x9ac>
 80112be:	4f5f      	ldr	r7, [pc, #380]	; (801143c <_strtod_l+0xbcc>)
 80112c0:	2600      	movs	r6, #0
 80112c2:	e7a7      	b.n	8011214 <_strtod_l+0x9a4>
 80112c4:	4b5d      	ldr	r3, [pc, #372]	; (801143c <_strtod_l+0xbcc>)
 80112c6:	4630      	mov	r0, r6
 80112c8:	4639      	mov	r1, r7
 80112ca:	2200      	movs	r2, #0
 80112cc:	f7ef f994 	bl	80005f8 <__aeabi_dmul>
 80112d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80112d2:	4606      	mov	r6, r0
 80112d4:	460f      	mov	r7, r1
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d09c      	beq.n	8011214 <_strtod_l+0x9a4>
 80112da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80112de:	e79d      	b.n	801121c <_strtod_l+0x9ac>
 80112e0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8011410 <_strtod_l+0xba0>
 80112e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80112e8:	ec57 6b17 	vmov	r6, r7, d7
 80112ec:	e796      	b.n	801121c <_strtod_l+0x9ac>
 80112ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80112f2:	9b04      	ldr	r3, [sp, #16]
 80112f4:	46ca      	mov	sl, r9
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d1c2      	bne.n	8011280 <_strtod_l+0xa10>
 80112fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80112fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011300:	0d1b      	lsrs	r3, r3, #20
 8011302:	051b      	lsls	r3, r3, #20
 8011304:	429a      	cmp	r2, r3
 8011306:	d1bb      	bne.n	8011280 <_strtod_l+0xa10>
 8011308:	4630      	mov	r0, r6
 801130a:	4639      	mov	r1, r7
 801130c:	f7ef fcd4 	bl	8000cb8 <__aeabi_d2lz>
 8011310:	f7ef f944 	bl	800059c <__aeabi_l2d>
 8011314:	4602      	mov	r2, r0
 8011316:	460b      	mov	r3, r1
 8011318:	4630      	mov	r0, r6
 801131a:	4639      	mov	r1, r7
 801131c:	f7ee ffb4 	bl	8000288 <__aeabi_dsub>
 8011320:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011322:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011326:	ea43 0308 	orr.w	r3, r3, r8
 801132a:	4313      	orrs	r3, r2
 801132c:	4606      	mov	r6, r0
 801132e:	460f      	mov	r7, r1
 8011330:	d054      	beq.n	80113dc <_strtod_l+0xb6c>
 8011332:	a339      	add	r3, pc, #228	; (adr r3, 8011418 <_strtod_l+0xba8>)
 8011334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011338:	f7ef fbd0 	bl	8000adc <__aeabi_dcmplt>
 801133c:	2800      	cmp	r0, #0
 801133e:	f47f ace5 	bne.w	8010d0c <_strtod_l+0x49c>
 8011342:	a337      	add	r3, pc, #220	; (adr r3, 8011420 <_strtod_l+0xbb0>)
 8011344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011348:	4630      	mov	r0, r6
 801134a:	4639      	mov	r1, r7
 801134c:	f7ef fbe4 	bl	8000b18 <__aeabi_dcmpgt>
 8011350:	2800      	cmp	r0, #0
 8011352:	d095      	beq.n	8011280 <_strtod_l+0xa10>
 8011354:	e4da      	b.n	8010d0c <_strtod_l+0x49c>
 8011356:	9b04      	ldr	r3, [sp, #16]
 8011358:	b333      	cbz	r3, 80113a8 <_strtod_l+0xb38>
 801135a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801135c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011360:	d822      	bhi.n	80113a8 <_strtod_l+0xb38>
 8011362:	a331      	add	r3, pc, #196	; (adr r3, 8011428 <_strtod_l+0xbb8>)
 8011364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011368:	4630      	mov	r0, r6
 801136a:	4639      	mov	r1, r7
 801136c:	f7ef fbc0 	bl	8000af0 <__aeabi_dcmple>
 8011370:	b1a0      	cbz	r0, 801139c <_strtod_l+0xb2c>
 8011372:	4639      	mov	r1, r7
 8011374:	4630      	mov	r0, r6
 8011376:	f7ef fc17 	bl	8000ba8 <__aeabi_d2uiz>
 801137a:	2801      	cmp	r0, #1
 801137c:	bf38      	it	cc
 801137e:	2001      	movcc	r0, #1
 8011380:	f7ef f8c0 	bl	8000504 <__aeabi_ui2d>
 8011384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011386:	4606      	mov	r6, r0
 8011388:	460f      	mov	r7, r1
 801138a:	bb23      	cbnz	r3, 80113d6 <_strtod_l+0xb66>
 801138c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011390:	9010      	str	r0, [sp, #64]	; 0x40
 8011392:	9311      	str	r3, [sp, #68]	; 0x44
 8011394:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011398:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801139c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801139e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80113a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80113a4:	1a9b      	subs	r3, r3, r2
 80113a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80113a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80113ac:	eeb0 0a48 	vmov.f32	s0, s16
 80113b0:	eef0 0a68 	vmov.f32	s1, s17
 80113b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80113b8:	f003 f806 	bl	80143c8 <__ulp>
 80113bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80113c0:	ec53 2b10 	vmov	r2, r3, d0
 80113c4:	f7ef f918 	bl	80005f8 <__aeabi_dmul>
 80113c8:	ec53 2b18 	vmov	r2, r3, d8
 80113cc:	f7ee ff5e 	bl	800028c <__adddf3>
 80113d0:	4680      	mov	r8, r0
 80113d2:	4689      	mov	r9, r1
 80113d4:	e78d      	b.n	80112f2 <_strtod_l+0xa82>
 80113d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80113da:	e7db      	b.n	8011394 <_strtod_l+0xb24>
 80113dc:	a314      	add	r3, pc, #80	; (adr r3, 8011430 <_strtod_l+0xbc0>)
 80113de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e2:	f7ef fb7b 	bl	8000adc <__aeabi_dcmplt>
 80113e6:	e7b3      	b.n	8011350 <_strtod_l+0xae0>
 80113e8:	2300      	movs	r3, #0
 80113ea:	930a      	str	r3, [sp, #40]	; 0x28
 80113ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80113ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80113f0:	6013      	str	r3, [r2, #0]
 80113f2:	f7ff ba7c 	b.w	80108ee <_strtod_l+0x7e>
 80113f6:	2a65      	cmp	r2, #101	; 0x65
 80113f8:	f43f ab75 	beq.w	8010ae6 <_strtod_l+0x276>
 80113fc:	2a45      	cmp	r2, #69	; 0x45
 80113fe:	f43f ab72 	beq.w	8010ae6 <_strtod_l+0x276>
 8011402:	2301      	movs	r3, #1
 8011404:	f7ff bbaa 	b.w	8010b5c <_strtod_l+0x2ec>
 8011408:	00000000 	.word	0x00000000
 801140c:	bff00000 	.word	0xbff00000
 8011410:	00000000 	.word	0x00000000
 8011414:	3ff00000 	.word	0x3ff00000
 8011418:	94a03595 	.word	0x94a03595
 801141c:	3fdfffff 	.word	0x3fdfffff
 8011420:	35afe535 	.word	0x35afe535
 8011424:	3fe00000 	.word	0x3fe00000
 8011428:	ffc00000 	.word	0xffc00000
 801142c:	41dfffff 	.word	0x41dfffff
 8011430:	94a03595 	.word	0x94a03595
 8011434:	3fcfffff 	.word	0x3fcfffff
 8011438:	3ff00000 	.word	0x3ff00000
 801143c:	3fe00000 	.word	0x3fe00000
 8011440:	7ff00000 	.word	0x7ff00000
 8011444:	7fe00000 	.word	0x7fe00000
 8011448:	7c9fffff 	.word	0x7c9fffff
 801144c:	7fefffff 	.word	0x7fefffff

08011450 <_strtod_r>:
 8011450:	4b01      	ldr	r3, [pc, #4]	; (8011458 <_strtod_r+0x8>)
 8011452:	f7ff ba0d 	b.w	8010870 <_strtod_l>
 8011456:	bf00      	nop
 8011458:	2000014c 	.word	0x2000014c

0801145c <strtof>:
 801145c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011460:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8011524 <strtof+0xc8>
 8011464:	4b2a      	ldr	r3, [pc, #168]	; (8011510 <strtof+0xb4>)
 8011466:	460a      	mov	r2, r1
 8011468:	ed2d 8b02 	vpush	{d8}
 801146c:	4601      	mov	r1, r0
 801146e:	f8d8 0000 	ldr.w	r0, [r8]
 8011472:	f7ff f9fd 	bl	8010870 <_strtod_l>
 8011476:	ec55 4b10 	vmov	r4, r5, d0
 801147a:	ee10 2a10 	vmov	r2, s0
 801147e:	ee10 0a10 	vmov	r0, s0
 8011482:	462b      	mov	r3, r5
 8011484:	4629      	mov	r1, r5
 8011486:	f7ef fb51 	bl	8000b2c <__aeabi_dcmpun>
 801148a:	b190      	cbz	r0, 80114b2 <strtof+0x56>
 801148c:	2d00      	cmp	r5, #0
 801148e:	4821      	ldr	r0, [pc, #132]	; (8011514 <strtof+0xb8>)
 8011490:	da09      	bge.n	80114a6 <strtof+0x4a>
 8011492:	f001 f9d9 	bl	8012848 <nanf>
 8011496:	eeb1 8a40 	vneg.f32	s16, s0
 801149a:	eeb0 0a48 	vmov.f32	s0, s16
 801149e:	ecbd 8b02 	vpop	{d8}
 80114a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114a6:	ecbd 8b02 	vpop	{d8}
 80114aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80114ae:	f001 b9cb 	b.w	8012848 <nanf>
 80114b2:	4620      	mov	r0, r4
 80114b4:	4629      	mov	r1, r5
 80114b6:	f7ef fb97 	bl	8000be8 <__aeabi_d2f>
 80114ba:	ee08 0a10 	vmov	s16, r0
 80114be:	eddf 7a16 	vldr	s15, [pc, #88]	; 8011518 <strtof+0xbc>
 80114c2:	eeb0 7ac8 	vabs.f32	s14, s16
 80114c6:	eeb4 7a67 	vcmp.f32	s14, s15
 80114ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ce:	dd11      	ble.n	80114f4 <strtof+0x98>
 80114d0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80114d4:	4b11      	ldr	r3, [pc, #68]	; (801151c <strtof+0xc0>)
 80114d6:	f04f 32ff 	mov.w	r2, #4294967295
 80114da:	4620      	mov	r0, r4
 80114dc:	4639      	mov	r1, r7
 80114de:	f7ef fb25 	bl	8000b2c <__aeabi_dcmpun>
 80114e2:	b980      	cbnz	r0, 8011506 <strtof+0xaa>
 80114e4:	4b0d      	ldr	r3, [pc, #52]	; (801151c <strtof+0xc0>)
 80114e6:	f04f 32ff 	mov.w	r2, #4294967295
 80114ea:	4620      	mov	r0, r4
 80114ec:	4639      	mov	r1, r7
 80114ee:	f7ef faff 	bl	8000af0 <__aeabi_dcmple>
 80114f2:	b940      	cbnz	r0, 8011506 <strtof+0xaa>
 80114f4:	ee18 3a10 	vmov	r3, s16
 80114f8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80114fc:	d1cd      	bne.n	801149a <strtof+0x3e>
 80114fe:	4b08      	ldr	r3, [pc, #32]	; (8011520 <strtof+0xc4>)
 8011500:	402b      	ands	r3, r5
 8011502:	2b00      	cmp	r3, #0
 8011504:	d0c9      	beq.n	801149a <strtof+0x3e>
 8011506:	f8d8 3000 	ldr.w	r3, [r8]
 801150a:	2222      	movs	r2, #34	; 0x22
 801150c:	601a      	str	r2, [r3, #0]
 801150e:	e7c4      	b.n	801149a <strtof+0x3e>
 8011510:	2000014c 	.word	0x2000014c
 8011514:	0801849e 	.word	0x0801849e
 8011518:	7f7fffff 	.word	0x7f7fffff
 801151c:	7fefffff 	.word	0x7fefffff
 8011520:	7ff00000 	.word	0x7ff00000
 8011524:	20000304 	.word	0x20000304

08011528 <_strtol_l.constprop.0>:
 8011528:	2b01      	cmp	r3, #1
 801152a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801152e:	d001      	beq.n	8011534 <_strtol_l.constprop.0+0xc>
 8011530:	2b24      	cmp	r3, #36	; 0x24
 8011532:	d906      	bls.n	8011542 <_strtol_l.constprop.0+0x1a>
 8011534:	f001 f93c 	bl	80127b0 <__errno>
 8011538:	2316      	movs	r3, #22
 801153a:	6003      	str	r3, [r0, #0]
 801153c:	2000      	movs	r0, #0
 801153e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011542:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011628 <_strtol_l.constprop.0+0x100>
 8011546:	460d      	mov	r5, r1
 8011548:	462e      	mov	r6, r5
 801154a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801154e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8011552:	f017 0708 	ands.w	r7, r7, #8
 8011556:	d1f7      	bne.n	8011548 <_strtol_l.constprop.0+0x20>
 8011558:	2c2d      	cmp	r4, #45	; 0x2d
 801155a:	d132      	bne.n	80115c2 <_strtol_l.constprop.0+0x9a>
 801155c:	782c      	ldrb	r4, [r5, #0]
 801155e:	2701      	movs	r7, #1
 8011560:	1cb5      	adds	r5, r6, #2
 8011562:	2b00      	cmp	r3, #0
 8011564:	d05b      	beq.n	801161e <_strtol_l.constprop.0+0xf6>
 8011566:	2b10      	cmp	r3, #16
 8011568:	d109      	bne.n	801157e <_strtol_l.constprop.0+0x56>
 801156a:	2c30      	cmp	r4, #48	; 0x30
 801156c:	d107      	bne.n	801157e <_strtol_l.constprop.0+0x56>
 801156e:	782c      	ldrb	r4, [r5, #0]
 8011570:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011574:	2c58      	cmp	r4, #88	; 0x58
 8011576:	d14d      	bne.n	8011614 <_strtol_l.constprop.0+0xec>
 8011578:	786c      	ldrb	r4, [r5, #1]
 801157a:	2310      	movs	r3, #16
 801157c:	3502      	adds	r5, #2
 801157e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011582:	f108 38ff 	add.w	r8, r8, #4294967295
 8011586:	f04f 0e00 	mov.w	lr, #0
 801158a:	fbb8 f9f3 	udiv	r9, r8, r3
 801158e:	4676      	mov	r6, lr
 8011590:	fb03 8a19 	mls	sl, r3, r9, r8
 8011594:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011598:	f1bc 0f09 	cmp.w	ip, #9
 801159c:	d816      	bhi.n	80115cc <_strtol_l.constprop.0+0xa4>
 801159e:	4664      	mov	r4, ip
 80115a0:	42a3      	cmp	r3, r4
 80115a2:	dd24      	ble.n	80115ee <_strtol_l.constprop.0+0xc6>
 80115a4:	f1be 3fff 	cmp.w	lr, #4294967295
 80115a8:	d008      	beq.n	80115bc <_strtol_l.constprop.0+0x94>
 80115aa:	45b1      	cmp	r9, r6
 80115ac:	d31c      	bcc.n	80115e8 <_strtol_l.constprop.0+0xc0>
 80115ae:	d101      	bne.n	80115b4 <_strtol_l.constprop.0+0x8c>
 80115b0:	45a2      	cmp	sl, r4
 80115b2:	db19      	blt.n	80115e8 <_strtol_l.constprop.0+0xc0>
 80115b4:	fb06 4603 	mla	r6, r6, r3, r4
 80115b8:	f04f 0e01 	mov.w	lr, #1
 80115bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80115c0:	e7e8      	b.n	8011594 <_strtol_l.constprop.0+0x6c>
 80115c2:	2c2b      	cmp	r4, #43	; 0x2b
 80115c4:	bf04      	itt	eq
 80115c6:	782c      	ldrbeq	r4, [r5, #0]
 80115c8:	1cb5      	addeq	r5, r6, #2
 80115ca:	e7ca      	b.n	8011562 <_strtol_l.constprop.0+0x3a>
 80115cc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80115d0:	f1bc 0f19 	cmp.w	ip, #25
 80115d4:	d801      	bhi.n	80115da <_strtol_l.constprop.0+0xb2>
 80115d6:	3c37      	subs	r4, #55	; 0x37
 80115d8:	e7e2      	b.n	80115a0 <_strtol_l.constprop.0+0x78>
 80115da:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80115de:	f1bc 0f19 	cmp.w	ip, #25
 80115e2:	d804      	bhi.n	80115ee <_strtol_l.constprop.0+0xc6>
 80115e4:	3c57      	subs	r4, #87	; 0x57
 80115e6:	e7db      	b.n	80115a0 <_strtol_l.constprop.0+0x78>
 80115e8:	f04f 3eff 	mov.w	lr, #4294967295
 80115ec:	e7e6      	b.n	80115bc <_strtol_l.constprop.0+0x94>
 80115ee:	f1be 3fff 	cmp.w	lr, #4294967295
 80115f2:	d105      	bne.n	8011600 <_strtol_l.constprop.0+0xd8>
 80115f4:	2322      	movs	r3, #34	; 0x22
 80115f6:	6003      	str	r3, [r0, #0]
 80115f8:	4646      	mov	r6, r8
 80115fa:	b942      	cbnz	r2, 801160e <_strtol_l.constprop.0+0xe6>
 80115fc:	4630      	mov	r0, r6
 80115fe:	e79e      	b.n	801153e <_strtol_l.constprop.0+0x16>
 8011600:	b107      	cbz	r7, 8011604 <_strtol_l.constprop.0+0xdc>
 8011602:	4276      	negs	r6, r6
 8011604:	2a00      	cmp	r2, #0
 8011606:	d0f9      	beq.n	80115fc <_strtol_l.constprop.0+0xd4>
 8011608:	f1be 0f00 	cmp.w	lr, #0
 801160c:	d000      	beq.n	8011610 <_strtol_l.constprop.0+0xe8>
 801160e:	1e69      	subs	r1, r5, #1
 8011610:	6011      	str	r1, [r2, #0]
 8011612:	e7f3      	b.n	80115fc <_strtol_l.constprop.0+0xd4>
 8011614:	2430      	movs	r4, #48	; 0x30
 8011616:	2b00      	cmp	r3, #0
 8011618:	d1b1      	bne.n	801157e <_strtol_l.constprop.0+0x56>
 801161a:	2308      	movs	r3, #8
 801161c:	e7af      	b.n	801157e <_strtol_l.constprop.0+0x56>
 801161e:	2c30      	cmp	r4, #48	; 0x30
 8011620:	d0a5      	beq.n	801156e <_strtol_l.constprop.0+0x46>
 8011622:	230a      	movs	r3, #10
 8011624:	e7ab      	b.n	801157e <_strtol_l.constprop.0+0x56>
 8011626:	bf00      	nop
 8011628:	080182b1 	.word	0x080182b1

0801162c <_strtol_r>:
 801162c:	f7ff bf7c 	b.w	8011528 <_strtol_l.constprop.0>

08011630 <strtol>:
 8011630:	4613      	mov	r3, r2
 8011632:	460a      	mov	r2, r1
 8011634:	4601      	mov	r1, r0
 8011636:	4802      	ldr	r0, [pc, #8]	; (8011640 <strtol+0x10>)
 8011638:	6800      	ldr	r0, [r0, #0]
 801163a:	f7ff bf75 	b.w	8011528 <_strtol_l.constprop.0>
 801163e:	bf00      	nop
 8011640:	20000304 	.word	0x20000304

08011644 <__cvt>:
 8011644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011648:	ec55 4b10 	vmov	r4, r5, d0
 801164c:	2d00      	cmp	r5, #0
 801164e:	460e      	mov	r6, r1
 8011650:	4619      	mov	r1, r3
 8011652:	462b      	mov	r3, r5
 8011654:	bfbb      	ittet	lt
 8011656:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801165a:	461d      	movlt	r5, r3
 801165c:	2300      	movge	r3, #0
 801165e:	232d      	movlt	r3, #45	; 0x2d
 8011660:	700b      	strb	r3, [r1, #0]
 8011662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011664:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011668:	4691      	mov	r9, r2
 801166a:	f023 0820 	bic.w	r8, r3, #32
 801166e:	bfbc      	itt	lt
 8011670:	4622      	movlt	r2, r4
 8011672:	4614      	movlt	r4, r2
 8011674:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011678:	d005      	beq.n	8011686 <__cvt+0x42>
 801167a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801167e:	d100      	bne.n	8011682 <__cvt+0x3e>
 8011680:	3601      	adds	r6, #1
 8011682:	2102      	movs	r1, #2
 8011684:	e000      	b.n	8011688 <__cvt+0x44>
 8011686:	2103      	movs	r1, #3
 8011688:	ab03      	add	r3, sp, #12
 801168a:	9301      	str	r3, [sp, #4]
 801168c:	ab02      	add	r3, sp, #8
 801168e:	9300      	str	r3, [sp, #0]
 8011690:	ec45 4b10 	vmov	d0, r4, r5
 8011694:	4653      	mov	r3, sl
 8011696:	4632      	mov	r2, r6
 8011698:	f001 f982 	bl	80129a0 <_dtoa_r>
 801169c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80116a0:	4607      	mov	r7, r0
 80116a2:	d102      	bne.n	80116aa <__cvt+0x66>
 80116a4:	f019 0f01 	tst.w	r9, #1
 80116a8:	d022      	beq.n	80116f0 <__cvt+0xac>
 80116aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80116ae:	eb07 0906 	add.w	r9, r7, r6
 80116b2:	d110      	bne.n	80116d6 <__cvt+0x92>
 80116b4:	783b      	ldrb	r3, [r7, #0]
 80116b6:	2b30      	cmp	r3, #48	; 0x30
 80116b8:	d10a      	bne.n	80116d0 <__cvt+0x8c>
 80116ba:	2200      	movs	r2, #0
 80116bc:	2300      	movs	r3, #0
 80116be:	4620      	mov	r0, r4
 80116c0:	4629      	mov	r1, r5
 80116c2:	f7ef fa01 	bl	8000ac8 <__aeabi_dcmpeq>
 80116c6:	b918      	cbnz	r0, 80116d0 <__cvt+0x8c>
 80116c8:	f1c6 0601 	rsb	r6, r6, #1
 80116cc:	f8ca 6000 	str.w	r6, [sl]
 80116d0:	f8da 3000 	ldr.w	r3, [sl]
 80116d4:	4499      	add	r9, r3
 80116d6:	2200      	movs	r2, #0
 80116d8:	2300      	movs	r3, #0
 80116da:	4620      	mov	r0, r4
 80116dc:	4629      	mov	r1, r5
 80116de:	f7ef f9f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80116e2:	b108      	cbz	r0, 80116e8 <__cvt+0xa4>
 80116e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80116e8:	2230      	movs	r2, #48	; 0x30
 80116ea:	9b03      	ldr	r3, [sp, #12]
 80116ec:	454b      	cmp	r3, r9
 80116ee:	d307      	bcc.n	8011700 <__cvt+0xbc>
 80116f0:	9b03      	ldr	r3, [sp, #12]
 80116f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80116f4:	1bdb      	subs	r3, r3, r7
 80116f6:	4638      	mov	r0, r7
 80116f8:	6013      	str	r3, [r2, #0]
 80116fa:	b004      	add	sp, #16
 80116fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011700:	1c59      	adds	r1, r3, #1
 8011702:	9103      	str	r1, [sp, #12]
 8011704:	701a      	strb	r2, [r3, #0]
 8011706:	e7f0      	b.n	80116ea <__cvt+0xa6>

08011708 <__exponent>:
 8011708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801170a:	4603      	mov	r3, r0
 801170c:	2900      	cmp	r1, #0
 801170e:	bfb8      	it	lt
 8011710:	4249      	neglt	r1, r1
 8011712:	f803 2b02 	strb.w	r2, [r3], #2
 8011716:	bfb4      	ite	lt
 8011718:	222d      	movlt	r2, #45	; 0x2d
 801171a:	222b      	movge	r2, #43	; 0x2b
 801171c:	2909      	cmp	r1, #9
 801171e:	7042      	strb	r2, [r0, #1]
 8011720:	dd2a      	ble.n	8011778 <__exponent+0x70>
 8011722:	f10d 0207 	add.w	r2, sp, #7
 8011726:	4617      	mov	r7, r2
 8011728:	260a      	movs	r6, #10
 801172a:	4694      	mov	ip, r2
 801172c:	fb91 f5f6 	sdiv	r5, r1, r6
 8011730:	fb06 1415 	mls	r4, r6, r5, r1
 8011734:	3430      	adds	r4, #48	; 0x30
 8011736:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801173a:	460c      	mov	r4, r1
 801173c:	2c63      	cmp	r4, #99	; 0x63
 801173e:	f102 32ff 	add.w	r2, r2, #4294967295
 8011742:	4629      	mov	r1, r5
 8011744:	dcf1      	bgt.n	801172a <__exponent+0x22>
 8011746:	3130      	adds	r1, #48	; 0x30
 8011748:	f1ac 0402 	sub.w	r4, ip, #2
 801174c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011750:	1c41      	adds	r1, r0, #1
 8011752:	4622      	mov	r2, r4
 8011754:	42ba      	cmp	r2, r7
 8011756:	d30a      	bcc.n	801176e <__exponent+0x66>
 8011758:	f10d 0209 	add.w	r2, sp, #9
 801175c:	eba2 020c 	sub.w	r2, r2, ip
 8011760:	42bc      	cmp	r4, r7
 8011762:	bf88      	it	hi
 8011764:	2200      	movhi	r2, #0
 8011766:	4413      	add	r3, r2
 8011768:	1a18      	subs	r0, r3, r0
 801176a:	b003      	add	sp, #12
 801176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801176e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011772:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011776:	e7ed      	b.n	8011754 <__exponent+0x4c>
 8011778:	2330      	movs	r3, #48	; 0x30
 801177a:	3130      	adds	r1, #48	; 0x30
 801177c:	7083      	strb	r3, [r0, #2]
 801177e:	70c1      	strb	r1, [r0, #3]
 8011780:	1d03      	adds	r3, r0, #4
 8011782:	e7f1      	b.n	8011768 <__exponent+0x60>

08011784 <_printf_float>:
 8011784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011788:	ed2d 8b02 	vpush	{d8}
 801178c:	b08d      	sub	sp, #52	; 0x34
 801178e:	460c      	mov	r4, r1
 8011790:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011794:	4616      	mov	r6, r2
 8011796:	461f      	mov	r7, r3
 8011798:	4605      	mov	r5, r0
 801179a:	f000 ffaf 	bl	80126fc <_localeconv_r>
 801179e:	f8d0 a000 	ldr.w	sl, [r0]
 80117a2:	4650      	mov	r0, sl
 80117a4:	f7ee fd64 	bl	8000270 <strlen>
 80117a8:	2300      	movs	r3, #0
 80117aa:	930a      	str	r3, [sp, #40]	; 0x28
 80117ac:	6823      	ldr	r3, [r4, #0]
 80117ae:	9305      	str	r3, [sp, #20]
 80117b0:	f8d8 3000 	ldr.w	r3, [r8]
 80117b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80117b8:	3307      	adds	r3, #7
 80117ba:	f023 0307 	bic.w	r3, r3, #7
 80117be:	f103 0208 	add.w	r2, r3, #8
 80117c2:	f8c8 2000 	str.w	r2, [r8]
 80117c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80117ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80117ce:	9307      	str	r3, [sp, #28]
 80117d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80117d4:	ee08 0a10 	vmov	s16, r0
 80117d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80117dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80117e0:	4b9e      	ldr	r3, [pc, #632]	; (8011a5c <_printf_float+0x2d8>)
 80117e2:	f04f 32ff 	mov.w	r2, #4294967295
 80117e6:	f7ef f9a1 	bl	8000b2c <__aeabi_dcmpun>
 80117ea:	bb88      	cbnz	r0, 8011850 <_printf_float+0xcc>
 80117ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80117f0:	4b9a      	ldr	r3, [pc, #616]	; (8011a5c <_printf_float+0x2d8>)
 80117f2:	f04f 32ff 	mov.w	r2, #4294967295
 80117f6:	f7ef f97b 	bl	8000af0 <__aeabi_dcmple>
 80117fa:	bb48      	cbnz	r0, 8011850 <_printf_float+0xcc>
 80117fc:	2200      	movs	r2, #0
 80117fe:	2300      	movs	r3, #0
 8011800:	4640      	mov	r0, r8
 8011802:	4649      	mov	r1, r9
 8011804:	f7ef f96a 	bl	8000adc <__aeabi_dcmplt>
 8011808:	b110      	cbz	r0, 8011810 <_printf_float+0x8c>
 801180a:	232d      	movs	r3, #45	; 0x2d
 801180c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011810:	4a93      	ldr	r2, [pc, #588]	; (8011a60 <_printf_float+0x2dc>)
 8011812:	4b94      	ldr	r3, [pc, #592]	; (8011a64 <_printf_float+0x2e0>)
 8011814:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011818:	bf94      	ite	ls
 801181a:	4690      	movls	r8, r2
 801181c:	4698      	movhi	r8, r3
 801181e:	2303      	movs	r3, #3
 8011820:	6123      	str	r3, [r4, #16]
 8011822:	9b05      	ldr	r3, [sp, #20]
 8011824:	f023 0304 	bic.w	r3, r3, #4
 8011828:	6023      	str	r3, [r4, #0]
 801182a:	f04f 0900 	mov.w	r9, #0
 801182e:	9700      	str	r7, [sp, #0]
 8011830:	4633      	mov	r3, r6
 8011832:	aa0b      	add	r2, sp, #44	; 0x2c
 8011834:	4621      	mov	r1, r4
 8011836:	4628      	mov	r0, r5
 8011838:	f000 f9da 	bl	8011bf0 <_printf_common>
 801183c:	3001      	adds	r0, #1
 801183e:	f040 8090 	bne.w	8011962 <_printf_float+0x1de>
 8011842:	f04f 30ff 	mov.w	r0, #4294967295
 8011846:	b00d      	add	sp, #52	; 0x34
 8011848:	ecbd 8b02 	vpop	{d8}
 801184c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011850:	4642      	mov	r2, r8
 8011852:	464b      	mov	r3, r9
 8011854:	4640      	mov	r0, r8
 8011856:	4649      	mov	r1, r9
 8011858:	f7ef f968 	bl	8000b2c <__aeabi_dcmpun>
 801185c:	b140      	cbz	r0, 8011870 <_printf_float+0xec>
 801185e:	464b      	mov	r3, r9
 8011860:	2b00      	cmp	r3, #0
 8011862:	bfbc      	itt	lt
 8011864:	232d      	movlt	r3, #45	; 0x2d
 8011866:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801186a:	4a7f      	ldr	r2, [pc, #508]	; (8011a68 <_printf_float+0x2e4>)
 801186c:	4b7f      	ldr	r3, [pc, #508]	; (8011a6c <_printf_float+0x2e8>)
 801186e:	e7d1      	b.n	8011814 <_printf_float+0x90>
 8011870:	6863      	ldr	r3, [r4, #4]
 8011872:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011876:	9206      	str	r2, [sp, #24]
 8011878:	1c5a      	adds	r2, r3, #1
 801187a:	d13f      	bne.n	80118fc <_printf_float+0x178>
 801187c:	2306      	movs	r3, #6
 801187e:	6063      	str	r3, [r4, #4]
 8011880:	9b05      	ldr	r3, [sp, #20]
 8011882:	6861      	ldr	r1, [r4, #4]
 8011884:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011888:	2300      	movs	r3, #0
 801188a:	9303      	str	r3, [sp, #12]
 801188c:	ab0a      	add	r3, sp, #40	; 0x28
 801188e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011892:	ab09      	add	r3, sp, #36	; 0x24
 8011894:	ec49 8b10 	vmov	d0, r8, r9
 8011898:	9300      	str	r3, [sp, #0]
 801189a:	6022      	str	r2, [r4, #0]
 801189c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80118a0:	4628      	mov	r0, r5
 80118a2:	f7ff fecf 	bl	8011644 <__cvt>
 80118a6:	9b06      	ldr	r3, [sp, #24]
 80118a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118aa:	2b47      	cmp	r3, #71	; 0x47
 80118ac:	4680      	mov	r8, r0
 80118ae:	d108      	bne.n	80118c2 <_printf_float+0x13e>
 80118b0:	1cc8      	adds	r0, r1, #3
 80118b2:	db02      	blt.n	80118ba <_printf_float+0x136>
 80118b4:	6863      	ldr	r3, [r4, #4]
 80118b6:	4299      	cmp	r1, r3
 80118b8:	dd41      	ble.n	801193e <_printf_float+0x1ba>
 80118ba:	f1ab 0302 	sub.w	r3, fp, #2
 80118be:	fa5f fb83 	uxtb.w	fp, r3
 80118c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80118c6:	d820      	bhi.n	801190a <_printf_float+0x186>
 80118c8:	3901      	subs	r1, #1
 80118ca:	465a      	mov	r2, fp
 80118cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80118d0:	9109      	str	r1, [sp, #36]	; 0x24
 80118d2:	f7ff ff19 	bl	8011708 <__exponent>
 80118d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118d8:	1813      	adds	r3, r2, r0
 80118da:	2a01      	cmp	r2, #1
 80118dc:	4681      	mov	r9, r0
 80118de:	6123      	str	r3, [r4, #16]
 80118e0:	dc02      	bgt.n	80118e8 <_printf_float+0x164>
 80118e2:	6822      	ldr	r2, [r4, #0]
 80118e4:	07d2      	lsls	r2, r2, #31
 80118e6:	d501      	bpl.n	80118ec <_printf_float+0x168>
 80118e8:	3301      	adds	r3, #1
 80118ea:	6123      	str	r3, [r4, #16]
 80118ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d09c      	beq.n	801182e <_printf_float+0xaa>
 80118f4:	232d      	movs	r3, #45	; 0x2d
 80118f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118fa:	e798      	b.n	801182e <_printf_float+0xaa>
 80118fc:	9a06      	ldr	r2, [sp, #24]
 80118fe:	2a47      	cmp	r2, #71	; 0x47
 8011900:	d1be      	bne.n	8011880 <_printf_float+0xfc>
 8011902:	2b00      	cmp	r3, #0
 8011904:	d1bc      	bne.n	8011880 <_printf_float+0xfc>
 8011906:	2301      	movs	r3, #1
 8011908:	e7b9      	b.n	801187e <_printf_float+0xfa>
 801190a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801190e:	d118      	bne.n	8011942 <_printf_float+0x1be>
 8011910:	2900      	cmp	r1, #0
 8011912:	6863      	ldr	r3, [r4, #4]
 8011914:	dd0b      	ble.n	801192e <_printf_float+0x1aa>
 8011916:	6121      	str	r1, [r4, #16]
 8011918:	b913      	cbnz	r3, 8011920 <_printf_float+0x19c>
 801191a:	6822      	ldr	r2, [r4, #0]
 801191c:	07d0      	lsls	r0, r2, #31
 801191e:	d502      	bpl.n	8011926 <_printf_float+0x1a2>
 8011920:	3301      	adds	r3, #1
 8011922:	440b      	add	r3, r1
 8011924:	6123      	str	r3, [r4, #16]
 8011926:	65a1      	str	r1, [r4, #88]	; 0x58
 8011928:	f04f 0900 	mov.w	r9, #0
 801192c:	e7de      	b.n	80118ec <_printf_float+0x168>
 801192e:	b913      	cbnz	r3, 8011936 <_printf_float+0x1b2>
 8011930:	6822      	ldr	r2, [r4, #0]
 8011932:	07d2      	lsls	r2, r2, #31
 8011934:	d501      	bpl.n	801193a <_printf_float+0x1b6>
 8011936:	3302      	adds	r3, #2
 8011938:	e7f4      	b.n	8011924 <_printf_float+0x1a0>
 801193a:	2301      	movs	r3, #1
 801193c:	e7f2      	b.n	8011924 <_printf_float+0x1a0>
 801193e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011944:	4299      	cmp	r1, r3
 8011946:	db05      	blt.n	8011954 <_printf_float+0x1d0>
 8011948:	6823      	ldr	r3, [r4, #0]
 801194a:	6121      	str	r1, [r4, #16]
 801194c:	07d8      	lsls	r0, r3, #31
 801194e:	d5ea      	bpl.n	8011926 <_printf_float+0x1a2>
 8011950:	1c4b      	adds	r3, r1, #1
 8011952:	e7e7      	b.n	8011924 <_printf_float+0x1a0>
 8011954:	2900      	cmp	r1, #0
 8011956:	bfd4      	ite	le
 8011958:	f1c1 0202 	rsble	r2, r1, #2
 801195c:	2201      	movgt	r2, #1
 801195e:	4413      	add	r3, r2
 8011960:	e7e0      	b.n	8011924 <_printf_float+0x1a0>
 8011962:	6823      	ldr	r3, [r4, #0]
 8011964:	055a      	lsls	r2, r3, #21
 8011966:	d407      	bmi.n	8011978 <_printf_float+0x1f4>
 8011968:	6923      	ldr	r3, [r4, #16]
 801196a:	4642      	mov	r2, r8
 801196c:	4631      	mov	r1, r6
 801196e:	4628      	mov	r0, r5
 8011970:	47b8      	blx	r7
 8011972:	3001      	adds	r0, #1
 8011974:	d12c      	bne.n	80119d0 <_printf_float+0x24c>
 8011976:	e764      	b.n	8011842 <_printf_float+0xbe>
 8011978:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801197c:	f240 80e0 	bls.w	8011b40 <_printf_float+0x3bc>
 8011980:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011984:	2200      	movs	r2, #0
 8011986:	2300      	movs	r3, #0
 8011988:	f7ef f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 801198c:	2800      	cmp	r0, #0
 801198e:	d034      	beq.n	80119fa <_printf_float+0x276>
 8011990:	4a37      	ldr	r2, [pc, #220]	; (8011a70 <_printf_float+0x2ec>)
 8011992:	2301      	movs	r3, #1
 8011994:	4631      	mov	r1, r6
 8011996:	4628      	mov	r0, r5
 8011998:	47b8      	blx	r7
 801199a:	3001      	adds	r0, #1
 801199c:	f43f af51 	beq.w	8011842 <_printf_float+0xbe>
 80119a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119a4:	429a      	cmp	r2, r3
 80119a6:	db02      	blt.n	80119ae <_printf_float+0x22a>
 80119a8:	6823      	ldr	r3, [r4, #0]
 80119aa:	07d8      	lsls	r0, r3, #31
 80119ac:	d510      	bpl.n	80119d0 <_printf_float+0x24c>
 80119ae:	ee18 3a10 	vmov	r3, s16
 80119b2:	4652      	mov	r2, sl
 80119b4:	4631      	mov	r1, r6
 80119b6:	4628      	mov	r0, r5
 80119b8:	47b8      	blx	r7
 80119ba:	3001      	adds	r0, #1
 80119bc:	f43f af41 	beq.w	8011842 <_printf_float+0xbe>
 80119c0:	f04f 0800 	mov.w	r8, #0
 80119c4:	f104 091a 	add.w	r9, r4, #26
 80119c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119ca:	3b01      	subs	r3, #1
 80119cc:	4543      	cmp	r3, r8
 80119ce:	dc09      	bgt.n	80119e4 <_printf_float+0x260>
 80119d0:	6823      	ldr	r3, [r4, #0]
 80119d2:	079b      	lsls	r3, r3, #30
 80119d4:	f100 8107 	bmi.w	8011be6 <_printf_float+0x462>
 80119d8:	68e0      	ldr	r0, [r4, #12]
 80119da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119dc:	4298      	cmp	r0, r3
 80119de:	bfb8      	it	lt
 80119e0:	4618      	movlt	r0, r3
 80119e2:	e730      	b.n	8011846 <_printf_float+0xc2>
 80119e4:	2301      	movs	r3, #1
 80119e6:	464a      	mov	r2, r9
 80119e8:	4631      	mov	r1, r6
 80119ea:	4628      	mov	r0, r5
 80119ec:	47b8      	blx	r7
 80119ee:	3001      	adds	r0, #1
 80119f0:	f43f af27 	beq.w	8011842 <_printf_float+0xbe>
 80119f4:	f108 0801 	add.w	r8, r8, #1
 80119f8:	e7e6      	b.n	80119c8 <_printf_float+0x244>
 80119fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	dc39      	bgt.n	8011a74 <_printf_float+0x2f0>
 8011a00:	4a1b      	ldr	r2, [pc, #108]	; (8011a70 <_printf_float+0x2ec>)
 8011a02:	2301      	movs	r3, #1
 8011a04:	4631      	mov	r1, r6
 8011a06:	4628      	mov	r0, r5
 8011a08:	47b8      	blx	r7
 8011a0a:	3001      	adds	r0, #1
 8011a0c:	f43f af19 	beq.w	8011842 <_printf_float+0xbe>
 8011a10:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011a14:	4313      	orrs	r3, r2
 8011a16:	d102      	bne.n	8011a1e <_printf_float+0x29a>
 8011a18:	6823      	ldr	r3, [r4, #0]
 8011a1a:	07d9      	lsls	r1, r3, #31
 8011a1c:	d5d8      	bpl.n	80119d0 <_printf_float+0x24c>
 8011a1e:	ee18 3a10 	vmov	r3, s16
 8011a22:	4652      	mov	r2, sl
 8011a24:	4631      	mov	r1, r6
 8011a26:	4628      	mov	r0, r5
 8011a28:	47b8      	blx	r7
 8011a2a:	3001      	adds	r0, #1
 8011a2c:	f43f af09 	beq.w	8011842 <_printf_float+0xbe>
 8011a30:	f04f 0900 	mov.w	r9, #0
 8011a34:	f104 0a1a 	add.w	sl, r4, #26
 8011a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a3a:	425b      	negs	r3, r3
 8011a3c:	454b      	cmp	r3, r9
 8011a3e:	dc01      	bgt.n	8011a44 <_printf_float+0x2c0>
 8011a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a42:	e792      	b.n	801196a <_printf_float+0x1e6>
 8011a44:	2301      	movs	r3, #1
 8011a46:	4652      	mov	r2, sl
 8011a48:	4631      	mov	r1, r6
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	47b8      	blx	r7
 8011a4e:	3001      	adds	r0, #1
 8011a50:	f43f aef7 	beq.w	8011842 <_printf_float+0xbe>
 8011a54:	f109 0901 	add.w	r9, r9, #1
 8011a58:	e7ee      	b.n	8011a38 <_printf_float+0x2b4>
 8011a5a:	bf00      	nop
 8011a5c:	7fefffff 	.word	0x7fefffff
 8011a60:	080183b1 	.word	0x080183b1
 8011a64:	080183b5 	.word	0x080183b5
 8011a68:	080183b9 	.word	0x080183b9
 8011a6c:	080183bd 	.word	0x080183bd
 8011a70:	080183c1 	.word	0x080183c1
 8011a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	bfa8      	it	ge
 8011a7c:	461a      	movge	r2, r3
 8011a7e:	2a00      	cmp	r2, #0
 8011a80:	4691      	mov	r9, r2
 8011a82:	dc37      	bgt.n	8011af4 <_printf_float+0x370>
 8011a84:	f04f 0b00 	mov.w	fp, #0
 8011a88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a8c:	f104 021a 	add.w	r2, r4, #26
 8011a90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011a92:	9305      	str	r3, [sp, #20]
 8011a94:	eba3 0309 	sub.w	r3, r3, r9
 8011a98:	455b      	cmp	r3, fp
 8011a9a:	dc33      	bgt.n	8011b04 <_printf_float+0x380>
 8011a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011aa0:	429a      	cmp	r2, r3
 8011aa2:	db3b      	blt.n	8011b1c <_printf_float+0x398>
 8011aa4:	6823      	ldr	r3, [r4, #0]
 8011aa6:	07da      	lsls	r2, r3, #31
 8011aa8:	d438      	bmi.n	8011b1c <_printf_float+0x398>
 8011aaa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011aae:	eba2 0903 	sub.w	r9, r2, r3
 8011ab2:	9b05      	ldr	r3, [sp, #20]
 8011ab4:	1ad2      	subs	r2, r2, r3
 8011ab6:	4591      	cmp	r9, r2
 8011ab8:	bfa8      	it	ge
 8011aba:	4691      	movge	r9, r2
 8011abc:	f1b9 0f00 	cmp.w	r9, #0
 8011ac0:	dc35      	bgt.n	8011b2e <_printf_float+0x3aa>
 8011ac2:	f04f 0800 	mov.w	r8, #0
 8011ac6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011aca:	f104 0a1a 	add.w	sl, r4, #26
 8011ace:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011ad2:	1a9b      	subs	r3, r3, r2
 8011ad4:	eba3 0309 	sub.w	r3, r3, r9
 8011ad8:	4543      	cmp	r3, r8
 8011ada:	f77f af79 	ble.w	80119d0 <_printf_float+0x24c>
 8011ade:	2301      	movs	r3, #1
 8011ae0:	4652      	mov	r2, sl
 8011ae2:	4631      	mov	r1, r6
 8011ae4:	4628      	mov	r0, r5
 8011ae6:	47b8      	blx	r7
 8011ae8:	3001      	adds	r0, #1
 8011aea:	f43f aeaa 	beq.w	8011842 <_printf_float+0xbe>
 8011aee:	f108 0801 	add.w	r8, r8, #1
 8011af2:	e7ec      	b.n	8011ace <_printf_float+0x34a>
 8011af4:	4613      	mov	r3, r2
 8011af6:	4631      	mov	r1, r6
 8011af8:	4642      	mov	r2, r8
 8011afa:	4628      	mov	r0, r5
 8011afc:	47b8      	blx	r7
 8011afe:	3001      	adds	r0, #1
 8011b00:	d1c0      	bne.n	8011a84 <_printf_float+0x300>
 8011b02:	e69e      	b.n	8011842 <_printf_float+0xbe>
 8011b04:	2301      	movs	r3, #1
 8011b06:	4631      	mov	r1, r6
 8011b08:	4628      	mov	r0, r5
 8011b0a:	9205      	str	r2, [sp, #20]
 8011b0c:	47b8      	blx	r7
 8011b0e:	3001      	adds	r0, #1
 8011b10:	f43f ae97 	beq.w	8011842 <_printf_float+0xbe>
 8011b14:	9a05      	ldr	r2, [sp, #20]
 8011b16:	f10b 0b01 	add.w	fp, fp, #1
 8011b1a:	e7b9      	b.n	8011a90 <_printf_float+0x30c>
 8011b1c:	ee18 3a10 	vmov	r3, s16
 8011b20:	4652      	mov	r2, sl
 8011b22:	4631      	mov	r1, r6
 8011b24:	4628      	mov	r0, r5
 8011b26:	47b8      	blx	r7
 8011b28:	3001      	adds	r0, #1
 8011b2a:	d1be      	bne.n	8011aaa <_printf_float+0x326>
 8011b2c:	e689      	b.n	8011842 <_printf_float+0xbe>
 8011b2e:	9a05      	ldr	r2, [sp, #20]
 8011b30:	464b      	mov	r3, r9
 8011b32:	4442      	add	r2, r8
 8011b34:	4631      	mov	r1, r6
 8011b36:	4628      	mov	r0, r5
 8011b38:	47b8      	blx	r7
 8011b3a:	3001      	adds	r0, #1
 8011b3c:	d1c1      	bne.n	8011ac2 <_printf_float+0x33e>
 8011b3e:	e680      	b.n	8011842 <_printf_float+0xbe>
 8011b40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b42:	2a01      	cmp	r2, #1
 8011b44:	dc01      	bgt.n	8011b4a <_printf_float+0x3c6>
 8011b46:	07db      	lsls	r3, r3, #31
 8011b48:	d53a      	bpl.n	8011bc0 <_printf_float+0x43c>
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	4642      	mov	r2, r8
 8011b4e:	4631      	mov	r1, r6
 8011b50:	4628      	mov	r0, r5
 8011b52:	47b8      	blx	r7
 8011b54:	3001      	adds	r0, #1
 8011b56:	f43f ae74 	beq.w	8011842 <_printf_float+0xbe>
 8011b5a:	ee18 3a10 	vmov	r3, s16
 8011b5e:	4652      	mov	r2, sl
 8011b60:	4631      	mov	r1, r6
 8011b62:	4628      	mov	r0, r5
 8011b64:	47b8      	blx	r7
 8011b66:	3001      	adds	r0, #1
 8011b68:	f43f ae6b 	beq.w	8011842 <_printf_float+0xbe>
 8011b6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011b70:	2200      	movs	r2, #0
 8011b72:	2300      	movs	r3, #0
 8011b74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011b78:	f7ee ffa6 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b7c:	b9d8      	cbnz	r0, 8011bb6 <_printf_float+0x432>
 8011b7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011b82:	f108 0201 	add.w	r2, r8, #1
 8011b86:	4631      	mov	r1, r6
 8011b88:	4628      	mov	r0, r5
 8011b8a:	47b8      	blx	r7
 8011b8c:	3001      	adds	r0, #1
 8011b8e:	d10e      	bne.n	8011bae <_printf_float+0x42a>
 8011b90:	e657      	b.n	8011842 <_printf_float+0xbe>
 8011b92:	2301      	movs	r3, #1
 8011b94:	4652      	mov	r2, sl
 8011b96:	4631      	mov	r1, r6
 8011b98:	4628      	mov	r0, r5
 8011b9a:	47b8      	blx	r7
 8011b9c:	3001      	adds	r0, #1
 8011b9e:	f43f ae50 	beq.w	8011842 <_printf_float+0xbe>
 8011ba2:	f108 0801 	add.w	r8, r8, #1
 8011ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ba8:	3b01      	subs	r3, #1
 8011baa:	4543      	cmp	r3, r8
 8011bac:	dcf1      	bgt.n	8011b92 <_printf_float+0x40e>
 8011bae:	464b      	mov	r3, r9
 8011bb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011bb4:	e6da      	b.n	801196c <_printf_float+0x1e8>
 8011bb6:	f04f 0800 	mov.w	r8, #0
 8011bba:	f104 0a1a 	add.w	sl, r4, #26
 8011bbe:	e7f2      	b.n	8011ba6 <_printf_float+0x422>
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	4642      	mov	r2, r8
 8011bc4:	e7df      	b.n	8011b86 <_printf_float+0x402>
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	464a      	mov	r2, r9
 8011bca:	4631      	mov	r1, r6
 8011bcc:	4628      	mov	r0, r5
 8011bce:	47b8      	blx	r7
 8011bd0:	3001      	adds	r0, #1
 8011bd2:	f43f ae36 	beq.w	8011842 <_printf_float+0xbe>
 8011bd6:	f108 0801 	add.w	r8, r8, #1
 8011bda:	68e3      	ldr	r3, [r4, #12]
 8011bdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011bde:	1a5b      	subs	r3, r3, r1
 8011be0:	4543      	cmp	r3, r8
 8011be2:	dcf0      	bgt.n	8011bc6 <_printf_float+0x442>
 8011be4:	e6f8      	b.n	80119d8 <_printf_float+0x254>
 8011be6:	f04f 0800 	mov.w	r8, #0
 8011bea:	f104 0919 	add.w	r9, r4, #25
 8011bee:	e7f4      	b.n	8011bda <_printf_float+0x456>

08011bf0 <_printf_common>:
 8011bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bf4:	4616      	mov	r6, r2
 8011bf6:	4699      	mov	r9, r3
 8011bf8:	688a      	ldr	r2, [r1, #8]
 8011bfa:	690b      	ldr	r3, [r1, #16]
 8011bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011c00:	4293      	cmp	r3, r2
 8011c02:	bfb8      	it	lt
 8011c04:	4613      	movlt	r3, r2
 8011c06:	6033      	str	r3, [r6, #0]
 8011c08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011c0c:	4607      	mov	r7, r0
 8011c0e:	460c      	mov	r4, r1
 8011c10:	b10a      	cbz	r2, 8011c16 <_printf_common+0x26>
 8011c12:	3301      	adds	r3, #1
 8011c14:	6033      	str	r3, [r6, #0]
 8011c16:	6823      	ldr	r3, [r4, #0]
 8011c18:	0699      	lsls	r1, r3, #26
 8011c1a:	bf42      	ittt	mi
 8011c1c:	6833      	ldrmi	r3, [r6, #0]
 8011c1e:	3302      	addmi	r3, #2
 8011c20:	6033      	strmi	r3, [r6, #0]
 8011c22:	6825      	ldr	r5, [r4, #0]
 8011c24:	f015 0506 	ands.w	r5, r5, #6
 8011c28:	d106      	bne.n	8011c38 <_printf_common+0x48>
 8011c2a:	f104 0a19 	add.w	sl, r4, #25
 8011c2e:	68e3      	ldr	r3, [r4, #12]
 8011c30:	6832      	ldr	r2, [r6, #0]
 8011c32:	1a9b      	subs	r3, r3, r2
 8011c34:	42ab      	cmp	r3, r5
 8011c36:	dc26      	bgt.n	8011c86 <_printf_common+0x96>
 8011c38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011c3c:	1e13      	subs	r3, r2, #0
 8011c3e:	6822      	ldr	r2, [r4, #0]
 8011c40:	bf18      	it	ne
 8011c42:	2301      	movne	r3, #1
 8011c44:	0692      	lsls	r2, r2, #26
 8011c46:	d42b      	bmi.n	8011ca0 <_printf_common+0xb0>
 8011c48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011c4c:	4649      	mov	r1, r9
 8011c4e:	4638      	mov	r0, r7
 8011c50:	47c0      	blx	r8
 8011c52:	3001      	adds	r0, #1
 8011c54:	d01e      	beq.n	8011c94 <_printf_common+0xa4>
 8011c56:	6823      	ldr	r3, [r4, #0]
 8011c58:	6922      	ldr	r2, [r4, #16]
 8011c5a:	f003 0306 	and.w	r3, r3, #6
 8011c5e:	2b04      	cmp	r3, #4
 8011c60:	bf02      	ittt	eq
 8011c62:	68e5      	ldreq	r5, [r4, #12]
 8011c64:	6833      	ldreq	r3, [r6, #0]
 8011c66:	1aed      	subeq	r5, r5, r3
 8011c68:	68a3      	ldr	r3, [r4, #8]
 8011c6a:	bf0c      	ite	eq
 8011c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011c70:	2500      	movne	r5, #0
 8011c72:	4293      	cmp	r3, r2
 8011c74:	bfc4      	itt	gt
 8011c76:	1a9b      	subgt	r3, r3, r2
 8011c78:	18ed      	addgt	r5, r5, r3
 8011c7a:	2600      	movs	r6, #0
 8011c7c:	341a      	adds	r4, #26
 8011c7e:	42b5      	cmp	r5, r6
 8011c80:	d11a      	bne.n	8011cb8 <_printf_common+0xc8>
 8011c82:	2000      	movs	r0, #0
 8011c84:	e008      	b.n	8011c98 <_printf_common+0xa8>
 8011c86:	2301      	movs	r3, #1
 8011c88:	4652      	mov	r2, sl
 8011c8a:	4649      	mov	r1, r9
 8011c8c:	4638      	mov	r0, r7
 8011c8e:	47c0      	blx	r8
 8011c90:	3001      	adds	r0, #1
 8011c92:	d103      	bne.n	8011c9c <_printf_common+0xac>
 8011c94:	f04f 30ff 	mov.w	r0, #4294967295
 8011c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c9c:	3501      	adds	r5, #1
 8011c9e:	e7c6      	b.n	8011c2e <_printf_common+0x3e>
 8011ca0:	18e1      	adds	r1, r4, r3
 8011ca2:	1c5a      	adds	r2, r3, #1
 8011ca4:	2030      	movs	r0, #48	; 0x30
 8011ca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011caa:	4422      	add	r2, r4
 8011cac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011cb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011cb4:	3302      	adds	r3, #2
 8011cb6:	e7c7      	b.n	8011c48 <_printf_common+0x58>
 8011cb8:	2301      	movs	r3, #1
 8011cba:	4622      	mov	r2, r4
 8011cbc:	4649      	mov	r1, r9
 8011cbe:	4638      	mov	r0, r7
 8011cc0:	47c0      	blx	r8
 8011cc2:	3001      	adds	r0, #1
 8011cc4:	d0e6      	beq.n	8011c94 <_printf_common+0xa4>
 8011cc6:	3601      	adds	r6, #1
 8011cc8:	e7d9      	b.n	8011c7e <_printf_common+0x8e>
	...

08011ccc <_printf_i>:
 8011ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011cd0:	7e0f      	ldrb	r7, [r1, #24]
 8011cd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011cd4:	2f78      	cmp	r7, #120	; 0x78
 8011cd6:	4691      	mov	r9, r2
 8011cd8:	4680      	mov	r8, r0
 8011cda:	460c      	mov	r4, r1
 8011cdc:	469a      	mov	sl, r3
 8011cde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011ce2:	d807      	bhi.n	8011cf4 <_printf_i+0x28>
 8011ce4:	2f62      	cmp	r7, #98	; 0x62
 8011ce6:	d80a      	bhi.n	8011cfe <_printf_i+0x32>
 8011ce8:	2f00      	cmp	r7, #0
 8011cea:	f000 80d4 	beq.w	8011e96 <_printf_i+0x1ca>
 8011cee:	2f58      	cmp	r7, #88	; 0x58
 8011cf0:	f000 80c0 	beq.w	8011e74 <_printf_i+0x1a8>
 8011cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011cf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011cfc:	e03a      	b.n	8011d74 <_printf_i+0xa8>
 8011cfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011d02:	2b15      	cmp	r3, #21
 8011d04:	d8f6      	bhi.n	8011cf4 <_printf_i+0x28>
 8011d06:	a101      	add	r1, pc, #4	; (adr r1, 8011d0c <_printf_i+0x40>)
 8011d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011d0c:	08011d65 	.word	0x08011d65
 8011d10:	08011d79 	.word	0x08011d79
 8011d14:	08011cf5 	.word	0x08011cf5
 8011d18:	08011cf5 	.word	0x08011cf5
 8011d1c:	08011cf5 	.word	0x08011cf5
 8011d20:	08011cf5 	.word	0x08011cf5
 8011d24:	08011d79 	.word	0x08011d79
 8011d28:	08011cf5 	.word	0x08011cf5
 8011d2c:	08011cf5 	.word	0x08011cf5
 8011d30:	08011cf5 	.word	0x08011cf5
 8011d34:	08011cf5 	.word	0x08011cf5
 8011d38:	08011e7d 	.word	0x08011e7d
 8011d3c:	08011da5 	.word	0x08011da5
 8011d40:	08011e37 	.word	0x08011e37
 8011d44:	08011cf5 	.word	0x08011cf5
 8011d48:	08011cf5 	.word	0x08011cf5
 8011d4c:	08011e9f 	.word	0x08011e9f
 8011d50:	08011cf5 	.word	0x08011cf5
 8011d54:	08011da5 	.word	0x08011da5
 8011d58:	08011cf5 	.word	0x08011cf5
 8011d5c:	08011cf5 	.word	0x08011cf5
 8011d60:	08011e3f 	.word	0x08011e3f
 8011d64:	682b      	ldr	r3, [r5, #0]
 8011d66:	1d1a      	adds	r2, r3, #4
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	602a      	str	r2, [r5, #0]
 8011d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011d74:	2301      	movs	r3, #1
 8011d76:	e09f      	b.n	8011eb8 <_printf_i+0x1ec>
 8011d78:	6820      	ldr	r0, [r4, #0]
 8011d7a:	682b      	ldr	r3, [r5, #0]
 8011d7c:	0607      	lsls	r7, r0, #24
 8011d7e:	f103 0104 	add.w	r1, r3, #4
 8011d82:	6029      	str	r1, [r5, #0]
 8011d84:	d501      	bpl.n	8011d8a <_printf_i+0xbe>
 8011d86:	681e      	ldr	r6, [r3, #0]
 8011d88:	e003      	b.n	8011d92 <_printf_i+0xc6>
 8011d8a:	0646      	lsls	r6, r0, #25
 8011d8c:	d5fb      	bpl.n	8011d86 <_printf_i+0xba>
 8011d8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011d92:	2e00      	cmp	r6, #0
 8011d94:	da03      	bge.n	8011d9e <_printf_i+0xd2>
 8011d96:	232d      	movs	r3, #45	; 0x2d
 8011d98:	4276      	negs	r6, r6
 8011d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d9e:	485a      	ldr	r0, [pc, #360]	; (8011f08 <_printf_i+0x23c>)
 8011da0:	230a      	movs	r3, #10
 8011da2:	e012      	b.n	8011dca <_printf_i+0xfe>
 8011da4:	682b      	ldr	r3, [r5, #0]
 8011da6:	6820      	ldr	r0, [r4, #0]
 8011da8:	1d19      	adds	r1, r3, #4
 8011daa:	6029      	str	r1, [r5, #0]
 8011dac:	0605      	lsls	r5, r0, #24
 8011dae:	d501      	bpl.n	8011db4 <_printf_i+0xe8>
 8011db0:	681e      	ldr	r6, [r3, #0]
 8011db2:	e002      	b.n	8011dba <_printf_i+0xee>
 8011db4:	0641      	lsls	r1, r0, #25
 8011db6:	d5fb      	bpl.n	8011db0 <_printf_i+0xe4>
 8011db8:	881e      	ldrh	r6, [r3, #0]
 8011dba:	4853      	ldr	r0, [pc, #332]	; (8011f08 <_printf_i+0x23c>)
 8011dbc:	2f6f      	cmp	r7, #111	; 0x6f
 8011dbe:	bf0c      	ite	eq
 8011dc0:	2308      	moveq	r3, #8
 8011dc2:	230a      	movne	r3, #10
 8011dc4:	2100      	movs	r1, #0
 8011dc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011dca:	6865      	ldr	r5, [r4, #4]
 8011dcc:	60a5      	str	r5, [r4, #8]
 8011dce:	2d00      	cmp	r5, #0
 8011dd0:	bfa2      	ittt	ge
 8011dd2:	6821      	ldrge	r1, [r4, #0]
 8011dd4:	f021 0104 	bicge.w	r1, r1, #4
 8011dd8:	6021      	strge	r1, [r4, #0]
 8011dda:	b90e      	cbnz	r6, 8011de0 <_printf_i+0x114>
 8011ddc:	2d00      	cmp	r5, #0
 8011dde:	d04b      	beq.n	8011e78 <_printf_i+0x1ac>
 8011de0:	4615      	mov	r5, r2
 8011de2:	fbb6 f1f3 	udiv	r1, r6, r3
 8011de6:	fb03 6711 	mls	r7, r3, r1, r6
 8011dea:	5dc7      	ldrb	r7, [r0, r7]
 8011dec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011df0:	4637      	mov	r7, r6
 8011df2:	42bb      	cmp	r3, r7
 8011df4:	460e      	mov	r6, r1
 8011df6:	d9f4      	bls.n	8011de2 <_printf_i+0x116>
 8011df8:	2b08      	cmp	r3, #8
 8011dfa:	d10b      	bne.n	8011e14 <_printf_i+0x148>
 8011dfc:	6823      	ldr	r3, [r4, #0]
 8011dfe:	07de      	lsls	r6, r3, #31
 8011e00:	d508      	bpl.n	8011e14 <_printf_i+0x148>
 8011e02:	6923      	ldr	r3, [r4, #16]
 8011e04:	6861      	ldr	r1, [r4, #4]
 8011e06:	4299      	cmp	r1, r3
 8011e08:	bfde      	ittt	le
 8011e0a:	2330      	movle	r3, #48	; 0x30
 8011e0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011e10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011e14:	1b52      	subs	r2, r2, r5
 8011e16:	6122      	str	r2, [r4, #16]
 8011e18:	f8cd a000 	str.w	sl, [sp]
 8011e1c:	464b      	mov	r3, r9
 8011e1e:	aa03      	add	r2, sp, #12
 8011e20:	4621      	mov	r1, r4
 8011e22:	4640      	mov	r0, r8
 8011e24:	f7ff fee4 	bl	8011bf0 <_printf_common>
 8011e28:	3001      	adds	r0, #1
 8011e2a:	d14a      	bne.n	8011ec2 <_printf_i+0x1f6>
 8011e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e30:	b004      	add	sp, #16
 8011e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e36:	6823      	ldr	r3, [r4, #0]
 8011e38:	f043 0320 	orr.w	r3, r3, #32
 8011e3c:	6023      	str	r3, [r4, #0]
 8011e3e:	4833      	ldr	r0, [pc, #204]	; (8011f0c <_printf_i+0x240>)
 8011e40:	2778      	movs	r7, #120	; 0x78
 8011e42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011e46:	6823      	ldr	r3, [r4, #0]
 8011e48:	6829      	ldr	r1, [r5, #0]
 8011e4a:	061f      	lsls	r7, r3, #24
 8011e4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011e50:	d402      	bmi.n	8011e58 <_printf_i+0x18c>
 8011e52:	065f      	lsls	r7, r3, #25
 8011e54:	bf48      	it	mi
 8011e56:	b2b6      	uxthmi	r6, r6
 8011e58:	07df      	lsls	r7, r3, #31
 8011e5a:	bf48      	it	mi
 8011e5c:	f043 0320 	orrmi.w	r3, r3, #32
 8011e60:	6029      	str	r1, [r5, #0]
 8011e62:	bf48      	it	mi
 8011e64:	6023      	strmi	r3, [r4, #0]
 8011e66:	b91e      	cbnz	r6, 8011e70 <_printf_i+0x1a4>
 8011e68:	6823      	ldr	r3, [r4, #0]
 8011e6a:	f023 0320 	bic.w	r3, r3, #32
 8011e6e:	6023      	str	r3, [r4, #0]
 8011e70:	2310      	movs	r3, #16
 8011e72:	e7a7      	b.n	8011dc4 <_printf_i+0xf8>
 8011e74:	4824      	ldr	r0, [pc, #144]	; (8011f08 <_printf_i+0x23c>)
 8011e76:	e7e4      	b.n	8011e42 <_printf_i+0x176>
 8011e78:	4615      	mov	r5, r2
 8011e7a:	e7bd      	b.n	8011df8 <_printf_i+0x12c>
 8011e7c:	682b      	ldr	r3, [r5, #0]
 8011e7e:	6826      	ldr	r6, [r4, #0]
 8011e80:	6961      	ldr	r1, [r4, #20]
 8011e82:	1d18      	adds	r0, r3, #4
 8011e84:	6028      	str	r0, [r5, #0]
 8011e86:	0635      	lsls	r5, r6, #24
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	d501      	bpl.n	8011e90 <_printf_i+0x1c4>
 8011e8c:	6019      	str	r1, [r3, #0]
 8011e8e:	e002      	b.n	8011e96 <_printf_i+0x1ca>
 8011e90:	0670      	lsls	r0, r6, #25
 8011e92:	d5fb      	bpl.n	8011e8c <_printf_i+0x1c0>
 8011e94:	8019      	strh	r1, [r3, #0]
 8011e96:	2300      	movs	r3, #0
 8011e98:	6123      	str	r3, [r4, #16]
 8011e9a:	4615      	mov	r5, r2
 8011e9c:	e7bc      	b.n	8011e18 <_printf_i+0x14c>
 8011e9e:	682b      	ldr	r3, [r5, #0]
 8011ea0:	1d1a      	adds	r2, r3, #4
 8011ea2:	602a      	str	r2, [r5, #0]
 8011ea4:	681d      	ldr	r5, [r3, #0]
 8011ea6:	6862      	ldr	r2, [r4, #4]
 8011ea8:	2100      	movs	r1, #0
 8011eaa:	4628      	mov	r0, r5
 8011eac:	f7ee f990 	bl	80001d0 <memchr>
 8011eb0:	b108      	cbz	r0, 8011eb6 <_printf_i+0x1ea>
 8011eb2:	1b40      	subs	r0, r0, r5
 8011eb4:	6060      	str	r0, [r4, #4]
 8011eb6:	6863      	ldr	r3, [r4, #4]
 8011eb8:	6123      	str	r3, [r4, #16]
 8011eba:	2300      	movs	r3, #0
 8011ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ec0:	e7aa      	b.n	8011e18 <_printf_i+0x14c>
 8011ec2:	6923      	ldr	r3, [r4, #16]
 8011ec4:	462a      	mov	r2, r5
 8011ec6:	4649      	mov	r1, r9
 8011ec8:	4640      	mov	r0, r8
 8011eca:	47d0      	blx	sl
 8011ecc:	3001      	adds	r0, #1
 8011ece:	d0ad      	beq.n	8011e2c <_printf_i+0x160>
 8011ed0:	6823      	ldr	r3, [r4, #0]
 8011ed2:	079b      	lsls	r3, r3, #30
 8011ed4:	d413      	bmi.n	8011efe <_printf_i+0x232>
 8011ed6:	68e0      	ldr	r0, [r4, #12]
 8011ed8:	9b03      	ldr	r3, [sp, #12]
 8011eda:	4298      	cmp	r0, r3
 8011edc:	bfb8      	it	lt
 8011ede:	4618      	movlt	r0, r3
 8011ee0:	e7a6      	b.n	8011e30 <_printf_i+0x164>
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	4632      	mov	r2, r6
 8011ee6:	4649      	mov	r1, r9
 8011ee8:	4640      	mov	r0, r8
 8011eea:	47d0      	blx	sl
 8011eec:	3001      	adds	r0, #1
 8011eee:	d09d      	beq.n	8011e2c <_printf_i+0x160>
 8011ef0:	3501      	adds	r5, #1
 8011ef2:	68e3      	ldr	r3, [r4, #12]
 8011ef4:	9903      	ldr	r1, [sp, #12]
 8011ef6:	1a5b      	subs	r3, r3, r1
 8011ef8:	42ab      	cmp	r3, r5
 8011efa:	dcf2      	bgt.n	8011ee2 <_printf_i+0x216>
 8011efc:	e7eb      	b.n	8011ed6 <_printf_i+0x20a>
 8011efe:	2500      	movs	r5, #0
 8011f00:	f104 0619 	add.w	r6, r4, #25
 8011f04:	e7f5      	b.n	8011ef2 <_printf_i+0x226>
 8011f06:	bf00      	nop
 8011f08:	080183c3 	.word	0x080183c3
 8011f0c:	080183d4 	.word	0x080183d4

08011f10 <_scanf_float>:
 8011f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f14:	b087      	sub	sp, #28
 8011f16:	4617      	mov	r7, r2
 8011f18:	9303      	str	r3, [sp, #12]
 8011f1a:	688b      	ldr	r3, [r1, #8]
 8011f1c:	1e5a      	subs	r2, r3, #1
 8011f1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011f22:	bf83      	ittte	hi
 8011f24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011f28:	195b      	addhi	r3, r3, r5
 8011f2a:	9302      	strhi	r3, [sp, #8]
 8011f2c:	2300      	movls	r3, #0
 8011f2e:	bf86      	itte	hi
 8011f30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011f34:	608b      	strhi	r3, [r1, #8]
 8011f36:	9302      	strls	r3, [sp, #8]
 8011f38:	680b      	ldr	r3, [r1, #0]
 8011f3a:	468b      	mov	fp, r1
 8011f3c:	2500      	movs	r5, #0
 8011f3e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011f42:	f84b 3b1c 	str.w	r3, [fp], #28
 8011f46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011f4a:	4680      	mov	r8, r0
 8011f4c:	460c      	mov	r4, r1
 8011f4e:	465e      	mov	r6, fp
 8011f50:	46aa      	mov	sl, r5
 8011f52:	46a9      	mov	r9, r5
 8011f54:	9501      	str	r5, [sp, #4]
 8011f56:	68a2      	ldr	r2, [r4, #8]
 8011f58:	b152      	cbz	r2, 8011f70 <_scanf_float+0x60>
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	2b4e      	cmp	r3, #78	; 0x4e
 8011f60:	d864      	bhi.n	801202c <_scanf_float+0x11c>
 8011f62:	2b40      	cmp	r3, #64	; 0x40
 8011f64:	d83c      	bhi.n	8011fe0 <_scanf_float+0xd0>
 8011f66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011f6a:	b2c8      	uxtb	r0, r1
 8011f6c:	280e      	cmp	r0, #14
 8011f6e:	d93a      	bls.n	8011fe6 <_scanf_float+0xd6>
 8011f70:	f1b9 0f00 	cmp.w	r9, #0
 8011f74:	d003      	beq.n	8011f7e <_scanf_float+0x6e>
 8011f76:	6823      	ldr	r3, [r4, #0]
 8011f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011f7c:	6023      	str	r3, [r4, #0]
 8011f7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011f82:	f1ba 0f01 	cmp.w	sl, #1
 8011f86:	f200 8113 	bhi.w	80121b0 <_scanf_float+0x2a0>
 8011f8a:	455e      	cmp	r6, fp
 8011f8c:	f200 8105 	bhi.w	801219a <_scanf_float+0x28a>
 8011f90:	2501      	movs	r5, #1
 8011f92:	4628      	mov	r0, r5
 8011f94:	b007      	add	sp, #28
 8011f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011f9e:	2a0d      	cmp	r2, #13
 8011fa0:	d8e6      	bhi.n	8011f70 <_scanf_float+0x60>
 8011fa2:	a101      	add	r1, pc, #4	; (adr r1, 8011fa8 <_scanf_float+0x98>)
 8011fa4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011fa8:	080120e7 	.word	0x080120e7
 8011fac:	08011f71 	.word	0x08011f71
 8011fb0:	08011f71 	.word	0x08011f71
 8011fb4:	08011f71 	.word	0x08011f71
 8011fb8:	08012147 	.word	0x08012147
 8011fbc:	0801211f 	.word	0x0801211f
 8011fc0:	08011f71 	.word	0x08011f71
 8011fc4:	08011f71 	.word	0x08011f71
 8011fc8:	080120f5 	.word	0x080120f5
 8011fcc:	08011f71 	.word	0x08011f71
 8011fd0:	08011f71 	.word	0x08011f71
 8011fd4:	08011f71 	.word	0x08011f71
 8011fd8:	08011f71 	.word	0x08011f71
 8011fdc:	080120ad 	.word	0x080120ad
 8011fe0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011fe4:	e7db      	b.n	8011f9e <_scanf_float+0x8e>
 8011fe6:	290e      	cmp	r1, #14
 8011fe8:	d8c2      	bhi.n	8011f70 <_scanf_float+0x60>
 8011fea:	a001      	add	r0, pc, #4	; (adr r0, 8011ff0 <_scanf_float+0xe0>)
 8011fec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011ff0:	0801209f 	.word	0x0801209f
 8011ff4:	08011f71 	.word	0x08011f71
 8011ff8:	0801209f 	.word	0x0801209f
 8011ffc:	08012133 	.word	0x08012133
 8012000:	08011f71 	.word	0x08011f71
 8012004:	0801204d 	.word	0x0801204d
 8012008:	08012089 	.word	0x08012089
 801200c:	08012089 	.word	0x08012089
 8012010:	08012089 	.word	0x08012089
 8012014:	08012089 	.word	0x08012089
 8012018:	08012089 	.word	0x08012089
 801201c:	08012089 	.word	0x08012089
 8012020:	08012089 	.word	0x08012089
 8012024:	08012089 	.word	0x08012089
 8012028:	08012089 	.word	0x08012089
 801202c:	2b6e      	cmp	r3, #110	; 0x6e
 801202e:	d809      	bhi.n	8012044 <_scanf_float+0x134>
 8012030:	2b60      	cmp	r3, #96	; 0x60
 8012032:	d8b2      	bhi.n	8011f9a <_scanf_float+0x8a>
 8012034:	2b54      	cmp	r3, #84	; 0x54
 8012036:	d077      	beq.n	8012128 <_scanf_float+0x218>
 8012038:	2b59      	cmp	r3, #89	; 0x59
 801203a:	d199      	bne.n	8011f70 <_scanf_float+0x60>
 801203c:	2d07      	cmp	r5, #7
 801203e:	d197      	bne.n	8011f70 <_scanf_float+0x60>
 8012040:	2508      	movs	r5, #8
 8012042:	e029      	b.n	8012098 <_scanf_float+0x188>
 8012044:	2b74      	cmp	r3, #116	; 0x74
 8012046:	d06f      	beq.n	8012128 <_scanf_float+0x218>
 8012048:	2b79      	cmp	r3, #121	; 0x79
 801204a:	e7f6      	b.n	801203a <_scanf_float+0x12a>
 801204c:	6821      	ldr	r1, [r4, #0]
 801204e:	05c8      	lsls	r0, r1, #23
 8012050:	d51a      	bpl.n	8012088 <_scanf_float+0x178>
 8012052:	9b02      	ldr	r3, [sp, #8]
 8012054:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012058:	6021      	str	r1, [r4, #0]
 801205a:	f109 0901 	add.w	r9, r9, #1
 801205e:	b11b      	cbz	r3, 8012068 <_scanf_float+0x158>
 8012060:	3b01      	subs	r3, #1
 8012062:	3201      	adds	r2, #1
 8012064:	9302      	str	r3, [sp, #8]
 8012066:	60a2      	str	r2, [r4, #8]
 8012068:	68a3      	ldr	r3, [r4, #8]
 801206a:	3b01      	subs	r3, #1
 801206c:	60a3      	str	r3, [r4, #8]
 801206e:	6923      	ldr	r3, [r4, #16]
 8012070:	3301      	adds	r3, #1
 8012072:	6123      	str	r3, [r4, #16]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	3b01      	subs	r3, #1
 8012078:	2b00      	cmp	r3, #0
 801207a:	607b      	str	r3, [r7, #4]
 801207c:	f340 8084 	ble.w	8012188 <_scanf_float+0x278>
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	3301      	adds	r3, #1
 8012084:	603b      	str	r3, [r7, #0]
 8012086:	e766      	b.n	8011f56 <_scanf_float+0x46>
 8012088:	eb1a 0f05 	cmn.w	sl, r5
 801208c:	f47f af70 	bne.w	8011f70 <_scanf_float+0x60>
 8012090:	6822      	ldr	r2, [r4, #0]
 8012092:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012096:	6022      	str	r2, [r4, #0]
 8012098:	f806 3b01 	strb.w	r3, [r6], #1
 801209c:	e7e4      	b.n	8012068 <_scanf_float+0x158>
 801209e:	6822      	ldr	r2, [r4, #0]
 80120a0:	0610      	lsls	r0, r2, #24
 80120a2:	f57f af65 	bpl.w	8011f70 <_scanf_float+0x60>
 80120a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80120aa:	e7f4      	b.n	8012096 <_scanf_float+0x186>
 80120ac:	f1ba 0f00 	cmp.w	sl, #0
 80120b0:	d10e      	bne.n	80120d0 <_scanf_float+0x1c0>
 80120b2:	f1b9 0f00 	cmp.w	r9, #0
 80120b6:	d10e      	bne.n	80120d6 <_scanf_float+0x1c6>
 80120b8:	6822      	ldr	r2, [r4, #0]
 80120ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80120be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80120c2:	d108      	bne.n	80120d6 <_scanf_float+0x1c6>
 80120c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80120c8:	6022      	str	r2, [r4, #0]
 80120ca:	f04f 0a01 	mov.w	sl, #1
 80120ce:	e7e3      	b.n	8012098 <_scanf_float+0x188>
 80120d0:	f1ba 0f02 	cmp.w	sl, #2
 80120d4:	d055      	beq.n	8012182 <_scanf_float+0x272>
 80120d6:	2d01      	cmp	r5, #1
 80120d8:	d002      	beq.n	80120e0 <_scanf_float+0x1d0>
 80120da:	2d04      	cmp	r5, #4
 80120dc:	f47f af48 	bne.w	8011f70 <_scanf_float+0x60>
 80120e0:	3501      	adds	r5, #1
 80120e2:	b2ed      	uxtb	r5, r5
 80120e4:	e7d8      	b.n	8012098 <_scanf_float+0x188>
 80120e6:	f1ba 0f01 	cmp.w	sl, #1
 80120ea:	f47f af41 	bne.w	8011f70 <_scanf_float+0x60>
 80120ee:	f04f 0a02 	mov.w	sl, #2
 80120f2:	e7d1      	b.n	8012098 <_scanf_float+0x188>
 80120f4:	b97d      	cbnz	r5, 8012116 <_scanf_float+0x206>
 80120f6:	f1b9 0f00 	cmp.w	r9, #0
 80120fa:	f47f af3c 	bne.w	8011f76 <_scanf_float+0x66>
 80120fe:	6822      	ldr	r2, [r4, #0]
 8012100:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012104:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012108:	f47f af39 	bne.w	8011f7e <_scanf_float+0x6e>
 801210c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012110:	6022      	str	r2, [r4, #0]
 8012112:	2501      	movs	r5, #1
 8012114:	e7c0      	b.n	8012098 <_scanf_float+0x188>
 8012116:	2d03      	cmp	r5, #3
 8012118:	d0e2      	beq.n	80120e0 <_scanf_float+0x1d0>
 801211a:	2d05      	cmp	r5, #5
 801211c:	e7de      	b.n	80120dc <_scanf_float+0x1cc>
 801211e:	2d02      	cmp	r5, #2
 8012120:	f47f af26 	bne.w	8011f70 <_scanf_float+0x60>
 8012124:	2503      	movs	r5, #3
 8012126:	e7b7      	b.n	8012098 <_scanf_float+0x188>
 8012128:	2d06      	cmp	r5, #6
 801212a:	f47f af21 	bne.w	8011f70 <_scanf_float+0x60>
 801212e:	2507      	movs	r5, #7
 8012130:	e7b2      	b.n	8012098 <_scanf_float+0x188>
 8012132:	6822      	ldr	r2, [r4, #0]
 8012134:	0591      	lsls	r1, r2, #22
 8012136:	f57f af1b 	bpl.w	8011f70 <_scanf_float+0x60>
 801213a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801213e:	6022      	str	r2, [r4, #0]
 8012140:	f8cd 9004 	str.w	r9, [sp, #4]
 8012144:	e7a8      	b.n	8012098 <_scanf_float+0x188>
 8012146:	6822      	ldr	r2, [r4, #0]
 8012148:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801214c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012150:	d006      	beq.n	8012160 <_scanf_float+0x250>
 8012152:	0550      	lsls	r0, r2, #21
 8012154:	f57f af0c 	bpl.w	8011f70 <_scanf_float+0x60>
 8012158:	f1b9 0f00 	cmp.w	r9, #0
 801215c:	f43f af0f 	beq.w	8011f7e <_scanf_float+0x6e>
 8012160:	0591      	lsls	r1, r2, #22
 8012162:	bf58      	it	pl
 8012164:	9901      	ldrpl	r1, [sp, #4]
 8012166:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801216a:	bf58      	it	pl
 801216c:	eba9 0101 	subpl.w	r1, r9, r1
 8012170:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012174:	bf58      	it	pl
 8012176:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801217a:	6022      	str	r2, [r4, #0]
 801217c:	f04f 0900 	mov.w	r9, #0
 8012180:	e78a      	b.n	8012098 <_scanf_float+0x188>
 8012182:	f04f 0a03 	mov.w	sl, #3
 8012186:	e787      	b.n	8012098 <_scanf_float+0x188>
 8012188:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801218c:	4639      	mov	r1, r7
 801218e:	4640      	mov	r0, r8
 8012190:	4798      	blx	r3
 8012192:	2800      	cmp	r0, #0
 8012194:	f43f aedf 	beq.w	8011f56 <_scanf_float+0x46>
 8012198:	e6ea      	b.n	8011f70 <_scanf_float+0x60>
 801219a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801219e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80121a2:	463a      	mov	r2, r7
 80121a4:	4640      	mov	r0, r8
 80121a6:	4798      	blx	r3
 80121a8:	6923      	ldr	r3, [r4, #16]
 80121aa:	3b01      	subs	r3, #1
 80121ac:	6123      	str	r3, [r4, #16]
 80121ae:	e6ec      	b.n	8011f8a <_scanf_float+0x7a>
 80121b0:	1e6b      	subs	r3, r5, #1
 80121b2:	2b06      	cmp	r3, #6
 80121b4:	d825      	bhi.n	8012202 <_scanf_float+0x2f2>
 80121b6:	2d02      	cmp	r5, #2
 80121b8:	d836      	bhi.n	8012228 <_scanf_float+0x318>
 80121ba:	455e      	cmp	r6, fp
 80121bc:	f67f aee8 	bls.w	8011f90 <_scanf_float+0x80>
 80121c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80121c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80121c8:	463a      	mov	r2, r7
 80121ca:	4640      	mov	r0, r8
 80121cc:	4798      	blx	r3
 80121ce:	6923      	ldr	r3, [r4, #16]
 80121d0:	3b01      	subs	r3, #1
 80121d2:	6123      	str	r3, [r4, #16]
 80121d4:	e7f1      	b.n	80121ba <_scanf_float+0x2aa>
 80121d6:	9802      	ldr	r0, [sp, #8]
 80121d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80121dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80121e0:	9002      	str	r0, [sp, #8]
 80121e2:	463a      	mov	r2, r7
 80121e4:	4640      	mov	r0, r8
 80121e6:	4798      	blx	r3
 80121e8:	6923      	ldr	r3, [r4, #16]
 80121ea:	3b01      	subs	r3, #1
 80121ec:	6123      	str	r3, [r4, #16]
 80121ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80121f2:	fa5f fa8a 	uxtb.w	sl, sl
 80121f6:	f1ba 0f02 	cmp.w	sl, #2
 80121fa:	d1ec      	bne.n	80121d6 <_scanf_float+0x2c6>
 80121fc:	3d03      	subs	r5, #3
 80121fe:	b2ed      	uxtb	r5, r5
 8012200:	1b76      	subs	r6, r6, r5
 8012202:	6823      	ldr	r3, [r4, #0]
 8012204:	05da      	lsls	r2, r3, #23
 8012206:	d52f      	bpl.n	8012268 <_scanf_float+0x358>
 8012208:	055b      	lsls	r3, r3, #21
 801220a:	d510      	bpl.n	801222e <_scanf_float+0x31e>
 801220c:	455e      	cmp	r6, fp
 801220e:	f67f aebf 	bls.w	8011f90 <_scanf_float+0x80>
 8012212:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012216:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801221a:	463a      	mov	r2, r7
 801221c:	4640      	mov	r0, r8
 801221e:	4798      	blx	r3
 8012220:	6923      	ldr	r3, [r4, #16]
 8012222:	3b01      	subs	r3, #1
 8012224:	6123      	str	r3, [r4, #16]
 8012226:	e7f1      	b.n	801220c <_scanf_float+0x2fc>
 8012228:	46aa      	mov	sl, r5
 801222a:	9602      	str	r6, [sp, #8]
 801222c:	e7df      	b.n	80121ee <_scanf_float+0x2de>
 801222e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012232:	6923      	ldr	r3, [r4, #16]
 8012234:	2965      	cmp	r1, #101	; 0x65
 8012236:	f103 33ff 	add.w	r3, r3, #4294967295
 801223a:	f106 35ff 	add.w	r5, r6, #4294967295
 801223e:	6123      	str	r3, [r4, #16]
 8012240:	d00c      	beq.n	801225c <_scanf_float+0x34c>
 8012242:	2945      	cmp	r1, #69	; 0x45
 8012244:	d00a      	beq.n	801225c <_scanf_float+0x34c>
 8012246:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801224a:	463a      	mov	r2, r7
 801224c:	4640      	mov	r0, r8
 801224e:	4798      	blx	r3
 8012250:	6923      	ldr	r3, [r4, #16]
 8012252:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8012256:	3b01      	subs	r3, #1
 8012258:	1eb5      	subs	r5, r6, #2
 801225a:	6123      	str	r3, [r4, #16]
 801225c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012260:	463a      	mov	r2, r7
 8012262:	4640      	mov	r0, r8
 8012264:	4798      	blx	r3
 8012266:	462e      	mov	r6, r5
 8012268:	6825      	ldr	r5, [r4, #0]
 801226a:	f015 0510 	ands.w	r5, r5, #16
 801226e:	d158      	bne.n	8012322 <_scanf_float+0x412>
 8012270:	7035      	strb	r5, [r6, #0]
 8012272:	6823      	ldr	r3, [r4, #0]
 8012274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801227c:	d11c      	bne.n	80122b8 <_scanf_float+0x3a8>
 801227e:	9b01      	ldr	r3, [sp, #4]
 8012280:	454b      	cmp	r3, r9
 8012282:	eba3 0209 	sub.w	r2, r3, r9
 8012286:	d124      	bne.n	80122d2 <_scanf_float+0x3c2>
 8012288:	2200      	movs	r2, #0
 801228a:	4659      	mov	r1, fp
 801228c:	4640      	mov	r0, r8
 801228e:	f7ff f8df 	bl	8011450 <_strtod_r>
 8012292:	9b03      	ldr	r3, [sp, #12]
 8012294:	6821      	ldr	r1, [r4, #0]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	f011 0f02 	tst.w	r1, #2
 801229c:	ec57 6b10 	vmov	r6, r7, d0
 80122a0:	f103 0204 	add.w	r2, r3, #4
 80122a4:	d020      	beq.n	80122e8 <_scanf_float+0x3d8>
 80122a6:	9903      	ldr	r1, [sp, #12]
 80122a8:	600a      	str	r2, [r1, #0]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	e9c3 6700 	strd	r6, r7, [r3]
 80122b0:	68e3      	ldr	r3, [r4, #12]
 80122b2:	3301      	adds	r3, #1
 80122b4:	60e3      	str	r3, [r4, #12]
 80122b6:	e66c      	b.n	8011f92 <_scanf_float+0x82>
 80122b8:	9b04      	ldr	r3, [sp, #16]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d0e4      	beq.n	8012288 <_scanf_float+0x378>
 80122be:	9905      	ldr	r1, [sp, #20]
 80122c0:	230a      	movs	r3, #10
 80122c2:	462a      	mov	r2, r5
 80122c4:	3101      	adds	r1, #1
 80122c6:	4640      	mov	r0, r8
 80122c8:	f7ff f9b0 	bl	801162c <_strtol_r>
 80122cc:	9b04      	ldr	r3, [sp, #16]
 80122ce:	9e05      	ldr	r6, [sp, #20]
 80122d0:	1ac2      	subs	r2, r0, r3
 80122d2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80122d6:	429e      	cmp	r6, r3
 80122d8:	bf28      	it	cs
 80122da:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80122de:	4912      	ldr	r1, [pc, #72]	; (8012328 <_scanf_float+0x418>)
 80122e0:	4630      	mov	r0, r6
 80122e2:	f000 f91b 	bl	801251c <siprintf>
 80122e6:	e7cf      	b.n	8012288 <_scanf_float+0x378>
 80122e8:	f011 0f04 	tst.w	r1, #4
 80122ec:	9903      	ldr	r1, [sp, #12]
 80122ee:	600a      	str	r2, [r1, #0]
 80122f0:	d1db      	bne.n	80122aa <_scanf_float+0x39a>
 80122f2:	f8d3 8000 	ldr.w	r8, [r3]
 80122f6:	ee10 2a10 	vmov	r2, s0
 80122fa:	ee10 0a10 	vmov	r0, s0
 80122fe:	463b      	mov	r3, r7
 8012300:	4639      	mov	r1, r7
 8012302:	f7ee fc13 	bl	8000b2c <__aeabi_dcmpun>
 8012306:	b128      	cbz	r0, 8012314 <_scanf_float+0x404>
 8012308:	4808      	ldr	r0, [pc, #32]	; (801232c <_scanf_float+0x41c>)
 801230a:	f000 fa9d 	bl	8012848 <nanf>
 801230e:	ed88 0a00 	vstr	s0, [r8]
 8012312:	e7cd      	b.n	80122b0 <_scanf_float+0x3a0>
 8012314:	4630      	mov	r0, r6
 8012316:	4639      	mov	r1, r7
 8012318:	f7ee fc66 	bl	8000be8 <__aeabi_d2f>
 801231c:	f8c8 0000 	str.w	r0, [r8]
 8012320:	e7c6      	b.n	80122b0 <_scanf_float+0x3a0>
 8012322:	2500      	movs	r5, #0
 8012324:	e635      	b.n	8011f92 <_scanf_float+0x82>
 8012326:	bf00      	nop
 8012328:	080183e5 	.word	0x080183e5
 801232c:	0801849e 	.word	0x0801849e

08012330 <std>:
 8012330:	2300      	movs	r3, #0
 8012332:	b510      	push	{r4, lr}
 8012334:	4604      	mov	r4, r0
 8012336:	e9c0 3300 	strd	r3, r3, [r0]
 801233a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801233e:	6083      	str	r3, [r0, #8]
 8012340:	8181      	strh	r1, [r0, #12]
 8012342:	6643      	str	r3, [r0, #100]	; 0x64
 8012344:	81c2      	strh	r2, [r0, #14]
 8012346:	6183      	str	r3, [r0, #24]
 8012348:	4619      	mov	r1, r3
 801234a:	2208      	movs	r2, #8
 801234c:	305c      	adds	r0, #92	; 0x5c
 801234e:	f000 f948 	bl	80125e2 <memset>
 8012352:	4b0d      	ldr	r3, [pc, #52]	; (8012388 <std+0x58>)
 8012354:	6263      	str	r3, [r4, #36]	; 0x24
 8012356:	4b0d      	ldr	r3, [pc, #52]	; (801238c <std+0x5c>)
 8012358:	62a3      	str	r3, [r4, #40]	; 0x28
 801235a:	4b0d      	ldr	r3, [pc, #52]	; (8012390 <std+0x60>)
 801235c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801235e:	4b0d      	ldr	r3, [pc, #52]	; (8012394 <std+0x64>)
 8012360:	6323      	str	r3, [r4, #48]	; 0x30
 8012362:	4b0d      	ldr	r3, [pc, #52]	; (8012398 <std+0x68>)
 8012364:	6224      	str	r4, [r4, #32]
 8012366:	429c      	cmp	r4, r3
 8012368:	d006      	beq.n	8012378 <std+0x48>
 801236a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801236e:	4294      	cmp	r4, r2
 8012370:	d002      	beq.n	8012378 <std+0x48>
 8012372:	33d0      	adds	r3, #208	; 0xd0
 8012374:	429c      	cmp	r4, r3
 8012376:	d105      	bne.n	8012384 <std+0x54>
 8012378:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801237c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012380:	f000 ba40 	b.w	8012804 <__retarget_lock_init_recursive>
 8012384:	bd10      	pop	{r4, pc}
 8012386:	bf00      	nop
 8012388:	0801255d 	.word	0x0801255d
 801238c:	0801257f 	.word	0x0801257f
 8012390:	080125b7 	.word	0x080125b7
 8012394:	080125db 	.word	0x080125db
 8012398:	20001500 	.word	0x20001500

0801239c <stdio_exit_handler>:
 801239c:	4a02      	ldr	r2, [pc, #8]	; (80123a8 <stdio_exit_handler+0xc>)
 801239e:	4903      	ldr	r1, [pc, #12]	; (80123ac <stdio_exit_handler+0x10>)
 80123a0:	4803      	ldr	r0, [pc, #12]	; (80123b0 <stdio_exit_handler+0x14>)
 80123a2:	f000 b869 	b.w	8012478 <_fwalk_sglue>
 80123a6:	bf00      	nop
 80123a8:	20000140 	.word	0x20000140
 80123ac:	08014a21 	.word	0x08014a21
 80123b0:	200002b8 	.word	0x200002b8

080123b4 <cleanup_stdio>:
 80123b4:	6841      	ldr	r1, [r0, #4]
 80123b6:	4b0c      	ldr	r3, [pc, #48]	; (80123e8 <cleanup_stdio+0x34>)
 80123b8:	4299      	cmp	r1, r3
 80123ba:	b510      	push	{r4, lr}
 80123bc:	4604      	mov	r4, r0
 80123be:	d001      	beq.n	80123c4 <cleanup_stdio+0x10>
 80123c0:	f002 fb2e 	bl	8014a20 <_fflush_r>
 80123c4:	68a1      	ldr	r1, [r4, #8]
 80123c6:	4b09      	ldr	r3, [pc, #36]	; (80123ec <cleanup_stdio+0x38>)
 80123c8:	4299      	cmp	r1, r3
 80123ca:	d002      	beq.n	80123d2 <cleanup_stdio+0x1e>
 80123cc:	4620      	mov	r0, r4
 80123ce:	f002 fb27 	bl	8014a20 <_fflush_r>
 80123d2:	68e1      	ldr	r1, [r4, #12]
 80123d4:	4b06      	ldr	r3, [pc, #24]	; (80123f0 <cleanup_stdio+0x3c>)
 80123d6:	4299      	cmp	r1, r3
 80123d8:	d004      	beq.n	80123e4 <cleanup_stdio+0x30>
 80123da:	4620      	mov	r0, r4
 80123dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123e0:	f002 bb1e 	b.w	8014a20 <_fflush_r>
 80123e4:	bd10      	pop	{r4, pc}
 80123e6:	bf00      	nop
 80123e8:	20001500 	.word	0x20001500
 80123ec:	20001568 	.word	0x20001568
 80123f0:	200015d0 	.word	0x200015d0

080123f4 <global_stdio_init.part.0>:
 80123f4:	b510      	push	{r4, lr}
 80123f6:	4b0b      	ldr	r3, [pc, #44]	; (8012424 <global_stdio_init.part.0+0x30>)
 80123f8:	4c0b      	ldr	r4, [pc, #44]	; (8012428 <global_stdio_init.part.0+0x34>)
 80123fa:	4a0c      	ldr	r2, [pc, #48]	; (801242c <global_stdio_init.part.0+0x38>)
 80123fc:	601a      	str	r2, [r3, #0]
 80123fe:	4620      	mov	r0, r4
 8012400:	2200      	movs	r2, #0
 8012402:	2104      	movs	r1, #4
 8012404:	f7ff ff94 	bl	8012330 <std>
 8012408:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801240c:	2201      	movs	r2, #1
 801240e:	2109      	movs	r1, #9
 8012410:	f7ff ff8e 	bl	8012330 <std>
 8012414:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012418:	2202      	movs	r2, #2
 801241a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801241e:	2112      	movs	r1, #18
 8012420:	f7ff bf86 	b.w	8012330 <std>
 8012424:	20001638 	.word	0x20001638
 8012428:	20001500 	.word	0x20001500
 801242c:	0801239d 	.word	0x0801239d

08012430 <__sfp_lock_acquire>:
 8012430:	4801      	ldr	r0, [pc, #4]	; (8012438 <__sfp_lock_acquire+0x8>)
 8012432:	f000 b9e8 	b.w	8012806 <__retarget_lock_acquire_recursive>
 8012436:	bf00      	nop
 8012438:	20001641 	.word	0x20001641

0801243c <__sfp_lock_release>:
 801243c:	4801      	ldr	r0, [pc, #4]	; (8012444 <__sfp_lock_release+0x8>)
 801243e:	f000 b9e3 	b.w	8012808 <__retarget_lock_release_recursive>
 8012442:	bf00      	nop
 8012444:	20001641 	.word	0x20001641

08012448 <__sinit>:
 8012448:	b510      	push	{r4, lr}
 801244a:	4604      	mov	r4, r0
 801244c:	f7ff fff0 	bl	8012430 <__sfp_lock_acquire>
 8012450:	6a23      	ldr	r3, [r4, #32]
 8012452:	b11b      	cbz	r3, 801245c <__sinit+0x14>
 8012454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012458:	f7ff bff0 	b.w	801243c <__sfp_lock_release>
 801245c:	4b04      	ldr	r3, [pc, #16]	; (8012470 <__sinit+0x28>)
 801245e:	6223      	str	r3, [r4, #32]
 8012460:	4b04      	ldr	r3, [pc, #16]	; (8012474 <__sinit+0x2c>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d1f5      	bne.n	8012454 <__sinit+0xc>
 8012468:	f7ff ffc4 	bl	80123f4 <global_stdio_init.part.0>
 801246c:	e7f2      	b.n	8012454 <__sinit+0xc>
 801246e:	bf00      	nop
 8012470:	080123b5 	.word	0x080123b5
 8012474:	20001638 	.word	0x20001638

08012478 <_fwalk_sglue>:
 8012478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801247c:	4607      	mov	r7, r0
 801247e:	4688      	mov	r8, r1
 8012480:	4614      	mov	r4, r2
 8012482:	2600      	movs	r6, #0
 8012484:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012488:	f1b9 0901 	subs.w	r9, r9, #1
 801248c:	d505      	bpl.n	801249a <_fwalk_sglue+0x22>
 801248e:	6824      	ldr	r4, [r4, #0]
 8012490:	2c00      	cmp	r4, #0
 8012492:	d1f7      	bne.n	8012484 <_fwalk_sglue+0xc>
 8012494:	4630      	mov	r0, r6
 8012496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801249a:	89ab      	ldrh	r3, [r5, #12]
 801249c:	2b01      	cmp	r3, #1
 801249e:	d907      	bls.n	80124b0 <_fwalk_sglue+0x38>
 80124a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80124a4:	3301      	adds	r3, #1
 80124a6:	d003      	beq.n	80124b0 <_fwalk_sglue+0x38>
 80124a8:	4629      	mov	r1, r5
 80124aa:	4638      	mov	r0, r7
 80124ac:	47c0      	blx	r8
 80124ae:	4306      	orrs	r6, r0
 80124b0:	3568      	adds	r5, #104	; 0x68
 80124b2:	e7e9      	b.n	8012488 <_fwalk_sglue+0x10>

080124b4 <sniprintf>:
 80124b4:	b40c      	push	{r2, r3}
 80124b6:	b530      	push	{r4, r5, lr}
 80124b8:	4b17      	ldr	r3, [pc, #92]	; (8012518 <sniprintf+0x64>)
 80124ba:	1e0c      	subs	r4, r1, #0
 80124bc:	681d      	ldr	r5, [r3, #0]
 80124be:	b09d      	sub	sp, #116	; 0x74
 80124c0:	da08      	bge.n	80124d4 <sniprintf+0x20>
 80124c2:	238b      	movs	r3, #139	; 0x8b
 80124c4:	602b      	str	r3, [r5, #0]
 80124c6:	f04f 30ff 	mov.w	r0, #4294967295
 80124ca:	b01d      	add	sp, #116	; 0x74
 80124cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80124d0:	b002      	add	sp, #8
 80124d2:	4770      	bx	lr
 80124d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80124d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80124dc:	bf14      	ite	ne
 80124de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80124e2:	4623      	moveq	r3, r4
 80124e4:	9304      	str	r3, [sp, #16]
 80124e6:	9307      	str	r3, [sp, #28]
 80124e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80124ec:	9002      	str	r0, [sp, #8]
 80124ee:	9006      	str	r0, [sp, #24]
 80124f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80124f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80124f6:	ab21      	add	r3, sp, #132	; 0x84
 80124f8:	a902      	add	r1, sp, #8
 80124fa:	4628      	mov	r0, r5
 80124fc:	9301      	str	r3, [sp, #4]
 80124fe:	f002 f90b 	bl	8014718 <_svfiprintf_r>
 8012502:	1c43      	adds	r3, r0, #1
 8012504:	bfbc      	itt	lt
 8012506:	238b      	movlt	r3, #139	; 0x8b
 8012508:	602b      	strlt	r3, [r5, #0]
 801250a:	2c00      	cmp	r4, #0
 801250c:	d0dd      	beq.n	80124ca <sniprintf+0x16>
 801250e:	9b02      	ldr	r3, [sp, #8]
 8012510:	2200      	movs	r2, #0
 8012512:	701a      	strb	r2, [r3, #0]
 8012514:	e7d9      	b.n	80124ca <sniprintf+0x16>
 8012516:	bf00      	nop
 8012518:	20000304 	.word	0x20000304

0801251c <siprintf>:
 801251c:	b40e      	push	{r1, r2, r3}
 801251e:	b500      	push	{lr}
 8012520:	b09c      	sub	sp, #112	; 0x70
 8012522:	ab1d      	add	r3, sp, #116	; 0x74
 8012524:	9002      	str	r0, [sp, #8]
 8012526:	9006      	str	r0, [sp, #24]
 8012528:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801252c:	4809      	ldr	r0, [pc, #36]	; (8012554 <siprintf+0x38>)
 801252e:	9107      	str	r1, [sp, #28]
 8012530:	9104      	str	r1, [sp, #16]
 8012532:	4909      	ldr	r1, [pc, #36]	; (8012558 <siprintf+0x3c>)
 8012534:	f853 2b04 	ldr.w	r2, [r3], #4
 8012538:	9105      	str	r1, [sp, #20]
 801253a:	6800      	ldr	r0, [r0, #0]
 801253c:	9301      	str	r3, [sp, #4]
 801253e:	a902      	add	r1, sp, #8
 8012540:	f002 f8ea 	bl	8014718 <_svfiprintf_r>
 8012544:	9b02      	ldr	r3, [sp, #8]
 8012546:	2200      	movs	r2, #0
 8012548:	701a      	strb	r2, [r3, #0]
 801254a:	b01c      	add	sp, #112	; 0x70
 801254c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012550:	b003      	add	sp, #12
 8012552:	4770      	bx	lr
 8012554:	20000304 	.word	0x20000304
 8012558:	ffff0208 	.word	0xffff0208

0801255c <__sread>:
 801255c:	b510      	push	{r4, lr}
 801255e:	460c      	mov	r4, r1
 8012560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012564:	f000 f8f0 	bl	8012748 <_read_r>
 8012568:	2800      	cmp	r0, #0
 801256a:	bfab      	itete	ge
 801256c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801256e:	89a3      	ldrhlt	r3, [r4, #12]
 8012570:	181b      	addge	r3, r3, r0
 8012572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012576:	bfac      	ite	ge
 8012578:	6563      	strge	r3, [r4, #84]	; 0x54
 801257a:	81a3      	strhlt	r3, [r4, #12]
 801257c:	bd10      	pop	{r4, pc}

0801257e <__swrite>:
 801257e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012582:	461f      	mov	r7, r3
 8012584:	898b      	ldrh	r3, [r1, #12]
 8012586:	05db      	lsls	r3, r3, #23
 8012588:	4605      	mov	r5, r0
 801258a:	460c      	mov	r4, r1
 801258c:	4616      	mov	r6, r2
 801258e:	d505      	bpl.n	801259c <__swrite+0x1e>
 8012590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012594:	2302      	movs	r3, #2
 8012596:	2200      	movs	r2, #0
 8012598:	f000 f8c4 	bl	8012724 <_lseek_r>
 801259c:	89a3      	ldrh	r3, [r4, #12]
 801259e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80125a6:	81a3      	strh	r3, [r4, #12]
 80125a8:	4632      	mov	r2, r6
 80125aa:	463b      	mov	r3, r7
 80125ac:	4628      	mov	r0, r5
 80125ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125b2:	f000 b8eb 	b.w	801278c <_write_r>

080125b6 <__sseek>:
 80125b6:	b510      	push	{r4, lr}
 80125b8:	460c      	mov	r4, r1
 80125ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125be:	f000 f8b1 	bl	8012724 <_lseek_r>
 80125c2:	1c43      	adds	r3, r0, #1
 80125c4:	89a3      	ldrh	r3, [r4, #12]
 80125c6:	bf15      	itete	ne
 80125c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80125ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80125ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80125d2:	81a3      	strheq	r3, [r4, #12]
 80125d4:	bf18      	it	ne
 80125d6:	81a3      	strhne	r3, [r4, #12]
 80125d8:	bd10      	pop	{r4, pc}

080125da <__sclose>:
 80125da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125de:	f000 b891 	b.w	8012704 <_close_r>

080125e2 <memset>:
 80125e2:	4402      	add	r2, r0
 80125e4:	4603      	mov	r3, r0
 80125e6:	4293      	cmp	r3, r2
 80125e8:	d100      	bne.n	80125ec <memset+0xa>
 80125ea:	4770      	bx	lr
 80125ec:	f803 1b01 	strb.w	r1, [r3], #1
 80125f0:	e7f9      	b.n	80125e6 <memset+0x4>

080125f2 <strncmp>:
 80125f2:	b510      	push	{r4, lr}
 80125f4:	b16a      	cbz	r2, 8012612 <strncmp+0x20>
 80125f6:	3901      	subs	r1, #1
 80125f8:	1884      	adds	r4, r0, r2
 80125fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012602:	429a      	cmp	r2, r3
 8012604:	d103      	bne.n	801260e <strncmp+0x1c>
 8012606:	42a0      	cmp	r0, r4
 8012608:	d001      	beq.n	801260e <strncmp+0x1c>
 801260a:	2a00      	cmp	r2, #0
 801260c:	d1f5      	bne.n	80125fa <strncmp+0x8>
 801260e:	1ad0      	subs	r0, r2, r3
 8012610:	bd10      	pop	{r4, pc}
 8012612:	4610      	mov	r0, r2
 8012614:	e7fc      	b.n	8012610 <strncmp+0x1e>
	...

08012618 <strtok>:
 8012618:	4b16      	ldr	r3, [pc, #88]	; (8012674 <strtok+0x5c>)
 801261a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801261c:	681e      	ldr	r6, [r3, #0]
 801261e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8012620:	4605      	mov	r5, r0
 8012622:	b9fc      	cbnz	r4, 8012664 <strtok+0x4c>
 8012624:	2050      	movs	r0, #80	; 0x50
 8012626:	9101      	str	r1, [sp, #4]
 8012628:	f7fe f84a 	bl	80106c0 <malloc>
 801262c:	9901      	ldr	r1, [sp, #4]
 801262e:	6470      	str	r0, [r6, #68]	; 0x44
 8012630:	4602      	mov	r2, r0
 8012632:	b920      	cbnz	r0, 801263e <strtok+0x26>
 8012634:	4b10      	ldr	r3, [pc, #64]	; (8012678 <strtok+0x60>)
 8012636:	4811      	ldr	r0, [pc, #68]	; (801267c <strtok+0x64>)
 8012638:	215b      	movs	r1, #91	; 0x5b
 801263a:	f000 f90b 	bl	8012854 <__assert_func>
 801263e:	e9c0 4400 	strd	r4, r4, [r0]
 8012642:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8012646:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801264a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801264e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8012652:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8012656:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801265a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801265e:	6184      	str	r4, [r0, #24]
 8012660:	7704      	strb	r4, [r0, #28]
 8012662:	6244      	str	r4, [r0, #36]	; 0x24
 8012664:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8012666:	2301      	movs	r3, #1
 8012668:	4628      	mov	r0, r5
 801266a:	b002      	add	sp, #8
 801266c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012670:	f000 b806 	b.w	8012680 <__strtok_r>
 8012674:	20000304 	.word	0x20000304
 8012678:	080183ea 	.word	0x080183ea
 801267c:	08018401 	.word	0x08018401

08012680 <__strtok_r>:
 8012680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012682:	b908      	cbnz	r0, 8012688 <__strtok_r+0x8>
 8012684:	6810      	ldr	r0, [r2, #0]
 8012686:	b188      	cbz	r0, 80126ac <__strtok_r+0x2c>
 8012688:	4604      	mov	r4, r0
 801268a:	4620      	mov	r0, r4
 801268c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012690:	460f      	mov	r7, r1
 8012692:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012696:	b91e      	cbnz	r6, 80126a0 <__strtok_r+0x20>
 8012698:	b965      	cbnz	r5, 80126b4 <__strtok_r+0x34>
 801269a:	6015      	str	r5, [r2, #0]
 801269c:	4628      	mov	r0, r5
 801269e:	e005      	b.n	80126ac <__strtok_r+0x2c>
 80126a0:	42b5      	cmp	r5, r6
 80126a2:	d1f6      	bne.n	8012692 <__strtok_r+0x12>
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d1f0      	bne.n	801268a <__strtok_r+0xa>
 80126a8:	6014      	str	r4, [r2, #0]
 80126aa:	7003      	strb	r3, [r0, #0]
 80126ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126ae:	461c      	mov	r4, r3
 80126b0:	e00c      	b.n	80126cc <__strtok_r+0x4c>
 80126b2:	b915      	cbnz	r5, 80126ba <__strtok_r+0x3a>
 80126b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80126b8:	460e      	mov	r6, r1
 80126ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 80126be:	42ab      	cmp	r3, r5
 80126c0:	d1f7      	bne.n	80126b2 <__strtok_r+0x32>
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d0f3      	beq.n	80126ae <__strtok_r+0x2e>
 80126c6:	2300      	movs	r3, #0
 80126c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80126cc:	6014      	str	r4, [r2, #0]
 80126ce:	e7ed      	b.n	80126ac <__strtok_r+0x2c>

080126d0 <strstr>:
 80126d0:	780a      	ldrb	r2, [r1, #0]
 80126d2:	b570      	push	{r4, r5, r6, lr}
 80126d4:	b96a      	cbnz	r2, 80126f2 <strstr+0x22>
 80126d6:	bd70      	pop	{r4, r5, r6, pc}
 80126d8:	429a      	cmp	r2, r3
 80126da:	d109      	bne.n	80126f0 <strstr+0x20>
 80126dc:	460c      	mov	r4, r1
 80126de:	4605      	mov	r5, r0
 80126e0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d0f6      	beq.n	80126d6 <strstr+0x6>
 80126e8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80126ec:	429e      	cmp	r6, r3
 80126ee:	d0f7      	beq.n	80126e0 <strstr+0x10>
 80126f0:	3001      	adds	r0, #1
 80126f2:	7803      	ldrb	r3, [r0, #0]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d1ef      	bne.n	80126d8 <strstr+0x8>
 80126f8:	4618      	mov	r0, r3
 80126fa:	e7ec      	b.n	80126d6 <strstr+0x6>

080126fc <_localeconv_r>:
 80126fc:	4800      	ldr	r0, [pc, #0]	; (8012700 <_localeconv_r+0x4>)
 80126fe:	4770      	bx	lr
 8012700:	2000023c 	.word	0x2000023c

08012704 <_close_r>:
 8012704:	b538      	push	{r3, r4, r5, lr}
 8012706:	4d06      	ldr	r5, [pc, #24]	; (8012720 <_close_r+0x1c>)
 8012708:	2300      	movs	r3, #0
 801270a:	4604      	mov	r4, r0
 801270c:	4608      	mov	r0, r1
 801270e:	602b      	str	r3, [r5, #0]
 8012710:	f7f1 fee1 	bl	80044d6 <_close>
 8012714:	1c43      	adds	r3, r0, #1
 8012716:	d102      	bne.n	801271e <_close_r+0x1a>
 8012718:	682b      	ldr	r3, [r5, #0]
 801271a:	b103      	cbz	r3, 801271e <_close_r+0x1a>
 801271c:	6023      	str	r3, [r4, #0]
 801271e:	bd38      	pop	{r3, r4, r5, pc}
 8012720:	2000163c 	.word	0x2000163c

08012724 <_lseek_r>:
 8012724:	b538      	push	{r3, r4, r5, lr}
 8012726:	4d07      	ldr	r5, [pc, #28]	; (8012744 <_lseek_r+0x20>)
 8012728:	4604      	mov	r4, r0
 801272a:	4608      	mov	r0, r1
 801272c:	4611      	mov	r1, r2
 801272e:	2200      	movs	r2, #0
 8012730:	602a      	str	r2, [r5, #0]
 8012732:	461a      	mov	r2, r3
 8012734:	f7f1 fef6 	bl	8004524 <_lseek>
 8012738:	1c43      	adds	r3, r0, #1
 801273a:	d102      	bne.n	8012742 <_lseek_r+0x1e>
 801273c:	682b      	ldr	r3, [r5, #0]
 801273e:	b103      	cbz	r3, 8012742 <_lseek_r+0x1e>
 8012740:	6023      	str	r3, [r4, #0]
 8012742:	bd38      	pop	{r3, r4, r5, pc}
 8012744:	2000163c 	.word	0x2000163c

08012748 <_read_r>:
 8012748:	b538      	push	{r3, r4, r5, lr}
 801274a:	4d07      	ldr	r5, [pc, #28]	; (8012768 <_read_r+0x20>)
 801274c:	4604      	mov	r4, r0
 801274e:	4608      	mov	r0, r1
 8012750:	4611      	mov	r1, r2
 8012752:	2200      	movs	r2, #0
 8012754:	602a      	str	r2, [r5, #0]
 8012756:	461a      	mov	r2, r3
 8012758:	f7f1 fe84 	bl	8004464 <_read>
 801275c:	1c43      	adds	r3, r0, #1
 801275e:	d102      	bne.n	8012766 <_read_r+0x1e>
 8012760:	682b      	ldr	r3, [r5, #0]
 8012762:	b103      	cbz	r3, 8012766 <_read_r+0x1e>
 8012764:	6023      	str	r3, [r4, #0]
 8012766:	bd38      	pop	{r3, r4, r5, pc}
 8012768:	2000163c 	.word	0x2000163c

0801276c <_sbrk_r>:
 801276c:	b538      	push	{r3, r4, r5, lr}
 801276e:	4d06      	ldr	r5, [pc, #24]	; (8012788 <_sbrk_r+0x1c>)
 8012770:	2300      	movs	r3, #0
 8012772:	4604      	mov	r4, r0
 8012774:	4608      	mov	r0, r1
 8012776:	602b      	str	r3, [r5, #0]
 8012778:	f7f1 fee2 	bl	8004540 <_sbrk>
 801277c:	1c43      	adds	r3, r0, #1
 801277e:	d102      	bne.n	8012786 <_sbrk_r+0x1a>
 8012780:	682b      	ldr	r3, [r5, #0]
 8012782:	b103      	cbz	r3, 8012786 <_sbrk_r+0x1a>
 8012784:	6023      	str	r3, [r4, #0]
 8012786:	bd38      	pop	{r3, r4, r5, pc}
 8012788:	2000163c 	.word	0x2000163c

0801278c <_write_r>:
 801278c:	b538      	push	{r3, r4, r5, lr}
 801278e:	4d07      	ldr	r5, [pc, #28]	; (80127ac <_write_r+0x20>)
 8012790:	4604      	mov	r4, r0
 8012792:	4608      	mov	r0, r1
 8012794:	4611      	mov	r1, r2
 8012796:	2200      	movs	r2, #0
 8012798:	602a      	str	r2, [r5, #0]
 801279a:	461a      	mov	r2, r3
 801279c:	f7f1 fe7f 	bl	800449e <_write>
 80127a0:	1c43      	adds	r3, r0, #1
 80127a2:	d102      	bne.n	80127aa <_write_r+0x1e>
 80127a4:	682b      	ldr	r3, [r5, #0]
 80127a6:	b103      	cbz	r3, 80127aa <_write_r+0x1e>
 80127a8:	6023      	str	r3, [r4, #0]
 80127aa:	bd38      	pop	{r3, r4, r5, pc}
 80127ac:	2000163c 	.word	0x2000163c

080127b0 <__errno>:
 80127b0:	4b01      	ldr	r3, [pc, #4]	; (80127b8 <__errno+0x8>)
 80127b2:	6818      	ldr	r0, [r3, #0]
 80127b4:	4770      	bx	lr
 80127b6:	bf00      	nop
 80127b8:	20000304 	.word	0x20000304

080127bc <__libc_init_array>:
 80127bc:	b570      	push	{r4, r5, r6, lr}
 80127be:	4d0d      	ldr	r5, [pc, #52]	; (80127f4 <__libc_init_array+0x38>)
 80127c0:	4c0d      	ldr	r4, [pc, #52]	; (80127f8 <__libc_init_array+0x3c>)
 80127c2:	1b64      	subs	r4, r4, r5
 80127c4:	10a4      	asrs	r4, r4, #2
 80127c6:	2600      	movs	r6, #0
 80127c8:	42a6      	cmp	r6, r4
 80127ca:	d109      	bne.n	80127e0 <__libc_init_array+0x24>
 80127cc:	4d0b      	ldr	r5, [pc, #44]	; (80127fc <__libc_init_array+0x40>)
 80127ce:	4c0c      	ldr	r4, [pc, #48]	; (8012800 <__libc_init_array+0x44>)
 80127d0:	f003 fe38 	bl	8016444 <_init>
 80127d4:	1b64      	subs	r4, r4, r5
 80127d6:	10a4      	asrs	r4, r4, #2
 80127d8:	2600      	movs	r6, #0
 80127da:	42a6      	cmp	r6, r4
 80127dc:	d105      	bne.n	80127ea <__libc_init_array+0x2e>
 80127de:	bd70      	pop	{r4, r5, r6, pc}
 80127e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80127e4:	4798      	blx	r3
 80127e6:	3601      	adds	r6, #1
 80127e8:	e7ee      	b.n	80127c8 <__libc_init_array+0xc>
 80127ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80127ee:	4798      	blx	r3
 80127f0:	3601      	adds	r6, #1
 80127f2:	e7f2      	b.n	80127da <__libc_init_array+0x1e>
 80127f4:	080188d8 	.word	0x080188d8
 80127f8:	080188d8 	.word	0x080188d8
 80127fc:	080188d8 	.word	0x080188d8
 8012800:	080188dc 	.word	0x080188dc

08012804 <__retarget_lock_init_recursive>:
 8012804:	4770      	bx	lr

08012806 <__retarget_lock_acquire_recursive>:
 8012806:	4770      	bx	lr

08012808 <__retarget_lock_release_recursive>:
 8012808:	4770      	bx	lr

0801280a <strcpy>:
 801280a:	4603      	mov	r3, r0
 801280c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012810:	f803 2b01 	strb.w	r2, [r3], #1
 8012814:	2a00      	cmp	r2, #0
 8012816:	d1f9      	bne.n	801280c <strcpy+0x2>
 8012818:	4770      	bx	lr

0801281a <memcpy>:
 801281a:	440a      	add	r2, r1
 801281c:	4291      	cmp	r1, r2
 801281e:	f100 33ff 	add.w	r3, r0, #4294967295
 8012822:	d100      	bne.n	8012826 <memcpy+0xc>
 8012824:	4770      	bx	lr
 8012826:	b510      	push	{r4, lr}
 8012828:	f811 4b01 	ldrb.w	r4, [r1], #1
 801282c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012830:	4291      	cmp	r1, r2
 8012832:	d1f9      	bne.n	8012828 <memcpy+0xe>
 8012834:	bd10      	pop	{r4, pc}
	...

08012838 <nan>:
 8012838:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012840 <nan+0x8>
 801283c:	4770      	bx	lr
 801283e:	bf00      	nop
 8012840:	00000000 	.word	0x00000000
 8012844:	7ff80000 	.word	0x7ff80000

08012848 <nanf>:
 8012848:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012850 <nanf+0x8>
 801284c:	4770      	bx	lr
 801284e:	bf00      	nop
 8012850:	7fc00000 	.word	0x7fc00000

08012854 <__assert_func>:
 8012854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012856:	4614      	mov	r4, r2
 8012858:	461a      	mov	r2, r3
 801285a:	4b09      	ldr	r3, [pc, #36]	; (8012880 <__assert_func+0x2c>)
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	4605      	mov	r5, r0
 8012860:	68d8      	ldr	r0, [r3, #12]
 8012862:	b14c      	cbz	r4, 8012878 <__assert_func+0x24>
 8012864:	4b07      	ldr	r3, [pc, #28]	; (8012884 <__assert_func+0x30>)
 8012866:	9100      	str	r1, [sp, #0]
 8012868:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801286c:	4906      	ldr	r1, [pc, #24]	; (8012888 <__assert_func+0x34>)
 801286e:	462b      	mov	r3, r5
 8012870:	f002 f8fe 	bl	8014a70 <fiprintf>
 8012874:	f002 f928 	bl	8014ac8 <abort>
 8012878:	4b04      	ldr	r3, [pc, #16]	; (801288c <__assert_func+0x38>)
 801287a:	461c      	mov	r4, r3
 801287c:	e7f3      	b.n	8012866 <__assert_func+0x12>
 801287e:	bf00      	nop
 8012880:	20000304 	.word	0x20000304
 8012884:	08018463 	.word	0x08018463
 8012888:	08018470 	.word	0x08018470
 801288c:	0801849e 	.word	0x0801849e

08012890 <quorem>:
 8012890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012894:	6903      	ldr	r3, [r0, #16]
 8012896:	690c      	ldr	r4, [r1, #16]
 8012898:	42a3      	cmp	r3, r4
 801289a:	4607      	mov	r7, r0
 801289c:	db7e      	blt.n	801299c <quorem+0x10c>
 801289e:	3c01      	subs	r4, #1
 80128a0:	f101 0814 	add.w	r8, r1, #20
 80128a4:	f100 0514 	add.w	r5, r0, #20
 80128a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80128ac:	9301      	str	r3, [sp, #4]
 80128ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80128b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80128b6:	3301      	adds	r3, #1
 80128b8:	429a      	cmp	r2, r3
 80128ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80128be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80128c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80128c6:	d331      	bcc.n	801292c <quorem+0x9c>
 80128c8:	f04f 0e00 	mov.w	lr, #0
 80128cc:	4640      	mov	r0, r8
 80128ce:	46ac      	mov	ip, r5
 80128d0:	46f2      	mov	sl, lr
 80128d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80128d6:	b293      	uxth	r3, r2
 80128d8:	fb06 e303 	mla	r3, r6, r3, lr
 80128dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80128e0:	0c1a      	lsrs	r2, r3, #16
 80128e2:	b29b      	uxth	r3, r3
 80128e4:	ebaa 0303 	sub.w	r3, sl, r3
 80128e8:	f8dc a000 	ldr.w	sl, [ip]
 80128ec:	fa13 f38a 	uxtah	r3, r3, sl
 80128f0:	fb06 220e 	mla	r2, r6, lr, r2
 80128f4:	9300      	str	r3, [sp, #0]
 80128f6:	9b00      	ldr	r3, [sp, #0]
 80128f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80128fc:	b292      	uxth	r2, r2
 80128fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012902:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012906:	f8bd 3000 	ldrh.w	r3, [sp]
 801290a:	4581      	cmp	r9, r0
 801290c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012910:	f84c 3b04 	str.w	r3, [ip], #4
 8012914:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012918:	d2db      	bcs.n	80128d2 <quorem+0x42>
 801291a:	f855 300b 	ldr.w	r3, [r5, fp]
 801291e:	b92b      	cbnz	r3, 801292c <quorem+0x9c>
 8012920:	9b01      	ldr	r3, [sp, #4]
 8012922:	3b04      	subs	r3, #4
 8012924:	429d      	cmp	r5, r3
 8012926:	461a      	mov	r2, r3
 8012928:	d32c      	bcc.n	8012984 <quorem+0xf4>
 801292a:	613c      	str	r4, [r7, #16]
 801292c:	4638      	mov	r0, r7
 801292e:	f001 fca5 	bl	801427c <__mcmp>
 8012932:	2800      	cmp	r0, #0
 8012934:	db22      	blt.n	801297c <quorem+0xec>
 8012936:	3601      	adds	r6, #1
 8012938:	4629      	mov	r1, r5
 801293a:	2000      	movs	r0, #0
 801293c:	f858 2b04 	ldr.w	r2, [r8], #4
 8012940:	f8d1 c000 	ldr.w	ip, [r1]
 8012944:	b293      	uxth	r3, r2
 8012946:	1ac3      	subs	r3, r0, r3
 8012948:	0c12      	lsrs	r2, r2, #16
 801294a:	fa13 f38c 	uxtah	r3, r3, ip
 801294e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012952:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012956:	b29b      	uxth	r3, r3
 8012958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801295c:	45c1      	cmp	r9, r8
 801295e:	f841 3b04 	str.w	r3, [r1], #4
 8012962:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012966:	d2e9      	bcs.n	801293c <quorem+0xac>
 8012968:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801296c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012970:	b922      	cbnz	r2, 801297c <quorem+0xec>
 8012972:	3b04      	subs	r3, #4
 8012974:	429d      	cmp	r5, r3
 8012976:	461a      	mov	r2, r3
 8012978:	d30a      	bcc.n	8012990 <quorem+0x100>
 801297a:	613c      	str	r4, [r7, #16]
 801297c:	4630      	mov	r0, r6
 801297e:	b003      	add	sp, #12
 8012980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012984:	6812      	ldr	r2, [r2, #0]
 8012986:	3b04      	subs	r3, #4
 8012988:	2a00      	cmp	r2, #0
 801298a:	d1ce      	bne.n	801292a <quorem+0x9a>
 801298c:	3c01      	subs	r4, #1
 801298e:	e7c9      	b.n	8012924 <quorem+0x94>
 8012990:	6812      	ldr	r2, [r2, #0]
 8012992:	3b04      	subs	r3, #4
 8012994:	2a00      	cmp	r2, #0
 8012996:	d1f0      	bne.n	801297a <quorem+0xea>
 8012998:	3c01      	subs	r4, #1
 801299a:	e7eb      	b.n	8012974 <quorem+0xe4>
 801299c:	2000      	movs	r0, #0
 801299e:	e7ee      	b.n	801297e <quorem+0xee>

080129a0 <_dtoa_r>:
 80129a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129a4:	ed2d 8b04 	vpush	{d8-d9}
 80129a8:	69c5      	ldr	r5, [r0, #28]
 80129aa:	b093      	sub	sp, #76	; 0x4c
 80129ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80129b0:	ec57 6b10 	vmov	r6, r7, d0
 80129b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80129b8:	9107      	str	r1, [sp, #28]
 80129ba:	4604      	mov	r4, r0
 80129bc:	920a      	str	r2, [sp, #40]	; 0x28
 80129be:	930d      	str	r3, [sp, #52]	; 0x34
 80129c0:	b975      	cbnz	r5, 80129e0 <_dtoa_r+0x40>
 80129c2:	2010      	movs	r0, #16
 80129c4:	f7fd fe7c 	bl	80106c0 <malloc>
 80129c8:	4602      	mov	r2, r0
 80129ca:	61e0      	str	r0, [r4, #28]
 80129cc:	b920      	cbnz	r0, 80129d8 <_dtoa_r+0x38>
 80129ce:	4bae      	ldr	r3, [pc, #696]	; (8012c88 <_dtoa_r+0x2e8>)
 80129d0:	21ef      	movs	r1, #239	; 0xef
 80129d2:	48ae      	ldr	r0, [pc, #696]	; (8012c8c <_dtoa_r+0x2ec>)
 80129d4:	f7ff ff3e 	bl	8012854 <__assert_func>
 80129d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80129dc:	6005      	str	r5, [r0, #0]
 80129de:	60c5      	str	r5, [r0, #12]
 80129e0:	69e3      	ldr	r3, [r4, #28]
 80129e2:	6819      	ldr	r1, [r3, #0]
 80129e4:	b151      	cbz	r1, 80129fc <_dtoa_r+0x5c>
 80129e6:	685a      	ldr	r2, [r3, #4]
 80129e8:	604a      	str	r2, [r1, #4]
 80129ea:	2301      	movs	r3, #1
 80129ec:	4093      	lsls	r3, r2
 80129ee:	608b      	str	r3, [r1, #8]
 80129f0:	4620      	mov	r0, r4
 80129f2:	f001 f9bd 	bl	8013d70 <_Bfree>
 80129f6:	69e3      	ldr	r3, [r4, #28]
 80129f8:	2200      	movs	r2, #0
 80129fa:	601a      	str	r2, [r3, #0]
 80129fc:	1e3b      	subs	r3, r7, #0
 80129fe:	bfbb      	ittet	lt
 8012a00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012a04:	9303      	strlt	r3, [sp, #12]
 8012a06:	2300      	movge	r3, #0
 8012a08:	2201      	movlt	r2, #1
 8012a0a:	bfac      	ite	ge
 8012a0c:	f8c8 3000 	strge.w	r3, [r8]
 8012a10:	f8c8 2000 	strlt.w	r2, [r8]
 8012a14:	4b9e      	ldr	r3, [pc, #632]	; (8012c90 <_dtoa_r+0x2f0>)
 8012a16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012a1a:	ea33 0308 	bics.w	r3, r3, r8
 8012a1e:	d11b      	bne.n	8012a58 <_dtoa_r+0xb8>
 8012a20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012a22:	f242 730f 	movw	r3, #9999	; 0x270f
 8012a26:	6013      	str	r3, [r2, #0]
 8012a28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8012a2c:	4333      	orrs	r3, r6
 8012a2e:	f000 8593 	beq.w	8013558 <_dtoa_r+0xbb8>
 8012a32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a34:	b963      	cbnz	r3, 8012a50 <_dtoa_r+0xb0>
 8012a36:	4b97      	ldr	r3, [pc, #604]	; (8012c94 <_dtoa_r+0x2f4>)
 8012a38:	e027      	b.n	8012a8a <_dtoa_r+0xea>
 8012a3a:	4b97      	ldr	r3, [pc, #604]	; (8012c98 <_dtoa_r+0x2f8>)
 8012a3c:	9300      	str	r3, [sp, #0]
 8012a3e:	3308      	adds	r3, #8
 8012a40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012a42:	6013      	str	r3, [r2, #0]
 8012a44:	9800      	ldr	r0, [sp, #0]
 8012a46:	b013      	add	sp, #76	; 0x4c
 8012a48:	ecbd 8b04 	vpop	{d8-d9}
 8012a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a50:	4b90      	ldr	r3, [pc, #576]	; (8012c94 <_dtoa_r+0x2f4>)
 8012a52:	9300      	str	r3, [sp, #0]
 8012a54:	3303      	adds	r3, #3
 8012a56:	e7f3      	b.n	8012a40 <_dtoa_r+0xa0>
 8012a58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	ec51 0b17 	vmov	r0, r1, d7
 8012a62:	eeb0 8a47 	vmov.f32	s16, s14
 8012a66:	eef0 8a67 	vmov.f32	s17, s15
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	f7ee f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8012a70:	4681      	mov	r9, r0
 8012a72:	b160      	cbz	r0, 8012a8e <_dtoa_r+0xee>
 8012a74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012a76:	2301      	movs	r3, #1
 8012a78:	6013      	str	r3, [r2, #0]
 8012a7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	f000 8568 	beq.w	8013552 <_dtoa_r+0xbb2>
 8012a82:	4b86      	ldr	r3, [pc, #536]	; (8012c9c <_dtoa_r+0x2fc>)
 8012a84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012a86:	6013      	str	r3, [r2, #0]
 8012a88:	3b01      	subs	r3, #1
 8012a8a:	9300      	str	r3, [sp, #0]
 8012a8c:	e7da      	b.n	8012a44 <_dtoa_r+0xa4>
 8012a8e:	aa10      	add	r2, sp, #64	; 0x40
 8012a90:	a911      	add	r1, sp, #68	; 0x44
 8012a92:	4620      	mov	r0, r4
 8012a94:	eeb0 0a48 	vmov.f32	s0, s16
 8012a98:	eef0 0a68 	vmov.f32	s1, s17
 8012a9c:	f001 fd04 	bl	80144a8 <__d2b>
 8012aa0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012aa4:	4682      	mov	sl, r0
 8012aa6:	2d00      	cmp	r5, #0
 8012aa8:	d07f      	beq.n	8012baa <_dtoa_r+0x20a>
 8012aaa:	ee18 3a90 	vmov	r3, s17
 8012aae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012ab2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012ab6:	ec51 0b18 	vmov	r0, r1, d8
 8012aba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012abe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012ac2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	2200      	movs	r2, #0
 8012aca:	4b75      	ldr	r3, [pc, #468]	; (8012ca0 <_dtoa_r+0x300>)
 8012acc:	f7ed fbdc 	bl	8000288 <__aeabi_dsub>
 8012ad0:	a367      	add	r3, pc, #412	; (adr r3, 8012c70 <_dtoa_r+0x2d0>)
 8012ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad6:	f7ed fd8f 	bl	80005f8 <__aeabi_dmul>
 8012ada:	a367      	add	r3, pc, #412	; (adr r3, 8012c78 <_dtoa_r+0x2d8>)
 8012adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae0:	f7ed fbd4 	bl	800028c <__adddf3>
 8012ae4:	4606      	mov	r6, r0
 8012ae6:	4628      	mov	r0, r5
 8012ae8:	460f      	mov	r7, r1
 8012aea:	f7ed fd1b 	bl	8000524 <__aeabi_i2d>
 8012aee:	a364      	add	r3, pc, #400	; (adr r3, 8012c80 <_dtoa_r+0x2e0>)
 8012af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012af4:	f7ed fd80 	bl	80005f8 <__aeabi_dmul>
 8012af8:	4602      	mov	r2, r0
 8012afa:	460b      	mov	r3, r1
 8012afc:	4630      	mov	r0, r6
 8012afe:	4639      	mov	r1, r7
 8012b00:	f7ed fbc4 	bl	800028c <__adddf3>
 8012b04:	4606      	mov	r6, r0
 8012b06:	460f      	mov	r7, r1
 8012b08:	f7ee f826 	bl	8000b58 <__aeabi_d2iz>
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	4683      	mov	fp, r0
 8012b10:	2300      	movs	r3, #0
 8012b12:	4630      	mov	r0, r6
 8012b14:	4639      	mov	r1, r7
 8012b16:	f7ed ffe1 	bl	8000adc <__aeabi_dcmplt>
 8012b1a:	b148      	cbz	r0, 8012b30 <_dtoa_r+0x190>
 8012b1c:	4658      	mov	r0, fp
 8012b1e:	f7ed fd01 	bl	8000524 <__aeabi_i2d>
 8012b22:	4632      	mov	r2, r6
 8012b24:	463b      	mov	r3, r7
 8012b26:	f7ed ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b2a:	b908      	cbnz	r0, 8012b30 <_dtoa_r+0x190>
 8012b2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012b30:	f1bb 0f16 	cmp.w	fp, #22
 8012b34:	d857      	bhi.n	8012be6 <_dtoa_r+0x246>
 8012b36:	4b5b      	ldr	r3, [pc, #364]	; (8012ca4 <_dtoa_r+0x304>)
 8012b38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b40:	ec51 0b18 	vmov	r0, r1, d8
 8012b44:	f7ed ffca 	bl	8000adc <__aeabi_dcmplt>
 8012b48:	2800      	cmp	r0, #0
 8012b4a:	d04e      	beq.n	8012bea <_dtoa_r+0x24a>
 8012b4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012b50:	2300      	movs	r3, #0
 8012b52:	930c      	str	r3, [sp, #48]	; 0x30
 8012b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b56:	1b5b      	subs	r3, r3, r5
 8012b58:	1e5a      	subs	r2, r3, #1
 8012b5a:	bf45      	ittet	mi
 8012b5c:	f1c3 0301 	rsbmi	r3, r3, #1
 8012b60:	9305      	strmi	r3, [sp, #20]
 8012b62:	2300      	movpl	r3, #0
 8012b64:	2300      	movmi	r3, #0
 8012b66:	9206      	str	r2, [sp, #24]
 8012b68:	bf54      	ite	pl
 8012b6a:	9305      	strpl	r3, [sp, #20]
 8012b6c:	9306      	strmi	r3, [sp, #24]
 8012b6e:	f1bb 0f00 	cmp.w	fp, #0
 8012b72:	db3c      	blt.n	8012bee <_dtoa_r+0x24e>
 8012b74:	9b06      	ldr	r3, [sp, #24]
 8012b76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012b7a:	445b      	add	r3, fp
 8012b7c:	9306      	str	r3, [sp, #24]
 8012b7e:	2300      	movs	r3, #0
 8012b80:	9308      	str	r3, [sp, #32]
 8012b82:	9b07      	ldr	r3, [sp, #28]
 8012b84:	2b09      	cmp	r3, #9
 8012b86:	d868      	bhi.n	8012c5a <_dtoa_r+0x2ba>
 8012b88:	2b05      	cmp	r3, #5
 8012b8a:	bfc4      	itt	gt
 8012b8c:	3b04      	subgt	r3, #4
 8012b8e:	9307      	strgt	r3, [sp, #28]
 8012b90:	9b07      	ldr	r3, [sp, #28]
 8012b92:	f1a3 0302 	sub.w	r3, r3, #2
 8012b96:	bfcc      	ite	gt
 8012b98:	2500      	movgt	r5, #0
 8012b9a:	2501      	movle	r5, #1
 8012b9c:	2b03      	cmp	r3, #3
 8012b9e:	f200 8085 	bhi.w	8012cac <_dtoa_r+0x30c>
 8012ba2:	e8df f003 	tbb	[pc, r3]
 8012ba6:	3b2e      	.short	0x3b2e
 8012ba8:	5839      	.short	0x5839
 8012baa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012bae:	441d      	add	r5, r3
 8012bb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012bb4:	2b20      	cmp	r3, #32
 8012bb6:	bfc1      	itttt	gt
 8012bb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012bbc:	fa08 f803 	lslgt.w	r8, r8, r3
 8012bc0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8012bc4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012bc8:	bfd6      	itet	le
 8012bca:	f1c3 0320 	rsble	r3, r3, #32
 8012bce:	ea48 0003 	orrgt.w	r0, r8, r3
 8012bd2:	fa06 f003 	lslle.w	r0, r6, r3
 8012bd6:	f7ed fc95 	bl	8000504 <__aeabi_ui2d>
 8012bda:	2201      	movs	r2, #1
 8012bdc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012be0:	3d01      	subs	r5, #1
 8012be2:	920e      	str	r2, [sp, #56]	; 0x38
 8012be4:	e76f      	b.n	8012ac6 <_dtoa_r+0x126>
 8012be6:	2301      	movs	r3, #1
 8012be8:	e7b3      	b.n	8012b52 <_dtoa_r+0x1b2>
 8012bea:	900c      	str	r0, [sp, #48]	; 0x30
 8012bec:	e7b2      	b.n	8012b54 <_dtoa_r+0x1b4>
 8012bee:	9b05      	ldr	r3, [sp, #20]
 8012bf0:	eba3 030b 	sub.w	r3, r3, fp
 8012bf4:	9305      	str	r3, [sp, #20]
 8012bf6:	f1cb 0300 	rsb	r3, fp, #0
 8012bfa:	9308      	str	r3, [sp, #32]
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c00:	e7bf      	b.n	8012b82 <_dtoa_r+0x1e2>
 8012c02:	2300      	movs	r3, #0
 8012c04:	9309      	str	r3, [sp, #36]	; 0x24
 8012c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	dc52      	bgt.n	8012cb2 <_dtoa_r+0x312>
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	9301      	str	r3, [sp, #4]
 8012c10:	9304      	str	r3, [sp, #16]
 8012c12:	461a      	mov	r2, r3
 8012c14:	920a      	str	r2, [sp, #40]	; 0x28
 8012c16:	e00b      	b.n	8012c30 <_dtoa_r+0x290>
 8012c18:	2301      	movs	r3, #1
 8012c1a:	e7f3      	b.n	8012c04 <_dtoa_r+0x264>
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8012c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c22:	445b      	add	r3, fp
 8012c24:	9301      	str	r3, [sp, #4]
 8012c26:	3301      	adds	r3, #1
 8012c28:	2b01      	cmp	r3, #1
 8012c2a:	9304      	str	r3, [sp, #16]
 8012c2c:	bfb8      	it	lt
 8012c2e:	2301      	movlt	r3, #1
 8012c30:	69e0      	ldr	r0, [r4, #28]
 8012c32:	2100      	movs	r1, #0
 8012c34:	2204      	movs	r2, #4
 8012c36:	f102 0614 	add.w	r6, r2, #20
 8012c3a:	429e      	cmp	r6, r3
 8012c3c:	d93d      	bls.n	8012cba <_dtoa_r+0x31a>
 8012c3e:	6041      	str	r1, [r0, #4]
 8012c40:	4620      	mov	r0, r4
 8012c42:	f001 f855 	bl	8013cf0 <_Balloc>
 8012c46:	9000      	str	r0, [sp, #0]
 8012c48:	2800      	cmp	r0, #0
 8012c4a:	d139      	bne.n	8012cc0 <_dtoa_r+0x320>
 8012c4c:	4b16      	ldr	r3, [pc, #88]	; (8012ca8 <_dtoa_r+0x308>)
 8012c4e:	4602      	mov	r2, r0
 8012c50:	f240 11af 	movw	r1, #431	; 0x1af
 8012c54:	e6bd      	b.n	80129d2 <_dtoa_r+0x32>
 8012c56:	2301      	movs	r3, #1
 8012c58:	e7e1      	b.n	8012c1e <_dtoa_r+0x27e>
 8012c5a:	2501      	movs	r5, #1
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	9307      	str	r3, [sp, #28]
 8012c60:	9509      	str	r5, [sp, #36]	; 0x24
 8012c62:	f04f 33ff 	mov.w	r3, #4294967295
 8012c66:	9301      	str	r3, [sp, #4]
 8012c68:	9304      	str	r3, [sp, #16]
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	2312      	movs	r3, #18
 8012c6e:	e7d1      	b.n	8012c14 <_dtoa_r+0x274>
 8012c70:	636f4361 	.word	0x636f4361
 8012c74:	3fd287a7 	.word	0x3fd287a7
 8012c78:	8b60c8b3 	.word	0x8b60c8b3
 8012c7c:	3fc68a28 	.word	0x3fc68a28
 8012c80:	509f79fb 	.word	0x509f79fb
 8012c84:	3fd34413 	.word	0x3fd34413
 8012c88:	080183ea 	.word	0x080183ea
 8012c8c:	080184ac 	.word	0x080184ac
 8012c90:	7ff00000 	.word	0x7ff00000
 8012c94:	080184a8 	.word	0x080184a8
 8012c98:	0801849f 	.word	0x0801849f
 8012c9c:	080183c2 	.word	0x080183c2
 8012ca0:	3ff80000 	.word	0x3ff80000
 8012ca4:	080185f8 	.word	0x080185f8
 8012ca8:	08018504 	.word	0x08018504
 8012cac:	2301      	movs	r3, #1
 8012cae:	9309      	str	r3, [sp, #36]	; 0x24
 8012cb0:	e7d7      	b.n	8012c62 <_dtoa_r+0x2c2>
 8012cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cb4:	9301      	str	r3, [sp, #4]
 8012cb6:	9304      	str	r3, [sp, #16]
 8012cb8:	e7ba      	b.n	8012c30 <_dtoa_r+0x290>
 8012cba:	3101      	adds	r1, #1
 8012cbc:	0052      	lsls	r2, r2, #1
 8012cbe:	e7ba      	b.n	8012c36 <_dtoa_r+0x296>
 8012cc0:	69e3      	ldr	r3, [r4, #28]
 8012cc2:	9a00      	ldr	r2, [sp, #0]
 8012cc4:	601a      	str	r2, [r3, #0]
 8012cc6:	9b04      	ldr	r3, [sp, #16]
 8012cc8:	2b0e      	cmp	r3, #14
 8012cca:	f200 80a8 	bhi.w	8012e1e <_dtoa_r+0x47e>
 8012cce:	2d00      	cmp	r5, #0
 8012cd0:	f000 80a5 	beq.w	8012e1e <_dtoa_r+0x47e>
 8012cd4:	f1bb 0f00 	cmp.w	fp, #0
 8012cd8:	dd38      	ble.n	8012d4c <_dtoa_r+0x3ac>
 8012cda:	4bc0      	ldr	r3, [pc, #768]	; (8012fdc <_dtoa_r+0x63c>)
 8012cdc:	f00b 020f 	and.w	r2, fp, #15
 8012ce0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012ce4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012ce8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012cec:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012cf0:	d019      	beq.n	8012d26 <_dtoa_r+0x386>
 8012cf2:	4bbb      	ldr	r3, [pc, #748]	; (8012fe0 <_dtoa_r+0x640>)
 8012cf4:	ec51 0b18 	vmov	r0, r1, d8
 8012cf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012cfc:	f7ed fda6 	bl	800084c <__aeabi_ddiv>
 8012d00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d04:	f008 080f 	and.w	r8, r8, #15
 8012d08:	2503      	movs	r5, #3
 8012d0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012fe0 <_dtoa_r+0x640>
 8012d0e:	f1b8 0f00 	cmp.w	r8, #0
 8012d12:	d10a      	bne.n	8012d2a <_dtoa_r+0x38a>
 8012d14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d18:	4632      	mov	r2, r6
 8012d1a:	463b      	mov	r3, r7
 8012d1c:	f7ed fd96 	bl	800084c <__aeabi_ddiv>
 8012d20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d24:	e02b      	b.n	8012d7e <_dtoa_r+0x3de>
 8012d26:	2502      	movs	r5, #2
 8012d28:	e7ef      	b.n	8012d0a <_dtoa_r+0x36a>
 8012d2a:	f018 0f01 	tst.w	r8, #1
 8012d2e:	d008      	beq.n	8012d42 <_dtoa_r+0x3a2>
 8012d30:	4630      	mov	r0, r6
 8012d32:	4639      	mov	r1, r7
 8012d34:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012d38:	f7ed fc5e 	bl	80005f8 <__aeabi_dmul>
 8012d3c:	3501      	adds	r5, #1
 8012d3e:	4606      	mov	r6, r0
 8012d40:	460f      	mov	r7, r1
 8012d42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012d46:	f109 0908 	add.w	r9, r9, #8
 8012d4a:	e7e0      	b.n	8012d0e <_dtoa_r+0x36e>
 8012d4c:	f000 809f 	beq.w	8012e8e <_dtoa_r+0x4ee>
 8012d50:	f1cb 0600 	rsb	r6, fp, #0
 8012d54:	4ba1      	ldr	r3, [pc, #644]	; (8012fdc <_dtoa_r+0x63c>)
 8012d56:	4fa2      	ldr	r7, [pc, #648]	; (8012fe0 <_dtoa_r+0x640>)
 8012d58:	f006 020f 	and.w	r2, r6, #15
 8012d5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d64:	ec51 0b18 	vmov	r0, r1, d8
 8012d68:	f7ed fc46 	bl	80005f8 <__aeabi_dmul>
 8012d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d70:	1136      	asrs	r6, r6, #4
 8012d72:	2300      	movs	r3, #0
 8012d74:	2502      	movs	r5, #2
 8012d76:	2e00      	cmp	r6, #0
 8012d78:	d17e      	bne.n	8012e78 <_dtoa_r+0x4d8>
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d1d0      	bne.n	8012d20 <_dtoa_r+0x380>
 8012d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	f000 8084 	beq.w	8012e92 <_dtoa_r+0x4f2>
 8012d8a:	4b96      	ldr	r3, [pc, #600]	; (8012fe4 <_dtoa_r+0x644>)
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	4640      	mov	r0, r8
 8012d90:	4649      	mov	r1, r9
 8012d92:	f7ed fea3 	bl	8000adc <__aeabi_dcmplt>
 8012d96:	2800      	cmp	r0, #0
 8012d98:	d07b      	beq.n	8012e92 <_dtoa_r+0x4f2>
 8012d9a:	9b04      	ldr	r3, [sp, #16]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d078      	beq.n	8012e92 <_dtoa_r+0x4f2>
 8012da0:	9b01      	ldr	r3, [sp, #4]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	dd39      	ble.n	8012e1a <_dtoa_r+0x47a>
 8012da6:	4b90      	ldr	r3, [pc, #576]	; (8012fe8 <_dtoa_r+0x648>)
 8012da8:	2200      	movs	r2, #0
 8012daa:	4640      	mov	r0, r8
 8012dac:	4649      	mov	r1, r9
 8012dae:	f7ed fc23 	bl	80005f8 <__aeabi_dmul>
 8012db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012db6:	9e01      	ldr	r6, [sp, #4]
 8012db8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012dbc:	3501      	adds	r5, #1
 8012dbe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012dc2:	4628      	mov	r0, r5
 8012dc4:	f7ed fbae 	bl	8000524 <__aeabi_i2d>
 8012dc8:	4642      	mov	r2, r8
 8012dca:	464b      	mov	r3, r9
 8012dcc:	f7ed fc14 	bl	80005f8 <__aeabi_dmul>
 8012dd0:	4b86      	ldr	r3, [pc, #536]	; (8012fec <_dtoa_r+0x64c>)
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	f7ed fa5a 	bl	800028c <__adddf3>
 8012dd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012de0:	9303      	str	r3, [sp, #12]
 8012de2:	2e00      	cmp	r6, #0
 8012de4:	d158      	bne.n	8012e98 <_dtoa_r+0x4f8>
 8012de6:	4b82      	ldr	r3, [pc, #520]	; (8012ff0 <_dtoa_r+0x650>)
 8012de8:	2200      	movs	r2, #0
 8012dea:	4640      	mov	r0, r8
 8012dec:	4649      	mov	r1, r9
 8012dee:	f7ed fa4b 	bl	8000288 <__aeabi_dsub>
 8012df2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012df6:	4680      	mov	r8, r0
 8012df8:	4689      	mov	r9, r1
 8012dfa:	f7ed fe8d 	bl	8000b18 <__aeabi_dcmpgt>
 8012dfe:	2800      	cmp	r0, #0
 8012e00:	f040 8296 	bne.w	8013330 <_dtoa_r+0x990>
 8012e04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012e08:	4640      	mov	r0, r8
 8012e0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e0e:	4649      	mov	r1, r9
 8012e10:	f7ed fe64 	bl	8000adc <__aeabi_dcmplt>
 8012e14:	2800      	cmp	r0, #0
 8012e16:	f040 8289 	bne.w	801332c <_dtoa_r+0x98c>
 8012e1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012e1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	f2c0 814e 	blt.w	80130c2 <_dtoa_r+0x722>
 8012e26:	f1bb 0f0e 	cmp.w	fp, #14
 8012e2a:	f300 814a 	bgt.w	80130c2 <_dtoa_r+0x722>
 8012e2e:	4b6b      	ldr	r3, [pc, #428]	; (8012fdc <_dtoa_r+0x63c>)
 8012e30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012e34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	f280 80dc 	bge.w	8012ff8 <_dtoa_r+0x658>
 8012e40:	9b04      	ldr	r3, [sp, #16]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	f300 80d8 	bgt.w	8012ff8 <_dtoa_r+0x658>
 8012e48:	f040 826f 	bne.w	801332a <_dtoa_r+0x98a>
 8012e4c:	4b68      	ldr	r3, [pc, #416]	; (8012ff0 <_dtoa_r+0x650>)
 8012e4e:	2200      	movs	r2, #0
 8012e50:	4640      	mov	r0, r8
 8012e52:	4649      	mov	r1, r9
 8012e54:	f7ed fbd0 	bl	80005f8 <__aeabi_dmul>
 8012e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e5c:	f7ed fe52 	bl	8000b04 <__aeabi_dcmpge>
 8012e60:	9e04      	ldr	r6, [sp, #16]
 8012e62:	4637      	mov	r7, r6
 8012e64:	2800      	cmp	r0, #0
 8012e66:	f040 8245 	bne.w	80132f4 <_dtoa_r+0x954>
 8012e6a:	9d00      	ldr	r5, [sp, #0]
 8012e6c:	2331      	movs	r3, #49	; 0x31
 8012e6e:	f805 3b01 	strb.w	r3, [r5], #1
 8012e72:	f10b 0b01 	add.w	fp, fp, #1
 8012e76:	e241      	b.n	80132fc <_dtoa_r+0x95c>
 8012e78:	07f2      	lsls	r2, r6, #31
 8012e7a:	d505      	bpl.n	8012e88 <_dtoa_r+0x4e8>
 8012e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012e80:	f7ed fbba 	bl	80005f8 <__aeabi_dmul>
 8012e84:	3501      	adds	r5, #1
 8012e86:	2301      	movs	r3, #1
 8012e88:	1076      	asrs	r6, r6, #1
 8012e8a:	3708      	adds	r7, #8
 8012e8c:	e773      	b.n	8012d76 <_dtoa_r+0x3d6>
 8012e8e:	2502      	movs	r5, #2
 8012e90:	e775      	b.n	8012d7e <_dtoa_r+0x3de>
 8012e92:	9e04      	ldr	r6, [sp, #16]
 8012e94:	465f      	mov	r7, fp
 8012e96:	e792      	b.n	8012dbe <_dtoa_r+0x41e>
 8012e98:	9900      	ldr	r1, [sp, #0]
 8012e9a:	4b50      	ldr	r3, [pc, #320]	; (8012fdc <_dtoa_r+0x63c>)
 8012e9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ea0:	4431      	add	r1, r6
 8012ea2:	9102      	str	r1, [sp, #8]
 8012ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ea6:	eeb0 9a47 	vmov.f32	s18, s14
 8012eaa:	eef0 9a67 	vmov.f32	s19, s15
 8012eae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012eb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012eb6:	2900      	cmp	r1, #0
 8012eb8:	d044      	beq.n	8012f44 <_dtoa_r+0x5a4>
 8012eba:	494e      	ldr	r1, [pc, #312]	; (8012ff4 <_dtoa_r+0x654>)
 8012ebc:	2000      	movs	r0, #0
 8012ebe:	f7ed fcc5 	bl	800084c <__aeabi_ddiv>
 8012ec2:	ec53 2b19 	vmov	r2, r3, d9
 8012ec6:	f7ed f9df 	bl	8000288 <__aeabi_dsub>
 8012eca:	9d00      	ldr	r5, [sp, #0]
 8012ecc:	ec41 0b19 	vmov	d9, r0, r1
 8012ed0:	4649      	mov	r1, r9
 8012ed2:	4640      	mov	r0, r8
 8012ed4:	f7ed fe40 	bl	8000b58 <__aeabi_d2iz>
 8012ed8:	4606      	mov	r6, r0
 8012eda:	f7ed fb23 	bl	8000524 <__aeabi_i2d>
 8012ede:	4602      	mov	r2, r0
 8012ee0:	460b      	mov	r3, r1
 8012ee2:	4640      	mov	r0, r8
 8012ee4:	4649      	mov	r1, r9
 8012ee6:	f7ed f9cf 	bl	8000288 <__aeabi_dsub>
 8012eea:	3630      	adds	r6, #48	; 0x30
 8012eec:	f805 6b01 	strb.w	r6, [r5], #1
 8012ef0:	ec53 2b19 	vmov	r2, r3, d9
 8012ef4:	4680      	mov	r8, r0
 8012ef6:	4689      	mov	r9, r1
 8012ef8:	f7ed fdf0 	bl	8000adc <__aeabi_dcmplt>
 8012efc:	2800      	cmp	r0, #0
 8012efe:	d164      	bne.n	8012fca <_dtoa_r+0x62a>
 8012f00:	4642      	mov	r2, r8
 8012f02:	464b      	mov	r3, r9
 8012f04:	4937      	ldr	r1, [pc, #220]	; (8012fe4 <_dtoa_r+0x644>)
 8012f06:	2000      	movs	r0, #0
 8012f08:	f7ed f9be 	bl	8000288 <__aeabi_dsub>
 8012f0c:	ec53 2b19 	vmov	r2, r3, d9
 8012f10:	f7ed fde4 	bl	8000adc <__aeabi_dcmplt>
 8012f14:	2800      	cmp	r0, #0
 8012f16:	f040 80b6 	bne.w	8013086 <_dtoa_r+0x6e6>
 8012f1a:	9b02      	ldr	r3, [sp, #8]
 8012f1c:	429d      	cmp	r5, r3
 8012f1e:	f43f af7c 	beq.w	8012e1a <_dtoa_r+0x47a>
 8012f22:	4b31      	ldr	r3, [pc, #196]	; (8012fe8 <_dtoa_r+0x648>)
 8012f24:	ec51 0b19 	vmov	r0, r1, d9
 8012f28:	2200      	movs	r2, #0
 8012f2a:	f7ed fb65 	bl	80005f8 <__aeabi_dmul>
 8012f2e:	4b2e      	ldr	r3, [pc, #184]	; (8012fe8 <_dtoa_r+0x648>)
 8012f30:	ec41 0b19 	vmov	d9, r0, r1
 8012f34:	2200      	movs	r2, #0
 8012f36:	4640      	mov	r0, r8
 8012f38:	4649      	mov	r1, r9
 8012f3a:	f7ed fb5d 	bl	80005f8 <__aeabi_dmul>
 8012f3e:	4680      	mov	r8, r0
 8012f40:	4689      	mov	r9, r1
 8012f42:	e7c5      	b.n	8012ed0 <_dtoa_r+0x530>
 8012f44:	ec51 0b17 	vmov	r0, r1, d7
 8012f48:	f7ed fb56 	bl	80005f8 <__aeabi_dmul>
 8012f4c:	9b02      	ldr	r3, [sp, #8]
 8012f4e:	9d00      	ldr	r5, [sp, #0]
 8012f50:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f52:	ec41 0b19 	vmov	d9, r0, r1
 8012f56:	4649      	mov	r1, r9
 8012f58:	4640      	mov	r0, r8
 8012f5a:	f7ed fdfd 	bl	8000b58 <__aeabi_d2iz>
 8012f5e:	4606      	mov	r6, r0
 8012f60:	f7ed fae0 	bl	8000524 <__aeabi_i2d>
 8012f64:	3630      	adds	r6, #48	; 0x30
 8012f66:	4602      	mov	r2, r0
 8012f68:	460b      	mov	r3, r1
 8012f6a:	4640      	mov	r0, r8
 8012f6c:	4649      	mov	r1, r9
 8012f6e:	f7ed f98b 	bl	8000288 <__aeabi_dsub>
 8012f72:	f805 6b01 	strb.w	r6, [r5], #1
 8012f76:	9b02      	ldr	r3, [sp, #8]
 8012f78:	429d      	cmp	r5, r3
 8012f7a:	4680      	mov	r8, r0
 8012f7c:	4689      	mov	r9, r1
 8012f7e:	f04f 0200 	mov.w	r2, #0
 8012f82:	d124      	bne.n	8012fce <_dtoa_r+0x62e>
 8012f84:	4b1b      	ldr	r3, [pc, #108]	; (8012ff4 <_dtoa_r+0x654>)
 8012f86:	ec51 0b19 	vmov	r0, r1, d9
 8012f8a:	f7ed f97f 	bl	800028c <__adddf3>
 8012f8e:	4602      	mov	r2, r0
 8012f90:	460b      	mov	r3, r1
 8012f92:	4640      	mov	r0, r8
 8012f94:	4649      	mov	r1, r9
 8012f96:	f7ed fdbf 	bl	8000b18 <__aeabi_dcmpgt>
 8012f9a:	2800      	cmp	r0, #0
 8012f9c:	d173      	bne.n	8013086 <_dtoa_r+0x6e6>
 8012f9e:	ec53 2b19 	vmov	r2, r3, d9
 8012fa2:	4914      	ldr	r1, [pc, #80]	; (8012ff4 <_dtoa_r+0x654>)
 8012fa4:	2000      	movs	r0, #0
 8012fa6:	f7ed f96f 	bl	8000288 <__aeabi_dsub>
 8012faa:	4602      	mov	r2, r0
 8012fac:	460b      	mov	r3, r1
 8012fae:	4640      	mov	r0, r8
 8012fb0:	4649      	mov	r1, r9
 8012fb2:	f7ed fd93 	bl	8000adc <__aeabi_dcmplt>
 8012fb6:	2800      	cmp	r0, #0
 8012fb8:	f43f af2f 	beq.w	8012e1a <_dtoa_r+0x47a>
 8012fbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012fbe:	1e6b      	subs	r3, r5, #1
 8012fc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8012fc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012fc6:	2b30      	cmp	r3, #48	; 0x30
 8012fc8:	d0f8      	beq.n	8012fbc <_dtoa_r+0x61c>
 8012fca:	46bb      	mov	fp, r7
 8012fcc:	e04a      	b.n	8013064 <_dtoa_r+0x6c4>
 8012fce:	4b06      	ldr	r3, [pc, #24]	; (8012fe8 <_dtoa_r+0x648>)
 8012fd0:	f7ed fb12 	bl	80005f8 <__aeabi_dmul>
 8012fd4:	4680      	mov	r8, r0
 8012fd6:	4689      	mov	r9, r1
 8012fd8:	e7bd      	b.n	8012f56 <_dtoa_r+0x5b6>
 8012fda:	bf00      	nop
 8012fdc:	080185f8 	.word	0x080185f8
 8012fe0:	080185d0 	.word	0x080185d0
 8012fe4:	3ff00000 	.word	0x3ff00000
 8012fe8:	40240000 	.word	0x40240000
 8012fec:	401c0000 	.word	0x401c0000
 8012ff0:	40140000 	.word	0x40140000
 8012ff4:	3fe00000 	.word	0x3fe00000
 8012ff8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012ffc:	9d00      	ldr	r5, [sp, #0]
 8012ffe:	4642      	mov	r2, r8
 8013000:	464b      	mov	r3, r9
 8013002:	4630      	mov	r0, r6
 8013004:	4639      	mov	r1, r7
 8013006:	f7ed fc21 	bl	800084c <__aeabi_ddiv>
 801300a:	f7ed fda5 	bl	8000b58 <__aeabi_d2iz>
 801300e:	9001      	str	r0, [sp, #4]
 8013010:	f7ed fa88 	bl	8000524 <__aeabi_i2d>
 8013014:	4642      	mov	r2, r8
 8013016:	464b      	mov	r3, r9
 8013018:	f7ed faee 	bl	80005f8 <__aeabi_dmul>
 801301c:	4602      	mov	r2, r0
 801301e:	460b      	mov	r3, r1
 8013020:	4630      	mov	r0, r6
 8013022:	4639      	mov	r1, r7
 8013024:	f7ed f930 	bl	8000288 <__aeabi_dsub>
 8013028:	9e01      	ldr	r6, [sp, #4]
 801302a:	9f04      	ldr	r7, [sp, #16]
 801302c:	3630      	adds	r6, #48	; 0x30
 801302e:	f805 6b01 	strb.w	r6, [r5], #1
 8013032:	9e00      	ldr	r6, [sp, #0]
 8013034:	1bae      	subs	r6, r5, r6
 8013036:	42b7      	cmp	r7, r6
 8013038:	4602      	mov	r2, r0
 801303a:	460b      	mov	r3, r1
 801303c:	d134      	bne.n	80130a8 <_dtoa_r+0x708>
 801303e:	f7ed f925 	bl	800028c <__adddf3>
 8013042:	4642      	mov	r2, r8
 8013044:	464b      	mov	r3, r9
 8013046:	4606      	mov	r6, r0
 8013048:	460f      	mov	r7, r1
 801304a:	f7ed fd65 	bl	8000b18 <__aeabi_dcmpgt>
 801304e:	b9c8      	cbnz	r0, 8013084 <_dtoa_r+0x6e4>
 8013050:	4642      	mov	r2, r8
 8013052:	464b      	mov	r3, r9
 8013054:	4630      	mov	r0, r6
 8013056:	4639      	mov	r1, r7
 8013058:	f7ed fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 801305c:	b110      	cbz	r0, 8013064 <_dtoa_r+0x6c4>
 801305e:	9b01      	ldr	r3, [sp, #4]
 8013060:	07db      	lsls	r3, r3, #31
 8013062:	d40f      	bmi.n	8013084 <_dtoa_r+0x6e4>
 8013064:	4651      	mov	r1, sl
 8013066:	4620      	mov	r0, r4
 8013068:	f000 fe82 	bl	8013d70 <_Bfree>
 801306c:	2300      	movs	r3, #0
 801306e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013070:	702b      	strb	r3, [r5, #0]
 8013072:	f10b 0301 	add.w	r3, fp, #1
 8013076:	6013      	str	r3, [r2, #0]
 8013078:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801307a:	2b00      	cmp	r3, #0
 801307c:	f43f ace2 	beq.w	8012a44 <_dtoa_r+0xa4>
 8013080:	601d      	str	r5, [r3, #0]
 8013082:	e4df      	b.n	8012a44 <_dtoa_r+0xa4>
 8013084:	465f      	mov	r7, fp
 8013086:	462b      	mov	r3, r5
 8013088:	461d      	mov	r5, r3
 801308a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801308e:	2a39      	cmp	r2, #57	; 0x39
 8013090:	d106      	bne.n	80130a0 <_dtoa_r+0x700>
 8013092:	9a00      	ldr	r2, [sp, #0]
 8013094:	429a      	cmp	r2, r3
 8013096:	d1f7      	bne.n	8013088 <_dtoa_r+0x6e8>
 8013098:	9900      	ldr	r1, [sp, #0]
 801309a:	2230      	movs	r2, #48	; 0x30
 801309c:	3701      	adds	r7, #1
 801309e:	700a      	strb	r2, [r1, #0]
 80130a0:	781a      	ldrb	r2, [r3, #0]
 80130a2:	3201      	adds	r2, #1
 80130a4:	701a      	strb	r2, [r3, #0]
 80130a6:	e790      	b.n	8012fca <_dtoa_r+0x62a>
 80130a8:	4ba3      	ldr	r3, [pc, #652]	; (8013338 <_dtoa_r+0x998>)
 80130aa:	2200      	movs	r2, #0
 80130ac:	f7ed faa4 	bl	80005f8 <__aeabi_dmul>
 80130b0:	2200      	movs	r2, #0
 80130b2:	2300      	movs	r3, #0
 80130b4:	4606      	mov	r6, r0
 80130b6:	460f      	mov	r7, r1
 80130b8:	f7ed fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 80130bc:	2800      	cmp	r0, #0
 80130be:	d09e      	beq.n	8012ffe <_dtoa_r+0x65e>
 80130c0:	e7d0      	b.n	8013064 <_dtoa_r+0x6c4>
 80130c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130c4:	2a00      	cmp	r2, #0
 80130c6:	f000 80ca 	beq.w	801325e <_dtoa_r+0x8be>
 80130ca:	9a07      	ldr	r2, [sp, #28]
 80130cc:	2a01      	cmp	r2, #1
 80130ce:	f300 80ad 	bgt.w	801322c <_dtoa_r+0x88c>
 80130d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80130d4:	2a00      	cmp	r2, #0
 80130d6:	f000 80a5 	beq.w	8013224 <_dtoa_r+0x884>
 80130da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80130de:	9e08      	ldr	r6, [sp, #32]
 80130e0:	9d05      	ldr	r5, [sp, #20]
 80130e2:	9a05      	ldr	r2, [sp, #20]
 80130e4:	441a      	add	r2, r3
 80130e6:	9205      	str	r2, [sp, #20]
 80130e8:	9a06      	ldr	r2, [sp, #24]
 80130ea:	2101      	movs	r1, #1
 80130ec:	441a      	add	r2, r3
 80130ee:	4620      	mov	r0, r4
 80130f0:	9206      	str	r2, [sp, #24]
 80130f2:	f000 ff3d 	bl	8013f70 <__i2b>
 80130f6:	4607      	mov	r7, r0
 80130f8:	b165      	cbz	r5, 8013114 <_dtoa_r+0x774>
 80130fa:	9b06      	ldr	r3, [sp, #24]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	dd09      	ble.n	8013114 <_dtoa_r+0x774>
 8013100:	42ab      	cmp	r3, r5
 8013102:	9a05      	ldr	r2, [sp, #20]
 8013104:	bfa8      	it	ge
 8013106:	462b      	movge	r3, r5
 8013108:	1ad2      	subs	r2, r2, r3
 801310a:	9205      	str	r2, [sp, #20]
 801310c:	9a06      	ldr	r2, [sp, #24]
 801310e:	1aed      	subs	r5, r5, r3
 8013110:	1ad3      	subs	r3, r2, r3
 8013112:	9306      	str	r3, [sp, #24]
 8013114:	9b08      	ldr	r3, [sp, #32]
 8013116:	b1f3      	cbz	r3, 8013156 <_dtoa_r+0x7b6>
 8013118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801311a:	2b00      	cmp	r3, #0
 801311c:	f000 80a3 	beq.w	8013266 <_dtoa_r+0x8c6>
 8013120:	2e00      	cmp	r6, #0
 8013122:	dd10      	ble.n	8013146 <_dtoa_r+0x7a6>
 8013124:	4639      	mov	r1, r7
 8013126:	4632      	mov	r2, r6
 8013128:	4620      	mov	r0, r4
 801312a:	f000 ffe1 	bl	80140f0 <__pow5mult>
 801312e:	4652      	mov	r2, sl
 8013130:	4601      	mov	r1, r0
 8013132:	4607      	mov	r7, r0
 8013134:	4620      	mov	r0, r4
 8013136:	f000 ff31 	bl	8013f9c <__multiply>
 801313a:	4651      	mov	r1, sl
 801313c:	4680      	mov	r8, r0
 801313e:	4620      	mov	r0, r4
 8013140:	f000 fe16 	bl	8013d70 <_Bfree>
 8013144:	46c2      	mov	sl, r8
 8013146:	9b08      	ldr	r3, [sp, #32]
 8013148:	1b9a      	subs	r2, r3, r6
 801314a:	d004      	beq.n	8013156 <_dtoa_r+0x7b6>
 801314c:	4651      	mov	r1, sl
 801314e:	4620      	mov	r0, r4
 8013150:	f000 ffce 	bl	80140f0 <__pow5mult>
 8013154:	4682      	mov	sl, r0
 8013156:	2101      	movs	r1, #1
 8013158:	4620      	mov	r0, r4
 801315a:	f000 ff09 	bl	8013f70 <__i2b>
 801315e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013160:	2b00      	cmp	r3, #0
 8013162:	4606      	mov	r6, r0
 8013164:	f340 8081 	ble.w	801326a <_dtoa_r+0x8ca>
 8013168:	461a      	mov	r2, r3
 801316a:	4601      	mov	r1, r0
 801316c:	4620      	mov	r0, r4
 801316e:	f000 ffbf 	bl	80140f0 <__pow5mult>
 8013172:	9b07      	ldr	r3, [sp, #28]
 8013174:	2b01      	cmp	r3, #1
 8013176:	4606      	mov	r6, r0
 8013178:	dd7a      	ble.n	8013270 <_dtoa_r+0x8d0>
 801317a:	f04f 0800 	mov.w	r8, #0
 801317e:	6933      	ldr	r3, [r6, #16]
 8013180:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013184:	6918      	ldr	r0, [r3, #16]
 8013186:	f000 fea5 	bl	8013ed4 <__hi0bits>
 801318a:	f1c0 0020 	rsb	r0, r0, #32
 801318e:	9b06      	ldr	r3, [sp, #24]
 8013190:	4418      	add	r0, r3
 8013192:	f010 001f 	ands.w	r0, r0, #31
 8013196:	f000 8094 	beq.w	80132c2 <_dtoa_r+0x922>
 801319a:	f1c0 0320 	rsb	r3, r0, #32
 801319e:	2b04      	cmp	r3, #4
 80131a0:	f340 8085 	ble.w	80132ae <_dtoa_r+0x90e>
 80131a4:	9b05      	ldr	r3, [sp, #20]
 80131a6:	f1c0 001c 	rsb	r0, r0, #28
 80131aa:	4403      	add	r3, r0
 80131ac:	9305      	str	r3, [sp, #20]
 80131ae:	9b06      	ldr	r3, [sp, #24]
 80131b0:	4403      	add	r3, r0
 80131b2:	4405      	add	r5, r0
 80131b4:	9306      	str	r3, [sp, #24]
 80131b6:	9b05      	ldr	r3, [sp, #20]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	dd05      	ble.n	80131c8 <_dtoa_r+0x828>
 80131bc:	4651      	mov	r1, sl
 80131be:	461a      	mov	r2, r3
 80131c0:	4620      	mov	r0, r4
 80131c2:	f000 ffef 	bl	80141a4 <__lshift>
 80131c6:	4682      	mov	sl, r0
 80131c8:	9b06      	ldr	r3, [sp, #24]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	dd05      	ble.n	80131da <_dtoa_r+0x83a>
 80131ce:	4631      	mov	r1, r6
 80131d0:	461a      	mov	r2, r3
 80131d2:	4620      	mov	r0, r4
 80131d4:	f000 ffe6 	bl	80141a4 <__lshift>
 80131d8:	4606      	mov	r6, r0
 80131da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d072      	beq.n	80132c6 <_dtoa_r+0x926>
 80131e0:	4631      	mov	r1, r6
 80131e2:	4650      	mov	r0, sl
 80131e4:	f001 f84a 	bl	801427c <__mcmp>
 80131e8:	2800      	cmp	r0, #0
 80131ea:	da6c      	bge.n	80132c6 <_dtoa_r+0x926>
 80131ec:	2300      	movs	r3, #0
 80131ee:	4651      	mov	r1, sl
 80131f0:	220a      	movs	r2, #10
 80131f2:	4620      	mov	r0, r4
 80131f4:	f000 fdde 	bl	8013db4 <__multadd>
 80131f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80131fe:	4682      	mov	sl, r0
 8013200:	2b00      	cmp	r3, #0
 8013202:	f000 81b0 	beq.w	8013566 <_dtoa_r+0xbc6>
 8013206:	2300      	movs	r3, #0
 8013208:	4639      	mov	r1, r7
 801320a:	220a      	movs	r2, #10
 801320c:	4620      	mov	r0, r4
 801320e:	f000 fdd1 	bl	8013db4 <__multadd>
 8013212:	9b01      	ldr	r3, [sp, #4]
 8013214:	2b00      	cmp	r3, #0
 8013216:	4607      	mov	r7, r0
 8013218:	f300 8096 	bgt.w	8013348 <_dtoa_r+0x9a8>
 801321c:	9b07      	ldr	r3, [sp, #28]
 801321e:	2b02      	cmp	r3, #2
 8013220:	dc59      	bgt.n	80132d6 <_dtoa_r+0x936>
 8013222:	e091      	b.n	8013348 <_dtoa_r+0x9a8>
 8013224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013226:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801322a:	e758      	b.n	80130de <_dtoa_r+0x73e>
 801322c:	9b04      	ldr	r3, [sp, #16]
 801322e:	1e5e      	subs	r6, r3, #1
 8013230:	9b08      	ldr	r3, [sp, #32]
 8013232:	42b3      	cmp	r3, r6
 8013234:	bfbf      	itttt	lt
 8013236:	9b08      	ldrlt	r3, [sp, #32]
 8013238:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801323a:	9608      	strlt	r6, [sp, #32]
 801323c:	1af3      	sublt	r3, r6, r3
 801323e:	bfb4      	ite	lt
 8013240:	18d2      	addlt	r2, r2, r3
 8013242:	1b9e      	subge	r6, r3, r6
 8013244:	9b04      	ldr	r3, [sp, #16]
 8013246:	bfbc      	itt	lt
 8013248:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801324a:	2600      	movlt	r6, #0
 801324c:	2b00      	cmp	r3, #0
 801324e:	bfb7      	itett	lt
 8013250:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8013254:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013258:	1a9d      	sublt	r5, r3, r2
 801325a:	2300      	movlt	r3, #0
 801325c:	e741      	b.n	80130e2 <_dtoa_r+0x742>
 801325e:	9e08      	ldr	r6, [sp, #32]
 8013260:	9d05      	ldr	r5, [sp, #20]
 8013262:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013264:	e748      	b.n	80130f8 <_dtoa_r+0x758>
 8013266:	9a08      	ldr	r2, [sp, #32]
 8013268:	e770      	b.n	801314c <_dtoa_r+0x7ac>
 801326a:	9b07      	ldr	r3, [sp, #28]
 801326c:	2b01      	cmp	r3, #1
 801326e:	dc19      	bgt.n	80132a4 <_dtoa_r+0x904>
 8013270:	9b02      	ldr	r3, [sp, #8]
 8013272:	b9bb      	cbnz	r3, 80132a4 <_dtoa_r+0x904>
 8013274:	9b03      	ldr	r3, [sp, #12]
 8013276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801327a:	b99b      	cbnz	r3, 80132a4 <_dtoa_r+0x904>
 801327c:	9b03      	ldr	r3, [sp, #12]
 801327e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013282:	0d1b      	lsrs	r3, r3, #20
 8013284:	051b      	lsls	r3, r3, #20
 8013286:	b183      	cbz	r3, 80132aa <_dtoa_r+0x90a>
 8013288:	9b05      	ldr	r3, [sp, #20]
 801328a:	3301      	adds	r3, #1
 801328c:	9305      	str	r3, [sp, #20]
 801328e:	9b06      	ldr	r3, [sp, #24]
 8013290:	3301      	adds	r3, #1
 8013292:	9306      	str	r3, [sp, #24]
 8013294:	f04f 0801 	mov.w	r8, #1
 8013298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801329a:	2b00      	cmp	r3, #0
 801329c:	f47f af6f 	bne.w	801317e <_dtoa_r+0x7de>
 80132a0:	2001      	movs	r0, #1
 80132a2:	e774      	b.n	801318e <_dtoa_r+0x7ee>
 80132a4:	f04f 0800 	mov.w	r8, #0
 80132a8:	e7f6      	b.n	8013298 <_dtoa_r+0x8f8>
 80132aa:	4698      	mov	r8, r3
 80132ac:	e7f4      	b.n	8013298 <_dtoa_r+0x8f8>
 80132ae:	d082      	beq.n	80131b6 <_dtoa_r+0x816>
 80132b0:	9a05      	ldr	r2, [sp, #20]
 80132b2:	331c      	adds	r3, #28
 80132b4:	441a      	add	r2, r3
 80132b6:	9205      	str	r2, [sp, #20]
 80132b8:	9a06      	ldr	r2, [sp, #24]
 80132ba:	441a      	add	r2, r3
 80132bc:	441d      	add	r5, r3
 80132be:	9206      	str	r2, [sp, #24]
 80132c0:	e779      	b.n	80131b6 <_dtoa_r+0x816>
 80132c2:	4603      	mov	r3, r0
 80132c4:	e7f4      	b.n	80132b0 <_dtoa_r+0x910>
 80132c6:	9b04      	ldr	r3, [sp, #16]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	dc37      	bgt.n	801333c <_dtoa_r+0x99c>
 80132cc:	9b07      	ldr	r3, [sp, #28]
 80132ce:	2b02      	cmp	r3, #2
 80132d0:	dd34      	ble.n	801333c <_dtoa_r+0x99c>
 80132d2:	9b04      	ldr	r3, [sp, #16]
 80132d4:	9301      	str	r3, [sp, #4]
 80132d6:	9b01      	ldr	r3, [sp, #4]
 80132d8:	b963      	cbnz	r3, 80132f4 <_dtoa_r+0x954>
 80132da:	4631      	mov	r1, r6
 80132dc:	2205      	movs	r2, #5
 80132de:	4620      	mov	r0, r4
 80132e0:	f000 fd68 	bl	8013db4 <__multadd>
 80132e4:	4601      	mov	r1, r0
 80132e6:	4606      	mov	r6, r0
 80132e8:	4650      	mov	r0, sl
 80132ea:	f000 ffc7 	bl	801427c <__mcmp>
 80132ee:	2800      	cmp	r0, #0
 80132f0:	f73f adbb 	bgt.w	8012e6a <_dtoa_r+0x4ca>
 80132f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132f6:	9d00      	ldr	r5, [sp, #0]
 80132f8:	ea6f 0b03 	mvn.w	fp, r3
 80132fc:	f04f 0800 	mov.w	r8, #0
 8013300:	4631      	mov	r1, r6
 8013302:	4620      	mov	r0, r4
 8013304:	f000 fd34 	bl	8013d70 <_Bfree>
 8013308:	2f00      	cmp	r7, #0
 801330a:	f43f aeab 	beq.w	8013064 <_dtoa_r+0x6c4>
 801330e:	f1b8 0f00 	cmp.w	r8, #0
 8013312:	d005      	beq.n	8013320 <_dtoa_r+0x980>
 8013314:	45b8      	cmp	r8, r7
 8013316:	d003      	beq.n	8013320 <_dtoa_r+0x980>
 8013318:	4641      	mov	r1, r8
 801331a:	4620      	mov	r0, r4
 801331c:	f000 fd28 	bl	8013d70 <_Bfree>
 8013320:	4639      	mov	r1, r7
 8013322:	4620      	mov	r0, r4
 8013324:	f000 fd24 	bl	8013d70 <_Bfree>
 8013328:	e69c      	b.n	8013064 <_dtoa_r+0x6c4>
 801332a:	2600      	movs	r6, #0
 801332c:	4637      	mov	r7, r6
 801332e:	e7e1      	b.n	80132f4 <_dtoa_r+0x954>
 8013330:	46bb      	mov	fp, r7
 8013332:	4637      	mov	r7, r6
 8013334:	e599      	b.n	8012e6a <_dtoa_r+0x4ca>
 8013336:	bf00      	nop
 8013338:	40240000 	.word	0x40240000
 801333c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801333e:	2b00      	cmp	r3, #0
 8013340:	f000 80c8 	beq.w	80134d4 <_dtoa_r+0xb34>
 8013344:	9b04      	ldr	r3, [sp, #16]
 8013346:	9301      	str	r3, [sp, #4]
 8013348:	2d00      	cmp	r5, #0
 801334a:	dd05      	ble.n	8013358 <_dtoa_r+0x9b8>
 801334c:	4639      	mov	r1, r7
 801334e:	462a      	mov	r2, r5
 8013350:	4620      	mov	r0, r4
 8013352:	f000 ff27 	bl	80141a4 <__lshift>
 8013356:	4607      	mov	r7, r0
 8013358:	f1b8 0f00 	cmp.w	r8, #0
 801335c:	d05b      	beq.n	8013416 <_dtoa_r+0xa76>
 801335e:	6879      	ldr	r1, [r7, #4]
 8013360:	4620      	mov	r0, r4
 8013362:	f000 fcc5 	bl	8013cf0 <_Balloc>
 8013366:	4605      	mov	r5, r0
 8013368:	b928      	cbnz	r0, 8013376 <_dtoa_r+0x9d6>
 801336a:	4b83      	ldr	r3, [pc, #524]	; (8013578 <_dtoa_r+0xbd8>)
 801336c:	4602      	mov	r2, r0
 801336e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013372:	f7ff bb2e 	b.w	80129d2 <_dtoa_r+0x32>
 8013376:	693a      	ldr	r2, [r7, #16]
 8013378:	3202      	adds	r2, #2
 801337a:	0092      	lsls	r2, r2, #2
 801337c:	f107 010c 	add.w	r1, r7, #12
 8013380:	300c      	adds	r0, #12
 8013382:	f7ff fa4a 	bl	801281a <memcpy>
 8013386:	2201      	movs	r2, #1
 8013388:	4629      	mov	r1, r5
 801338a:	4620      	mov	r0, r4
 801338c:	f000 ff0a 	bl	80141a4 <__lshift>
 8013390:	9b00      	ldr	r3, [sp, #0]
 8013392:	3301      	adds	r3, #1
 8013394:	9304      	str	r3, [sp, #16]
 8013396:	e9dd 2300 	ldrd	r2, r3, [sp]
 801339a:	4413      	add	r3, r2
 801339c:	9308      	str	r3, [sp, #32]
 801339e:	9b02      	ldr	r3, [sp, #8]
 80133a0:	f003 0301 	and.w	r3, r3, #1
 80133a4:	46b8      	mov	r8, r7
 80133a6:	9306      	str	r3, [sp, #24]
 80133a8:	4607      	mov	r7, r0
 80133aa:	9b04      	ldr	r3, [sp, #16]
 80133ac:	4631      	mov	r1, r6
 80133ae:	3b01      	subs	r3, #1
 80133b0:	4650      	mov	r0, sl
 80133b2:	9301      	str	r3, [sp, #4]
 80133b4:	f7ff fa6c 	bl	8012890 <quorem>
 80133b8:	4641      	mov	r1, r8
 80133ba:	9002      	str	r0, [sp, #8]
 80133bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80133c0:	4650      	mov	r0, sl
 80133c2:	f000 ff5b 	bl	801427c <__mcmp>
 80133c6:	463a      	mov	r2, r7
 80133c8:	9005      	str	r0, [sp, #20]
 80133ca:	4631      	mov	r1, r6
 80133cc:	4620      	mov	r0, r4
 80133ce:	f000 ff71 	bl	80142b4 <__mdiff>
 80133d2:	68c2      	ldr	r2, [r0, #12]
 80133d4:	4605      	mov	r5, r0
 80133d6:	bb02      	cbnz	r2, 801341a <_dtoa_r+0xa7a>
 80133d8:	4601      	mov	r1, r0
 80133da:	4650      	mov	r0, sl
 80133dc:	f000 ff4e 	bl	801427c <__mcmp>
 80133e0:	4602      	mov	r2, r0
 80133e2:	4629      	mov	r1, r5
 80133e4:	4620      	mov	r0, r4
 80133e6:	9209      	str	r2, [sp, #36]	; 0x24
 80133e8:	f000 fcc2 	bl	8013d70 <_Bfree>
 80133ec:	9b07      	ldr	r3, [sp, #28]
 80133ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133f0:	9d04      	ldr	r5, [sp, #16]
 80133f2:	ea43 0102 	orr.w	r1, r3, r2
 80133f6:	9b06      	ldr	r3, [sp, #24]
 80133f8:	4319      	orrs	r1, r3
 80133fa:	d110      	bne.n	801341e <_dtoa_r+0xa7e>
 80133fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013400:	d029      	beq.n	8013456 <_dtoa_r+0xab6>
 8013402:	9b05      	ldr	r3, [sp, #20]
 8013404:	2b00      	cmp	r3, #0
 8013406:	dd02      	ble.n	801340e <_dtoa_r+0xa6e>
 8013408:	9b02      	ldr	r3, [sp, #8]
 801340a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801340e:	9b01      	ldr	r3, [sp, #4]
 8013410:	f883 9000 	strb.w	r9, [r3]
 8013414:	e774      	b.n	8013300 <_dtoa_r+0x960>
 8013416:	4638      	mov	r0, r7
 8013418:	e7ba      	b.n	8013390 <_dtoa_r+0x9f0>
 801341a:	2201      	movs	r2, #1
 801341c:	e7e1      	b.n	80133e2 <_dtoa_r+0xa42>
 801341e:	9b05      	ldr	r3, [sp, #20]
 8013420:	2b00      	cmp	r3, #0
 8013422:	db04      	blt.n	801342e <_dtoa_r+0xa8e>
 8013424:	9907      	ldr	r1, [sp, #28]
 8013426:	430b      	orrs	r3, r1
 8013428:	9906      	ldr	r1, [sp, #24]
 801342a:	430b      	orrs	r3, r1
 801342c:	d120      	bne.n	8013470 <_dtoa_r+0xad0>
 801342e:	2a00      	cmp	r2, #0
 8013430:	dded      	ble.n	801340e <_dtoa_r+0xa6e>
 8013432:	4651      	mov	r1, sl
 8013434:	2201      	movs	r2, #1
 8013436:	4620      	mov	r0, r4
 8013438:	f000 feb4 	bl	80141a4 <__lshift>
 801343c:	4631      	mov	r1, r6
 801343e:	4682      	mov	sl, r0
 8013440:	f000 ff1c 	bl	801427c <__mcmp>
 8013444:	2800      	cmp	r0, #0
 8013446:	dc03      	bgt.n	8013450 <_dtoa_r+0xab0>
 8013448:	d1e1      	bne.n	801340e <_dtoa_r+0xa6e>
 801344a:	f019 0f01 	tst.w	r9, #1
 801344e:	d0de      	beq.n	801340e <_dtoa_r+0xa6e>
 8013450:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013454:	d1d8      	bne.n	8013408 <_dtoa_r+0xa68>
 8013456:	9a01      	ldr	r2, [sp, #4]
 8013458:	2339      	movs	r3, #57	; 0x39
 801345a:	7013      	strb	r3, [r2, #0]
 801345c:	462b      	mov	r3, r5
 801345e:	461d      	mov	r5, r3
 8013460:	3b01      	subs	r3, #1
 8013462:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013466:	2a39      	cmp	r2, #57	; 0x39
 8013468:	d06c      	beq.n	8013544 <_dtoa_r+0xba4>
 801346a:	3201      	adds	r2, #1
 801346c:	701a      	strb	r2, [r3, #0]
 801346e:	e747      	b.n	8013300 <_dtoa_r+0x960>
 8013470:	2a00      	cmp	r2, #0
 8013472:	dd07      	ble.n	8013484 <_dtoa_r+0xae4>
 8013474:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013478:	d0ed      	beq.n	8013456 <_dtoa_r+0xab6>
 801347a:	9a01      	ldr	r2, [sp, #4]
 801347c:	f109 0301 	add.w	r3, r9, #1
 8013480:	7013      	strb	r3, [r2, #0]
 8013482:	e73d      	b.n	8013300 <_dtoa_r+0x960>
 8013484:	9b04      	ldr	r3, [sp, #16]
 8013486:	9a08      	ldr	r2, [sp, #32]
 8013488:	f803 9c01 	strb.w	r9, [r3, #-1]
 801348c:	4293      	cmp	r3, r2
 801348e:	d043      	beq.n	8013518 <_dtoa_r+0xb78>
 8013490:	4651      	mov	r1, sl
 8013492:	2300      	movs	r3, #0
 8013494:	220a      	movs	r2, #10
 8013496:	4620      	mov	r0, r4
 8013498:	f000 fc8c 	bl	8013db4 <__multadd>
 801349c:	45b8      	cmp	r8, r7
 801349e:	4682      	mov	sl, r0
 80134a0:	f04f 0300 	mov.w	r3, #0
 80134a4:	f04f 020a 	mov.w	r2, #10
 80134a8:	4641      	mov	r1, r8
 80134aa:	4620      	mov	r0, r4
 80134ac:	d107      	bne.n	80134be <_dtoa_r+0xb1e>
 80134ae:	f000 fc81 	bl	8013db4 <__multadd>
 80134b2:	4680      	mov	r8, r0
 80134b4:	4607      	mov	r7, r0
 80134b6:	9b04      	ldr	r3, [sp, #16]
 80134b8:	3301      	adds	r3, #1
 80134ba:	9304      	str	r3, [sp, #16]
 80134bc:	e775      	b.n	80133aa <_dtoa_r+0xa0a>
 80134be:	f000 fc79 	bl	8013db4 <__multadd>
 80134c2:	4639      	mov	r1, r7
 80134c4:	4680      	mov	r8, r0
 80134c6:	2300      	movs	r3, #0
 80134c8:	220a      	movs	r2, #10
 80134ca:	4620      	mov	r0, r4
 80134cc:	f000 fc72 	bl	8013db4 <__multadd>
 80134d0:	4607      	mov	r7, r0
 80134d2:	e7f0      	b.n	80134b6 <_dtoa_r+0xb16>
 80134d4:	9b04      	ldr	r3, [sp, #16]
 80134d6:	9301      	str	r3, [sp, #4]
 80134d8:	9d00      	ldr	r5, [sp, #0]
 80134da:	4631      	mov	r1, r6
 80134dc:	4650      	mov	r0, sl
 80134de:	f7ff f9d7 	bl	8012890 <quorem>
 80134e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80134e6:	9b00      	ldr	r3, [sp, #0]
 80134e8:	f805 9b01 	strb.w	r9, [r5], #1
 80134ec:	1aea      	subs	r2, r5, r3
 80134ee:	9b01      	ldr	r3, [sp, #4]
 80134f0:	4293      	cmp	r3, r2
 80134f2:	dd07      	ble.n	8013504 <_dtoa_r+0xb64>
 80134f4:	4651      	mov	r1, sl
 80134f6:	2300      	movs	r3, #0
 80134f8:	220a      	movs	r2, #10
 80134fa:	4620      	mov	r0, r4
 80134fc:	f000 fc5a 	bl	8013db4 <__multadd>
 8013500:	4682      	mov	sl, r0
 8013502:	e7ea      	b.n	80134da <_dtoa_r+0xb3a>
 8013504:	9b01      	ldr	r3, [sp, #4]
 8013506:	2b00      	cmp	r3, #0
 8013508:	bfc8      	it	gt
 801350a:	461d      	movgt	r5, r3
 801350c:	9b00      	ldr	r3, [sp, #0]
 801350e:	bfd8      	it	le
 8013510:	2501      	movle	r5, #1
 8013512:	441d      	add	r5, r3
 8013514:	f04f 0800 	mov.w	r8, #0
 8013518:	4651      	mov	r1, sl
 801351a:	2201      	movs	r2, #1
 801351c:	4620      	mov	r0, r4
 801351e:	f000 fe41 	bl	80141a4 <__lshift>
 8013522:	4631      	mov	r1, r6
 8013524:	4682      	mov	sl, r0
 8013526:	f000 fea9 	bl	801427c <__mcmp>
 801352a:	2800      	cmp	r0, #0
 801352c:	dc96      	bgt.n	801345c <_dtoa_r+0xabc>
 801352e:	d102      	bne.n	8013536 <_dtoa_r+0xb96>
 8013530:	f019 0f01 	tst.w	r9, #1
 8013534:	d192      	bne.n	801345c <_dtoa_r+0xabc>
 8013536:	462b      	mov	r3, r5
 8013538:	461d      	mov	r5, r3
 801353a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801353e:	2a30      	cmp	r2, #48	; 0x30
 8013540:	d0fa      	beq.n	8013538 <_dtoa_r+0xb98>
 8013542:	e6dd      	b.n	8013300 <_dtoa_r+0x960>
 8013544:	9a00      	ldr	r2, [sp, #0]
 8013546:	429a      	cmp	r2, r3
 8013548:	d189      	bne.n	801345e <_dtoa_r+0xabe>
 801354a:	f10b 0b01 	add.w	fp, fp, #1
 801354e:	2331      	movs	r3, #49	; 0x31
 8013550:	e796      	b.n	8013480 <_dtoa_r+0xae0>
 8013552:	4b0a      	ldr	r3, [pc, #40]	; (801357c <_dtoa_r+0xbdc>)
 8013554:	f7ff ba99 	b.w	8012a8a <_dtoa_r+0xea>
 8013558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801355a:	2b00      	cmp	r3, #0
 801355c:	f47f aa6d 	bne.w	8012a3a <_dtoa_r+0x9a>
 8013560:	4b07      	ldr	r3, [pc, #28]	; (8013580 <_dtoa_r+0xbe0>)
 8013562:	f7ff ba92 	b.w	8012a8a <_dtoa_r+0xea>
 8013566:	9b01      	ldr	r3, [sp, #4]
 8013568:	2b00      	cmp	r3, #0
 801356a:	dcb5      	bgt.n	80134d8 <_dtoa_r+0xb38>
 801356c:	9b07      	ldr	r3, [sp, #28]
 801356e:	2b02      	cmp	r3, #2
 8013570:	f73f aeb1 	bgt.w	80132d6 <_dtoa_r+0x936>
 8013574:	e7b0      	b.n	80134d8 <_dtoa_r+0xb38>
 8013576:	bf00      	nop
 8013578:	08018504 	.word	0x08018504
 801357c:	080183c1 	.word	0x080183c1
 8013580:	0801849f 	.word	0x0801849f

08013584 <_free_r>:
 8013584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013586:	2900      	cmp	r1, #0
 8013588:	d044      	beq.n	8013614 <_free_r+0x90>
 801358a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801358e:	9001      	str	r0, [sp, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	f1a1 0404 	sub.w	r4, r1, #4
 8013596:	bfb8      	it	lt
 8013598:	18e4      	addlt	r4, r4, r3
 801359a:	f7fd f941 	bl	8010820 <__malloc_lock>
 801359e:	4a1e      	ldr	r2, [pc, #120]	; (8013618 <_free_r+0x94>)
 80135a0:	9801      	ldr	r0, [sp, #4]
 80135a2:	6813      	ldr	r3, [r2, #0]
 80135a4:	b933      	cbnz	r3, 80135b4 <_free_r+0x30>
 80135a6:	6063      	str	r3, [r4, #4]
 80135a8:	6014      	str	r4, [r2, #0]
 80135aa:	b003      	add	sp, #12
 80135ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135b0:	f7fd b93c 	b.w	801082c <__malloc_unlock>
 80135b4:	42a3      	cmp	r3, r4
 80135b6:	d908      	bls.n	80135ca <_free_r+0x46>
 80135b8:	6825      	ldr	r5, [r4, #0]
 80135ba:	1961      	adds	r1, r4, r5
 80135bc:	428b      	cmp	r3, r1
 80135be:	bf01      	itttt	eq
 80135c0:	6819      	ldreq	r1, [r3, #0]
 80135c2:	685b      	ldreq	r3, [r3, #4]
 80135c4:	1949      	addeq	r1, r1, r5
 80135c6:	6021      	streq	r1, [r4, #0]
 80135c8:	e7ed      	b.n	80135a6 <_free_r+0x22>
 80135ca:	461a      	mov	r2, r3
 80135cc:	685b      	ldr	r3, [r3, #4]
 80135ce:	b10b      	cbz	r3, 80135d4 <_free_r+0x50>
 80135d0:	42a3      	cmp	r3, r4
 80135d2:	d9fa      	bls.n	80135ca <_free_r+0x46>
 80135d4:	6811      	ldr	r1, [r2, #0]
 80135d6:	1855      	adds	r5, r2, r1
 80135d8:	42a5      	cmp	r5, r4
 80135da:	d10b      	bne.n	80135f4 <_free_r+0x70>
 80135dc:	6824      	ldr	r4, [r4, #0]
 80135de:	4421      	add	r1, r4
 80135e0:	1854      	adds	r4, r2, r1
 80135e2:	42a3      	cmp	r3, r4
 80135e4:	6011      	str	r1, [r2, #0]
 80135e6:	d1e0      	bne.n	80135aa <_free_r+0x26>
 80135e8:	681c      	ldr	r4, [r3, #0]
 80135ea:	685b      	ldr	r3, [r3, #4]
 80135ec:	6053      	str	r3, [r2, #4]
 80135ee:	440c      	add	r4, r1
 80135f0:	6014      	str	r4, [r2, #0]
 80135f2:	e7da      	b.n	80135aa <_free_r+0x26>
 80135f4:	d902      	bls.n	80135fc <_free_r+0x78>
 80135f6:	230c      	movs	r3, #12
 80135f8:	6003      	str	r3, [r0, #0]
 80135fa:	e7d6      	b.n	80135aa <_free_r+0x26>
 80135fc:	6825      	ldr	r5, [r4, #0]
 80135fe:	1961      	adds	r1, r4, r5
 8013600:	428b      	cmp	r3, r1
 8013602:	bf04      	itt	eq
 8013604:	6819      	ldreq	r1, [r3, #0]
 8013606:	685b      	ldreq	r3, [r3, #4]
 8013608:	6063      	str	r3, [r4, #4]
 801360a:	bf04      	itt	eq
 801360c:	1949      	addeq	r1, r1, r5
 801360e:	6021      	streq	r1, [r4, #0]
 8013610:	6054      	str	r4, [r2, #4]
 8013612:	e7ca      	b.n	80135aa <_free_r+0x26>
 8013614:	b003      	add	sp, #12
 8013616:	bd30      	pop	{r4, r5, pc}
 8013618:	200014f8 	.word	0x200014f8

0801361c <rshift>:
 801361c:	6903      	ldr	r3, [r0, #16]
 801361e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013622:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013626:	ea4f 1261 	mov.w	r2, r1, asr #5
 801362a:	f100 0414 	add.w	r4, r0, #20
 801362e:	dd45      	ble.n	80136bc <rshift+0xa0>
 8013630:	f011 011f 	ands.w	r1, r1, #31
 8013634:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013638:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801363c:	d10c      	bne.n	8013658 <rshift+0x3c>
 801363e:	f100 0710 	add.w	r7, r0, #16
 8013642:	4629      	mov	r1, r5
 8013644:	42b1      	cmp	r1, r6
 8013646:	d334      	bcc.n	80136b2 <rshift+0x96>
 8013648:	1a9b      	subs	r3, r3, r2
 801364a:	009b      	lsls	r3, r3, #2
 801364c:	1eea      	subs	r2, r5, #3
 801364e:	4296      	cmp	r6, r2
 8013650:	bf38      	it	cc
 8013652:	2300      	movcc	r3, #0
 8013654:	4423      	add	r3, r4
 8013656:	e015      	b.n	8013684 <rshift+0x68>
 8013658:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801365c:	f1c1 0820 	rsb	r8, r1, #32
 8013660:	40cf      	lsrs	r7, r1
 8013662:	f105 0e04 	add.w	lr, r5, #4
 8013666:	46a1      	mov	r9, r4
 8013668:	4576      	cmp	r6, lr
 801366a:	46f4      	mov	ip, lr
 801366c:	d815      	bhi.n	801369a <rshift+0x7e>
 801366e:	1a9a      	subs	r2, r3, r2
 8013670:	0092      	lsls	r2, r2, #2
 8013672:	3a04      	subs	r2, #4
 8013674:	3501      	adds	r5, #1
 8013676:	42ae      	cmp	r6, r5
 8013678:	bf38      	it	cc
 801367a:	2200      	movcc	r2, #0
 801367c:	18a3      	adds	r3, r4, r2
 801367e:	50a7      	str	r7, [r4, r2]
 8013680:	b107      	cbz	r7, 8013684 <rshift+0x68>
 8013682:	3304      	adds	r3, #4
 8013684:	1b1a      	subs	r2, r3, r4
 8013686:	42a3      	cmp	r3, r4
 8013688:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801368c:	bf08      	it	eq
 801368e:	2300      	moveq	r3, #0
 8013690:	6102      	str	r2, [r0, #16]
 8013692:	bf08      	it	eq
 8013694:	6143      	streq	r3, [r0, #20]
 8013696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801369a:	f8dc c000 	ldr.w	ip, [ip]
 801369e:	fa0c fc08 	lsl.w	ip, ip, r8
 80136a2:	ea4c 0707 	orr.w	r7, ip, r7
 80136a6:	f849 7b04 	str.w	r7, [r9], #4
 80136aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80136ae:	40cf      	lsrs	r7, r1
 80136b0:	e7da      	b.n	8013668 <rshift+0x4c>
 80136b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80136b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80136ba:	e7c3      	b.n	8013644 <rshift+0x28>
 80136bc:	4623      	mov	r3, r4
 80136be:	e7e1      	b.n	8013684 <rshift+0x68>

080136c0 <__hexdig_fun>:
 80136c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80136c4:	2b09      	cmp	r3, #9
 80136c6:	d802      	bhi.n	80136ce <__hexdig_fun+0xe>
 80136c8:	3820      	subs	r0, #32
 80136ca:	b2c0      	uxtb	r0, r0
 80136cc:	4770      	bx	lr
 80136ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80136d2:	2b05      	cmp	r3, #5
 80136d4:	d801      	bhi.n	80136da <__hexdig_fun+0x1a>
 80136d6:	3847      	subs	r0, #71	; 0x47
 80136d8:	e7f7      	b.n	80136ca <__hexdig_fun+0xa>
 80136da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80136de:	2b05      	cmp	r3, #5
 80136e0:	d801      	bhi.n	80136e6 <__hexdig_fun+0x26>
 80136e2:	3827      	subs	r0, #39	; 0x27
 80136e4:	e7f1      	b.n	80136ca <__hexdig_fun+0xa>
 80136e6:	2000      	movs	r0, #0
 80136e8:	4770      	bx	lr
	...

080136ec <__gethex>:
 80136ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136f0:	4617      	mov	r7, r2
 80136f2:	680a      	ldr	r2, [r1, #0]
 80136f4:	b085      	sub	sp, #20
 80136f6:	f102 0b02 	add.w	fp, r2, #2
 80136fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80136fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013702:	4681      	mov	r9, r0
 8013704:	468a      	mov	sl, r1
 8013706:	9302      	str	r3, [sp, #8]
 8013708:	32fe      	adds	r2, #254	; 0xfe
 801370a:	eb02 030b 	add.w	r3, r2, fp
 801370e:	46d8      	mov	r8, fp
 8013710:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8013714:	9301      	str	r3, [sp, #4]
 8013716:	2830      	cmp	r0, #48	; 0x30
 8013718:	d0f7      	beq.n	801370a <__gethex+0x1e>
 801371a:	f7ff ffd1 	bl	80136c0 <__hexdig_fun>
 801371e:	4604      	mov	r4, r0
 8013720:	2800      	cmp	r0, #0
 8013722:	d138      	bne.n	8013796 <__gethex+0xaa>
 8013724:	49a7      	ldr	r1, [pc, #668]	; (80139c4 <__gethex+0x2d8>)
 8013726:	2201      	movs	r2, #1
 8013728:	4640      	mov	r0, r8
 801372a:	f7fe ff62 	bl	80125f2 <strncmp>
 801372e:	4606      	mov	r6, r0
 8013730:	2800      	cmp	r0, #0
 8013732:	d169      	bne.n	8013808 <__gethex+0x11c>
 8013734:	f898 0001 	ldrb.w	r0, [r8, #1]
 8013738:	465d      	mov	r5, fp
 801373a:	f7ff ffc1 	bl	80136c0 <__hexdig_fun>
 801373e:	2800      	cmp	r0, #0
 8013740:	d064      	beq.n	801380c <__gethex+0x120>
 8013742:	465a      	mov	r2, fp
 8013744:	7810      	ldrb	r0, [r2, #0]
 8013746:	2830      	cmp	r0, #48	; 0x30
 8013748:	4690      	mov	r8, r2
 801374a:	f102 0201 	add.w	r2, r2, #1
 801374e:	d0f9      	beq.n	8013744 <__gethex+0x58>
 8013750:	f7ff ffb6 	bl	80136c0 <__hexdig_fun>
 8013754:	2301      	movs	r3, #1
 8013756:	fab0 f480 	clz	r4, r0
 801375a:	0964      	lsrs	r4, r4, #5
 801375c:	465e      	mov	r6, fp
 801375e:	9301      	str	r3, [sp, #4]
 8013760:	4642      	mov	r2, r8
 8013762:	4615      	mov	r5, r2
 8013764:	3201      	adds	r2, #1
 8013766:	7828      	ldrb	r0, [r5, #0]
 8013768:	f7ff ffaa 	bl	80136c0 <__hexdig_fun>
 801376c:	2800      	cmp	r0, #0
 801376e:	d1f8      	bne.n	8013762 <__gethex+0x76>
 8013770:	4994      	ldr	r1, [pc, #592]	; (80139c4 <__gethex+0x2d8>)
 8013772:	2201      	movs	r2, #1
 8013774:	4628      	mov	r0, r5
 8013776:	f7fe ff3c 	bl	80125f2 <strncmp>
 801377a:	b978      	cbnz	r0, 801379c <__gethex+0xb0>
 801377c:	b946      	cbnz	r6, 8013790 <__gethex+0xa4>
 801377e:	1c6e      	adds	r6, r5, #1
 8013780:	4632      	mov	r2, r6
 8013782:	4615      	mov	r5, r2
 8013784:	3201      	adds	r2, #1
 8013786:	7828      	ldrb	r0, [r5, #0]
 8013788:	f7ff ff9a 	bl	80136c0 <__hexdig_fun>
 801378c:	2800      	cmp	r0, #0
 801378e:	d1f8      	bne.n	8013782 <__gethex+0x96>
 8013790:	1b73      	subs	r3, r6, r5
 8013792:	009e      	lsls	r6, r3, #2
 8013794:	e004      	b.n	80137a0 <__gethex+0xb4>
 8013796:	2400      	movs	r4, #0
 8013798:	4626      	mov	r6, r4
 801379a:	e7e1      	b.n	8013760 <__gethex+0x74>
 801379c:	2e00      	cmp	r6, #0
 801379e:	d1f7      	bne.n	8013790 <__gethex+0xa4>
 80137a0:	782b      	ldrb	r3, [r5, #0]
 80137a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80137a6:	2b50      	cmp	r3, #80	; 0x50
 80137a8:	d13d      	bne.n	8013826 <__gethex+0x13a>
 80137aa:	786b      	ldrb	r3, [r5, #1]
 80137ac:	2b2b      	cmp	r3, #43	; 0x2b
 80137ae:	d02f      	beq.n	8013810 <__gethex+0x124>
 80137b0:	2b2d      	cmp	r3, #45	; 0x2d
 80137b2:	d031      	beq.n	8013818 <__gethex+0x12c>
 80137b4:	1c69      	adds	r1, r5, #1
 80137b6:	f04f 0b00 	mov.w	fp, #0
 80137ba:	7808      	ldrb	r0, [r1, #0]
 80137bc:	f7ff ff80 	bl	80136c0 <__hexdig_fun>
 80137c0:	1e42      	subs	r2, r0, #1
 80137c2:	b2d2      	uxtb	r2, r2
 80137c4:	2a18      	cmp	r2, #24
 80137c6:	d82e      	bhi.n	8013826 <__gethex+0x13a>
 80137c8:	f1a0 0210 	sub.w	r2, r0, #16
 80137cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80137d0:	f7ff ff76 	bl	80136c0 <__hexdig_fun>
 80137d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80137d8:	fa5f fc8c 	uxtb.w	ip, ip
 80137dc:	f1bc 0f18 	cmp.w	ip, #24
 80137e0:	d91d      	bls.n	801381e <__gethex+0x132>
 80137e2:	f1bb 0f00 	cmp.w	fp, #0
 80137e6:	d000      	beq.n	80137ea <__gethex+0xfe>
 80137e8:	4252      	negs	r2, r2
 80137ea:	4416      	add	r6, r2
 80137ec:	f8ca 1000 	str.w	r1, [sl]
 80137f0:	b1dc      	cbz	r4, 801382a <__gethex+0x13e>
 80137f2:	9b01      	ldr	r3, [sp, #4]
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	bf14      	ite	ne
 80137f8:	f04f 0800 	movne.w	r8, #0
 80137fc:	f04f 0806 	moveq.w	r8, #6
 8013800:	4640      	mov	r0, r8
 8013802:	b005      	add	sp, #20
 8013804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013808:	4645      	mov	r5, r8
 801380a:	4626      	mov	r6, r4
 801380c:	2401      	movs	r4, #1
 801380e:	e7c7      	b.n	80137a0 <__gethex+0xb4>
 8013810:	f04f 0b00 	mov.w	fp, #0
 8013814:	1ca9      	adds	r1, r5, #2
 8013816:	e7d0      	b.n	80137ba <__gethex+0xce>
 8013818:	f04f 0b01 	mov.w	fp, #1
 801381c:	e7fa      	b.n	8013814 <__gethex+0x128>
 801381e:	230a      	movs	r3, #10
 8013820:	fb03 0002 	mla	r0, r3, r2, r0
 8013824:	e7d0      	b.n	80137c8 <__gethex+0xdc>
 8013826:	4629      	mov	r1, r5
 8013828:	e7e0      	b.n	80137ec <__gethex+0x100>
 801382a:	eba5 0308 	sub.w	r3, r5, r8
 801382e:	3b01      	subs	r3, #1
 8013830:	4621      	mov	r1, r4
 8013832:	2b07      	cmp	r3, #7
 8013834:	dc0a      	bgt.n	801384c <__gethex+0x160>
 8013836:	4648      	mov	r0, r9
 8013838:	f000 fa5a 	bl	8013cf0 <_Balloc>
 801383c:	4604      	mov	r4, r0
 801383e:	b940      	cbnz	r0, 8013852 <__gethex+0x166>
 8013840:	4b61      	ldr	r3, [pc, #388]	; (80139c8 <__gethex+0x2dc>)
 8013842:	4602      	mov	r2, r0
 8013844:	21e4      	movs	r1, #228	; 0xe4
 8013846:	4861      	ldr	r0, [pc, #388]	; (80139cc <__gethex+0x2e0>)
 8013848:	f7ff f804 	bl	8012854 <__assert_func>
 801384c:	3101      	adds	r1, #1
 801384e:	105b      	asrs	r3, r3, #1
 8013850:	e7ef      	b.n	8013832 <__gethex+0x146>
 8013852:	f100 0a14 	add.w	sl, r0, #20
 8013856:	2300      	movs	r3, #0
 8013858:	495a      	ldr	r1, [pc, #360]	; (80139c4 <__gethex+0x2d8>)
 801385a:	f8cd a004 	str.w	sl, [sp, #4]
 801385e:	469b      	mov	fp, r3
 8013860:	45a8      	cmp	r8, r5
 8013862:	d342      	bcc.n	80138ea <__gethex+0x1fe>
 8013864:	9801      	ldr	r0, [sp, #4]
 8013866:	f840 bb04 	str.w	fp, [r0], #4
 801386a:	eba0 000a 	sub.w	r0, r0, sl
 801386e:	1080      	asrs	r0, r0, #2
 8013870:	6120      	str	r0, [r4, #16]
 8013872:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8013876:	4658      	mov	r0, fp
 8013878:	f000 fb2c 	bl	8013ed4 <__hi0bits>
 801387c:	683d      	ldr	r5, [r7, #0]
 801387e:	eba8 0000 	sub.w	r0, r8, r0
 8013882:	42a8      	cmp	r0, r5
 8013884:	dd59      	ble.n	801393a <__gethex+0x24e>
 8013886:	eba0 0805 	sub.w	r8, r0, r5
 801388a:	4641      	mov	r1, r8
 801388c:	4620      	mov	r0, r4
 801388e:	f000 febb 	bl	8014608 <__any_on>
 8013892:	4683      	mov	fp, r0
 8013894:	b1b8      	cbz	r0, 80138c6 <__gethex+0x1da>
 8013896:	f108 33ff 	add.w	r3, r8, #4294967295
 801389a:	1159      	asrs	r1, r3, #5
 801389c:	f003 021f 	and.w	r2, r3, #31
 80138a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80138a4:	f04f 0b01 	mov.w	fp, #1
 80138a8:	fa0b f202 	lsl.w	r2, fp, r2
 80138ac:	420a      	tst	r2, r1
 80138ae:	d00a      	beq.n	80138c6 <__gethex+0x1da>
 80138b0:	455b      	cmp	r3, fp
 80138b2:	dd06      	ble.n	80138c2 <__gethex+0x1d6>
 80138b4:	f1a8 0102 	sub.w	r1, r8, #2
 80138b8:	4620      	mov	r0, r4
 80138ba:	f000 fea5 	bl	8014608 <__any_on>
 80138be:	2800      	cmp	r0, #0
 80138c0:	d138      	bne.n	8013934 <__gethex+0x248>
 80138c2:	f04f 0b02 	mov.w	fp, #2
 80138c6:	4641      	mov	r1, r8
 80138c8:	4620      	mov	r0, r4
 80138ca:	f7ff fea7 	bl	801361c <rshift>
 80138ce:	4446      	add	r6, r8
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	42b3      	cmp	r3, r6
 80138d4:	da41      	bge.n	801395a <__gethex+0x26e>
 80138d6:	4621      	mov	r1, r4
 80138d8:	4648      	mov	r0, r9
 80138da:	f000 fa49 	bl	8013d70 <_Bfree>
 80138de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80138e0:	2300      	movs	r3, #0
 80138e2:	6013      	str	r3, [r2, #0]
 80138e4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80138e8:	e78a      	b.n	8013800 <__gethex+0x114>
 80138ea:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80138ee:	2a2e      	cmp	r2, #46	; 0x2e
 80138f0:	d014      	beq.n	801391c <__gethex+0x230>
 80138f2:	2b20      	cmp	r3, #32
 80138f4:	d106      	bne.n	8013904 <__gethex+0x218>
 80138f6:	9b01      	ldr	r3, [sp, #4]
 80138f8:	f843 bb04 	str.w	fp, [r3], #4
 80138fc:	f04f 0b00 	mov.w	fp, #0
 8013900:	9301      	str	r3, [sp, #4]
 8013902:	465b      	mov	r3, fp
 8013904:	7828      	ldrb	r0, [r5, #0]
 8013906:	9303      	str	r3, [sp, #12]
 8013908:	f7ff feda 	bl	80136c0 <__hexdig_fun>
 801390c:	9b03      	ldr	r3, [sp, #12]
 801390e:	f000 000f 	and.w	r0, r0, #15
 8013912:	4098      	lsls	r0, r3
 8013914:	ea4b 0b00 	orr.w	fp, fp, r0
 8013918:	3304      	adds	r3, #4
 801391a:	e7a1      	b.n	8013860 <__gethex+0x174>
 801391c:	45a8      	cmp	r8, r5
 801391e:	d8e8      	bhi.n	80138f2 <__gethex+0x206>
 8013920:	2201      	movs	r2, #1
 8013922:	4628      	mov	r0, r5
 8013924:	9303      	str	r3, [sp, #12]
 8013926:	f7fe fe64 	bl	80125f2 <strncmp>
 801392a:	4926      	ldr	r1, [pc, #152]	; (80139c4 <__gethex+0x2d8>)
 801392c:	9b03      	ldr	r3, [sp, #12]
 801392e:	2800      	cmp	r0, #0
 8013930:	d1df      	bne.n	80138f2 <__gethex+0x206>
 8013932:	e795      	b.n	8013860 <__gethex+0x174>
 8013934:	f04f 0b03 	mov.w	fp, #3
 8013938:	e7c5      	b.n	80138c6 <__gethex+0x1da>
 801393a:	da0b      	bge.n	8013954 <__gethex+0x268>
 801393c:	eba5 0800 	sub.w	r8, r5, r0
 8013940:	4621      	mov	r1, r4
 8013942:	4642      	mov	r2, r8
 8013944:	4648      	mov	r0, r9
 8013946:	f000 fc2d 	bl	80141a4 <__lshift>
 801394a:	eba6 0608 	sub.w	r6, r6, r8
 801394e:	4604      	mov	r4, r0
 8013950:	f100 0a14 	add.w	sl, r0, #20
 8013954:	f04f 0b00 	mov.w	fp, #0
 8013958:	e7ba      	b.n	80138d0 <__gethex+0x1e4>
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	42b3      	cmp	r3, r6
 801395e:	dd73      	ble.n	8013a48 <__gethex+0x35c>
 8013960:	1b9e      	subs	r6, r3, r6
 8013962:	42b5      	cmp	r5, r6
 8013964:	dc34      	bgt.n	80139d0 <__gethex+0x2e4>
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	2b02      	cmp	r3, #2
 801396a:	d023      	beq.n	80139b4 <__gethex+0x2c8>
 801396c:	2b03      	cmp	r3, #3
 801396e:	d025      	beq.n	80139bc <__gethex+0x2d0>
 8013970:	2b01      	cmp	r3, #1
 8013972:	d115      	bne.n	80139a0 <__gethex+0x2b4>
 8013974:	42b5      	cmp	r5, r6
 8013976:	d113      	bne.n	80139a0 <__gethex+0x2b4>
 8013978:	2d01      	cmp	r5, #1
 801397a:	d10b      	bne.n	8013994 <__gethex+0x2a8>
 801397c:	9a02      	ldr	r2, [sp, #8]
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	6013      	str	r3, [r2, #0]
 8013982:	2301      	movs	r3, #1
 8013984:	6123      	str	r3, [r4, #16]
 8013986:	f8ca 3000 	str.w	r3, [sl]
 801398a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801398c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8013990:	601c      	str	r4, [r3, #0]
 8013992:	e735      	b.n	8013800 <__gethex+0x114>
 8013994:	1e69      	subs	r1, r5, #1
 8013996:	4620      	mov	r0, r4
 8013998:	f000 fe36 	bl	8014608 <__any_on>
 801399c:	2800      	cmp	r0, #0
 801399e:	d1ed      	bne.n	801397c <__gethex+0x290>
 80139a0:	4621      	mov	r1, r4
 80139a2:	4648      	mov	r0, r9
 80139a4:	f000 f9e4 	bl	8013d70 <_Bfree>
 80139a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80139aa:	2300      	movs	r3, #0
 80139ac:	6013      	str	r3, [r2, #0]
 80139ae:	f04f 0850 	mov.w	r8, #80	; 0x50
 80139b2:	e725      	b.n	8013800 <__gethex+0x114>
 80139b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d1f2      	bne.n	80139a0 <__gethex+0x2b4>
 80139ba:	e7df      	b.n	801397c <__gethex+0x290>
 80139bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d1dc      	bne.n	801397c <__gethex+0x290>
 80139c2:	e7ed      	b.n	80139a0 <__gethex+0x2b4>
 80139c4:	0801825c 	.word	0x0801825c
 80139c8:	08018504 	.word	0x08018504
 80139cc:	08018515 	.word	0x08018515
 80139d0:	f106 38ff 	add.w	r8, r6, #4294967295
 80139d4:	f1bb 0f00 	cmp.w	fp, #0
 80139d8:	d133      	bne.n	8013a42 <__gethex+0x356>
 80139da:	f1b8 0f00 	cmp.w	r8, #0
 80139de:	d004      	beq.n	80139ea <__gethex+0x2fe>
 80139e0:	4641      	mov	r1, r8
 80139e2:	4620      	mov	r0, r4
 80139e4:	f000 fe10 	bl	8014608 <__any_on>
 80139e8:	4683      	mov	fp, r0
 80139ea:	ea4f 1268 	mov.w	r2, r8, asr #5
 80139ee:	2301      	movs	r3, #1
 80139f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80139f4:	f008 081f 	and.w	r8, r8, #31
 80139f8:	fa03 f308 	lsl.w	r3, r3, r8
 80139fc:	4213      	tst	r3, r2
 80139fe:	4631      	mov	r1, r6
 8013a00:	4620      	mov	r0, r4
 8013a02:	bf18      	it	ne
 8013a04:	f04b 0b02 	orrne.w	fp, fp, #2
 8013a08:	1bad      	subs	r5, r5, r6
 8013a0a:	f7ff fe07 	bl	801361c <rshift>
 8013a0e:	687e      	ldr	r6, [r7, #4]
 8013a10:	f04f 0802 	mov.w	r8, #2
 8013a14:	f1bb 0f00 	cmp.w	fp, #0
 8013a18:	d04a      	beq.n	8013ab0 <__gethex+0x3c4>
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	2b02      	cmp	r3, #2
 8013a1e:	d016      	beq.n	8013a4e <__gethex+0x362>
 8013a20:	2b03      	cmp	r3, #3
 8013a22:	d018      	beq.n	8013a56 <__gethex+0x36a>
 8013a24:	2b01      	cmp	r3, #1
 8013a26:	d109      	bne.n	8013a3c <__gethex+0x350>
 8013a28:	f01b 0f02 	tst.w	fp, #2
 8013a2c:	d006      	beq.n	8013a3c <__gethex+0x350>
 8013a2e:	f8da 3000 	ldr.w	r3, [sl]
 8013a32:	ea4b 0b03 	orr.w	fp, fp, r3
 8013a36:	f01b 0f01 	tst.w	fp, #1
 8013a3a:	d10f      	bne.n	8013a5c <__gethex+0x370>
 8013a3c:	f048 0810 	orr.w	r8, r8, #16
 8013a40:	e036      	b.n	8013ab0 <__gethex+0x3c4>
 8013a42:	f04f 0b01 	mov.w	fp, #1
 8013a46:	e7d0      	b.n	80139ea <__gethex+0x2fe>
 8013a48:	f04f 0801 	mov.w	r8, #1
 8013a4c:	e7e2      	b.n	8013a14 <__gethex+0x328>
 8013a4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013a50:	f1c3 0301 	rsb	r3, r3, #1
 8013a54:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d0ef      	beq.n	8013a3c <__gethex+0x350>
 8013a5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8013a60:	f104 0214 	add.w	r2, r4, #20
 8013a64:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8013a68:	9301      	str	r3, [sp, #4]
 8013a6a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8013a6e:	2300      	movs	r3, #0
 8013a70:	4694      	mov	ip, r2
 8013a72:	f852 1b04 	ldr.w	r1, [r2], #4
 8013a76:	f1b1 3fff 	cmp.w	r1, #4294967295
 8013a7a:	d01e      	beq.n	8013aba <__gethex+0x3ce>
 8013a7c:	3101      	adds	r1, #1
 8013a7e:	f8cc 1000 	str.w	r1, [ip]
 8013a82:	f1b8 0f02 	cmp.w	r8, #2
 8013a86:	f104 0214 	add.w	r2, r4, #20
 8013a8a:	d13d      	bne.n	8013b08 <__gethex+0x41c>
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	3b01      	subs	r3, #1
 8013a90:	42ab      	cmp	r3, r5
 8013a92:	d10b      	bne.n	8013aac <__gethex+0x3c0>
 8013a94:	1169      	asrs	r1, r5, #5
 8013a96:	2301      	movs	r3, #1
 8013a98:	f005 051f 	and.w	r5, r5, #31
 8013a9c:	fa03 f505 	lsl.w	r5, r3, r5
 8013aa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013aa4:	421d      	tst	r5, r3
 8013aa6:	bf18      	it	ne
 8013aa8:	f04f 0801 	movne.w	r8, #1
 8013aac:	f048 0820 	orr.w	r8, r8, #32
 8013ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ab2:	601c      	str	r4, [r3, #0]
 8013ab4:	9b02      	ldr	r3, [sp, #8]
 8013ab6:	601e      	str	r6, [r3, #0]
 8013ab8:	e6a2      	b.n	8013800 <__gethex+0x114>
 8013aba:	4290      	cmp	r0, r2
 8013abc:	f842 3c04 	str.w	r3, [r2, #-4]
 8013ac0:	d8d6      	bhi.n	8013a70 <__gethex+0x384>
 8013ac2:	68a2      	ldr	r2, [r4, #8]
 8013ac4:	4593      	cmp	fp, r2
 8013ac6:	db17      	blt.n	8013af8 <__gethex+0x40c>
 8013ac8:	6861      	ldr	r1, [r4, #4]
 8013aca:	4648      	mov	r0, r9
 8013acc:	3101      	adds	r1, #1
 8013ace:	f000 f90f 	bl	8013cf0 <_Balloc>
 8013ad2:	4682      	mov	sl, r0
 8013ad4:	b918      	cbnz	r0, 8013ade <__gethex+0x3f2>
 8013ad6:	4b1b      	ldr	r3, [pc, #108]	; (8013b44 <__gethex+0x458>)
 8013ad8:	4602      	mov	r2, r0
 8013ada:	2184      	movs	r1, #132	; 0x84
 8013adc:	e6b3      	b.n	8013846 <__gethex+0x15a>
 8013ade:	6922      	ldr	r2, [r4, #16]
 8013ae0:	3202      	adds	r2, #2
 8013ae2:	f104 010c 	add.w	r1, r4, #12
 8013ae6:	0092      	lsls	r2, r2, #2
 8013ae8:	300c      	adds	r0, #12
 8013aea:	f7fe fe96 	bl	801281a <memcpy>
 8013aee:	4621      	mov	r1, r4
 8013af0:	4648      	mov	r0, r9
 8013af2:	f000 f93d 	bl	8013d70 <_Bfree>
 8013af6:	4654      	mov	r4, sl
 8013af8:	6922      	ldr	r2, [r4, #16]
 8013afa:	1c51      	adds	r1, r2, #1
 8013afc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013b00:	6121      	str	r1, [r4, #16]
 8013b02:	2101      	movs	r1, #1
 8013b04:	6151      	str	r1, [r2, #20]
 8013b06:	e7bc      	b.n	8013a82 <__gethex+0x396>
 8013b08:	6921      	ldr	r1, [r4, #16]
 8013b0a:	4559      	cmp	r1, fp
 8013b0c:	dd0b      	ble.n	8013b26 <__gethex+0x43a>
 8013b0e:	2101      	movs	r1, #1
 8013b10:	4620      	mov	r0, r4
 8013b12:	f7ff fd83 	bl	801361c <rshift>
 8013b16:	68bb      	ldr	r3, [r7, #8]
 8013b18:	3601      	adds	r6, #1
 8013b1a:	42b3      	cmp	r3, r6
 8013b1c:	f6ff aedb 	blt.w	80138d6 <__gethex+0x1ea>
 8013b20:	f04f 0801 	mov.w	r8, #1
 8013b24:	e7c2      	b.n	8013aac <__gethex+0x3c0>
 8013b26:	f015 051f 	ands.w	r5, r5, #31
 8013b2a:	d0f9      	beq.n	8013b20 <__gethex+0x434>
 8013b2c:	9b01      	ldr	r3, [sp, #4]
 8013b2e:	441a      	add	r2, r3
 8013b30:	f1c5 0520 	rsb	r5, r5, #32
 8013b34:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8013b38:	f000 f9cc 	bl	8013ed4 <__hi0bits>
 8013b3c:	42a8      	cmp	r0, r5
 8013b3e:	dbe6      	blt.n	8013b0e <__gethex+0x422>
 8013b40:	e7ee      	b.n	8013b20 <__gethex+0x434>
 8013b42:	bf00      	nop
 8013b44:	08018504 	.word	0x08018504

08013b48 <L_shift>:
 8013b48:	f1c2 0208 	rsb	r2, r2, #8
 8013b4c:	0092      	lsls	r2, r2, #2
 8013b4e:	b570      	push	{r4, r5, r6, lr}
 8013b50:	f1c2 0620 	rsb	r6, r2, #32
 8013b54:	6843      	ldr	r3, [r0, #4]
 8013b56:	6804      	ldr	r4, [r0, #0]
 8013b58:	fa03 f506 	lsl.w	r5, r3, r6
 8013b5c:	432c      	orrs	r4, r5
 8013b5e:	40d3      	lsrs	r3, r2
 8013b60:	6004      	str	r4, [r0, #0]
 8013b62:	f840 3f04 	str.w	r3, [r0, #4]!
 8013b66:	4288      	cmp	r0, r1
 8013b68:	d3f4      	bcc.n	8013b54 <L_shift+0xc>
 8013b6a:	bd70      	pop	{r4, r5, r6, pc}

08013b6c <__match>:
 8013b6c:	b530      	push	{r4, r5, lr}
 8013b6e:	6803      	ldr	r3, [r0, #0]
 8013b70:	3301      	adds	r3, #1
 8013b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b76:	b914      	cbnz	r4, 8013b7e <__match+0x12>
 8013b78:	6003      	str	r3, [r0, #0]
 8013b7a:	2001      	movs	r0, #1
 8013b7c:	bd30      	pop	{r4, r5, pc}
 8013b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013b86:	2d19      	cmp	r5, #25
 8013b88:	bf98      	it	ls
 8013b8a:	3220      	addls	r2, #32
 8013b8c:	42a2      	cmp	r2, r4
 8013b8e:	d0f0      	beq.n	8013b72 <__match+0x6>
 8013b90:	2000      	movs	r0, #0
 8013b92:	e7f3      	b.n	8013b7c <__match+0x10>

08013b94 <__hexnan>:
 8013b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b98:	680b      	ldr	r3, [r1, #0]
 8013b9a:	6801      	ldr	r1, [r0, #0]
 8013b9c:	115e      	asrs	r6, r3, #5
 8013b9e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013ba2:	f013 031f 	ands.w	r3, r3, #31
 8013ba6:	b087      	sub	sp, #28
 8013ba8:	bf18      	it	ne
 8013baa:	3604      	addne	r6, #4
 8013bac:	2500      	movs	r5, #0
 8013bae:	1f37      	subs	r7, r6, #4
 8013bb0:	4682      	mov	sl, r0
 8013bb2:	4690      	mov	r8, r2
 8013bb4:	9301      	str	r3, [sp, #4]
 8013bb6:	f846 5c04 	str.w	r5, [r6, #-4]
 8013bba:	46b9      	mov	r9, r7
 8013bbc:	463c      	mov	r4, r7
 8013bbe:	9502      	str	r5, [sp, #8]
 8013bc0:	46ab      	mov	fp, r5
 8013bc2:	784a      	ldrb	r2, [r1, #1]
 8013bc4:	1c4b      	adds	r3, r1, #1
 8013bc6:	9303      	str	r3, [sp, #12]
 8013bc8:	b342      	cbz	r2, 8013c1c <__hexnan+0x88>
 8013bca:	4610      	mov	r0, r2
 8013bcc:	9105      	str	r1, [sp, #20]
 8013bce:	9204      	str	r2, [sp, #16]
 8013bd0:	f7ff fd76 	bl	80136c0 <__hexdig_fun>
 8013bd4:	2800      	cmp	r0, #0
 8013bd6:	d14f      	bne.n	8013c78 <__hexnan+0xe4>
 8013bd8:	9a04      	ldr	r2, [sp, #16]
 8013bda:	9905      	ldr	r1, [sp, #20]
 8013bdc:	2a20      	cmp	r2, #32
 8013bde:	d818      	bhi.n	8013c12 <__hexnan+0x7e>
 8013be0:	9b02      	ldr	r3, [sp, #8]
 8013be2:	459b      	cmp	fp, r3
 8013be4:	dd13      	ble.n	8013c0e <__hexnan+0x7a>
 8013be6:	454c      	cmp	r4, r9
 8013be8:	d206      	bcs.n	8013bf8 <__hexnan+0x64>
 8013bea:	2d07      	cmp	r5, #7
 8013bec:	dc04      	bgt.n	8013bf8 <__hexnan+0x64>
 8013bee:	462a      	mov	r2, r5
 8013bf0:	4649      	mov	r1, r9
 8013bf2:	4620      	mov	r0, r4
 8013bf4:	f7ff ffa8 	bl	8013b48 <L_shift>
 8013bf8:	4544      	cmp	r4, r8
 8013bfa:	d950      	bls.n	8013c9e <__hexnan+0x10a>
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	f1a4 0904 	sub.w	r9, r4, #4
 8013c02:	f844 3c04 	str.w	r3, [r4, #-4]
 8013c06:	f8cd b008 	str.w	fp, [sp, #8]
 8013c0a:	464c      	mov	r4, r9
 8013c0c:	461d      	mov	r5, r3
 8013c0e:	9903      	ldr	r1, [sp, #12]
 8013c10:	e7d7      	b.n	8013bc2 <__hexnan+0x2e>
 8013c12:	2a29      	cmp	r2, #41	; 0x29
 8013c14:	d155      	bne.n	8013cc2 <__hexnan+0x12e>
 8013c16:	3102      	adds	r1, #2
 8013c18:	f8ca 1000 	str.w	r1, [sl]
 8013c1c:	f1bb 0f00 	cmp.w	fp, #0
 8013c20:	d04f      	beq.n	8013cc2 <__hexnan+0x12e>
 8013c22:	454c      	cmp	r4, r9
 8013c24:	d206      	bcs.n	8013c34 <__hexnan+0xa0>
 8013c26:	2d07      	cmp	r5, #7
 8013c28:	dc04      	bgt.n	8013c34 <__hexnan+0xa0>
 8013c2a:	462a      	mov	r2, r5
 8013c2c:	4649      	mov	r1, r9
 8013c2e:	4620      	mov	r0, r4
 8013c30:	f7ff ff8a 	bl	8013b48 <L_shift>
 8013c34:	4544      	cmp	r4, r8
 8013c36:	d934      	bls.n	8013ca2 <__hexnan+0x10e>
 8013c38:	f1a8 0204 	sub.w	r2, r8, #4
 8013c3c:	4623      	mov	r3, r4
 8013c3e:	f853 1b04 	ldr.w	r1, [r3], #4
 8013c42:	f842 1f04 	str.w	r1, [r2, #4]!
 8013c46:	429f      	cmp	r7, r3
 8013c48:	d2f9      	bcs.n	8013c3e <__hexnan+0xaa>
 8013c4a:	1b3b      	subs	r3, r7, r4
 8013c4c:	f023 0303 	bic.w	r3, r3, #3
 8013c50:	3304      	adds	r3, #4
 8013c52:	3e03      	subs	r6, #3
 8013c54:	3401      	adds	r4, #1
 8013c56:	42a6      	cmp	r6, r4
 8013c58:	bf38      	it	cc
 8013c5a:	2304      	movcc	r3, #4
 8013c5c:	4443      	add	r3, r8
 8013c5e:	2200      	movs	r2, #0
 8013c60:	f843 2b04 	str.w	r2, [r3], #4
 8013c64:	429f      	cmp	r7, r3
 8013c66:	d2fb      	bcs.n	8013c60 <__hexnan+0xcc>
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	b91b      	cbnz	r3, 8013c74 <__hexnan+0xe0>
 8013c6c:	4547      	cmp	r7, r8
 8013c6e:	d126      	bne.n	8013cbe <__hexnan+0x12a>
 8013c70:	2301      	movs	r3, #1
 8013c72:	603b      	str	r3, [r7, #0]
 8013c74:	2005      	movs	r0, #5
 8013c76:	e025      	b.n	8013cc4 <__hexnan+0x130>
 8013c78:	3501      	adds	r5, #1
 8013c7a:	2d08      	cmp	r5, #8
 8013c7c:	f10b 0b01 	add.w	fp, fp, #1
 8013c80:	dd06      	ble.n	8013c90 <__hexnan+0xfc>
 8013c82:	4544      	cmp	r4, r8
 8013c84:	d9c3      	bls.n	8013c0e <__hexnan+0x7a>
 8013c86:	2300      	movs	r3, #0
 8013c88:	f844 3c04 	str.w	r3, [r4, #-4]
 8013c8c:	2501      	movs	r5, #1
 8013c8e:	3c04      	subs	r4, #4
 8013c90:	6822      	ldr	r2, [r4, #0]
 8013c92:	f000 000f 	and.w	r0, r0, #15
 8013c96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013c9a:	6020      	str	r0, [r4, #0]
 8013c9c:	e7b7      	b.n	8013c0e <__hexnan+0x7a>
 8013c9e:	2508      	movs	r5, #8
 8013ca0:	e7b5      	b.n	8013c0e <__hexnan+0x7a>
 8013ca2:	9b01      	ldr	r3, [sp, #4]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d0df      	beq.n	8013c68 <__hexnan+0xd4>
 8013ca8:	f1c3 0320 	rsb	r3, r3, #32
 8013cac:	f04f 32ff 	mov.w	r2, #4294967295
 8013cb0:	40da      	lsrs	r2, r3
 8013cb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013cb6:	4013      	ands	r3, r2
 8013cb8:	f846 3c04 	str.w	r3, [r6, #-4]
 8013cbc:	e7d4      	b.n	8013c68 <__hexnan+0xd4>
 8013cbe:	3f04      	subs	r7, #4
 8013cc0:	e7d2      	b.n	8013c68 <__hexnan+0xd4>
 8013cc2:	2004      	movs	r0, #4
 8013cc4:	b007      	add	sp, #28
 8013cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013cca <__ascii_mbtowc>:
 8013cca:	b082      	sub	sp, #8
 8013ccc:	b901      	cbnz	r1, 8013cd0 <__ascii_mbtowc+0x6>
 8013cce:	a901      	add	r1, sp, #4
 8013cd0:	b142      	cbz	r2, 8013ce4 <__ascii_mbtowc+0x1a>
 8013cd2:	b14b      	cbz	r3, 8013ce8 <__ascii_mbtowc+0x1e>
 8013cd4:	7813      	ldrb	r3, [r2, #0]
 8013cd6:	600b      	str	r3, [r1, #0]
 8013cd8:	7812      	ldrb	r2, [r2, #0]
 8013cda:	1e10      	subs	r0, r2, #0
 8013cdc:	bf18      	it	ne
 8013cde:	2001      	movne	r0, #1
 8013ce0:	b002      	add	sp, #8
 8013ce2:	4770      	bx	lr
 8013ce4:	4610      	mov	r0, r2
 8013ce6:	e7fb      	b.n	8013ce0 <__ascii_mbtowc+0x16>
 8013ce8:	f06f 0001 	mvn.w	r0, #1
 8013cec:	e7f8      	b.n	8013ce0 <__ascii_mbtowc+0x16>
	...

08013cf0 <_Balloc>:
 8013cf0:	b570      	push	{r4, r5, r6, lr}
 8013cf2:	69c6      	ldr	r6, [r0, #28]
 8013cf4:	4604      	mov	r4, r0
 8013cf6:	460d      	mov	r5, r1
 8013cf8:	b976      	cbnz	r6, 8013d18 <_Balloc+0x28>
 8013cfa:	2010      	movs	r0, #16
 8013cfc:	f7fc fce0 	bl	80106c0 <malloc>
 8013d00:	4602      	mov	r2, r0
 8013d02:	61e0      	str	r0, [r4, #28]
 8013d04:	b920      	cbnz	r0, 8013d10 <_Balloc+0x20>
 8013d06:	4b18      	ldr	r3, [pc, #96]	; (8013d68 <_Balloc+0x78>)
 8013d08:	4818      	ldr	r0, [pc, #96]	; (8013d6c <_Balloc+0x7c>)
 8013d0a:	216b      	movs	r1, #107	; 0x6b
 8013d0c:	f7fe fda2 	bl	8012854 <__assert_func>
 8013d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d14:	6006      	str	r6, [r0, #0]
 8013d16:	60c6      	str	r6, [r0, #12]
 8013d18:	69e6      	ldr	r6, [r4, #28]
 8013d1a:	68f3      	ldr	r3, [r6, #12]
 8013d1c:	b183      	cbz	r3, 8013d40 <_Balloc+0x50>
 8013d1e:	69e3      	ldr	r3, [r4, #28]
 8013d20:	68db      	ldr	r3, [r3, #12]
 8013d22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013d26:	b9b8      	cbnz	r0, 8013d58 <_Balloc+0x68>
 8013d28:	2101      	movs	r1, #1
 8013d2a:	fa01 f605 	lsl.w	r6, r1, r5
 8013d2e:	1d72      	adds	r2, r6, #5
 8013d30:	0092      	lsls	r2, r2, #2
 8013d32:	4620      	mov	r0, r4
 8013d34:	f000 fecf 	bl	8014ad6 <_calloc_r>
 8013d38:	b160      	cbz	r0, 8013d54 <_Balloc+0x64>
 8013d3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013d3e:	e00e      	b.n	8013d5e <_Balloc+0x6e>
 8013d40:	2221      	movs	r2, #33	; 0x21
 8013d42:	2104      	movs	r1, #4
 8013d44:	4620      	mov	r0, r4
 8013d46:	f000 fec6 	bl	8014ad6 <_calloc_r>
 8013d4a:	69e3      	ldr	r3, [r4, #28]
 8013d4c:	60f0      	str	r0, [r6, #12]
 8013d4e:	68db      	ldr	r3, [r3, #12]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d1e4      	bne.n	8013d1e <_Balloc+0x2e>
 8013d54:	2000      	movs	r0, #0
 8013d56:	bd70      	pop	{r4, r5, r6, pc}
 8013d58:	6802      	ldr	r2, [r0, #0]
 8013d5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013d5e:	2300      	movs	r3, #0
 8013d60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013d64:	e7f7      	b.n	8013d56 <_Balloc+0x66>
 8013d66:	bf00      	nop
 8013d68:	080183ea 	.word	0x080183ea
 8013d6c:	08018575 	.word	0x08018575

08013d70 <_Bfree>:
 8013d70:	b570      	push	{r4, r5, r6, lr}
 8013d72:	69c6      	ldr	r6, [r0, #28]
 8013d74:	4605      	mov	r5, r0
 8013d76:	460c      	mov	r4, r1
 8013d78:	b976      	cbnz	r6, 8013d98 <_Bfree+0x28>
 8013d7a:	2010      	movs	r0, #16
 8013d7c:	f7fc fca0 	bl	80106c0 <malloc>
 8013d80:	4602      	mov	r2, r0
 8013d82:	61e8      	str	r0, [r5, #28]
 8013d84:	b920      	cbnz	r0, 8013d90 <_Bfree+0x20>
 8013d86:	4b09      	ldr	r3, [pc, #36]	; (8013dac <_Bfree+0x3c>)
 8013d88:	4809      	ldr	r0, [pc, #36]	; (8013db0 <_Bfree+0x40>)
 8013d8a:	218f      	movs	r1, #143	; 0x8f
 8013d8c:	f7fe fd62 	bl	8012854 <__assert_func>
 8013d90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013d94:	6006      	str	r6, [r0, #0]
 8013d96:	60c6      	str	r6, [r0, #12]
 8013d98:	b13c      	cbz	r4, 8013daa <_Bfree+0x3a>
 8013d9a:	69eb      	ldr	r3, [r5, #28]
 8013d9c:	6862      	ldr	r2, [r4, #4]
 8013d9e:	68db      	ldr	r3, [r3, #12]
 8013da0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013da4:	6021      	str	r1, [r4, #0]
 8013da6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013daa:	bd70      	pop	{r4, r5, r6, pc}
 8013dac:	080183ea 	.word	0x080183ea
 8013db0:	08018575 	.word	0x08018575

08013db4 <__multadd>:
 8013db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013db8:	690d      	ldr	r5, [r1, #16]
 8013dba:	4607      	mov	r7, r0
 8013dbc:	460c      	mov	r4, r1
 8013dbe:	461e      	mov	r6, r3
 8013dc0:	f101 0c14 	add.w	ip, r1, #20
 8013dc4:	2000      	movs	r0, #0
 8013dc6:	f8dc 3000 	ldr.w	r3, [ip]
 8013dca:	b299      	uxth	r1, r3
 8013dcc:	fb02 6101 	mla	r1, r2, r1, r6
 8013dd0:	0c1e      	lsrs	r6, r3, #16
 8013dd2:	0c0b      	lsrs	r3, r1, #16
 8013dd4:	fb02 3306 	mla	r3, r2, r6, r3
 8013dd8:	b289      	uxth	r1, r1
 8013dda:	3001      	adds	r0, #1
 8013ddc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013de0:	4285      	cmp	r5, r0
 8013de2:	f84c 1b04 	str.w	r1, [ip], #4
 8013de6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013dea:	dcec      	bgt.n	8013dc6 <__multadd+0x12>
 8013dec:	b30e      	cbz	r6, 8013e32 <__multadd+0x7e>
 8013dee:	68a3      	ldr	r3, [r4, #8]
 8013df0:	42ab      	cmp	r3, r5
 8013df2:	dc19      	bgt.n	8013e28 <__multadd+0x74>
 8013df4:	6861      	ldr	r1, [r4, #4]
 8013df6:	4638      	mov	r0, r7
 8013df8:	3101      	adds	r1, #1
 8013dfa:	f7ff ff79 	bl	8013cf0 <_Balloc>
 8013dfe:	4680      	mov	r8, r0
 8013e00:	b928      	cbnz	r0, 8013e0e <__multadd+0x5a>
 8013e02:	4602      	mov	r2, r0
 8013e04:	4b0c      	ldr	r3, [pc, #48]	; (8013e38 <__multadd+0x84>)
 8013e06:	480d      	ldr	r0, [pc, #52]	; (8013e3c <__multadd+0x88>)
 8013e08:	21ba      	movs	r1, #186	; 0xba
 8013e0a:	f7fe fd23 	bl	8012854 <__assert_func>
 8013e0e:	6922      	ldr	r2, [r4, #16]
 8013e10:	3202      	adds	r2, #2
 8013e12:	f104 010c 	add.w	r1, r4, #12
 8013e16:	0092      	lsls	r2, r2, #2
 8013e18:	300c      	adds	r0, #12
 8013e1a:	f7fe fcfe 	bl	801281a <memcpy>
 8013e1e:	4621      	mov	r1, r4
 8013e20:	4638      	mov	r0, r7
 8013e22:	f7ff ffa5 	bl	8013d70 <_Bfree>
 8013e26:	4644      	mov	r4, r8
 8013e28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013e2c:	3501      	adds	r5, #1
 8013e2e:	615e      	str	r6, [r3, #20]
 8013e30:	6125      	str	r5, [r4, #16]
 8013e32:	4620      	mov	r0, r4
 8013e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e38:	08018504 	.word	0x08018504
 8013e3c:	08018575 	.word	0x08018575

08013e40 <__s2b>:
 8013e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e44:	460c      	mov	r4, r1
 8013e46:	4615      	mov	r5, r2
 8013e48:	461f      	mov	r7, r3
 8013e4a:	2209      	movs	r2, #9
 8013e4c:	3308      	adds	r3, #8
 8013e4e:	4606      	mov	r6, r0
 8013e50:	fb93 f3f2 	sdiv	r3, r3, r2
 8013e54:	2100      	movs	r1, #0
 8013e56:	2201      	movs	r2, #1
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	db09      	blt.n	8013e70 <__s2b+0x30>
 8013e5c:	4630      	mov	r0, r6
 8013e5e:	f7ff ff47 	bl	8013cf0 <_Balloc>
 8013e62:	b940      	cbnz	r0, 8013e76 <__s2b+0x36>
 8013e64:	4602      	mov	r2, r0
 8013e66:	4b19      	ldr	r3, [pc, #100]	; (8013ecc <__s2b+0x8c>)
 8013e68:	4819      	ldr	r0, [pc, #100]	; (8013ed0 <__s2b+0x90>)
 8013e6a:	21d3      	movs	r1, #211	; 0xd3
 8013e6c:	f7fe fcf2 	bl	8012854 <__assert_func>
 8013e70:	0052      	lsls	r2, r2, #1
 8013e72:	3101      	adds	r1, #1
 8013e74:	e7f0      	b.n	8013e58 <__s2b+0x18>
 8013e76:	9b08      	ldr	r3, [sp, #32]
 8013e78:	6143      	str	r3, [r0, #20]
 8013e7a:	2d09      	cmp	r5, #9
 8013e7c:	f04f 0301 	mov.w	r3, #1
 8013e80:	6103      	str	r3, [r0, #16]
 8013e82:	dd16      	ble.n	8013eb2 <__s2b+0x72>
 8013e84:	f104 0909 	add.w	r9, r4, #9
 8013e88:	46c8      	mov	r8, r9
 8013e8a:	442c      	add	r4, r5
 8013e8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013e90:	4601      	mov	r1, r0
 8013e92:	3b30      	subs	r3, #48	; 0x30
 8013e94:	220a      	movs	r2, #10
 8013e96:	4630      	mov	r0, r6
 8013e98:	f7ff ff8c 	bl	8013db4 <__multadd>
 8013e9c:	45a0      	cmp	r8, r4
 8013e9e:	d1f5      	bne.n	8013e8c <__s2b+0x4c>
 8013ea0:	f1a5 0408 	sub.w	r4, r5, #8
 8013ea4:	444c      	add	r4, r9
 8013ea6:	1b2d      	subs	r5, r5, r4
 8013ea8:	1963      	adds	r3, r4, r5
 8013eaa:	42bb      	cmp	r3, r7
 8013eac:	db04      	blt.n	8013eb8 <__s2b+0x78>
 8013eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013eb2:	340a      	adds	r4, #10
 8013eb4:	2509      	movs	r5, #9
 8013eb6:	e7f6      	b.n	8013ea6 <__s2b+0x66>
 8013eb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013ebc:	4601      	mov	r1, r0
 8013ebe:	3b30      	subs	r3, #48	; 0x30
 8013ec0:	220a      	movs	r2, #10
 8013ec2:	4630      	mov	r0, r6
 8013ec4:	f7ff ff76 	bl	8013db4 <__multadd>
 8013ec8:	e7ee      	b.n	8013ea8 <__s2b+0x68>
 8013eca:	bf00      	nop
 8013ecc:	08018504 	.word	0x08018504
 8013ed0:	08018575 	.word	0x08018575

08013ed4 <__hi0bits>:
 8013ed4:	0c03      	lsrs	r3, r0, #16
 8013ed6:	041b      	lsls	r3, r3, #16
 8013ed8:	b9d3      	cbnz	r3, 8013f10 <__hi0bits+0x3c>
 8013eda:	0400      	lsls	r0, r0, #16
 8013edc:	2310      	movs	r3, #16
 8013ede:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013ee2:	bf04      	itt	eq
 8013ee4:	0200      	lsleq	r0, r0, #8
 8013ee6:	3308      	addeq	r3, #8
 8013ee8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013eec:	bf04      	itt	eq
 8013eee:	0100      	lsleq	r0, r0, #4
 8013ef0:	3304      	addeq	r3, #4
 8013ef2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013ef6:	bf04      	itt	eq
 8013ef8:	0080      	lsleq	r0, r0, #2
 8013efa:	3302      	addeq	r3, #2
 8013efc:	2800      	cmp	r0, #0
 8013efe:	db05      	blt.n	8013f0c <__hi0bits+0x38>
 8013f00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013f04:	f103 0301 	add.w	r3, r3, #1
 8013f08:	bf08      	it	eq
 8013f0a:	2320      	moveq	r3, #32
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	4770      	bx	lr
 8013f10:	2300      	movs	r3, #0
 8013f12:	e7e4      	b.n	8013ede <__hi0bits+0xa>

08013f14 <__lo0bits>:
 8013f14:	6803      	ldr	r3, [r0, #0]
 8013f16:	f013 0207 	ands.w	r2, r3, #7
 8013f1a:	d00c      	beq.n	8013f36 <__lo0bits+0x22>
 8013f1c:	07d9      	lsls	r1, r3, #31
 8013f1e:	d422      	bmi.n	8013f66 <__lo0bits+0x52>
 8013f20:	079a      	lsls	r2, r3, #30
 8013f22:	bf49      	itett	mi
 8013f24:	085b      	lsrmi	r3, r3, #1
 8013f26:	089b      	lsrpl	r3, r3, #2
 8013f28:	6003      	strmi	r3, [r0, #0]
 8013f2a:	2201      	movmi	r2, #1
 8013f2c:	bf5c      	itt	pl
 8013f2e:	6003      	strpl	r3, [r0, #0]
 8013f30:	2202      	movpl	r2, #2
 8013f32:	4610      	mov	r0, r2
 8013f34:	4770      	bx	lr
 8013f36:	b299      	uxth	r1, r3
 8013f38:	b909      	cbnz	r1, 8013f3e <__lo0bits+0x2a>
 8013f3a:	0c1b      	lsrs	r3, r3, #16
 8013f3c:	2210      	movs	r2, #16
 8013f3e:	b2d9      	uxtb	r1, r3
 8013f40:	b909      	cbnz	r1, 8013f46 <__lo0bits+0x32>
 8013f42:	3208      	adds	r2, #8
 8013f44:	0a1b      	lsrs	r3, r3, #8
 8013f46:	0719      	lsls	r1, r3, #28
 8013f48:	bf04      	itt	eq
 8013f4a:	091b      	lsreq	r3, r3, #4
 8013f4c:	3204      	addeq	r2, #4
 8013f4e:	0799      	lsls	r1, r3, #30
 8013f50:	bf04      	itt	eq
 8013f52:	089b      	lsreq	r3, r3, #2
 8013f54:	3202      	addeq	r2, #2
 8013f56:	07d9      	lsls	r1, r3, #31
 8013f58:	d403      	bmi.n	8013f62 <__lo0bits+0x4e>
 8013f5a:	085b      	lsrs	r3, r3, #1
 8013f5c:	f102 0201 	add.w	r2, r2, #1
 8013f60:	d003      	beq.n	8013f6a <__lo0bits+0x56>
 8013f62:	6003      	str	r3, [r0, #0]
 8013f64:	e7e5      	b.n	8013f32 <__lo0bits+0x1e>
 8013f66:	2200      	movs	r2, #0
 8013f68:	e7e3      	b.n	8013f32 <__lo0bits+0x1e>
 8013f6a:	2220      	movs	r2, #32
 8013f6c:	e7e1      	b.n	8013f32 <__lo0bits+0x1e>
	...

08013f70 <__i2b>:
 8013f70:	b510      	push	{r4, lr}
 8013f72:	460c      	mov	r4, r1
 8013f74:	2101      	movs	r1, #1
 8013f76:	f7ff febb 	bl	8013cf0 <_Balloc>
 8013f7a:	4602      	mov	r2, r0
 8013f7c:	b928      	cbnz	r0, 8013f8a <__i2b+0x1a>
 8013f7e:	4b05      	ldr	r3, [pc, #20]	; (8013f94 <__i2b+0x24>)
 8013f80:	4805      	ldr	r0, [pc, #20]	; (8013f98 <__i2b+0x28>)
 8013f82:	f240 1145 	movw	r1, #325	; 0x145
 8013f86:	f7fe fc65 	bl	8012854 <__assert_func>
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	6144      	str	r4, [r0, #20]
 8013f8e:	6103      	str	r3, [r0, #16]
 8013f90:	bd10      	pop	{r4, pc}
 8013f92:	bf00      	nop
 8013f94:	08018504 	.word	0x08018504
 8013f98:	08018575 	.word	0x08018575

08013f9c <__multiply>:
 8013f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fa0:	4691      	mov	r9, r2
 8013fa2:	690a      	ldr	r2, [r1, #16]
 8013fa4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013fa8:	429a      	cmp	r2, r3
 8013faa:	bfb8      	it	lt
 8013fac:	460b      	movlt	r3, r1
 8013fae:	460c      	mov	r4, r1
 8013fb0:	bfbc      	itt	lt
 8013fb2:	464c      	movlt	r4, r9
 8013fb4:	4699      	movlt	r9, r3
 8013fb6:	6927      	ldr	r7, [r4, #16]
 8013fb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013fbc:	68a3      	ldr	r3, [r4, #8]
 8013fbe:	6861      	ldr	r1, [r4, #4]
 8013fc0:	eb07 060a 	add.w	r6, r7, sl
 8013fc4:	42b3      	cmp	r3, r6
 8013fc6:	b085      	sub	sp, #20
 8013fc8:	bfb8      	it	lt
 8013fca:	3101      	addlt	r1, #1
 8013fcc:	f7ff fe90 	bl	8013cf0 <_Balloc>
 8013fd0:	b930      	cbnz	r0, 8013fe0 <__multiply+0x44>
 8013fd2:	4602      	mov	r2, r0
 8013fd4:	4b44      	ldr	r3, [pc, #272]	; (80140e8 <__multiply+0x14c>)
 8013fd6:	4845      	ldr	r0, [pc, #276]	; (80140ec <__multiply+0x150>)
 8013fd8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013fdc:	f7fe fc3a 	bl	8012854 <__assert_func>
 8013fe0:	f100 0514 	add.w	r5, r0, #20
 8013fe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013fe8:	462b      	mov	r3, r5
 8013fea:	2200      	movs	r2, #0
 8013fec:	4543      	cmp	r3, r8
 8013fee:	d321      	bcc.n	8014034 <__multiply+0x98>
 8013ff0:	f104 0314 	add.w	r3, r4, #20
 8013ff4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013ff8:	f109 0314 	add.w	r3, r9, #20
 8013ffc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014000:	9202      	str	r2, [sp, #8]
 8014002:	1b3a      	subs	r2, r7, r4
 8014004:	3a15      	subs	r2, #21
 8014006:	f022 0203 	bic.w	r2, r2, #3
 801400a:	3204      	adds	r2, #4
 801400c:	f104 0115 	add.w	r1, r4, #21
 8014010:	428f      	cmp	r7, r1
 8014012:	bf38      	it	cc
 8014014:	2204      	movcc	r2, #4
 8014016:	9201      	str	r2, [sp, #4]
 8014018:	9a02      	ldr	r2, [sp, #8]
 801401a:	9303      	str	r3, [sp, #12]
 801401c:	429a      	cmp	r2, r3
 801401e:	d80c      	bhi.n	801403a <__multiply+0x9e>
 8014020:	2e00      	cmp	r6, #0
 8014022:	dd03      	ble.n	801402c <__multiply+0x90>
 8014024:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014028:	2b00      	cmp	r3, #0
 801402a:	d05b      	beq.n	80140e4 <__multiply+0x148>
 801402c:	6106      	str	r6, [r0, #16]
 801402e:	b005      	add	sp, #20
 8014030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014034:	f843 2b04 	str.w	r2, [r3], #4
 8014038:	e7d8      	b.n	8013fec <__multiply+0x50>
 801403a:	f8b3 a000 	ldrh.w	sl, [r3]
 801403e:	f1ba 0f00 	cmp.w	sl, #0
 8014042:	d024      	beq.n	801408e <__multiply+0xf2>
 8014044:	f104 0e14 	add.w	lr, r4, #20
 8014048:	46a9      	mov	r9, r5
 801404a:	f04f 0c00 	mov.w	ip, #0
 801404e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014052:	f8d9 1000 	ldr.w	r1, [r9]
 8014056:	fa1f fb82 	uxth.w	fp, r2
 801405a:	b289      	uxth	r1, r1
 801405c:	fb0a 110b 	mla	r1, sl, fp, r1
 8014060:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014064:	f8d9 2000 	ldr.w	r2, [r9]
 8014068:	4461      	add	r1, ip
 801406a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801406e:	fb0a c20b 	mla	r2, sl, fp, ip
 8014072:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014076:	b289      	uxth	r1, r1
 8014078:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801407c:	4577      	cmp	r7, lr
 801407e:	f849 1b04 	str.w	r1, [r9], #4
 8014082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014086:	d8e2      	bhi.n	801404e <__multiply+0xb2>
 8014088:	9a01      	ldr	r2, [sp, #4]
 801408a:	f845 c002 	str.w	ip, [r5, r2]
 801408e:	9a03      	ldr	r2, [sp, #12]
 8014090:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014094:	3304      	adds	r3, #4
 8014096:	f1b9 0f00 	cmp.w	r9, #0
 801409a:	d021      	beq.n	80140e0 <__multiply+0x144>
 801409c:	6829      	ldr	r1, [r5, #0]
 801409e:	f104 0c14 	add.w	ip, r4, #20
 80140a2:	46ae      	mov	lr, r5
 80140a4:	f04f 0a00 	mov.w	sl, #0
 80140a8:	f8bc b000 	ldrh.w	fp, [ip]
 80140ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80140b0:	fb09 220b 	mla	r2, r9, fp, r2
 80140b4:	4452      	add	r2, sl
 80140b6:	b289      	uxth	r1, r1
 80140b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80140bc:	f84e 1b04 	str.w	r1, [lr], #4
 80140c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80140c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80140c8:	f8be 1000 	ldrh.w	r1, [lr]
 80140cc:	fb09 110a 	mla	r1, r9, sl, r1
 80140d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80140d4:	4567      	cmp	r7, ip
 80140d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80140da:	d8e5      	bhi.n	80140a8 <__multiply+0x10c>
 80140dc:	9a01      	ldr	r2, [sp, #4]
 80140de:	50a9      	str	r1, [r5, r2]
 80140e0:	3504      	adds	r5, #4
 80140e2:	e799      	b.n	8014018 <__multiply+0x7c>
 80140e4:	3e01      	subs	r6, #1
 80140e6:	e79b      	b.n	8014020 <__multiply+0x84>
 80140e8:	08018504 	.word	0x08018504
 80140ec:	08018575 	.word	0x08018575

080140f0 <__pow5mult>:
 80140f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140f4:	4615      	mov	r5, r2
 80140f6:	f012 0203 	ands.w	r2, r2, #3
 80140fa:	4606      	mov	r6, r0
 80140fc:	460f      	mov	r7, r1
 80140fe:	d007      	beq.n	8014110 <__pow5mult+0x20>
 8014100:	4c25      	ldr	r4, [pc, #148]	; (8014198 <__pow5mult+0xa8>)
 8014102:	3a01      	subs	r2, #1
 8014104:	2300      	movs	r3, #0
 8014106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801410a:	f7ff fe53 	bl	8013db4 <__multadd>
 801410e:	4607      	mov	r7, r0
 8014110:	10ad      	asrs	r5, r5, #2
 8014112:	d03d      	beq.n	8014190 <__pow5mult+0xa0>
 8014114:	69f4      	ldr	r4, [r6, #28]
 8014116:	b97c      	cbnz	r4, 8014138 <__pow5mult+0x48>
 8014118:	2010      	movs	r0, #16
 801411a:	f7fc fad1 	bl	80106c0 <malloc>
 801411e:	4602      	mov	r2, r0
 8014120:	61f0      	str	r0, [r6, #28]
 8014122:	b928      	cbnz	r0, 8014130 <__pow5mult+0x40>
 8014124:	4b1d      	ldr	r3, [pc, #116]	; (801419c <__pow5mult+0xac>)
 8014126:	481e      	ldr	r0, [pc, #120]	; (80141a0 <__pow5mult+0xb0>)
 8014128:	f240 11b3 	movw	r1, #435	; 0x1b3
 801412c:	f7fe fb92 	bl	8012854 <__assert_func>
 8014130:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014134:	6004      	str	r4, [r0, #0]
 8014136:	60c4      	str	r4, [r0, #12]
 8014138:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801413c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014140:	b94c      	cbnz	r4, 8014156 <__pow5mult+0x66>
 8014142:	f240 2171 	movw	r1, #625	; 0x271
 8014146:	4630      	mov	r0, r6
 8014148:	f7ff ff12 	bl	8013f70 <__i2b>
 801414c:	2300      	movs	r3, #0
 801414e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014152:	4604      	mov	r4, r0
 8014154:	6003      	str	r3, [r0, #0]
 8014156:	f04f 0900 	mov.w	r9, #0
 801415a:	07eb      	lsls	r3, r5, #31
 801415c:	d50a      	bpl.n	8014174 <__pow5mult+0x84>
 801415e:	4639      	mov	r1, r7
 8014160:	4622      	mov	r2, r4
 8014162:	4630      	mov	r0, r6
 8014164:	f7ff ff1a 	bl	8013f9c <__multiply>
 8014168:	4639      	mov	r1, r7
 801416a:	4680      	mov	r8, r0
 801416c:	4630      	mov	r0, r6
 801416e:	f7ff fdff 	bl	8013d70 <_Bfree>
 8014172:	4647      	mov	r7, r8
 8014174:	106d      	asrs	r5, r5, #1
 8014176:	d00b      	beq.n	8014190 <__pow5mult+0xa0>
 8014178:	6820      	ldr	r0, [r4, #0]
 801417a:	b938      	cbnz	r0, 801418c <__pow5mult+0x9c>
 801417c:	4622      	mov	r2, r4
 801417e:	4621      	mov	r1, r4
 8014180:	4630      	mov	r0, r6
 8014182:	f7ff ff0b 	bl	8013f9c <__multiply>
 8014186:	6020      	str	r0, [r4, #0]
 8014188:	f8c0 9000 	str.w	r9, [r0]
 801418c:	4604      	mov	r4, r0
 801418e:	e7e4      	b.n	801415a <__pow5mult+0x6a>
 8014190:	4638      	mov	r0, r7
 8014192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014196:	bf00      	nop
 8014198:	080186c0 	.word	0x080186c0
 801419c:	080183ea 	.word	0x080183ea
 80141a0:	08018575 	.word	0x08018575

080141a4 <__lshift>:
 80141a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141a8:	460c      	mov	r4, r1
 80141aa:	6849      	ldr	r1, [r1, #4]
 80141ac:	6923      	ldr	r3, [r4, #16]
 80141ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80141b2:	68a3      	ldr	r3, [r4, #8]
 80141b4:	4607      	mov	r7, r0
 80141b6:	4691      	mov	r9, r2
 80141b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80141bc:	f108 0601 	add.w	r6, r8, #1
 80141c0:	42b3      	cmp	r3, r6
 80141c2:	db0b      	blt.n	80141dc <__lshift+0x38>
 80141c4:	4638      	mov	r0, r7
 80141c6:	f7ff fd93 	bl	8013cf0 <_Balloc>
 80141ca:	4605      	mov	r5, r0
 80141cc:	b948      	cbnz	r0, 80141e2 <__lshift+0x3e>
 80141ce:	4602      	mov	r2, r0
 80141d0:	4b28      	ldr	r3, [pc, #160]	; (8014274 <__lshift+0xd0>)
 80141d2:	4829      	ldr	r0, [pc, #164]	; (8014278 <__lshift+0xd4>)
 80141d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80141d8:	f7fe fb3c 	bl	8012854 <__assert_func>
 80141dc:	3101      	adds	r1, #1
 80141de:	005b      	lsls	r3, r3, #1
 80141e0:	e7ee      	b.n	80141c0 <__lshift+0x1c>
 80141e2:	2300      	movs	r3, #0
 80141e4:	f100 0114 	add.w	r1, r0, #20
 80141e8:	f100 0210 	add.w	r2, r0, #16
 80141ec:	4618      	mov	r0, r3
 80141ee:	4553      	cmp	r3, sl
 80141f0:	db33      	blt.n	801425a <__lshift+0xb6>
 80141f2:	6920      	ldr	r0, [r4, #16]
 80141f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80141f8:	f104 0314 	add.w	r3, r4, #20
 80141fc:	f019 091f 	ands.w	r9, r9, #31
 8014200:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014204:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014208:	d02b      	beq.n	8014262 <__lshift+0xbe>
 801420a:	f1c9 0e20 	rsb	lr, r9, #32
 801420e:	468a      	mov	sl, r1
 8014210:	2200      	movs	r2, #0
 8014212:	6818      	ldr	r0, [r3, #0]
 8014214:	fa00 f009 	lsl.w	r0, r0, r9
 8014218:	4310      	orrs	r0, r2
 801421a:	f84a 0b04 	str.w	r0, [sl], #4
 801421e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014222:	459c      	cmp	ip, r3
 8014224:	fa22 f20e 	lsr.w	r2, r2, lr
 8014228:	d8f3      	bhi.n	8014212 <__lshift+0x6e>
 801422a:	ebac 0304 	sub.w	r3, ip, r4
 801422e:	3b15      	subs	r3, #21
 8014230:	f023 0303 	bic.w	r3, r3, #3
 8014234:	3304      	adds	r3, #4
 8014236:	f104 0015 	add.w	r0, r4, #21
 801423a:	4584      	cmp	ip, r0
 801423c:	bf38      	it	cc
 801423e:	2304      	movcc	r3, #4
 8014240:	50ca      	str	r2, [r1, r3]
 8014242:	b10a      	cbz	r2, 8014248 <__lshift+0xa4>
 8014244:	f108 0602 	add.w	r6, r8, #2
 8014248:	3e01      	subs	r6, #1
 801424a:	4638      	mov	r0, r7
 801424c:	612e      	str	r6, [r5, #16]
 801424e:	4621      	mov	r1, r4
 8014250:	f7ff fd8e 	bl	8013d70 <_Bfree>
 8014254:	4628      	mov	r0, r5
 8014256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801425a:	f842 0f04 	str.w	r0, [r2, #4]!
 801425e:	3301      	adds	r3, #1
 8014260:	e7c5      	b.n	80141ee <__lshift+0x4a>
 8014262:	3904      	subs	r1, #4
 8014264:	f853 2b04 	ldr.w	r2, [r3], #4
 8014268:	f841 2f04 	str.w	r2, [r1, #4]!
 801426c:	459c      	cmp	ip, r3
 801426e:	d8f9      	bhi.n	8014264 <__lshift+0xc0>
 8014270:	e7ea      	b.n	8014248 <__lshift+0xa4>
 8014272:	bf00      	nop
 8014274:	08018504 	.word	0x08018504
 8014278:	08018575 	.word	0x08018575

0801427c <__mcmp>:
 801427c:	b530      	push	{r4, r5, lr}
 801427e:	6902      	ldr	r2, [r0, #16]
 8014280:	690c      	ldr	r4, [r1, #16]
 8014282:	1b12      	subs	r2, r2, r4
 8014284:	d10e      	bne.n	80142a4 <__mcmp+0x28>
 8014286:	f100 0314 	add.w	r3, r0, #20
 801428a:	3114      	adds	r1, #20
 801428c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014290:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014294:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014298:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801429c:	42a5      	cmp	r5, r4
 801429e:	d003      	beq.n	80142a8 <__mcmp+0x2c>
 80142a0:	d305      	bcc.n	80142ae <__mcmp+0x32>
 80142a2:	2201      	movs	r2, #1
 80142a4:	4610      	mov	r0, r2
 80142a6:	bd30      	pop	{r4, r5, pc}
 80142a8:	4283      	cmp	r3, r0
 80142aa:	d3f3      	bcc.n	8014294 <__mcmp+0x18>
 80142ac:	e7fa      	b.n	80142a4 <__mcmp+0x28>
 80142ae:	f04f 32ff 	mov.w	r2, #4294967295
 80142b2:	e7f7      	b.n	80142a4 <__mcmp+0x28>

080142b4 <__mdiff>:
 80142b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142b8:	460c      	mov	r4, r1
 80142ba:	4606      	mov	r6, r0
 80142bc:	4611      	mov	r1, r2
 80142be:	4620      	mov	r0, r4
 80142c0:	4690      	mov	r8, r2
 80142c2:	f7ff ffdb 	bl	801427c <__mcmp>
 80142c6:	1e05      	subs	r5, r0, #0
 80142c8:	d110      	bne.n	80142ec <__mdiff+0x38>
 80142ca:	4629      	mov	r1, r5
 80142cc:	4630      	mov	r0, r6
 80142ce:	f7ff fd0f 	bl	8013cf0 <_Balloc>
 80142d2:	b930      	cbnz	r0, 80142e2 <__mdiff+0x2e>
 80142d4:	4b3a      	ldr	r3, [pc, #232]	; (80143c0 <__mdiff+0x10c>)
 80142d6:	4602      	mov	r2, r0
 80142d8:	f240 2137 	movw	r1, #567	; 0x237
 80142dc:	4839      	ldr	r0, [pc, #228]	; (80143c4 <__mdiff+0x110>)
 80142de:	f7fe fab9 	bl	8012854 <__assert_func>
 80142e2:	2301      	movs	r3, #1
 80142e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80142e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142ec:	bfa4      	itt	ge
 80142ee:	4643      	movge	r3, r8
 80142f0:	46a0      	movge	r8, r4
 80142f2:	4630      	mov	r0, r6
 80142f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80142f8:	bfa6      	itte	ge
 80142fa:	461c      	movge	r4, r3
 80142fc:	2500      	movge	r5, #0
 80142fe:	2501      	movlt	r5, #1
 8014300:	f7ff fcf6 	bl	8013cf0 <_Balloc>
 8014304:	b920      	cbnz	r0, 8014310 <__mdiff+0x5c>
 8014306:	4b2e      	ldr	r3, [pc, #184]	; (80143c0 <__mdiff+0x10c>)
 8014308:	4602      	mov	r2, r0
 801430a:	f240 2145 	movw	r1, #581	; 0x245
 801430e:	e7e5      	b.n	80142dc <__mdiff+0x28>
 8014310:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014314:	6926      	ldr	r6, [r4, #16]
 8014316:	60c5      	str	r5, [r0, #12]
 8014318:	f104 0914 	add.w	r9, r4, #20
 801431c:	f108 0514 	add.w	r5, r8, #20
 8014320:	f100 0e14 	add.w	lr, r0, #20
 8014324:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014328:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801432c:	f108 0210 	add.w	r2, r8, #16
 8014330:	46f2      	mov	sl, lr
 8014332:	2100      	movs	r1, #0
 8014334:	f859 3b04 	ldr.w	r3, [r9], #4
 8014338:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801433c:	fa11 f88b 	uxtah	r8, r1, fp
 8014340:	b299      	uxth	r1, r3
 8014342:	0c1b      	lsrs	r3, r3, #16
 8014344:	eba8 0801 	sub.w	r8, r8, r1
 8014348:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801434c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014350:	fa1f f888 	uxth.w	r8, r8
 8014354:	1419      	asrs	r1, r3, #16
 8014356:	454e      	cmp	r6, r9
 8014358:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801435c:	f84a 3b04 	str.w	r3, [sl], #4
 8014360:	d8e8      	bhi.n	8014334 <__mdiff+0x80>
 8014362:	1b33      	subs	r3, r6, r4
 8014364:	3b15      	subs	r3, #21
 8014366:	f023 0303 	bic.w	r3, r3, #3
 801436a:	3304      	adds	r3, #4
 801436c:	3415      	adds	r4, #21
 801436e:	42a6      	cmp	r6, r4
 8014370:	bf38      	it	cc
 8014372:	2304      	movcc	r3, #4
 8014374:	441d      	add	r5, r3
 8014376:	4473      	add	r3, lr
 8014378:	469e      	mov	lr, r3
 801437a:	462e      	mov	r6, r5
 801437c:	4566      	cmp	r6, ip
 801437e:	d30e      	bcc.n	801439e <__mdiff+0xea>
 8014380:	f10c 0203 	add.w	r2, ip, #3
 8014384:	1b52      	subs	r2, r2, r5
 8014386:	f022 0203 	bic.w	r2, r2, #3
 801438a:	3d03      	subs	r5, #3
 801438c:	45ac      	cmp	ip, r5
 801438e:	bf38      	it	cc
 8014390:	2200      	movcc	r2, #0
 8014392:	4413      	add	r3, r2
 8014394:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014398:	b17a      	cbz	r2, 80143ba <__mdiff+0x106>
 801439a:	6107      	str	r7, [r0, #16]
 801439c:	e7a4      	b.n	80142e8 <__mdiff+0x34>
 801439e:	f856 8b04 	ldr.w	r8, [r6], #4
 80143a2:	fa11 f288 	uxtah	r2, r1, r8
 80143a6:	1414      	asrs	r4, r2, #16
 80143a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80143ac:	b292      	uxth	r2, r2
 80143ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80143b2:	f84e 2b04 	str.w	r2, [lr], #4
 80143b6:	1421      	asrs	r1, r4, #16
 80143b8:	e7e0      	b.n	801437c <__mdiff+0xc8>
 80143ba:	3f01      	subs	r7, #1
 80143bc:	e7ea      	b.n	8014394 <__mdiff+0xe0>
 80143be:	bf00      	nop
 80143c0:	08018504 	.word	0x08018504
 80143c4:	08018575 	.word	0x08018575

080143c8 <__ulp>:
 80143c8:	b082      	sub	sp, #8
 80143ca:	ed8d 0b00 	vstr	d0, [sp]
 80143ce:	9a01      	ldr	r2, [sp, #4]
 80143d0:	4b0f      	ldr	r3, [pc, #60]	; (8014410 <__ulp+0x48>)
 80143d2:	4013      	ands	r3, r2
 80143d4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80143d8:	2b00      	cmp	r3, #0
 80143da:	dc08      	bgt.n	80143ee <__ulp+0x26>
 80143dc:	425b      	negs	r3, r3
 80143de:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80143e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80143e6:	da04      	bge.n	80143f2 <__ulp+0x2a>
 80143e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80143ec:	4113      	asrs	r3, r2
 80143ee:	2200      	movs	r2, #0
 80143f0:	e008      	b.n	8014404 <__ulp+0x3c>
 80143f2:	f1a2 0314 	sub.w	r3, r2, #20
 80143f6:	2b1e      	cmp	r3, #30
 80143f8:	bfda      	itte	le
 80143fa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80143fe:	40da      	lsrle	r2, r3
 8014400:	2201      	movgt	r2, #1
 8014402:	2300      	movs	r3, #0
 8014404:	4619      	mov	r1, r3
 8014406:	4610      	mov	r0, r2
 8014408:	ec41 0b10 	vmov	d0, r0, r1
 801440c:	b002      	add	sp, #8
 801440e:	4770      	bx	lr
 8014410:	7ff00000 	.word	0x7ff00000

08014414 <__b2d>:
 8014414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014418:	6906      	ldr	r6, [r0, #16]
 801441a:	f100 0814 	add.w	r8, r0, #20
 801441e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8014422:	1f37      	subs	r7, r6, #4
 8014424:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014428:	4610      	mov	r0, r2
 801442a:	f7ff fd53 	bl	8013ed4 <__hi0bits>
 801442e:	f1c0 0320 	rsb	r3, r0, #32
 8014432:	280a      	cmp	r0, #10
 8014434:	600b      	str	r3, [r1, #0]
 8014436:	491b      	ldr	r1, [pc, #108]	; (80144a4 <__b2d+0x90>)
 8014438:	dc15      	bgt.n	8014466 <__b2d+0x52>
 801443a:	f1c0 0c0b 	rsb	ip, r0, #11
 801443e:	fa22 f30c 	lsr.w	r3, r2, ip
 8014442:	45b8      	cmp	r8, r7
 8014444:	ea43 0501 	orr.w	r5, r3, r1
 8014448:	bf34      	ite	cc
 801444a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801444e:	2300      	movcs	r3, #0
 8014450:	3015      	adds	r0, #21
 8014452:	fa02 f000 	lsl.w	r0, r2, r0
 8014456:	fa23 f30c 	lsr.w	r3, r3, ip
 801445a:	4303      	orrs	r3, r0
 801445c:	461c      	mov	r4, r3
 801445e:	ec45 4b10 	vmov	d0, r4, r5
 8014462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014466:	45b8      	cmp	r8, r7
 8014468:	bf3a      	itte	cc
 801446a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801446e:	f1a6 0708 	subcc.w	r7, r6, #8
 8014472:	2300      	movcs	r3, #0
 8014474:	380b      	subs	r0, #11
 8014476:	d012      	beq.n	801449e <__b2d+0x8a>
 8014478:	f1c0 0120 	rsb	r1, r0, #32
 801447c:	fa23 f401 	lsr.w	r4, r3, r1
 8014480:	4082      	lsls	r2, r0
 8014482:	4322      	orrs	r2, r4
 8014484:	4547      	cmp	r7, r8
 8014486:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801448a:	bf8c      	ite	hi
 801448c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014490:	2200      	movls	r2, #0
 8014492:	4083      	lsls	r3, r0
 8014494:	40ca      	lsrs	r2, r1
 8014496:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801449a:	4313      	orrs	r3, r2
 801449c:	e7de      	b.n	801445c <__b2d+0x48>
 801449e:	ea42 0501 	orr.w	r5, r2, r1
 80144a2:	e7db      	b.n	801445c <__b2d+0x48>
 80144a4:	3ff00000 	.word	0x3ff00000

080144a8 <__d2b>:
 80144a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80144ac:	460f      	mov	r7, r1
 80144ae:	2101      	movs	r1, #1
 80144b0:	ec59 8b10 	vmov	r8, r9, d0
 80144b4:	4616      	mov	r6, r2
 80144b6:	f7ff fc1b 	bl	8013cf0 <_Balloc>
 80144ba:	4604      	mov	r4, r0
 80144bc:	b930      	cbnz	r0, 80144cc <__d2b+0x24>
 80144be:	4602      	mov	r2, r0
 80144c0:	4b24      	ldr	r3, [pc, #144]	; (8014554 <__d2b+0xac>)
 80144c2:	4825      	ldr	r0, [pc, #148]	; (8014558 <__d2b+0xb0>)
 80144c4:	f240 310f 	movw	r1, #783	; 0x30f
 80144c8:	f7fe f9c4 	bl	8012854 <__assert_func>
 80144cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80144d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80144d4:	bb2d      	cbnz	r5, 8014522 <__d2b+0x7a>
 80144d6:	9301      	str	r3, [sp, #4]
 80144d8:	f1b8 0300 	subs.w	r3, r8, #0
 80144dc:	d026      	beq.n	801452c <__d2b+0x84>
 80144de:	4668      	mov	r0, sp
 80144e0:	9300      	str	r3, [sp, #0]
 80144e2:	f7ff fd17 	bl	8013f14 <__lo0bits>
 80144e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80144ea:	b1e8      	cbz	r0, 8014528 <__d2b+0x80>
 80144ec:	f1c0 0320 	rsb	r3, r0, #32
 80144f0:	fa02 f303 	lsl.w	r3, r2, r3
 80144f4:	430b      	orrs	r3, r1
 80144f6:	40c2      	lsrs	r2, r0
 80144f8:	6163      	str	r3, [r4, #20]
 80144fa:	9201      	str	r2, [sp, #4]
 80144fc:	9b01      	ldr	r3, [sp, #4]
 80144fe:	61a3      	str	r3, [r4, #24]
 8014500:	2b00      	cmp	r3, #0
 8014502:	bf14      	ite	ne
 8014504:	2202      	movne	r2, #2
 8014506:	2201      	moveq	r2, #1
 8014508:	6122      	str	r2, [r4, #16]
 801450a:	b1bd      	cbz	r5, 801453c <__d2b+0x94>
 801450c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014510:	4405      	add	r5, r0
 8014512:	603d      	str	r5, [r7, #0]
 8014514:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014518:	6030      	str	r0, [r6, #0]
 801451a:	4620      	mov	r0, r4
 801451c:	b003      	add	sp, #12
 801451e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014526:	e7d6      	b.n	80144d6 <__d2b+0x2e>
 8014528:	6161      	str	r1, [r4, #20]
 801452a:	e7e7      	b.n	80144fc <__d2b+0x54>
 801452c:	a801      	add	r0, sp, #4
 801452e:	f7ff fcf1 	bl	8013f14 <__lo0bits>
 8014532:	9b01      	ldr	r3, [sp, #4]
 8014534:	6163      	str	r3, [r4, #20]
 8014536:	3020      	adds	r0, #32
 8014538:	2201      	movs	r2, #1
 801453a:	e7e5      	b.n	8014508 <__d2b+0x60>
 801453c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014540:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014544:	6038      	str	r0, [r7, #0]
 8014546:	6918      	ldr	r0, [r3, #16]
 8014548:	f7ff fcc4 	bl	8013ed4 <__hi0bits>
 801454c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014550:	e7e2      	b.n	8014518 <__d2b+0x70>
 8014552:	bf00      	nop
 8014554:	08018504 	.word	0x08018504
 8014558:	08018575 	.word	0x08018575

0801455c <__ratio>:
 801455c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014560:	4688      	mov	r8, r1
 8014562:	4669      	mov	r1, sp
 8014564:	4681      	mov	r9, r0
 8014566:	f7ff ff55 	bl	8014414 <__b2d>
 801456a:	a901      	add	r1, sp, #4
 801456c:	4640      	mov	r0, r8
 801456e:	ec55 4b10 	vmov	r4, r5, d0
 8014572:	f7ff ff4f 	bl	8014414 <__b2d>
 8014576:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801457a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801457e:	eba3 0c02 	sub.w	ip, r3, r2
 8014582:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014586:	1a9b      	subs	r3, r3, r2
 8014588:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801458c:	ec51 0b10 	vmov	r0, r1, d0
 8014590:	2b00      	cmp	r3, #0
 8014592:	bfd6      	itet	le
 8014594:	460a      	movle	r2, r1
 8014596:	462a      	movgt	r2, r5
 8014598:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801459c:	468b      	mov	fp, r1
 801459e:	462f      	mov	r7, r5
 80145a0:	bfd4      	ite	le
 80145a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80145a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80145aa:	4620      	mov	r0, r4
 80145ac:	ee10 2a10 	vmov	r2, s0
 80145b0:	465b      	mov	r3, fp
 80145b2:	4639      	mov	r1, r7
 80145b4:	f7ec f94a 	bl	800084c <__aeabi_ddiv>
 80145b8:	ec41 0b10 	vmov	d0, r0, r1
 80145bc:	b003      	add	sp, #12
 80145be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080145c2 <__copybits>:
 80145c2:	3901      	subs	r1, #1
 80145c4:	b570      	push	{r4, r5, r6, lr}
 80145c6:	1149      	asrs	r1, r1, #5
 80145c8:	6914      	ldr	r4, [r2, #16]
 80145ca:	3101      	adds	r1, #1
 80145cc:	f102 0314 	add.w	r3, r2, #20
 80145d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80145d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80145d8:	1f05      	subs	r5, r0, #4
 80145da:	42a3      	cmp	r3, r4
 80145dc:	d30c      	bcc.n	80145f8 <__copybits+0x36>
 80145de:	1aa3      	subs	r3, r4, r2
 80145e0:	3b11      	subs	r3, #17
 80145e2:	f023 0303 	bic.w	r3, r3, #3
 80145e6:	3211      	adds	r2, #17
 80145e8:	42a2      	cmp	r2, r4
 80145ea:	bf88      	it	hi
 80145ec:	2300      	movhi	r3, #0
 80145ee:	4418      	add	r0, r3
 80145f0:	2300      	movs	r3, #0
 80145f2:	4288      	cmp	r0, r1
 80145f4:	d305      	bcc.n	8014602 <__copybits+0x40>
 80145f6:	bd70      	pop	{r4, r5, r6, pc}
 80145f8:	f853 6b04 	ldr.w	r6, [r3], #4
 80145fc:	f845 6f04 	str.w	r6, [r5, #4]!
 8014600:	e7eb      	b.n	80145da <__copybits+0x18>
 8014602:	f840 3b04 	str.w	r3, [r0], #4
 8014606:	e7f4      	b.n	80145f2 <__copybits+0x30>

08014608 <__any_on>:
 8014608:	f100 0214 	add.w	r2, r0, #20
 801460c:	6900      	ldr	r0, [r0, #16]
 801460e:	114b      	asrs	r3, r1, #5
 8014610:	4298      	cmp	r0, r3
 8014612:	b510      	push	{r4, lr}
 8014614:	db11      	blt.n	801463a <__any_on+0x32>
 8014616:	dd0a      	ble.n	801462e <__any_on+0x26>
 8014618:	f011 011f 	ands.w	r1, r1, #31
 801461c:	d007      	beq.n	801462e <__any_on+0x26>
 801461e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014622:	fa24 f001 	lsr.w	r0, r4, r1
 8014626:	fa00 f101 	lsl.w	r1, r0, r1
 801462a:	428c      	cmp	r4, r1
 801462c:	d10b      	bne.n	8014646 <__any_on+0x3e>
 801462e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014632:	4293      	cmp	r3, r2
 8014634:	d803      	bhi.n	801463e <__any_on+0x36>
 8014636:	2000      	movs	r0, #0
 8014638:	bd10      	pop	{r4, pc}
 801463a:	4603      	mov	r3, r0
 801463c:	e7f7      	b.n	801462e <__any_on+0x26>
 801463e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014642:	2900      	cmp	r1, #0
 8014644:	d0f5      	beq.n	8014632 <__any_on+0x2a>
 8014646:	2001      	movs	r0, #1
 8014648:	e7f6      	b.n	8014638 <__any_on+0x30>

0801464a <__ascii_wctomb>:
 801464a:	b149      	cbz	r1, 8014660 <__ascii_wctomb+0x16>
 801464c:	2aff      	cmp	r2, #255	; 0xff
 801464e:	bf85      	ittet	hi
 8014650:	238a      	movhi	r3, #138	; 0x8a
 8014652:	6003      	strhi	r3, [r0, #0]
 8014654:	700a      	strbls	r2, [r1, #0]
 8014656:	f04f 30ff 	movhi.w	r0, #4294967295
 801465a:	bf98      	it	ls
 801465c:	2001      	movls	r0, #1
 801465e:	4770      	bx	lr
 8014660:	4608      	mov	r0, r1
 8014662:	4770      	bx	lr

08014664 <__ssputs_r>:
 8014664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014668:	688e      	ldr	r6, [r1, #8]
 801466a:	461f      	mov	r7, r3
 801466c:	42be      	cmp	r6, r7
 801466e:	680b      	ldr	r3, [r1, #0]
 8014670:	4682      	mov	sl, r0
 8014672:	460c      	mov	r4, r1
 8014674:	4690      	mov	r8, r2
 8014676:	d82c      	bhi.n	80146d2 <__ssputs_r+0x6e>
 8014678:	898a      	ldrh	r2, [r1, #12]
 801467a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801467e:	d026      	beq.n	80146ce <__ssputs_r+0x6a>
 8014680:	6965      	ldr	r5, [r4, #20]
 8014682:	6909      	ldr	r1, [r1, #16]
 8014684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014688:	eba3 0901 	sub.w	r9, r3, r1
 801468c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014690:	1c7b      	adds	r3, r7, #1
 8014692:	444b      	add	r3, r9
 8014694:	106d      	asrs	r5, r5, #1
 8014696:	429d      	cmp	r5, r3
 8014698:	bf38      	it	cc
 801469a:	461d      	movcc	r5, r3
 801469c:	0553      	lsls	r3, r2, #21
 801469e:	d527      	bpl.n	80146f0 <__ssputs_r+0x8c>
 80146a0:	4629      	mov	r1, r5
 80146a2:	f7fc f83d 	bl	8010720 <_malloc_r>
 80146a6:	4606      	mov	r6, r0
 80146a8:	b360      	cbz	r0, 8014704 <__ssputs_r+0xa0>
 80146aa:	6921      	ldr	r1, [r4, #16]
 80146ac:	464a      	mov	r2, r9
 80146ae:	f7fe f8b4 	bl	801281a <memcpy>
 80146b2:	89a3      	ldrh	r3, [r4, #12]
 80146b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80146b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146bc:	81a3      	strh	r3, [r4, #12]
 80146be:	6126      	str	r6, [r4, #16]
 80146c0:	6165      	str	r5, [r4, #20]
 80146c2:	444e      	add	r6, r9
 80146c4:	eba5 0509 	sub.w	r5, r5, r9
 80146c8:	6026      	str	r6, [r4, #0]
 80146ca:	60a5      	str	r5, [r4, #8]
 80146cc:	463e      	mov	r6, r7
 80146ce:	42be      	cmp	r6, r7
 80146d0:	d900      	bls.n	80146d4 <__ssputs_r+0x70>
 80146d2:	463e      	mov	r6, r7
 80146d4:	6820      	ldr	r0, [r4, #0]
 80146d6:	4632      	mov	r2, r6
 80146d8:	4641      	mov	r1, r8
 80146da:	f000 f9db 	bl	8014a94 <memmove>
 80146de:	68a3      	ldr	r3, [r4, #8]
 80146e0:	1b9b      	subs	r3, r3, r6
 80146e2:	60a3      	str	r3, [r4, #8]
 80146e4:	6823      	ldr	r3, [r4, #0]
 80146e6:	4433      	add	r3, r6
 80146e8:	6023      	str	r3, [r4, #0]
 80146ea:	2000      	movs	r0, #0
 80146ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146f0:	462a      	mov	r2, r5
 80146f2:	f000 fa06 	bl	8014b02 <_realloc_r>
 80146f6:	4606      	mov	r6, r0
 80146f8:	2800      	cmp	r0, #0
 80146fa:	d1e0      	bne.n	80146be <__ssputs_r+0x5a>
 80146fc:	6921      	ldr	r1, [r4, #16]
 80146fe:	4650      	mov	r0, sl
 8014700:	f7fe ff40 	bl	8013584 <_free_r>
 8014704:	230c      	movs	r3, #12
 8014706:	f8ca 3000 	str.w	r3, [sl]
 801470a:	89a3      	ldrh	r3, [r4, #12]
 801470c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014710:	81a3      	strh	r3, [r4, #12]
 8014712:	f04f 30ff 	mov.w	r0, #4294967295
 8014716:	e7e9      	b.n	80146ec <__ssputs_r+0x88>

08014718 <_svfiprintf_r>:
 8014718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801471c:	4698      	mov	r8, r3
 801471e:	898b      	ldrh	r3, [r1, #12]
 8014720:	061b      	lsls	r3, r3, #24
 8014722:	b09d      	sub	sp, #116	; 0x74
 8014724:	4607      	mov	r7, r0
 8014726:	460d      	mov	r5, r1
 8014728:	4614      	mov	r4, r2
 801472a:	d50e      	bpl.n	801474a <_svfiprintf_r+0x32>
 801472c:	690b      	ldr	r3, [r1, #16]
 801472e:	b963      	cbnz	r3, 801474a <_svfiprintf_r+0x32>
 8014730:	2140      	movs	r1, #64	; 0x40
 8014732:	f7fb fff5 	bl	8010720 <_malloc_r>
 8014736:	6028      	str	r0, [r5, #0]
 8014738:	6128      	str	r0, [r5, #16]
 801473a:	b920      	cbnz	r0, 8014746 <_svfiprintf_r+0x2e>
 801473c:	230c      	movs	r3, #12
 801473e:	603b      	str	r3, [r7, #0]
 8014740:	f04f 30ff 	mov.w	r0, #4294967295
 8014744:	e0d0      	b.n	80148e8 <_svfiprintf_r+0x1d0>
 8014746:	2340      	movs	r3, #64	; 0x40
 8014748:	616b      	str	r3, [r5, #20]
 801474a:	2300      	movs	r3, #0
 801474c:	9309      	str	r3, [sp, #36]	; 0x24
 801474e:	2320      	movs	r3, #32
 8014750:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014754:	f8cd 800c 	str.w	r8, [sp, #12]
 8014758:	2330      	movs	r3, #48	; 0x30
 801475a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014900 <_svfiprintf_r+0x1e8>
 801475e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014762:	f04f 0901 	mov.w	r9, #1
 8014766:	4623      	mov	r3, r4
 8014768:	469a      	mov	sl, r3
 801476a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801476e:	b10a      	cbz	r2, 8014774 <_svfiprintf_r+0x5c>
 8014770:	2a25      	cmp	r2, #37	; 0x25
 8014772:	d1f9      	bne.n	8014768 <_svfiprintf_r+0x50>
 8014774:	ebba 0b04 	subs.w	fp, sl, r4
 8014778:	d00b      	beq.n	8014792 <_svfiprintf_r+0x7a>
 801477a:	465b      	mov	r3, fp
 801477c:	4622      	mov	r2, r4
 801477e:	4629      	mov	r1, r5
 8014780:	4638      	mov	r0, r7
 8014782:	f7ff ff6f 	bl	8014664 <__ssputs_r>
 8014786:	3001      	adds	r0, #1
 8014788:	f000 80a9 	beq.w	80148de <_svfiprintf_r+0x1c6>
 801478c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801478e:	445a      	add	r2, fp
 8014790:	9209      	str	r2, [sp, #36]	; 0x24
 8014792:	f89a 3000 	ldrb.w	r3, [sl]
 8014796:	2b00      	cmp	r3, #0
 8014798:	f000 80a1 	beq.w	80148de <_svfiprintf_r+0x1c6>
 801479c:	2300      	movs	r3, #0
 801479e:	f04f 32ff 	mov.w	r2, #4294967295
 80147a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80147a6:	f10a 0a01 	add.w	sl, sl, #1
 80147aa:	9304      	str	r3, [sp, #16]
 80147ac:	9307      	str	r3, [sp, #28]
 80147ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80147b2:	931a      	str	r3, [sp, #104]	; 0x68
 80147b4:	4654      	mov	r4, sl
 80147b6:	2205      	movs	r2, #5
 80147b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147bc:	4850      	ldr	r0, [pc, #320]	; (8014900 <_svfiprintf_r+0x1e8>)
 80147be:	f7eb fd07 	bl	80001d0 <memchr>
 80147c2:	9a04      	ldr	r2, [sp, #16]
 80147c4:	b9d8      	cbnz	r0, 80147fe <_svfiprintf_r+0xe6>
 80147c6:	06d0      	lsls	r0, r2, #27
 80147c8:	bf44      	itt	mi
 80147ca:	2320      	movmi	r3, #32
 80147cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147d0:	0711      	lsls	r1, r2, #28
 80147d2:	bf44      	itt	mi
 80147d4:	232b      	movmi	r3, #43	; 0x2b
 80147d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80147da:	f89a 3000 	ldrb.w	r3, [sl]
 80147de:	2b2a      	cmp	r3, #42	; 0x2a
 80147e0:	d015      	beq.n	801480e <_svfiprintf_r+0xf6>
 80147e2:	9a07      	ldr	r2, [sp, #28]
 80147e4:	4654      	mov	r4, sl
 80147e6:	2000      	movs	r0, #0
 80147e8:	f04f 0c0a 	mov.w	ip, #10
 80147ec:	4621      	mov	r1, r4
 80147ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80147f2:	3b30      	subs	r3, #48	; 0x30
 80147f4:	2b09      	cmp	r3, #9
 80147f6:	d94d      	bls.n	8014894 <_svfiprintf_r+0x17c>
 80147f8:	b1b0      	cbz	r0, 8014828 <_svfiprintf_r+0x110>
 80147fa:	9207      	str	r2, [sp, #28]
 80147fc:	e014      	b.n	8014828 <_svfiprintf_r+0x110>
 80147fe:	eba0 0308 	sub.w	r3, r0, r8
 8014802:	fa09 f303 	lsl.w	r3, r9, r3
 8014806:	4313      	orrs	r3, r2
 8014808:	9304      	str	r3, [sp, #16]
 801480a:	46a2      	mov	sl, r4
 801480c:	e7d2      	b.n	80147b4 <_svfiprintf_r+0x9c>
 801480e:	9b03      	ldr	r3, [sp, #12]
 8014810:	1d19      	adds	r1, r3, #4
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	9103      	str	r1, [sp, #12]
 8014816:	2b00      	cmp	r3, #0
 8014818:	bfbb      	ittet	lt
 801481a:	425b      	neglt	r3, r3
 801481c:	f042 0202 	orrlt.w	r2, r2, #2
 8014820:	9307      	strge	r3, [sp, #28]
 8014822:	9307      	strlt	r3, [sp, #28]
 8014824:	bfb8      	it	lt
 8014826:	9204      	strlt	r2, [sp, #16]
 8014828:	7823      	ldrb	r3, [r4, #0]
 801482a:	2b2e      	cmp	r3, #46	; 0x2e
 801482c:	d10c      	bne.n	8014848 <_svfiprintf_r+0x130>
 801482e:	7863      	ldrb	r3, [r4, #1]
 8014830:	2b2a      	cmp	r3, #42	; 0x2a
 8014832:	d134      	bne.n	801489e <_svfiprintf_r+0x186>
 8014834:	9b03      	ldr	r3, [sp, #12]
 8014836:	1d1a      	adds	r2, r3, #4
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	9203      	str	r2, [sp, #12]
 801483c:	2b00      	cmp	r3, #0
 801483e:	bfb8      	it	lt
 8014840:	f04f 33ff 	movlt.w	r3, #4294967295
 8014844:	3402      	adds	r4, #2
 8014846:	9305      	str	r3, [sp, #20]
 8014848:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014910 <_svfiprintf_r+0x1f8>
 801484c:	7821      	ldrb	r1, [r4, #0]
 801484e:	2203      	movs	r2, #3
 8014850:	4650      	mov	r0, sl
 8014852:	f7eb fcbd 	bl	80001d0 <memchr>
 8014856:	b138      	cbz	r0, 8014868 <_svfiprintf_r+0x150>
 8014858:	9b04      	ldr	r3, [sp, #16]
 801485a:	eba0 000a 	sub.w	r0, r0, sl
 801485e:	2240      	movs	r2, #64	; 0x40
 8014860:	4082      	lsls	r2, r0
 8014862:	4313      	orrs	r3, r2
 8014864:	3401      	adds	r4, #1
 8014866:	9304      	str	r3, [sp, #16]
 8014868:	f814 1b01 	ldrb.w	r1, [r4], #1
 801486c:	4825      	ldr	r0, [pc, #148]	; (8014904 <_svfiprintf_r+0x1ec>)
 801486e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014872:	2206      	movs	r2, #6
 8014874:	f7eb fcac 	bl	80001d0 <memchr>
 8014878:	2800      	cmp	r0, #0
 801487a:	d038      	beq.n	80148ee <_svfiprintf_r+0x1d6>
 801487c:	4b22      	ldr	r3, [pc, #136]	; (8014908 <_svfiprintf_r+0x1f0>)
 801487e:	bb1b      	cbnz	r3, 80148c8 <_svfiprintf_r+0x1b0>
 8014880:	9b03      	ldr	r3, [sp, #12]
 8014882:	3307      	adds	r3, #7
 8014884:	f023 0307 	bic.w	r3, r3, #7
 8014888:	3308      	adds	r3, #8
 801488a:	9303      	str	r3, [sp, #12]
 801488c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801488e:	4433      	add	r3, r6
 8014890:	9309      	str	r3, [sp, #36]	; 0x24
 8014892:	e768      	b.n	8014766 <_svfiprintf_r+0x4e>
 8014894:	fb0c 3202 	mla	r2, ip, r2, r3
 8014898:	460c      	mov	r4, r1
 801489a:	2001      	movs	r0, #1
 801489c:	e7a6      	b.n	80147ec <_svfiprintf_r+0xd4>
 801489e:	2300      	movs	r3, #0
 80148a0:	3401      	adds	r4, #1
 80148a2:	9305      	str	r3, [sp, #20]
 80148a4:	4619      	mov	r1, r3
 80148a6:	f04f 0c0a 	mov.w	ip, #10
 80148aa:	4620      	mov	r0, r4
 80148ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80148b0:	3a30      	subs	r2, #48	; 0x30
 80148b2:	2a09      	cmp	r2, #9
 80148b4:	d903      	bls.n	80148be <_svfiprintf_r+0x1a6>
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d0c6      	beq.n	8014848 <_svfiprintf_r+0x130>
 80148ba:	9105      	str	r1, [sp, #20]
 80148bc:	e7c4      	b.n	8014848 <_svfiprintf_r+0x130>
 80148be:	fb0c 2101 	mla	r1, ip, r1, r2
 80148c2:	4604      	mov	r4, r0
 80148c4:	2301      	movs	r3, #1
 80148c6:	e7f0      	b.n	80148aa <_svfiprintf_r+0x192>
 80148c8:	ab03      	add	r3, sp, #12
 80148ca:	9300      	str	r3, [sp, #0]
 80148cc:	462a      	mov	r2, r5
 80148ce:	4b0f      	ldr	r3, [pc, #60]	; (801490c <_svfiprintf_r+0x1f4>)
 80148d0:	a904      	add	r1, sp, #16
 80148d2:	4638      	mov	r0, r7
 80148d4:	f7fc ff56 	bl	8011784 <_printf_float>
 80148d8:	1c42      	adds	r2, r0, #1
 80148da:	4606      	mov	r6, r0
 80148dc:	d1d6      	bne.n	801488c <_svfiprintf_r+0x174>
 80148de:	89ab      	ldrh	r3, [r5, #12]
 80148e0:	065b      	lsls	r3, r3, #25
 80148e2:	f53f af2d 	bmi.w	8014740 <_svfiprintf_r+0x28>
 80148e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80148e8:	b01d      	add	sp, #116	; 0x74
 80148ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ee:	ab03      	add	r3, sp, #12
 80148f0:	9300      	str	r3, [sp, #0]
 80148f2:	462a      	mov	r2, r5
 80148f4:	4b05      	ldr	r3, [pc, #20]	; (801490c <_svfiprintf_r+0x1f4>)
 80148f6:	a904      	add	r1, sp, #16
 80148f8:	4638      	mov	r0, r7
 80148fa:	f7fd f9e7 	bl	8011ccc <_printf_i>
 80148fe:	e7eb      	b.n	80148d8 <_svfiprintf_r+0x1c0>
 8014900:	080186cc 	.word	0x080186cc
 8014904:	080186d6 	.word	0x080186d6
 8014908:	08011785 	.word	0x08011785
 801490c:	08014665 	.word	0x08014665
 8014910:	080186d2 	.word	0x080186d2

08014914 <__sflush_r>:
 8014914:	898a      	ldrh	r2, [r1, #12]
 8014916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801491a:	4605      	mov	r5, r0
 801491c:	0710      	lsls	r0, r2, #28
 801491e:	460c      	mov	r4, r1
 8014920:	d458      	bmi.n	80149d4 <__sflush_r+0xc0>
 8014922:	684b      	ldr	r3, [r1, #4]
 8014924:	2b00      	cmp	r3, #0
 8014926:	dc05      	bgt.n	8014934 <__sflush_r+0x20>
 8014928:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801492a:	2b00      	cmp	r3, #0
 801492c:	dc02      	bgt.n	8014934 <__sflush_r+0x20>
 801492e:	2000      	movs	r0, #0
 8014930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014934:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014936:	2e00      	cmp	r6, #0
 8014938:	d0f9      	beq.n	801492e <__sflush_r+0x1a>
 801493a:	2300      	movs	r3, #0
 801493c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014940:	682f      	ldr	r7, [r5, #0]
 8014942:	6a21      	ldr	r1, [r4, #32]
 8014944:	602b      	str	r3, [r5, #0]
 8014946:	d032      	beq.n	80149ae <__sflush_r+0x9a>
 8014948:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801494a:	89a3      	ldrh	r3, [r4, #12]
 801494c:	075a      	lsls	r2, r3, #29
 801494e:	d505      	bpl.n	801495c <__sflush_r+0x48>
 8014950:	6863      	ldr	r3, [r4, #4]
 8014952:	1ac0      	subs	r0, r0, r3
 8014954:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014956:	b10b      	cbz	r3, 801495c <__sflush_r+0x48>
 8014958:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801495a:	1ac0      	subs	r0, r0, r3
 801495c:	2300      	movs	r3, #0
 801495e:	4602      	mov	r2, r0
 8014960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014962:	6a21      	ldr	r1, [r4, #32]
 8014964:	4628      	mov	r0, r5
 8014966:	47b0      	blx	r6
 8014968:	1c43      	adds	r3, r0, #1
 801496a:	89a3      	ldrh	r3, [r4, #12]
 801496c:	d106      	bne.n	801497c <__sflush_r+0x68>
 801496e:	6829      	ldr	r1, [r5, #0]
 8014970:	291d      	cmp	r1, #29
 8014972:	d82b      	bhi.n	80149cc <__sflush_r+0xb8>
 8014974:	4a29      	ldr	r2, [pc, #164]	; (8014a1c <__sflush_r+0x108>)
 8014976:	410a      	asrs	r2, r1
 8014978:	07d6      	lsls	r6, r2, #31
 801497a:	d427      	bmi.n	80149cc <__sflush_r+0xb8>
 801497c:	2200      	movs	r2, #0
 801497e:	6062      	str	r2, [r4, #4]
 8014980:	04d9      	lsls	r1, r3, #19
 8014982:	6922      	ldr	r2, [r4, #16]
 8014984:	6022      	str	r2, [r4, #0]
 8014986:	d504      	bpl.n	8014992 <__sflush_r+0x7e>
 8014988:	1c42      	adds	r2, r0, #1
 801498a:	d101      	bne.n	8014990 <__sflush_r+0x7c>
 801498c:	682b      	ldr	r3, [r5, #0]
 801498e:	b903      	cbnz	r3, 8014992 <__sflush_r+0x7e>
 8014990:	6560      	str	r0, [r4, #84]	; 0x54
 8014992:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014994:	602f      	str	r7, [r5, #0]
 8014996:	2900      	cmp	r1, #0
 8014998:	d0c9      	beq.n	801492e <__sflush_r+0x1a>
 801499a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801499e:	4299      	cmp	r1, r3
 80149a0:	d002      	beq.n	80149a8 <__sflush_r+0x94>
 80149a2:	4628      	mov	r0, r5
 80149a4:	f7fe fdee 	bl	8013584 <_free_r>
 80149a8:	2000      	movs	r0, #0
 80149aa:	6360      	str	r0, [r4, #52]	; 0x34
 80149ac:	e7c0      	b.n	8014930 <__sflush_r+0x1c>
 80149ae:	2301      	movs	r3, #1
 80149b0:	4628      	mov	r0, r5
 80149b2:	47b0      	blx	r6
 80149b4:	1c41      	adds	r1, r0, #1
 80149b6:	d1c8      	bne.n	801494a <__sflush_r+0x36>
 80149b8:	682b      	ldr	r3, [r5, #0]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d0c5      	beq.n	801494a <__sflush_r+0x36>
 80149be:	2b1d      	cmp	r3, #29
 80149c0:	d001      	beq.n	80149c6 <__sflush_r+0xb2>
 80149c2:	2b16      	cmp	r3, #22
 80149c4:	d101      	bne.n	80149ca <__sflush_r+0xb6>
 80149c6:	602f      	str	r7, [r5, #0]
 80149c8:	e7b1      	b.n	801492e <__sflush_r+0x1a>
 80149ca:	89a3      	ldrh	r3, [r4, #12]
 80149cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149d0:	81a3      	strh	r3, [r4, #12]
 80149d2:	e7ad      	b.n	8014930 <__sflush_r+0x1c>
 80149d4:	690f      	ldr	r7, [r1, #16]
 80149d6:	2f00      	cmp	r7, #0
 80149d8:	d0a9      	beq.n	801492e <__sflush_r+0x1a>
 80149da:	0793      	lsls	r3, r2, #30
 80149dc:	680e      	ldr	r6, [r1, #0]
 80149de:	bf08      	it	eq
 80149e0:	694b      	ldreq	r3, [r1, #20]
 80149e2:	600f      	str	r7, [r1, #0]
 80149e4:	bf18      	it	ne
 80149e6:	2300      	movne	r3, #0
 80149e8:	eba6 0807 	sub.w	r8, r6, r7
 80149ec:	608b      	str	r3, [r1, #8]
 80149ee:	f1b8 0f00 	cmp.w	r8, #0
 80149f2:	dd9c      	ble.n	801492e <__sflush_r+0x1a>
 80149f4:	6a21      	ldr	r1, [r4, #32]
 80149f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80149f8:	4643      	mov	r3, r8
 80149fa:	463a      	mov	r2, r7
 80149fc:	4628      	mov	r0, r5
 80149fe:	47b0      	blx	r6
 8014a00:	2800      	cmp	r0, #0
 8014a02:	dc06      	bgt.n	8014a12 <__sflush_r+0xfe>
 8014a04:	89a3      	ldrh	r3, [r4, #12]
 8014a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a0a:	81a3      	strh	r3, [r4, #12]
 8014a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a10:	e78e      	b.n	8014930 <__sflush_r+0x1c>
 8014a12:	4407      	add	r7, r0
 8014a14:	eba8 0800 	sub.w	r8, r8, r0
 8014a18:	e7e9      	b.n	80149ee <__sflush_r+0xda>
 8014a1a:	bf00      	nop
 8014a1c:	dfbffffe 	.word	0xdfbffffe

08014a20 <_fflush_r>:
 8014a20:	b538      	push	{r3, r4, r5, lr}
 8014a22:	690b      	ldr	r3, [r1, #16]
 8014a24:	4605      	mov	r5, r0
 8014a26:	460c      	mov	r4, r1
 8014a28:	b913      	cbnz	r3, 8014a30 <_fflush_r+0x10>
 8014a2a:	2500      	movs	r5, #0
 8014a2c:	4628      	mov	r0, r5
 8014a2e:	bd38      	pop	{r3, r4, r5, pc}
 8014a30:	b118      	cbz	r0, 8014a3a <_fflush_r+0x1a>
 8014a32:	6a03      	ldr	r3, [r0, #32]
 8014a34:	b90b      	cbnz	r3, 8014a3a <_fflush_r+0x1a>
 8014a36:	f7fd fd07 	bl	8012448 <__sinit>
 8014a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d0f3      	beq.n	8014a2a <_fflush_r+0xa>
 8014a42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014a44:	07d0      	lsls	r0, r2, #31
 8014a46:	d404      	bmi.n	8014a52 <_fflush_r+0x32>
 8014a48:	0599      	lsls	r1, r3, #22
 8014a4a:	d402      	bmi.n	8014a52 <_fflush_r+0x32>
 8014a4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a4e:	f7fd feda 	bl	8012806 <__retarget_lock_acquire_recursive>
 8014a52:	4628      	mov	r0, r5
 8014a54:	4621      	mov	r1, r4
 8014a56:	f7ff ff5d 	bl	8014914 <__sflush_r>
 8014a5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a5c:	07da      	lsls	r2, r3, #31
 8014a5e:	4605      	mov	r5, r0
 8014a60:	d4e4      	bmi.n	8014a2c <_fflush_r+0xc>
 8014a62:	89a3      	ldrh	r3, [r4, #12]
 8014a64:	059b      	lsls	r3, r3, #22
 8014a66:	d4e1      	bmi.n	8014a2c <_fflush_r+0xc>
 8014a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a6a:	f7fd fecd 	bl	8012808 <__retarget_lock_release_recursive>
 8014a6e:	e7dd      	b.n	8014a2c <_fflush_r+0xc>

08014a70 <fiprintf>:
 8014a70:	b40e      	push	{r1, r2, r3}
 8014a72:	b503      	push	{r0, r1, lr}
 8014a74:	4601      	mov	r1, r0
 8014a76:	ab03      	add	r3, sp, #12
 8014a78:	4805      	ldr	r0, [pc, #20]	; (8014a90 <fiprintf+0x20>)
 8014a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014a7e:	6800      	ldr	r0, [r0, #0]
 8014a80:	9301      	str	r3, [sp, #4]
 8014a82:	f000 f897 	bl	8014bb4 <_vfiprintf_r>
 8014a86:	b002      	add	sp, #8
 8014a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8014a8c:	b003      	add	sp, #12
 8014a8e:	4770      	bx	lr
 8014a90:	20000304 	.word	0x20000304

08014a94 <memmove>:
 8014a94:	4288      	cmp	r0, r1
 8014a96:	b510      	push	{r4, lr}
 8014a98:	eb01 0402 	add.w	r4, r1, r2
 8014a9c:	d902      	bls.n	8014aa4 <memmove+0x10>
 8014a9e:	4284      	cmp	r4, r0
 8014aa0:	4623      	mov	r3, r4
 8014aa2:	d807      	bhi.n	8014ab4 <memmove+0x20>
 8014aa4:	1e43      	subs	r3, r0, #1
 8014aa6:	42a1      	cmp	r1, r4
 8014aa8:	d008      	beq.n	8014abc <memmove+0x28>
 8014aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014aae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014ab2:	e7f8      	b.n	8014aa6 <memmove+0x12>
 8014ab4:	4402      	add	r2, r0
 8014ab6:	4601      	mov	r1, r0
 8014ab8:	428a      	cmp	r2, r1
 8014aba:	d100      	bne.n	8014abe <memmove+0x2a>
 8014abc:	bd10      	pop	{r4, pc}
 8014abe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ac6:	e7f7      	b.n	8014ab8 <memmove+0x24>

08014ac8 <abort>:
 8014ac8:	b508      	push	{r3, lr}
 8014aca:	2006      	movs	r0, #6
 8014acc:	f000 fa4a 	bl	8014f64 <raise>
 8014ad0:	2001      	movs	r0, #1
 8014ad2:	f7ef fcbd 	bl	8004450 <_exit>

08014ad6 <_calloc_r>:
 8014ad6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ad8:	fba1 2402 	umull	r2, r4, r1, r2
 8014adc:	b94c      	cbnz	r4, 8014af2 <_calloc_r+0x1c>
 8014ade:	4611      	mov	r1, r2
 8014ae0:	9201      	str	r2, [sp, #4]
 8014ae2:	f7fb fe1d 	bl	8010720 <_malloc_r>
 8014ae6:	9a01      	ldr	r2, [sp, #4]
 8014ae8:	4605      	mov	r5, r0
 8014aea:	b930      	cbnz	r0, 8014afa <_calloc_r+0x24>
 8014aec:	4628      	mov	r0, r5
 8014aee:	b003      	add	sp, #12
 8014af0:	bd30      	pop	{r4, r5, pc}
 8014af2:	220c      	movs	r2, #12
 8014af4:	6002      	str	r2, [r0, #0]
 8014af6:	2500      	movs	r5, #0
 8014af8:	e7f8      	b.n	8014aec <_calloc_r+0x16>
 8014afa:	4621      	mov	r1, r4
 8014afc:	f7fd fd71 	bl	80125e2 <memset>
 8014b00:	e7f4      	b.n	8014aec <_calloc_r+0x16>

08014b02 <_realloc_r>:
 8014b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b06:	4680      	mov	r8, r0
 8014b08:	4614      	mov	r4, r2
 8014b0a:	460e      	mov	r6, r1
 8014b0c:	b921      	cbnz	r1, 8014b18 <_realloc_r+0x16>
 8014b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b12:	4611      	mov	r1, r2
 8014b14:	f7fb be04 	b.w	8010720 <_malloc_r>
 8014b18:	b92a      	cbnz	r2, 8014b26 <_realloc_r+0x24>
 8014b1a:	f7fe fd33 	bl	8013584 <_free_r>
 8014b1e:	4625      	mov	r5, r4
 8014b20:	4628      	mov	r0, r5
 8014b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b26:	f000 fa39 	bl	8014f9c <_malloc_usable_size_r>
 8014b2a:	4284      	cmp	r4, r0
 8014b2c:	4607      	mov	r7, r0
 8014b2e:	d802      	bhi.n	8014b36 <_realloc_r+0x34>
 8014b30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014b34:	d812      	bhi.n	8014b5c <_realloc_r+0x5a>
 8014b36:	4621      	mov	r1, r4
 8014b38:	4640      	mov	r0, r8
 8014b3a:	f7fb fdf1 	bl	8010720 <_malloc_r>
 8014b3e:	4605      	mov	r5, r0
 8014b40:	2800      	cmp	r0, #0
 8014b42:	d0ed      	beq.n	8014b20 <_realloc_r+0x1e>
 8014b44:	42bc      	cmp	r4, r7
 8014b46:	4622      	mov	r2, r4
 8014b48:	4631      	mov	r1, r6
 8014b4a:	bf28      	it	cs
 8014b4c:	463a      	movcs	r2, r7
 8014b4e:	f7fd fe64 	bl	801281a <memcpy>
 8014b52:	4631      	mov	r1, r6
 8014b54:	4640      	mov	r0, r8
 8014b56:	f7fe fd15 	bl	8013584 <_free_r>
 8014b5a:	e7e1      	b.n	8014b20 <_realloc_r+0x1e>
 8014b5c:	4635      	mov	r5, r6
 8014b5e:	e7df      	b.n	8014b20 <_realloc_r+0x1e>

08014b60 <__sfputc_r>:
 8014b60:	6893      	ldr	r3, [r2, #8]
 8014b62:	3b01      	subs	r3, #1
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	b410      	push	{r4}
 8014b68:	6093      	str	r3, [r2, #8]
 8014b6a:	da08      	bge.n	8014b7e <__sfputc_r+0x1e>
 8014b6c:	6994      	ldr	r4, [r2, #24]
 8014b6e:	42a3      	cmp	r3, r4
 8014b70:	db01      	blt.n	8014b76 <__sfputc_r+0x16>
 8014b72:	290a      	cmp	r1, #10
 8014b74:	d103      	bne.n	8014b7e <__sfputc_r+0x1e>
 8014b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b7a:	f000 b935 	b.w	8014de8 <__swbuf_r>
 8014b7e:	6813      	ldr	r3, [r2, #0]
 8014b80:	1c58      	adds	r0, r3, #1
 8014b82:	6010      	str	r0, [r2, #0]
 8014b84:	7019      	strb	r1, [r3, #0]
 8014b86:	4608      	mov	r0, r1
 8014b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b8c:	4770      	bx	lr

08014b8e <__sfputs_r>:
 8014b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b90:	4606      	mov	r6, r0
 8014b92:	460f      	mov	r7, r1
 8014b94:	4614      	mov	r4, r2
 8014b96:	18d5      	adds	r5, r2, r3
 8014b98:	42ac      	cmp	r4, r5
 8014b9a:	d101      	bne.n	8014ba0 <__sfputs_r+0x12>
 8014b9c:	2000      	movs	r0, #0
 8014b9e:	e007      	b.n	8014bb0 <__sfputs_r+0x22>
 8014ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014ba4:	463a      	mov	r2, r7
 8014ba6:	4630      	mov	r0, r6
 8014ba8:	f7ff ffda 	bl	8014b60 <__sfputc_r>
 8014bac:	1c43      	adds	r3, r0, #1
 8014bae:	d1f3      	bne.n	8014b98 <__sfputs_r+0xa>
 8014bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014bb4 <_vfiprintf_r>:
 8014bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb8:	460d      	mov	r5, r1
 8014bba:	b09d      	sub	sp, #116	; 0x74
 8014bbc:	4614      	mov	r4, r2
 8014bbe:	4698      	mov	r8, r3
 8014bc0:	4606      	mov	r6, r0
 8014bc2:	b118      	cbz	r0, 8014bcc <_vfiprintf_r+0x18>
 8014bc4:	6a03      	ldr	r3, [r0, #32]
 8014bc6:	b90b      	cbnz	r3, 8014bcc <_vfiprintf_r+0x18>
 8014bc8:	f7fd fc3e 	bl	8012448 <__sinit>
 8014bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014bce:	07d9      	lsls	r1, r3, #31
 8014bd0:	d405      	bmi.n	8014bde <_vfiprintf_r+0x2a>
 8014bd2:	89ab      	ldrh	r3, [r5, #12]
 8014bd4:	059a      	lsls	r2, r3, #22
 8014bd6:	d402      	bmi.n	8014bde <_vfiprintf_r+0x2a>
 8014bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014bda:	f7fd fe14 	bl	8012806 <__retarget_lock_acquire_recursive>
 8014bde:	89ab      	ldrh	r3, [r5, #12]
 8014be0:	071b      	lsls	r3, r3, #28
 8014be2:	d501      	bpl.n	8014be8 <_vfiprintf_r+0x34>
 8014be4:	692b      	ldr	r3, [r5, #16]
 8014be6:	b99b      	cbnz	r3, 8014c10 <_vfiprintf_r+0x5c>
 8014be8:	4629      	mov	r1, r5
 8014bea:	4630      	mov	r0, r6
 8014bec:	f000 f93a 	bl	8014e64 <__swsetup_r>
 8014bf0:	b170      	cbz	r0, 8014c10 <_vfiprintf_r+0x5c>
 8014bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014bf4:	07dc      	lsls	r4, r3, #31
 8014bf6:	d504      	bpl.n	8014c02 <_vfiprintf_r+0x4e>
 8014bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8014bfc:	b01d      	add	sp, #116	; 0x74
 8014bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c02:	89ab      	ldrh	r3, [r5, #12]
 8014c04:	0598      	lsls	r0, r3, #22
 8014c06:	d4f7      	bmi.n	8014bf8 <_vfiprintf_r+0x44>
 8014c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c0a:	f7fd fdfd 	bl	8012808 <__retarget_lock_release_recursive>
 8014c0e:	e7f3      	b.n	8014bf8 <_vfiprintf_r+0x44>
 8014c10:	2300      	movs	r3, #0
 8014c12:	9309      	str	r3, [sp, #36]	; 0x24
 8014c14:	2320      	movs	r3, #32
 8014c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c1e:	2330      	movs	r3, #48	; 0x30
 8014c20:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014dd4 <_vfiprintf_r+0x220>
 8014c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014c28:	f04f 0901 	mov.w	r9, #1
 8014c2c:	4623      	mov	r3, r4
 8014c2e:	469a      	mov	sl, r3
 8014c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c34:	b10a      	cbz	r2, 8014c3a <_vfiprintf_r+0x86>
 8014c36:	2a25      	cmp	r2, #37	; 0x25
 8014c38:	d1f9      	bne.n	8014c2e <_vfiprintf_r+0x7a>
 8014c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8014c3e:	d00b      	beq.n	8014c58 <_vfiprintf_r+0xa4>
 8014c40:	465b      	mov	r3, fp
 8014c42:	4622      	mov	r2, r4
 8014c44:	4629      	mov	r1, r5
 8014c46:	4630      	mov	r0, r6
 8014c48:	f7ff ffa1 	bl	8014b8e <__sfputs_r>
 8014c4c:	3001      	adds	r0, #1
 8014c4e:	f000 80a9 	beq.w	8014da4 <_vfiprintf_r+0x1f0>
 8014c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c54:	445a      	add	r2, fp
 8014c56:	9209      	str	r2, [sp, #36]	; 0x24
 8014c58:	f89a 3000 	ldrb.w	r3, [sl]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	f000 80a1 	beq.w	8014da4 <_vfiprintf_r+0x1f0>
 8014c62:	2300      	movs	r3, #0
 8014c64:	f04f 32ff 	mov.w	r2, #4294967295
 8014c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014c6c:	f10a 0a01 	add.w	sl, sl, #1
 8014c70:	9304      	str	r3, [sp, #16]
 8014c72:	9307      	str	r3, [sp, #28]
 8014c74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014c78:	931a      	str	r3, [sp, #104]	; 0x68
 8014c7a:	4654      	mov	r4, sl
 8014c7c:	2205      	movs	r2, #5
 8014c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c82:	4854      	ldr	r0, [pc, #336]	; (8014dd4 <_vfiprintf_r+0x220>)
 8014c84:	f7eb faa4 	bl	80001d0 <memchr>
 8014c88:	9a04      	ldr	r2, [sp, #16]
 8014c8a:	b9d8      	cbnz	r0, 8014cc4 <_vfiprintf_r+0x110>
 8014c8c:	06d1      	lsls	r1, r2, #27
 8014c8e:	bf44      	itt	mi
 8014c90:	2320      	movmi	r3, #32
 8014c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014c96:	0713      	lsls	r3, r2, #28
 8014c98:	bf44      	itt	mi
 8014c9a:	232b      	movmi	r3, #43	; 0x2b
 8014c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8014ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8014ca6:	d015      	beq.n	8014cd4 <_vfiprintf_r+0x120>
 8014ca8:	9a07      	ldr	r2, [sp, #28]
 8014caa:	4654      	mov	r4, sl
 8014cac:	2000      	movs	r0, #0
 8014cae:	f04f 0c0a 	mov.w	ip, #10
 8014cb2:	4621      	mov	r1, r4
 8014cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014cb8:	3b30      	subs	r3, #48	; 0x30
 8014cba:	2b09      	cmp	r3, #9
 8014cbc:	d94d      	bls.n	8014d5a <_vfiprintf_r+0x1a6>
 8014cbe:	b1b0      	cbz	r0, 8014cee <_vfiprintf_r+0x13a>
 8014cc0:	9207      	str	r2, [sp, #28]
 8014cc2:	e014      	b.n	8014cee <_vfiprintf_r+0x13a>
 8014cc4:	eba0 0308 	sub.w	r3, r0, r8
 8014cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8014ccc:	4313      	orrs	r3, r2
 8014cce:	9304      	str	r3, [sp, #16]
 8014cd0:	46a2      	mov	sl, r4
 8014cd2:	e7d2      	b.n	8014c7a <_vfiprintf_r+0xc6>
 8014cd4:	9b03      	ldr	r3, [sp, #12]
 8014cd6:	1d19      	adds	r1, r3, #4
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	9103      	str	r1, [sp, #12]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	bfbb      	ittet	lt
 8014ce0:	425b      	neglt	r3, r3
 8014ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8014ce6:	9307      	strge	r3, [sp, #28]
 8014ce8:	9307      	strlt	r3, [sp, #28]
 8014cea:	bfb8      	it	lt
 8014cec:	9204      	strlt	r2, [sp, #16]
 8014cee:	7823      	ldrb	r3, [r4, #0]
 8014cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8014cf2:	d10c      	bne.n	8014d0e <_vfiprintf_r+0x15a>
 8014cf4:	7863      	ldrb	r3, [r4, #1]
 8014cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8014cf8:	d134      	bne.n	8014d64 <_vfiprintf_r+0x1b0>
 8014cfa:	9b03      	ldr	r3, [sp, #12]
 8014cfc:	1d1a      	adds	r2, r3, #4
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	9203      	str	r2, [sp, #12]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	bfb8      	it	lt
 8014d06:	f04f 33ff 	movlt.w	r3, #4294967295
 8014d0a:	3402      	adds	r4, #2
 8014d0c:	9305      	str	r3, [sp, #20]
 8014d0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014de4 <_vfiprintf_r+0x230>
 8014d12:	7821      	ldrb	r1, [r4, #0]
 8014d14:	2203      	movs	r2, #3
 8014d16:	4650      	mov	r0, sl
 8014d18:	f7eb fa5a 	bl	80001d0 <memchr>
 8014d1c:	b138      	cbz	r0, 8014d2e <_vfiprintf_r+0x17a>
 8014d1e:	9b04      	ldr	r3, [sp, #16]
 8014d20:	eba0 000a 	sub.w	r0, r0, sl
 8014d24:	2240      	movs	r2, #64	; 0x40
 8014d26:	4082      	lsls	r2, r0
 8014d28:	4313      	orrs	r3, r2
 8014d2a:	3401      	adds	r4, #1
 8014d2c:	9304      	str	r3, [sp, #16]
 8014d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d32:	4829      	ldr	r0, [pc, #164]	; (8014dd8 <_vfiprintf_r+0x224>)
 8014d34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014d38:	2206      	movs	r2, #6
 8014d3a:	f7eb fa49 	bl	80001d0 <memchr>
 8014d3e:	2800      	cmp	r0, #0
 8014d40:	d03f      	beq.n	8014dc2 <_vfiprintf_r+0x20e>
 8014d42:	4b26      	ldr	r3, [pc, #152]	; (8014ddc <_vfiprintf_r+0x228>)
 8014d44:	bb1b      	cbnz	r3, 8014d8e <_vfiprintf_r+0x1da>
 8014d46:	9b03      	ldr	r3, [sp, #12]
 8014d48:	3307      	adds	r3, #7
 8014d4a:	f023 0307 	bic.w	r3, r3, #7
 8014d4e:	3308      	adds	r3, #8
 8014d50:	9303      	str	r3, [sp, #12]
 8014d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d54:	443b      	add	r3, r7
 8014d56:	9309      	str	r3, [sp, #36]	; 0x24
 8014d58:	e768      	b.n	8014c2c <_vfiprintf_r+0x78>
 8014d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014d5e:	460c      	mov	r4, r1
 8014d60:	2001      	movs	r0, #1
 8014d62:	e7a6      	b.n	8014cb2 <_vfiprintf_r+0xfe>
 8014d64:	2300      	movs	r3, #0
 8014d66:	3401      	adds	r4, #1
 8014d68:	9305      	str	r3, [sp, #20]
 8014d6a:	4619      	mov	r1, r3
 8014d6c:	f04f 0c0a 	mov.w	ip, #10
 8014d70:	4620      	mov	r0, r4
 8014d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d76:	3a30      	subs	r2, #48	; 0x30
 8014d78:	2a09      	cmp	r2, #9
 8014d7a:	d903      	bls.n	8014d84 <_vfiprintf_r+0x1d0>
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d0c6      	beq.n	8014d0e <_vfiprintf_r+0x15a>
 8014d80:	9105      	str	r1, [sp, #20]
 8014d82:	e7c4      	b.n	8014d0e <_vfiprintf_r+0x15a>
 8014d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d88:	4604      	mov	r4, r0
 8014d8a:	2301      	movs	r3, #1
 8014d8c:	e7f0      	b.n	8014d70 <_vfiprintf_r+0x1bc>
 8014d8e:	ab03      	add	r3, sp, #12
 8014d90:	9300      	str	r3, [sp, #0]
 8014d92:	462a      	mov	r2, r5
 8014d94:	4b12      	ldr	r3, [pc, #72]	; (8014de0 <_vfiprintf_r+0x22c>)
 8014d96:	a904      	add	r1, sp, #16
 8014d98:	4630      	mov	r0, r6
 8014d9a:	f7fc fcf3 	bl	8011784 <_printf_float>
 8014d9e:	4607      	mov	r7, r0
 8014da0:	1c78      	adds	r0, r7, #1
 8014da2:	d1d6      	bne.n	8014d52 <_vfiprintf_r+0x19e>
 8014da4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014da6:	07d9      	lsls	r1, r3, #31
 8014da8:	d405      	bmi.n	8014db6 <_vfiprintf_r+0x202>
 8014daa:	89ab      	ldrh	r3, [r5, #12]
 8014dac:	059a      	lsls	r2, r3, #22
 8014dae:	d402      	bmi.n	8014db6 <_vfiprintf_r+0x202>
 8014db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014db2:	f7fd fd29 	bl	8012808 <__retarget_lock_release_recursive>
 8014db6:	89ab      	ldrh	r3, [r5, #12]
 8014db8:	065b      	lsls	r3, r3, #25
 8014dba:	f53f af1d 	bmi.w	8014bf8 <_vfiprintf_r+0x44>
 8014dbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014dc0:	e71c      	b.n	8014bfc <_vfiprintf_r+0x48>
 8014dc2:	ab03      	add	r3, sp, #12
 8014dc4:	9300      	str	r3, [sp, #0]
 8014dc6:	462a      	mov	r2, r5
 8014dc8:	4b05      	ldr	r3, [pc, #20]	; (8014de0 <_vfiprintf_r+0x22c>)
 8014dca:	a904      	add	r1, sp, #16
 8014dcc:	4630      	mov	r0, r6
 8014dce:	f7fc ff7d 	bl	8011ccc <_printf_i>
 8014dd2:	e7e4      	b.n	8014d9e <_vfiprintf_r+0x1ea>
 8014dd4:	080186cc 	.word	0x080186cc
 8014dd8:	080186d6 	.word	0x080186d6
 8014ddc:	08011785 	.word	0x08011785
 8014de0:	08014b8f 	.word	0x08014b8f
 8014de4:	080186d2 	.word	0x080186d2

08014de8 <__swbuf_r>:
 8014de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dea:	460e      	mov	r6, r1
 8014dec:	4614      	mov	r4, r2
 8014dee:	4605      	mov	r5, r0
 8014df0:	b118      	cbz	r0, 8014dfa <__swbuf_r+0x12>
 8014df2:	6a03      	ldr	r3, [r0, #32]
 8014df4:	b90b      	cbnz	r3, 8014dfa <__swbuf_r+0x12>
 8014df6:	f7fd fb27 	bl	8012448 <__sinit>
 8014dfa:	69a3      	ldr	r3, [r4, #24]
 8014dfc:	60a3      	str	r3, [r4, #8]
 8014dfe:	89a3      	ldrh	r3, [r4, #12]
 8014e00:	071a      	lsls	r2, r3, #28
 8014e02:	d525      	bpl.n	8014e50 <__swbuf_r+0x68>
 8014e04:	6923      	ldr	r3, [r4, #16]
 8014e06:	b31b      	cbz	r3, 8014e50 <__swbuf_r+0x68>
 8014e08:	6823      	ldr	r3, [r4, #0]
 8014e0a:	6922      	ldr	r2, [r4, #16]
 8014e0c:	1a98      	subs	r0, r3, r2
 8014e0e:	6963      	ldr	r3, [r4, #20]
 8014e10:	b2f6      	uxtb	r6, r6
 8014e12:	4283      	cmp	r3, r0
 8014e14:	4637      	mov	r7, r6
 8014e16:	dc04      	bgt.n	8014e22 <__swbuf_r+0x3a>
 8014e18:	4621      	mov	r1, r4
 8014e1a:	4628      	mov	r0, r5
 8014e1c:	f7ff fe00 	bl	8014a20 <_fflush_r>
 8014e20:	b9e0      	cbnz	r0, 8014e5c <__swbuf_r+0x74>
 8014e22:	68a3      	ldr	r3, [r4, #8]
 8014e24:	3b01      	subs	r3, #1
 8014e26:	60a3      	str	r3, [r4, #8]
 8014e28:	6823      	ldr	r3, [r4, #0]
 8014e2a:	1c5a      	adds	r2, r3, #1
 8014e2c:	6022      	str	r2, [r4, #0]
 8014e2e:	701e      	strb	r6, [r3, #0]
 8014e30:	6962      	ldr	r2, [r4, #20]
 8014e32:	1c43      	adds	r3, r0, #1
 8014e34:	429a      	cmp	r2, r3
 8014e36:	d004      	beq.n	8014e42 <__swbuf_r+0x5a>
 8014e38:	89a3      	ldrh	r3, [r4, #12]
 8014e3a:	07db      	lsls	r3, r3, #31
 8014e3c:	d506      	bpl.n	8014e4c <__swbuf_r+0x64>
 8014e3e:	2e0a      	cmp	r6, #10
 8014e40:	d104      	bne.n	8014e4c <__swbuf_r+0x64>
 8014e42:	4621      	mov	r1, r4
 8014e44:	4628      	mov	r0, r5
 8014e46:	f7ff fdeb 	bl	8014a20 <_fflush_r>
 8014e4a:	b938      	cbnz	r0, 8014e5c <__swbuf_r+0x74>
 8014e4c:	4638      	mov	r0, r7
 8014e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e50:	4621      	mov	r1, r4
 8014e52:	4628      	mov	r0, r5
 8014e54:	f000 f806 	bl	8014e64 <__swsetup_r>
 8014e58:	2800      	cmp	r0, #0
 8014e5a:	d0d5      	beq.n	8014e08 <__swbuf_r+0x20>
 8014e5c:	f04f 37ff 	mov.w	r7, #4294967295
 8014e60:	e7f4      	b.n	8014e4c <__swbuf_r+0x64>
	...

08014e64 <__swsetup_r>:
 8014e64:	b538      	push	{r3, r4, r5, lr}
 8014e66:	4b2a      	ldr	r3, [pc, #168]	; (8014f10 <__swsetup_r+0xac>)
 8014e68:	4605      	mov	r5, r0
 8014e6a:	6818      	ldr	r0, [r3, #0]
 8014e6c:	460c      	mov	r4, r1
 8014e6e:	b118      	cbz	r0, 8014e78 <__swsetup_r+0x14>
 8014e70:	6a03      	ldr	r3, [r0, #32]
 8014e72:	b90b      	cbnz	r3, 8014e78 <__swsetup_r+0x14>
 8014e74:	f7fd fae8 	bl	8012448 <__sinit>
 8014e78:	89a3      	ldrh	r3, [r4, #12]
 8014e7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e7e:	0718      	lsls	r0, r3, #28
 8014e80:	d422      	bmi.n	8014ec8 <__swsetup_r+0x64>
 8014e82:	06d9      	lsls	r1, r3, #27
 8014e84:	d407      	bmi.n	8014e96 <__swsetup_r+0x32>
 8014e86:	2309      	movs	r3, #9
 8014e88:	602b      	str	r3, [r5, #0]
 8014e8a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014e8e:	81a3      	strh	r3, [r4, #12]
 8014e90:	f04f 30ff 	mov.w	r0, #4294967295
 8014e94:	e034      	b.n	8014f00 <__swsetup_r+0x9c>
 8014e96:	0758      	lsls	r0, r3, #29
 8014e98:	d512      	bpl.n	8014ec0 <__swsetup_r+0x5c>
 8014e9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e9c:	b141      	cbz	r1, 8014eb0 <__swsetup_r+0x4c>
 8014e9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ea2:	4299      	cmp	r1, r3
 8014ea4:	d002      	beq.n	8014eac <__swsetup_r+0x48>
 8014ea6:	4628      	mov	r0, r5
 8014ea8:	f7fe fb6c 	bl	8013584 <_free_r>
 8014eac:	2300      	movs	r3, #0
 8014eae:	6363      	str	r3, [r4, #52]	; 0x34
 8014eb0:	89a3      	ldrh	r3, [r4, #12]
 8014eb2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014eb6:	81a3      	strh	r3, [r4, #12]
 8014eb8:	2300      	movs	r3, #0
 8014eba:	6063      	str	r3, [r4, #4]
 8014ebc:	6923      	ldr	r3, [r4, #16]
 8014ebe:	6023      	str	r3, [r4, #0]
 8014ec0:	89a3      	ldrh	r3, [r4, #12]
 8014ec2:	f043 0308 	orr.w	r3, r3, #8
 8014ec6:	81a3      	strh	r3, [r4, #12]
 8014ec8:	6923      	ldr	r3, [r4, #16]
 8014eca:	b94b      	cbnz	r3, 8014ee0 <__swsetup_r+0x7c>
 8014ecc:	89a3      	ldrh	r3, [r4, #12]
 8014ece:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ed6:	d003      	beq.n	8014ee0 <__swsetup_r+0x7c>
 8014ed8:	4621      	mov	r1, r4
 8014eda:	4628      	mov	r0, r5
 8014edc:	f000 f88c 	bl	8014ff8 <__smakebuf_r>
 8014ee0:	89a0      	ldrh	r0, [r4, #12]
 8014ee2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014ee6:	f010 0301 	ands.w	r3, r0, #1
 8014eea:	d00a      	beq.n	8014f02 <__swsetup_r+0x9e>
 8014eec:	2300      	movs	r3, #0
 8014eee:	60a3      	str	r3, [r4, #8]
 8014ef0:	6963      	ldr	r3, [r4, #20]
 8014ef2:	425b      	negs	r3, r3
 8014ef4:	61a3      	str	r3, [r4, #24]
 8014ef6:	6923      	ldr	r3, [r4, #16]
 8014ef8:	b943      	cbnz	r3, 8014f0c <__swsetup_r+0xa8>
 8014efa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014efe:	d1c4      	bne.n	8014e8a <__swsetup_r+0x26>
 8014f00:	bd38      	pop	{r3, r4, r5, pc}
 8014f02:	0781      	lsls	r1, r0, #30
 8014f04:	bf58      	it	pl
 8014f06:	6963      	ldrpl	r3, [r4, #20]
 8014f08:	60a3      	str	r3, [r4, #8]
 8014f0a:	e7f4      	b.n	8014ef6 <__swsetup_r+0x92>
 8014f0c:	2000      	movs	r0, #0
 8014f0e:	e7f7      	b.n	8014f00 <__swsetup_r+0x9c>
 8014f10:	20000304 	.word	0x20000304

08014f14 <_raise_r>:
 8014f14:	291f      	cmp	r1, #31
 8014f16:	b538      	push	{r3, r4, r5, lr}
 8014f18:	4604      	mov	r4, r0
 8014f1a:	460d      	mov	r5, r1
 8014f1c:	d904      	bls.n	8014f28 <_raise_r+0x14>
 8014f1e:	2316      	movs	r3, #22
 8014f20:	6003      	str	r3, [r0, #0]
 8014f22:	f04f 30ff 	mov.w	r0, #4294967295
 8014f26:	bd38      	pop	{r3, r4, r5, pc}
 8014f28:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014f2a:	b112      	cbz	r2, 8014f32 <_raise_r+0x1e>
 8014f2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014f30:	b94b      	cbnz	r3, 8014f46 <_raise_r+0x32>
 8014f32:	4620      	mov	r0, r4
 8014f34:	f000 f830 	bl	8014f98 <_getpid_r>
 8014f38:	462a      	mov	r2, r5
 8014f3a:	4601      	mov	r1, r0
 8014f3c:	4620      	mov	r0, r4
 8014f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f42:	f000 b817 	b.w	8014f74 <_kill_r>
 8014f46:	2b01      	cmp	r3, #1
 8014f48:	d00a      	beq.n	8014f60 <_raise_r+0x4c>
 8014f4a:	1c59      	adds	r1, r3, #1
 8014f4c:	d103      	bne.n	8014f56 <_raise_r+0x42>
 8014f4e:	2316      	movs	r3, #22
 8014f50:	6003      	str	r3, [r0, #0]
 8014f52:	2001      	movs	r0, #1
 8014f54:	e7e7      	b.n	8014f26 <_raise_r+0x12>
 8014f56:	2400      	movs	r4, #0
 8014f58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014f5c:	4628      	mov	r0, r5
 8014f5e:	4798      	blx	r3
 8014f60:	2000      	movs	r0, #0
 8014f62:	e7e0      	b.n	8014f26 <_raise_r+0x12>

08014f64 <raise>:
 8014f64:	4b02      	ldr	r3, [pc, #8]	; (8014f70 <raise+0xc>)
 8014f66:	4601      	mov	r1, r0
 8014f68:	6818      	ldr	r0, [r3, #0]
 8014f6a:	f7ff bfd3 	b.w	8014f14 <_raise_r>
 8014f6e:	bf00      	nop
 8014f70:	20000304 	.word	0x20000304

08014f74 <_kill_r>:
 8014f74:	b538      	push	{r3, r4, r5, lr}
 8014f76:	4d07      	ldr	r5, [pc, #28]	; (8014f94 <_kill_r+0x20>)
 8014f78:	2300      	movs	r3, #0
 8014f7a:	4604      	mov	r4, r0
 8014f7c:	4608      	mov	r0, r1
 8014f7e:	4611      	mov	r1, r2
 8014f80:	602b      	str	r3, [r5, #0]
 8014f82:	f7ef fa55 	bl	8004430 <_kill>
 8014f86:	1c43      	adds	r3, r0, #1
 8014f88:	d102      	bne.n	8014f90 <_kill_r+0x1c>
 8014f8a:	682b      	ldr	r3, [r5, #0]
 8014f8c:	b103      	cbz	r3, 8014f90 <_kill_r+0x1c>
 8014f8e:	6023      	str	r3, [r4, #0]
 8014f90:	bd38      	pop	{r3, r4, r5, pc}
 8014f92:	bf00      	nop
 8014f94:	2000163c 	.word	0x2000163c

08014f98 <_getpid_r>:
 8014f98:	f7ef ba42 	b.w	8004420 <_getpid>

08014f9c <_malloc_usable_size_r>:
 8014f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014fa0:	1f18      	subs	r0, r3, #4
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	bfbc      	itt	lt
 8014fa6:	580b      	ldrlt	r3, [r1, r0]
 8014fa8:	18c0      	addlt	r0, r0, r3
 8014faa:	4770      	bx	lr

08014fac <__swhatbuf_r>:
 8014fac:	b570      	push	{r4, r5, r6, lr}
 8014fae:	460c      	mov	r4, r1
 8014fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014fb4:	2900      	cmp	r1, #0
 8014fb6:	b096      	sub	sp, #88	; 0x58
 8014fb8:	4615      	mov	r5, r2
 8014fba:	461e      	mov	r6, r3
 8014fbc:	da0d      	bge.n	8014fda <__swhatbuf_r+0x2e>
 8014fbe:	89a3      	ldrh	r3, [r4, #12]
 8014fc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014fc4:	f04f 0100 	mov.w	r1, #0
 8014fc8:	bf0c      	ite	eq
 8014fca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014fce:	2340      	movne	r3, #64	; 0x40
 8014fd0:	2000      	movs	r0, #0
 8014fd2:	6031      	str	r1, [r6, #0]
 8014fd4:	602b      	str	r3, [r5, #0]
 8014fd6:	b016      	add	sp, #88	; 0x58
 8014fd8:	bd70      	pop	{r4, r5, r6, pc}
 8014fda:	466a      	mov	r2, sp
 8014fdc:	f000 f848 	bl	8015070 <_fstat_r>
 8014fe0:	2800      	cmp	r0, #0
 8014fe2:	dbec      	blt.n	8014fbe <__swhatbuf_r+0x12>
 8014fe4:	9901      	ldr	r1, [sp, #4]
 8014fe6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014fea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014fee:	4259      	negs	r1, r3
 8014ff0:	4159      	adcs	r1, r3
 8014ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014ff6:	e7eb      	b.n	8014fd0 <__swhatbuf_r+0x24>

08014ff8 <__smakebuf_r>:
 8014ff8:	898b      	ldrh	r3, [r1, #12]
 8014ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014ffc:	079d      	lsls	r5, r3, #30
 8014ffe:	4606      	mov	r6, r0
 8015000:	460c      	mov	r4, r1
 8015002:	d507      	bpl.n	8015014 <__smakebuf_r+0x1c>
 8015004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015008:	6023      	str	r3, [r4, #0]
 801500a:	6123      	str	r3, [r4, #16]
 801500c:	2301      	movs	r3, #1
 801500e:	6163      	str	r3, [r4, #20]
 8015010:	b002      	add	sp, #8
 8015012:	bd70      	pop	{r4, r5, r6, pc}
 8015014:	ab01      	add	r3, sp, #4
 8015016:	466a      	mov	r2, sp
 8015018:	f7ff ffc8 	bl	8014fac <__swhatbuf_r>
 801501c:	9900      	ldr	r1, [sp, #0]
 801501e:	4605      	mov	r5, r0
 8015020:	4630      	mov	r0, r6
 8015022:	f7fb fb7d 	bl	8010720 <_malloc_r>
 8015026:	b948      	cbnz	r0, 801503c <__smakebuf_r+0x44>
 8015028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801502c:	059a      	lsls	r2, r3, #22
 801502e:	d4ef      	bmi.n	8015010 <__smakebuf_r+0x18>
 8015030:	f023 0303 	bic.w	r3, r3, #3
 8015034:	f043 0302 	orr.w	r3, r3, #2
 8015038:	81a3      	strh	r3, [r4, #12]
 801503a:	e7e3      	b.n	8015004 <__smakebuf_r+0xc>
 801503c:	89a3      	ldrh	r3, [r4, #12]
 801503e:	6020      	str	r0, [r4, #0]
 8015040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015044:	81a3      	strh	r3, [r4, #12]
 8015046:	9b00      	ldr	r3, [sp, #0]
 8015048:	6163      	str	r3, [r4, #20]
 801504a:	9b01      	ldr	r3, [sp, #4]
 801504c:	6120      	str	r0, [r4, #16]
 801504e:	b15b      	cbz	r3, 8015068 <__smakebuf_r+0x70>
 8015050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015054:	4630      	mov	r0, r6
 8015056:	f000 f81d 	bl	8015094 <_isatty_r>
 801505a:	b128      	cbz	r0, 8015068 <__smakebuf_r+0x70>
 801505c:	89a3      	ldrh	r3, [r4, #12]
 801505e:	f023 0303 	bic.w	r3, r3, #3
 8015062:	f043 0301 	orr.w	r3, r3, #1
 8015066:	81a3      	strh	r3, [r4, #12]
 8015068:	89a3      	ldrh	r3, [r4, #12]
 801506a:	431d      	orrs	r5, r3
 801506c:	81a5      	strh	r5, [r4, #12]
 801506e:	e7cf      	b.n	8015010 <__smakebuf_r+0x18>

08015070 <_fstat_r>:
 8015070:	b538      	push	{r3, r4, r5, lr}
 8015072:	4d07      	ldr	r5, [pc, #28]	; (8015090 <_fstat_r+0x20>)
 8015074:	2300      	movs	r3, #0
 8015076:	4604      	mov	r4, r0
 8015078:	4608      	mov	r0, r1
 801507a:	4611      	mov	r1, r2
 801507c:	602b      	str	r3, [r5, #0]
 801507e:	f7ef fa36 	bl	80044ee <_fstat>
 8015082:	1c43      	adds	r3, r0, #1
 8015084:	d102      	bne.n	801508c <_fstat_r+0x1c>
 8015086:	682b      	ldr	r3, [r5, #0]
 8015088:	b103      	cbz	r3, 801508c <_fstat_r+0x1c>
 801508a:	6023      	str	r3, [r4, #0]
 801508c:	bd38      	pop	{r3, r4, r5, pc}
 801508e:	bf00      	nop
 8015090:	2000163c 	.word	0x2000163c

08015094 <_isatty_r>:
 8015094:	b538      	push	{r3, r4, r5, lr}
 8015096:	4d06      	ldr	r5, [pc, #24]	; (80150b0 <_isatty_r+0x1c>)
 8015098:	2300      	movs	r3, #0
 801509a:	4604      	mov	r4, r0
 801509c:	4608      	mov	r0, r1
 801509e:	602b      	str	r3, [r5, #0]
 80150a0:	f7ef fa35 	bl	800450e <_isatty>
 80150a4:	1c43      	adds	r3, r0, #1
 80150a6:	d102      	bne.n	80150ae <_isatty_r+0x1a>
 80150a8:	682b      	ldr	r3, [r5, #0]
 80150aa:	b103      	cbz	r3, 80150ae <_isatty_r+0x1a>
 80150ac:	6023      	str	r3, [r4, #0]
 80150ae:	bd38      	pop	{r3, r4, r5, pc}
 80150b0:	2000163c 	.word	0x2000163c
 80150b4:	00000000 	.word	0x00000000

080150b8 <cos>:
 80150b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80150ba:	ec53 2b10 	vmov	r2, r3, d0
 80150be:	4826      	ldr	r0, [pc, #152]	; (8015158 <cos+0xa0>)
 80150c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80150c4:	4281      	cmp	r1, r0
 80150c6:	dc06      	bgt.n	80150d6 <cos+0x1e>
 80150c8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8015150 <cos+0x98>
 80150cc:	b005      	add	sp, #20
 80150ce:	f85d eb04 	ldr.w	lr, [sp], #4
 80150d2:	f000 b961 	b.w	8015398 <__kernel_cos>
 80150d6:	4821      	ldr	r0, [pc, #132]	; (801515c <cos+0xa4>)
 80150d8:	4281      	cmp	r1, r0
 80150da:	dd09      	ble.n	80150f0 <cos+0x38>
 80150dc:	ee10 0a10 	vmov	r0, s0
 80150e0:	4619      	mov	r1, r3
 80150e2:	f7eb f8d1 	bl	8000288 <__aeabi_dsub>
 80150e6:	ec41 0b10 	vmov	d0, r0, r1
 80150ea:	b005      	add	sp, #20
 80150ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80150f0:	4668      	mov	r0, sp
 80150f2:	f000 fad9 	bl	80156a8 <__ieee754_rem_pio2>
 80150f6:	f000 0003 	and.w	r0, r0, #3
 80150fa:	2801      	cmp	r0, #1
 80150fc:	d00b      	beq.n	8015116 <cos+0x5e>
 80150fe:	2802      	cmp	r0, #2
 8015100:	d016      	beq.n	8015130 <cos+0x78>
 8015102:	b9e0      	cbnz	r0, 801513e <cos+0x86>
 8015104:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015108:	ed9d 0b00 	vldr	d0, [sp]
 801510c:	f000 f944 	bl	8015398 <__kernel_cos>
 8015110:	ec51 0b10 	vmov	r0, r1, d0
 8015114:	e7e7      	b.n	80150e6 <cos+0x2e>
 8015116:	ed9d 1b02 	vldr	d1, [sp, #8]
 801511a:	ed9d 0b00 	vldr	d0, [sp]
 801511e:	f000 fa03 	bl	8015528 <__kernel_sin>
 8015122:	ec53 2b10 	vmov	r2, r3, d0
 8015126:	ee10 0a10 	vmov	r0, s0
 801512a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801512e:	e7da      	b.n	80150e6 <cos+0x2e>
 8015130:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015134:	ed9d 0b00 	vldr	d0, [sp]
 8015138:	f000 f92e 	bl	8015398 <__kernel_cos>
 801513c:	e7f1      	b.n	8015122 <cos+0x6a>
 801513e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015142:	ed9d 0b00 	vldr	d0, [sp]
 8015146:	2001      	movs	r0, #1
 8015148:	f000 f9ee 	bl	8015528 <__kernel_sin>
 801514c:	e7e0      	b.n	8015110 <cos+0x58>
 801514e:	bf00      	nop
	...
 8015158:	3fe921fb 	.word	0x3fe921fb
 801515c:	7fefffff 	.word	0x7fefffff

08015160 <sin>:
 8015160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015162:	ec53 2b10 	vmov	r2, r3, d0
 8015166:	4828      	ldr	r0, [pc, #160]	; (8015208 <sin+0xa8>)
 8015168:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801516c:	4281      	cmp	r1, r0
 801516e:	dc07      	bgt.n	8015180 <sin+0x20>
 8015170:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8015200 <sin+0xa0>
 8015174:	2000      	movs	r0, #0
 8015176:	b005      	add	sp, #20
 8015178:	f85d eb04 	ldr.w	lr, [sp], #4
 801517c:	f000 b9d4 	b.w	8015528 <__kernel_sin>
 8015180:	4822      	ldr	r0, [pc, #136]	; (801520c <sin+0xac>)
 8015182:	4281      	cmp	r1, r0
 8015184:	dd09      	ble.n	801519a <sin+0x3a>
 8015186:	ee10 0a10 	vmov	r0, s0
 801518a:	4619      	mov	r1, r3
 801518c:	f7eb f87c 	bl	8000288 <__aeabi_dsub>
 8015190:	ec41 0b10 	vmov	d0, r0, r1
 8015194:	b005      	add	sp, #20
 8015196:	f85d fb04 	ldr.w	pc, [sp], #4
 801519a:	4668      	mov	r0, sp
 801519c:	f000 fa84 	bl	80156a8 <__ieee754_rem_pio2>
 80151a0:	f000 0003 	and.w	r0, r0, #3
 80151a4:	2801      	cmp	r0, #1
 80151a6:	d00c      	beq.n	80151c2 <sin+0x62>
 80151a8:	2802      	cmp	r0, #2
 80151aa:	d011      	beq.n	80151d0 <sin+0x70>
 80151ac:	b9f0      	cbnz	r0, 80151ec <sin+0x8c>
 80151ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80151b2:	ed9d 0b00 	vldr	d0, [sp]
 80151b6:	2001      	movs	r0, #1
 80151b8:	f000 f9b6 	bl	8015528 <__kernel_sin>
 80151bc:	ec51 0b10 	vmov	r0, r1, d0
 80151c0:	e7e6      	b.n	8015190 <sin+0x30>
 80151c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80151c6:	ed9d 0b00 	vldr	d0, [sp]
 80151ca:	f000 f8e5 	bl	8015398 <__kernel_cos>
 80151ce:	e7f5      	b.n	80151bc <sin+0x5c>
 80151d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80151d4:	ed9d 0b00 	vldr	d0, [sp]
 80151d8:	2001      	movs	r0, #1
 80151da:	f000 f9a5 	bl	8015528 <__kernel_sin>
 80151de:	ec53 2b10 	vmov	r2, r3, d0
 80151e2:	ee10 0a10 	vmov	r0, s0
 80151e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80151ea:	e7d1      	b.n	8015190 <sin+0x30>
 80151ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80151f0:	ed9d 0b00 	vldr	d0, [sp]
 80151f4:	f000 f8d0 	bl	8015398 <__kernel_cos>
 80151f8:	e7f1      	b.n	80151de <sin+0x7e>
 80151fa:	bf00      	nop
 80151fc:	f3af 8000 	nop.w
	...
 8015208:	3fe921fb 	.word	0x3fe921fb
 801520c:	7fefffff 	.word	0x7fefffff

08015210 <expf>:
 8015210:	b508      	push	{r3, lr}
 8015212:	ed2d 8b02 	vpush	{d8}
 8015216:	eef0 8a40 	vmov.f32	s17, s0
 801521a:	f000 fc55 	bl	8015ac8 <__ieee754_expf>
 801521e:	eeb0 8a40 	vmov.f32	s16, s0
 8015222:	eeb0 0a68 	vmov.f32	s0, s17
 8015226:	f000 f829 	bl	801527c <finitef>
 801522a:	b160      	cbz	r0, 8015246 <expf+0x36>
 801522c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801526c <expf+0x5c>
 8015230:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015238:	dd0a      	ble.n	8015250 <expf+0x40>
 801523a:	f7fd fab9 	bl	80127b0 <__errno>
 801523e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8015270 <expf+0x60>
 8015242:	2322      	movs	r3, #34	; 0x22
 8015244:	6003      	str	r3, [r0, #0]
 8015246:	eeb0 0a48 	vmov.f32	s0, s16
 801524a:	ecbd 8b02 	vpop	{d8}
 801524e:	bd08      	pop	{r3, pc}
 8015250:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015274 <expf+0x64>
 8015254:	eef4 8ae7 	vcmpe.f32	s17, s15
 8015258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801525c:	d5f3      	bpl.n	8015246 <expf+0x36>
 801525e:	f7fd faa7 	bl	80127b0 <__errno>
 8015262:	2322      	movs	r3, #34	; 0x22
 8015264:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8015278 <expf+0x68>
 8015268:	6003      	str	r3, [r0, #0]
 801526a:	e7ec      	b.n	8015246 <expf+0x36>
 801526c:	42b17217 	.word	0x42b17217
 8015270:	7f800000 	.word	0x7f800000
 8015274:	c2cff1b5 	.word	0xc2cff1b5
 8015278:	00000000 	.word	0x00000000

0801527c <finitef>:
 801527c:	b082      	sub	sp, #8
 801527e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015282:	9801      	ldr	r0, [sp, #4]
 8015284:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015288:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801528c:	bfac      	ite	ge
 801528e:	2000      	movge	r0, #0
 8015290:	2001      	movlt	r0, #1
 8015292:	b002      	add	sp, #8
 8015294:	4770      	bx	lr
	...

08015298 <floor>:
 8015298:	ec51 0b10 	vmov	r0, r1, d0
 801529c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80152a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152a4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80152a8:	2e13      	cmp	r6, #19
 80152aa:	ee10 5a10 	vmov	r5, s0
 80152ae:	ee10 8a10 	vmov	r8, s0
 80152b2:	460c      	mov	r4, r1
 80152b4:	dc31      	bgt.n	801531a <floor+0x82>
 80152b6:	2e00      	cmp	r6, #0
 80152b8:	da14      	bge.n	80152e4 <floor+0x4c>
 80152ba:	a333      	add	r3, pc, #204	; (adr r3, 8015388 <floor+0xf0>)
 80152bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152c0:	f7ea ffe4 	bl	800028c <__adddf3>
 80152c4:	2200      	movs	r2, #0
 80152c6:	2300      	movs	r3, #0
 80152c8:	f7eb fc26 	bl	8000b18 <__aeabi_dcmpgt>
 80152cc:	b138      	cbz	r0, 80152de <floor+0x46>
 80152ce:	2c00      	cmp	r4, #0
 80152d0:	da53      	bge.n	801537a <floor+0xe2>
 80152d2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80152d6:	4325      	orrs	r5, r4
 80152d8:	d052      	beq.n	8015380 <floor+0xe8>
 80152da:	4c2d      	ldr	r4, [pc, #180]	; (8015390 <floor+0xf8>)
 80152dc:	2500      	movs	r5, #0
 80152de:	4621      	mov	r1, r4
 80152e0:	4628      	mov	r0, r5
 80152e2:	e024      	b.n	801532e <floor+0x96>
 80152e4:	4f2b      	ldr	r7, [pc, #172]	; (8015394 <floor+0xfc>)
 80152e6:	4137      	asrs	r7, r6
 80152e8:	ea01 0307 	and.w	r3, r1, r7
 80152ec:	4303      	orrs	r3, r0
 80152ee:	d01e      	beq.n	801532e <floor+0x96>
 80152f0:	a325      	add	r3, pc, #148	; (adr r3, 8015388 <floor+0xf0>)
 80152f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152f6:	f7ea ffc9 	bl	800028c <__adddf3>
 80152fa:	2200      	movs	r2, #0
 80152fc:	2300      	movs	r3, #0
 80152fe:	f7eb fc0b 	bl	8000b18 <__aeabi_dcmpgt>
 8015302:	2800      	cmp	r0, #0
 8015304:	d0eb      	beq.n	80152de <floor+0x46>
 8015306:	2c00      	cmp	r4, #0
 8015308:	bfbe      	ittt	lt
 801530a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801530e:	4133      	asrlt	r3, r6
 8015310:	18e4      	addlt	r4, r4, r3
 8015312:	ea24 0407 	bic.w	r4, r4, r7
 8015316:	2500      	movs	r5, #0
 8015318:	e7e1      	b.n	80152de <floor+0x46>
 801531a:	2e33      	cmp	r6, #51	; 0x33
 801531c:	dd0b      	ble.n	8015336 <floor+0x9e>
 801531e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015322:	d104      	bne.n	801532e <floor+0x96>
 8015324:	ee10 2a10 	vmov	r2, s0
 8015328:	460b      	mov	r3, r1
 801532a:	f7ea ffaf 	bl	800028c <__adddf3>
 801532e:	ec41 0b10 	vmov	d0, r0, r1
 8015332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015336:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 801533a:	f04f 37ff 	mov.w	r7, #4294967295
 801533e:	40df      	lsrs	r7, r3
 8015340:	4238      	tst	r0, r7
 8015342:	d0f4      	beq.n	801532e <floor+0x96>
 8015344:	a310      	add	r3, pc, #64	; (adr r3, 8015388 <floor+0xf0>)
 8015346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801534a:	f7ea ff9f 	bl	800028c <__adddf3>
 801534e:	2200      	movs	r2, #0
 8015350:	2300      	movs	r3, #0
 8015352:	f7eb fbe1 	bl	8000b18 <__aeabi_dcmpgt>
 8015356:	2800      	cmp	r0, #0
 8015358:	d0c1      	beq.n	80152de <floor+0x46>
 801535a:	2c00      	cmp	r4, #0
 801535c:	da0a      	bge.n	8015374 <floor+0xdc>
 801535e:	2e14      	cmp	r6, #20
 8015360:	d101      	bne.n	8015366 <floor+0xce>
 8015362:	3401      	adds	r4, #1
 8015364:	e006      	b.n	8015374 <floor+0xdc>
 8015366:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801536a:	2301      	movs	r3, #1
 801536c:	40b3      	lsls	r3, r6
 801536e:	441d      	add	r5, r3
 8015370:	45a8      	cmp	r8, r5
 8015372:	d8f6      	bhi.n	8015362 <floor+0xca>
 8015374:	ea25 0507 	bic.w	r5, r5, r7
 8015378:	e7b1      	b.n	80152de <floor+0x46>
 801537a:	2500      	movs	r5, #0
 801537c:	462c      	mov	r4, r5
 801537e:	e7ae      	b.n	80152de <floor+0x46>
 8015380:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015384:	e7ab      	b.n	80152de <floor+0x46>
 8015386:	bf00      	nop
 8015388:	8800759c 	.word	0x8800759c
 801538c:	7e37e43c 	.word	0x7e37e43c
 8015390:	bff00000 	.word	0xbff00000
 8015394:	000fffff 	.word	0x000fffff

08015398 <__kernel_cos>:
 8015398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801539c:	ec57 6b10 	vmov	r6, r7, d0
 80153a0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80153a4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80153a8:	ed8d 1b00 	vstr	d1, [sp]
 80153ac:	da07      	bge.n	80153be <__kernel_cos+0x26>
 80153ae:	ee10 0a10 	vmov	r0, s0
 80153b2:	4639      	mov	r1, r7
 80153b4:	f7eb fbd0 	bl	8000b58 <__aeabi_d2iz>
 80153b8:	2800      	cmp	r0, #0
 80153ba:	f000 8088 	beq.w	80154ce <__kernel_cos+0x136>
 80153be:	4632      	mov	r2, r6
 80153c0:	463b      	mov	r3, r7
 80153c2:	4630      	mov	r0, r6
 80153c4:	4639      	mov	r1, r7
 80153c6:	f7eb f917 	bl	80005f8 <__aeabi_dmul>
 80153ca:	4b51      	ldr	r3, [pc, #324]	; (8015510 <__kernel_cos+0x178>)
 80153cc:	2200      	movs	r2, #0
 80153ce:	4604      	mov	r4, r0
 80153d0:	460d      	mov	r5, r1
 80153d2:	f7eb f911 	bl	80005f8 <__aeabi_dmul>
 80153d6:	a340      	add	r3, pc, #256	; (adr r3, 80154d8 <__kernel_cos+0x140>)
 80153d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153dc:	4682      	mov	sl, r0
 80153de:	468b      	mov	fp, r1
 80153e0:	4620      	mov	r0, r4
 80153e2:	4629      	mov	r1, r5
 80153e4:	f7eb f908 	bl	80005f8 <__aeabi_dmul>
 80153e8:	a33d      	add	r3, pc, #244	; (adr r3, 80154e0 <__kernel_cos+0x148>)
 80153ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ee:	f7ea ff4d 	bl	800028c <__adddf3>
 80153f2:	4622      	mov	r2, r4
 80153f4:	462b      	mov	r3, r5
 80153f6:	f7eb f8ff 	bl	80005f8 <__aeabi_dmul>
 80153fa:	a33b      	add	r3, pc, #236	; (adr r3, 80154e8 <__kernel_cos+0x150>)
 80153fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015400:	f7ea ff42 	bl	8000288 <__aeabi_dsub>
 8015404:	4622      	mov	r2, r4
 8015406:	462b      	mov	r3, r5
 8015408:	f7eb f8f6 	bl	80005f8 <__aeabi_dmul>
 801540c:	a338      	add	r3, pc, #224	; (adr r3, 80154f0 <__kernel_cos+0x158>)
 801540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015412:	f7ea ff3b 	bl	800028c <__adddf3>
 8015416:	4622      	mov	r2, r4
 8015418:	462b      	mov	r3, r5
 801541a:	f7eb f8ed 	bl	80005f8 <__aeabi_dmul>
 801541e:	a336      	add	r3, pc, #216	; (adr r3, 80154f8 <__kernel_cos+0x160>)
 8015420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015424:	f7ea ff30 	bl	8000288 <__aeabi_dsub>
 8015428:	4622      	mov	r2, r4
 801542a:	462b      	mov	r3, r5
 801542c:	f7eb f8e4 	bl	80005f8 <__aeabi_dmul>
 8015430:	a333      	add	r3, pc, #204	; (adr r3, 8015500 <__kernel_cos+0x168>)
 8015432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015436:	f7ea ff29 	bl	800028c <__adddf3>
 801543a:	4622      	mov	r2, r4
 801543c:	462b      	mov	r3, r5
 801543e:	f7eb f8db 	bl	80005f8 <__aeabi_dmul>
 8015442:	4622      	mov	r2, r4
 8015444:	462b      	mov	r3, r5
 8015446:	f7eb f8d7 	bl	80005f8 <__aeabi_dmul>
 801544a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801544e:	4604      	mov	r4, r0
 8015450:	460d      	mov	r5, r1
 8015452:	4630      	mov	r0, r6
 8015454:	4639      	mov	r1, r7
 8015456:	f7eb f8cf 	bl	80005f8 <__aeabi_dmul>
 801545a:	460b      	mov	r3, r1
 801545c:	4602      	mov	r2, r0
 801545e:	4629      	mov	r1, r5
 8015460:	4620      	mov	r0, r4
 8015462:	f7ea ff11 	bl	8000288 <__aeabi_dsub>
 8015466:	4b2b      	ldr	r3, [pc, #172]	; (8015514 <__kernel_cos+0x17c>)
 8015468:	4598      	cmp	r8, r3
 801546a:	4606      	mov	r6, r0
 801546c:	460f      	mov	r7, r1
 801546e:	dc10      	bgt.n	8015492 <__kernel_cos+0xfa>
 8015470:	4602      	mov	r2, r0
 8015472:	460b      	mov	r3, r1
 8015474:	4650      	mov	r0, sl
 8015476:	4659      	mov	r1, fp
 8015478:	f7ea ff06 	bl	8000288 <__aeabi_dsub>
 801547c:	460b      	mov	r3, r1
 801547e:	4926      	ldr	r1, [pc, #152]	; (8015518 <__kernel_cos+0x180>)
 8015480:	4602      	mov	r2, r0
 8015482:	2000      	movs	r0, #0
 8015484:	f7ea ff00 	bl	8000288 <__aeabi_dsub>
 8015488:	ec41 0b10 	vmov	d0, r0, r1
 801548c:	b003      	add	sp, #12
 801548e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015492:	4b22      	ldr	r3, [pc, #136]	; (801551c <__kernel_cos+0x184>)
 8015494:	4920      	ldr	r1, [pc, #128]	; (8015518 <__kernel_cos+0x180>)
 8015496:	4598      	cmp	r8, r3
 8015498:	bfcc      	ite	gt
 801549a:	4d21      	ldrgt	r5, [pc, #132]	; (8015520 <__kernel_cos+0x188>)
 801549c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80154a0:	2400      	movs	r4, #0
 80154a2:	4622      	mov	r2, r4
 80154a4:	462b      	mov	r3, r5
 80154a6:	2000      	movs	r0, #0
 80154a8:	f7ea feee 	bl	8000288 <__aeabi_dsub>
 80154ac:	4622      	mov	r2, r4
 80154ae:	4680      	mov	r8, r0
 80154b0:	4689      	mov	r9, r1
 80154b2:	462b      	mov	r3, r5
 80154b4:	4650      	mov	r0, sl
 80154b6:	4659      	mov	r1, fp
 80154b8:	f7ea fee6 	bl	8000288 <__aeabi_dsub>
 80154bc:	4632      	mov	r2, r6
 80154be:	463b      	mov	r3, r7
 80154c0:	f7ea fee2 	bl	8000288 <__aeabi_dsub>
 80154c4:	4602      	mov	r2, r0
 80154c6:	460b      	mov	r3, r1
 80154c8:	4640      	mov	r0, r8
 80154ca:	4649      	mov	r1, r9
 80154cc:	e7da      	b.n	8015484 <__kernel_cos+0xec>
 80154ce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8015508 <__kernel_cos+0x170>
 80154d2:	e7db      	b.n	801548c <__kernel_cos+0xf4>
 80154d4:	f3af 8000 	nop.w
 80154d8:	be8838d4 	.word	0xbe8838d4
 80154dc:	bda8fae9 	.word	0xbda8fae9
 80154e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80154e4:	3e21ee9e 	.word	0x3e21ee9e
 80154e8:	809c52ad 	.word	0x809c52ad
 80154ec:	3e927e4f 	.word	0x3e927e4f
 80154f0:	19cb1590 	.word	0x19cb1590
 80154f4:	3efa01a0 	.word	0x3efa01a0
 80154f8:	16c15177 	.word	0x16c15177
 80154fc:	3f56c16c 	.word	0x3f56c16c
 8015500:	5555554c 	.word	0x5555554c
 8015504:	3fa55555 	.word	0x3fa55555
 8015508:	00000000 	.word	0x00000000
 801550c:	3ff00000 	.word	0x3ff00000
 8015510:	3fe00000 	.word	0x3fe00000
 8015514:	3fd33332 	.word	0x3fd33332
 8015518:	3ff00000 	.word	0x3ff00000
 801551c:	3fe90000 	.word	0x3fe90000
 8015520:	3fd20000 	.word	0x3fd20000
 8015524:	00000000 	.word	0x00000000

08015528 <__kernel_sin>:
 8015528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801552c:	ed2d 8b04 	vpush	{d8-d9}
 8015530:	eeb0 8a41 	vmov.f32	s16, s2
 8015534:	eef0 8a61 	vmov.f32	s17, s3
 8015538:	ec55 4b10 	vmov	r4, r5, d0
 801553c:	b083      	sub	sp, #12
 801553e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015542:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015546:	9001      	str	r0, [sp, #4]
 8015548:	da06      	bge.n	8015558 <__kernel_sin+0x30>
 801554a:	ee10 0a10 	vmov	r0, s0
 801554e:	4629      	mov	r1, r5
 8015550:	f7eb fb02 	bl	8000b58 <__aeabi_d2iz>
 8015554:	2800      	cmp	r0, #0
 8015556:	d051      	beq.n	80155fc <__kernel_sin+0xd4>
 8015558:	4622      	mov	r2, r4
 801555a:	462b      	mov	r3, r5
 801555c:	4620      	mov	r0, r4
 801555e:	4629      	mov	r1, r5
 8015560:	f7eb f84a 	bl	80005f8 <__aeabi_dmul>
 8015564:	4682      	mov	sl, r0
 8015566:	468b      	mov	fp, r1
 8015568:	4602      	mov	r2, r0
 801556a:	460b      	mov	r3, r1
 801556c:	4620      	mov	r0, r4
 801556e:	4629      	mov	r1, r5
 8015570:	f7eb f842 	bl	80005f8 <__aeabi_dmul>
 8015574:	a341      	add	r3, pc, #260	; (adr r3, 801567c <__kernel_sin+0x154>)
 8015576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801557a:	4680      	mov	r8, r0
 801557c:	4689      	mov	r9, r1
 801557e:	4650      	mov	r0, sl
 8015580:	4659      	mov	r1, fp
 8015582:	f7eb f839 	bl	80005f8 <__aeabi_dmul>
 8015586:	a33f      	add	r3, pc, #252	; (adr r3, 8015684 <__kernel_sin+0x15c>)
 8015588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801558c:	f7ea fe7c 	bl	8000288 <__aeabi_dsub>
 8015590:	4652      	mov	r2, sl
 8015592:	465b      	mov	r3, fp
 8015594:	f7eb f830 	bl	80005f8 <__aeabi_dmul>
 8015598:	a33c      	add	r3, pc, #240	; (adr r3, 801568c <__kernel_sin+0x164>)
 801559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801559e:	f7ea fe75 	bl	800028c <__adddf3>
 80155a2:	4652      	mov	r2, sl
 80155a4:	465b      	mov	r3, fp
 80155a6:	f7eb f827 	bl	80005f8 <__aeabi_dmul>
 80155aa:	a33a      	add	r3, pc, #232	; (adr r3, 8015694 <__kernel_sin+0x16c>)
 80155ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155b0:	f7ea fe6a 	bl	8000288 <__aeabi_dsub>
 80155b4:	4652      	mov	r2, sl
 80155b6:	465b      	mov	r3, fp
 80155b8:	f7eb f81e 	bl	80005f8 <__aeabi_dmul>
 80155bc:	a337      	add	r3, pc, #220	; (adr r3, 801569c <__kernel_sin+0x174>)
 80155be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155c2:	f7ea fe63 	bl	800028c <__adddf3>
 80155c6:	9b01      	ldr	r3, [sp, #4]
 80155c8:	4606      	mov	r6, r0
 80155ca:	460f      	mov	r7, r1
 80155cc:	b9eb      	cbnz	r3, 801560a <__kernel_sin+0xe2>
 80155ce:	4602      	mov	r2, r0
 80155d0:	460b      	mov	r3, r1
 80155d2:	4650      	mov	r0, sl
 80155d4:	4659      	mov	r1, fp
 80155d6:	f7eb f80f 	bl	80005f8 <__aeabi_dmul>
 80155da:	a325      	add	r3, pc, #148	; (adr r3, 8015670 <__kernel_sin+0x148>)
 80155dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155e0:	f7ea fe52 	bl	8000288 <__aeabi_dsub>
 80155e4:	4642      	mov	r2, r8
 80155e6:	464b      	mov	r3, r9
 80155e8:	f7eb f806 	bl	80005f8 <__aeabi_dmul>
 80155ec:	4602      	mov	r2, r0
 80155ee:	460b      	mov	r3, r1
 80155f0:	4620      	mov	r0, r4
 80155f2:	4629      	mov	r1, r5
 80155f4:	f7ea fe4a 	bl	800028c <__adddf3>
 80155f8:	4604      	mov	r4, r0
 80155fa:	460d      	mov	r5, r1
 80155fc:	ec45 4b10 	vmov	d0, r4, r5
 8015600:	b003      	add	sp, #12
 8015602:	ecbd 8b04 	vpop	{d8-d9}
 8015606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801560a:	4b1b      	ldr	r3, [pc, #108]	; (8015678 <__kernel_sin+0x150>)
 801560c:	ec51 0b18 	vmov	r0, r1, d8
 8015610:	2200      	movs	r2, #0
 8015612:	f7ea fff1 	bl	80005f8 <__aeabi_dmul>
 8015616:	4632      	mov	r2, r6
 8015618:	ec41 0b19 	vmov	d9, r0, r1
 801561c:	463b      	mov	r3, r7
 801561e:	4640      	mov	r0, r8
 8015620:	4649      	mov	r1, r9
 8015622:	f7ea ffe9 	bl	80005f8 <__aeabi_dmul>
 8015626:	4602      	mov	r2, r0
 8015628:	460b      	mov	r3, r1
 801562a:	ec51 0b19 	vmov	r0, r1, d9
 801562e:	f7ea fe2b 	bl	8000288 <__aeabi_dsub>
 8015632:	4652      	mov	r2, sl
 8015634:	465b      	mov	r3, fp
 8015636:	f7ea ffdf 	bl	80005f8 <__aeabi_dmul>
 801563a:	ec53 2b18 	vmov	r2, r3, d8
 801563e:	f7ea fe23 	bl	8000288 <__aeabi_dsub>
 8015642:	a30b      	add	r3, pc, #44	; (adr r3, 8015670 <__kernel_sin+0x148>)
 8015644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015648:	4606      	mov	r6, r0
 801564a:	460f      	mov	r7, r1
 801564c:	4640      	mov	r0, r8
 801564e:	4649      	mov	r1, r9
 8015650:	f7ea ffd2 	bl	80005f8 <__aeabi_dmul>
 8015654:	4602      	mov	r2, r0
 8015656:	460b      	mov	r3, r1
 8015658:	4630      	mov	r0, r6
 801565a:	4639      	mov	r1, r7
 801565c:	f7ea fe16 	bl	800028c <__adddf3>
 8015660:	4602      	mov	r2, r0
 8015662:	460b      	mov	r3, r1
 8015664:	4620      	mov	r0, r4
 8015666:	4629      	mov	r1, r5
 8015668:	f7ea fe0e 	bl	8000288 <__aeabi_dsub>
 801566c:	e7c4      	b.n	80155f8 <__kernel_sin+0xd0>
 801566e:	bf00      	nop
 8015670:	55555549 	.word	0x55555549
 8015674:	3fc55555 	.word	0x3fc55555
 8015678:	3fe00000 	.word	0x3fe00000
 801567c:	5acfd57c 	.word	0x5acfd57c
 8015680:	3de5d93a 	.word	0x3de5d93a
 8015684:	8a2b9ceb 	.word	0x8a2b9ceb
 8015688:	3e5ae5e6 	.word	0x3e5ae5e6
 801568c:	57b1fe7d 	.word	0x57b1fe7d
 8015690:	3ec71de3 	.word	0x3ec71de3
 8015694:	19c161d5 	.word	0x19c161d5
 8015698:	3f2a01a0 	.word	0x3f2a01a0
 801569c:	1110f8a6 	.word	0x1110f8a6
 80156a0:	3f811111 	.word	0x3f811111
 80156a4:	00000000 	.word	0x00000000

080156a8 <__ieee754_rem_pio2>:
 80156a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156ac:	ed2d 8b02 	vpush	{d8}
 80156b0:	ec55 4b10 	vmov	r4, r5, d0
 80156b4:	4bca      	ldr	r3, [pc, #808]	; (80159e0 <__ieee754_rem_pio2+0x338>)
 80156b6:	b08b      	sub	sp, #44	; 0x2c
 80156b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80156bc:	4598      	cmp	r8, r3
 80156be:	4682      	mov	sl, r0
 80156c0:	9502      	str	r5, [sp, #8]
 80156c2:	dc08      	bgt.n	80156d6 <__ieee754_rem_pio2+0x2e>
 80156c4:	2200      	movs	r2, #0
 80156c6:	2300      	movs	r3, #0
 80156c8:	ed80 0b00 	vstr	d0, [r0]
 80156cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80156d0:	f04f 0b00 	mov.w	fp, #0
 80156d4:	e028      	b.n	8015728 <__ieee754_rem_pio2+0x80>
 80156d6:	4bc3      	ldr	r3, [pc, #780]	; (80159e4 <__ieee754_rem_pio2+0x33c>)
 80156d8:	4598      	cmp	r8, r3
 80156da:	dc78      	bgt.n	80157ce <__ieee754_rem_pio2+0x126>
 80156dc:	9b02      	ldr	r3, [sp, #8]
 80156de:	4ec2      	ldr	r6, [pc, #776]	; (80159e8 <__ieee754_rem_pio2+0x340>)
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	ee10 0a10 	vmov	r0, s0
 80156e6:	a3b0      	add	r3, pc, #704	; (adr r3, 80159a8 <__ieee754_rem_pio2+0x300>)
 80156e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ec:	4629      	mov	r1, r5
 80156ee:	dd39      	ble.n	8015764 <__ieee754_rem_pio2+0xbc>
 80156f0:	f7ea fdca 	bl	8000288 <__aeabi_dsub>
 80156f4:	45b0      	cmp	r8, r6
 80156f6:	4604      	mov	r4, r0
 80156f8:	460d      	mov	r5, r1
 80156fa:	d01b      	beq.n	8015734 <__ieee754_rem_pio2+0x8c>
 80156fc:	a3ac      	add	r3, pc, #688	; (adr r3, 80159b0 <__ieee754_rem_pio2+0x308>)
 80156fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015702:	f7ea fdc1 	bl	8000288 <__aeabi_dsub>
 8015706:	4602      	mov	r2, r0
 8015708:	460b      	mov	r3, r1
 801570a:	e9ca 2300 	strd	r2, r3, [sl]
 801570e:	4620      	mov	r0, r4
 8015710:	4629      	mov	r1, r5
 8015712:	f7ea fdb9 	bl	8000288 <__aeabi_dsub>
 8015716:	a3a6      	add	r3, pc, #664	; (adr r3, 80159b0 <__ieee754_rem_pio2+0x308>)
 8015718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801571c:	f7ea fdb4 	bl	8000288 <__aeabi_dsub>
 8015720:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015724:	f04f 0b01 	mov.w	fp, #1
 8015728:	4658      	mov	r0, fp
 801572a:	b00b      	add	sp, #44	; 0x2c
 801572c:	ecbd 8b02 	vpop	{d8}
 8015730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015734:	a3a0      	add	r3, pc, #640	; (adr r3, 80159b8 <__ieee754_rem_pio2+0x310>)
 8015736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801573a:	f7ea fda5 	bl	8000288 <__aeabi_dsub>
 801573e:	a3a0      	add	r3, pc, #640	; (adr r3, 80159c0 <__ieee754_rem_pio2+0x318>)
 8015740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015744:	4604      	mov	r4, r0
 8015746:	460d      	mov	r5, r1
 8015748:	f7ea fd9e 	bl	8000288 <__aeabi_dsub>
 801574c:	4602      	mov	r2, r0
 801574e:	460b      	mov	r3, r1
 8015750:	e9ca 2300 	strd	r2, r3, [sl]
 8015754:	4620      	mov	r0, r4
 8015756:	4629      	mov	r1, r5
 8015758:	f7ea fd96 	bl	8000288 <__aeabi_dsub>
 801575c:	a398      	add	r3, pc, #608	; (adr r3, 80159c0 <__ieee754_rem_pio2+0x318>)
 801575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015762:	e7db      	b.n	801571c <__ieee754_rem_pio2+0x74>
 8015764:	f7ea fd92 	bl	800028c <__adddf3>
 8015768:	45b0      	cmp	r8, r6
 801576a:	4604      	mov	r4, r0
 801576c:	460d      	mov	r5, r1
 801576e:	d016      	beq.n	801579e <__ieee754_rem_pio2+0xf6>
 8015770:	a38f      	add	r3, pc, #572	; (adr r3, 80159b0 <__ieee754_rem_pio2+0x308>)
 8015772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015776:	f7ea fd89 	bl	800028c <__adddf3>
 801577a:	4602      	mov	r2, r0
 801577c:	460b      	mov	r3, r1
 801577e:	e9ca 2300 	strd	r2, r3, [sl]
 8015782:	4620      	mov	r0, r4
 8015784:	4629      	mov	r1, r5
 8015786:	f7ea fd7f 	bl	8000288 <__aeabi_dsub>
 801578a:	a389      	add	r3, pc, #548	; (adr r3, 80159b0 <__ieee754_rem_pio2+0x308>)
 801578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015790:	f7ea fd7c 	bl	800028c <__adddf3>
 8015794:	f04f 3bff 	mov.w	fp, #4294967295
 8015798:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801579c:	e7c4      	b.n	8015728 <__ieee754_rem_pio2+0x80>
 801579e:	a386      	add	r3, pc, #536	; (adr r3, 80159b8 <__ieee754_rem_pio2+0x310>)
 80157a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157a4:	f7ea fd72 	bl	800028c <__adddf3>
 80157a8:	a385      	add	r3, pc, #532	; (adr r3, 80159c0 <__ieee754_rem_pio2+0x318>)
 80157aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ae:	4604      	mov	r4, r0
 80157b0:	460d      	mov	r5, r1
 80157b2:	f7ea fd6b 	bl	800028c <__adddf3>
 80157b6:	4602      	mov	r2, r0
 80157b8:	460b      	mov	r3, r1
 80157ba:	e9ca 2300 	strd	r2, r3, [sl]
 80157be:	4620      	mov	r0, r4
 80157c0:	4629      	mov	r1, r5
 80157c2:	f7ea fd61 	bl	8000288 <__aeabi_dsub>
 80157c6:	a37e      	add	r3, pc, #504	; (adr r3, 80159c0 <__ieee754_rem_pio2+0x318>)
 80157c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157cc:	e7e0      	b.n	8015790 <__ieee754_rem_pio2+0xe8>
 80157ce:	4b87      	ldr	r3, [pc, #540]	; (80159ec <__ieee754_rem_pio2+0x344>)
 80157d0:	4598      	cmp	r8, r3
 80157d2:	f300 80d8 	bgt.w	8015986 <__ieee754_rem_pio2+0x2de>
 80157d6:	f000 f96d 	bl	8015ab4 <fabs>
 80157da:	ec55 4b10 	vmov	r4, r5, d0
 80157de:	ee10 0a10 	vmov	r0, s0
 80157e2:	a379      	add	r3, pc, #484	; (adr r3, 80159c8 <__ieee754_rem_pio2+0x320>)
 80157e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e8:	4629      	mov	r1, r5
 80157ea:	f7ea ff05 	bl	80005f8 <__aeabi_dmul>
 80157ee:	4b80      	ldr	r3, [pc, #512]	; (80159f0 <__ieee754_rem_pio2+0x348>)
 80157f0:	2200      	movs	r2, #0
 80157f2:	f7ea fd4b 	bl	800028c <__adddf3>
 80157f6:	f7eb f9af 	bl	8000b58 <__aeabi_d2iz>
 80157fa:	4683      	mov	fp, r0
 80157fc:	f7ea fe92 	bl	8000524 <__aeabi_i2d>
 8015800:	4602      	mov	r2, r0
 8015802:	460b      	mov	r3, r1
 8015804:	ec43 2b18 	vmov	d8, r2, r3
 8015808:	a367      	add	r3, pc, #412	; (adr r3, 80159a8 <__ieee754_rem_pio2+0x300>)
 801580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801580e:	f7ea fef3 	bl	80005f8 <__aeabi_dmul>
 8015812:	4602      	mov	r2, r0
 8015814:	460b      	mov	r3, r1
 8015816:	4620      	mov	r0, r4
 8015818:	4629      	mov	r1, r5
 801581a:	f7ea fd35 	bl	8000288 <__aeabi_dsub>
 801581e:	a364      	add	r3, pc, #400	; (adr r3, 80159b0 <__ieee754_rem_pio2+0x308>)
 8015820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015824:	4606      	mov	r6, r0
 8015826:	460f      	mov	r7, r1
 8015828:	ec51 0b18 	vmov	r0, r1, d8
 801582c:	f7ea fee4 	bl	80005f8 <__aeabi_dmul>
 8015830:	f1bb 0f1f 	cmp.w	fp, #31
 8015834:	4604      	mov	r4, r0
 8015836:	460d      	mov	r5, r1
 8015838:	dc0d      	bgt.n	8015856 <__ieee754_rem_pio2+0x1ae>
 801583a:	4b6e      	ldr	r3, [pc, #440]	; (80159f4 <__ieee754_rem_pio2+0x34c>)
 801583c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8015840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015844:	4543      	cmp	r3, r8
 8015846:	d006      	beq.n	8015856 <__ieee754_rem_pio2+0x1ae>
 8015848:	4622      	mov	r2, r4
 801584a:	462b      	mov	r3, r5
 801584c:	4630      	mov	r0, r6
 801584e:	4639      	mov	r1, r7
 8015850:	f7ea fd1a 	bl	8000288 <__aeabi_dsub>
 8015854:	e00e      	b.n	8015874 <__ieee754_rem_pio2+0x1cc>
 8015856:	462b      	mov	r3, r5
 8015858:	4622      	mov	r2, r4
 801585a:	4630      	mov	r0, r6
 801585c:	4639      	mov	r1, r7
 801585e:	f7ea fd13 	bl	8000288 <__aeabi_dsub>
 8015862:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015866:	9303      	str	r3, [sp, #12]
 8015868:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801586c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8015870:	2b10      	cmp	r3, #16
 8015872:	dc02      	bgt.n	801587a <__ieee754_rem_pio2+0x1d2>
 8015874:	e9ca 0100 	strd	r0, r1, [sl]
 8015878:	e039      	b.n	80158ee <__ieee754_rem_pio2+0x246>
 801587a:	a34f      	add	r3, pc, #316	; (adr r3, 80159b8 <__ieee754_rem_pio2+0x310>)
 801587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015880:	ec51 0b18 	vmov	r0, r1, d8
 8015884:	f7ea feb8 	bl	80005f8 <__aeabi_dmul>
 8015888:	4604      	mov	r4, r0
 801588a:	460d      	mov	r5, r1
 801588c:	4602      	mov	r2, r0
 801588e:	460b      	mov	r3, r1
 8015890:	4630      	mov	r0, r6
 8015892:	4639      	mov	r1, r7
 8015894:	f7ea fcf8 	bl	8000288 <__aeabi_dsub>
 8015898:	4602      	mov	r2, r0
 801589a:	460b      	mov	r3, r1
 801589c:	4680      	mov	r8, r0
 801589e:	4689      	mov	r9, r1
 80158a0:	4630      	mov	r0, r6
 80158a2:	4639      	mov	r1, r7
 80158a4:	f7ea fcf0 	bl	8000288 <__aeabi_dsub>
 80158a8:	4622      	mov	r2, r4
 80158aa:	462b      	mov	r3, r5
 80158ac:	f7ea fcec 	bl	8000288 <__aeabi_dsub>
 80158b0:	a343      	add	r3, pc, #268	; (adr r3, 80159c0 <__ieee754_rem_pio2+0x318>)
 80158b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158b6:	4604      	mov	r4, r0
 80158b8:	460d      	mov	r5, r1
 80158ba:	ec51 0b18 	vmov	r0, r1, d8
 80158be:	f7ea fe9b 	bl	80005f8 <__aeabi_dmul>
 80158c2:	4622      	mov	r2, r4
 80158c4:	462b      	mov	r3, r5
 80158c6:	f7ea fcdf 	bl	8000288 <__aeabi_dsub>
 80158ca:	4602      	mov	r2, r0
 80158cc:	460b      	mov	r3, r1
 80158ce:	4604      	mov	r4, r0
 80158d0:	460d      	mov	r5, r1
 80158d2:	4640      	mov	r0, r8
 80158d4:	4649      	mov	r1, r9
 80158d6:	f7ea fcd7 	bl	8000288 <__aeabi_dsub>
 80158da:	9a03      	ldr	r2, [sp, #12]
 80158dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80158e0:	1ad3      	subs	r3, r2, r3
 80158e2:	2b31      	cmp	r3, #49	; 0x31
 80158e4:	dc24      	bgt.n	8015930 <__ieee754_rem_pio2+0x288>
 80158e6:	e9ca 0100 	strd	r0, r1, [sl]
 80158ea:	4646      	mov	r6, r8
 80158ec:	464f      	mov	r7, r9
 80158ee:	e9da 8900 	ldrd	r8, r9, [sl]
 80158f2:	4630      	mov	r0, r6
 80158f4:	4642      	mov	r2, r8
 80158f6:	464b      	mov	r3, r9
 80158f8:	4639      	mov	r1, r7
 80158fa:	f7ea fcc5 	bl	8000288 <__aeabi_dsub>
 80158fe:	462b      	mov	r3, r5
 8015900:	4622      	mov	r2, r4
 8015902:	f7ea fcc1 	bl	8000288 <__aeabi_dsub>
 8015906:	9b02      	ldr	r3, [sp, #8]
 8015908:	2b00      	cmp	r3, #0
 801590a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801590e:	f6bf af0b 	bge.w	8015728 <__ieee754_rem_pio2+0x80>
 8015912:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015916:	f8ca 3004 	str.w	r3, [sl, #4]
 801591a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801591e:	f8ca 8000 	str.w	r8, [sl]
 8015922:	f8ca 0008 	str.w	r0, [sl, #8]
 8015926:	f8ca 300c 	str.w	r3, [sl, #12]
 801592a:	f1cb 0b00 	rsb	fp, fp, #0
 801592e:	e6fb      	b.n	8015728 <__ieee754_rem_pio2+0x80>
 8015930:	a327      	add	r3, pc, #156	; (adr r3, 80159d0 <__ieee754_rem_pio2+0x328>)
 8015932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015936:	ec51 0b18 	vmov	r0, r1, d8
 801593a:	f7ea fe5d 	bl	80005f8 <__aeabi_dmul>
 801593e:	4604      	mov	r4, r0
 8015940:	460d      	mov	r5, r1
 8015942:	4602      	mov	r2, r0
 8015944:	460b      	mov	r3, r1
 8015946:	4640      	mov	r0, r8
 8015948:	4649      	mov	r1, r9
 801594a:	f7ea fc9d 	bl	8000288 <__aeabi_dsub>
 801594e:	4602      	mov	r2, r0
 8015950:	460b      	mov	r3, r1
 8015952:	4606      	mov	r6, r0
 8015954:	460f      	mov	r7, r1
 8015956:	4640      	mov	r0, r8
 8015958:	4649      	mov	r1, r9
 801595a:	f7ea fc95 	bl	8000288 <__aeabi_dsub>
 801595e:	4622      	mov	r2, r4
 8015960:	462b      	mov	r3, r5
 8015962:	f7ea fc91 	bl	8000288 <__aeabi_dsub>
 8015966:	a31c      	add	r3, pc, #112	; (adr r3, 80159d8 <__ieee754_rem_pio2+0x330>)
 8015968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801596c:	4604      	mov	r4, r0
 801596e:	460d      	mov	r5, r1
 8015970:	ec51 0b18 	vmov	r0, r1, d8
 8015974:	f7ea fe40 	bl	80005f8 <__aeabi_dmul>
 8015978:	4622      	mov	r2, r4
 801597a:	462b      	mov	r3, r5
 801597c:	f7ea fc84 	bl	8000288 <__aeabi_dsub>
 8015980:	4604      	mov	r4, r0
 8015982:	460d      	mov	r5, r1
 8015984:	e760      	b.n	8015848 <__ieee754_rem_pio2+0x1a0>
 8015986:	4b1c      	ldr	r3, [pc, #112]	; (80159f8 <__ieee754_rem_pio2+0x350>)
 8015988:	4598      	cmp	r8, r3
 801598a:	dd37      	ble.n	80159fc <__ieee754_rem_pio2+0x354>
 801598c:	ee10 2a10 	vmov	r2, s0
 8015990:	462b      	mov	r3, r5
 8015992:	4620      	mov	r0, r4
 8015994:	4629      	mov	r1, r5
 8015996:	f7ea fc77 	bl	8000288 <__aeabi_dsub>
 801599a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801599e:	e9ca 0100 	strd	r0, r1, [sl]
 80159a2:	e695      	b.n	80156d0 <__ieee754_rem_pio2+0x28>
 80159a4:	f3af 8000 	nop.w
 80159a8:	54400000 	.word	0x54400000
 80159ac:	3ff921fb 	.word	0x3ff921fb
 80159b0:	1a626331 	.word	0x1a626331
 80159b4:	3dd0b461 	.word	0x3dd0b461
 80159b8:	1a600000 	.word	0x1a600000
 80159bc:	3dd0b461 	.word	0x3dd0b461
 80159c0:	2e037073 	.word	0x2e037073
 80159c4:	3ba3198a 	.word	0x3ba3198a
 80159c8:	6dc9c883 	.word	0x6dc9c883
 80159cc:	3fe45f30 	.word	0x3fe45f30
 80159d0:	2e000000 	.word	0x2e000000
 80159d4:	3ba3198a 	.word	0x3ba3198a
 80159d8:	252049c1 	.word	0x252049c1
 80159dc:	397b839a 	.word	0x397b839a
 80159e0:	3fe921fb 	.word	0x3fe921fb
 80159e4:	4002d97b 	.word	0x4002d97b
 80159e8:	3ff921fb 	.word	0x3ff921fb
 80159ec:	413921fb 	.word	0x413921fb
 80159f0:	3fe00000 	.word	0x3fe00000
 80159f4:	080186e0 	.word	0x080186e0
 80159f8:	7fefffff 	.word	0x7fefffff
 80159fc:	ea4f 5628 	mov.w	r6, r8, asr #20
 8015a00:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8015a04:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8015a08:	4620      	mov	r0, r4
 8015a0a:	460d      	mov	r5, r1
 8015a0c:	f7eb f8a4 	bl	8000b58 <__aeabi_d2iz>
 8015a10:	f7ea fd88 	bl	8000524 <__aeabi_i2d>
 8015a14:	4602      	mov	r2, r0
 8015a16:	460b      	mov	r3, r1
 8015a18:	4620      	mov	r0, r4
 8015a1a:	4629      	mov	r1, r5
 8015a1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015a20:	f7ea fc32 	bl	8000288 <__aeabi_dsub>
 8015a24:	4b21      	ldr	r3, [pc, #132]	; (8015aac <__ieee754_rem_pio2+0x404>)
 8015a26:	2200      	movs	r2, #0
 8015a28:	f7ea fde6 	bl	80005f8 <__aeabi_dmul>
 8015a2c:	460d      	mov	r5, r1
 8015a2e:	4604      	mov	r4, r0
 8015a30:	f7eb f892 	bl	8000b58 <__aeabi_d2iz>
 8015a34:	f7ea fd76 	bl	8000524 <__aeabi_i2d>
 8015a38:	4602      	mov	r2, r0
 8015a3a:	460b      	mov	r3, r1
 8015a3c:	4620      	mov	r0, r4
 8015a3e:	4629      	mov	r1, r5
 8015a40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015a44:	f7ea fc20 	bl	8000288 <__aeabi_dsub>
 8015a48:	4b18      	ldr	r3, [pc, #96]	; (8015aac <__ieee754_rem_pio2+0x404>)
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	f7ea fdd4 	bl	80005f8 <__aeabi_dmul>
 8015a50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015a54:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8015a58:	2703      	movs	r7, #3
 8015a5a:	2400      	movs	r4, #0
 8015a5c:	2500      	movs	r5, #0
 8015a5e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8015a62:	4622      	mov	r2, r4
 8015a64:	462b      	mov	r3, r5
 8015a66:	46b9      	mov	r9, r7
 8015a68:	3f01      	subs	r7, #1
 8015a6a:	f7eb f82d 	bl	8000ac8 <__aeabi_dcmpeq>
 8015a6e:	2800      	cmp	r0, #0
 8015a70:	d1f5      	bne.n	8015a5e <__ieee754_rem_pio2+0x3b6>
 8015a72:	4b0f      	ldr	r3, [pc, #60]	; (8015ab0 <__ieee754_rem_pio2+0x408>)
 8015a74:	9301      	str	r3, [sp, #4]
 8015a76:	2302      	movs	r3, #2
 8015a78:	9300      	str	r3, [sp, #0]
 8015a7a:	4632      	mov	r2, r6
 8015a7c:	464b      	mov	r3, r9
 8015a7e:	4651      	mov	r1, sl
 8015a80:	a804      	add	r0, sp, #16
 8015a82:	f000 f911 	bl	8015ca8 <__kernel_rem_pio2>
 8015a86:	9b02      	ldr	r3, [sp, #8]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	4683      	mov	fp, r0
 8015a8c:	f6bf ae4c 	bge.w	8015728 <__ieee754_rem_pio2+0x80>
 8015a90:	e9da 2100 	ldrd	r2, r1, [sl]
 8015a94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015a98:	e9ca 2300 	strd	r2, r3, [sl]
 8015a9c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8015aa0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015aa4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8015aa8:	e73f      	b.n	801592a <__ieee754_rem_pio2+0x282>
 8015aaa:	bf00      	nop
 8015aac:	41700000 	.word	0x41700000
 8015ab0:	08018760 	.word	0x08018760

08015ab4 <fabs>:
 8015ab4:	ec51 0b10 	vmov	r0, r1, d0
 8015ab8:	ee10 2a10 	vmov	r2, s0
 8015abc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015ac0:	ec43 2b10 	vmov	d0, r2, r3
 8015ac4:	4770      	bx	lr
	...

08015ac8 <__ieee754_expf>:
 8015ac8:	ee10 2a10 	vmov	r2, s0
 8015acc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8015ad0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015ad4:	d902      	bls.n	8015adc <__ieee754_expf+0x14>
 8015ad6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015ada:	4770      	bx	lr
 8015adc:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8015ae0:	d106      	bne.n	8015af0 <__ieee754_expf+0x28>
 8015ae2:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8015c1c <__ieee754_expf+0x154>
 8015ae6:	2900      	cmp	r1, #0
 8015ae8:	bf18      	it	ne
 8015aea:	eeb0 0a67 	vmovne.f32	s0, s15
 8015aee:	4770      	bx	lr
 8015af0:	484b      	ldr	r0, [pc, #300]	; (8015c20 <__ieee754_expf+0x158>)
 8015af2:	4282      	cmp	r2, r0
 8015af4:	dd02      	ble.n	8015afc <__ieee754_expf+0x34>
 8015af6:	2000      	movs	r0, #0
 8015af8:	f000 b8d0 	b.w	8015c9c <__math_oflowf>
 8015afc:	2a00      	cmp	r2, #0
 8015afe:	da05      	bge.n	8015b0c <__ieee754_expf+0x44>
 8015b00:	4a48      	ldr	r2, [pc, #288]	; (8015c24 <__ieee754_expf+0x15c>)
 8015b02:	4293      	cmp	r3, r2
 8015b04:	d902      	bls.n	8015b0c <__ieee754_expf+0x44>
 8015b06:	2000      	movs	r0, #0
 8015b08:	f000 b8c2 	b.w	8015c90 <__math_uflowf>
 8015b0c:	4a46      	ldr	r2, [pc, #280]	; (8015c28 <__ieee754_expf+0x160>)
 8015b0e:	4293      	cmp	r3, r2
 8015b10:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015b14:	d952      	bls.n	8015bbc <__ieee754_expf+0xf4>
 8015b16:	4a45      	ldr	r2, [pc, #276]	; (8015c2c <__ieee754_expf+0x164>)
 8015b18:	4293      	cmp	r3, r2
 8015b1a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8015b1e:	d834      	bhi.n	8015b8a <__ieee754_expf+0xc2>
 8015b20:	4b43      	ldr	r3, [pc, #268]	; (8015c30 <__ieee754_expf+0x168>)
 8015b22:	4413      	add	r3, r2
 8015b24:	ed93 7a00 	vldr	s14, [r3]
 8015b28:	4b42      	ldr	r3, [pc, #264]	; (8015c34 <__ieee754_expf+0x16c>)
 8015b2a:	4413      	add	r3, r2
 8015b2c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8015b30:	f1c1 0201 	rsb	r2, r1, #1
 8015b34:	edd3 7a00 	vldr	s15, [r3]
 8015b38:	1a52      	subs	r2, r2, r1
 8015b3a:	ee37 0a67 	vsub.f32	s0, s14, s15
 8015b3e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8015b42:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8015c38 <__ieee754_expf+0x170>
 8015b46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8015c3c <__ieee754_expf+0x174>
 8015b4a:	eee6 6a05 	vfma.f32	s13, s12, s10
 8015b4e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8015c40 <__ieee754_expf+0x178>
 8015b52:	eea6 5a86 	vfma.f32	s10, s13, s12
 8015b56:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8015c44 <__ieee754_expf+0x17c>
 8015b5a:	eee5 6a06 	vfma.f32	s13, s10, s12
 8015b5e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8015c48 <__ieee754_expf+0x180>
 8015b62:	eea6 5a86 	vfma.f32	s10, s13, s12
 8015b66:	eef0 6a40 	vmov.f32	s13, s0
 8015b6a:	eee5 6a46 	vfms.f32	s13, s10, s12
 8015b6e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8015b72:	ee20 5a26 	vmul.f32	s10, s0, s13
 8015b76:	bb92      	cbnz	r2, 8015bde <__ieee754_expf+0x116>
 8015b78:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8015b7c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8015b80:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015b84:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8015b88:	4770      	bx	lr
 8015b8a:	4b30      	ldr	r3, [pc, #192]	; (8015c4c <__ieee754_expf+0x184>)
 8015b8c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8015c50 <__ieee754_expf+0x188>
 8015b90:	eddf 6a30 	vldr	s13, [pc, #192]	; 8015c54 <__ieee754_expf+0x18c>
 8015b94:	4413      	add	r3, r2
 8015b96:	edd3 7a00 	vldr	s15, [r3]
 8015b9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015b9e:	eeb0 7a40 	vmov.f32	s14, s0
 8015ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015ba6:	ee17 2a90 	vmov	r2, s15
 8015baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015bae:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8015bb2:	eddf 6a29 	vldr	s13, [pc, #164]	; 8015c58 <__ieee754_expf+0x190>
 8015bb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015bba:	e7be      	b.n	8015b3a <__ieee754_expf+0x72>
 8015bbc:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8015bc0:	d20b      	bcs.n	8015bda <__ieee754_expf+0x112>
 8015bc2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8015c5c <__ieee754_expf+0x194>
 8015bc6:	ee70 6a26 	vadd.f32	s13, s0, s13
 8015bca:	eef4 6ae5 	vcmpe.f32	s13, s11
 8015bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bd2:	dd02      	ble.n	8015bda <__ieee754_expf+0x112>
 8015bd4:	ee30 0a25 	vadd.f32	s0, s0, s11
 8015bd8:	4770      	bx	lr
 8015bda:	2200      	movs	r2, #0
 8015bdc:	e7af      	b.n	8015b3e <__ieee754_expf+0x76>
 8015bde:	ee36 6a66 	vsub.f32	s12, s12, s13
 8015be2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8015be6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8015bea:	bfb8      	it	lt
 8015bec:	3264      	addlt	r2, #100	; 0x64
 8015bee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015bf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015bf6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8015bfa:	ee17 3a90 	vmov	r3, s15
 8015bfe:	bfab      	itete	ge
 8015c00:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8015c04:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8015c08:	ee00 3a10 	vmovge	s0, r3
 8015c0c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8015c60 <__ieee754_expf+0x198>
 8015c10:	bfbc      	itt	lt
 8015c12:	ee00 3a10 	vmovlt	s0, r3
 8015c16:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8015c1a:	4770      	bx	lr
 8015c1c:	00000000 	.word	0x00000000
 8015c20:	42b17217 	.word	0x42b17217
 8015c24:	42cff1b5 	.word	0x42cff1b5
 8015c28:	3eb17218 	.word	0x3eb17218
 8015c2c:	3f851591 	.word	0x3f851591
 8015c30:	08018870 	.word	0x08018870
 8015c34:	08018878 	.word	0x08018878
 8015c38:	3331bb4c 	.word	0x3331bb4c
 8015c3c:	b5ddea0e 	.word	0xb5ddea0e
 8015c40:	388ab355 	.word	0x388ab355
 8015c44:	bb360b61 	.word	0xbb360b61
 8015c48:	3e2aaaab 	.word	0x3e2aaaab
 8015c4c:	08018868 	.word	0x08018868
 8015c50:	3fb8aa3b 	.word	0x3fb8aa3b
 8015c54:	3f317180 	.word	0x3f317180
 8015c58:	3717f7d1 	.word	0x3717f7d1
 8015c5c:	7149f2ca 	.word	0x7149f2ca
 8015c60:	0d800000 	.word	0x0d800000

08015c64 <with_errnof>:
 8015c64:	b513      	push	{r0, r1, r4, lr}
 8015c66:	4604      	mov	r4, r0
 8015c68:	ed8d 0a01 	vstr	s0, [sp, #4]
 8015c6c:	f7fc fda0 	bl	80127b0 <__errno>
 8015c70:	ed9d 0a01 	vldr	s0, [sp, #4]
 8015c74:	6004      	str	r4, [r0, #0]
 8015c76:	b002      	add	sp, #8
 8015c78:	bd10      	pop	{r4, pc}

08015c7a <xflowf>:
 8015c7a:	b130      	cbz	r0, 8015c8a <xflowf+0x10>
 8015c7c:	eef1 7a40 	vneg.f32	s15, s0
 8015c80:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015c84:	2022      	movs	r0, #34	; 0x22
 8015c86:	f7ff bfed 	b.w	8015c64 <with_errnof>
 8015c8a:	eef0 7a40 	vmov.f32	s15, s0
 8015c8e:	e7f7      	b.n	8015c80 <xflowf+0x6>

08015c90 <__math_uflowf>:
 8015c90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015c98 <__math_uflowf+0x8>
 8015c94:	f7ff bff1 	b.w	8015c7a <xflowf>
 8015c98:	10000000 	.word	0x10000000

08015c9c <__math_oflowf>:
 8015c9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015ca4 <__math_oflowf+0x8>
 8015ca0:	f7ff bfeb 	b.w	8015c7a <xflowf>
 8015ca4:	70000000 	.word	0x70000000

08015ca8 <__kernel_rem_pio2>:
 8015ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cac:	ed2d 8b02 	vpush	{d8}
 8015cb0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8015cb4:	f112 0f14 	cmn.w	r2, #20
 8015cb8:	9306      	str	r3, [sp, #24]
 8015cba:	9104      	str	r1, [sp, #16]
 8015cbc:	4bc2      	ldr	r3, [pc, #776]	; (8015fc8 <__kernel_rem_pio2+0x320>)
 8015cbe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8015cc0:	9009      	str	r0, [sp, #36]	; 0x24
 8015cc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015cc6:	9300      	str	r3, [sp, #0]
 8015cc8:	9b06      	ldr	r3, [sp, #24]
 8015cca:	f103 33ff 	add.w	r3, r3, #4294967295
 8015cce:	bfa8      	it	ge
 8015cd0:	1ed4      	subge	r4, r2, #3
 8015cd2:	9305      	str	r3, [sp, #20]
 8015cd4:	bfb2      	itee	lt
 8015cd6:	2400      	movlt	r4, #0
 8015cd8:	2318      	movge	r3, #24
 8015cda:	fb94 f4f3 	sdivge	r4, r4, r3
 8015cde:	f06f 0317 	mvn.w	r3, #23
 8015ce2:	fb04 3303 	mla	r3, r4, r3, r3
 8015ce6:	eb03 0a02 	add.w	sl, r3, r2
 8015cea:	9b00      	ldr	r3, [sp, #0]
 8015cec:	9a05      	ldr	r2, [sp, #20]
 8015cee:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8015fb8 <__kernel_rem_pio2+0x310>
 8015cf2:	eb03 0802 	add.w	r8, r3, r2
 8015cf6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8015cf8:	1aa7      	subs	r7, r4, r2
 8015cfa:	ae20      	add	r6, sp, #128	; 0x80
 8015cfc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8015d00:	2500      	movs	r5, #0
 8015d02:	4545      	cmp	r5, r8
 8015d04:	dd13      	ble.n	8015d2e <__kernel_rem_pio2+0x86>
 8015d06:	9b06      	ldr	r3, [sp, #24]
 8015d08:	aa20      	add	r2, sp, #128	; 0x80
 8015d0a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8015d0e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8015d12:	f04f 0800 	mov.w	r8, #0
 8015d16:	9b00      	ldr	r3, [sp, #0]
 8015d18:	4598      	cmp	r8, r3
 8015d1a:	dc31      	bgt.n	8015d80 <__kernel_rem_pio2+0xd8>
 8015d1c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8015fb8 <__kernel_rem_pio2+0x310>
 8015d20:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8015d24:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015d28:	462f      	mov	r7, r5
 8015d2a:	2600      	movs	r6, #0
 8015d2c:	e01b      	b.n	8015d66 <__kernel_rem_pio2+0xbe>
 8015d2e:	42ef      	cmn	r7, r5
 8015d30:	d407      	bmi.n	8015d42 <__kernel_rem_pio2+0x9a>
 8015d32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8015d36:	f7ea fbf5 	bl	8000524 <__aeabi_i2d>
 8015d3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015d3e:	3501      	adds	r5, #1
 8015d40:	e7df      	b.n	8015d02 <__kernel_rem_pio2+0x5a>
 8015d42:	ec51 0b18 	vmov	r0, r1, d8
 8015d46:	e7f8      	b.n	8015d3a <__kernel_rem_pio2+0x92>
 8015d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015d4c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8015d50:	f7ea fc52 	bl	80005f8 <__aeabi_dmul>
 8015d54:	4602      	mov	r2, r0
 8015d56:	460b      	mov	r3, r1
 8015d58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d5c:	f7ea fa96 	bl	800028c <__adddf3>
 8015d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015d64:	3601      	adds	r6, #1
 8015d66:	9b05      	ldr	r3, [sp, #20]
 8015d68:	429e      	cmp	r6, r3
 8015d6a:	f1a7 0708 	sub.w	r7, r7, #8
 8015d6e:	ddeb      	ble.n	8015d48 <__kernel_rem_pio2+0xa0>
 8015d70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015d74:	f108 0801 	add.w	r8, r8, #1
 8015d78:	ecab 7b02 	vstmia	fp!, {d7}
 8015d7c:	3508      	adds	r5, #8
 8015d7e:	e7ca      	b.n	8015d16 <__kernel_rem_pio2+0x6e>
 8015d80:	9b00      	ldr	r3, [sp, #0]
 8015d82:	aa0c      	add	r2, sp, #48	; 0x30
 8015d84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015d88:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d8a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8015d8c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015d90:	9c00      	ldr	r4, [sp, #0]
 8015d92:	930a      	str	r3, [sp, #40]	; 0x28
 8015d94:	00e3      	lsls	r3, r4, #3
 8015d96:	9308      	str	r3, [sp, #32]
 8015d98:	ab98      	add	r3, sp, #608	; 0x260
 8015d9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015d9e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8015da2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8015da6:	ab70      	add	r3, sp, #448	; 0x1c0
 8015da8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8015dac:	46c3      	mov	fp, r8
 8015dae:	46a1      	mov	r9, r4
 8015db0:	f1b9 0f00 	cmp.w	r9, #0
 8015db4:	f1a5 0508 	sub.w	r5, r5, #8
 8015db8:	dc77      	bgt.n	8015eaa <__kernel_rem_pio2+0x202>
 8015dba:	ec47 6b10 	vmov	d0, r6, r7
 8015dbe:	4650      	mov	r0, sl
 8015dc0:	f000 fac2 	bl	8016348 <scalbn>
 8015dc4:	ec57 6b10 	vmov	r6, r7, d0
 8015dc8:	2200      	movs	r2, #0
 8015dca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8015dce:	ee10 0a10 	vmov	r0, s0
 8015dd2:	4639      	mov	r1, r7
 8015dd4:	f7ea fc10 	bl	80005f8 <__aeabi_dmul>
 8015dd8:	ec41 0b10 	vmov	d0, r0, r1
 8015ddc:	f7ff fa5c 	bl	8015298 <floor>
 8015de0:	4b7a      	ldr	r3, [pc, #488]	; (8015fcc <__kernel_rem_pio2+0x324>)
 8015de2:	ec51 0b10 	vmov	r0, r1, d0
 8015de6:	2200      	movs	r2, #0
 8015de8:	f7ea fc06 	bl	80005f8 <__aeabi_dmul>
 8015dec:	4602      	mov	r2, r0
 8015dee:	460b      	mov	r3, r1
 8015df0:	4630      	mov	r0, r6
 8015df2:	4639      	mov	r1, r7
 8015df4:	f7ea fa48 	bl	8000288 <__aeabi_dsub>
 8015df8:	460f      	mov	r7, r1
 8015dfa:	4606      	mov	r6, r0
 8015dfc:	f7ea feac 	bl	8000b58 <__aeabi_d2iz>
 8015e00:	9002      	str	r0, [sp, #8]
 8015e02:	f7ea fb8f 	bl	8000524 <__aeabi_i2d>
 8015e06:	4602      	mov	r2, r0
 8015e08:	460b      	mov	r3, r1
 8015e0a:	4630      	mov	r0, r6
 8015e0c:	4639      	mov	r1, r7
 8015e0e:	f7ea fa3b 	bl	8000288 <__aeabi_dsub>
 8015e12:	f1ba 0f00 	cmp.w	sl, #0
 8015e16:	4606      	mov	r6, r0
 8015e18:	460f      	mov	r7, r1
 8015e1a:	dd6d      	ble.n	8015ef8 <__kernel_rem_pio2+0x250>
 8015e1c:	1e61      	subs	r1, r4, #1
 8015e1e:	ab0c      	add	r3, sp, #48	; 0x30
 8015e20:	9d02      	ldr	r5, [sp, #8]
 8015e22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015e26:	f1ca 0018 	rsb	r0, sl, #24
 8015e2a:	fa43 f200 	asr.w	r2, r3, r0
 8015e2e:	4415      	add	r5, r2
 8015e30:	4082      	lsls	r2, r0
 8015e32:	1a9b      	subs	r3, r3, r2
 8015e34:	aa0c      	add	r2, sp, #48	; 0x30
 8015e36:	9502      	str	r5, [sp, #8]
 8015e38:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8015e3c:	f1ca 0217 	rsb	r2, sl, #23
 8015e40:	fa43 fb02 	asr.w	fp, r3, r2
 8015e44:	f1bb 0f00 	cmp.w	fp, #0
 8015e48:	dd65      	ble.n	8015f16 <__kernel_rem_pio2+0x26e>
 8015e4a:	9b02      	ldr	r3, [sp, #8]
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	3301      	adds	r3, #1
 8015e50:	9302      	str	r3, [sp, #8]
 8015e52:	4615      	mov	r5, r2
 8015e54:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8015e58:	4294      	cmp	r4, r2
 8015e5a:	f300 809f 	bgt.w	8015f9c <__kernel_rem_pio2+0x2f4>
 8015e5e:	f1ba 0f00 	cmp.w	sl, #0
 8015e62:	dd07      	ble.n	8015e74 <__kernel_rem_pio2+0x1cc>
 8015e64:	f1ba 0f01 	cmp.w	sl, #1
 8015e68:	f000 80c1 	beq.w	8015fee <__kernel_rem_pio2+0x346>
 8015e6c:	f1ba 0f02 	cmp.w	sl, #2
 8015e70:	f000 80c7 	beq.w	8016002 <__kernel_rem_pio2+0x35a>
 8015e74:	f1bb 0f02 	cmp.w	fp, #2
 8015e78:	d14d      	bne.n	8015f16 <__kernel_rem_pio2+0x26e>
 8015e7a:	4632      	mov	r2, r6
 8015e7c:	463b      	mov	r3, r7
 8015e7e:	4954      	ldr	r1, [pc, #336]	; (8015fd0 <__kernel_rem_pio2+0x328>)
 8015e80:	2000      	movs	r0, #0
 8015e82:	f7ea fa01 	bl	8000288 <__aeabi_dsub>
 8015e86:	4606      	mov	r6, r0
 8015e88:	460f      	mov	r7, r1
 8015e8a:	2d00      	cmp	r5, #0
 8015e8c:	d043      	beq.n	8015f16 <__kernel_rem_pio2+0x26e>
 8015e8e:	4650      	mov	r0, sl
 8015e90:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8015fc0 <__kernel_rem_pio2+0x318>
 8015e94:	f000 fa58 	bl	8016348 <scalbn>
 8015e98:	4630      	mov	r0, r6
 8015e9a:	4639      	mov	r1, r7
 8015e9c:	ec53 2b10 	vmov	r2, r3, d0
 8015ea0:	f7ea f9f2 	bl	8000288 <__aeabi_dsub>
 8015ea4:	4606      	mov	r6, r0
 8015ea6:	460f      	mov	r7, r1
 8015ea8:	e035      	b.n	8015f16 <__kernel_rem_pio2+0x26e>
 8015eaa:	4b4a      	ldr	r3, [pc, #296]	; (8015fd4 <__kernel_rem_pio2+0x32c>)
 8015eac:	2200      	movs	r2, #0
 8015eae:	4630      	mov	r0, r6
 8015eb0:	4639      	mov	r1, r7
 8015eb2:	f7ea fba1 	bl	80005f8 <__aeabi_dmul>
 8015eb6:	f7ea fe4f 	bl	8000b58 <__aeabi_d2iz>
 8015eba:	f7ea fb33 	bl	8000524 <__aeabi_i2d>
 8015ebe:	4602      	mov	r2, r0
 8015ec0:	460b      	mov	r3, r1
 8015ec2:	ec43 2b18 	vmov	d8, r2, r3
 8015ec6:	4b44      	ldr	r3, [pc, #272]	; (8015fd8 <__kernel_rem_pio2+0x330>)
 8015ec8:	2200      	movs	r2, #0
 8015eca:	f7ea fb95 	bl	80005f8 <__aeabi_dmul>
 8015ece:	4602      	mov	r2, r0
 8015ed0:	460b      	mov	r3, r1
 8015ed2:	4630      	mov	r0, r6
 8015ed4:	4639      	mov	r1, r7
 8015ed6:	f7ea f9d7 	bl	8000288 <__aeabi_dsub>
 8015eda:	f7ea fe3d 	bl	8000b58 <__aeabi_d2iz>
 8015ede:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015ee2:	f84b 0b04 	str.w	r0, [fp], #4
 8015ee6:	ec51 0b18 	vmov	r0, r1, d8
 8015eea:	f7ea f9cf 	bl	800028c <__adddf3>
 8015eee:	f109 39ff 	add.w	r9, r9, #4294967295
 8015ef2:	4606      	mov	r6, r0
 8015ef4:	460f      	mov	r7, r1
 8015ef6:	e75b      	b.n	8015db0 <__kernel_rem_pio2+0x108>
 8015ef8:	d106      	bne.n	8015f08 <__kernel_rem_pio2+0x260>
 8015efa:	1e63      	subs	r3, r4, #1
 8015efc:	aa0c      	add	r2, sp, #48	; 0x30
 8015efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015f02:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8015f06:	e79d      	b.n	8015e44 <__kernel_rem_pio2+0x19c>
 8015f08:	4b34      	ldr	r3, [pc, #208]	; (8015fdc <__kernel_rem_pio2+0x334>)
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	f7ea fdfa 	bl	8000b04 <__aeabi_dcmpge>
 8015f10:	2800      	cmp	r0, #0
 8015f12:	d140      	bne.n	8015f96 <__kernel_rem_pio2+0x2ee>
 8015f14:	4683      	mov	fp, r0
 8015f16:	2200      	movs	r2, #0
 8015f18:	2300      	movs	r3, #0
 8015f1a:	4630      	mov	r0, r6
 8015f1c:	4639      	mov	r1, r7
 8015f1e:	f7ea fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8015f22:	2800      	cmp	r0, #0
 8015f24:	f000 80c1 	beq.w	80160aa <__kernel_rem_pio2+0x402>
 8015f28:	1e65      	subs	r5, r4, #1
 8015f2a:	462b      	mov	r3, r5
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	9900      	ldr	r1, [sp, #0]
 8015f30:	428b      	cmp	r3, r1
 8015f32:	da6d      	bge.n	8016010 <__kernel_rem_pio2+0x368>
 8015f34:	2a00      	cmp	r2, #0
 8015f36:	f000 808a 	beq.w	801604e <__kernel_rem_pio2+0x3a6>
 8015f3a:	ab0c      	add	r3, sp, #48	; 0x30
 8015f3c:	f1aa 0a18 	sub.w	sl, sl, #24
 8015f40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	f000 80ae 	beq.w	80160a6 <__kernel_rem_pio2+0x3fe>
 8015f4a:	4650      	mov	r0, sl
 8015f4c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8015fc0 <__kernel_rem_pio2+0x318>
 8015f50:	f000 f9fa 	bl	8016348 <scalbn>
 8015f54:	1c6b      	adds	r3, r5, #1
 8015f56:	00da      	lsls	r2, r3, #3
 8015f58:	9205      	str	r2, [sp, #20]
 8015f5a:	ec57 6b10 	vmov	r6, r7, d0
 8015f5e:	aa70      	add	r2, sp, #448	; 0x1c0
 8015f60:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8015fd4 <__kernel_rem_pio2+0x32c>
 8015f64:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8015f68:	462c      	mov	r4, r5
 8015f6a:	f04f 0800 	mov.w	r8, #0
 8015f6e:	2c00      	cmp	r4, #0
 8015f70:	f280 80d4 	bge.w	801611c <__kernel_rem_pio2+0x474>
 8015f74:	462c      	mov	r4, r5
 8015f76:	2c00      	cmp	r4, #0
 8015f78:	f2c0 8102 	blt.w	8016180 <__kernel_rem_pio2+0x4d8>
 8015f7c:	4b18      	ldr	r3, [pc, #96]	; (8015fe0 <__kernel_rem_pio2+0x338>)
 8015f7e:	461e      	mov	r6, r3
 8015f80:	ab70      	add	r3, sp, #448	; 0x1c0
 8015f82:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8015f86:	1b2b      	subs	r3, r5, r4
 8015f88:	f04f 0900 	mov.w	r9, #0
 8015f8c:	f04f 0a00 	mov.w	sl, #0
 8015f90:	2700      	movs	r7, #0
 8015f92:	9306      	str	r3, [sp, #24]
 8015f94:	e0e6      	b.n	8016164 <__kernel_rem_pio2+0x4bc>
 8015f96:	f04f 0b02 	mov.w	fp, #2
 8015f9a:	e756      	b.n	8015e4a <__kernel_rem_pio2+0x1a2>
 8015f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8015fa0:	bb05      	cbnz	r5, 8015fe4 <__kernel_rem_pio2+0x33c>
 8015fa2:	b123      	cbz	r3, 8015fae <__kernel_rem_pio2+0x306>
 8015fa4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8015fa8:	f8c8 3000 	str.w	r3, [r8]
 8015fac:	2301      	movs	r3, #1
 8015fae:	3201      	adds	r2, #1
 8015fb0:	f108 0804 	add.w	r8, r8, #4
 8015fb4:	461d      	mov	r5, r3
 8015fb6:	e74f      	b.n	8015e58 <__kernel_rem_pio2+0x1b0>
	...
 8015fc4:	3ff00000 	.word	0x3ff00000
 8015fc8:	080188c0 	.word	0x080188c0
 8015fcc:	40200000 	.word	0x40200000
 8015fd0:	3ff00000 	.word	0x3ff00000
 8015fd4:	3e700000 	.word	0x3e700000
 8015fd8:	41700000 	.word	0x41700000
 8015fdc:	3fe00000 	.word	0x3fe00000
 8015fe0:	08018880 	.word	0x08018880
 8015fe4:	1acb      	subs	r3, r1, r3
 8015fe6:	f8c8 3000 	str.w	r3, [r8]
 8015fea:	462b      	mov	r3, r5
 8015fec:	e7df      	b.n	8015fae <__kernel_rem_pio2+0x306>
 8015fee:	1e62      	subs	r2, r4, #1
 8015ff0:	ab0c      	add	r3, sp, #48	; 0x30
 8015ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ff6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015ffa:	a90c      	add	r1, sp, #48	; 0x30
 8015ffc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016000:	e738      	b.n	8015e74 <__kernel_rem_pio2+0x1cc>
 8016002:	1e62      	subs	r2, r4, #1
 8016004:	ab0c      	add	r3, sp, #48	; 0x30
 8016006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801600a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801600e:	e7f4      	b.n	8015ffa <__kernel_rem_pio2+0x352>
 8016010:	a90c      	add	r1, sp, #48	; 0x30
 8016012:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8016016:	3b01      	subs	r3, #1
 8016018:	430a      	orrs	r2, r1
 801601a:	e788      	b.n	8015f2e <__kernel_rem_pio2+0x286>
 801601c:	3301      	adds	r3, #1
 801601e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8016022:	2900      	cmp	r1, #0
 8016024:	d0fa      	beq.n	801601c <__kernel_rem_pio2+0x374>
 8016026:	9a08      	ldr	r2, [sp, #32]
 8016028:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801602c:	446a      	add	r2, sp
 801602e:	3a98      	subs	r2, #152	; 0x98
 8016030:	9208      	str	r2, [sp, #32]
 8016032:	9a06      	ldr	r2, [sp, #24]
 8016034:	a920      	add	r1, sp, #128	; 0x80
 8016036:	18a2      	adds	r2, r4, r2
 8016038:	18e3      	adds	r3, r4, r3
 801603a:	f104 0801 	add.w	r8, r4, #1
 801603e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8016042:	9302      	str	r3, [sp, #8]
 8016044:	9b02      	ldr	r3, [sp, #8]
 8016046:	4543      	cmp	r3, r8
 8016048:	da04      	bge.n	8016054 <__kernel_rem_pio2+0x3ac>
 801604a:	461c      	mov	r4, r3
 801604c:	e6a2      	b.n	8015d94 <__kernel_rem_pio2+0xec>
 801604e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016050:	2301      	movs	r3, #1
 8016052:	e7e4      	b.n	801601e <__kernel_rem_pio2+0x376>
 8016054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016056:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801605a:	f7ea fa63 	bl	8000524 <__aeabi_i2d>
 801605e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8016062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016064:	46ab      	mov	fp, r5
 8016066:	461c      	mov	r4, r3
 8016068:	f04f 0900 	mov.w	r9, #0
 801606c:	2600      	movs	r6, #0
 801606e:	2700      	movs	r7, #0
 8016070:	9b05      	ldr	r3, [sp, #20]
 8016072:	4599      	cmp	r9, r3
 8016074:	dd06      	ble.n	8016084 <__kernel_rem_pio2+0x3dc>
 8016076:	9b08      	ldr	r3, [sp, #32]
 8016078:	e8e3 6702 	strd	r6, r7, [r3], #8
 801607c:	f108 0801 	add.w	r8, r8, #1
 8016080:	9308      	str	r3, [sp, #32]
 8016082:	e7df      	b.n	8016044 <__kernel_rem_pio2+0x39c>
 8016084:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8016088:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801608c:	f7ea fab4 	bl	80005f8 <__aeabi_dmul>
 8016090:	4602      	mov	r2, r0
 8016092:	460b      	mov	r3, r1
 8016094:	4630      	mov	r0, r6
 8016096:	4639      	mov	r1, r7
 8016098:	f7ea f8f8 	bl	800028c <__adddf3>
 801609c:	f109 0901 	add.w	r9, r9, #1
 80160a0:	4606      	mov	r6, r0
 80160a2:	460f      	mov	r7, r1
 80160a4:	e7e4      	b.n	8016070 <__kernel_rem_pio2+0x3c8>
 80160a6:	3d01      	subs	r5, #1
 80160a8:	e747      	b.n	8015f3a <__kernel_rem_pio2+0x292>
 80160aa:	ec47 6b10 	vmov	d0, r6, r7
 80160ae:	f1ca 0000 	rsb	r0, sl, #0
 80160b2:	f000 f949 	bl	8016348 <scalbn>
 80160b6:	ec57 6b10 	vmov	r6, r7, d0
 80160ba:	4ba0      	ldr	r3, [pc, #640]	; (801633c <__kernel_rem_pio2+0x694>)
 80160bc:	ee10 0a10 	vmov	r0, s0
 80160c0:	2200      	movs	r2, #0
 80160c2:	4639      	mov	r1, r7
 80160c4:	f7ea fd1e 	bl	8000b04 <__aeabi_dcmpge>
 80160c8:	b1f8      	cbz	r0, 801610a <__kernel_rem_pio2+0x462>
 80160ca:	4b9d      	ldr	r3, [pc, #628]	; (8016340 <__kernel_rem_pio2+0x698>)
 80160cc:	2200      	movs	r2, #0
 80160ce:	4630      	mov	r0, r6
 80160d0:	4639      	mov	r1, r7
 80160d2:	f7ea fa91 	bl	80005f8 <__aeabi_dmul>
 80160d6:	f7ea fd3f 	bl	8000b58 <__aeabi_d2iz>
 80160da:	4680      	mov	r8, r0
 80160dc:	f7ea fa22 	bl	8000524 <__aeabi_i2d>
 80160e0:	4b96      	ldr	r3, [pc, #600]	; (801633c <__kernel_rem_pio2+0x694>)
 80160e2:	2200      	movs	r2, #0
 80160e4:	f7ea fa88 	bl	80005f8 <__aeabi_dmul>
 80160e8:	460b      	mov	r3, r1
 80160ea:	4602      	mov	r2, r0
 80160ec:	4639      	mov	r1, r7
 80160ee:	4630      	mov	r0, r6
 80160f0:	f7ea f8ca 	bl	8000288 <__aeabi_dsub>
 80160f4:	f7ea fd30 	bl	8000b58 <__aeabi_d2iz>
 80160f8:	1c65      	adds	r5, r4, #1
 80160fa:	ab0c      	add	r3, sp, #48	; 0x30
 80160fc:	f10a 0a18 	add.w	sl, sl, #24
 8016100:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016104:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8016108:	e71f      	b.n	8015f4a <__kernel_rem_pio2+0x2a2>
 801610a:	4630      	mov	r0, r6
 801610c:	4639      	mov	r1, r7
 801610e:	f7ea fd23 	bl	8000b58 <__aeabi_d2iz>
 8016112:	ab0c      	add	r3, sp, #48	; 0x30
 8016114:	4625      	mov	r5, r4
 8016116:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801611a:	e716      	b.n	8015f4a <__kernel_rem_pio2+0x2a2>
 801611c:	ab0c      	add	r3, sp, #48	; 0x30
 801611e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016122:	f7ea f9ff 	bl	8000524 <__aeabi_i2d>
 8016126:	4632      	mov	r2, r6
 8016128:	463b      	mov	r3, r7
 801612a:	f7ea fa65 	bl	80005f8 <__aeabi_dmul>
 801612e:	4642      	mov	r2, r8
 8016130:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8016134:	464b      	mov	r3, r9
 8016136:	4630      	mov	r0, r6
 8016138:	4639      	mov	r1, r7
 801613a:	f7ea fa5d 	bl	80005f8 <__aeabi_dmul>
 801613e:	3c01      	subs	r4, #1
 8016140:	4606      	mov	r6, r0
 8016142:	460f      	mov	r7, r1
 8016144:	e713      	b.n	8015f6e <__kernel_rem_pio2+0x2c6>
 8016146:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801614a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801614e:	f7ea fa53 	bl	80005f8 <__aeabi_dmul>
 8016152:	4602      	mov	r2, r0
 8016154:	460b      	mov	r3, r1
 8016156:	4648      	mov	r0, r9
 8016158:	4651      	mov	r1, sl
 801615a:	f7ea f897 	bl	800028c <__adddf3>
 801615e:	3701      	adds	r7, #1
 8016160:	4681      	mov	r9, r0
 8016162:	468a      	mov	sl, r1
 8016164:	9b00      	ldr	r3, [sp, #0]
 8016166:	429f      	cmp	r7, r3
 8016168:	dc02      	bgt.n	8016170 <__kernel_rem_pio2+0x4c8>
 801616a:	9b06      	ldr	r3, [sp, #24]
 801616c:	429f      	cmp	r7, r3
 801616e:	ddea      	ble.n	8016146 <__kernel_rem_pio2+0x49e>
 8016170:	9a06      	ldr	r2, [sp, #24]
 8016172:	ab48      	add	r3, sp, #288	; 0x120
 8016174:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8016178:	e9c6 9a00 	strd	r9, sl, [r6]
 801617c:	3c01      	subs	r4, #1
 801617e:	e6fa      	b.n	8015f76 <__kernel_rem_pio2+0x2ce>
 8016180:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8016182:	2b02      	cmp	r3, #2
 8016184:	dc0b      	bgt.n	801619e <__kernel_rem_pio2+0x4f6>
 8016186:	2b00      	cmp	r3, #0
 8016188:	dc39      	bgt.n	80161fe <__kernel_rem_pio2+0x556>
 801618a:	d05d      	beq.n	8016248 <__kernel_rem_pio2+0x5a0>
 801618c:	9b02      	ldr	r3, [sp, #8]
 801618e:	f003 0007 	and.w	r0, r3, #7
 8016192:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8016196:	ecbd 8b02 	vpop	{d8}
 801619a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801619e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80161a0:	2b03      	cmp	r3, #3
 80161a2:	d1f3      	bne.n	801618c <__kernel_rem_pio2+0x4e4>
 80161a4:	9b05      	ldr	r3, [sp, #20]
 80161a6:	9500      	str	r5, [sp, #0]
 80161a8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80161ac:	eb0d 0403 	add.w	r4, sp, r3
 80161b0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80161b4:	46a2      	mov	sl, r4
 80161b6:	9b00      	ldr	r3, [sp, #0]
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	f1aa 0a08 	sub.w	sl, sl, #8
 80161be:	dc69      	bgt.n	8016294 <__kernel_rem_pio2+0x5ec>
 80161c0:	46aa      	mov	sl, r5
 80161c2:	f1ba 0f01 	cmp.w	sl, #1
 80161c6:	f1a4 0408 	sub.w	r4, r4, #8
 80161ca:	f300 8083 	bgt.w	80162d4 <__kernel_rem_pio2+0x62c>
 80161ce:	9c05      	ldr	r4, [sp, #20]
 80161d0:	ab48      	add	r3, sp, #288	; 0x120
 80161d2:	441c      	add	r4, r3
 80161d4:	2000      	movs	r0, #0
 80161d6:	2100      	movs	r1, #0
 80161d8:	2d01      	cmp	r5, #1
 80161da:	f300 809a 	bgt.w	8016312 <__kernel_rem_pio2+0x66a>
 80161de:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80161e2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80161e6:	f1bb 0f00 	cmp.w	fp, #0
 80161ea:	f040 8098 	bne.w	801631e <__kernel_rem_pio2+0x676>
 80161ee:	9b04      	ldr	r3, [sp, #16]
 80161f0:	e9c3 7800 	strd	r7, r8, [r3]
 80161f4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80161f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80161fc:	e7c6      	b.n	801618c <__kernel_rem_pio2+0x4e4>
 80161fe:	9e05      	ldr	r6, [sp, #20]
 8016200:	ab48      	add	r3, sp, #288	; 0x120
 8016202:	441e      	add	r6, r3
 8016204:	462c      	mov	r4, r5
 8016206:	2000      	movs	r0, #0
 8016208:	2100      	movs	r1, #0
 801620a:	2c00      	cmp	r4, #0
 801620c:	da33      	bge.n	8016276 <__kernel_rem_pio2+0x5ce>
 801620e:	f1bb 0f00 	cmp.w	fp, #0
 8016212:	d036      	beq.n	8016282 <__kernel_rem_pio2+0x5da>
 8016214:	4602      	mov	r2, r0
 8016216:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801621a:	9c04      	ldr	r4, [sp, #16]
 801621c:	e9c4 2300 	strd	r2, r3, [r4]
 8016220:	4602      	mov	r2, r0
 8016222:	460b      	mov	r3, r1
 8016224:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8016228:	f7ea f82e 	bl	8000288 <__aeabi_dsub>
 801622c:	ae4a      	add	r6, sp, #296	; 0x128
 801622e:	2401      	movs	r4, #1
 8016230:	42a5      	cmp	r5, r4
 8016232:	da29      	bge.n	8016288 <__kernel_rem_pio2+0x5e0>
 8016234:	f1bb 0f00 	cmp.w	fp, #0
 8016238:	d002      	beq.n	8016240 <__kernel_rem_pio2+0x598>
 801623a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801623e:	4619      	mov	r1, r3
 8016240:	9b04      	ldr	r3, [sp, #16]
 8016242:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8016246:	e7a1      	b.n	801618c <__kernel_rem_pio2+0x4e4>
 8016248:	9c05      	ldr	r4, [sp, #20]
 801624a:	ab48      	add	r3, sp, #288	; 0x120
 801624c:	441c      	add	r4, r3
 801624e:	2000      	movs	r0, #0
 8016250:	2100      	movs	r1, #0
 8016252:	2d00      	cmp	r5, #0
 8016254:	da09      	bge.n	801626a <__kernel_rem_pio2+0x5c2>
 8016256:	f1bb 0f00 	cmp.w	fp, #0
 801625a:	d002      	beq.n	8016262 <__kernel_rem_pio2+0x5ba>
 801625c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016260:	4619      	mov	r1, r3
 8016262:	9b04      	ldr	r3, [sp, #16]
 8016264:	e9c3 0100 	strd	r0, r1, [r3]
 8016268:	e790      	b.n	801618c <__kernel_rem_pio2+0x4e4>
 801626a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801626e:	f7ea f80d 	bl	800028c <__adddf3>
 8016272:	3d01      	subs	r5, #1
 8016274:	e7ed      	b.n	8016252 <__kernel_rem_pio2+0x5aa>
 8016276:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801627a:	f7ea f807 	bl	800028c <__adddf3>
 801627e:	3c01      	subs	r4, #1
 8016280:	e7c3      	b.n	801620a <__kernel_rem_pio2+0x562>
 8016282:	4602      	mov	r2, r0
 8016284:	460b      	mov	r3, r1
 8016286:	e7c8      	b.n	801621a <__kernel_rem_pio2+0x572>
 8016288:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801628c:	f7e9 fffe 	bl	800028c <__adddf3>
 8016290:	3401      	adds	r4, #1
 8016292:	e7cd      	b.n	8016230 <__kernel_rem_pio2+0x588>
 8016294:	e9da 8900 	ldrd	r8, r9, [sl]
 8016298:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801629c:	9b00      	ldr	r3, [sp, #0]
 801629e:	3b01      	subs	r3, #1
 80162a0:	9300      	str	r3, [sp, #0]
 80162a2:	4632      	mov	r2, r6
 80162a4:	463b      	mov	r3, r7
 80162a6:	4640      	mov	r0, r8
 80162a8:	4649      	mov	r1, r9
 80162aa:	f7e9 ffef 	bl	800028c <__adddf3>
 80162ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80162b2:	4602      	mov	r2, r0
 80162b4:	460b      	mov	r3, r1
 80162b6:	4640      	mov	r0, r8
 80162b8:	4649      	mov	r1, r9
 80162ba:	f7e9 ffe5 	bl	8000288 <__aeabi_dsub>
 80162be:	4632      	mov	r2, r6
 80162c0:	463b      	mov	r3, r7
 80162c2:	f7e9 ffe3 	bl	800028c <__adddf3>
 80162c6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80162ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80162ce:	ed8a 7b00 	vstr	d7, [sl]
 80162d2:	e770      	b.n	80161b6 <__kernel_rem_pio2+0x50e>
 80162d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80162d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80162dc:	4640      	mov	r0, r8
 80162de:	4632      	mov	r2, r6
 80162e0:	463b      	mov	r3, r7
 80162e2:	4649      	mov	r1, r9
 80162e4:	f7e9 ffd2 	bl	800028c <__adddf3>
 80162e8:	e9cd 0100 	strd	r0, r1, [sp]
 80162ec:	4602      	mov	r2, r0
 80162ee:	460b      	mov	r3, r1
 80162f0:	4640      	mov	r0, r8
 80162f2:	4649      	mov	r1, r9
 80162f4:	f7e9 ffc8 	bl	8000288 <__aeabi_dsub>
 80162f8:	4632      	mov	r2, r6
 80162fa:	463b      	mov	r3, r7
 80162fc:	f7e9 ffc6 	bl	800028c <__adddf3>
 8016300:	ed9d 7b00 	vldr	d7, [sp]
 8016304:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016308:	ed84 7b00 	vstr	d7, [r4]
 801630c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016310:	e757      	b.n	80161c2 <__kernel_rem_pio2+0x51a>
 8016312:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8016316:	f7e9 ffb9 	bl	800028c <__adddf3>
 801631a:	3d01      	subs	r5, #1
 801631c:	e75c      	b.n	80161d8 <__kernel_rem_pio2+0x530>
 801631e:	9b04      	ldr	r3, [sp, #16]
 8016320:	9a04      	ldr	r2, [sp, #16]
 8016322:	601f      	str	r7, [r3, #0]
 8016324:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8016328:	605c      	str	r4, [r3, #4]
 801632a:	609d      	str	r5, [r3, #8]
 801632c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016330:	60d3      	str	r3, [r2, #12]
 8016332:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016336:	6110      	str	r0, [r2, #16]
 8016338:	6153      	str	r3, [r2, #20]
 801633a:	e727      	b.n	801618c <__kernel_rem_pio2+0x4e4>
 801633c:	41700000 	.word	0x41700000
 8016340:	3e700000 	.word	0x3e700000
 8016344:	00000000 	.word	0x00000000

08016348 <scalbn>:
 8016348:	b570      	push	{r4, r5, r6, lr}
 801634a:	ec55 4b10 	vmov	r4, r5, d0
 801634e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8016352:	4606      	mov	r6, r0
 8016354:	462b      	mov	r3, r5
 8016356:	b999      	cbnz	r1, 8016380 <scalbn+0x38>
 8016358:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801635c:	4323      	orrs	r3, r4
 801635e:	d03f      	beq.n	80163e0 <scalbn+0x98>
 8016360:	4b35      	ldr	r3, [pc, #212]	; (8016438 <scalbn+0xf0>)
 8016362:	4629      	mov	r1, r5
 8016364:	ee10 0a10 	vmov	r0, s0
 8016368:	2200      	movs	r2, #0
 801636a:	f7ea f945 	bl	80005f8 <__aeabi_dmul>
 801636e:	4b33      	ldr	r3, [pc, #204]	; (801643c <scalbn+0xf4>)
 8016370:	429e      	cmp	r6, r3
 8016372:	4604      	mov	r4, r0
 8016374:	460d      	mov	r5, r1
 8016376:	da10      	bge.n	801639a <scalbn+0x52>
 8016378:	a327      	add	r3, pc, #156	; (adr r3, 8016418 <scalbn+0xd0>)
 801637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801637e:	e01f      	b.n	80163c0 <scalbn+0x78>
 8016380:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8016384:	4291      	cmp	r1, r2
 8016386:	d10c      	bne.n	80163a2 <scalbn+0x5a>
 8016388:	ee10 2a10 	vmov	r2, s0
 801638c:	4620      	mov	r0, r4
 801638e:	4629      	mov	r1, r5
 8016390:	f7e9 ff7c 	bl	800028c <__adddf3>
 8016394:	4604      	mov	r4, r0
 8016396:	460d      	mov	r5, r1
 8016398:	e022      	b.n	80163e0 <scalbn+0x98>
 801639a:	460b      	mov	r3, r1
 801639c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80163a0:	3936      	subs	r1, #54	; 0x36
 80163a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80163a6:	4296      	cmp	r6, r2
 80163a8:	dd0d      	ble.n	80163c6 <scalbn+0x7e>
 80163aa:	2d00      	cmp	r5, #0
 80163ac:	a11c      	add	r1, pc, #112	; (adr r1, 8016420 <scalbn+0xd8>)
 80163ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80163b2:	da02      	bge.n	80163ba <scalbn+0x72>
 80163b4:	a11c      	add	r1, pc, #112	; (adr r1, 8016428 <scalbn+0xe0>)
 80163b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80163ba:	a319      	add	r3, pc, #100	; (adr r3, 8016420 <scalbn+0xd8>)
 80163bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163c0:	f7ea f91a 	bl	80005f8 <__aeabi_dmul>
 80163c4:	e7e6      	b.n	8016394 <scalbn+0x4c>
 80163c6:	1872      	adds	r2, r6, r1
 80163c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80163cc:	428a      	cmp	r2, r1
 80163ce:	dcec      	bgt.n	80163aa <scalbn+0x62>
 80163d0:	2a00      	cmp	r2, #0
 80163d2:	dd08      	ble.n	80163e6 <scalbn+0x9e>
 80163d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80163d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80163dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80163e0:	ec45 4b10 	vmov	d0, r4, r5
 80163e4:	bd70      	pop	{r4, r5, r6, pc}
 80163e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80163ea:	da08      	bge.n	80163fe <scalbn+0xb6>
 80163ec:	2d00      	cmp	r5, #0
 80163ee:	a10a      	add	r1, pc, #40	; (adr r1, 8016418 <scalbn+0xd0>)
 80163f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80163f4:	dac0      	bge.n	8016378 <scalbn+0x30>
 80163f6:	a10e      	add	r1, pc, #56	; (adr r1, 8016430 <scalbn+0xe8>)
 80163f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80163fc:	e7bc      	b.n	8016378 <scalbn+0x30>
 80163fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016402:	3236      	adds	r2, #54	; 0x36
 8016404:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016408:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801640c:	4620      	mov	r0, r4
 801640e:	4b0c      	ldr	r3, [pc, #48]	; (8016440 <scalbn+0xf8>)
 8016410:	2200      	movs	r2, #0
 8016412:	e7d5      	b.n	80163c0 <scalbn+0x78>
 8016414:	f3af 8000 	nop.w
 8016418:	c2f8f359 	.word	0xc2f8f359
 801641c:	01a56e1f 	.word	0x01a56e1f
 8016420:	8800759c 	.word	0x8800759c
 8016424:	7e37e43c 	.word	0x7e37e43c
 8016428:	8800759c 	.word	0x8800759c
 801642c:	fe37e43c 	.word	0xfe37e43c
 8016430:	c2f8f359 	.word	0xc2f8f359
 8016434:	81a56e1f 	.word	0x81a56e1f
 8016438:	43500000 	.word	0x43500000
 801643c:	ffff3cb0 	.word	0xffff3cb0
 8016440:	3c900000 	.word	0x3c900000

08016444 <_init>:
 8016444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016446:	bf00      	nop
 8016448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801644a:	bc08      	pop	{r3}
 801644c:	469e      	mov	lr, r3
 801644e:	4770      	bx	lr

08016450 <_fini>:
 8016450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016452:	bf00      	nop
 8016454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016456:	bc08      	pop	{r3}
 8016458:	469e      	mov	lr, r3
 801645a:	4770      	bx	lr
