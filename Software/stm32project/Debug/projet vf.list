
projet vf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ac68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002568  0801adf8  0801adf8  0002adf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d360  0801d360  00030308  2**0
                  CONTENTS
  4 .ARM          00000008  0801d360  0801d360  0002d360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d368  0801d368  00030308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d368  0801d368  0002d368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d36c  0801d36c  0002d36c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  0801d370  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023ac  20000308  0801d678  00030308  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200026b4  0801d678  000326b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ccf0  00000000  00000000  0003037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006379  00000000  00000000  0005d06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002330  00000000  00000000  000633e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b08  00000000  00000000  00065718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009826  00000000  00000000  00067220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030deb  00000000  00000000  00070a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8c1a  00000000  00000000  000a1831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ae68  00000000  00000000  0018a44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001952b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000308 	.word	0x20000308
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ade0 	.word	0x0801ade0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000030c 	.word	0x2000030c
 80001cc:	0801ade0 	.word	0x0801ade0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001006:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001008:	4a38      	ldr	r2, [pc, #224]	; (80010ec <MX_ADC1_Init+0xfc>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001012:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001024:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001026:	2204      	movs	r2, #4
 8001028:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800102c:	2200      	movs	r2, #0
 800102e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001030:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001032:	2201      	movs	r2, #1
 8001034:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001038:	2203      	movs	r2, #3
 800103a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001046:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800104e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800105c:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800105e:	2200      	movs	r2, #0
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001062:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106a:	481f      	ldr	r0, [pc, #124]	; (80010e8 <MX_ADC1_Init+0xf8>)
 800106c:	f005 fbc8 	bl	8006800 <HAL_ADC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001076:	f000 fd10 	bl	8001a9a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_ADC1_Init+0x100>)
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800107e:	2306      	movs	r3, #6
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001082:	2307      	movs	r3, #7
 8001084:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001086:	237f      	movs	r3, #127	; 0x7f
 8001088:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108a:	2304      	movs	r3, #4
 800108c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	463b      	mov	r3, r7
 8001094:	4619      	mov	r1, r3
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <MX_ADC1_Init+0xf8>)
 8001098:	f005 ff4a 	bl	8006f30 <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010a2:	f000 fcfa 	bl	8001a9a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <MX_ADC1_Init+0x104>)
 80010a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010aa:	230c      	movs	r3, #12
 80010ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_ADC1_Init+0xf8>)
 80010b4:	f005 ff3c 	bl	8006f30 <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80010be:	f000 fcec 	bl	8001a9a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <MX_ADC1_Init+0x108>)
 80010c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010c6:	2312      	movs	r3, #18
 80010c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_ADC1_Init+0xf8>)
 80010d0:	f005 ff2e 	bl	8006f30 <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010da:	f000 fcde 	bl	8001a9a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000324 	.word	0x20000324
 80010ec:	50040000 	.word	0x50040000
 80010f0:	80000001 	.word	0x80000001
 80010f4:	c7520000 	.word	0xc7520000
 80010f8:	25b00200 	.word	0x25b00200

080010fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <HAL_ADC_MspInit+0xdc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d157      	bne.n	80011ce <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800111e:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001124:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b29      	ldr	r3, [pc, #164]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a28      	ldr	r2, [pc, #160]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b26      	ldr	r3, [pc, #152]	; (80011dc <HAL_ADC_MspInit+0xe0>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800114e:	2310      	movs	r3, #16
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001152:	230b      	movs	r3, #11
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f006 ffa6 	bl	80080b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800116a:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <HAL_ADC_MspInit+0xe8>)
 800116c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800118c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001194:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 8001198:	2200      	movs	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800119c:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011a2:	480f      	ldr	r0, [pc, #60]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011a4:	f006 fd04 	bl	8007bb0 <HAL_DMA_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80011ae:	f000 fc74 	bl	8001a9a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <HAL_ADC_MspInit+0xe4>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2012      	movs	r0, #18
 80011c4:	f006 fcbd 	bl	8007b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80011c8:	2012      	movs	r0, #18
 80011ca:	f006 fcd6 	bl	8007b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	50040000 	.word	0x50040000
 80011dc:	40021000 	.word	0x40021000
 80011e0:	20000388 	.word	0x20000388
 80011e4:	40020008 	.word	0x40020008

080011e8 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80011e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a54      	ldr	r2, [pc, #336]	; (8001348 <HAL_ADC_ConvCpltCallback+0x160>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	f040 8091 	bne.w	8001320 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 80011fe:	4b53      	ldr	r3, [pc, #332]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f98e 	bl	8000524 <__aeabi_i2d>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	a14a      	add	r1, pc, #296	; (adr r1, 8001338 <HAL_ADC_ConvCpltCallback+0x150>)
 800120e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001212:	f7ff fb1b 	bl	800084c <__aeabi_ddiv>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fce3 	bl	8000be8 <__aeabi_d2f>
 8001222:	4603      	mov	r3, r0
 8001224:	4a4a      	ldr	r2, [pc, #296]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 8001226:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001228:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <HAL_ADC_ConvCpltCallback+0x16c>)
 800122a:	ed93 7a00 	vldr	s14, [r3]
 800122e:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <HAL_ADC_ConvCpltCallback+0x170>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001238:	ee17 0a90 	vmov	r0, s15
 800123c:	f7ff f984 	bl	8000548 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	f04f 0000 	mov.w	r0, #0
 8001248:	4944      	ldr	r1, [pc, #272]	; (800135c <HAL_ADC_ConvCpltCallback+0x174>)
 800124a:	f7ff faff 	bl	800084c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4690      	mov	r8, r2
 8001254:	4699      	mov	r9, r3
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001258:	885b      	ldrh	r3, [r3, #2]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f962 	bl	8000524 <__aeabi_i2d>
 8001260:	4604      	mov	r4, r0
 8001262:	460d      	mov	r5, r1
 8001264:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f96d 	bl	8000548 <__aeabi_f2d>
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <HAL_ADC_ConvCpltCallback+0x178>)
 8001274:	f7ff faea 	bl	800084c <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f9ba 	bl	80005f8 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4614      	mov	r4, r2
 800128a:	461d      	mov	r5, r3
 800128c:	4b32      	ldr	r3, [pc, #200]	; (8001358 <HAL_ADC_ConvCpltCallback+0x170>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f959 	bl	8000548 <__aeabi_f2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4620      	mov	r0, r4
 800129c:	4629      	mov	r1, r5
 800129e:	f7fe fff3 	bl	8000288 <__aeabi_dsub>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4640      	mov	r0, r8
 80012a8:	4649      	mov	r1, r9
 80012aa:	f7ff f9a5 	bl	80005f8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc97 	bl	8000be8 <__aeabi_d2f>
 80012ba:	ee07 0a10 	vmov	s14, r0
 80012be:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80012c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_ADC_ConvCpltCallback+0x17c>)
 80012c8:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 80012ce:	889b      	ldrh	r3, [r3, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f927 	bl	8000524 <__aeabi_i2d>
 80012d6:	a31a      	add	r3, pc, #104	; (adr r3, 8001340 <HAL_ADC_ConvCpltCallback+0x158>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff fab6 	bl	800084c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	f7fe ffce 	bl	800028c <__adddf3>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_ADC_ConvCpltCallback+0x168>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f923 	bl	8000548 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4620      	mov	r0, r4
 8001308:	4629      	mov	r1, r5
 800130a:	f7ff f975 	bl	80005f8 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fc67 	bl	8000be8 <__aeabi_d2f>
 800131a:	4603      	mov	r3, r0
 800131c:	4a12      	ldr	r2, [pc, #72]	; (8001368 <HAL_ADC_ConvCpltCallback+0x180>)
 800131e:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001320:	2203      	movs	r2, #3
 8001322:	490a      	ldr	r1, [pc, #40]	; (800134c <HAL_ADC_ConvCpltCallback+0x164>)
 8001324:	4811      	ldr	r0, [pc, #68]	; (800136c <HAL_ADC_ConvCpltCallback+0x184>)
 8001326:	f005 fbad 	bl	8006a84 <HAL_ADC_Start_DMA>



}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001334:	f3af 8000 	nop.w
 8001338:	d70a3d70 	.word	0xd70a3d70
 800133c:	40b36323 	.word	0x40b36323
 8001340:	00000000 	.word	0x00000000
 8001344:	40affe00 	.word	0x40affe00
 8001348:	50040000 	.word	0x50040000
 800134c:	20000730 	.word	0x20000730
 8001350:	2000073c 	.word	0x2000073c
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004
 800135c:	40590000 	.word	0x40590000
 8001360:	40080000 	.word	0x40080000
 8001364:	20000738 	.word	0x20000738
 8001368:	20000740 	.word	0x20000740
 800136c:	20000324 	.word	0x20000324

08001370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <MX_DMA_Init+0x80>)
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <MX_DMA_Init+0x80>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6493      	str	r3, [r2, #72]	; 0x48
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <MX_DMA_Init+0x80>)
 8001384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_DMA_Init+0x80>)
 8001390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <MX_DMA_Init+0x80>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6493      	str	r3, [r2, #72]	; 0x48
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_DMA_Init+0x80>)
 800139c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	200b      	movs	r0, #11
 80013ac:	f006 fbc9 	bl	8007b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013b0:	200b      	movs	r0, #11
 80013b2:	f006 fbe2 	bl	8007b7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	200c      	movs	r0, #12
 80013bc:	f006 fbc1 	bl	8007b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013c0:	200c      	movs	r0, #12
 80013c2:	f006 fbda 	bl	8007b7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	200d      	movs	r0, #13
 80013cc:	f006 fbb9 	bl	8007b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80013d0:	200d      	movs	r0, #13
 80013d2:	f006 fbd2 	bl	8007b7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel7_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	2045      	movs	r0, #69	; 0x45
 80013dc:	f006 fbb1 	bl	8007b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel7_IRQn);
 80013e0:	2045      	movs	r0, #69	; 0x45
 80013e2:	f006 fbca 	bl	8007b7a <HAL_NVIC_EnableIRQ>

}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000

080013f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	4b38      	ldr	r3, [pc, #224]	; (80014ec <MX_GPIO_Init+0xf8>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	4a37      	ldr	r2, [pc, #220]	; (80014ec <MX_GPIO_Init+0xf8>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001416:	4b35      	ldr	r3, [pc, #212]	; (80014ec <MX_GPIO_Init+0xf8>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b32      	ldr	r3, [pc, #200]	; (80014ec <MX_GPIO_Init+0xf8>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	4a31      	ldr	r2, [pc, #196]	; (80014ec <MX_GPIO_Init+0xf8>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <MX_GPIO_Init+0xf8>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2102      	movs	r1, #2
 800143e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001442:	f006 ffb9 	bl	80083b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2101      	movs	r1, #1
 800144a:	4829      	ldr	r0, [pc, #164]	; (80014f0 <MX_GPIO_Init+0xfc>)
 800144c:	f006 ffb4 	bl	80083b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001450:	2302      	movs	r3, #2
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146a:	f006 fe23 	bl	80080b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 800146e:	2301      	movs	r3, #1
 8001470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	4619      	mov	r1, r3
 8001484:	481a      	ldr	r0, [pc, #104]	; (80014f0 <MX_GPIO_Init+0xfc>)
 8001486:	f006 fe15 	bl	80080b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800148a:	2302      	movs	r3, #2
 800148c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800148e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	4619      	mov	r1, r3
 800149e:	4814      	ldr	r0, [pc, #80]	; (80014f0 <MX_GPIO_Init+0xfc>)
 80014a0:	f006 fe08 	bl	80080b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014aa:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014be:	f006 fdf9 	bl	80080b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2101      	movs	r1, #1
 80014c6:	2007      	movs	r0, #7
 80014c8:	f006 fb3b 	bl	8007b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014cc:	2007      	movs	r0, #7
 80014ce:	f006 fb54 	bl	8007b7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2102      	movs	r1, #2
 80014d6:	2017      	movs	r0, #23
 80014d8:	f006 fb33 	bl	8007b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014dc:	2017      	movs	r0, #23
 80014de:	f006 fb4c 	bl	8007b7a <HAL_NVIC_EnableIRQ>

}
 80014e2:	bf00      	nop
 80014e4:	3720      	adds	r7, #32
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000400 	.word	0x48000400

080014f4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_I2C1_Init+0x74>)
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <MX_I2C1_Init+0x78>)
 80014fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00202538;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_I2C1_Init+0x74>)
 8001500:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <MX_I2C1_Init+0x7c>)
 8001502:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_I2C1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_I2C1_Init+0x74>)
 800150c:	2201      	movs	r2, #1
 800150e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_I2C1_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_I2C1_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <MX_I2C1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_I2C1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_I2C1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800152e:	480e      	ldr	r0, [pc, #56]	; (8001568 <MX_I2C1_Init+0x74>)
 8001530:	f006 ff72 	bl	8008418 <HAL_I2C_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800153a:	f000 faae 	bl	8001a9a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800153e:	2100      	movs	r1, #0
 8001540:	4809      	ldr	r0, [pc, #36]	; (8001568 <MX_I2C1_Init+0x74>)
 8001542:	f007 fb7d 	bl	8008c40 <HAL_I2CEx_ConfigAnalogFilter>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800154c:	f000 faa5 	bl	8001a9a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001550:	2100      	movs	r1, #0
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_I2C1_Init+0x74>)
 8001554:	f007 fbbf 	bl	8008cd6 <HAL_I2CEx_ConfigDigitalFilter>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800155e:	f000 fa9c 	bl	8001a9a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200003d0 	.word	0x200003d0
 800156c:	40005400 	.word	0x40005400
 8001570:	00202538 	.word	0x00202538

08001574 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_I2C3_Init+0x7c>)
 800157a:	4a1e      	ldr	r2, [pc, #120]	; (80015f4 <MX_I2C3_Init+0x80>)
 800157c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00100618;
 800157e:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <MX_I2C3_Init+0x7c>)
 8001580:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <MX_I2C3_Init+0x84>)
 8001582:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_I2C3_Init+0x7c>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158a:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <MX_I2C3_Init+0x7c>)
 800158c:	2201      	movs	r2, #1
 800158e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <MX_I2C3_Init+0x7c>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_I2C3_Init+0x7c>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <MX_I2C3_Init+0x7c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a2:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_I2C3_Init+0x7c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_I2C3_Init+0x7c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015ae:	4810      	ldr	r0, [pc, #64]	; (80015f0 <MX_I2C3_Init+0x7c>)
 80015b0:	f006 ff32 	bl	8008418 <HAL_I2C_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80015ba:	f000 fa6e 	bl	8001a9a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015be:	2100      	movs	r1, #0
 80015c0:	480b      	ldr	r0, [pc, #44]	; (80015f0 <MX_I2C3_Init+0x7c>)
 80015c2:	f007 fb3d 	bl	8008c40 <HAL_I2CEx_ConfigAnalogFilter>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80015cc:	f000 fa65 	bl	8001a9a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80015d0:	2100      	movs	r1, #0
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_I2C3_Init+0x7c>)
 80015d4:	f007 fb7f 	bl	8008cd6 <HAL_I2CEx_ConfigDigitalFilter>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80015de:	f000 fa5c 	bl	8001a9a <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80015e2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80015e6:	f007 fbc3 	bl	8008d70 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000424 	.word	0x20000424
 80015f4:	40005c00 	.word	0x40005c00
 80015f8:	00100618 	.word	0x00100618

080015fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0a2      	sub	sp, #136	; 0x88
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	2254      	movs	r2, #84	; 0x54
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f015 f8e4 	bl	80167ea <memset>
  if(i2cHandle->Instance==I2C1)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a50      	ldr	r2, [pc, #320]	; (8001768 <HAL_I2C_MspInit+0x16c>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d13a      	bne.n	80016a2 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800162c:	2340      	movs	r3, #64	; 0x40
 800162e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001630:	2300      	movs	r3, #0
 8001632:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001634:	f107 0320 	add.w	r3, r7, #32
 8001638:	4618      	mov	r0, r3
 800163a:	f009 ffe3 	bl	800b604 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001644:	f000 fa29 	bl	8001a9a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b48      	ldr	r3, [pc, #288]	; (800176c <HAL_I2C_MspInit+0x170>)
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	4a47      	ldr	r2, [pc, #284]	; (800176c <HAL_I2C_MspInit+0x170>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001654:	4b45      	ldr	r3, [pc, #276]	; (800176c <HAL_I2C_MspInit+0x170>)
 8001656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001660:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001664:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001666:	2312      	movs	r3, #18
 8001668:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001674:	2304      	movs	r3, #4
 8001676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800167e:	4619      	mov	r1, r3
 8001680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001684:	f006 fd16 	bl	80080b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001688:	4b38      	ldr	r3, [pc, #224]	; (800176c <HAL_I2C_MspInit+0x170>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	4a37      	ldr	r2, [pc, #220]	; (800176c <HAL_I2C_MspInit+0x170>)
 800168e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001692:	6593      	str	r3, [r2, #88]	; 0x58
 8001694:	4b35      	ldr	r3, [pc, #212]	; (800176c <HAL_I2C_MspInit+0x170>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80016a0:	e05d      	b.n	800175e <HAL_I2C_MspInit+0x162>
  else if(i2cHandle->Instance==I2C3)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a32      	ldr	r2, [pc, #200]	; (8001770 <HAL_I2C_MspInit+0x174>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d158      	bne.n	800175e <HAL_I2C_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80016ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_SYSCLK;
 80016b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b8:	f107 0320 	add.w	r3, r7, #32
 80016bc:	4618      	mov	r0, r3
 80016be:	f009 ffa1 	bl	800b604 <HAL_RCCEx_PeriphCLKConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80016c8:	f000 f9e7 	bl	8001a9a <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	4a26      	ldr	r2, [pc, #152]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e8:	4a20      	ldr	r2, [pc, #128]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <HAL_I2C_MspInit+0x170>)
 80016f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001700:	2312      	movs	r3, #18
 8001702:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800170e:	2304      	movs	r3, #4
 8001710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001718:	4619      	mov	r1, r3
 800171a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171e:	f006 fcc9 	bl	80080b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001722:	2310      	movs	r3, #16
 8001724:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001726:	2312      	movs	r3, #18
 8001728:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001734:	2304      	movs	r3, #4
 8001736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <HAL_I2C_MspInit+0x178>)
 8001742:	f006 fcb7 	bl	80080b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_I2C_MspInit+0x170>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	4a08      	ldr	r2, [pc, #32]	; (800176c <HAL_I2C_MspInit+0x170>)
 800174c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001750:	6593      	str	r3, [r2, #88]	; 0x58
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_I2C_MspInit+0x170>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
}
 800175e:	bf00      	nop
 8001760:	3788      	adds	r7, #136	; 0x88
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40005400 	.word	0x40005400
 800176c:	40021000 	.word	0x40021000
 8001770:	40005c00 	.word	0x40005c00
 8001774:	48000400 	.word	0x48000400

08001778 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_8){
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001788:	d130      	bne.n	80017ec <HAL_GPIO_EXTI_Callback+0x74>

		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8)== GPIO_PIN_RESET){
 800178a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f006 fdf9 	bl	8008388 <HAL_GPIO_ReadPin>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d109      	bne.n	80017b0 <HAL_GPIO_EXTI_Callback+0x38>

					boutonAtime=0;
 800179c:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <HAL_GPIO_EXTI_Callback+0xe0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 80017a2:	f004 fe23 	bl	80063ec <HAL_GetTick>
 80017a6:	4603      	mov	r3, r0
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b2c      	ldr	r3, [pc, #176]	; (800185c <HAL_GPIO_EXTI_Callback+0xe4>)
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e010      	b.n	80017d2 <HAL_GPIO_EXTI_Callback+0x5a>


				}
				else{
					BTN_A++;
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_GPIO_EXTI_Callback+0xe8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	4a2a      	ldr	r2, [pc, #168]	; (8001860 <HAL_GPIO_EXTI_Callback+0xe8>)
 80017b8:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 80017ba:	f004 fe17 	bl	80063ec <HAL_GetTick>
 80017be:	4603      	mov	r3, r0
 80017c0:	4a26      	ldr	r2, [pc, #152]	; (800185c <HAL_GPIO_EXTI_Callback+0xe4>)
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b23      	ldr	r3, [pc, #140]	; (8001858 <HAL_GPIO_EXTI_Callback+0xe0>)
 80017ca:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 80017cc:	4b23      	ldr	r3, [pc, #140]	; (800185c <HAL_GPIO_EXTI_Callback+0xe4>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_GPIO_EXTI_Callback+0xe0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80017da:	db07      	blt.n	80017ec <HAL_GPIO_EXTI_Callback+0x74>
					BTN_A_LONG++;
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <HAL_GPIO_EXTI_Callback+0xec>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	4a20      	ldr	r2, [pc, #128]	; (8001864 <HAL_GPIO_EXTI_Callback+0xec>)
 80017e4:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <HAL_GPIO_EXTI_Callback+0xe8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_1){
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d12e      	bne.n	8001850 <HAL_GPIO_EXTI_Callback+0xd8>

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)== GPIO_PIN_RESET){
 80017f2:	2102      	movs	r1, #2
 80017f4:	481c      	ldr	r0, [pc, #112]	; (8001868 <HAL_GPIO_EXTI_Callback+0xf0>)
 80017f6:	f006 fdc7 	bl	8008388 <HAL_GPIO_ReadPin>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d109      	bne.n	8001814 <HAL_GPIO_EXTI_Callback+0x9c>

			boutonBtime=0;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 8001806:	f004 fdf1 	bl	80063ec <HAL_GetTick>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e010      	b.n	8001836 <HAL_GPIO_EXTI_Callback+0xbe>


		}
		else{
			BTN_B++;
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	4a16      	ldr	r2, [pc, #88]	; (8001874 <HAL_GPIO_EXTI_Callback+0xfc>)
 800181c:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 800181e:	f004 fde5 	bl	80063ec <HAL_GetTick>
 8001822:	4603      	mov	r3, r0
 8001824:	4a12      	ldr	r2, [pc, #72]	; (8001870 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	1a9b      	subs	r3, r3, r2
 800182a:	461a      	mov	r2, r3
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_GPIO_EXTI_Callback+0xf4>)
 800182e:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_GPIO_EXTI_Callback+0xf4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800183e:	db07      	blt.n	8001850 <HAL_GPIO_EXTI_Callback+0xd8>
			BTN_B_LONG++;
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_GPIO_EXTI_Callback+0x100>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <HAL_GPIO_EXTI_Callback+0x100>)
 8001848:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 800184a:	4b0a      	ldr	r3, [pc, #40]	; (8001874 <HAL_GPIO_EXTI_Callback+0xfc>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
		}



	}
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000b3c 	.word	0x20000b3c
 800185c:	20000b44 	.word	0x20000b44
 8001860:	20000708 	.word	0x20000708
 8001864:	20000b50 	.word	0x20000b50
 8001868:	48000400 	.word	0x48000400
 800186c:	20000b40 	.word	0x20000b40
 8001870:	20000b48 	.word	0x20000b48
 8001874:	2000070c 	.word	0x2000070c
 8001878:	20000b4c 	.word	0x20000b4c

0800187c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001882:	f004 fd4a 	bl	800631a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001886:	f000 f887 	bl	8001998 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800188a:	f000 f8d8 	bl	8001a3e <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800188e:	f7ff fdb1 	bl	80013f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001892:	f7ff fd6d 	bl	8001370 <MX_DMA_Init>
  MX_I2C3_Init();
 8001896:	f7ff fe6d 	bl	8001574 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 800189a:	f004 fb21 	bl	8005ee0 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800189e:	f7ff fba7 	bl	8000ff0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80018a2:	f004 f817 	bl	80058d4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80018a6:	f012 fa5d 	bl	8013d64 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 80018aa:	f7ff fe23 	bl	80014f4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80018ae:	f004 fb43 	bl	8005f38 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80018b2:	f000 fd8d 	bl	80023d0 <MX_SPI1_Init>
  MX_TIM7_Init();
 80018b6:	f004 f891 	bl	80059dc <MX_TIM7_Init>
  MX_TIM6_Init();
 80018ba:	f004 f859 	bl	8005970 <MX_TIM6_Init>
  MX_TIM15_Init();
 80018be:	f004 f8c5 	bl	8005a4c <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */



	ssd1306_Init();
 80018c2:	f001 f885 	bl	80029d0 <ssd1306_Init>

	HAL_Delay(100);
 80018c6:	2064      	movs	r0, #100	; 0x64
 80018c8:	f004 fd9c 	bl	8006404 <HAL_Delay>
	ssd1306_Fill(Black);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f001 f8e9 	bl	8002aa4 <ssd1306_Fill>

	ssd1306_DrawBitmap(32, 32, startimg, 64, 64, White);
 80018d2:	2301      	movs	r3, #1
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	2340      	movs	r3, #64	; 0x40
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2340      	movs	r3, #64	; 0x40
 80018dc:	4a20      	ldr	r2, [pc, #128]	; (8001960 <main+0xe4>)
 80018de:	2120      	movs	r1, #32
 80018e0:	2020      	movs	r0, #32
 80018e2:	f001 fbb1 	bl	8003048 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80018e6:	f001 f8f5 	bl	8002ad4 <ssd1306_UpdateScreen>


	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80018ea:	2203      	movs	r2, #3
 80018ec:	491d      	ldr	r1, [pc, #116]	; (8001964 <main+0xe8>)
 80018ee:	481e      	ldr	r0, [pc, #120]	; (8001968 <main+0xec>)
 80018f0:	f005 f8c8 	bl	8006a84 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 80018f4:	481d      	ldr	r0, [pc, #116]	; (800196c <main+0xf0>)
 80018f6:	f00b fa8f 	bl	800ce18 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim15);
 80018fa:	481d      	ldr	r0, [pc, #116]	; (8001970 <main+0xf4>)
 80018fc:	f00b fad8 	bl	800ceb0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8001900:	481c      	ldr	r0, [pc, #112]	; (8001974 <main+0xf8>)
 8001902:	f00b fad5 	bl	800ceb0 <HAL_TIM_Base_Start_IT>

	HAL_UART_Abort(&hlpuart1);
 8001906:	481c      	ldr	r0, [pc, #112]	; (8001978 <main+0xfc>)
 8001908:	f00b ff6e 	bl	800d7e8 <HAL_UART_Abort>
	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 800190c:	2240      	movs	r2, #64	; 0x40
 800190e:	491b      	ldr	r1, [pc, #108]	; (800197c <main+0x100>)
 8001910:	4819      	ldr	r0, [pc, #100]	; (8001978 <main+0xfc>)
 8001912:	f00b ff1d 	bl	800d750 <HAL_UART_Receive_DMA>

	memset(flashread,'1',256);
 8001916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800191a:	2131      	movs	r1, #49	; 0x31
 800191c:	4818      	ldr	r0, [pc, #96]	; (8001980 <main+0x104>)
 800191e:	f014 ff64 	bl	80167ea <memset>
	memset(flashwrite,'\0',256);
 8001922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001926:	2100      	movs	r1, #0
 8001928:	4816      	ldr	r0, [pc, #88]	; (8001984 <main+0x108>)
 800192a:	f014 ff5e 	bl	80167ea <memset>
	memset((uint8_t *)bufferscreen ,'\0',50);
 800192e:	2232      	movs	r2, #50	; 0x32
 8001930:	2100      	movs	r1, #0
 8001932:	4815      	ldr	r0, [pc, #84]	; (8001988 <main+0x10c>)
 8001934:	f014 ff59 	bl	80167ea <memset>

	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_0);
 8001938:	2301      	movs	r3, #1
 800193a:	4a14      	ldr	r2, [pc, #80]	; (800198c <main+0x110>)
 800193c:	4914      	ldr	r1, [pc, #80]	; (8001990 <main+0x114>)
 800193e:	4815      	ldr	r0, [pc, #84]	; (8001994 <main+0x118>)
 8001940:	f012 f8f7 	bl	8013b32 <SPIF_Init>



	getindex();
 8001944:	f000 ff10 	bl	8002768 <getindex>

	ssd1306_Fill(Black);
 8001948:	2000      	movs	r0, #0
 800194a:	f001 f8ab 	bl	8002aa4 <ssd1306_Fill>

	HAL_Delay(700);
 800194e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001952:	f004 fd57 	bl	8006404 <HAL_Delay>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		statemachine();
 8001956:	f001 fe4b 	bl	80035f0 <statemachine>
		ssd1306_UpdateScreen();
 800195a:	f001 f8bb 	bl	8002ad4 <ssd1306_UpdateScreen>
		statemachine();
 800195e:	e7fa      	b.n	8001956 <main+0xda>
 8001960:	0801b0e8 	.word	0x0801b0e8
 8001964:	20000730 	.word	0x20000730
 8001968:	20000324 	.word	0x20000324
 800196c:	200010cc 	.word	0x200010cc
 8001970:	200011b0 	.word	0x200011b0
 8001974:	20001118 	.word	0x20001118
 8001978:	200011fc 	.word	0x200011fc
 800197c:	20000484 	.word	0x20000484
 8001980:	20000844 	.word	0x20000844
 8001984:	20000744 	.word	0x20000744
 8001988:	20000968 	.word	0x20000968
 800198c:	48000400 	.word	0x48000400
 8001990:	20000bc4 	.word	0x20000bc4
 8001994:	20000710 	.word	0x20000710

08001998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b096      	sub	sp, #88	; 0x58
 800199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	2244      	movs	r2, #68	; 0x44
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f014 ff1f 	bl	80167ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ac:	463b      	mov	r3, r7
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019be:	f008 ff83 	bl	800a8c8 <HAL_PWREx_ControlVoltageScaling>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019c8:	f000 f867 	bl	8001a9a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80019cc:	2310      	movs	r3, #16
 80019ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019d0:	2301      	movs	r3, #1
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019d8:	2360      	movs	r3, #96	; 0x60
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019dc:	2302      	movs	r3, #2
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019e0:	2301      	movs	r3, #1
 80019e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019e4:	2301      	movs	r3, #1
 80019e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80019e8:	2314      	movs	r3, #20
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019ec:	2307      	movs	r3, #7
 80019ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019f0:	2302      	movs	r3, #2
 80019f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019f4:	2302      	movs	r3, #2
 80019f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4618      	mov	r0, r3
 80019fe:	f008 ffc9 	bl	800a994 <HAL_RCC_OscConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001a08:	f000 f847 	bl	8001a9a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a10:	2303      	movs	r3, #3
 8001a12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a18:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001a1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a22:	463b      	mov	r3, r7
 8001a24:	2102      	movs	r1, #2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f009 fbc8 	bl	800b1bc <HAL_RCC_ClockConfig>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a32:	f000 f832 	bl	8001a9a <Error_Handler>
  }
}
 8001a36:	bf00      	nop
 8001a38:	3758      	adds	r7, #88	; 0x58
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b096      	sub	sp, #88	; 0x58
 8001a42:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2254      	movs	r2, #84	; 0x54
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f014 fecd 	bl	80167ea <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001a50:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a54:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001a5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a60:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001a62:	2301      	movs	r3, #1
 8001a64:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001a66:	2301      	movs	r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001a6a:	2318      	movs	r3, #24
 8001a6c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001a6e:	2307      	movs	r3, #7
 8001a70:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001a7a:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001a7e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	4618      	mov	r0, r3
 8001a84:	f009 fdbe 	bl	800b604 <HAL_RCCEx_PeriphCLKConfig>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001a8e:	f000 f804 	bl	8001a9a <Error_Handler>
  }
}
 8001a92:	bf00      	nop
 8001a94:	3758      	adds	r7, #88	; 0x58
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9e:	b672      	cpsid	i
}
 8001aa0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001aa2:	e7fe      	b.n	8001aa2 <Error_Handler+0x8>

08001aa4 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7fe fbdf 	bl	8000270 <strlen>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d801      	bhi.n	8001abc <gps_checksum+0x18>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e038      	b.n	8001b2e <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7fe fbd7 	bl	8000270 <strlen>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	3b04      	subs	r3, #4
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7fe fbce 	bl	8000270 <strlen>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	3b03      	subs	r3, #3
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	e00a      	b.n	8001b00 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	4413      	add	r3, r2
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	4053      	eors	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	3301      	adds	r3, #1
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7fe fbb5 	bl	8000270 <strlen>
 8001b06:	4603      	mov	r3, r0
 8001b08:	1f5a      	subs	r2, r3, #5
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d8ec      	bhi.n	8001aea <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	2210      	movs	r2, #16
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f013 fe8d 	bl	8015838 <strtol>
 8001b1e:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d101      	bne.n	8001b2c <gps_checksum+0x88>
        return 1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001b2c:	2300      	movs	r3, #0
    }
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b0b7      	sub	sp, #220	; 0xdc
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 8001b48:	f107 0320 	add.w	r3, r7, #32
 8001b4c:	2264      	movs	r2, #100	; 0x64
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f014 fe4a 	bl	80167ea <memset>
    char *marker = strtok(inputString, ",");
 8001b56:	49c2      	ldr	r1, [pc, #776]	; (8001e60 <nmea_GPGGA+0x328>)
 8001b58:	6838      	ldr	r0, [r7, #0]
 8001b5a:	f014 fe61 	bl	8016820 <strtok>
 8001b5e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001b62:	e027      	b.n	8001bb4 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001b64:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001b68:	f7fe fb82 	bl	8000270 <strlen>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8001b74:	1c63      	adds	r3, r4, #1
 8001b76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	f012 fea4 	bl	80148c8 <malloc>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	00a3      	lsls	r3, r4, #2
 8001b86:	33d8      	adds	r3, #216	; 0xd8
 8001b88:	443b      	add	r3, r7
 8001b8a:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b92:	3b01      	subs	r3, #1
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	33d8      	adds	r3, #216	; 0xd8
 8001b98:	443b      	add	r3, r7
 8001b9a:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001b9e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f014 ff35 	bl	8016a12 <strcpy>
        marker = strtok(NULL, ",");
 8001ba8:	49ad      	ldr	r1, [pc, #692]	; (8001e60 <nmea_GPGGA+0x328>)
 8001baa:	2000      	movs	r0, #0
 8001bac:	f014 fe38 	bl	8016820 <strtok>
 8001bb0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8001bb4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1d3      	bne.n	8001b64 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8001bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	332c      	adds	r3, #44	; 0x2c
 8001bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f014 ff1c 	bl	8016a12 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001bda:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001bde:	2b53      	cmp	r3, #83	; 0x53
 8001be0:	d004      	beq.n	8001bec <nmea_GPGGA+0xb4>
 8001be2:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8001be6:	2b4e      	cmp	r3, #78	; 0x4e
 8001be8:	f040 8159 	bne.w	8001e9e <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001bf2:	e010      	b.n	8001c16 <nmea_GPGGA+0xde>
 8001bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bf6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bfa:	4413      	add	r3, r2
 8001bfc:	7819      	ldrb	r1, [r3, #0]
 8001bfe:	f107 021c 	add.w	r2, r7, #28
 8001c02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c06:	4413      	add	r3, r2
 8001c08:	460a      	mov	r2, r1
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c10:	3301      	adds	r3, #1
 8001c12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	ddea      	ble.n	8001bf4 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001c24:	e011      	b.n	8001c4a <nmea_GPGGA+0x112>
 8001c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	7819      	ldrb	r1, [r3, #0]
 8001c32:	f107 0214 	add.w	r2, r7, #20
 8001c36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c3a:	4413      	add	r3, r2
 8001c3c:	460a      	mov	r2, r1
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c44:	3301      	adds	r3, #1
 8001c46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001c4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	dde9      	ble.n	8001c26 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8001c52:	f107 031c 	add.w	r3, r7, #28
 8001c56:	220a      	movs	r2, #10
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f013 fdec 	bl	8015838 <strtol>
 8001c60:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f013 fcfa 	bl	8015664 <strtof>
 8001c70:	ed87 0a2b 	vstr	s0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8001c74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c78:	ee07 3a90 	vmov	s15, r3
 8001c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c80:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 8001c84:	ed9f 6a77 	vldr	s12, [pc, #476]	; 8001e64 <nmea_GPGGA+0x32c>
 8001c88:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c90:	ee17 0a90 	vmov	r0, s15
 8001c94:	f7fe fc58 	bl	8000548 <__aeabi_f2d>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001ca6:	e010      	b.n	8001cca <nmea_GPGGA+0x192>
 8001ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001caa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cae:	4413      	add	r3, r2
 8001cb0:	7819      	ldrb	r1, [r3, #0]
 8001cb2:	f107 0210 	add.w	r2, r7, #16
 8001cb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cba:	4413      	add	r3, r2
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001cca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	ddea      	ble.n	8001ca8 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001cd8:	e011      	b.n	8001cfe <nmea_GPGGA+0x1c6>
 8001cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ce0:	3303      	adds	r3, #3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	7819      	ldrb	r1, [r3, #0]
 8001ce6:	f107 0208 	add.w	r2, r7, #8
 8001cea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cee:	4413      	add	r3, r2
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001cfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001d02:	2b05      	cmp	r3, #5
 8001d04:	dde9      	ble.n	8001cda <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8001d06:	f107 0310 	add.w	r3, r7, #16
 8001d0a:	220a      	movs	r2, #10
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f013 fd92 	bl	8015838 <strtol>
 8001d14:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8001d18:	f107 0308 	add.w	r3, r7, #8
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f013 fca0 	bl	8015664 <strtof>
 8001d24:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8001d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d34:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 8001d38:	ed9f 6a4a 	vldr	s12, [pc, #296]	; 8001e64 <nmea_GPGGA+0x32c>
 8001d3c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	ee17 0a90 	vmov	r0, s15
 8001d48:	f7fe fbfe 	bl	8000548 <__aeabi_f2d>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001d60:	f7fe feb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d176      	bne.n	8001e58 <nmea_GPGGA+0x320>
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001d76:	f7fe fea7 	bl	8000ac8 <__aeabi_dcmpeq>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d16b      	bne.n	8001e58 <nmea_GPGGA+0x320>
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <nmea_GPGGA+0x330>)
 8001d86:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001d8a:	f7fe fea7 	bl	8000adc <__aeabi_dcmplt>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d061      	beq.n	8001e58 <nmea_GPGGA+0x320>
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <nmea_GPGGA+0x334>)
 8001d9a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001d9e:	f7fe fe9d 	bl	8000adc <__aeabi_dcmplt>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d057      	beq.n	8001e58 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001dae:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 8001db8:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001dc0:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 8001dca:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8001dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f013 fc47 	bl	8015664 <strtof>
 8001dd6:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8001dda:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001dde:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de6:	d102      	bne.n	8001dee <nmea_GPGGA+0x2b6>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	e001      	b.n	8001df2 <nmea_GPGGA+0x2ba>
 8001dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8001df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df8:	220a      	movs	r2, #10
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f013 fd1b 	bl	8015838 <strtol>
 8001e02:	4602      	mov	r2, r0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8001e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e0a:	220a      	movs	r2, #10
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f013 fd12 	bl	8015838 <strtol>
 8001e14:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8001e18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bfcc      	ite	gt
 8001e20:	2301      	movgt	r3, #1
 8001e22:	2300      	movle	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 8001e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f013 fc17 	bl	8015664 <strtof>
 8001e36:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8001e3a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001e3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e46:	d102      	bne.n	8001e4e <nmea_GPGGA+0x316>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	e001      	b.n	8001e52 <nmea_GPGGA+0x31a>
 8001e4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8001e56:	e022      	b.n	8001e9e <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001e5e:	e016      	b.n	8001e8e <nmea_GPGGA+0x356>
 8001e60:	0801adf8 	.word	0x0801adf8
 8001e64:	42700000 	.word	0x42700000
 8001e68:	40568000 	.word	0x40568000
 8001e6c:	40668000 	.word	0x40668000
 8001e70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	33d8      	adds	r3, #216	; 0xd8
 8001e78:	443b      	add	r3, r7
 8001e7a:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f012 fd2a 	bl	80148d8 <free>
 8001e84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001e8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e96:	429a      	cmp	r2, r3
 8001e98:	dbea      	blt.n	8001e70 <nmea_GPGGA+0x338>
            return 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e019      	b.n	8001ed2 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ea4:	e00e      	b.n	8001ec4 <nmea_GPGGA+0x38c>
 8001ea6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	33d8      	adds	r3, #216	; 0xd8
 8001eae:	443b      	add	r3, r7
 8001eb0:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f012 fd0f 	bl	80148d8 <free>
 8001eba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ec4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001ec8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dbea      	blt.n	8001ea6 <nmea_GPGGA+0x36e>
    return 1;
 8001ed0:	2301      	movs	r3, #1
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	37dc      	adds	r7, #220	; 0xdc
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd90      	pop	{r4, r7, pc}
 8001eda:	bf00      	nop

08001edc <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b0a3      	sub	sp, #140	; 0x8c
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	2264      	movs	r2, #100	; 0x64
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f014 fc78 	bl	80167ea <memset>
    char *marker = strtok(inputString, ",");
 8001efa:	493b      	ldr	r1, [pc, #236]	; (8001fe8 <nmea_GPGSA+0x10c>)
 8001efc:	6838      	ldr	r0, [r7, #0]
 8001efe:	f014 fc8f 	bl	8016820 <strtok>
 8001f02:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001f06:	e027      	b.n	8001f58 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001f08:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001f0c:	f7fe f9b0 	bl	8000270 <strlen>
 8001f10:	4603      	mov	r3, r0
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 8001f18:	1c63      	adds	r3, r4, #1
 8001f1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f1e:	4610      	mov	r0, r2
 8001f20:	f012 fcd2 	bl	80148c8 <malloc>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	00a3      	lsls	r3, r4, #2
 8001f2a:	3388      	adds	r3, #136	; 0x88
 8001f2c:	443b      	add	r3, r7
 8001f2e:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8001f32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f36:	3b01      	subs	r3, #1
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	3388      	adds	r3, #136	; 0x88
 8001f3c:	443b      	add	r3, r7
 8001f3e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001f42:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001f46:	4618      	mov	r0, r3
 8001f48:	f014 fd63 	bl	8016a12 <strcpy>
        marker = strtok(NULL, ",");
 8001f4c:	4926      	ldr	r1, [pc, #152]	; (8001fe8 <nmea_GPGSA+0x10c>)
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f014 fc66 	bl	8016820 <strtok>
 8001f54:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8001f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1d3      	bne.n	8001f08 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	220a      	movs	r2, #10
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f013 fc66 	bl	8015838 <strtol>
 8001f6c:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8001f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	bfcc      	ite	gt
 8001f74:	2301      	movgt	r3, #1
 8001f76:	2300      	movle	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001f84:	2303      	movs	r3, #3
 8001f86:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f88:	e00e      	b.n	8001fa8 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8001f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	3388      	adds	r3, #136	; 0x88
 8001f90:	443b      	add	r3, r7
 8001f92:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <nmea_GPGSA+0xc6>
            satelliteCount++;
 8001f9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8001fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001faa:	2b0e      	cmp	r3, #14
 8001fac:	dded      	ble.n	8001f8a <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001fb2:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	677b      	str	r3, [r7, #116]	; 0x74
 8001fb8:	e00b      	b.n	8001fd2 <nmea_GPGSA+0xf6>
 8001fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	3388      	adds	r3, #136	; 0x88
 8001fc0:	443b      	add	r3, r7
 8001fc2:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f012 fc86 	bl	80148d8 <free>
 8001fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fce:	3301      	adds	r3, #1
 8001fd0:	677b      	str	r3, [r7, #116]	; 0x74
 8001fd2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	dbee      	blt.n	8001fba <nmea_GPGSA+0xde>
    return 1;
 8001fdc:	2301      	movs	r3, #1
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	378c      	adds	r7, #140	; 0x8c
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd90      	pop	{r4, r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	0801adf8 	.word	0x0801adf8
 8001fec:	00000000 	.word	0x00000000

08001ff0 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b0a1      	sub	sp, #132	; 0x84
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	2264      	movs	r2, #100	; 0x64
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f014 fbef 	bl	80167ea <memset>
    char *marker = strtok(inputString, ",");
 800200c:	4930      	ldr	r1, [pc, #192]	; (80020d0 <nmea_GNRMC+0xe0>)
 800200e:	6838      	ldr	r0, [r7, #0]
 8002010:	f014 fc06 	bl	8016820 <strtok>
 8002014:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 8002016:	e021      	b.n	800205c <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002018:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800201a:	f7fe f929 	bl	8000270 <strlen>
 800201e:	4603      	mov	r3, r0
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8002024:	1c63      	adds	r3, r4, #1
 8002026:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002028:	4610      	mov	r0, r2
 800202a:	f012 fc4d 	bl	80148c8 <malloc>
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
 8002032:	00a3      	lsls	r3, r4, #2
 8002034:	3380      	adds	r3, #128	; 0x80
 8002036:	443b      	add	r3, r7
 8002038:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 800203c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800203e:	3b01      	subs	r3, #1
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	3380      	adds	r3, #128	; 0x80
 8002044:	443b      	add	r3, r7
 8002046:	f853 3c74 	ldr.w	r3, [r3, #-116]
 800204a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800204c:	4618      	mov	r0, r3
 800204e:	f014 fce0 	bl	8016a12 <strcpy>
        marker = strtok(NULL, ",");
 8002052:	491f      	ldr	r1, [pc, #124]	; (80020d0 <nmea_GNRMC+0xe0>)
 8002054:	2000      	movs	r0, #0
 8002056:	f014 fbe3 	bl	8016820 <strtok>
 800205a:	67b8      	str	r0, [r7, #120]	; 0x78
    while (marker != NULL) {
 800205c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1da      	bne.n	8002018 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 8002062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f013 fafc 	bl	8015664 <strtof>
 800206c:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
    gps_data->speed=speed/(1.944);
 8002070:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002072:	f7fe fa69 	bl	8000548 <__aeabi_f2d>
 8002076:	a314      	add	r3, pc, #80	; (adr r3, 80020c8 <nmea_GNRMC+0xd8>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	f7fe fbe6 	bl	800084c <__aeabi_ddiv>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f7fe fdae 	bl	8000be8 <__aeabi_d2f>
 800208c:	4602      	mov	r2, r0
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	639a      	str	r2, [r3, #56]	; 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 8002092:	2300      	movs	r3, #0
 8002094:	677b      	str	r3, [r7, #116]	; 0x74
 8002096:	e00b      	b.n	80020b0 <nmea_GNRMC+0xc0>
 8002098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	3380      	adds	r3, #128	; 0x80
 800209e:	443b      	add	r3, r7
 80020a0:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f012 fc17 	bl	80148d8 <free>
 80020aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020ac:	3301      	adds	r3, #1
 80020ae:	677b      	str	r3, [r7, #116]	; 0x74
 80020b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020b4:	429a      	cmp	r2, r3
 80020b6:	dbef      	blt.n	8002098 <nmea_GNRMC+0xa8>
    return 1;
 80020b8:	2301      	movs	r3, #1
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3784      	adds	r7, #132	; 0x84
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd90      	pop	{r4, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	f3af 8000 	nop.w
 80020c8:	be76c8b4 	.word	0xbe76c8b4
 80020cc:	3fff1a9f 	.word	0x3fff1a9f
 80020d0:	0801adf8 	.word	0x0801adf8

080020d4 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 80020de:	223c      	movs	r2, #60	; 0x3c
 80020e0:	2100      	movs	r1, #0
 80020e2:	484e      	ldr	r0, [pc, #312]	; (800221c <nmea_parse+0x148>)
 80020e4:	f014 fb81 	bl	80167ea <memset>
    char * token = strtok(buffer, "$");
 80020e8:	494d      	ldr	r1, [pc, #308]	; (8002220 <nmea_parse+0x14c>)
 80020ea:	6838      	ldr	r0, [r7, #0]
 80020ec:	f014 fb98 	bl	8016820 <strtok>
 80020f0:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 80020f6:	e01d      	b.n	8002134 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 80020f8:	6978      	ldr	r0, [r7, #20]
 80020fa:	f7fe f8b9 	bl	8000270 <strlen>
 80020fe:	4603      	mov	r3, r0
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	693c      	ldr	r4, [r7, #16]
 8002104:	1c63      	adds	r3, r4, #1
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	4610      	mov	r0, r2
 800210a:	f012 fbdd 	bl	80148c8 <malloc>
 800210e:	4603      	mov	r3, r0
 8002110:	461a      	mov	r2, r3
 8002112:	4b42      	ldr	r3, [pc, #264]	; (800221c <nmea_parse+0x148>)
 8002114:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	3b01      	subs	r3, #1
 800211c:	4a3f      	ldr	r2, [pc, #252]	; (800221c <nmea_parse+0x148>)
 800211e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002122:	6979      	ldr	r1, [r7, #20]
 8002124:	4618      	mov	r0, r3
 8002126:	f014 fc74 	bl	8016a12 <strcpy>
        token = strtok(NULL, "$");
 800212a:	493d      	ldr	r1, [pc, #244]	; (8002220 <nmea_parse+0x14c>)
 800212c:	2000      	movs	r0, #0
 800212e:	f014 fb77 	bl	8016820 <strtok>
 8002132:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1de      	bne.n	80020f8 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	e052      	b.n	80021e6 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8002140:	4a36      	ldr	r2, [pc, #216]	; (800221c <nmea_parse+0x148>)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	4936      	ldr	r1, [pc, #216]	; (8002224 <nmea_parse+0x150>)
 800214a:	4618      	mov	r0, r3
 800214c:	f014 fbc4 	bl	80168d8 <strstr>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d044      	beq.n	80021e0 <nmea_parse+0x10c>
 8002156:	4a31      	ldr	r2, [pc, #196]	; (800221c <nmea_parse+0x148>)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fca0 	bl	8001aa4 <gps_checksum>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d03a      	beq.n	80021e0 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 800216a:	4a2c      	ldr	r2, [pc, #176]	; (800221c <nmea_parse+0x148>)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002172:	492d      	ldr	r1, [pc, #180]	; (8002228 <nmea_parse+0x154>)
 8002174:	4618      	mov	r0, r3
 8002176:	f014 fbaf 	bl	80168d8 <strstr>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 8002180:	4a26      	ldr	r2, [pc, #152]	; (800221c <nmea_parse+0x148>)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	4619      	mov	r1, r3
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ff30 	bl	8001ff0 <nmea_GNRMC>
 8002190:	e026      	b.n	80021e0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 8002192:	4a22      	ldr	r2, [pc, #136]	; (800221c <nmea_parse+0x148>)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	4924      	ldr	r1, [pc, #144]	; (800222c <nmea_parse+0x158>)
 800219c:	4618      	mov	r0, r3
 800219e:	f014 fb9b 	bl	80168d8 <strstr>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 80021a8:	4a1c      	ldr	r2, [pc, #112]	; (800221c <nmea_parse+0x148>)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b0:	4619      	mov	r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff fe92 	bl	8001edc <nmea_GPGSA>
 80021b8:	e012      	b.n	80021e0 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 80021ba:	4a18      	ldr	r2, [pc, #96]	; (800221c <nmea_parse+0x148>)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c2:	491b      	ldr	r1, [pc, #108]	; (8002230 <nmea_parse+0x15c>)
 80021c4:	4618      	mov	r0, r3
 80021c6:	f014 fb87 	bl	80168d8 <strstr>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 80021d0:	4a12      	ldr	r2, [pc, #72]	; (800221c <nmea_parse+0x148>)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fcac 	bl	8001b38 <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3301      	adds	r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	dba8      	blt.n	8002140 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	e009      	b.n	8002208 <nmea_parse+0x134>
 80021f4:	4a09      	ldr	r2, [pc, #36]	; (800221c <nmea_parse+0x148>)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f012 fb6b 	bl	80148d8 <free>
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3301      	adds	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	429a      	cmp	r2, r3
 800220e:	dbf1      	blt.n	80021f4 <nmea_parse+0x120>


}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	371c      	adds	r7, #28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd90      	pop	{r4, r7, pc}
 800221a:	bf00      	nop
 800221c:	20000b54 	.word	0x20000b54
 8002220:	0801adfc 	.word	0x0801adfc
 8002224:	0801ae00 	.word	0x0801ae00
 8002228:	0801ae04 	.word	0x0801ae04
 800222c:	0801ae0c 	.word	0x0801ae0c
 8002230:	0801ae14 	.word	0x0801ae14
 8002234:	00000000 	.word	0x00000000

08002238 <distancecalc>:

}



double distancecalc(double lat1, double lat2, double long1, double long2){
 8002238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800223c:	b08a      	sub	sp, #40	; 0x28
 800223e:	af00      	add	r7, sp, #0
 8002240:	ed87 0b06 	vstr	d0, [r7, #24]
 8002244:	ed87 1b04 	vstr	d1, [r7, #16]
 8002248:	ed87 2b02 	vstr	d2, [r7, #8]
 800224c:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	f04f 0300 	mov.w	r3, #0
 8002258:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 800225c:	a358      	add	r3, pc, #352	; (adr r3, 80023c0 <distancecalc+0x188>)
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002266:	f7fe f9c7 	bl	80005f8 <__aeabi_dmul>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	ec43 2b17 	vmov	d7, r2, r3
 8002272:	eeb0 0a47 	vmov.f32	s0, s14
 8002276:	eef0 0a67 	vmov.f32	s1, s15
 800227a:	f017 f964 	bl	8019546 <sinl>
 800227e:	ec55 4b10 	vmov	r4, r5, d0
 8002282:	a34f      	add	r3, pc, #316	; (adr r3, 80023c0 <distancecalc+0x188>)
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800228c:	f7fe f9b4 	bl	80005f8 <__aeabi_dmul>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	ec43 2b17 	vmov	d7, r2, r3
 8002298:	eeb0 0a47 	vmov.f32	s0, s14
 800229c:	eef0 0a67 	vmov.f32	s1, s15
 80022a0:	f017 f951 	bl	8019546 <sinl>
 80022a4:	ec53 2b10 	vmov	r2, r3, d0
 80022a8:	4620      	mov	r0, r4
 80022aa:	4629      	mov	r1, r5
 80022ac:	f7fe f9a4 	bl	80005f8 <__aeabi_dmul>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4614      	mov	r4, r2
 80022b6:	461d      	mov	r5, r3
 80022b8:	a341      	add	r3, pc, #260	; (adr r3, 80023c0 <distancecalc+0x188>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022c2:	f7fe f999 	bl	80005f8 <__aeabi_dmul>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	ec43 2b17 	vmov	d7, r2, r3
 80022ce:	eeb0 0a47 	vmov.f32	s0, s14
 80022d2:	eef0 0a67 	vmov.f32	s1, s15
 80022d6:	f017 f934 	bl	8019542 <cosl>
 80022da:	ec59 8b10 	vmov	r8, r9, d0
 80022de:	a338      	add	r3, pc, #224	; (adr r3, 80023c0 <distancecalc+0x188>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022e8:	f7fe f986 	bl	80005f8 <__aeabi_dmul>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	ec43 2b17 	vmov	d7, r2, r3
 80022f4:	eeb0 0a47 	vmov.f32	s0, s14
 80022f8:	eef0 0a67 	vmov.f32	s1, s15
 80022fc:	f017 f921 	bl	8019542 <cosl>
 8002300:	ec53 2b10 	vmov	r2, r3, d0
 8002304:	4640      	mov	r0, r8
 8002306:	4649      	mov	r1, r9
 8002308:	f7fe f976 	bl	80005f8 <__aeabi_dmul>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4690      	mov	r8, r2
 8002312:	4699      	mov	r9, r3
 8002314:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800231c:	f7fd ffb4 	bl	8000288 <__aeabi_dsub>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	a325      	add	r3, pc, #148	; (adr r3, 80023c0 <distancecalc+0x188>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f963 	bl	80005f8 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	ec43 2b17 	vmov	d7, r2, r3
 800233a:	eeb0 0a47 	vmov.f32	s0, s14
 800233e:	eef0 0a67 	vmov.f32	s1, s15
 8002342:	f017 f8fe 	bl	8019542 <cosl>
 8002346:	ec53 2b10 	vmov	r2, r3, d0
 800234a:	4640      	mov	r0, r8
 800234c:	4649      	mov	r1, r9
 800234e:	f7fe f953 	bl	80005f8 <__aeabi_dmul>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4620      	mov	r0, r4
 8002358:	4629      	mov	r1, r5
 800235a:	f7fd ff97 	bl	800028c <__adddf3>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	ec43 2b17 	vmov	d7, r2, r3
 8002366:	eeb0 1a47 	vmov.f32	s2, s14
 800236a:	eef0 1a67 	vmov.f32	s3, s15
 800236e:	ed9f 0b12 	vldr	d0, [pc, #72]	; 80023b8 <distancecalc+0x180>
 8002372:	f017 f887 	bl	8019484 <fmin>
 8002376:	eeb0 7a40 	vmov.f32	s14, s0
 800237a:	eef0 7a60 	vmov.f32	s15, s1
 800237e:	eeb0 0a47 	vmov.f32	s0, s14
 8002382:	eef0 0a67 	vmov.f32	s1, s15
 8002386:	f017 f8e0 	bl	801954a <acosl>
 800238a:	ec51 0b10 	vmov	r0, r1, d0
 800238e:	a30e      	add	r3, pc, #56	; (adr r3, 80023c8 <distancecalc+0x190>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	f7fe f930 	bl	80005f8 <__aeabi_dmul>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 80023a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023a4:	ec43 2b17 	vmov	d7, r2, r3
}
 80023a8:	eeb0 0a47 	vmov.f32	s0, s14
 80023ac:	eef0 0a67 	vmov.f32	s1, s15
 80023b0:	3728      	adds	r7, #40	; 0x28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80023b8:	00000000 	.word	0x00000000
 80023bc:	3ff00000 	.word	0x3ff00000
 80023c0:	a2529d39 	.word	0xa2529d39
 80023c4:	3f91df46 	.word	0x3f91df46
 80023c8:	00000000 	.word	0x00000000
 80023cc:	41584dae 	.word	0x41584dae

080023d0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <MX_SPI1_Init+0x74>)
 80023d6:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <MX_SPI1_Init+0x78>)
 80023d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <MX_SPI1_Init+0x74>)
 80023dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023e2:	4b18      	ldr	r3, [pc, #96]	; (8002444 <MX_SPI1_Init+0x74>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023e8:	4b16      	ldr	r3, [pc, #88]	; (8002444 <MX_SPI1_Init+0x74>)
 80023ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <MX_SPI1_Init+0x74>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <MX_SPI1_Init+0x74>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <MX_SPI1_Init+0x74>)
 80023fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002402:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <MX_SPI1_Init+0x74>)
 8002406:	2210      	movs	r2, #16
 8002408:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <MX_SPI1_Init+0x74>)
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <MX_SPI1_Init+0x74>)
 8002412:	2200      	movs	r2, #0
 8002414:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <MX_SPI1_Init+0x74>)
 8002418:	2200      	movs	r2, #0
 800241a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <MX_SPI1_Init+0x74>)
 800241e:	2207      	movs	r2, #7
 8002420:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <MX_SPI1_Init+0x74>)
 8002424:	2200      	movs	r2, #0
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <MX_SPI1_Init+0x74>)
 800242a:	2208      	movs	r2, #8
 800242c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <MX_SPI1_Init+0x74>)
 8002430:	f009 fbd0 	bl	800bbd4 <HAL_SPI_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800243a:	f7ff fb2e 	bl	8001a9a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000bc4 	.word	0x20000bc4
 8002448:	40013000 	.word	0x40013000

0800244c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	; 0x28
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a53      	ldr	r2, [pc, #332]	; (80025b8 <HAL_SPI_MspInit+0x16c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	f040 809f 	bne.w	80025ae <HAL_SPI_MspInit+0x162>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002470:	4b52      	ldr	r3, [pc, #328]	; (80025bc <HAL_SPI_MspInit+0x170>)
 8002472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002474:	4a51      	ldr	r2, [pc, #324]	; (80025bc <HAL_SPI_MspInit+0x170>)
 8002476:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800247a:	6613      	str	r3, [r2, #96]	; 0x60
 800247c:	4b4f      	ldr	r3, [pc, #316]	; (80025bc <HAL_SPI_MspInit+0x170>)
 800247e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002488:	4b4c      	ldr	r3, [pc, #304]	; (80025bc <HAL_SPI_MspInit+0x170>)
 800248a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248c:	4a4b      	ldr	r2, [pc, #300]	; (80025bc <HAL_SPI_MspInit+0x170>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002494:	4b49      	ldr	r3, [pc, #292]	; (80025bc <HAL_SPI_MspInit+0x170>)
 8002496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a0:	4b46      	ldr	r3, [pc, #280]	; (80025bc <HAL_SPI_MspInit+0x170>)
 80024a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a4:	4a45      	ldr	r2, [pc, #276]	; (80025bc <HAL_SPI_MspInit+0x170>)
 80024a6:	f043 0302 	orr.w	r3, r3, #2
 80024aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ac:	4b43      	ldr	r3, [pc, #268]	; (80025bc <HAL_SPI_MspInit+0x170>)
 80024ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80024b8:	2360      	movs	r3, #96	; 0x60
 80024ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024bc:	2302      	movs	r3, #2
 80024be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c4:	2303      	movs	r3, #3
 80024c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024c8:	2305      	movs	r3, #5
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	4619      	mov	r1, r3
 80024d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024d6:	f005 fded 	bl	80080b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80024da:	2320      	movs	r3, #32
 80024dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024ea:	2305      	movs	r3, #5
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	4619      	mov	r1, r3
 80024f4:	4832      	ldr	r0, [pc, #200]	; (80025c0 <HAL_SPI_MspInit+0x174>)
 80024f6:	f005 fddd 	bl	80080b4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80024fa:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <HAL_SPI_MspInit+0x178>)
 80024fc:	4a32      	ldr	r2, [pc, #200]	; (80025c8 <HAL_SPI_MspInit+0x17c>)
 80024fe:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8002500:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_SPI_MspInit+0x178>)
 8002502:	2201      	movs	r2, #1
 8002504:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002506:	4b2f      	ldr	r3, [pc, #188]	; (80025c4 <HAL_SPI_MspInit+0x178>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800250c:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_SPI_MspInit+0x178>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002512:	4b2c      	ldr	r3, [pc, #176]	; (80025c4 <HAL_SPI_MspInit+0x178>)
 8002514:	2280      	movs	r2, #128	; 0x80
 8002516:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002518:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <HAL_SPI_MspInit+0x178>)
 800251a:	2200      	movs	r2, #0
 800251c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800251e:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <HAL_SPI_MspInit+0x178>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002524:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <HAL_SPI_MspInit+0x178>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_SPI_MspInit+0x178>)
 800252c:	2200      	movs	r2, #0
 800252e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002530:	4824      	ldr	r0, [pc, #144]	; (80025c4 <HAL_SPI_MspInit+0x178>)
 8002532:	f005 fb3d 	bl	8007bb0 <HAL_DMA_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_SPI_MspInit+0xf4>
    {
      Error_Handler();
 800253c:	f7ff faad 	bl	8001a9a <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a20      	ldr	r2, [pc, #128]	; (80025c4 <HAL_SPI_MspInit+0x178>)
 8002544:	659a      	str	r2, [r3, #88]	; 0x58
 8002546:	4a1f      	ldr	r2, [pc, #124]	; (80025c4 <HAL_SPI_MspInit+0x178>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800254c:	4b1f      	ldr	r3, [pc, #124]	; (80025cc <HAL_SPI_MspInit+0x180>)
 800254e:	4a20      	ldr	r2, [pc, #128]	; (80025d0 <HAL_SPI_MspInit+0x184>)
 8002550:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <HAL_SPI_MspInit+0x180>)
 8002554:	2201      	movs	r2, #1
 8002556:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002558:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <HAL_SPI_MspInit+0x180>)
 800255a:	2210      	movs	r2, #16
 800255c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800255e:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_SPI_MspInit+0x180>)
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_SPI_MspInit+0x180>)
 8002566:	2280      	movs	r2, #128	; 0x80
 8002568:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <HAL_SPI_MspInit+0x180>)
 800256c:	2200      	movs	r2, #0
 800256e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002570:	4b16      	ldr	r3, [pc, #88]	; (80025cc <HAL_SPI_MspInit+0x180>)
 8002572:	2200      	movs	r2, #0
 8002574:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <HAL_SPI_MspInit+0x180>)
 8002578:	2200      	movs	r2, #0
 800257a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_SPI_MspInit+0x180>)
 800257e:	2200      	movs	r2, #0
 8002580:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002582:	4812      	ldr	r0, [pc, #72]	; (80025cc <HAL_SPI_MspInit+0x180>)
 8002584:	f005 fb14 	bl	8007bb0 <HAL_DMA_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 800258e:	f7ff fa84 	bl	8001a9a <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <HAL_SPI_MspInit+0x180>)
 8002596:	655a      	str	r2, [r3, #84]	; 0x54
 8002598:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <HAL_SPI_MspInit+0x180>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	2023      	movs	r0, #35	; 0x23
 80025a4:	f005 facd 	bl	8007b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80025a8:	2023      	movs	r0, #35	; 0x23
 80025aa:	f005 fae6 	bl	8007b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80025ae:	bf00      	nop
 80025b0:	3728      	adds	r7, #40	; 0x28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40013000 	.word	0x40013000
 80025bc:	40021000 	.word	0x40021000
 80025c0:	48000400 	.word	0x48000400
 80025c4:	20000c28 	.word	0x20000c28
 80025c8:	4002001c 	.word	0x4002001c
 80025cc:	20000c70 	.word	0x20000c70
 80025d0:	40020030 	.word	0x40020030
 80025d4:	00000000 	.word	0x00000000

080025d8 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 80025d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025dc:	ed2d 8b02 	vpush	{d8}
 80025e0:	b0a7      	sub	sp, #156	; 0x9c
 80025e2:	af16      	add	r7, sp, #88	; 0x58
 80025e4:	6378      	str	r0, [r7, #52]	; 0x34
 80025e6:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
 80025ea:	edc7 0a0b 	vstr	s1, [r7, #44]	; 0x2c
 80025ee:	62b9      	str	r1, [r7, #40]	; 0x28
 80025f0:	627a      	str	r2, [r7, #36]	; 0x24
 80025f2:	ed87 1a08 	vstr	s2, [r7, #32]
	int framesize=0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 80025fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025fc:	f7fd ffa4 	bl	8000548 <__aeabi_f2d>
 8002600:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002604:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002606:	f7fd ff9f 	bl	8000548 <__aeabi_f2d>
 800260a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd ff98 	bl	8000548 <__aeabi_f2d>
 8002618:	a332      	add	r3, pc, #200	; (adr r3, 80026e4 <csvframe+0x10c>)
 800261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261e:	f7fd ffeb 	bl	80005f8 <__aeabi_dmul>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	ec43 2b18 	vmov	d8, r2, r3
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8002636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd ff84 	bl	8000548 <__aeabi_f2d>
 8002640:	4682      	mov	sl, r0
 8002642:	468b      	mov	fp, r1
 8002644:	6a38      	ldr	r0, [r7, #32]
 8002646:	f7fd ff7f 	bl	8000548 <__aeabi_f2d>
 800264a:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <csvframe+0xf0>)
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <csvframe+0xf4>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <csvframe+0xf8>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <csvframe+0xfc>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	461e      	mov	r6, r3
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <csvframe+0x100>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <csvframe+0x104>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	9315      	str	r3, [sp, #84]	; 0x54
 800266e:	9214      	str	r2, [sp, #80]	; 0x50
 8002670:	9613      	str	r6, [sp, #76]	; 0x4c
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	9212      	str	r2, [sp, #72]	; 0x48
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	9211      	str	r2, [sp, #68]	; 0x44
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	9310      	str	r3, [sp, #64]	; 0x40
 800267e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	930c      	str	r3, [sp, #48]	; 0x30
 8002686:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800268a:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800268e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002692:	ed8d 8b04 	vstr	d8, [sp, #16]
 8002696:	ed97 7b04 	vldr	d7, [r7, #16]
 800269a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800269e:	ed97 7b06 	vldr	d7, [r7, #24]
 80026a2:	ed8d 7b00 	vstr	d7, [sp]
 80026a6:	4a0e      	ldr	r2, [pc, #56]	; (80026e0 <csvframe+0x108>)
 80026a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026ae:	f014 f805 	bl	80166bc <sniprintf>
 80026b2:	63f8      	str	r0, [r7, #60]	; 0x3c
	return framesize;
 80026b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3744      	adds	r7, #68	; 0x44
 80026ba:	46bd      	mov	sp, r7
 80026bc:	ecbd 8b02 	vpop	{d8}
 80026c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026c4:	f3af 8000 	nop.w
 80026c8:	2000000a 	.word	0x2000000a
 80026cc:	20000009 	.word	0x20000009
 80026d0:	20000008 	.word	0x20000008
 80026d4:	20000b35 	.word	0x20000b35
 80026d8:	20000b36 	.word	0x20000b36
 80026dc:	20000b34 	.word	0x20000b34
 80026e0:	0801ae1c 	.word	0x0801ae1c
 80026e4:	cccccccd 	.word	0xcccccccd
 80026e8:	400ccccc 	.word	0x400ccccc

080026ec <storeindex>:


void storeindex(void){
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b09c      	sub	sp, #112	; 0x70
 80026f0:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 80026f2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80026f6:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 80026f8:	463b      	mov	r3, r7
 80026fa:	2264      	movs	r2, #100	; 0x64
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f014 f873 	bl	80167ea <memset>
	snprintf((char *)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <storeindex+0x6c>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <storeindex+0x70>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4638      	mov	r0, r7
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	4a13      	ldr	r2, [pc, #76]	; (8002760 <storeindex+0x74>)
 8002714:	2164      	movs	r1, #100	; 0x64
 8002716:	f013 ffd1 	bl	80166bc <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 800271a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800271c:	2b00      	cmp	r3, #0
 800271e:	da00      	bge.n	8002722 <storeindex+0x36>
 8002720:	330f      	adds	r3, #15
 8002722:	111b      	asrs	r3, r3, #4
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd fefd 	bl	8000524 <__aeabi_i2d>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	f7fe fa11 	bl	8000b58 <__aeabi_d2iz>
 8002736:	4603      	mov	r3, r0
 8002738:	4619      	mov	r1, r3
 800273a:	480a      	ldr	r0, [pc, #40]	; (8002764 <storeindex+0x78>)
 800273c:	f011 fa45 	bl	8013bca <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8002740:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002742:	463a      	mov	r2, r7
 8002744:	2300      	movs	r3, #0
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2364      	movs	r3, #100	; 0x64
 800274a:	4806      	ldr	r0, [pc, #24]	; (8002764 <storeindex+0x78>)
 800274c:	f011 fac0 	bl	8013cd0 <SPIF_WritePage>

}
 8002750:	bf00      	nop
 8002752:	3768      	adds	r7, #104	; 0x68
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000944 	.word	0x20000944
 800275c:	20000948 	.word	0x20000948
 8002760:	0801ae70 	.word	0x0801ae70
 8002764:	20000710 	.word	0x20000710

08002768 <getindex>:

void getindex(void){
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 800276e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8002772:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	2300      	movs	r3, #0
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	2332      	movs	r3, #50	; 0x32
 800277c:	4a2b      	ldr	r2, [pc, #172]	; (800282c <getindex+0xc4>)
 800277e:	482c      	ldr	r0, [pc, #176]	; (8002830 <getindex+0xc8>)
 8002780:	f011 fac4 	bl	8013d0c <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8002784:	220a      	movs	r2, #10
 8002786:	2124      	movs	r1, #36	; 0x24
 8002788:	482a      	ldr	r0, [pc, #168]	; (8002834 <getindex+0xcc>)
 800278a:	f014 f82e 	bl	80167ea <memset>
	memset(numbuf2,'$',10);
 800278e:	220a      	movs	r2, #10
 8002790:	2124      	movs	r1, #36	; 0x24
 8002792:	4829      	ldr	r0, [pc, #164]	; (8002838 <getindex+0xd0>)
 8002794:	f014 f829 	bl	80167ea <memset>
	int cnt=0;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 800279c:	4b23      	ldr	r3, [pc, #140]	; (800282c <getindex+0xc4>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	dc3a      	bgt.n	800281e <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 80027a8:	e00b      	b.n	80027c2 <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 80027aa:	4a20      	ldr	r2, [pc, #128]	; (800282c <getindex+0xc4>)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	4413      	add	r3, r2
 80027b0:	7819      	ldrb	r1, [r3, #0]
 80027b2:	4a20      	ldr	r2, [pc, #128]	; (8002834 <getindex+0xcc>)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	460a      	mov	r2, r1
 80027ba:	701a      	strb	r2, [r3, #0]
			  cnt++;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3301      	adds	r3, #1
 80027c0:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 80027c2:	4a1a      	ldr	r2, [pc, #104]	; (800282c <getindex+0xc4>)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b24      	cmp	r3, #36	; 0x24
 80027cc:	d1ed      	bne.n	80027aa <getindex+0x42>
		  }
		  cnt++;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3301      	adds	r3, #1
 80027d2:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 80027d8:	e00e      	b.n	80027f8 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 80027da:	4a14      	ldr	r2, [pc, #80]	; (800282c <getindex+0xc4>)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4413      	add	r3, r2
 80027e0:	7819      	ldrb	r1, [r3, #0]
 80027e2:	4a15      	ldr	r2, [pc, #84]	; (8002838 <getindex+0xd0>)
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4413      	add	r3, r2
 80027e8:	460a      	mov	r2, r1
 80027ea:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	3301      	adds	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	3301      	adds	r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 80027f8:	4a0c      	ldr	r2, [pc, #48]	; (800282c <getindex+0xc4>)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4413      	add	r3, r2
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b24      	cmp	r3, #36	; 0x24
 8002802:	d1ea      	bne.n	80027da <getindex+0x72>
		  	  }

		 pageoffset=atoi((char *)numbuf1);
 8002804:	480b      	ldr	r0, [pc, #44]	; (8002834 <getindex+0xcc>)
 8002806:	f012 f85b 	bl	80148c0 <atoi>
 800280a:	4603      	mov	r3, r0
 800280c:	4a0b      	ldr	r2, [pc, #44]	; (800283c <getindex+0xd4>)
 800280e:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((char *)numbuf2);
 8002810:	4809      	ldr	r0, [pc, #36]	; (8002838 <getindex+0xd0>)
 8002812:	f012 f855 	bl	80148c0 <atoi>
 8002816:	4603      	mov	r3, r0
 8002818:	4a09      	ldr	r2, [pc, #36]	; (8002840 <getindex+0xd8>)
 800281a:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 800281c:	e001      	b.n	8002822 <getindex+0xba>
		storeindex();
 800281e:	f7ff ff65 	bl	80026ec <storeindex>
}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000b90 	.word	0x20000b90
 8002830:	20000710 	.word	0x20000710
 8002834:	20000950 	.word	0x20000950
 8002838:	2000095c 	.word	0x2000095c
 800283c:	20000944 	.word	0x20000944
 8002840:	20000948 	.word	0x20000948

08002844 <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af02      	add	r7, sp, #8
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 800284e:	4b3f      	ldr	r3, [pc, #252]	; (800294c <writebuffertoflash+0x108>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3301      	adds	r3, #1
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	2b00      	cmp	r3, #0
 800285a:	d11b      	bne.n	8002894 <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 800285c:	4b3c      	ldr	r3, [pc, #240]	; (8002950 <writebuffertoflash+0x10c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d117      	bne.n	8002894 <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8002864:	4b39      	ldr	r3, [pc, #228]	; (800294c <writebuffertoflash+0x108>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	da00      	bge.n	8002870 <writebuffertoflash+0x2c>
 800286e:	330f      	adds	r3, #15
 8002870:	111b      	asrs	r3, r3, #4
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fe56 	bl	8000524 <__aeabi_i2d>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	f7fe f96a 	bl	8000b58 <__aeabi_d2iz>
 8002884:	4603      	mov	r3, r0
 8002886:	4619      	mov	r1, r3
 8002888:	4832      	ldr	r0, [pc, #200]	; (8002954 <writebuffertoflash+0x110>)
 800288a:	f011 f99e 	bl	8013bca <SPIF_EraseSector>
		sectoreraseen=1;
 800288e:	4b30      	ldr	r3, [pc, #192]	; (8002950 <writebuffertoflash+0x10c>)
 8002890:	2201      	movs	r2, #1
 8002892:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8002894:	4b30      	ldr	r3, [pc, #192]	; (8002958 <writebuffertoflash+0x114>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	4413      	add	r3, r2
 800289c:	2bff      	cmp	r3, #255	; 0xff
 800289e:	dc11      	bgt.n	80028c4 <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 80028a0:	4b2a      	ldr	r3, [pc, #168]	; (800294c <writebuffertoflash+0x108>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4619      	mov	r1, r3
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	4a2b      	ldr	r2, [pc, #172]	; (8002958 <writebuffertoflash+0x114>)
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	9200      	str	r2, [sp, #0]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	4828      	ldr	r0, [pc, #160]	; (8002954 <writebuffertoflash+0x110>)
 80028b2:	f011 fa0d 	bl	8013cd0 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 80028b6:	4b28      	ldr	r3, [pc, #160]	; (8002958 <writebuffertoflash+0x114>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	4413      	add	r3, r2
 80028be:	4a26      	ldr	r2, [pc, #152]	; (8002958 <writebuffertoflash+0x114>)
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e03c      	b.n	800293e <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 80028c4:	4b21      	ldr	r3, [pc, #132]	; (800294c <writebuffertoflash+0x108>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4619      	mov	r1, r3
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <writebuffertoflash+0x114>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b20      	ldr	r3, [pc, #128]	; (8002958 <writebuffertoflash+0x114>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	4613      	mov	r3, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	481d      	ldr	r0, [pc, #116]	; (8002954 <writebuffertoflash+0x110>)
 80028e0:	f011 f9f6 	bl	8013cd0 <SPIF_WritePage>
		HAL_Delay(100);
 80028e4:	2064      	movs	r0, #100	; 0x64
 80028e6:	f003 fd8d 	bl	8006404 <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 80028ea:	4b18      	ldr	r3, [pc, #96]	; (800294c <writebuffertoflash+0x108>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	3301      	adds	r3, #1
 80028f0:	4618      	mov	r0, r3
 80028f2:	4b19      	ldr	r3, [pc, #100]	; (8002958 <writebuffertoflash+0x114>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80028fa:	461a      	mov	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	1899      	adds	r1, r3, r2
 8002900:	4b15      	ldr	r3, [pc, #84]	; (8002958 <writebuffertoflash+0x114>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	461a      	mov	r2, r3
 800290e:	2300      	movs	r3, #0
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	4613      	mov	r3, r2
 8002914:	460a      	mov	r2, r1
 8002916:	4601      	mov	r1, r0
 8002918:	480e      	ldr	r0, [pc, #56]	; (8002954 <writebuffertoflash+0x110>)
 800291a:	f011 f9d9 	bl	8013cd0 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <writebuffertoflash+0x108>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3301      	adds	r3, #1
 8002924:	4a09      	ldr	r2, [pc, #36]	; (800294c <writebuffertoflash+0x108>)
 8002926:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <writebuffertoflash+0x10c>)
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <writebuffertoflash+0x114>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	4a07      	ldr	r2, [pc, #28]	; (8002958 <writebuffertoflash+0x114>)
 800293c:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 800293e:	f7ff fed5 	bl	80026ec <storeindex>

}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000948 	.word	0x20000948
 8002950:	2000094c 	.word	0x2000094c
 8002954:	20000710 	.word	0x20000710
 8002958:	20000944 	.word	0x20000944

0800295c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af04      	add	r7, sp, #16
 8002972:	4603      	mov	r3, r0
 8002974:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002976:	f04f 33ff 	mov.w	r3, #4294967295
 800297a:	9302      	str	r3, [sp, #8]
 800297c:	2301      	movs	r3, #1
 800297e:	9301      	str	r3, [sp, #4]
 8002980:	1dfb      	adds	r3, r7, #7
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2301      	movs	r3, #1
 8002986:	2200      	movs	r2, #0
 8002988:	2178      	movs	r1, #120	; 0x78
 800298a:	4803      	ldr	r0, [pc, #12]	; (8002998 <ssd1306_WriteCommand+0x2c>)
 800298c:	f005 fde0 	bl	8008550 <HAL_I2C_Mem_Write>
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000424 	.word	0x20000424

0800299c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af04      	add	r7, sp, #16
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	f04f 32ff 	mov.w	r2, #4294967295
 80029ae:	9202      	str	r2, [sp, #8]
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2301      	movs	r3, #1
 80029b8:	2240      	movs	r2, #64	; 0x40
 80029ba:	2178      	movs	r1, #120	; 0x78
 80029bc:	4803      	ldr	r0, [pc, #12]	; (80029cc <ssd1306_WriteData+0x30>)
 80029be:	f005 fdc7 	bl	8008550 <HAL_I2C_Mem_Write>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000424 	.word	0x20000424

080029d0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80029d4:	f7ff ffc2 	bl	800295c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80029d8:	2064      	movs	r0, #100	; 0x64
 80029da:	f003 fd13 	bl	8006404 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80029de:	2000      	movs	r0, #0
 80029e0:	f000 fba0 	bl	8003124 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80029e4:	2020      	movs	r0, #32
 80029e6:	f7ff ffc1 	bl	800296c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7ff ffbe 	bl	800296c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80029f0:	20b0      	movs	r0, #176	; 0xb0
 80029f2:	f7ff ffbb 	bl	800296c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80029f6:	20c8      	movs	r0, #200	; 0xc8
 80029f8:	f7ff ffb8 	bl	800296c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7ff ffb5 	bl	800296c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002a02:	2010      	movs	r0, #16
 8002a04:	f7ff ffb2 	bl	800296c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002a08:	2040      	movs	r0, #64	; 0x40
 8002a0a:	f7ff ffaf 	bl	800296c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002a0e:	20ff      	movs	r0, #255	; 0xff
 8002a10:	f000 fb75 	bl	80030fe <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002a14:	20a1      	movs	r0, #161	; 0xa1
 8002a16:	f7ff ffa9 	bl	800296c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002a1a:	20a6      	movs	r0, #166	; 0xa6
 8002a1c:	f7ff ffa6 	bl	800296c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002a20:	20a8      	movs	r0, #168	; 0xa8
 8002a22:	f7ff ffa3 	bl	800296c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002a26:	203f      	movs	r0, #63	; 0x3f
 8002a28:	f7ff ffa0 	bl	800296c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002a2c:	20a4      	movs	r0, #164	; 0xa4
 8002a2e:	f7ff ff9d 	bl	800296c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002a32:	20d3      	movs	r0, #211	; 0xd3
 8002a34:	f7ff ff9a 	bl	800296c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7ff ff97 	bl	800296c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002a3e:	20d5      	movs	r0, #213	; 0xd5
 8002a40:	f7ff ff94 	bl	800296c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002a44:	20f0      	movs	r0, #240	; 0xf0
 8002a46:	f7ff ff91 	bl	800296c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002a4a:	20d9      	movs	r0, #217	; 0xd9
 8002a4c:	f7ff ff8e 	bl	800296c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002a50:	2022      	movs	r0, #34	; 0x22
 8002a52:	f7ff ff8b 	bl	800296c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002a56:	20da      	movs	r0, #218	; 0xda
 8002a58:	f7ff ff88 	bl	800296c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002a5c:	2012      	movs	r0, #18
 8002a5e:	f7ff ff85 	bl	800296c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002a62:	20db      	movs	r0, #219	; 0xdb
 8002a64:	f7ff ff82 	bl	800296c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002a68:	2020      	movs	r0, #32
 8002a6a:	f7ff ff7f 	bl	800296c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002a6e:	208d      	movs	r0, #141	; 0x8d
 8002a70:	f7ff ff7c 	bl	800296c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002a74:	2014      	movs	r0, #20
 8002a76:	f7ff ff79 	bl	800296c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f000 fb52 	bl	8003124 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f000 f80f 	bl	8002aa4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002a86:	f000 f825 	bl	8002ad4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <ssd1306_Init+0xd0>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <ssd1306_Init+0xd0>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002a96:	4b02      	ldr	r3, [pc, #8]	; (8002aa0 <ssd1306_Init+0xd0>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	711a      	strb	r2, [r3, #4]
}
 8002a9c:	bf00      	nop
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	200010b8 	.word	0x200010b8

08002aa4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <ssd1306_Fill+0x14>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e000      	b.n	8002aba <ssd1306_Fill+0x16>
 8002ab8:	23ff      	movs	r3, #255	; 0xff
 8002aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <ssd1306_Fill+0x2c>)
 8002ac2:	f013 fe92 	bl	80167ea <memset>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000cb8 	.word	0x20000cb8

08002ad4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002ada:	2300      	movs	r3, #0
 8002adc:	71fb      	strb	r3, [r7, #7]
 8002ade:	e016      	b.n	8002b0e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	3b50      	subs	r3, #80	; 0x50
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ff40 	bl	800296c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7ff ff3d 	bl	800296c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002af2:	2010      	movs	r0, #16
 8002af4:	f7ff ff3a 	bl	800296c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	01db      	lsls	r3, r3, #7
 8002afc:	4a08      	ldr	r2, [pc, #32]	; (8002b20 <ssd1306_UpdateScreen+0x4c>)
 8002afe:	4413      	add	r3, r2
 8002b00:	2180      	movs	r1, #128	; 0x80
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff ff4a 	bl	800299c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	71fb      	strb	r3, [r7, #7]
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	2b07      	cmp	r3, #7
 8002b12:	d9e5      	bls.n	8002ae0 <ssd1306_UpdateScreen+0xc>
    }
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000cb8 	.word	0x20000cb8

08002b24 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	71bb      	strb	r3, [r7, #6]
 8002b32:	4613      	mov	r3, r2
 8002b34:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	db3d      	blt.n	8002bba <ssd1306_DrawPixel+0x96>
 8002b3e:	79bb      	ldrb	r3, [r7, #6]
 8002b40:	2b3f      	cmp	r3, #63	; 0x3f
 8002b42:	d83a      	bhi.n	8002bba <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002b44:	797b      	ldrb	r3, [r7, #5]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d11a      	bne.n	8002b80 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002b4a:	79fa      	ldrb	r2, [r7, #7]
 8002b4c:	79bb      	ldrb	r3, [r7, #6]
 8002b4e:	08db      	lsrs	r3, r3, #3
 8002b50:	b2d8      	uxtb	r0, r3
 8002b52:	4603      	mov	r3, r0
 8002b54:	01db      	lsls	r3, r3, #7
 8002b56:	4413      	add	r3, r2
 8002b58:	4a1b      	ldr	r2, [pc, #108]	; (8002bc8 <ssd1306_DrawPixel+0xa4>)
 8002b5a:	5cd3      	ldrb	r3, [r2, r3]
 8002b5c:	b25a      	sxtb	r2, r3
 8002b5e:	79bb      	ldrb	r3, [r7, #6]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	2101      	movs	r1, #1
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	b259      	sxtb	r1, r3
 8002b70:	79fa      	ldrb	r2, [r7, #7]
 8002b72:	4603      	mov	r3, r0
 8002b74:	01db      	lsls	r3, r3, #7
 8002b76:	4413      	add	r3, r2
 8002b78:	b2c9      	uxtb	r1, r1
 8002b7a:	4a13      	ldr	r2, [pc, #76]	; (8002bc8 <ssd1306_DrawPixel+0xa4>)
 8002b7c:	54d1      	strb	r1, [r2, r3]
 8002b7e:	e01d      	b.n	8002bbc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002b80:	79fa      	ldrb	r2, [r7, #7]
 8002b82:	79bb      	ldrb	r3, [r7, #6]
 8002b84:	08db      	lsrs	r3, r3, #3
 8002b86:	b2d8      	uxtb	r0, r3
 8002b88:	4603      	mov	r3, r0
 8002b8a:	01db      	lsls	r3, r3, #7
 8002b8c:	4413      	add	r3, r2
 8002b8e:	4a0e      	ldr	r2, [pc, #56]	; (8002bc8 <ssd1306_DrawPixel+0xa4>)
 8002b90:	5cd3      	ldrb	r3, [r2, r3]
 8002b92:	b25a      	sxtb	r2, r3
 8002b94:	79bb      	ldrb	r3, [r7, #6]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	b25b      	sxtb	r3, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	b259      	sxtb	r1, r3
 8002baa:	79fa      	ldrb	r2, [r7, #7]
 8002bac:	4603      	mov	r3, r0
 8002bae:	01db      	lsls	r3, r3, #7
 8002bb0:	4413      	add	r3, r2
 8002bb2:	b2c9      	uxtb	r1, r1
 8002bb4:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <ssd1306_DrawPixel+0xa4>)
 8002bb6:	54d1      	strb	r1, [r2, r3]
 8002bb8:	e000      	b.n	8002bbc <ssd1306_DrawPixel+0x98>
        return;
 8002bba:	bf00      	nop
    }
}
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20000cb8 	.word	0x20000cb8

08002bcc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	1d38      	adds	r0, r7, #4
 8002bd6:	e880 0006 	stmia.w	r0, {r1, r2}
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4623      	mov	r3, r4
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	4613      	mov	r3, r2
 8002be2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b1f      	cmp	r3, #31
 8002be8:	d902      	bls.n	8002bf0 <ssd1306_WriteChar+0x24>
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	2b7e      	cmp	r3, #126	; 0x7e
 8002bee:	d901      	bls.n	8002bf4 <ssd1306_WriteChar+0x28>
        return 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e06d      	b.n	8002cd0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002bf4:	4b38      	ldr	r3, [pc, #224]	; (8002cd8 <ssd1306_WriteChar+0x10c>)
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	793b      	ldrb	r3, [r7, #4]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	2b80      	cmp	r3, #128	; 0x80
 8002c00:	dc06      	bgt.n	8002c10 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002c02:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <ssd1306_WriteChar+0x10c>)
 8002c04:	885b      	ldrh	r3, [r3, #2]
 8002c06:	461a      	mov	r2, r3
 8002c08:	797b      	ldrb	r3, [r7, #5]
 8002c0a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	dd01      	ble.n	8002c14 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002c10:	2300      	movs	r3, #0
 8002c12:	e05d      	b.n	8002cd0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	e04c      	b.n	8002cb4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	3b20      	subs	r3, #32
 8002c20:	7979      	ldrb	r1, [r7, #5]
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4619      	mov	r1, r3
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	440b      	add	r3, r1
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	e034      	b.n	8002ca4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d012      	beq.n	8002c70 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002c4a:	4b23      	ldr	r3, [pc, #140]	; (8002cd8 <ssd1306_WriteChar+0x10c>)
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	b2d8      	uxtb	r0, r3
 8002c58:	4b1f      	ldr	r3, [pc, #124]	; (8002cd8 <ssd1306_WriteChar+0x10c>)
 8002c5a:	885b      	ldrh	r3, [r3, #2]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	7bba      	ldrb	r2, [r7, #14]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f7ff ff5b 	bl	8002b24 <ssd1306_DrawPixel>
 8002c6e:	e016      	b.n	8002c9e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <ssd1306_WriteChar+0x10c>)
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	b2d8      	uxtb	r0, r3
 8002c7e:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <ssd1306_WriteChar+0x10c>)
 8002c80:	885b      	ldrh	r3, [r3, #2]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	4413      	add	r3, r2
 8002c8a:	b2d9      	uxtb	r1, r3
 8002c8c:	7bbb      	ldrb	r3, [r7, #14]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf0c      	ite	eq
 8002c92:	2301      	moveq	r3, #1
 8002c94:	2300      	movne	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f7ff ff43 	bl	8002b24 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	793b      	ldrb	r3, [r7, #4]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d3c5      	bcc.n	8002c3a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	797b      	ldrb	r3, [r7, #5]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d3ad      	bcc.n	8002c1a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002cbe:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <ssd1306_WriteChar+0x10c>)
 8002cc0:	881a      	ldrh	r2, [r3, #0]
 8002cc2:	793b      	ldrb	r3, [r7, #4]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <ssd1306_WriteChar+0x10c>)
 8002ccc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3724      	adds	r7, #36	; 0x24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd90      	pop	{r4, r7, pc}
 8002cd8:	200010b8 	.word	0x200010b8

08002cdc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	1d38      	adds	r0, r7, #4
 8002ce6:	e880 0006 	stmia.w	r0, {r1, r2}
 8002cea:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002cec:	e012      	b.n	8002d14 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	7818      	ldrb	r0, [r3, #0]
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	1d3a      	adds	r2, r7, #4
 8002cf6:	ca06      	ldmia	r2, {r1, r2}
 8002cf8:	f7ff ff68 	bl	8002bcc <ssd1306_WriteChar>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d002      	beq.n	8002d0e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	e008      	b.n	8002d20 <ssd1306_WriteString+0x44>
        }
        str++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3301      	adds	r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e8      	bne.n	8002cee <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	460a      	mov	r2, r1
 8002d32:	71fb      	strb	r3, [r7, #7]
 8002d34:	4613      	mov	r3, r2
 8002d36:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <ssd1306_SetCursor+0x2c>)
 8002d3e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002d40:	79bb      	ldrb	r3, [r7, #6]
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <ssd1306_SetCursor+0x2c>)
 8002d46:	805a      	strh	r2, [r3, #2]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	200010b8 	.word	0x200010b8

08002d58 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4604      	mov	r4, r0
 8002d60:	4608      	mov	r0, r1
 8002d62:	4611      	mov	r1, r2
 8002d64:	461a      	mov	r2, r3
 8002d66:	4623      	mov	r3, r4
 8002d68:	71fb      	strb	r3, [r7, #7]
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71bb      	strb	r3, [r7, #6]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	717b      	strb	r3, [r7, #5]
 8002d72:	4613      	mov	r3, r2
 8002d74:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8002d76:	797a      	ldrb	r2, [r7, #5]
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	bfb8      	it	lt
 8002d80:	425b      	neglt	r3, r3
 8002d82:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8002d84:	793a      	ldrb	r2, [r7, #4]
 8002d86:	79bb      	ldrb	r3, [r7, #6]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bfb8      	it	lt
 8002d8e:	425b      	neglt	r3, r3
 8002d90:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8002d92:	79fa      	ldrb	r2, [r7, #7]
 8002d94:	797b      	ldrb	r3, [r7, #5]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d201      	bcs.n	8002d9e <ssd1306_Line+0x46>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e001      	b.n	8002da2 <ssd1306_Line+0x4a>
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002da2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8002da4:	79ba      	ldrb	r2, [r7, #6]
 8002da6:	793b      	ldrb	r3, [r7, #4]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d201      	bcs.n	8002db0 <ssd1306_Line+0x58>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e001      	b.n	8002db4 <ssd1306_Line+0x5c>
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295
 8002db4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002dbe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002dc2:	7939      	ldrb	r1, [r7, #4]
 8002dc4:	797b      	ldrb	r3, [r7, #5]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff feac 	bl	8002b24 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002dcc:	e024      	b.n	8002e18 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002dce:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002dd2:	79b9      	ldrb	r1, [r7, #6]
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fea4 	bl	8002b24 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	425b      	negs	r3, r3
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	dd08      	ble.n	8002dfe <ssd1306_Line+0xa6>
            error -= deltaY;
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	da08      	bge.n	8002e18 <ssd1306_Line+0xc0>
            error += deltaX;
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	79bb      	ldrb	r3, [r7, #6]
 8002e14:	4413      	add	r3, r2
 8002e16:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002e18:	79fa      	ldrb	r2, [r7, #7]
 8002e1a:	797b      	ldrb	r3, [r7, #5]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d1d6      	bne.n	8002dce <ssd1306_Line+0x76>
 8002e20:	79ba      	ldrb	r2, [r7, #6]
 8002e22:	793b      	ldrb	r3, [r7, #4]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d1d2      	bne.n	8002dce <ssd1306_Line+0x76>
        }
    }
    return;
 8002e28:	bf00      	nop
}
 8002e2a:	3724      	adds	r7, #36	; 0x24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd90      	pop	{r4, r7, pc}

08002e30 <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002e30:	b590      	push	{r4, r7, lr}
 8002e32:	b087      	sub	sp, #28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4604      	mov	r4, r0
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4623      	mov	r3, r4
 8002e40:	71fb      	strb	r3, [r7, #7]
 8002e42:	4603      	mov	r3, r0
 8002e44:	71bb      	strb	r3, [r7, #6]
 8002e46:	460b      	mov	r3, r1
 8002e48:	717b      	strb	r3, [r7, #5]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8002e4e:	797b      	ldrb	r3, [r7, #5]
 8002e50:	425b      	negs	r3, r3
 8002e52:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002e58:	797b      	ldrb	r3, [r7, #5]
 8002e5a:	f1c3 0301 	rsb	r3, r3, #1
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	db65      	blt.n	8002f36 <ssd1306_DrawCircle+0x106>
 8002e6a:	79bb      	ldrb	r3, [r7, #6]
 8002e6c:	2b3f      	cmp	r3, #63	; 0x3f
 8002e6e:	d862      	bhi.n	8002f36 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	79fa      	ldrb	r2, [r7, #7]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	b2d8      	uxtb	r0, r3
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	79bb      	ldrb	r3, [r7, #6]
 8002e80:	4413      	add	r3, r2
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	793a      	ldrb	r2, [r7, #4]
 8002e86:	4619      	mov	r1, r3
 8002e88:	f7ff fe4c 	bl	8002b24 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	4413      	add	r3, r2
 8002e94:	b2d8      	uxtb	r0, r3
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	79bb      	ldrb	r3, [r7, #6]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	793a      	ldrb	r2, [r7, #4]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f7ff fe3e 	bl	8002b24 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	4413      	add	r3, r2
 8002eb0:	b2d8      	uxtb	r0, r3
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	79ba      	ldrb	r2, [r7, #6]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	793a      	ldrb	r2, [r7, #4]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f7ff fe30 	bl	8002b24 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	79fa      	ldrb	r2, [r7, #7]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	b2d8      	uxtb	r0, r3
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	79ba      	ldrb	r2, [r7, #6]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	793a      	ldrb	r2, [r7, #4]
 8002eda:	4619      	mov	r1, r3
 8002edc:	f7ff fe22 	bl	8002b24 <ssd1306_DrawPixel>
        e2 = err;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	dc13      	bgt.n	8002f14 <ssd1306_DrawCircle+0xe4>
            y++;
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	425b      	negs	r3, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d105      	bne.n	8002f14 <ssd1306_DrawCircle+0xe4>
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	dc01      	bgt.n	8002f14 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	dd08      	ble.n	8002f2e <ssd1306_DrawCircle+0xfe>
            x++;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	3301      	adds	r3, #1
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	dd9d      	ble.n	8002e70 <ssd1306_DrawCircle+0x40>

    return;
 8002f34:	e000      	b.n	8002f38 <ssd1306_DrawCircle+0x108>
        return;
 8002f36:	bf00      	nop
}
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd90      	pop	{r4, r7, pc}

08002f3e <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002f3e:	b590      	push	{r4, r7, lr}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af02      	add	r7, sp, #8
 8002f44:	4604      	mov	r4, r0
 8002f46:	4608      	mov	r0, r1
 8002f48:	4611      	mov	r1, r2
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4623      	mov	r3, r4
 8002f4e:	71fb      	strb	r3, [r7, #7]
 8002f50:	4603      	mov	r3, r0
 8002f52:	71bb      	strb	r3, [r7, #6]
 8002f54:	460b      	mov	r3, r1
 8002f56:	717b      	strb	r3, [r7, #5]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002f5c:	79bc      	ldrb	r4, [r7, #6]
 8002f5e:	797a      	ldrb	r2, [r7, #5]
 8002f60:	79b9      	ldrb	r1, [r7, #6]
 8002f62:	79f8      	ldrb	r0, [r7, #7]
 8002f64:	7e3b      	ldrb	r3, [r7, #24]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	4623      	mov	r3, r4
 8002f6a:	f7ff fef5 	bl	8002d58 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002f6e:	793c      	ldrb	r4, [r7, #4]
 8002f70:	797a      	ldrb	r2, [r7, #5]
 8002f72:	79b9      	ldrb	r1, [r7, #6]
 8002f74:	7978      	ldrb	r0, [r7, #5]
 8002f76:	7e3b      	ldrb	r3, [r7, #24]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	f7ff feec 	bl	8002d58 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002f80:	793c      	ldrb	r4, [r7, #4]
 8002f82:	79fa      	ldrb	r2, [r7, #7]
 8002f84:	7939      	ldrb	r1, [r7, #4]
 8002f86:	7978      	ldrb	r0, [r7, #5]
 8002f88:	7e3b      	ldrb	r3, [r7, #24]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	4623      	mov	r3, r4
 8002f8e:	f7ff fee3 	bl	8002d58 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002f92:	79bc      	ldrb	r4, [r7, #6]
 8002f94:	79fa      	ldrb	r2, [r7, #7]
 8002f96:	7939      	ldrb	r1, [r7, #4]
 8002f98:	79f8      	ldrb	r0, [r7, #7]
 8002f9a:	7e3b      	ldrb	r3, [r7, #24]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	4623      	mov	r3, r4
 8002fa0:	f7ff feda 	bl	8002d58 <ssd1306_Line>

    return;
 8002fa4:	bf00      	nop
}
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd90      	pop	{r4, r7, pc}

08002fac <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4604      	mov	r4, r0
 8002fb4:	4608      	mov	r0, r1
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4623      	mov	r3, r4
 8002fbc:	71fb      	strb	r3, [r7, #7]
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71bb      	strb	r3, [r7, #6]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	717b      	strb	r3, [r7, #5]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002fca:	79fa      	ldrb	r2, [r7, #7]
 8002fcc:	797b      	ldrb	r3, [r7, #5]
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	bf28      	it	cs
 8002fd2:	4613      	movcs	r3, r2
 8002fd4:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002fd6:	797a      	ldrb	r2, [r7, #5]
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	bf38      	it	cc
 8002fde:	4613      	movcc	r3, r2
 8002fe0:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002fe2:	79ba      	ldrb	r2, [r7, #6]
 8002fe4:	793b      	ldrb	r3, [r7, #4]
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	bf28      	it	cs
 8002fea:	4613      	movcs	r3, r2
 8002fec:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002fee:	793a      	ldrb	r2, [r7, #4]
 8002ff0:	79bb      	ldrb	r3, [r7, #6]
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	bf38      	it	cc
 8002ff6:	4613      	movcc	r3, r2
 8002ff8:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002ffa:	7afb      	ldrb	r3, [r7, #11]
 8002ffc:	73fb      	strb	r3, [r7, #15]
 8002ffe:	e017      	b.n	8003030 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8003000:	7b7b      	ldrb	r3, [r7, #13]
 8003002:	73bb      	strb	r3, [r7, #14]
 8003004:	e009      	b.n	800301a <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8003006:	f897 2020 	ldrb.w	r2, [r7, #32]
 800300a:	7bf9      	ldrb	r1, [r7, #15]
 800300c:	7bbb      	ldrb	r3, [r7, #14]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fd88 	bl	8002b24 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8003014:	7bbb      	ldrb	r3, [r7, #14]
 8003016:	3301      	adds	r3, #1
 8003018:	73bb      	strb	r3, [r7, #14]
 800301a:	7bba      	ldrb	r2, [r7, #14]
 800301c:	7b3b      	ldrb	r3, [r7, #12]
 800301e:	429a      	cmp	r2, r3
 8003020:	d803      	bhi.n	800302a <ssd1306_FillRectangle+0x7e>
 8003022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003026:	2b00      	cmp	r3, #0
 8003028:	daed      	bge.n	8003006 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	3301      	adds	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	7bfa      	ldrb	r2, [r7, #15]
 8003032:	7abb      	ldrb	r3, [r7, #10]
 8003034:	429a      	cmp	r2, r3
 8003036:	d803      	bhi.n	8003040 <ssd1306_FillRectangle+0x94>
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	2b3f      	cmp	r3, #63	; 0x3f
 800303c:	d9e0      	bls.n	8003000 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 800303e:	bf00      	nop
 8003040:	bf00      	nop
}
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	bd90      	pop	{r4, r7, pc}

08003048 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	603a      	str	r2, [r7, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
 8003056:	460b      	mov	r3, r1
 8003058:	71bb      	strb	r3, [r7, #6]
 800305a:	4613      	mov	r3, r2
 800305c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800305e:	797b      	ldrb	r3, [r7, #5]
 8003060:	3307      	adds	r3, #7
 8003062:	2b00      	cmp	r3, #0
 8003064:	da00      	bge.n	8003068 <ssd1306_DrawBitmap+0x20>
 8003066:	3307      	adds	r3, #7
 8003068:	10db      	asrs	r3, r3, #3
 800306a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003074:	2b00      	cmp	r3, #0
 8003076:	db3e      	blt.n	80030f6 <ssd1306_DrawBitmap+0xae>
 8003078:	79bb      	ldrb	r3, [r7, #6]
 800307a:	2b3f      	cmp	r3, #63	; 0x3f
 800307c:	d83b      	bhi.n	80030f6 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800307e:	2300      	movs	r3, #0
 8003080:	73bb      	strb	r3, [r7, #14]
 8003082:	e033      	b.n	80030ec <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8003084:	2300      	movs	r3, #0
 8003086:	737b      	strb	r3, [r7, #13]
 8003088:	e026      	b.n	80030d8 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800308a:	7b7b      	ldrb	r3, [r7, #13]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
 800309a:	e00d      	b.n	80030b8 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800309c:	7bbb      	ldrb	r3, [r7, #14]
 800309e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	7b7a      	ldrb	r2, [r7, #13]
 80030a8:	08d2      	lsrs	r2, r2, #3
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	4413      	add	r3, r2
 80030ae:	461a      	mov	r2, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4413      	add	r3, r2
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80030b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	da08      	bge.n	80030d2 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80030c0:	79fa      	ldrb	r2, [r7, #7]
 80030c2:	7b7b      	ldrb	r3, [r7, #13]
 80030c4:	4413      	add	r3, r2
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	7f3a      	ldrb	r2, [r7, #28]
 80030ca:	79b9      	ldrb	r1, [r7, #6]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fd29 	bl	8002b24 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80030d2:	7b7b      	ldrb	r3, [r7, #13]
 80030d4:	3301      	adds	r3, #1
 80030d6:	737b      	strb	r3, [r7, #13]
 80030d8:	7b7a      	ldrb	r2, [r7, #13]
 80030da:	797b      	ldrb	r3, [r7, #5]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d3d4      	bcc.n	800308a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80030e0:	7bbb      	ldrb	r3, [r7, #14]
 80030e2:	3301      	adds	r3, #1
 80030e4:	73bb      	strb	r3, [r7, #14]
 80030e6:	79bb      	ldrb	r3, [r7, #6]
 80030e8:	3301      	adds	r3, #1
 80030ea:	71bb      	strb	r3, [r7, #6]
 80030ec:	7bba      	ldrb	r2, [r7, #14]
 80030ee:	7e3b      	ldrb	r3, [r7, #24]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d3c7      	bcc.n	8003084 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80030f4:	e000      	b.n	80030f8 <ssd1306_DrawBitmap+0xb0>
        return;
 80030f6:	bf00      	nop
}
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003108:	2381      	movs	r3, #129	; 0x81
 800310a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fc2c 	bl	800296c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fc28 	bl	800296c <ssd1306_WriteCommand>
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003134:	23af      	movs	r3, #175	; 0xaf
 8003136:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003138:	4b08      	ldr	r3, [pc, #32]	; (800315c <ssd1306_SetDisplayOn+0x38>)
 800313a:	2201      	movs	r2, #1
 800313c:	715a      	strb	r2, [r3, #5]
 800313e:	e004      	b.n	800314a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003140:	23ae      	movs	r3, #174	; 0xae
 8003142:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <ssd1306_SetDisplayOn+0x38>)
 8003146:	2200      	movs	r2, #0
 8003148:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fc0d 	bl	800296c <ssd1306_WriteCommand>
}
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	200010b8 	.word	0x200010b8

08003160 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b087      	sub	sp, #28
 8003164:	af02      	add	r7, sp, #8
 8003166:	ed87 0a03 	vstr	s0, [r7, #12]
 800316a:	60b8      	str	r0, [r7, #8]
 800316c:	6079      	str	r1, [r7, #4]
 800316e:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	330f      	adds	r3, #15
 8003176:	b2d8      	uxtb	r0, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	3301      	adds	r3, #1
 800317e:	b2d9      	uxtb	r1, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	330f      	adds	r3, #15
 8003186:	b2da      	uxtb	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	3305      	adds	r3, #5
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2401      	movs	r4, #1
 8003192:	9400      	str	r4, [sp, #0]
 8003194:	f7ff fde0 	bl	8002d58 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	3310      	adds	r3, #16
 800319e:	b2d8      	uxtb	r0, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	3301      	adds	r3, #1
 80031a6:	b2d9      	uxtb	r1, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	3310      	adds	r3, #16
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	3305      	adds	r3, #5
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2401      	movs	r4, #1
 80031ba:	9400      	str	r4, [sp, #0]
 80031bc:	f7ff fdcc 	bl	8002d58 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	b2d8      	uxtb	r0, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	b2d9      	uxtb	r1, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	330e      	adds	r3, #14
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	3306      	adds	r3, #6
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2401      	movs	r4, #1
 80031da:	9400      	str	r4, [sp, #0]
 80031dc:	f7ff feaf 	bl	8002f3e <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7fd f9b1 	bl	8000548 <__aeabi_f2d>
 80031e6:	a396      	add	r3, pc, #600	; (adr r3, 8003440 <batterygauge+0x2e0>)
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f7fd fc80 	bl	8000af0 <__aeabi_dcmple>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d02a      	beq.n	800324c <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	3302      	adds	r3, #2
 80031fc:	b2d8      	uxtb	r0, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	3302      	adds	r3, #2
 8003204:	b2d9      	uxtb	r1, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	3303      	adds	r3, #3
 800320c:	b2da      	uxtb	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	3304      	adds	r3, #4
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2401      	movs	r4, #1
 8003218:	9400      	str	r4, [sp, #0]
 800321a:	f7ff fe90 	bl	8002f3e <ssd1306_DrawRectangle>
		if(currentsquare==1){
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d113      	bne.n	800324c <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	3302      	adds	r3, #2
 800322a:	b2d8      	uxtb	r0, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	3302      	adds	r3, #2
 8003232:	b2d9      	uxtb	r1, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	3303      	adds	r3, #3
 800323a:	b2da      	uxtb	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	3304      	adds	r3, #4
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2401      	movs	r4, #1
 8003246:	9400      	str	r4, [sp, #0]
 8003248:	f7ff fe79 	bl	8002f3e <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f7fd f97b 	bl	8000548 <__aeabi_f2d>
 8003252:	a37b      	add	r3, pc, #492	; (adr r3, 8003440 <batterygauge+0x2e0>)
 8003254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003258:	f7fd fc5e 	bl	8000b18 <__aeabi_dcmpgt>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d035      	beq.n	80032ce <batterygauge+0x16e>
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f7fd f970 	bl	8000548 <__aeabi_f2d>
 8003268:	a377      	add	r3, pc, #476	; (adr r3, 8003448 <batterygauge+0x2e8>)
 800326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326e:	f7fd fc3f 	bl	8000af0 <__aeabi_dcmple>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d02a      	beq.n	80032ce <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	3302      	adds	r3, #2
 800327e:	b2d8      	uxtb	r0, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	3302      	adds	r3, #2
 8003286:	b2d9      	uxtb	r1, r3
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	3303      	adds	r3, #3
 800328e:	b2da      	uxtb	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	3304      	adds	r3, #4
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2401      	movs	r4, #1
 800329a:	9400      	str	r4, [sp, #0]
 800329c:	f7ff fe4f 	bl	8002f3e <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d113      	bne.n	80032ce <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	3305      	adds	r3, #5
 80032ac:	b2d8      	uxtb	r0, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	3302      	adds	r3, #2
 80032b4:	b2d9      	uxtb	r1, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	3306      	adds	r3, #6
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	3304      	adds	r3, #4
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2401      	movs	r4, #1
 80032c8:	9400      	str	r4, [sp, #0]
 80032ca:	f7ff fe38 	bl	8002f3e <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f7fd f93a 	bl	8000548 <__aeabi_f2d>
 80032d4:	a35c      	add	r3, pc, #368	; (adr r3, 8003448 <batterygauge+0x2e8>)
 80032d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032da:	f7fd fc1d 	bl	8000b18 <__aeabi_dcmpgt>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d049      	beq.n	8003378 <batterygauge+0x218>
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f7fd f92f 	bl	8000548 <__aeabi_f2d>
 80032ea:	a359      	add	r3, pc, #356	; (adr r3, 8003450 <batterygauge+0x2f0>)
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	f7fd fbfe 	bl	8000af0 <__aeabi_dcmple>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d03e      	beq.n	8003378 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	3302      	adds	r3, #2
 8003300:	b2d8      	uxtb	r0, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	3302      	adds	r3, #2
 8003308:	b2d9      	uxtb	r1, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	3303      	adds	r3, #3
 8003310:	b2da      	uxtb	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3304      	adds	r3, #4
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2401      	movs	r4, #1
 800331c:	9400      	str	r4, [sp, #0]
 800331e:	f7ff fe0e 	bl	8002f3e <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	3305      	adds	r3, #5
 8003328:	b2d8      	uxtb	r0, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	3302      	adds	r3, #2
 8003330:	b2d9      	uxtb	r1, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	3306      	adds	r3, #6
 8003338:	b2da      	uxtb	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	3304      	adds	r3, #4
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2401      	movs	r4, #1
 8003344:	9400      	str	r4, [sp, #0]
 8003346:	f7ff fdfa 	bl	8002f3e <ssd1306_DrawRectangle>

		if(currentsquare==1){
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d113      	bne.n	8003378 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	3308      	adds	r3, #8
 8003356:	b2d8      	uxtb	r0, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	3302      	adds	r3, #2
 800335e:	b2d9      	uxtb	r1, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	b2db      	uxtb	r3, r3
 8003364:	3309      	adds	r3, #9
 8003366:	b2da      	uxtb	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	3304      	adds	r3, #4
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2401      	movs	r4, #1
 8003372:	9400      	str	r4, [sp, #0]
 8003374:	f7ff fde3 	bl	8002f3e <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f7fd f8e5 	bl	8000548 <__aeabi_f2d>
 800337e:	a334      	add	r3, pc, #208	; (adr r3, 8003450 <batterygauge+0x2f0>)
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f7fd fbc8 	bl	8000b18 <__aeabi_dcmpgt>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d100      	bne.n	8003390 <batterygauge+0x230>
	}




}
 800338e:	e052      	b.n	8003436 <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	3302      	adds	r3, #2
 8003396:	b2d8      	uxtb	r0, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	3302      	adds	r3, #2
 800339e:	b2d9      	uxtb	r1, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	3303      	adds	r3, #3
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	3304      	adds	r3, #4
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2401      	movs	r4, #1
 80033b2:	9400      	str	r4, [sp, #0]
 80033b4:	f7ff fdc3 	bl	8002f3e <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3305      	adds	r3, #5
 80033be:	b2d8      	uxtb	r0, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	3302      	adds	r3, #2
 80033c6:	b2d9      	uxtb	r1, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	3306      	adds	r3, #6
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	3304      	adds	r3, #4
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2401      	movs	r4, #1
 80033da:	9400      	str	r4, [sp, #0]
 80033dc:	f7ff fdaf 	bl	8002f3e <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	3308      	adds	r3, #8
 80033e6:	b2d8      	uxtb	r0, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	3302      	adds	r3, #2
 80033ee:	b2d9      	uxtb	r1, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	3309      	adds	r3, #9
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	3304      	adds	r3, #4
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2401      	movs	r4, #1
 8003402:	9400      	str	r4, [sp, #0]
 8003404:	f7ff fd9b 	bl	8002f3e <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d113      	bne.n	8003436 <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	b2db      	uxtb	r3, r3
 8003412:	330b      	adds	r3, #11
 8003414:	b2d8      	uxtb	r0, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	3302      	adds	r3, #2
 800341c:	b2d9      	uxtb	r1, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	330c      	adds	r3, #12
 8003424:	b2da      	uxtb	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	3304      	adds	r3, #4
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2401      	movs	r4, #1
 8003430:	9400      	str	r4, [sp, #0]
 8003432:	f7ff fd84 	bl	8002f3e <ssd1306_DrawRectangle>
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	bd90      	pop	{r4, r7, pc}
 800343e:	bf00      	nop
 8003440:	9999999a 	.word	0x9999999a
 8003444:	400d9999 	.word	0x400d9999
 8003448:	33333333 	.word	0x33333333
 800344c:	400f3333 	.word	0x400f3333
 8003450:	66666666 	.word	0x66666666
 8003454:	40106666 	.word	0x40106666

08003458 <percentage>:

void percentage(float percent){
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af02      	add	r7, sp, #8
 800345e:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 40, floor(0.64*percent+32), 56, White);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fd f870 	bl	8000548 <__aeabi_f2d>
 8003468:	a329      	add	r3, pc, #164	; (adr r3, 8003510 <percentage+0xb8>)
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	f7fd f8c3 	bl	80005f8 <__aeabi_dmul>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4610      	mov	r0, r2
 8003478:	4619      	mov	r1, r3
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	4b20      	ldr	r3, [pc, #128]	; (8003500 <percentage+0xa8>)
 8003480:	f7fc ff04 	bl	800028c <__adddf3>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	ec43 2b17 	vmov	d7, r2, r3
 800348c:	eeb0 0a47 	vmov.f32	s0, s14
 8003490:	eef0 0a67 	vmov.f32	s1, s15
 8003494:	f016 f85c 	bl	8019550 <floor>
 8003498:	ec53 2b10 	vmov	r2, r3, d0
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	f7fd fb82 	bl	8000ba8 <__aeabi_d2uiz>
 80034a4:	4603      	mov	r3, r0
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	2301      	movs	r3, #1
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	2338      	movs	r3, #56	; 0x38
 80034ae:	2128      	movs	r1, #40	; 0x28
 80034b0:	2020      	movs	r0, #32
 80034b2:	f7ff fd7b 	bl	8002fac <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 40, 95, 56, White);
 80034b6:	2301      	movs	r3, #1
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2338      	movs	r3, #56	; 0x38
 80034bc:	225f      	movs	r2, #95	; 0x5f
 80034be:	2128      	movs	r1, #40	; 0x28
 80034c0:	2020      	movs	r0, #32
 80034c2:	f7ff fd3c 	bl	8002f3e <ssd1306_DrawRectangle>
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fd f83e 	bl	8000548 <__aeabi_f2d>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	e9cd 2300 	strd	r2, r3, [sp]
 80034d4:	4a0b      	ldr	r2, [pc, #44]	; (8003504 <percentage+0xac>)
 80034d6:	2114      	movs	r1, #20
 80034d8:	480b      	ldr	r0, [pc, #44]	; (8003508 <percentage+0xb0>)
 80034da:	f013 f8ef 	bl	80166bc <sniprintf>
	ssd1306_SetCursor(45,44);
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	202d      	movs	r0, #45	; 0x2d
 80034e2:	f7ff fc21 	bl	8002d28 <ssd1306_SetCursor>
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 80034e6:	4a09      	ldr	r2, [pc, #36]	; (800350c <percentage+0xb4>)
 80034e8:	2301      	movs	r3, #1
 80034ea:	ca06      	ldmia	r2, {r1, r2}
 80034ec:	4806      	ldr	r0, [pc, #24]	; (8003508 <percentage+0xb0>)
 80034ee:	f7ff fbf5 	bl	8002cdc <ssd1306_WriteString>


}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	f3af 8000 	nop.w
 8003500:	40400000 	.word	0x40400000
 8003504:	0801ae78 	.word	0x0801ae78
 8003508:	20000968 	.word	0x20000968
 800350c:	2000000c 	.word	0x2000000c
 8003510:	47ae147b 	.word	0x47ae147b
 8003514:	3fe47ae1 	.word	0x3fe47ae1

08003518 <scrollText>:


uint16_t scrollText(uint8_t *text,FontDef Font,uint8_t x,uint8_t y,uint8_t widthonscreen,uint16_t offset) {
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	1d38      	adds	r0, r7, #4
 8003522:	e880 0006 	stmia.w	r0, {r1, r2}
 8003526:	70fb      	strb	r3, [r7, #3]
    uint8_t text_len = strlen((char *)text);
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f7fc fea1 	bl	8000270 <strlen>
 800352e:	4603      	mov	r3, r0
 8003530:	77bb      	strb	r3, [r7, #30]
    uint16_t text_width = text_len * Font.FontWidth;
 8003532:	7fbb      	ldrb	r3, [r7, #30]
 8003534:	b29a      	uxth	r2, r3
 8003536:	793b      	ldrb	r3, [r7, #4]
 8003538:	b29b      	uxth	r3, r3
 800353a:	fb12 f303 	smulbb	r3, r2, r3
 800353e:	83bb      	strh	r3, [r7, #28]

        for (uint8_t i = x; i < widthonscreen; x++) {
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	76fb      	strb	r3, [r7, #27]
 8003544:	e016      	b.n	8003574 <scrollText+0x5c>
            for (uint8_t j = y; y < Font.FontHeight; y++) {
 8003546:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800354a:	74fb      	strb	r3, [r7, #19]
 800354c:	e00a      	b.n	8003564 <scrollText+0x4c>
                ssd1306_DrawPixel(i, j, Black);
 800354e:	7cf9      	ldrb	r1, [r7, #19]
 8003550:	7efb      	ldrb	r3, [r7, #27]
 8003552:	2200      	movs	r2, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fae5 	bl	8002b24 <ssd1306_DrawPixel>
            for (uint8_t j = y; y < Font.FontHeight; y++) {
 800355a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800355e:	3301      	adds	r3, #1
 8003560:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003564:	797b      	ldrb	r3, [r7, #5]
 8003566:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800356a:	429a      	cmp	r2, r3
 800356c:	d3ef      	bcc.n	800354e <scrollText+0x36>
        for (uint8_t i = x; i < widthonscreen; x++) {
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	3301      	adds	r3, #1
 8003572:	70fb      	strb	r3, [r7, #3]
 8003574:	7efa      	ldrb	r2, [r7, #27]
 8003576:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800357a:	429a      	cmp	r2, r3
 800357c:	d3e3      	bcc.n	8003546 <scrollText+0x2e>
            }
        }



        for (uint8_t i = 0; i < text_len; i++) {
 800357e:	2300      	movs	r3, #0
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	e02a      	b.n	80035da <scrollText+0xc2>
            int32_t char_x = x+widthonscreen + (i * Font.FontWidth) - offset;
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800358a:	441a      	add	r2, r3
 800358c:	7ffb      	ldrb	r3, [r7, #31]
 800358e:	7939      	ldrb	r1, [r7, #4]
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	441a      	add	r2, r3
 8003596:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	617b      	str	r3, [r7, #20]

            if (char_x >= x && char_x < x+widthonscreen) {
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	db17      	blt.n	80035d4 <scrollText+0xbc>
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80035aa:	4413      	add	r3, r2
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	da10      	bge.n	80035d4 <scrollText+0xbc>
                ssd1306_SetCursor(char_x, y);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fbb3 	bl	8002d28 <ssd1306_SetCursor>
                ssd1306_WriteChar(text[i], Font, White);
 80035c2:	7ffb      	ldrb	r3, [r7, #31]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	7818      	ldrb	r0, [r3, #0]
 80035ca:	2301      	movs	r3, #1
 80035cc:	1d3a      	adds	r2, r7, #4
 80035ce:	ca06      	ldmia	r2, {r1, r2}
 80035d0:	f7ff fafc 	bl	8002bcc <ssd1306_WriteChar>
        for (uint8_t i = 0; i < text_len; i++) {
 80035d4:	7ffb      	ldrb	r3, [r7, #31]
 80035d6:	3301      	adds	r3, #1
 80035d8:	77fb      	strb	r3, [r7, #31]
 80035da:	7ffa      	ldrb	r2, [r7, #31]
 80035dc:	7fbb      	ldrb	r3, [r7, #30]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d3d0      	bcc.n	8003584 <scrollText+0x6c>
        }
        }
        return text_width;
 80035e2:	8bbb      	ldrh	r3, [r7, #28]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	0000      	movs	r0, r0
	...

080035f0 <statemachine>:





void statemachine(void){
 80035f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f2:	ed2d 8b02 	vpush	{d8}
 80035f6:	b08b      	sub	sp, #44	; 0x2c
 80035f8:	af04      	add	r7, sp, #16
	switch(state){
 80035fa:	4bb7      	ldr	r3, [pc, #732]	; (80038d8 <statemachine+0x2e8>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b08      	cmp	r3, #8
 8003600:	f201 8781 	bhi.w	8005506 <statemachine+0x1f16>
 8003604:	a201      	add	r2, pc, #4	; (adr r2, 800360c <statemachine+0x1c>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	08003631 	.word	0x08003631
 8003610:	08003a2b 	.word	0x08003a2b
 8003614:	08003e93 	.word	0x08003e93
 8003618:	08004505 	.word	0x08004505
 800361c:	080045ef 	.word	0x080045ef
 8003620:	08004859 	.word	0x08004859
 8003624:	08004e13 	.word	0x08004e13
 8003628:	08005315 	.word	0x08005315
 800362c:	080053cb 	.word	0x080053cb
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8003630:	2000      	movs	r0, #0
 8003632:	f7ff fa37 	bl	8002aa4 <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 8003636:	2120      	movs	r1, #32
 8003638:	2020      	movs	r0, #32
 800363a:	f7ff fb75 	bl	8002d28 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 800363e:	49a7      	ldr	r1, [pc, #668]	; (80038dc <statemachine+0x2ec>)
 8003640:	48a7      	ldr	r0, [pc, #668]	; (80038e0 <statemachine+0x2f0>)
 8003642:	f7fe fd47 	bl	80020d4 <nmea_parse>
				 if(myData.speed>=vitmax){
 8003646:	4ba6      	ldr	r3, [pc, #664]	; (80038e0 <statemachine+0x2f0>)
 8003648:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800364c:	4ba5      	ldr	r3, [pc, #660]	; (80038e4 <statemachine+0x2f4>)
 800364e:	edd3 7a00 	vldr	s15, [r3]
 8003652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365a:	db03      	blt.n	8003664 <statemachine+0x74>
									 vitmax=myData.speed;
 800365c:	4ba0      	ldr	r3, [pc, #640]	; (80038e0 <statemachine+0x2f0>)
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	4aa0      	ldr	r2, [pc, #640]	; (80038e4 <statemachine+0x2f4>)
 8003662:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
								 float sec=0;
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	613b      	str	r3, [r7, #16]
								 if (myData.speed!=0){
 8003670:	4b9b      	ldr	r3, [pc, #620]	; (80038e0 <statemachine+0x2f0>)
 8003672:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003676:	eef5 7a40 	vcmp.f32	s15, #0.0
 800367a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367e:	d032      	beq.n	80036e6 <statemachine+0xf6>
									 pace=1000/(60*myData.speed);
 8003680:	4b97      	ldr	r3, [pc, #604]	; (80038e0 <statemachine+0x2f0>)
 8003682:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003686:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80038e8 <statemachine+0x2f8>
 800368a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800368e:	eddf 6a97 	vldr	s13, [pc, #604]	; 80038ec <statemachine+0x2fc>
 8003692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003696:	edc7 7a05 	vstr	s15, [r7, #20]
									 sec=(pace-floor(pace))*60;
 800369a:	6978      	ldr	r0, [r7, #20]
 800369c:	f7fc ff54 	bl	8000548 <__aeabi_f2d>
 80036a0:	4604      	mov	r4, r0
 80036a2:	460d      	mov	r5, r1
 80036a4:	6978      	ldr	r0, [r7, #20]
 80036a6:	f7fc ff4f 	bl	8000548 <__aeabi_f2d>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	ec43 2b10 	vmov	d0, r2, r3
 80036b2:	f015 ff4d 	bl	8019550 <floor>
 80036b6:	ec53 2b10 	vmov	r2, r3, d0
 80036ba:	4620      	mov	r0, r4
 80036bc:	4629      	mov	r1, r5
 80036be:	f7fc fde3 	bl	8000288 <__aeabi_dsub>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4610      	mov	r0, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	4b88      	ldr	r3, [pc, #544]	; (80038f0 <statemachine+0x300>)
 80036d0:	f7fc ff92 	bl	80005f8 <__aeabi_dmul>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4610      	mov	r0, r2
 80036da:	4619      	mov	r1, r3
 80036dc:	f7fd fa84 	bl	8000be8 <__aeabi_d2f>
 80036e0:	4603      	mov	r3, r0
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	e001      	b.n	80036ea <statemachine+0xfa>
								 }
								 else {
									 pace=9999;
 80036e6:	4b83      	ldr	r3, [pc, #524]	; (80038f4 <statemachine+0x304>)
 80036e8:	617b      	str	r3, [r7, #20]
								 }


				  switch(spdstate){
 80036ea:	4b83      	ldr	r3, [pc, #524]	; (80038f8 <statemachine+0x308>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	f000 8114 	beq.w	800391c <statemachine+0x32c>
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	f300 8151 	bgt.w	800399c <statemachine+0x3ac>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <statemachine+0x116>
 80036fe:	2b01      	cmp	r3, #1
 8003700:	f000 8082 	beq.w	8003808 <statemachine+0x218>
 8003704:	e14a      	b.n	800399c <statemachine+0x3ac>


				 case STATE_SUMMARY:

						snprintf((char *)bufferscreen,15, "MaxV=%.1f",vitmax*3.6);
 8003706:	4b77      	ldr	r3, [pc, #476]	; (80038e4 <statemachine+0x2f4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fc ff1c 	bl	8000548 <__aeabi_f2d>
 8003710:	a36d      	add	r3, pc, #436	; (adr r3, 80038c8 <statemachine+0x2d8>)
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	f7fc ff6f 	bl	80005f8 <__aeabi_dmul>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	e9cd 2300 	strd	r2, r3, [sp]
 8003722:	4a76      	ldr	r2, [pc, #472]	; (80038fc <statemachine+0x30c>)
 8003724:	210f      	movs	r1, #15
 8003726:	4876      	ldr	r0, [pc, #472]	; (8003900 <statemachine+0x310>)
 8003728:	f012 ffc8 	bl	80166bc <sniprintf>
						ssd1306_SetCursor(32, 32);
 800372c:	2120      	movs	r1, #32
 800372e:	2020      	movs	r0, #32
 8003730:	f7ff fafa 	bl	8002d28 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003734:	4a73      	ldr	r2, [pc, #460]	; (8003904 <statemachine+0x314>)
 8003736:	2301      	movs	r3, #1
 8003738:	ca06      	ldmia	r2, {r1, r2}
 800373a:	4871      	ldr	r0, [pc, #452]	; (8003900 <statemachine+0x310>)
 800373c:	f7ff face 	bl	8002cdc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "V=%0.1f",(myData.speed)*3.6);
 8003740:	4b67      	ldr	r3, [pc, #412]	; (80038e0 <statemachine+0x2f0>)
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	4618      	mov	r0, r3
 8003746:	f7fc feff 	bl	8000548 <__aeabi_f2d>
 800374a:	a35f      	add	r3, pc, #380	; (adr r3, 80038c8 <statemachine+0x2d8>)
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	f7fc ff52 	bl	80005f8 <__aeabi_dmul>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	e9cd 2300 	strd	r2, r3, [sp]
 800375c:	4a6a      	ldr	r2, [pc, #424]	; (8003908 <statemachine+0x318>)
 800375e:	210f      	movs	r1, #15
 8003760:	4867      	ldr	r0, [pc, #412]	; (8003900 <statemachine+0x310>)
 8003762:	f012 ffab 	bl	80166bc <sniprintf>
						ssd1306_SetCursor(32, 42);
 8003766:	212a      	movs	r1, #42	; 0x2a
 8003768:	2020      	movs	r0, #32
 800376a:	f7ff fadd 	bl	8002d28 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800376e:	4a65      	ldr	r2, [pc, #404]	; (8003904 <statemachine+0x314>)
 8003770:	2301      	movs	r3, #1
 8003772:	ca06      	ldmia	r2, {r1, r2}
 8003774:	4862      	ldr	r0, [pc, #392]	; (8003900 <statemachine+0x310>)
 8003776:	f7ff fab1 	bl	8002cdc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "p=%0.0fmin%0.0f s",floor(pace),floor(sec));
 800377a:	6978      	ldr	r0, [r7, #20]
 800377c:	f7fc fee4 	bl	8000548 <__aeabi_f2d>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	ec43 2b10 	vmov	d0, r2, r3
 8003788:	f015 fee2 	bl	8019550 <floor>
 800378c:	eeb0 8a40 	vmov.f32	s16, s0
 8003790:	eef0 8a60 	vmov.f32	s17, s1
 8003794:	6938      	ldr	r0, [r7, #16]
 8003796:	f7fc fed7 	bl	8000548 <__aeabi_f2d>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	ec43 2b10 	vmov	d0, r2, r3
 80037a2:	f015 fed5 	bl	8019550 <floor>
 80037a6:	eeb0 7a40 	vmov.f32	s14, s0
 80037aa:	eef0 7a60 	vmov.f32	s15, s1
 80037ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80037b2:	ed8d 8b00 	vstr	d8, [sp]
 80037b6:	4a55      	ldr	r2, [pc, #340]	; (800390c <statemachine+0x31c>)
 80037b8:	210f      	movs	r1, #15
 80037ba:	4851      	ldr	r0, [pc, #324]	; (8003900 <statemachine+0x310>)
 80037bc:	f012 ff7e 	bl	80166bc <sniprintf>
						ssd1306_SetCursor(32, 52);
 80037c0:	2134      	movs	r1, #52	; 0x34
 80037c2:	2020      	movs	r0, #32
 80037c4:	f7ff fab0 	bl	8002d28 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80037c8:	4a4e      	ldr	r2, [pc, #312]	; (8003904 <statemachine+0x314>)
 80037ca:	2301      	movs	r3, #1
 80037cc:	ca06      	ldmia	r2, {r1, r2}
 80037ce:	484c      	ldr	r0, [pc, #304]	; (8003900 <statemachine+0x310>)
 80037d0:	f7ff fa84 	bl	8002cdc <ssd1306_WriteString>



					 if(BTN_B>=1){
 80037d4:	4b4e      	ldr	r3, [pc, #312]	; (8003910 <statemachine+0x320>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	dd08      	ble.n	80037ee <statemachine+0x1fe>
								spdstate++;
 80037dc:	4b46      	ldr	r3, [pc, #280]	; (80038f8 <statemachine+0x308>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	4b44      	ldr	r3, [pc, #272]	; (80038f8 <statemachine+0x308>)
 80037e6:	701a      	strb	r2, [r3, #0]
								BTN_B=0;
 80037e8:	4b49      	ldr	r3, [pc, #292]	; (8003910 <statemachine+0x320>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
					 					 				  	}
					 if(BTN_B_LONG>=1){
 80037ee:	4b49      	ldr	r3, [pc, #292]	; (8003914 <statemachine+0x324>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f340 80cd 	ble.w	8003992 <statemachine+0x3a2>
							  vitmax=0;
 80037f8:	4b3a      	ldr	r3, [pc, #232]	; (80038e4 <statemachine+0x2f4>)
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
							BTN_B_LONG=0;
 8003800:	4b44      	ldr	r3, [pc, #272]	; (8003914 <statemachine+0x324>)
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
						}



					 break;
 8003806:	e0c4      	b.n	8003992 <statemachine+0x3a2>
				 case STATE_COMPTEUR:


						snprintf((char *)bufferscreen,15, "V=%0.1f",(myData.speed)*3.6);
 8003808:	4b35      	ldr	r3, [pc, #212]	; (80038e0 <statemachine+0x2f0>)
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	4618      	mov	r0, r3
 800380e:	f7fc fe9b 	bl	8000548 <__aeabi_f2d>
 8003812:	a32d      	add	r3, pc, #180	; (adr r3, 80038c8 <statemachine+0x2d8>)
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	f7fc feee 	bl	80005f8 <__aeabi_dmul>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	e9cd 2300 	strd	r2, r3, [sp]
 8003824:	4a38      	ldr	r2, [pc, #224]	; (8003908 <statemachine+0x318>)
 8003826:	210f      	movs	r1, #15
 8003828:	4835      	ldr	r0, [pc, #212]	; (8003900 <statemachine+0x310>)
 800382a:	f012 ff47 	bl	80166bc <sniprintf>
						ssd1306_SetCursor(32, 54);
 800382e:	2136      	movs	r1, #54	; 0x36
 8003830:	2020      	movs	r0, #32
 8003832:	f7ff fa79 	bl	8002d28 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003836:	4a33      	ldr	r2, [pc, #204]	; (8003904 <statemachine+0x314>)
 8003838:	2301      	movs	r3, #1
 800383a:	ca06      	ldmia	r2, {r1, r2}
 800383c:	4830      	ldr	r0, [pc, #192]	; (8003900 <statemachine+0x310>)
 800383e:	f7ff fa4d 	bl	8002cdc <ssd1306_WriteString>
						ssd1306_DrawRectangle(32, 38, 95, 53, White);
 8003842:	2301      	movs	r3, #1
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	2335      	movs	r3, #53	; 0x35
 8003848:	225f      	movs	r2, #95	; 0x5f
 800384a:	2126      	movs	r1, #38	; 0x26
 800384c:	2020      	movs	r0, #32
 800384e:	f7ff fb76 	bl	8002f3e <ssd1306_DrawRectangle>
						ssd1306_FillRectangle(32, 38,(int) floor(32+(myData.speed*0.63)), 53, White);
 8003852:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <statemachine+0x2f0>)
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	4618      	mov	r0, r3
 8003858:	f7fc fe76 	bl	8000548 <__aeabi_f2d>
 800385c:	a31c      	add	r3, pc, #112	; (adr r3, 80038d0 <statemachine+0x2e0>)
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	f7fc fec9 	bl	80005f8 <__aeabi_dmul>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4610      	mov	r0, r2
 800386c:	4619      	mov	r1, r3
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	4b29      	ldr	r3, [pc, #164]	; (8003918 <statemachine+0x328>)
 8003874:	f7fc fd0a 	bl	800028c <__adddf3>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	ec43 2b17 	vmov	d7, r2, r3
 8003880:	eeb0 0a47 	vmov.f32	s0, s14
 8003884:	eef0 0a67 	vmov.f32	s1, s15
 8003888:	f015 fe62 	bl	8019550 <floor>
 800388c:	ec53 2b10 	vmov	r2, r3, d0
 8003890:	4610      	mov	r0, r2
 8003892:	4619      	mov	r1, r3
 8003894:	f7fd f960 	bl	8000b58 <__aeabi_d2iz>
 8003898:	4603      	mov	r3, r0
 800389a:	b2da      	uxtb	r2, r3
 800389c:	2301      	movs	r3, #1
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2335      	movs	r3, #53	; 0x35
 80038a2:	2126      	movs	r1, #38	; 0x26
 80038a4:	2020      	movs	r0, #32
 80038a6:	f7ff fb81 	bl	8002fac <ssd1306_FillRectangle>



					 if(BTN_B>=1){
 80038aa:	4b19      	ldr	r3, [pc, #100]	; (8003910 <statemachine+0x320>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	dd71      	ble.n	8003996 <statemachine+0x3a6>
							spdstate++;
 80038b2:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <statemachine+0x308>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	3301      	adds	r3, #1
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <statemachine+0x308>)
 80038bc:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 80038be:	4b14      	ldr	r3, [pc, #80]	; (8003910 <statemachine+0x320>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
					 				  	}
					 break;
 80038c4:	e067      	b.n	8003996 <statemachine+0x3a6>
 80038c6:	bf00      	nop
 80038c8:	cccccccd 	.word	0xcccccccd
 80038cc:	400ccccc 	.word	0x400ccccc
 80038d0:	c28f5c29 	.word	0xc28f5c29
 80038d4:	3fe428f5 	.word	0x3fe428f5
 80038d8:	20000478 	.word	0x20000478
 80038dc:	200004c4 	.word	0x200004c4
 80038e0:	200006c8 	.word	0x200006c8
 80038e4:	20000ae0 	.word	0x20000ae0
 80038e8:	42700000 	.word	0x42700000
 80038ec:	447a0000 	.word	0x447a0000
 80038f0:	404e0000 	.word	0x404e0000
 80038f4:	461c3c00 	.word	0x461c3c00
 80038f8:	2000047a 	.word	0x2000047a
 80038fc:	0801ae84 	.word	0x0801ae84
 8003900:	20000968 	.word	0x20000968
 8003904:	2000000c 	.word	0x2000000c
 8003908:	0801ae90 	.word	0x0801ae90
 800390c:	0801ae98 	.word	0x0801ae98
 8003910:	2000070c 	.word	0x2000070c
 8003914:	20000b4c 	.word	0x20000b4c
 8003918:	40400000 	.word	0x40400000
				 case STATE_GRAPH:


						ssd1306_SetCursor(32, 32);
 800391c:	2120      	movs	r1, #32
 800391e:	2020      	movs	r0, #32
 8003920:	f7ff fa02 	bl	8002d28 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(myData.speed)*3.6);
 8003924:	4b7a      	ldr	r3, [pc, #488]	; (8003b10 <statemachine+0x520>)
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	4618      	mov	r0, r3
 800392a:	f7fc fe0d 	bl	8000548 <__aeabi_f2d>
 800392e:	a376      	add	r3, pc, #472	; (adr r3, 8003b08 <statemachine+0x518>)
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f7fc fe60 	bl	80005f8 <__aeabi_dmul>
 8003938:	4602      	mov	r2, r0
 800393a:	460b      	mov	r3, r1
 800393c:	e9cd 2300 	strd	r2, r3, [sp]
 8003940:	4a74      	ldr	r2, [pc, #464]	; (8003b14 <statemachine+0x524>)
 8003942:	210f      	movs	r1, #15
 8003944:	4874      	ldr	r0, [pc, #464]	; (8003b18 <statemachine+0x528>)
 8003946:	f012 feb9 	bl	80166bc <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_11x18, White);
 800394a:	4a74      	ldr	r2, [pc, #464]	; (8003b1c <statemachine+0x52c>)
 800394c:	2301      	movs	r3, #1
 800394e:	ca06      	ldmia	r2, {r1, r2}
 8003950:	4871      	ldr	r0, [pc, #452]	; (8003b18 <statemachine+0x528>)
 8003952:	f7ff f9c3 	bl	8002cdc <ssd1306_WriteString>
						batterygauge(vbat,35, 54,1);
 8003956:	4b72      	ldr	r3, [pc, #456]	; (8003b20 <statemachine+0x530>)
 8003958:	edd3 7a00 	vldr	s15, [r3]
 800395c:	2201      	movs	r2, #1
 800395e:	2136      	movs	r1, #54	; 0x36
 8003960:	2023      	movs	r0, #35	; 0x23
 8003962:	eeb0 0a67 	vmov.f32	s0, s15
 8003966:	f7ff fbfb 	bl	8003160 <batterygauge>

					 if(BTN_B>=1){
 800396a:	4b6e      	ldr	r3, [pc, #440]	; (8003b24 <statemachine+0x534>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	dd13      	ble.n	800399a <statemachine+0x3aa>
							spdstate--;
 8003972:	4b6d      	ldr	r3, [pc, #436]	; (8003b28 <statemachine+0x538>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	3b01      	subs	r3, #1
 8003978:	b2da      	uxtb	r2, r3
 800397a:	4b6b      	ldr	r3, [pc, #428]	; (8003b28 <statemachine+0x538>)
 800397c:	701a      	strb	r2, [r3, #0]
							spdstate--;
 800397e:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <statemachine+0x538>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	3b01      	subs	r3, #1
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4b68      	ldr	r3, [pc, #416]	; (8003b28 <statemachine+0x538>)
 8003988:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 800398a:	4b66      	ldr	r3, [pc, #408]	; (8003b24 <statemachine+0x534>)
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]


					 					 				  	}
					 break;
 8003990:	e003      	b.n	800399a <statemachine+0x3aa>
					 break;
 8003992:	bf00      	nop
 8003994:	e002      	b.n	800399c <statemachine+0x3ac>
					 break;
 8003996:	bf00      	nop
 8003998:	e000      	b.n	800399c <statemachine+0x3ac>
					 break;
 800399a:	bf00      	nop


				 }
				 	if(BTN_A>=1){
 800399c:	4b63      	ldr	r3, [pc, #396]	; (8003b2c <statemachine+0x53c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	dd0b      	ble.n	80039bc <statemachine+0x3cc>
				 					state++;
 80039a4:	4b62      	ldr	r3, [pc, #392]	; (8003b30 <statemachine+0x540>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	3301      	adds	r3, #1
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	4b60      	ldr	r3, [pc, #384]	; (8003b30 <statemachine+0x540>)
 80039ae:	701a      	strb	r2, [r3, #0]
				 					BTN_A=0;
 80039b0:	4b5e      	ldr	r3, [pc, #376]	; (8003b2c <statemachine+0x53c>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
				 					BTN_B=0;
 80039b6:	4b5b      	ldr	r3, [pc, #364]	; (8003b24 <statemachine+0x534>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
				  	}
				 	 if(BTN_A_LONG>=1){
 80039bc:	4b5d      	ldr	r3, [pc, #372]	; (8003b34 <statemachine+0x544>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f341 858e 	ble.w	80054e2 <statemachine+0x1ef2>
				 						 				 									state++;
 80039c6:	4b5a      	ldr	r3, [pc, #360]	; (8003b30 <statemachine+0x540>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	3301      	adds	r3, #1
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	4b58      	ldr	r3, [pc, #352]	; (8003b30 <statemachine+0x540>)
 80039d0:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 80039d2:	4b57      	ldr	r3, [pc, #348]	; (8003b30 <statemachine+0x540>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	3301      	adds	r3, #1
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4b55      	ldr	r3, [pc, #340]	; (8003b30 <statemachine+0x540>)
 80039dc:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 80039de:	4b54      	ldr	r3, [pc, #336]	; (8003b30 <statemachine+0x540>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	4b52      	ldr	r3, [pc, #328]	; (8003b30 <statemachine+0x540>)
 80039e8:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 80039ea:	4b51      	ldr	r3, [pc, #324]	; (8003b30 <statemachine+0x540>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	3301      	adds	r3, #1
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4b4f      	ldr	r3, [pc, #316]	; (8003b30 <statemachine+0x540>)
 80039f4:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 80039f6:	4b4e      	ldr	r3, [pc, #312]	; (8003b30 <statemachine+0x540>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	3301      	adds	r3, #1
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	4b4c      	ldr	r3, [pc, #304]	; (8003b30 <statemachine+0x540>)
 8003a00:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8003a02:	4b4b      	ldr	r3, [pc, #300]	; (8003b30 <statemachine+0x540>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	3301      	adds	r3, #1
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <statemachine+0x540>)
 8003a0c:	701a      	strb	r2, [r3, #0]
				 						 				 									state++;
 8003a0e:	4b48      	ldr	r3, [pc, #288]	; (8003b30 <statemachine+0x540>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	3301      	adds	r3, #1
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	4b46      	ldr	r3, [pc, #280]	; (8003b30 <statemachine+0x540>)
 8003a18:	701a      	strb	r2, [r3, #0]
				 						 				 									  			 	BTN_A_LONG=0;
 8003a1a:	4b46      	ldr	r3, [pc, #280]	; (8003b34 <statemachine+0x544>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
				 						 				 									  			 	BTN_B=0;
 8003a20:	4b40      	ldr	r3, [pc, #256]	; (8003b24 <statemachine+0x534>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
				 						 				 									  	}
				  break;
 8003a26:	f001 bd5c 	b.w	80054e2 <statemachine+0x1ef2>


	case STATE_POS:
			  ssd1306_Fill(Black);
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f7ff f83a 	bl	8002aa4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003a30:	4941      	ldr	r1, [pc, #260]	; (8003b38 <statemachine+0x548>)
 8003a32:	4837      	ldr	r0, [pc, #220]	; (8003b10 <statemachine+0x520>)
 8003a34:	f7fe fb4e 	bl	80020d4 <nmea_parse>
			  switch(posstate){
 8003a38:	4b40      	ldr	r3, [pc, #256]	; (8003b3c <statemachine+0x54c>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	f200 8202 	bhi.w	8003e46 <statemachine+0x856>
 8003a42:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <statemachine+0x458>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a59 	.word	0x08003a59
 8003a4c:	08003b51 	.word	0x08003b51
 8003a50:	08003c0f 	.word	0x08003c0f
 8003a54:	08003ccd 	.word	0x08003ccd

			  case STATE_SUMMARY1:

						ssd1306_SetCursor(32, 32);
 8003a58:	2120      	movs	r1, #32
 8003a5a:	2020      	movs	r0, #32
 8003a5c:	f7ff f964 	bl	8002d28 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 8003a60:	4a37      	ldr	r2, [pc, #220]	; (8003b40 <statemachine+0x550>)
 8003a62:	210f      	movs	r1, #15
 8003a64:	482c      	ldr	r0, [pc, #176]	; (8003b18 <statemachine+0x528>)
 8003a66:	f012 fe29 	bl	80166bc <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003a6a:	4a36      	ldr	r2, [pc, #216]	; (8003b44 <statemachine+0x554>)
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	ca06      	ldmia	r2, {r1, r2}
 8003a70:	4829      	ldr	r0, [pc, #164]	; (8003b18 <statemachine+0x528>)
 8003a72:	f7ff f933 	bl	8002cdc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003a76:	4b26      	ldr	r3, [pc, #152]	; (8003b10 <statemachine+0x520>)
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	e9cd 2300 	strd	r2, r3, [sp]
 8003a80:	4a31      	ldr	r2, [pc, #196]	; (8003b48 <statemachine+0x558>)
 8003a82:	210f      	movs	r1, #15
 8003a84:	4824      	ldr	r0, [pc, #144]	; (8003b18 <statemachine+0x528>)
 8003a86:	f012 fe19 	bl	80166bc <sniprintf>
						ssd1306_SetCursor(32, 40);
 8003a8a:	2128      	movs	r1, #40	; 0x28
 8003a8c:	2020      	movs	r0, #32
 8003a8e:	f7ff f94b 	bl	8002d28 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003a92:	4a2c      	ldr	r2, [pc, #176]	; (8003b44 <statemachine+0x554>)
 8003a94:	2301      	movs	r3, #1
 8003a96:	ca06      	ldmia	r2, {r1, r2}
 8003a98:	481f      	ldr	r0, [pc, #124]	; (8003b18 <statemachine+0x528>)
 8003a9a:	f7ff f91f 	bl	8002cdc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 8003a9e:	4a2b      	ldr	r2, [pc, #172]	; (8003b4c <statemachine+0x55c>)
 8003aa0:	210f      	movs	r1, #15
 8003aa2:	481d      	ldr	r0, [pc, #116]	; (8003b18 <statemachine+0x528>)
 8003aa4:	f012 fe0a 	bl	80166bc <sniprintf>
						ssd1306_SetCursor(32, 48);
 8003aa8:	2130      	movs	r1, #48	; 0x30
 8003aaa:	2020      	movs	r0, #32
 8003aac:	f7ff f93c 	bl	8002d28 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003ab0:	4a24      	ldr	r2, [pc, #144]	; (8003b44 <statemachine+0x554>)
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	ca06      	ldmia	r2, {r1, r2}
 8003ab6:	4818      	ldr	r0, [pc, #96]	; (8003b18 <statemachine+0x528>)
 8003ab8:	f7ff f910 	bl	8002cdc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8003abc:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <statemachine+0x520>)
 8003abe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003ac2:	e9cd 2300 	strd	r2, r3, [sp]
 8003ac6:	4a20      	ldr	r2, [pc, #128]	; (8003b48 <statemachine+0x558>)
 8003ac8:	210f      	movs	r1, #15
 8003aca:	4813      	ldr	r0, [pc, #76]	; (8003b18 <statemachine+0x528>)
 8003acc:	f012 fdf6 	bl	80166bc <sniprintf>
						ssd1306_SetCursor(32, 56);
 8003ad0:	2138      	movs	r1, #56	; 0x38
 8003ad2:	2020      	movs	r0, #32
 8003ad4:	f7ff f928 	bl	8002d28 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003ad8:	4a1a      	ldr	r2, [pc, #104]	; (8003b44 <statemachine+0x554>)
 8003ada:	2301      	movs	r3, #1
 8003adc:	ca06      	ldmia	r2, {r1, r2}
 8003ade:	480e      	ldr	r0, [pc, #56]	; (8003b18 <statemachine+0x528>)
 8003ae0:	f7ff f8fc 	bl	8002cdc <ssd1306_WriteString>
				  if(BTN_B>=1){
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <statemachine+0x534>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f340 817e 	ble.w	8003dea <statemachine+0x7fa>
					  posstate++;
 8003aee:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <statemachine+0x54c>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	3301      	adds	r3, #1
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <statemachine+0x54c>)
 8003af8:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <statemachine+0x534>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]





				  break;
 8003b00:	e173      	b.n	8003dea <statemachine+0x7fa>
 8003b02:	bf00      	nop
 8003b04:	f3af 8000 	nop.w
 8003b08:	cccccccd 	.word	0xcccccccd
 8003b0c:	400ccccc 	.word	0x400ccccc
 8003b10:	200006c8 	.word	0x200006c8
 8003b14:	0801aeac 	.word	0x0801aeac
 8003b18:	20000968 	.word	0x20000968
 8003b1c:	2000001c 	.word	0x2000001c
 8003b20:	20000740 	.word	0x20000740
 8003b24:	2000070c 	.word	0x2000070c
 8003b28:	2000047a 	.word	0x2000047a
 8003b2c:	20000708 	.word	0x20000708
 8003b30:	20000478 	.word	0x20000478
 8003b34:	20000b50 	.word	0x20000b50
 8003b38:	200004c4 	.word	0x200004c4
 8003b3c:	2000047b 	.word	0x2000047b
 8003b40:	0801aeb4 	.word	0x0801aeb4
 8003b44:	2000000c 	.word	0x2000000c
 8003b48:	0801aec0 	.word	0x0801aec0
 8003b4c:	0801aec8 	.word	0x0801aec8
			  case STATE_LAT:
						ssd1306_SetCursor(32, 32);
 8003b50:	2120      	movs	r1, #32
 8003b52:	2020      	movs	r0, #32
 8003b54:	f7ff f8e8 	bl	8002d28 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "LatSide:");
 8003b58:	4aa9      	ldr	r2, [pc, #676]	; (8003e00 <statemachine+0x810>)
 8003b5a:	210f      	movs	r1, #15
 8003b5c:	48a9      	ldr	r0, [pc, #676]	; (8003e04 <statemachine+0x814>)
 8003b5e:	f012 fdad 	bl	80166bc <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003b62:	4aa9      	ldr	r2, [pc, #676]	; (8003e08 <statemachine+0x818>)
 8003b64:	2301      	movs	r3, #1
 8003b66:	ca06      	ldmia	r2, {r1, r2}
 8003b68:	48a6      	ldr	r0, [pc, #664]	; (8003e04 <statemachine+0x814>)
 8003b6a:	f7ff f8b7 	bl	8002cdc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003b6e:	4ba7      	ldr	r3, [pc, #668]	; (8003e0c <statemachine+0x81c>)
 8003b70:	7a1b      	ldrb	r3, [r3, #8]
 8003b72:	4aa7      	ldr	r2, [pc, #668]	; (8003e10 <statemachine+0x820>)
 8003b74:	210f      	movs	r1, #15
 8003b76:	48a3      	ldr	r0, [pc, #652]	; (8003e04 <statemachine+0x814>)
 8003b78:	f012 fda0 	bl	80166bc <sniprintf>
						ssd1306_SetCursor(32, 40);
 8003b7c:	2128      	movs	r1, #40	; 0x28
 8003b7e:	2020      	movs	r0, #32
 8003b80:	f7ff f8d2 	bl	8002d28 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003b84:	4aa0      	ldr	r2, [pc, #640]	; (8003e08 <statemachine+0x818>)
 8003b86:	2301      	movs	r3, #1
 8003b88:	ca06      	ldmia	r2, {r1, r2}
 8003b8a:	489e      	ldr	r0, [pc, #632]	; (8003e04 <statemachine+0x814>)
 8003b8c:	f7ff f8a6 	bl	8002cdc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Latitude:");
 8003b90:	4aa0      	ldr	r2, [pc, #640]	; (8003e14 <statemachine+0x824>)
 8003b92:	210f      	movs	r1, #15
 8003b94:	489b      	ldr	r0, [pc, #620]	; (8003e04 <statemachine+0x814>)
 8003b96:	f012 fd91 	bl	80166bc <sniprintf>
						ssd1306_SetCursor(32, 48);
 8003b9a:	2130      	movs	r1, #48	; 0x30
 8003b9c:	2020      	movs	r0, #32
 8003b9e:	f7ff f8c3 	bl	8002d28 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003ba2:	4a99      	ldr	r2, [pc, #612]	; (8003e08 <statemachine+0x818>)
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	ca06      	ldmia	r2, {r1, r2}
 8003ba8:	4896      	ldr	r0, [pc, #600]	; (8003e04 <statemachine+0x814>)
 8003baa:	f7ff f897 	bl	8002cdc <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);
 8003bae:	4b97      	ldr	r3, [pc, #604]	; (8003e0c <statemachine+0x81c>)
 8003bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb4:	e9cd 2300 	strd	r2, r3, [sp]
 8003bb8:	4a97      	ldr	r2, [pc, #604]	; (8003e18 <statemachine+0x828>)
 8003bba:	210f      	movs	r1, #15
 8003bbc:	4891      	ldr	r0, [pc, #580]	; (8003e04 <statemachine+0x814>)
 8003bbe:	f012 fd7d 	bl	80166bc <sniprintf>
						ssd1306_SetCursor(32, 56);
 8003bc2:	2138      	movs	r1, #56	; 0x38
 8003bc4:	2020      	movs	r0, #32
 8003bc6:	f7ff f8af 	bl	8002d28 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003bca:	4a8f      	ldr	r2, [pc, #572]	; (8003e08 <statemachine+0x818>)
 8003bcc:	2301      	movs	r3, #1
 8003bce:	ca06      	ldmia	r2, {r1, r2}
 8003bd0:	488c      	ldr	r0, [pc, #560]	; (8003e04 <statemachine+0x814>)
 8003bd2:	f7ff f883 	bl	8002cdc <ssd1306_WriteString>


				  if(BTN_B>=1){
 8003bd6:	4b91      	ldr	r3, [pc, #580]	; (8003e1c <statemachine+0x82c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	dd08      	ble.n	8003bf0 <statemachine+0x600>
				  					  posstate++;
 8003bde:	4b90      	ldr	r3, [pc, #576]	; (8003e20 <statemachine+0x830>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	4b8e      	ldr	r3, [pc, #568]	; (8003e20 <statemachine+0x830>)
 8003be8:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8003bea:	4b8c      	ldr	r3, [pc, #560]	; (8003e1c <statemachine+0x82c>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8003bf0:	4b8c      	ldr	r3, [pc, #560]	; (8003e24 <statemachine+0x834>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f340 80fa 	ble.w	8003dee <statemachine+0x7fe>
									  posstate--;
 8003bfa:	4b89      	ldr	r3, [pc, #548]	; (8003e20 <statemachine+0x830>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	4b87      	ldr	r3, [pc, #540]	; (8003e20 <statemachine+0x830>)
 8003c04:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8003c06:	4b87      	ldr	r3, [pc, #540]	; (8003e24 <statemachine+0x834>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
								}



				  break;
 8003c0c:	e0ef      	b.n	8003dee <statemachine+0x7fe>
			  case STATE_LONG:

					ssd1306_SetCursor(32, 32);
 8003c0e:	2120      	movs	r1, #32
 8003c10:	2020      	movs	r0, #32
 8003c12:	f7ff f889 	bl	8002d28 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "LonSide:");
 8003c16:	4a84      	ldr	r2, [pc, #528]	; (8003e28 <statemachine+0x838>)
 8003c18:	210f      	movs	r1, #15
 8003c1a:	487a      	ldr	r0, [pc, #488]	; (8003e04 <statemachine+0x814>)
 8003c1c:	f012 fd4e 	bl	80166bc <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003c20:	4a79      	ldr	r2, [pc, #484]	; (8003e08 <statemachine+0x818>)
 8003c22:	2301      	movs	r3, #1
 8003c24:	ca06      	ldmia	r2, {r1, r2}
 8003c26:	4877      	ldr	r0, [pc, #476]	; (8003e04 <statemachine+0x814>)
 8003c28:	f7ff f858 	bl	8002cdc <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003c2c:	4b77      	ldr	r3, [pc, #476]	; (8003e0c <statemachine+0x81c>)
 8003c2e:	7e1b      	ldrb	r3, [r3, #24]
 8003c30:	4a77      	ldr	r2, [pc, #476]	; (8003e10 <statemachine+0x820>)
 8003c32:	210f      	movs	r1, #15
 8003c34:	4873      	ldr	r0, [pc, #460]	; (8003e04 <statemachine+0x814>)
 8003c36:	f012 fd41 	bl	80166bc <sniprintf>
					ssd1306_SetCursor(32, 40);
 8003c3a:	2128      	movs	r1, #40	; 0x28
 8003c3c:	2020      	movs	r0, #32
 8003c3e:	f7ff f873 	bl	8002d28 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003c42:	4a71      	ldr	r2, [pc, #452]	; (8003e08 <statemachine+0x818>)
 8003c44:	2301      	movs	r3, #1
 8003c46:	ca06      	ldmia	r2, {r1, r2}
 8003c48:	486e      	ldr	r0, [pc, #440]	; (8003e04 <statemachine+0x814>)
 8003c4a:	f7ff f847 	bl	8002cdc <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "Longitude:");
 8003c4e:	4a77      	ldr	r2, [pc, #476]	; (8003e2c <statemachine+0x83c>)
 8003c50:	210f      	movs	r1, #15
 8003c52:	486c      	ldr	r0, [pc, #432]	; (8003e04 <statemachine+0x814>)
 8003c54:	f012 fd32 	bl	80166bc <sniprintf>
					ssd1306_SetCursor(32, 48);
 8003c58:	2130      	movs	r1, #48	; 0x30
 8003c5a:	2020      	movs	r0, #32
 8003c5c:	f7ff f864 	bl	8002d28 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003c60:	4a69      	ldr	r2, [pc, #420]	; (8003e08 <statemachine+0x818>)
 8003c62:	2301      	movs	r3, #1
 8003c64:	ca06      	ldmia	r2, {r1, r2}
 8003c66:	4867      	ldr	r0, [pc, #412]	; (8003e04 <statemachine+0x814>)
 8003c68:	f7ff f838 	bl	8002cdc <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8003c6c:	4b67      	ldr	r3, [pc, #412]	; (8003e0c <statemachine+0x81c>)
 8003c6e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c72:	e9cd 2300 	strd	r2, r3, [sp]
 8003c76:	4a68      	ldr	r2, [pc, #416]	; (8003e18 <statemachine+0x828>)
 8003c78:	210f      	movs	r1, #15
 8003c7a:	4862      	ldr	r0, [pc, #392]	; (8003e04 <statemachine+0x814>)
 8003c7c:	f012 fd1e 	bl	80166bc <sniprintf>
					ssd1306_SetCursor(32, 56);
 8003c80:	2138      	movs	r1, #56	; 0x38
 8003c82:	2020      	movs	r0, #32
 8003c84:	f7ff f850 	bl	8002d28 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003c88:	4a5f      	ldr	r2, [pc, #380]	; (8003e08 <statemachine+0x818>)
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	ca06      	ldmia	r2, {r1, r2}
 8003c8e:	485d      	ldr	r0, [pc, #372]	; (8003e04 <statemachine+0x814>)
 8003c90:	f7ff f824 	bl	8002cdc <ssd1306_WriteString>

				  if(BTN_B>=1){
 8003c94:	4b61      	ldr	r3, [pc, #388]	; (8003e1c <statemachine+0x82c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	dd08      	ble.n	8003cae <statemachine+0x6be>
				  					  posstate++;
 8003c9c:	4b60      	ldr	r3, [pc, #384]	; (8003e20 <statemachine+0x830>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	4b5e      	ldr	r3, [pc, #376]	; (8003e20 <statemachine+0x830>)
 8003ca6:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8003ca8:	4b5c      	ldr	r3, [pc, #368]	; (8003e1c <statemachine+0x82c>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8003cae:	4b5d      	ldr	r3, [pc, #372]	; (8003e24 <statemachine+0x834>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f340 809d 	ble.w	8003df2 <statemachine+0x802>
									  posstate--;
 8003cb8:	4b59      	ldr	r3, [pc, #356]	; (8003e20 <statemachine+0x830>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	4b57      	ldr	r3, [pc, #348]	; (8003e20 <statemachine+0x830>)
 8003cc2:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8003cc4:	4b57      	ldr	r3, [pc, #348]	; (8003e24 <statemachine+0x834>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]
								}

				  break;
 8003cca:	e092      	b.n	8003df2 <statemachine+0x802>
			  case STATE_ALT:


				  						ssd1306_SetCursor(32, 32);
 8003ccc:	2120      	movs	r1, #32
 8003cce:	2020      	movs	r0, #32
 8003cd0:	f7ff f82a 	bl	8002d28 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 8003cd4:	4a56      	ldr	r2, [pc, #344]	; (8003e30 <statemachine+0x840>)
 8003cd6:	210f      	movs	r1, #15
 8003cd8:	484a      	ldr	r0, [pc, #296]	; (8003e04 <statemachine+0x814>)
 8003cda:	f012 fcef 	bl	80166bc <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003cde:	4a4a      	ldr	r2, [pc, #296]	; (8003e08 <statemachine+0x818>)
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	ca06      	ldmia	r2, {r1, r2}
 8003ce4:	4847      	ldr	r0, [pc, #284]	; (8003e04 <statemachine+0x814>)
 8003ce6:	f7fe fff9 	bl	8002cdc <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8003cea:	4b48      	ldr	r3, [pc, #288]	; (8003e0c <statemachine+0x81c>)
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fc fc2a 	bl	8000548 <__aeabi_f2d>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	e9cd 2300 	strd	r2, r3, [sp]
 8003cfc:	4a4d      	ldr	r2, [pc, #308]	; (8003e34 <statemachine+0x844>)
 8003cfe:	210f      	movs	r1, #15
 8003d00:	4840      	ldr	r0, [pc, #256]	; (8003e04 <statemachine+0x814>)
 8003d02:	f012 fcdb 	bl	80166bc <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 8003d06:	2128      	movs	r1, #40	; 0x28
 8003d08:	2020      	movs	r0, #32
 8003d0a:	f7ff f80d 	bl	8002d28 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003d0e:	4a3e      	ldr	r2, [pc, #248]	; (8003e08 <statemachine+0x818>)
 8003d10:	2301      	movs	r3, #1
 8003d12:	ca06      	ldmia	r2, {r1, r2}
 8003d14:	483b      	ldr	r0, [pc, #236]	; (8003e04 <statemachine+0x814>)
 8003d16:	f7fe ffe1 	bl	8002cdc <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Pressure:");
 8003d1a:	4a47      	ldr	r2, [pc, #284]	; (8003e38 <statemachine+0x848>)
 8003d1c:	210f      	movs	r1, #15
 8003d1e:	4839      	ldr	r0, [pc, #228]	; (8003e04 <statemachine+0x814>)
 8003d20:	f012 fccc 	bl	80166bc <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8003d24:	2130      	movs	r1, #48	; 0x30
 8003d26:	2020      	movs	r0, #32
 8003d28:	f7fe fffe 	bl	8002d28 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003d2c:	4a36      	ldr	r2, [pc, #216]	; (8003e08 <statemachine+0x818>)
 8003d2e:	2301      	movs	r3, #1
 8003d30:	ca06      	ldmia	r2, {r1, r2}
 8003d32:	4834      	ldr	r0, [pc, #208]	; (8003e04 <statemachine+0x814>)
 8003d34:	f7fe ffd2 	bl	8002cdc <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 8003d38:	4b34      	ldr	r3, [pc, #208]	; (8003e0c <statemachine+0x81c>)
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fc fc03 	bl	8000548 <__aeabi_f2d>
 8003d42:	a32d      	add	r3, pc, #180	; (adr r3, 8003df8 <statemachine+0x808>)
 8003d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d48:	f7fc fc56 	bl	80005f8 <__aeabi_dmul>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4610      	mov	r0, r2
 8003d52:	4619      	mov	r1, r3
 8003d54:	f7fc ff48 	bl	8000be8 <__aeabi_d2f>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	ee00 3a10 	vmov	s0, r3
 8003d5e:	f015 fb5b 	bl	8019418 <expf>
 8003d62:	eef0 7a40 	vmov.f32	s15, s0
 8003d66:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003e3c <statemachine+0x84c>
 8003d6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d6e:	ee17 0a90 	vmov	r0, s15
 8003d72:	f7fc fbe9 	bl	8000548 <__aeabi_f2d>
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	e9cd 2300 	strd	r2, r3, [sp]
 8003d7e:	4a30      	ldr	r2, [pc, #192]	; (8003e40 <statemachine+0x850>)
 8003d80:	210f      	movs	r1, #15
 8003d82:	4820      	ldr	r0, [pc, #128]	; (8003e04 <statemachine+0x814>)
 8003d84:	f012 fc9a 	bl	80166bc <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8003d88:	2138      	movs	r1, #56	; 0x38
 8003d8a:	2020      	movs	r0, #32
 8003d8c:	f7fe ffcc 	bl	8002d28 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003d90:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <statemachine+0x818>)
 8003d92:	2301      	movs	r3, #1
 8003d94:	ca06      	ldmia	r2, {r1, r2}
 8003d96:	481b      	ldr	r0, [pc, #108]	; (8003e04 <statemachine+0x814>)
 8003d98:	f7fe ffa0 	bl	8002cdc <ssd1306_WriteString>

				  if(BTN_B>=1){
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <statemachine+0x82c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	dd14      	ble.n	8003dce <statemachine+0x7de>
				  					posstate--;
 8003da4:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <statemachine+0x830>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <statemachine+0x830>)
 8003dae:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003db0:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <statemachine+0x830>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <statemachine+0x830>)
 8003dba:	701a      	strb	r2, [r3, #0]
				  					posstate--;
 8003dbc:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <statemachine+0x830>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	4b16      	ldr	r3, [pc, #88]	; (8003e20 <statemachine+0x830>)
 8003dc6:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8003dc8:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <statemachine+0x82c>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8003dce:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <statemachine+0x834>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	dd36      	ble.n	8003e44 <statemachine+0x854>
					  posstate--;
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <statemachine+0x830>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <statemachine+0x830>)
 8003de0:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 8003de2:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <statemachine+0x834>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
				}
				  break;
 8003de8:	e02c      	b.n	8003e44 <statemachine+0x854>
				  break;
 8003dea:	bf00      	nop
 8003dec:	e02b      	b.n	8003e46 <statemachine+0x856>
				  break;
 8003dee:	bf00      	nop
 8003df0:	e029      	b.n	8003e46 <statemachine+0x856>
				  break;
 8003df2:	bf00      	nop
 8003df4:	e027      	b.n	8003e46 <statemachine+0x856>
 8003df6:	bf00      	nop
 8003df8:	fb798882 	.word	0xfb798882
 8003dfc:	bf1e1818 	.word	0xbf1e1818
 8003e00:	0801aed4 	.word	0x0801aed4
 8003e04:	20000968 	.word	0x20000968
 8003e08:	2000000c 	.word	0x2000000c
 8003e0c:	200006c8 	.word	0x200006c8
 8003e10:	0801aee0 	.word	0x0801aee0
 8003e14:	0801aeb4 	.word	0x0801aeb4
 8003e18:	0801aec0 	.word	0x0801aec0
 8003e1c:	2000070c 	.word	0x2000070c
 8003e20:	2000047b 	.word	0x2000047b
 8003e24:	20000b4c 	.word	0x20000b4c
 8003e28:	0801aee4 	.word	0x0801aee4
 8003e2c:	0801aec8 	.word	0x0801aec8
 8003e30:	0801aef0 	.word	0x0801aef0
 8003e34:	0801aefc 	.word	0x0801aefc
 8003e38:	0801af04 	.word	0x0801af04
 8003e3c:	447a0000 	.word	0x447a0000
 8003e40:	0801af10 	.word	0x0801af10
				  break;
 8003e44:	bf00      	nop
			  }

					if(BTN_A>=1){
 8003e46:	4b5d      	ldr	r3, [pc, #372]	; (8003fbc <statemachine+0x9cc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	dd0b      	ble.n	8003e66 <statemachine+0x876>
							state++;
 8003e4e:	4b5c      	ldr	r3, [pc, #368]	; (8003fc0 <statemachine+0x9d0>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	3301      	adds	r3, #1
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	4b5a      	ldr	r3, [pc, #360]	; (8003fc0 <statemachine+0x9d0>)
 8003e58:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8003e5a:	4b58      	ldr	r3, [pc, #352]	; (8003fbc <statemachine+0x9cc>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8003e60:	4b58      	ldr	r3, [pc, #352]	; (8003fc4 <statemachine+0x9d4>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 8003e66:	4b58      	ldr	r3, [pc, #352]	; (8003fc8 <statemachine+0x9d8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f341 833b 	ble.w	80054e6 <statemachine+0x1ef6>
									 									 									  			 	state--;
 8003e70:	4b53      	ldr	r3, [pc, #332]	; (8003fc0 <statemachine+0x9d0>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	4b51      	ldr	r3, [pc, #324]	; (8003fc0 <statemachine+0x9d0>)
 8003e7a:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 8003e7c:	4b4f      	ldr	r3, [pc, #316]	; (8003fbc <statemachine+0x9cc>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 8003e82:	4b50      	ldr	r3, [pc, #320]	; (8003fc4 <statemachine+0x9d4>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 8003e88:	4b4f      	ldr	r3, [pc, #316]	; (8003fc8 <statemachine+0x9d8>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 8003e8e:	f001 bb2a 	b.w	80054e6 <statemachine+0x1ef6>

		  case STATE_HEURE:
			  ssd1306_Fill(Black);
 8003e92:	2000      	movs	r0, #0
 8003e94:	f7fe fe06 	bl	8002aa4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8003e98:	494c      	ldr	r1, [pc, #304]	; (8003fcc <statemachine+0x9dc>)
 8003e9a:	484d      	ldr	r0, [pc, #308]	; (8003fd0 <statemachine+0x9e0>)
 8003e9c:	f7fe f91a 	bl	80020d4 <nmea_parse>
			  if(settimeen==0){
 8003ea0:	4b4c      	ldr	r3, [pc, #304]	; (8003fd4 <statemachine+0x9e4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d141      	bne.n	8003f2c <statemachine+0x93c>

							settimeen=1;
 8003ea8:	4b4a      	ldr	r3, [pc, #296]	; (8003fd4 <statemachine+0x9e4>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8003eae:	4b48      	ldr	r3, [pc, #288]	; (8003fd0 <statemachine+0x9e0>)
 8003eb0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	461a      	mov	r2, r3
 8003ebc:	0092      	lsls	r2, r2, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	4b42      	ldr	r3, [pc, #264]	; (8003fd0 <statemachine+0x9e0>)
 8003ec6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	4b40      	ldr	r3, [pc, #256]	; (8003fd8 <statemachine+0x9e8>)
 8003ed6:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8003ed8:	4b3d      	ldr	r3, [pc, #244]	; (8003fd0 <statemachine+0x9e0>)
 8003eda:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	0092      	lsls	r2, r2, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4b38      	ldr	r3, [pc, #224]	; (8003fd0 <statemachine+0x9e0>)
 8003ef0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	4b37      	ldr	r3, [pc, #220]	; (8003fdc <statemachine+0x9ec>)
 8003f00:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8003f02:	4b33      	ldr	r3, [pc, #204]	; (8003fd0 <statemachine+0x9e0>)
 8003f04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	0092      	lsls	r2, r2, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	4b2d      	ldr	r3, [pc, #180]	; (8003fd0 <statemachine+0x9e0>)
 8003f1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	4413      	add	r3, r2
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	4b2d      	ldr	r3, [pc, #180]	; (8003fe0 <statemachine+0x9f0>)
 8003f2a:	701a      	strb	r2, [r3, #0]


					  }


				  ssd1306_SetCursor(32, 32);
 8003f2c:	2120      	movs	r1, #32
 8003f2e:	2020      	movs	r0, #32
 8003f30:	f7fe fefa 	bl	8002d28 <ssd1306_SetCursor>
				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 8003f34:	4a2b      	ldr	r2, [pc, #172]	; (8003fe4 <statemachine+0x9f4>)
 8003f36:	2301      	movs	r3, #1
 8003f38:	ca06      	ldmia	r2, {r1, r2}
 8003f3a:	482b      	ldr	r0, [pc, #172]	; (8003fe8 <statemachine+0x9f8>)
 8003f3c:	f7fe fece 	bl	8002cdc <ssd1306_WriteString>




				  switch(hrstate){
 8003f40:	4b2a      	ldr	r3, [pc, #168]	; (8003fec <statemachine+0x9fc>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <statemachine+0x95e>
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d059      	beq.n	8004000 <statemachine+0xa10>
 8003f4c:	e295      	b.n	800447a <statemachine+0xe8a>
				  case STATE_DIGIT:
					 ssd1306_SetCursor(32, 42);
 8003f4e:	212a      	movs	r1, #42	; 0x2a
 8003f50:	2020      	movs	r0, #32
 8003f52:	f7fe fee9 	bl	8002d28 <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 8003f56:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <statemachine+0x9e8>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	4b1f      	ldr	r3, [pc, #124]	; (8003fdc <statemachine+0x9ec>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	4613      	mov	r3, r2
 8003f64:	4a22      	ldr	r2, [pc, #136]	; (8003ff0 <statemachine+0xa00>)
 8003f66:	210f      	movs	r1, #15
 8003f68:	4822      	ldr	r0, [pc, #136]	; (8003ff4 <statemachine+0xa04>)
 8003f6a:	f012 fba7 	bl	80166bc <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8003f6e:	4a22      	ldr	r2, [pc, #136]	; (8003ff8 <statemachine+0xa08>)
 8003f70:	2301      	movs	r3, #1
 8003f72:	ca06      	ldmia	r2, {r1, r2}
 8003f74:	481f      	ldr	r0, [pc, #124]	; (8003ff4 <statemachine+0xa04>)
 8003f76:	f7fe feb1 	bl	8002cdc <ssd1306_WriteString>
					ssd1306_SetCursor(32, 50);
 8003f7a:	2132      	movs	r1, #50	; 0x32
 8003f7c:	2020      	movs	r0, #32
 8003f7e:	f7fe fed3 	bl	8002d28 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 8003f82:	4b17      	ldr	r3, [pc, #92]	; (8003fe0 <statemachine+0x9f0>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	4a1d      	ldr	r2, [pc, #116]	; (8003ffc <statemachine+0xa0c>)
 8003f88:	210f      	movs	r1, #15
 8003f8a:	481a      	ldr	r0, [pc, #104]	; (8003ff4 <statemachine+0xa04>)
 8003f8c:	f012 fb96 	bl	80166bc <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003f90:	4a14      	ldr	r2, [pc, #80]	; (8003fe4 <statemachine+0x9f4>)
 8003f92:	2301      	movs	r3, #1
 8003f94:	ca06      	ldmia	r2, {r1, r2}
 8003f96:	4817      	ldr	r0, [pc, #92]	; (8003ff4 <statemachine+0xa04>)
 8003f98:	f7fe fea0 	bl	8002cdc <ssd1306_WriteString>
					if(BTN_B>=1){
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <statemachine+0x9d4>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f340 8267 	ble.w	8004474 <statemachine+0xe84>
												hrstate++;
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <statemachine+0x9fc>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	3301      	adds	r3, #1
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <statemachine+0x9fc>)
 8003fb0:	701a      	strb	r2, [r3, #0]
												BTN_B=0;
 8003fb2:	4b04      	ldr	r3, [pc, #16]	; (8003fc4 <statemachine+0x9d4>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
											}




					  break;
 8003fb8:	e25c      	b.n	8004474 <statemachine+0xe84>
 8003fba:	bf00      	nop
 8003fbc:	20000708 	.word	0x20000708
 8003fc0:	20000478 	.word	0x20000478
 8003fc4:	2000070c 	.word	0x2000070c
 8003fc8:	20000b50 	.word	0x20000b50
 8003fcc:	200004c4 	.word	0x200004c4
 8003fd0:	200006c8 	.word	0x200006c8
 8003fd4:	20000b38 	.word	0x20000b38
 8003fd8:	20000b35 	.word	0x20000b35
 8003fdc:	20000b36 	.word	0x20000b36
 8003fe0:	20000b34 	.word	0x20000b34
 8003fe4:	2000000c 	.word	0x2000000c
 8003fe8:	0801af1c 	.word	0x0801af1c
 8003fec:	20000479 	.word	0x20000479
 8003ff0:	0801af24 	.word	0x0801af24
 8003ff4:	20000968 	.word	0x20000968
 8003ff8:	20000014 	.word	0x20000014
 8003ffc:	0801af30 	.word	0x0801af30
				  case STATE_OLD:
					  if(HR>12){
 8004000:	4b91      	ldr	r3, [pc, #580]	; (8004248 <statemachine+0xc58>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	d905      	bls.n	8004014 <statemachine+0xa24>
						  HR=HR-12;
 8004008:	4b8f      	ldr	r3, [pc, #572]	; (8004248 <statemachine+0xc58>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	3b0c      	subs	r3, #12
 800400e:	b2da      	uxtb	r2, r3
 8004010:	4b8d      	ldr	r3, [pc, #564]	; (8004248 <statemachine+0xc58>)
 8004012:	701a      	strb	r2, [r3, #0]
					  }
					  ssd1306_DrawCircle(64, 48, 12, White);
 8004014:	2301      	movs	r3, #1
 8004016:	220c      	movs	r2, #12
 8004018:	2130      	movs	r1, #48	; 0x30
 800401a:	2040      	movs	r0, #64	; 0x40
 800401c:	f7fe ff08 	bl	8002e30 <ssd1306_DrawCircle>
					  ssd1306_Line(64,48,64+floor(6*cos((3-HR)*M_PI/6)),48-floor(6*sin((3-HR)*M_PI/6)),White);
 8004020:	4b89      	ldr	r3, [pc, #548]	; (8004248 <statemachine+0xc58>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	f1c3 0303 	rsb	r3, r3, #3
 8004028:	4618      	mov	r0, r3
 800402a:	f7fc fa7b 	bl	8000524 <__aeabi_i2d>
 800402e:	a384      	add	r3, pc, #528	; (adr r3, 8004240 <statemachine+0xc50>)
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f7fc fae0 	bl	80005f8 <__aeabi_dmul>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4610      	mov	r0, r2
 800403e:	4619      	mov	r1, r3
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	4b81      	ldr	r3, [pc, #516]	; (800424c <statemachine+0xc5c>)
 8004046:	f7fc fc01 	bl	800084c <__aeabi_ddiv>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	ec43 2b17 	vmov	d7, r2, r3
 8004052:	eeb0 0a47 	vmov.f32	s0, s14
 8004056:	eef0 0a67 	vmov.f32	s1, s15
 800405a:	f015 f931 	bl	80192c0 <cos>
 800405e:	ec51 0b10 	vmov	r0, r1, d0
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	4b79      	ldr	r3, [pc, #484]	; (800424c <statemachine+0xc5c>)
 8004068:	f7fc fac6 	bl	80005f8 <__aeabi_dmul>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	ec43 2b17 	vmov	d7, r2, r3
 8004074:	eeb0 0a47 	vmov.f32	s0, s14
 8004078:	eef0 0a67 	vmov.f32	s1, s15
 800407c:	f015 fa68 	bl	8019550 <floor>
 8004080:	ec51 0b10 	vmov	r0, r1, d0
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	4b71      	ldr	r3, [pc, #452]	; (8004250 <statemachine+0xc60>)
 800408a:	f7fc f8ff 	bl	800028c <__adddf3>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4610      	mov	r0, r2
 8004094:	4619      	mov	r1, r3
 8004096:	f7fc fd87 	bl	8000ba8 <__aeabi_d2uiz>
 800409a:	4603      	mov	r3, r0
 800409c:	b2dc      	uxtb	r4, r3
 800409e:	4b6a      	ldr	r3, [pc, #424]	; (8004248 <statemachine+0xc58>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	f1c3 0303 	rsb	r3, r3, #3
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc fa3c 	bl	8000524 <__aeabi_i2d>
 80040ac:	a364      	add	r3, pc, #400	; (adr r3, 8004240 <statemachine+0xc50>)
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	f7fc faa1 	bl	80005f8 <__aeabi_dmul>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	4610      	mov	r0, r2
 80040bc:	4619      	mov	r1, r3
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	4b62      	ldr	r3, [pc, #392]	; (800424c <statemachine+0xc5c>)
 80040c4:	f7fc fbc2 	bl	800084c <__aeabi_ddiv>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	ec43 2b17 	vmov	d7, r2, r3
 80040d0:	eeb0 0a47 	vmov.f32	s0, s14
 80040d4:	eef0 0a67 	vmov.f32	s1, s15
 80040d8:	f015 f946 	bl	8019368 <sin>
 80040dc:	ec51 0b10 	vmov	r0, r1, d0
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	4b59      	ldr	r3, [pc, #356]	; (800424c <statemachine+0xc5c>)
 80040e6:	f7fc fa87 	bl	80005f8 <__aeabi_dmul>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	ec43 2b17 	vmov	d7, r2, r3
 80040f2:	eeb0 0a47 	vmov.f32	s0, s14
 80040f6:	eef0 0a67 	vmov.f32	s1, s15
 80040fa:	f015 fa29 	bl	8019550 <floor>
 80040fe:	ec53 2b10 	vmov	r2, r3, d0
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	4953      	ldr	r1, [pc, #332]	; (8004254 <statemachine+0xc64>)
 8004108:	f7fc f8be 	bl	8000288 <__aeabi_dsub>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4610      	mov	r0, r2
 8004112:	4619      	mov	r1, r3
 8004114:	f7fc fd48 	bl	8000ba8 <__aeabi_d2uiz>
 8004118:	4603      	mov	r3, r0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2201      	movs	r2, #1
 800411e:	9200      	str	r2, [sp, #0]
 8004120:	4622      	mov	r2, r4
 8004122:	2130      	movs	r1, #48	; 0x30
 8004124:	2040      	movs	r0, #64	; 0x40
 8004126:	f7fe fe17 	bl	8002d58 <ssd1306_Line>
					  ssd1306_Line(64,48,64+floor(12*cos((15-MINUTE)*M_PI/30)),48-floor(12*sin((15-MINUTE)*M_PI/30)),White);
 800412a:	4b4b      	ldr	r3, [pc, #300]	; (8004258 <statemachine+0xc68>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	f1c3 030f 	rsb	r3, r3, #15
 8004132:	4618      	mov	r0, r3
 8004134:	f7fc f9f6 	bl	8000524 <__aeabi_i2d>
 8004138:	a341      	add	r3, pc, #260	; (adr r3, 8004240 <statemachine+0xc50>)
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	f7fc fa5b 	bl	80005f8 <__aeabi_dmul>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4610      	mov	r0, r2
 8004148:	4619      	mov	r1, r3
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	4b43      	ldr	r3, [pc, #268]	; (800425c <statemachine+0xc6c>)
 8004150:	f7fc fb7c 	bl	800084c <__aeabi_ddiv>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	ec43 2b17 	vmov	d7, r2, r3
 800415c:	eeb0 0a47 	vmov.f32	s0, s14
 8004160:	eef0 0a67 	vmov.f32	s1, s15
 8004164:	f015 f8ac 	bl	80192c0 <cos>
 8004168:	ec51 0b10 	vmov	r0, r1, d0
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	4b3b      	ldr	r3, [pc, #236]	; (8004260 <statemachine+0xc70>)
 8004172:	f7fc fa41 	bl	80005f8 <__aeabi_dmul>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	ec43 2b17 	vmov	d7, r2, r3
 800417e:	eeb0 0a47 	vmov.f32	s0, s14
 8004182:	eef0 0a67 	vmov.f32	s1, s15
 8004186:	f015 f9e3 	bl	8019550 <floor>
 800418a:	ec51 0b10 	vmov	r0, r1, d0
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	4b2f      	ldr	r3, [pc, #188]	; (8004250 <statemachine+0xc60>)
 8004194:	f7fc f87a 	bl	800028c <__adddf3>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	f7fc fd02 	bl	8000ba8 <__aeabi_d2uiz>
 80041a4:	4603      	mov	r3, r0
 80041a6:	b2dc      	uxtb	r4, r3
 80041a8:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <statemachine+0xc68>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	f1c3 030f 	rsb	r3, r3, #15
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7fc f9b7 	bl	8000524 <__aeabi_i2d>
 80041b6:	a322      	add	r3, pc, #136	; (adr r3, 8004240 <statemachine+0xc50>)
 80041b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041bc:	f7fc fa1c 	bl	80005f8 <__aeabi_dmul>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	4b23      	ldr	r3, [pc, #140]	; (800425c <statemachine+0xc6c>)
 80041ce:	f7fc fb3d 	bl	800084c <__aeabi_ddiv>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	ec43 2b17 	vmov	d7, r2, r3
 80041da:	eeb0 0a47 	vmov.f32	s0, s14
 80041de:	eef0 0a67 	vmov.f32	s1, s15
 80041e2:	f015 f8c1 	bl	8019368 <sin>
 80041e6:	ec51 0b10 	vmov	r0, r1, d0
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	4b1c      	ldr	r3, [pc, #112]	; (8004260 <statemachine+0xc70>)
 80041f0:	f7fc fa02 	bl	80005f8 <__aeabi_dmul>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	ec43 2b17 	vmov	d7, r2, r3
 80041fc:	eeb0 0a47 	vmov.f32	s0, s14
 8004200:	eef0 0a67 	vmov.f32	s1, s15
 8004204:	f015 f9a4 	bl	8019550 <floor>
 8004208:	ec53 2b10 	vmov	r2, r3, d0
 800420c:	f04f 0000 	mov.w	r0, #0
 8004210:	4910      	ldr	r1, [pc, #64]	; (8004254 <statemachine+0xc64>)
 8004212:	f7fc f839 	bl	8000288 <__aeabi_dsub>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	f7fc fcc3 	bl	8000ba8 <__aeabi_d2uiz>
 8004222:	4603      	mov	r3, r0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2201      	movs	r2, #1
 8004228:	9200      	str	r2, [sp, #0]
 800422a:	4622      	mov	r2, r4
 800422c:	2130      	movs	r1, #48	; 0x30
 800422e:	2040      	movs	r0, #64	; 0x40
 8004230:	f7fe fd92 	bl	8002d58 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	e10a      	b.n	8004450 <statemachine+0xe60>
 800423a:	bf00      	nop
 800423c:	f3af 8000 	nop.w
 8004240:	54442d18 	.word	0x54442d18
 8004244:	400921fb 	.word	0x400921fb
 8004248:	20000b35 	.word	0x20000b35
 800424c:	40180000 	.word	0x40180000
 8004250:	40500000 	.word	0x40500000
 8004254:	40480000 	.word	0x40480000
 8004258:	20000b36 	.word	0x20000b36
 800425c:	403e0000 	.word	0x403e0000
 8004260:	40280000 	.word	0x40280000
						  ssd1306_Line(64+floor(10*cos((i)*M_PI/6)),48+floor(10*sin((i)*M_PI/6)),64+floor(12*cos((i)*M_PI/6)),48+floor(12*sin((i)*M_PI/6)),White);
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f7fc f95d 	bl	8000524 <__aeabi_i2d>
 800426a:	a399      	add	r3, pc, #612	; (adr r3, 80044d0 <statemachine+0xee0>)
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	f7fc f9c2 	bl	80005f8 <__aeabi_dmul>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	4b95      	ldr	r3, [pc, #596]	; (80044d8 <statemachine+0xee8>)
 8004282:	f7fc fae3 	bl	800084c <__aeabi_ddiv>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	ec43 2b17 	vmov	d7, r2, r3
 800428e:	eeb0 0a47 	vmov.f32	s0, s14
 8004292:	eef0 0a67 	vmov.f32	s1, s15
 8004296:	f015 f813 	bl	80192c0 <cos>
 800429a:	ec51 0b10 	vmov	r0, r1, d0
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	4b8e      	ldr	r3, [pc, #568]	; (80044dc <statemachine+0xeec>)
 80042a4:	f7fc f9a8 	bl	80005f8 <__aeabi_dmul>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	ec43 2b17 	vmov	d7, r2, r3
 80042b0:	eeb0 0a47 	vmov.f32	s0, s14
 80042b4:	eef0 0a67 	vmov.f32	s1, s15
 80042b8:	f015 f94a 	bl	8019550 <floor>
 80042bc:	ec51 0b10 	vmov	r0, r1, d0
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	4b86      	ldr	r3, [pc, #536]	; (80044e0 <statemachine+0xef0>)
 80042c6:	f7fb ffe1 	bl	800028c <__adddf3>
 80042ca:	4602      	mov	r2, r0
 80042cc:	460b      	mov	r3, r1
 80042ce:	4610      	mov	r0, r2
 80042d0:	4619      	mov	r1, r3
 80042d2:	f7fc fc69 	bl	8000ba8 <__aeabi_d2uiz>
 80042d6:	4603      	mov	r3, r0
 80042d8:	b2dc      	uxtb	r4, r3
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f7fc f922 	bl	8000524 <__aeabi_i2d>
 80042e0:	a37b      	add	r3, pc, #492	; (adr r3, 80044d0 <statemachine+0xee0>)
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	f7fc f987 	bl	80005f8 <__aeabi_dmul>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	4b78      	ldr	r3, [pc, #480]	; (80044d8 <statemachine+0xee8>)
 80042f8:	f7fc faa8 	bl	800084c <__aeabi_ddiv>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	ec43 2b17 	vmov	d7, r2, r3
 8004304:	eeb0 0a47 	vmov.f32	s0, s14
 8004308:	eef0 0a67 	vmov.f32	s1, s15
 800430c:	f015 f82c 	bl	8019368 <sin>
 8004310:	ec51 0b10 	vmov	r0, r1, d0
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	4b70      	ldr	r3, [pc, #448]	; (80044dc <statemachine+0xeec>)
 800431a:	f7fc f96d 	bl	80005f8 <__aeabi_dmul>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	ec43 2b17 	vmov	d7, r2, r3
 8004326:	eeb0 0a47 	vmov.f32	s0, s14
 800432a:	eef0 0a67 	vmov.f32	s1, s15
 800432e:	f015 f90f 	bl	8019550 <floor>
 8004332:	ec51 0b10 	vmov	r0, r1, d0
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	4b6a      	ldr	r3, [pc, #424]	; (80044e4 <statemachine+0xef4>)
 800433c:	f7fb ffa6 	bl	800028c <__adddf3>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4610      	mov	r0, r2
 8004346:	4619      	mov	r1, r3
 8004348:	f7fc fc2e 	bl	8000ba8 <__aeabi_d2uiz>
 800434c:	4603      	mov	r3, r0
 800434e:	b2dd      	uxtb	r5, r3
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7fc f8e7 	bl	8000524 <__aeabi_i2d>
 8004356:	a35e      	add	r3, pc, #376	; (adr r3, 80044d0 <statemachine+0xee0>)
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f7fc f94c 	bl	80005f8 <__aeabi_dmul>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	4b5a      	ldr	r3, [pc, #360]	; (80044d8 <statemachine+0xee8>)
 800436e:	f7fc fa6d 	bl	800084c <__aeabi_ddiv>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	ec43 2b17 	vmov	d7, r2, r3
 800437a:	eeb0 0a47 	vmov.f32	s0, s14
 800437e:	eef0 0a67 	vmov.f32	s1, s15
 8004382:	f014 ff9d 	bl	80192c0 <cos>
 8004386:	ec51 0b10 	vmov	r0, r1, d0
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	4b56      	ldr	r3, [pc, #344]	; (80044e8 <statemachine+0xef8>)
 8004390:	f7fc f932 	bl	80005f8 <__aeabi_dmul>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	ec43 2b17 	vmov	d7, r2, r3
 800439c:	eeb0 0a47 	vmov.f32	s0, s14
 80043a0:	eef0 0a67 	vmov.f32	s1, s15
 80043a4:	f015 f8d4 	bl	8019550 <floor>
 80043a8:	ec51 0b10 	vmov	r0, r1, d0
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	4b4b      	ldr	r3, [pc, #300]	; (80044e0 <statemachine+0xef0>)
 80043b2:	f7fb ff6b 	bl	800028c <__adddf3>
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	f7fc fbf3 	bl	8000ba8 <__aeabi_d2uiz>
 80043c2:	4603      	mov	r3, r0
 80043c4:	b2de      	uxtb	r6, r3
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f7fc f8ac 	bl	8000524 <__aeabi_i2d>
 80043cc:	a340      	add	r3, pc, #256	; (adr r3, 80044d0 <statemachine+0xee0>)
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f7fc f911 	bl	80005f8 <__aeabi_dmul>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4610      	mov	r0, r2
 80043dc:	4619      	mov	r1, r3
 80043de:	f04f 0200 	mov.w	r2, #0
 80043e2:	4b3d      	ldr	r3, [pc, #244]	; (80044d8 <statemachine+0xee8>)
 80043e4:	f7fc fa32 	bl	800084c <__aeabi_ddiv>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	ec43 2b17 	vmov	d7, r2, r3
 80043f0:	eeb0 0a47 	vmov.f32	s0, s14
 80043f4:	eef0 0a67 	vmov.f32	s1, s15
 80043f8:	f014 ffb6 	bl	8019368 <sin>
 80043fc:	ec51 0b10 	vmov	r0, r1, d0
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	4b38      	ldr	r3, [pc, #224]	; (80044e8 <statemachine+0xef8>)
 8004406:	f7fc f8f7 	bl	80005f8 <__aeabi_dmul>
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	ec43 2b17 	vmov	d7, r2, r3
 8004412:	eeb0 0a47 	vmov.f32	s0, s14
 8004416:	eef0 0a67 	vmov.f32	s1, s15
 800441a:	f015 f899 	bl	8019550 <floor>
 800441e:	ec51 0b10 	vmov	r0, r1, d0
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	4b2f      	ldr	r3, [pc, #188]	; (80044e4 <statemachine+0xef4>)
 8004428:	f7fb ff30 	bl	800028c <__adddf3>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	f7fc fbb8 	bl	8000ba8 <__aeabi_d2uiz>
 8004438:	4603      	mov	r3, r0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2201      	movs	r2, #1
 800443e:	9200      	str	r2, [sp, #0]
 8004440:	4632      	mov	r2, r6
 8004442:	4629      	mov	r1, r5
 8004444:	4620      	mov	r0, r4
 8004446:	f7fe fc87 	bl	8002d58 <ssd1306_Line>
					  for(int i=0;i<=12;i++){
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3301      	adds	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b0c      	cmp	r3, #12
 8004454:	f77f af06 	ble.w	8004264 <statemachine+0xc74>
					  }
					  if(BTN_B>=1){
 8004458:	4b24      	ldr	r3, [pc, #144]	; (80044ec <statemachine+0xefc>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	dd0b      	ble.n	8004478 <statemachine+0xe88>
					  	hrstate--;
 8004460:	4b23      	ldr	r3, [pc, #140]	; (80044f0 <statemachine+0xf00>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	3b01      	subs	r3, #1
 8004466:	b2da      	uxtb	r2, r3
 8004468:	4b21      	ldr	r3, [pc, #132]	; (80044f0 <statemachine+0xf00>)
 800446a:	701a      	strb	r2, [r3, #0]
					  	BTN_B=0;
 800446c:	4b1f      	ldr	r3, [pc, #124]	; (80044ec <statemachine+0xefc>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
					  }


					  break;
 8004472:	e001      	b.n	8004478 <statemachine+0xe88>
					  break;
 8004474:	bf00      	nop
 8004476:	e000      	b.n	800447a <statemachine+0xe8a>
					  break;
 8004478:	bf00      	nop

				  }

				  if(BTN_A>=1){
 800447a:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <statemachine+0xf04>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	dd0e      	ble.n	80044a0 <statemachine+0xeb0>
			  		state++;
 8004482:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <statemachine+0xf08>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	3301      	adds	r3, #1
 8004488:	b2da      	uxtb	r2, r3
 800448a:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <statemachine+0xf08>)
 800448c:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 800448e:	4b19      	ldr	r3, [pc, #100]	; (80044f4 <statemachine+0xf04>)
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 8004494:	4b15      	ldr	r3, [pc, #84]	; (80044ec <statemachine+0xefc>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
			  		settimeen=0;
 800449a:	4b18      	ldr	r3, [pc, #96]	; (80044fc <statemachine+0xf0c>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
			  		}
				  if(BTN_A_LONG>=1){
 80044a0:	4b17      	ldr	r3, [pc, #92]	; (8004500 <statemachine+0xf10>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f341 8020 	ble.w	80054ea <statemachine+0x1efa>
				  									 									 									  			 	state--;
 80044aa:	4b13      	ldr	r3, [pc, #76]	; (80044f8 <statemachine+0xf08>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4b11      	ldr	r3, [pc, #68]	; (80044f8 <statemachine+0xf08>)
 80044b4:	701a      	strb	r2, [r3, #0]
				  									 									 									  			 	BTN_A=0;
 80044b6:	4b0f      	ldr	r3, [pc, #60]	; (80044f4 <statemachine+0xf04>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
				  									 									 									  			 	BTN_B=0;
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <statemachine+0xefc>)
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
				  									 									 									  			 	BTN_A_LONG=0;
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <statemachine+0xf10>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]





			  break;
 80044c8:	f001 b80f 	b.w	80054ea <statemachine+0x1efa>
 80044cc:	f3af 8000 	nop.w
 80044d0:	54442d18 	.word	0x54442d18
 80044d4:	400921fb 	.word	0x400921fb
 80044d8:	40180000 	.word	0x40180000
 80044dc:	40240000 	.word	0x40240000
 80044e0:	40500000 	.word	0x40500000
 80044e4:	40480000 	.word	0x40480000
 80044e8:	40280000 	.word	0x40280000
 80044ec:	2000070c 	.word	0x2000070c
 80044f0:	20000479 	.word	0x20000479
 80044f4:	20000708 	.word	0x20000708
 80044f8:	20000478 	.word	0x20000478
 80044fc:	20000b38 	.word	0x20000b38
 8004500:	20000b50 	.word	0x20000b50
		  case STATE_INFO:
			  ssd1306_Fill(Black);
 8004504:	2000      	movs	r0, #0
 8004506:	f7fe facd 	bl	8002aa4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 800450a:	497a      	ldr	r1, [pc, #488]	; (80046f4 <statemachine+0x1104>)
 800450c:	487a      	ldr	r0, [pc, #488]	; (80046f8 <statemachine+0x1108>)
 800450e:	f7fd fde1 	bl	80020d4 <nmea_parse>
			snprintf((char *)bufferscreen,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8004512:	4b79      	ldr	r3, [pc, #484]	; (80046f8 <statemachine+0x1108>)
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	4618      	mov	r0, r3
 8004518:	f7fc f816 	bl	8000548 <__aeabi_f2d>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	e9cd 2300 	strd	r2, r3, [sp]
 8004524:	4a75      	ldr	r2, [pc, #468]	; (80046fc <statemachine+0x110c>)
 8004526:	210f      	movs	r1, #15
 8004528:	4875      	ldr	r0, [pc, #468]	; (8004700 <statemachine+0x1110>)
 800452a:	f012 f8c7 	bl	80166bc <sniprintf>
			ssd1306_SetCursor(32, 32);
 800452e:	2120      	movs	r1, #32
 8004530:	2020      	movs	r0, #32
 8004532:	f7fe fbf9 	bl	8002d28 <ssd1306_SetCursor>
			ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004536:	4a73      	ldr	r2, [pc, #460]	; (8004704 <statemachine+0x1114>)
 8004538:	2301      	movs	r3, #1
 800453a:	ca06      	ldmia	r2, {r1, r2}
 800453c:	4870      	ldr	r0, [pc, #448]	; (8004700 <statemachine+0x1110>)
 800453e:	f7fe fbcd 	bl	8002cdc <ssd1306_WriteString>
			snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 8004542:	4b71      	ldr	r3, [pc, #452]	; (8004708 <statemachine+0x1118>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fb fffe 	bl	8000548 <__aeabi_f2d>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	e9cd 2300 	strd	r2, r3, [sp]
 8004554:	4a6d      	ldr	r2, [pc, #436]	; (800470c <statemachine+0x111c>)
 8004556:	2114      	movs	r1, #20
 8004558:	4869      	ldr	r0, [pc, #420]	; (8004700 <statemachine+0x1110>)
 800455a:	f012 f8af 	bl	80166bc <sniprintf>
			ssd1306_SetCursor(32, 42);
 800455e:	212a      	movs	r1, #42	; 0x2a
 8004560:	2020      	movs	r0, #32
 8004562:	f7fe fbe1 	bl	8002d28 <ssd1306_SetCursor>
			ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004566:	4a67      	ldr	r2, [pc, #412]	; (8004704 <statemachine+0x1114>)
 8004568:	2301      	movs	r3, #1
 800456a:	ca06      	ldmia	r2, {r1, r2}
 800456c:	4864      	ldr	r0, [pc, #400]	; (8004700 <statemachine+0x1110>)
 800456e:	f7fe fbb5 	bl	8002cdc <ssd1306_WriteString>
			ssd1306_SetCursor(32, 50);
 8004572:	2132      	movs	r1, #50	; 0x32
 8004574:	2020      	movs	r0, #32
 8004576:	f7fe fbd7 	bl	8002d28 <ssd1306_SetCursor>
			snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 800457a:	4b65      	ldr	r3, [pc, #404]	; (8004710 <statemachine+0x1120>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7fb ffe2 	bl	8000548 <__aeabi_f2d>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	e9cd 2300 	strd	r2, r3, [sp]
 800458c:	4a61      	ldr	r2, [pc, #388]	; (8004714 <statemachine+0x1124>)
 800458e:	210f      	movs	r1, #15
 8004590:	485b      	ldr	r0, [pc, #364]	; (8004700 <statemachine+0x1110>)
 8004592:	f012 f893 	bl	80166bc <sniprintf>
			ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004596:	4a5b      	ldr	r2, [pc, #364]	; (8004704 <statemachine+0x1114>)
 8004598:	2301      	movs	r3, #1
 800459a:	ca06      	ldmia	r2, {r1, r2}
 800459c:	4858      	ldr	r0, [pc, #352]	; (8004700 <statemachine+0x1110>)
 800459e:	f7fe fb9d 	bl	8002cdc <ssd1306_WriteString>

			  if(BTN_A>=1){
 80045a2:	4b5d      	ldr	r3, [pc, #372]	; (8004718 <statemachine+0x1128>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	dd0b      	ble.n	80045c2 <statemachine+0xfd2>
			  		state++;
 80045aa:	4b5c      	ldr	r3, [pc, #368]	; (800471c <statemachine+0x112c>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	3301      	adds	r3, #1
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	4b5a      	ldr	r3, [pc, #360]	; (800471c <statemachine+0x112c>)
 80045b4:	701a      	strb	r2, [r3, #0]
			  		BTN_A=0;
 80045b6:	4b58      	ldr	r3, [pc, #352]	; (8004718 <statemachine+0x1128>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
			  		BTN_B=0;
 80045bc:	4b58      	ldr	r3, [pc, #352]	; (8004720 <statemachine+0x1130>)
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
			  		}
			  if(BTN_A_LONG>=1){
 80045c2:	4b58      	ldr	r3, [pc, #352]	; (8004724 <statemachine+0x1134>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f340 8791 	ble.w	80054ee <statemachine+0x1efe>
			  				 									 									  			 	state--;
 80045cc:	4b53      	ldr	r3, [pc, #332]	; (800471c <statemachine+0x112c>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	4b51      	ldr	r3, [pc, #324]	; (800471c <statemachine+0x112c>)
 80045d6:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 80045d8:	4b4f      	ldr	r3, [pc, #316]	; (8004718 <statemachine+0x1128>)
 80045da:	2200      	movs	r2, #0
 80045dc:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 80045de:	4b50      	ldr	r3, [pc, #320]	; (8004720 <statemachine+0x1130>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 80045e4:	4b4f      	ldr	r3, [pc, #316]	; (8004724 <statemachine+0x1134>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 80045ea:	f000 bf80 	b.w	80054ee <statemachine+0x1efe>

		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 80045ee:	2000      	movs	r0, #0
 80045f0:	f7fe fa58 	bl	8002aa4 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 80045f4:	2120      	movs	r1, #32
 80045f6:	2020      	movs	r0, #32
 80045f8:	f7fe fb96 	bl	8002d28 <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 80045fc:	4a41      	ldr	r2, [pc, #260]	; (8004704 <statemachine+0x1114>)
 80045fe:	2301      	movs	r3, #1
 8004600:	ca06      	ldmia	r2, {r1, r2}
 8004602:	4849      	ldr	r0, [pc, #292]	; (8004728 <statemachine+0x1138>)
 8004604:	f7fe fb6a 	bl	8002cdc <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 40);
 8004608:	2128      	movs	r1, #40	; 0x28
 800460a:	2020      	movs	r0, #32
 800460c:	f7fe fb8c 	bl	8002d28 <ssd1306_SetCursor>

			  switch(chronostate){
 8004610:	4b46      	ldr	r3, [pc, #280]	; (800472c <statemachine+0x113c>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d03c      	beq.n	8004692 <statemachine+0x10a2>
 8004618:	2b02      	cmp	r3, #2
 800461a:	f300 8098 	bgt.w	800474e <statemachine+0x115e>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <statemachine+0x1038>
 8004622:	2b01      	cmp	r3, #1
 8004624:	d01d      	beq.n	8004662 <statemachine+0x1072>
 8004626:	e092      	b.n	800474e <statemachine+0x115e>
			  case STATE_RESET:
				  min=0;
 8004628:	4b41      	ldr	r3, [pc, #260]	; (8004730 <statemachine+0x1140>)
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8004630:	4b40      	ldr	r3, [pc, #256]	; (8004734 <statemachine+0x1144>)
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8004638:	4b3f      	ldr	r3, [pc, #252]	; (8004738 <statemachine+0x1148>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

				  	 if(BTN_B>=1){
 800463e:	4b38      	ldr	r3, [pc, #224]	; (8004720 <statemachine+0x1130>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	dd51      	ble.n	80046ea <statemachine+0x10fa>
				  		chronostate++;
 8004646:	4b39      	ldr	r3, [pc, #228]	; (800472c <statemachine+0x113c>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	b2da      	uxtb	r2, r3
 800464e:	4b37      	ldr	r3, [pc, #220]	; (800472c <statemachine+0x113c>)
 8004650:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8004652:	4b33      	ldr	r3, [pc, #204]	; (8004720 <statemachine+0x1130>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8004658:	4b38      	ldr	r3, [pc, #224]	; (800473c <statemachine+0x114c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a38      	ldr	r2, [pc, #224]	; (8004740 <statemachine+0x1150>)
 800465e:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8004660:	e043      	b.n	80046ea <statemachine+0x10fa>
			  case STATE_RUN:
				  calctime=uwTick-starttime+timehandler;
 8004662:	4b36      	ldr	r3, [pc, #216]	; (800473c <statemachine+0x114c>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b36      	ldr	r3, [pc, #216]	; (8004740 <statemachine+0x1150>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	1ad2      	subs	r2, r2, r3
 800466c:	4b35      	ldr	r3, [pc, #212]	; (8004744 <statemachine+0x1154>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4413      	add	r3, r2
 8004672:	4a31      	ldr	r2, [pc, #196]	; (8004738 <statemachine+0x1148>)
 8004674:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8004676:	4b2a      	ldr	r3, [pc, #168]	; (8004720 <statemachine+0x1130>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	dd37      	ble.n	80046ee <statemachine+0x10fe>
				  		chronostate++;
 800467e:	4b2b      	ldr	r3, [pc, #172]	; (800472c <statemachine+0x113c>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	3301      	adds	r3, #1
 8004684:	b2da      	uxtb	r2, r3
 8004686:	4b29      	ldr	r3, [pc, #164]	; (800472c <statemachine+0x113c>)
 8004688:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 800468a:	4b25      	ldr	r3, [pc, #148]	; (8004720 <statemachine+0x1130>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8004690:	e02d      	b.n	80046ee <statemachine+0x10fe>
			  case STATE_PAUSE:
				  timehandler=calctime;
 8004692:	4b29      	ldr	r3, [pc, #164]	; (8004738 <statemachine+0x1148>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a2b      	ldr	r2, [pc, #172]	; (8004744 <statemachine+0x1154>)
 8004698:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 800469a:	4b21      	ldr	r3, [pc, #132]	; (8004720 <statemachine+0x1130>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	dd0c      	ble.n	80046bc <statemachine+0x10cc>
				  			chronostate--;
 80046a2:	4b22      	ldr	r3, [pc, #136]	; (800472c <statemachine+0x113c>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	4b20      	ldr	r3, [pc, #128]	; (800472c <statemachine+0x113c>)
 80046ac:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 80046ae:	4b1c      	ldr	r3, [pc, #112]	; (8004720 <statemachine+0x1130>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
				  			starttime=uwTick;
 80046b4:	4b21      	ldr	r3, [pc, #132]	; (800473c <statemachine+0x114c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a21      	ldr	r2, [pc, #132]	; (8004740 <statemachine+0x1150>)
 80046ba:	6013      	str	r3, [r2, #0]

			 }
				  if(BTN_B_LONG>=1){
 80046bc:	4b22      	ldr	r3, [pc, #136]	; (8004748 <statemachine+0x1158>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	dd43      	ble.n	800474c <statemachine+0x115c>
				  				  	chronostate--;
 80046c4:	4b19      	ldr	r3, [pc, #100]	; (800472c <statemachine+0x113c>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	4b17      	ldr	r3, [pc, #92]	; (800472c <statemachine+0x113c>)
 80046ce:	701a      	strb	r2, [r3, #0]
				  				  	chronostate--;
 80046d0:	4b16      	ldr	r3, [pc, #88]	; (800472c <statemachine+0x113c>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	4b14      	ldr	r3, [pc, #80]	; (800472c <statemachine+0x113c>)
 80046da:	701a      	strb	r2, [r3, #0]
				  				  	BTN_B_LONG=0;
 80046dc:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <statemachine+0x1158>)
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
				  				  	timehandler=0;
 80046e2:	4b18      	ldr	r3, [pc, #96]	; (8004744 <statemachine+0x1154>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
				  			 }


				  break;
 80046e8:	e030      	b.n	800474c <statemachine+0x115c>
				  break;
 80046ea:	bf00      	nop
 80046ec:	e02f      	b.n	800474e <statemachine+0x115e>
				  break;
 80046ee:	bf00      	nop
 80046f0:	e02d      	b.n	800474e <statemachine+0x115e>
 80046f2:	bf00      	nop
 80046f4:	200004c4 	.word	0x200004c4
 80046f8:	200006c8 	.word	0x200006c8
 80046fc:	0801af3c 	.word	0x0801af3c
 8004700:	20000968 	.word	0x20000968
 8004704:	2000000c 	.word	0x2000000c
 8004708:	20000740 	.word	0x20000740
 800470c:	0801af48 	.word	0x0801af48
 8004710:	20000738 	.word	0x20000738
 8004714:	0801af54 	.word	0x0801af54
 8004718:	20000708 	.word	0x20000708
 800471c:	20000478 	.word	0x20000478
 8004720:	2000070c 	.word	0x2000070c
 8004724:	20000b50 	.word	0x20000b50
 8004728:	0801af60 	.word	0x0801af60
 800472c:	2000047c 	.word	0x2000047c
 8004730:	20000ae8 	.word	0x20000ae8
 8004734:	20000ae4 	.word	0x20000ae4
 8004738:	20000af0 	.word	0x20000af0
 800473c:	2000136c 	.word	0x2000136c
 8004740:	20000aec 	.word	0x20000aec
 8004744:	20000af4 	.word	0x20000af4
 8004748:	20000b4c 	.word	0x20000b4c
				  break;
 800474c:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 800474e:	4ba4      	ldr	r3, [pc, #656]	; (80049e0 <statemachine+0x13f0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475a:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80049e4 <statemachine+0x13f4>
 800475e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004762:	ee16 0a90 	vmov	r0, s13
 8004766:	f7fb feef 	bl	8000548 <__aeabi_f2d>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	ec43 2b10 	vmov	d0, r2, r3
 8004772:	f014 feed 	bl	8019550 <floor>
 8004776:	ec53 2b10 	vmov	r2, r3, d0
 800477a:	4610      	mov	r0, r2
 800477c:	4619      	mov	r1, r3
 800477e:	f7fc fa33 	bl	8000be8 <__aeabi_d2f>
 8004782:	4603      	mov	r3, r0
 8004784:	4a98      	ldr	r2, [pc, #608]	; (80049e8 <statemachine+0x13f8>)
 8004786:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8004788:	4b95      	ldr	r3, [pc, #596]	; (80049e0 <statemachine+0x13f0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004794:	4b94      	ldr	r3, [pc, #592]	; (80049e8 <statemachine+0x13f8>)
 8004796:	edd3 7a00 	vldr	s15, [r3]
 800479a:	eddf 6a92 	vldr	s13, [pc, #584]	; 80049e4 <statemachine+0x13f4>
 800479e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80047a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047a6:	eddf 6a91 	vldr	s13, [pc, #580]	; 80049ec <statemachine+0x13fc>
 80047aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047ae:	4b90      	ldr	r3, [pc, #576]	; (80049f0 <statemachine+0x1400>)
 80047b0:	edc3 7a00 	vstr	s15, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 80047b4:	4b8c      	ldr	r3, [pc, #560]	; (80049e8 <statemachine+0x13f8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fb fec5 	bl	8000548 <__aeabi_f2d>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	e9cd 2300 	strd	r2, r3, [sp]
 80047c6:	4a8b      	ldr	r2, [pc, #556]	; (80049f4 <statemachine+0x1404>)
 80047c8:	210f      	movs	r1, #15
 80047ca:	488b      	ldr	r0, [pc, #556]	; (80049f8 <statemachine+0x1408>)
 80047cc:	f011 ff76 	bl	80166bc <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80047d0:	4a8a      	ldr	r2, [pc, #552]	; (80049fc <statemachine+0x140c>)
 80047d2:	2301      	movs	r3, #1
 80047d4:	ca06      	ldmia	r2, {r1, r2}
 80047d6:	4888      	ldr	r0, [pc, #544]	; (80049f8 <statemachine+0x1408>)
 80047d8:	f7fe fa80 	bl	8002cdc <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 80047dc:	2132      	movs	r1, #50	; 0x32
 80047de:	2020      	movs	r0, #32
 80047e0:	f7fe faa2 	bl	8002d28 <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 80047e4:	4b82      	ldr	r3, [pc, #520]	; (80049f0 <statemachine+0x1400>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fb fead 	bl	8000548 <__aeabi_f2d>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	e9cd 2300 	strd	r2, r3, [sp]
 80047f6:	4a82      	ldr	r2, [pc, #520]	; (8004a00 <statemachine+0x1410>)
 80047f8:	210f      	movs	r1, #15
 80047fa:	487f      	ldr	r0, [pc, #508]	; (80049f8 <statemachine+0x1408>)
 80047fc:	f011 ff5e 	bl	80166bc <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8004800:	4a7e      	ldr	r2, [pc, #504]	; (80049fc <statemachine+0x140c>)
 8004802:	2301      	movs	r3, #1
 8004804:	ca06      	ldmia	r2, {r1, r2}
 8004806:	487c      	ldr	r0, [pc, #496]	; (80049f8 <statemachine+0x1408>)
 8004808:	f7fe fa68 	bl	8002cdc <ssd1306_WriteString>


			  if(BTN_A>=1){
 800480c:	4b7d      	ldr	r3, [pc, #500]	; (8004a04 <statemachine+0x1414>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	dd0b      	ble.n	800482c <statemachine+0x123c>
			 	state++;
 8004814:	4b7c      	ldr	r3, [pc, #496]	; (8004a08 <statemachine+0x1418>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	3301      	adds	r3, #1
 800481a:	b2da      	uxtb	r2, r3
 800481c:	4b7a      	ldr	r3, [pc, #488]	; (8004a08 <statemachine+0x1418>)
 800481e:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8004820:	4b78      	ldr	r3, [pc, #480]	; (8004a04 <statemachine+0x1414>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8004826:	4b79      	ldr	r3, [pc, #484]	; (8004a0c <statemachine+0x141c>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 800482c:	4b78      	ldr	r3, [pc, #480]	; (8004a10 <statemachine+0x1420>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	f340 865e 	ble.w	80054f2 <statemachine+0x1f02>
			  				 									 									  			 	state--;
 8004836:	4b74      	ldr	r3, [pc, #464]	; (8004a08 <statemachine+0x1418>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	3b01      	subs	r3, #1
 800483c:	b2da      	uxtb	r2, r3
 800483e:	4b72      	ldr	r3, [pc, #456]	; (8004a08 <statemachine+0x1418>)
 8004840:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8004842:	4b70      	ldr	r3, [pc, #448]	; (8004a04 <statemachine+0x1414>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8004848:	4b70      	ldr	r3, [pc, #448]	; (8004a0c <statemachine+0x141c>)
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 800484e:	4b70      	ldr	r3, [pc, #448]	; (8004a10 <statemachine+0x1420>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8004854:	f000 be4d 	b.w	80054f2 <statemachine+0x1f02>


			  case STATE_BALISE:
				  ssd1306_Fill(Black);
 8004858:	2000      	movs	r0, #0
 800485a:	f7fe f923 	bl	8002aa4 <ssd1306_Fill>

				  if(settimeen==0){
 800485e:	4b6d      	ldr	r3, [pc, #436]	; (8004a14 <statemachine+0x1424>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d145      	bne.n	80048f2 <statemachine+0x1302>

					  if(myData.fix==1){
 8004866:	4b6c      	ldr	r3, [pc, #432]	; (8004a18 <statemachine+0x1428>)
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	2b01      	cmp	r3, #1
 800486c:	d141      	bne.n	80048f2 <statemachine+0x1302>
						settimeen=1;
 800486e:	4b69      	ldr	r3, [pc, #420]	; (8004a14 <statemachine+0x1424>)
 8004870:	2201      	movs	r2, #1
 8004872:	601a      	str	r2, [r3, #0]
						HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8004874:	4b68      	ldr	r3, [pc, #416]	; (8004a18 <statemachine+0x1428>)
 8004876:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	b2db      	uxtb	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	0092      	lsls	r2, r2, #2
 8004884:	4413      	add	r3, r2
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	b2da      	uxtb	r2, r3
 800488a:	4b63      	ldr	r3, [pc, #396]	; (8004a18 <statemachine+0x1428>)
 800488c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	b2db      	uxtb	r3, r3
 8004896:	4413      	add	r3, r2
 8004898:	b2da      	uxtb	r2, r3
 800489a:	4b60      	ldr	r3, [pc, #384]	; (8004a1c <statemachine+0x142c>)
 800489c:	701a      	strb	r2, [r3, #0]
						MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 800489e:	4b5e      	ldr	r3, [pc, #376]	; (8004a18 <statemachine+0x1428>)
 80048a0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	0092      	lsls	r2, r2, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	4b58      	ldr	r3, [pc, #352]	; (8004a18 <statemachine+0x1428>)
 80048b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	4413      	add	r3, r2
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	4b56      	ldr	r3, [pc, #344]	; (8004a20 <statemachine+0x1430>)
 80048c6:	701a      	strb	r2, [r3, #0]
						SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 80048c8:	4b53      	ldr	r3, [pc, #332]	; (8004a18 <statemachine+0x1428>)
 80048ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	0092      	lsls	r2, r2, #2
 80048d8:	4413      	add	r3, r2
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	4b4e      	ldr	r3, [pc, #312]	; (8004a18 <statemachine+0x1428>)
 80048e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	4413      	add	r3, r2
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	4b4d      	ldr	r3, [pc, #308]	; (8004a24 <statemachine+0x1434>)
 80048f0:	701a      	strb	r2, [r3, #0]





				  switch(balisestate){
 80048f2:	4b4d      	ldr	r3, [pc, #308]	; (8004a28 <statemachine+0x1438>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	f000 8236 	beq.w	8004d68 <statemachine+0x1778>
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	f300 85fa 	bgt.w	80054f6 <statemachine+0x1f06>
 8004902:	2b00      	cmp	r3, #0
 8004904:	d004      	beq.n	8004910 <statemachine+0x1320>
 8004906:	2b01      	cmp	r3, #1
 8004908:	f000 809e 	beq.w	8004a48 <statemachine+0x1458>
					  				 									 									  	}

				  }


				  break;
 800490c:	f000 bdf3 	b.w	80054f6 <statemachine+0x1f06>
					  ssd1306_SetCursor(32,32);
 8004910:	2120      	movs	r1, #32
 8004912:	2020      	movs	r0, #32
 8004914:	f7fe fa08 	bl	8002d28 <ssd1306_SetCursor>
					  ssd1306_WriteString("Tracker",Font_6x8,White);
 8004918:	4a44      	ldr	r2, [pc, #272]	; (8004a2c <statemachine+0x143c>)
 800491a:	2301      	movs	r3, #1
 800491c:	ca06      	ldmia	r2, {r1, r2}
 800491e:	4844      	ldr	r0, [pc, #272]	; (8004a30 <statemachine+0x1440>)
 8004920:	f7fe f9dc 	bl	8002cdc <ssd1306_WriteString>
					  snprintf((char *)bufferscreen,50, "off=%d",pageoffset);
 8004924:	4b43      	ldr	r3, [pc, #268]	; (8004a34 <statemachine+0x1444>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a43      	ldr	r2, [pc, #268]	; (8004a38 <statemachine+0x1448>)
 800492a:	2132      	movs	r1, #50	; 0x32
 800492c:	4832      	ldr	r0, [pc, #200]	; (80049f8 <statemachine+0x1408>)
 800492e:	f011 fec5 	bl	80166bc <sniprintf>
					  ssd1306_SetCursor(32,40);
 8004932:	2128      	movs	r1, #40	; 0x28
 8004934:	2020      	movs	r0, #32
 8004936:	f7fe f9f7 	bl	8002d28 <ssd1306_SetCursor>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 800493a:	4a3c      	ldr	r2, [pc, #240]	; (8004a2c <statemachine+0x143c>)
 800493c:	2301      	movs	r3, #1
 800493e:	ca06      	ldmia	r2, {r1, r2}
 8004940:	482d      	ldr	r0, [pc, #180]	; (80049f8 <statemachine+0x1408>)
 8004942:	f7fe f9cb 	bl	8002cdc <ssd1306_WriteString>
					  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 8004946:	4b3d      	ldr	r3, [pc, #244]	; (8004a3c <statemachine+0x144c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3d      	ldr	r2, [pc, #244]	; (8004a40 <statemachine+0x1450>)
 800494c:	2132      	movs	r1, #50	; 0x32
 800494e:	482a      	ldr	r0, [pc, #168]	; (80049f8 <statemachine+0x1408>)
 8004950:	f011 feb4 	bl	80166bc <sniprintf>
					  ssd1306_SetCursor(32,48);
 8004954:	2130      	movs	r1, #48	; 0x30
 8004956:	2020      	movs	r0, #32
 8004958:	f7fe f9e6 	bl	8002d28 <ssd1306_SetCursor>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 800495c:	4a33      	ldr	r2, [pc, #204]	; (8004a2c <statemachine+0x143c>)
 800495e:	2301      	movs	r3, #1
 8004960:	ca06      	ldmia	r2, {r1, r2}
 8004962:	4825      	ldr	r0, [pc, #148]	; (80049f8 <statemachine+0x1408>)
 8004964:	f7fe f9ba 	bl	8002cdc <ssd1306_WriteString>
					  if(BTN_B>=1){
 8004968:	4b28      	ldr	r3, [pc, #160]	; (8004a0c <statemachine+0x141c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	dd0e      	ble.n	800498e <statemachine+0x139e>
						balisestate++;
 8004970:	4b2d      	ldr	r3, [pc, #180]	; (8004a28 <statemachine+0x1438>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	3301      	adds	r3, #1
 8004976:	b2da      	uxtb	r2, r3
 8004978:	4b2b      	ldr	r3, [pc, #172]	; (8004a28 <statemachine+0x1438>)
 800497a:	701a      	strb	r2, [r3, #0]
						BTN_B=0;
 800497c:	4b23      	ldr	r3, [pc, #140]	; (8004a0c <statemachine+0x141c>)
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
						BTN_A=0;
 8004982:	4b20      	ldr	r3, [pc, #128]	; (8004a04 <statemachine+0x1414>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Start_IT(&htim7);
 8004988:	482e      	ldr	r0, [pc, #184]	; (8004a44 <statemachine+0x1454>)
 800498a:	f008 fa91 	bl	800ceb0 <HAL_TIM_Base_Start_IT>
					  if(BTN_A>=1){
 800498e:	4b1d      	ldr	r3, [pc, #116]	; (8004a04 <statemachine+0x1414>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	dd0e      	ble.n	80049b4 <statemachine+0x13c4>
					  				  			 	state++;
 8004996:	4b1c      	ldr	r3, [pc, #112]	; (8004a08 <statemachine+0x1418>)
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	3301      	adds	r3, #1
 800499c:	b2da      	uxtb	r2, r3
 800499e:	4b1a      	ldr	r3, [pc, #104]	; (8004a08 <statemachine+0x1418>)
 80049a0:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 80049a2:	4b18      	ldr	r3, [pc, #96]	; (8004a04 <statemachine+0x1414>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 80049a8:	4b18      	ldr	r3, [pc, #96]	; (8004a0c <statemachine+0x141c>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
					  				  			 	settimeen=0;
 80049ae:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <statemachine+0x1424>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
					  if(BTN_A_LONG>=1){
 80049b4:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <statemachine+0x1420>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f340 8226 	ble.w	8004e0a <statemachine+0x181a>
					  				 									 									  			 	state--;
 80049be:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <statemachine+0x1418>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <statemachine+0x1418>)
 80049c8:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <statemachine+0x1414>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 80049d0:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <statemachine+0x141c>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 80049d6:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <statemachine+0x1420>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
					  break;
 80049dc:	e215      	b.n	8004e0a <statemachine+0x181a>
 80049de:	bf00      	nop
 80049e0:	20000af0 	.word	0x20000af0
 80049e4:	476a6000 	.word	0x476a6000
 80049e8:	20000ae8 	.word	0x20000ae8
 80049ec:	447a0000 	.word	0x447a0000
 80049f0:	20000ae4 	.word	0x20000ae4
 80049f4:	0801af68 	.word	0x0801af68
 80049f8:	20000968 	.word	0x20000968
 80049fc:	20000014 	.word	0x20000014
 8004a00:	0801af74 	.word	0x0801af74
 8004a04:	20000708 	.word	0x20000708
 8004a08:	20000478 	.word	0x20000478
 8004a0c:	2000070c 	.word	0x2000070c
 8004a10:	20000b50 	.word	0x20000b50
 8004a14:	20000b38 	.word	0x20000b38
 8004a18:	200006c8 	.word	0x200006c8
 8004a1c:	20000b35 	.word	0x20000b35
 8004a20:	20000b36 	.word	0x20000b36
 8004a24:	20000b34 	.word	0x20000b34
 8004a28:	2000047e 	.word	0x2000047e
 8004a2c:	2000000c 	.word	0x2000000c
 8004a30:	0801af7c 	.word	0x0801af7c
 8004a34:	20000944 	.word	0x20000944
 8004a38:	0801af84 	.word	0x0801af84
 8004a3c:	20000948 	.word	0x20000948
 8004a40:	0801af8c 	.word	0x0801af8c
 8004a44:	20001164 	.word	0x20001164
					  erasetime=HAL_GetTick();
 8004a48:	f001 fcd0 	bl	80063ec <HAL_GetTick>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	461a      	mov	r2, r3
 8004a50:	4bab      	ldr	r3, [pc, #684]	; (8004d00 <statemachine+0x1710>)
 8004a52:	601a      	str	r2, [r3, #0]
					  if(pagenumber+1>=MAX_WRITE_PAGE){
 8004a54:	4bab      	ldr	r3, [pc, #684]	; (8004d04 <statemachine+0x1714>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f246 32fd 	movw	r2, #25597	; 0x63fd
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	dd05      	ble.n	8004a6c <statemachine+0x147c>
						  HAL_TIM_Base_Stop_IT(&htim7);
 8004a60:	48a9      	ldr	r0, [pc, #676]	; (8004d08 <statemachine+0x1718>)
 8004a62:	f008 fa79 	bl	800cf58 <HAL_TIM_Base_Stop_IT>
						  balisestate=2;
 8004a66:	4ba9      	ldr	r3, [pc, #676]	; (8004d0c <statemachine+0x171c>)
 8004a68:	2202      	movs	r2, #2
 8004a6a:	701a      	strb	r2, [r3, #0]
					  if(enablewrite==1){
 8004a6c:	4ba8      	ldr	r3, [pc, #672]	; (8004d10 <statemachine+0x1720>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	f040 80b0 	bne.w	8004bd6 <statemachine+0x15e6>
						  oldlat=myData.latitude;
 8004a76:	4ba7      	ldr	r3, [pc, #668]	; (8004d14 <statemachine+0x1724>)
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	49a6      	ldr	r1, [pc, #664]	; (8004d18 <statemachine+0x1728>)
 8004a7e:	e9c1 2300 	strd	r2, r3, [r1]
						  oldlong=myData.longitude;
 8004a82:	4ba4      	ldr	r3, [pc, #656]	; (8004d14 <statemachine+0x1724>)
 8004a84:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a88:	49a4      	ldr	r1, [pc, #656]	; (8004d1c <statemachine+0x172c>)
 8004a8a:	e9c1 2300 	strd	r2, r3, [r1]
						  nmea_parse(&myData, DataBuffer);
 8004a8e:	49a4      	ldr	r1, [pc, #656]	; (8004d20 <statemachine+0x1730>)
 8004a90:	48a0      	ldr	r0, [pc, #640]	; (8004d14 <statemachine+0x1724>)
 8004a92:	f7fd fb1f 	bl	80020d4 <nmea_parse>
						  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 8004a96:	4ba0      	ldr	r3, [pc, #640]	; (8004d18 <statemachine+0x1728>)
 8004a98:	ed93 7b00 	vldr	d7, [r3]
 8004a9c:	4b9d      	ldr	r3, [pc, #628]	; (8004d14 <statemachine+0x1724>)
 8004a9e:	ed93 6b00 	vldr	d6, [r3]
 8004aa2:	4b9e      	ldr	r3, [pc, #632]	; (8004d1c <statemachine+0x172c>)
 8004aa4:	ed93 5b00 	vldr	d5, [r3]
 8004aa8:	4b9a      	ldr	r3, [pc, #616]	; (8004d14 <statemachine+0x1724>)
 8004aaa:	ed93 4b04 	vldr	d4, [r3, #16]
 8004aae:	eeb0 3a44 	vmov.f32	s6, s8
 8004ab2:	eef0 3a64 	vmov.f32	s7, s9
 8004ab6:	eeb0 2a45 	vmov.f32	s4, s10
 8004aba:	eef0 2a65 	vmov.f32	s5, s11
 8004abe:	eeb0 1a46 	vmov.f32	s2, s12
 8004ac2:	eef0 1a66 	vmov.f32	s3, s13
 8004ac6:	eeb0 0a47 	vmov.f32	s0, s14
 8004aca:	eef0 0a67 	vmov.f32	s1, s15
 8004ace:	f7fd fbb3 	bl	8002238 <distancecalc>
 8004ad2:	ec51 0b10 	vmov	r0, r1, d0
 8004ad6:	a388      	add	r3, pc, #544	; (adr r3, 8004cf8 <statemachine+0x1708>)
 8004ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004adc:	f7fc f81c 	bl	8000b18 <__aeabi_dcmpgt>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d02b      	beq.n	8004b3e <statemachine+0x154e>
							  myData.latitude=oldlat;
 8004ae6:	4b8c      	ldr	r3, [pc, #560]	; (8004d18 <statemachine+0x1728>)
 8004ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aec:	4989      	ldr	r1, [pc, #548]	; (8004d14 <statemachine+0x1724>)
 8004aee:	e9c1 2300 	strd	r2, r3, [r1]
							  myData.longitude=oldlong;
 8004af2:	4b8a      	ldr	r3, [pc, #552]	; (8004d1c <statemachine+0x172c>)
 8004af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af8:	4986      	ldr	r1, [pc, #536]	; (8004d14 <statemachine+0x1724>)
 8004afa:	e9c1 2304 	strd	r2, r3, [r1, #16]
							  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004afe:	4b89      	ldr	r3, [pc, #548]	; (8004d24 <statemachine+0x1734>)
 8004b00:	edd3 7a00 	vldr	s15, [r3]
 8004b04:	4b88      	ldr	r3, [pc, #544]	; (8004d28 <statemachine+0x1738>)
 8004b06:	ed93 7a00 	vldr	s14, [r3]
 8004b0a:	4b82      	ldr	r3, [pc, #520]	; (8004d14 <statemachine+0x1724>)
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	4a81      	ldr	r2, [pc, #516]	; (8004d14 <statemachine+0x1724>)
 8004b10:	edd2 6a08 	vldr	s13, [r2, #32]
 8004b14:	eeb0 1a66 	vmov.f32	s2, s13
 8004b18:	461a      	mov	r2, r3
 8004b1a:	497e      	ldr	r1, [pc, #504]	; (8004d14 <statemachine+0x1724>)
 8004b1c:	eef0 0a47 	vmov.f32	s1, s14
 8004b20:	eeb0 0a67 	vmov.f32	s0, s15
 8004b24:	4881      	ldr	r0, [pc, #516]	; (8004d2c <statemachine+0x173c>)
 8004b26:	f7fd fd57 	bl	80025d8 <csvframe>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4a80      	ldr	r2, [pc, #512]	; (8004d30 <statemachine+0x1740>)
 8004b2e:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004b30:	4b7f      	ldr	r3, [pc, #508]	; (8004d30 <statemachine+0x1740>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4619      	mov	r1, r3
 8004b36:	487d      	ldr	r0, [pc, #500]	; (8004d2c <statemachine+0x173c>)
 8004b38:	f7fd fe84 	bl	8002844 <writebuffertoflash>
 8004b3c:	e048      	b.n	8004bd0 <statemachine+0x15e0>
							  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8004b3e:	4b76      	ldr	r3, [pc, #472]	; (8004d18 <statemachine+0x1728>)
 8004b40:	ed93 7b00 	vldr	d7, [r3]
 8004b44:	4b73      	ldr	r3, [pc, #460]	; (8004d14 <statemachine+0x1724>)
 8004b46:	ed93 6b00 	vldr	d6, [r3]
 8004b4a:	4b74      	ldr	r3, [pc, #464]	; (8004d1c <statemachine+0x172c>)
 8004b4c:	ed93 5b00 	vldr	d5, [r3]
 8004b50:	4b70      	ldr	r3, [pc, #448]	; (8004d14 <statemachine+0x1724>)
 8004b52:	ed93 4b04 	vldr	d4, [r3, #16]
 8004b56:	eeb0 3a44 	vmov.f32	s6, s8
 8004b5a:	eef0 3a64 	vmov.f32	s7, s9
 8004b5e:	eeb0 2a45 	vmov.f32	s4, s10
 8004b62:	eef0 2a65 	vmov.f32	s5, s11
 8004b66:	eeb0 1a46 	vmov.f32	s2, s12
 8004b6a:	eef0 1a66 	vmov.f32	s3, s13
 8004b6e:	eeb0 0a47 	vmov.f32	s0, s14
 8004b72:	eef0 0a67 	vmov.f32	s1, s15
 8004b76:	f7fd fb5f 	bl	8002238 <distancecalc>
 8004b7a:	ec51 0b10 	vmov	r0, r1, d0
 8004b7e:	4b6d      	ldr	r3, [pc, #436]	; (8004d34 <statemachine+0x1744>)
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f7fb fb82 	bl	800028c <__adddf3>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4969      	ldr	r1, [pc, #420]	; (8004d34 <statemachine+0x1744>)
 8004b8e:	e9c1 2300 	strd	r2, r3, [r1]
							  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004b92:	4b64      	ldr	r3, [pc, #400]	; (8004d24 <statemachine+0x1734>)
 8004b94:	edd3 7a00 	vldr	s15, [r3]
 8004b98:	4b63      	ldr	r3, [pc, #396]	; (8004d28 <statemachine+0x1738>)
 8004b9a:	ed93 7a00 	vldr	s14, [r3]
 8004b9e:	4b5d      	ldr	r3, [pc, #372]	; (8004d14 <statemachine+0x1724>)
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	4a5c      	ldr	r2, [pc, #368]	; (8004d14 <statemachine+0x1724>)
 8004ba4:	edd2 6a08 	vldr	s13, [r2, #32]
 8004ba8:	eeb0 1a66 	vmov.f32	s2, s13
 8004bac:	461a      	mov	r2, r3
 8004bae:	4959      	ldr	r1, [pc, #356]	; (8004d14 <statemachine+0x1724>)
 8004bb0:	eef0 0a47 	vmov.f32	s1, s14
 8004bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8004bb8:	485c      	ldr	r0, [pc, #368]	; (8004d2c <statemachine+0x173c>)
 8004bba:	f7fd fd0d 	bl	80025d8 <csvframe>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	4a5b      	ldr	r2, [pc, #364]	; (8004d30 <statemachine+0x1740>)
 8004bc2:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004bc4:	4b5a      	ldr	r3, [pc, #360]	; (8004d30 <statemachine+0x1740>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4858      	ldr	r0, [pc, #352]	; (8004d2c <statemachine+0x173c>)
 8004bcc:	f7fd fe3a 	bl	8002844 <writebuffertoflash>
						  enablewrite=0;
 8004bd0:	4b4f      	ldr	r3, [pc, #316]	; (8004d10 <statemachine+0x1720>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
					  if(doubledonnee==0){
 8004bd6:	4b58      	ldr	r3, [pc, #352]	; (8004d38 <statemachine+0x1748>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d111      	bne.n	8004c02 <statemachine+0x1612>
					 	ssd1306_SetCursor(32,32);
 8004bde:	2120      	movs	r1, #32
 8004be0:	2020      	movs	r0, #32
 8004be2:	f7fe f8a1 	bl	8002d28 <ssd1306_SetCursor>
					 	snprintf((char *)bufferscreen,50,"p=%d",pagenumber);
 8004be6:	4b47      	ldr	r3, [pc, #284]	; (8004d04 <statemachine+0x1714>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a54      	ldr	r2, [pc, #336]	; (8004d3c <statemachine+0x174c>)
 8004bec:	2132      	movs	r1, #50	; 0x32
 8004bee:	4854      	ldr	r0, [pc, #336]	; (8004d40 <statemachine+0x1750>)
 8004bf0:	f011 fd64 	bl	80166bc <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004bf4:	4a53      	ldr	r2, [pc, #332]	; (8004d44 <statemachine+0x1754>)
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	ca06      	ldmia	r2, {r1, r2}
 8004bfa:	4851      	ldr	r0, [pc, #324]	; (8004d40 <statemachine+0x1750>)
 8004bfc:	f7fe f86e 	bl	8002cdc <ssd1306_WriteString>
 8004c00:	e013      	b.n	8004c2a <statemachine+0x163a>
					 	ssd1306_SetCursor(32,32);
 8004c02:	2120      	movs	r1, #32
 8004c04:	2020      	movs	r0, #32
 8004c06:	f7fe f88f 	bl	8002d28 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50,"d=%0.1lfm",distanceparcouru);
 8004c0a:	4b4a      	ldr	r3, [pc, #296]	; (8004d34 <statemachine+0x1744>)
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	e9cd 2300 	strd	r2, r3, [sp]
 8004c14:	4a4c      	ldr	r2, [pc, #304]	; (8004d48 <statemachine+0x1758>)
 8004c16:	2132      	movs	r1, #50	; 0x32
 8004c18:	4849      	ldr	r0, [pc, #292]	; (8004d40 <statemachine+0x1750>)
 8004c1a:	f011 fd4f 	bl	80166bc <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004c1e:	4a49      	ldr	r2, [pc, #292]	; (8004d44 <statemachine+0x1754>)
 8004c20:	2301      	movs	r3, #1
 8004c22:	ca06      	ldmia	r2, {r1, r2}
 8004c24:	4846      	ldr	r0, [pc, #280]	; (8004d40 <statemachine+0x1750>)
 8004c26:	f7fe f859 	bl	8002cdc <ssd1306_WriteString>
					 	ssd1306_SetCursor(32,42);
 8004c2a:	212a      	movs	r1, #42	; 0x2a
 8004c2c:	2020      	movs	r0, #32
 8004c2e:	f7fe f87b 	bl	8002d28 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 8004c32:	4b38      	ldr	r3, [pc, #224]	; (8004d14 <statemachine+0x1724>)
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	4a45      	ldr	r2, [pc, #276]	; (8004d4c <statemachine+0x175c>)
 8004c38:	2132      	movs	r1, #50	; 0x32
 8004c3a:	4841      	ldr	r0, [pc, #260]	; (8004d40 <statemachine+0x1750>)
 8004c3c:	f011 fd3e 	bl	80166bc <sniprintf>
					 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004c40:	4a43      	ldr	r2, [pc, #268]	; (8004d50 <statemachine+0x1760>)
 8004c42:	2301      	movs	r3, #1
 8004c44:	ca06      	ldmia	r2, {r1, r2}
 8004c46:	483e      	ldr	r0, [pc, #248]	; (8004d40 <statemachine+0x1750>)
 8004c48:	f7fe f848 	bl	8002cdc <ssd1306_WriteString>
					 	batterygauge(vbat,34, 50,1);
 8004c4c:	4b36      	ldr	r3, [pc, #216]	; (8004d28 <statemachine+0x1738>)
 8004c4e:	edd3 7a00 	vldr	s15, [r3]
 8004c52:	2201      	movs	r2, #1
 8004c54:	2132      	movs	r1, #50	; 0x32
 8004c56:	2022      	movs	r0, #34	; 0x22
 8004c58:	eeb0 0a67 	vmov.f32	s0, s15
 8004c5c:	f7fe fa80 	bl	8003160 <batterygauge>
					 	ssd1306_SetCursor(60,50);
 8004c60:	2132      	movs	r1, #50	; 0x32
 8004c62:	203c      	movs	r0, #60	; 0x3c
 8004c64:	f7fe f860 	bl	8002d28 <ssd1306_SetCursor>
					 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 8004c68:	4b2f      	ldr	r3, [pc, #188]	; (8004d28 <statemachine+0x1738>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fb fc6b 	bl	8000548 <__aeabi_f2d>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	e9cd 2300 	strd	r2, r3, [sp]
 8004c7a:	4a36      	ldr	r2, [pc, #216]	; (8004d54 <statemachine+0x1764>)
 8004c7c:	2132      	movs	r1, #50	; 0x32
 8004c7e:	4830      	ldr	r0, [pc, #192]	; (8004d40 <statemachine+0x1750>)
 8004c80:	f011 fd1c 	bl	80166bc <sniprintf>
					 	if(cptdoubledonnee==3){
 8004c84:	4b34      	ldr	r3, [pc, #208]	; (8004d58 <statemachine+0x1768>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d108      	bne.n	8004c9e <statemachine+0x16ae>
					 	  		doubledonnee=1-doubledonnee;
 8004c8c:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <statemachine+0x1748>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f1c3 0301 	rsb	r3, r3, #1
 8004c94:	4a28      	ldr	r2, [pc, #160]	; (8004d38 <statemachine+0x1748>)
 8004c96:	6013      	str	r3, [r2, #0]
					 	  		cptdoubledonnee=0;
 8004c98:	4b2f      	ldr	r3, [pc, #188]	; (8004d58 <statemachine+0x1768>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
					 	erasetime=HAL_GetTick()-erasetime;
 8004c9e:	f001 fba5 	bl	80063ec <HAL_GetTick>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4a16      	ldr	r2, [pc, #88]	; (8004d00 <statemachine+0x1710>)
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	461a      	mov	r2, r3
 8004cac:	4b14      	ldr	r3, [pc, #80]	; (8004d00 <statemachine+0x1710>)
 8004cae:	601a      	str	r2, [r3, #0]
					  if(BTN_B>=1){
 8004cb0:	4b2a      	ldr	r3, [pc, #168]	; (8004d5c <statemachine+0x176c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	dd0e      	ble.n	8004cd6 <statemachine+0x16e6>
					  						  balisestate--;
 8004cb8:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <statemachine+0x171c>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <statemachine+0x171c>)
 8004cc2:	701a      	strb	r2, [r3, #0]
					  						  BTN_B=0;
 8004cc4:	4b25      	ldr	r3, [pc, #148]	; (8004d5c <statemachine+0x176c>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
					  						  BTN_A=0;
 8004cca:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <statemachine+0x1770>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
					  						  HAL_TIM_Base_Stop_IT(&htim7);
 8004cd0:	480d      	ldr	r0, [pc, #52]	; (8004d08 <statemachine+0x1718>)
 8004cd2:	f008 f941 	bl	800cf58 <HAL_TIM_Base_Stop_IT>
					  if(BTN_B_LONG>=1){
 8004cd6:	4b23      	ldr	r3, [pc, #140]	; (8004d64 <statemachine+0x1774>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f340 8097 	ble.w	8004e0e <statemachine+0x181e>
						distanceparcouru=0;
 8004ce0:	4914      	ldr	r1, [pc, #80]	; (8004d34 <statemachine+0x1744>)
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	e9c1 2300 	strd	r2, r3, [r1]
					  	BTN_B_LONG=0;
 8004cee:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <statemachine+0x1774>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]
					  break;
 8004cf4:	e08b      	b.n	8004e0e <statemachine+0x181e>
 8004cf6:	bf00      	nop
 8004cf8:	00000000 	.word	0x00000000
 8004cfc:	40616000 	.word	0x40616000
 8004d00:	20000afc 	.word	0x20000afc
 8004d04:	20000948 	.word	0x20000948
 8004d08:	20001164 	.word	0x20001164
 8004d0c:	2000047e 	.word	0x2000047e
 8004d10:	20000b30 	.word	0x20000b30
 8004d14:	200006c8 	.word	0x200006c8
 8004d18:	20000b20 	.word	0x20000b20
 8004d1c:	20000b28 	.word	0x20000b28
 8004d20:	200004c4 	.word	0x200004c4
 8004d24:	20000738 	.word	0x20000738
 8004d28:	20000740 	.word	0x20000740
 8004d2c:	20000744 	.word	0x20000744
 8004d30:	20000af8 	.word	0x20000af8
 8004d34:	20000b18 	.word	0x20000b18
 8004d38:	20000b0c 	.word	0x20000b0c
 8004d3c:	0801af94 	.word	0x0801af94
 8004d40:	20000968 	.word	0x20000968
 8004d44:	20000014 	.word	0x20000014
 8004d48:	0801af9c 	.word	0x0801af9c
 8004d4c:	0801afa8 	.word	0x0801afa8
 8004d50:	2000000c 	.word	0x2000000c
 8004d54:	0801afb0 	.word	0x0801afb0
 8004d58:	20000b10 	.word	0x20000b10
 8004d5c:	2000070c 	.word	0x2000070c
 8004d60:	20000708 	.word	0x20000708
 8004d64:	20000b4c 	.word	0x20000b4c
					  ssd1306_SetCursor(32,32);
 8004d68:	2120      	movs	r1, #32
 8004d6a:	2020      	movs	r0, #32
 8004d6c:	f7fd ffdc 	bl	8002d28 <ssd1306_SetCursor>
					  ssd1306_WriteString("fin de",Font_6x8,White);
 8004d70:	4aa0      	ldr	r2, [pc, #640]	; (8004ff4 <statemachine+0x1a04>)
 8004d72:	2301      	movs	r3, #1
 8004d74:	ca06      	ldmia	r2, {r1, r2}
 8004d76:	48a0      	ldr	r0, [pc, #640]	; (8004ff8 <statemachine+0x1a08>)
 8004d78:	f7fd ffb0 	bl	8002cdc <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 8004d7c:	2128      	movs	r1, #40	; 0x28
 8004d7e:	2020      	movs	r0, #32
 8004d80:	f7fd ffd2 	bl	8002d28 <ssd1306_SetCursor>
					  ssd1306_WriteString("memoire",Font_6x8,White);
 8004d84:	4a9b      	ldr	r2, [pc, #620]	; (8004ff4 <statemachine+0x1a04>)
 8004d86:	2301      	movs	r3, #1
 8004d88:	ca06      	ldmia	r2, {r1, r2}
 8004d8a:	489c      	ldr	r0, [pc, #624]	; (8004ffc <statemachine+0x1a0c>)
 8004d8c:	f7fd ffa6 	bl	8002cdc <ssd1306_WriteString>
					  ssd1306_SetCursor(32,48);
 8004d90:	2130      	movs	r1, #48	; 0x30
 8004d92:	2020      	movs	r0, #32
 8004d94:	f7fd ffc8 	bl	8002d28 <ssd1306_SetCursor>
					  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 8004d98:	4b99      	ldr	r3, [pc, #612]	; (8005000 <statemachine+0x1a10>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	4b99      	ldr	r3, [pc, #612]	; (8005004 <statemachine+0x1a14>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	4613      	mov	r3, r2
 8004da4:	4a98      	ldr	r2, [pc, #608]	; (8005008 <statemachine+0x1a18>)
 8004da6:	2132      	movs	r1, #50	; 0x32
 8004da8:	4898      	ldr	r0, [pc, #608]	; (800500c <statemachine+0x1a1c>)
 8004daa:	f011 fc87 	bl	80166bc <sniprintf>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004dae:	4a91      	ldr	r2, [pc, #580]	; (8004ff4 <statemachine+0x1a04>)
 8004db0:	2301      	movs	r3, #1
 8004db2:	ca06      	ldmia	r2, {r1, r2}
 8004db4:	4895      	ldr	r0, [pc, #596]	; (800500c <statemachine+0x1a1c>)
 8004db6:	f7fd ff91 	bl	8002cdc <ssd1306_WriteString>
					  if(BTN_A>=1){
 8004dba:	4b95      	ldr	r3, [pc, #596]	; (8005010 <statemachine+0x1a20>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	dd0e      	ble.n	8004de0 <statemachine+0x17f0>
					  				  			 	state++;
 8004dc2:	4b94      	ldr	r3, [pc, #592]	; (8005014 <statemachine+0x1a24>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	4b92      	ldr	r3, [pc, #584]	; (8005014 <statemachine+0x1a24>)
 8004dcc:	701a      	strb	r2, [r3, #0]
					  				  			 	BTN_A=0;
 8004dce:	4b90      	ldr	r3, [pc, #576]	; (8005010 <statemachine+0x1a20>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
					  				  			 	BTN_B=0;
 8004dd4:	4b90      	ldr	r3, [pc, #576]	; (8005018 <statemachine+0x1a28>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
					  				  			settimeen=0;
 8004dda:	4b90      	ldr	r3, [pc, #576]	; (800501c <statemachine+0x1a2c>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
					  if(BTN_A_LONG>=1){
 8004de0:	4b8f      	ldr	r3, [pc, #572]	; (8005020 <statemachine+0x1a30>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f340 8386 	ble.w	80054f6 <statemachine+0x1f06>
					  				 									 									  			 	state--;
 8004dea:	4b8a      	ldr	r3, [pc, #552]	; (8005014 <statemachine+0x1a24>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	4b88      	ldr	r3, [pc, #544]	; (8005014 <statemachine+0x1a24>)
 8004df4:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 8004df6:	4b86      	ldr	r3, [pc, #536]	; (8005010 <statemachine+0x1a20>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 8004dfc:	4b86      	ldr	r3, [pc, #536]	; (8005018 <statemachine+0x1a28>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 8004e02:	4b87      	ldr	r3, [pc, #540]	; (8005020 <statemachine+0x1a30>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]
				  break;
 8004e08:	e375      	b.n	80054f6 <statemachine+0x1f06>
					  break;
 8004e0a:	bf00      	nop
 8004e0c:	e373      	b.n	80054f6 <statemachine+0x1f06>
					  break;
 8004e0e:	bf00      	nop
				  break;
 8004e10:	e371      	b.n	80054f6 <statemachine+0x1f06>


			  case STATE_USB:
				  ssd1306_Fill(Black);
 8004e12:	2000      	movs	r0, #0
 8004e14:	f7fd fe46 	bl	8002aa4 <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 8004e18:	2120      	movs	r1, #32
 8004e1a:	2020      	movs	r0, #32
 8004e1c:	f7fd ff84 	bl	8002d28 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8004e20:	4a74      	ldr	r2, [pc, #464]	; (8004ff4 <statemachine+0x1a04>)
 8004e22:	2301      	movs	r3, #1
 8004e24:	ca06      	ldmia	r2, {r1, r2}
 8004e26:	487f      	ldr	r0, [pc, #508]	; (8005024 <statemachine+0x1a34>)
 8004e28:	f7fd ff58 	bl	8002cdc <ssd1306_WriteString>
				  switch(usbstate){
 8004e2c:	4b7e      	ldr	r3, [pc, #504]	; (8005028 <statemachine+0x1a38>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	f000 8161 	beq.w	80050f8 <statemachine+0x1b08>
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	f300 835f 	bgt.w	80054fa <statemachine+0x1f0a>
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <statemachine+0x1856>
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d042      	beq.n	8004eca <statemachine+0x18da>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 8004e44:	e359      	b.n	80054fa <statemachine+0x1f0a>
				 					  ssd1306_SetCursor(32,40);
 8004e46:	2128      	movs	r1, #40	; 0x28
 8004e48:	2020      	movs	r0, #32
 8004e4a:	f7fd ff6d 	bl	8002d28 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8004e4e:	4a69      	ldr	r2, [pc, #420]	; (8004ff4 <statemachine+0x1a04>)
 8004e50:	2301      	movs	r3, #1
 8004e52:	ca06      	ldmia	r2, {r1, r2}
 8004e54:	4875      	ldr	r0, [pc, #468]	; (800502c <statemachine+0x1a3c>)
 8004e56:	f7fd ff41 	bl	8002cdc <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8004e5a:	4b75      	ldr	r3, [pc, #468]	; (8005030 <statemachine+0x1a40>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8004e60:	4b6d      	ldr	r3, [pc, #436]	; (8005018 <statemachine+0x1a28>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	dd0b      	ble.n	8004e80 <statemachine+0x1890>
				 						  usbstate++;
 8004e68:	4b6f      	ldr	r3, [pc, #444]	; (8005028 <statemachine+0x1a38>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	4b6d      	ldr	r3, [pc, #436]	; (8005028 <statemachine+0x1a38>)
 8004e72:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8004e74:	4b68      	ldr	r3, [pc, #416]	; (8005018 <statemachine+0x1a28>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8004e7a:	4b65      	ldr	r3, [pc, #404]	; (8005010 <statemachine+0x1a20>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8004e80:	4b63      	ldr	r3, [pc, #396]	; (8005010 <statemachine+0x1a20>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	dd0b      	ble.n	8004ea0 <statemachine+0x18b0>
				 						 state++;
 8004e88:	4b62      	ldr	r3, [pc, #392]	; (8005014 <statemachine+0x1a24>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	4b60      	ldr	r3, [pc, #384]	; (8005014 <statemachine+0x1a24>)
 8004e92:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8004e94:	4b5e      	ldr	r3, [pc, #376]	; (8005010 <statemachine+0x1a20>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8004e9a:	4b5f      	ldr	r3, [pc, #380]	; (8005018 <statemachine+0x1a28>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8004ea0:	4b5f      	ldr	r3, [pc, #380]	; (8005020 <statemachine+0x1a30>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f340 8207 	ble.w	80052b8 <statemachine+0x1cc8>
				 									 									 									  			 	state--;
 8004eaa:	4b5a      	ldr	r3, [pc, #360]	; (8005014 <statemachine+0x1a24>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	4b58      	ldr	r3, [pc, #352]	; (8005014 <statemachine+0x1a24>)
 8004eb4:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 8004eb6:	4b56      	ldr	r3, [pc, #344]	; (8005010 <statemachine+0x1a20>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 8004ebc:	4b56      	ldr	r3, [pc, #344]	; (8005018 <statemachine+0x1a28>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 8004ec2:	4b57      	ldr	r3, [pc, #348]	; (8005020 <statemachine+0x1a30>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
				 					  break;
 8004ec8:	e1f6      	b.n	80052b8 <statemachine+0x1cc8>
				 					 ssd1306_SetCursor(32,40);
 8004eca:	2128      	movs	r1, #40	; 0x28
 8004ecc:	2020      	movs	r0, #32
 8004ece:	f7fd ff2b 	bl	8002d28 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8004ed2:	4a48      	ldr	r2, [pc, #288]	; (8004ff4 <statemachine+0x1a04>)
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	ca06      	ldmia	r2, {r1, r2}
 8004ed8:	4856      	ldr	r0, [pc, #344]	; (8005034 <statemachine+0x1a44>)
 8004eda:	f7fd feff 	bl	8002cdc <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 8004ede:	2130      	movs	r1, #48	; 0x30
 8004ee0:	2020      	movs	r0, #32
 8004ee2:	f7fd ff21 	bl	8002d28 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8004ee6:	4a43      	ldr	r2, [pc, #268]	; (8004ff4 <statemachine+0x1a04>)
 8004ee8:	2301      	movs	r3, #1
 8004eea:	ca06      	ldmia	r2, {r1, r2}
 8004eec:	4852      	ldr	r0, [pc, #328]	; (8005038 <statemachine+0x1a48>)
 8004eee:	f7fd fef5 	bl	8002cdc <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8004ef2:	4b52      	ldr	r3, [pc, #328]	; (800503c <statemachine+0x1a4c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d137      	bne.n	8004f6a <statemachine+0x197a>
					 					 ssd1306_Fill(Black);
 8004efa:	2000      	movs	r0, #0
 8004efc:	f7fd fdd2 	bl	8002aa4 <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,32);
 8004f00:	2120      	movs	r1, #32
 8004f02:	2020      	movs	r0, #32
 8004f04:	f7fd ff10 	bl	8002d28 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 8004f08:	4a3a      	ldr	r2, [pc, #232]	; (8004ff4 <statemachine+0x1a04>)
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	ca06      	ldmia	r2, {r1, r2}
 8004f0e:	4845      	ldr	r0, [pc, #276]	; (8005024 <statemachine+0x1a34>)
 8004f10:	f7fd fee4 	bl	8002cdc <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,40);
 8004f14:	2128      	movs	r1, #40	; 0x28
 8004f16:	2020      	movs	r0, #32
 8004f18:	f7fd ff06 	bl	8002d28 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 8004f1c:	4a48      	ldr	r2, [pc, #288]	; (8005040 <statemachine+0x1a50>)
 8004f1e:	2301      	movs	r3, #1
 8004f20:	ca06      	ldmia	r2, {r1, r2}
 8004f22:	4848      	ldr	r0, [pc, #288]	; (8005044 <statemachine+0x1a54>)
 8004f24:	f7fd feda 	bl	8002cdc <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,56);
 8004f28:	2138      	movs	r1, #56	; 0x38
 8004f2a:	2020      	movs	r0, #32
 8004f2c:	f7fd fefc 	bl	8002d28 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 8004f30:	4b45      	ldr	r3, [pc, #276]	; (8005048 <statemachine+0x1a58>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	ee07 3a90 	vmov	s15, r3
 8004f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f3c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800504c <statemachine+0x1a5c>
 8004f40:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004f44:	ee16 0a90 	vmov	r0, s13
 8004f48:	f7fb fafe 	bl	8000548 <__aeabi_f2d>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	e9cd 2300 	strd	r2, r3, [sp]
 8004f54:	4a3e      	ldr	r2, [pc, #248]	; (8005050 <statemachine+0x1a60>)
 8004f56:	2132      	movs	r1, #50	; 0x32
 8004f58:	482c      	ldr	r0, [pc, #176]	; (800500c <statemachine+0x1a1c>)
 8004f5a:	f011 fbaf 	bl	80166bc <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004f5e:	4a25      	ldr	r2, [pc, #148]	; (8004ff4 <statemachine+0x1a04>)
 8004f60:	2301      	movs	r3, #1
 8004f62:	ca06      	ldmia	r2, {r1, r2}
 8004f64:	4829      	ldr	r0, [pc, #164]	; (800500c <statemachine+0x1a1c>)
 8004f66:	f7fd feb9 	bl	8002cdc <ssd1306_WriteString>
				 					if(BTN_A>=1){
 8004f6a:	4b29      	ldr	r3, [pc, #164]	; (8005010 <statemachine+0x1a20>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f340 80b0 	ble.w	80050d4 <statemachine+0x1ae4>
				 						erasetime=HAL_GetTick();
 8004f74:	f001 fa3a 	bl	80063ec <HAL_GetTick>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4b32      	ldr	r3, [pc, #200]	; (8005048 <statemachine+0x1a58>)
 8004f7e:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8004f80:	2300      	movs	r3, #0
 8004f82:	60bb      	str	r3, [r7, #8]
 8004f84:	e073      	b.n	800506e <statemachine+0x1a7e>
				 							ssd1306_Fill(Black);
 8004f86:	2000      	movs	r0, #0
 8004f88:	f7fd fd8c 	bl	8002aa4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8004f8c:	2120      	movs	r1, #32
 8004f8e:	2020      	movs	r0, #32
 8004f90:	f7fd feca 	bl	8002d28 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 8004f94:	4a17      	ldr	r2, [pc, #92]	; (8004ff4 <statemachine+0x1a04>)
 8004f96:	2301      	movs	r3, #1
 8004f98:	ca06      	ldmia	r2, {r1, r2}
 8004f9a:	4822      	ldr	r0, [pc, #136]	; (8005024 <statemachine+0x1a34>)
 8004f9c:	f7fd fe9e 	bl	8002cdc <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	482b      	ldr	r0, [pc, #172]	; (8005054 <statemachine+0x1a64>)
 8004fa6:	f00e fe10 	bl	8013bca <SPIF_EraseSector>
				 							if(i>=1){
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	dd55      	ble.n	800505c <statemachine+0x1a6c>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2264      	movs	r2, #100	; 0x64
 8004fb4:	fb02 f303 	mul.w	r3, r2, r3
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8004fc0:	4b10      	ldr	r3, [pc, #64]	; (8005004 <statemachine+0x1a14>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	da00      	bge.n	8004fca <statemachine+0x19da>
 8004fc8:	330f      	adds	r3, #15
 8004fca:	111b      	asrs	r3, r3, #4
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fb faa9 	bl	8000524 <__aeabi_i2d>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	f7fb fdbd 	bl	8000b58 <__aeabi_d2iz>
 8004fde:	ee07 0a90 	vmov	s15, r0
 8004fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fe6:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8004fea:	eeb0 0a47 	vmov.f32	s0, s14
 8004fee:	f7fe fa33 	bl	8003458 <percentage>
 8004ff2:	e037      	b.n	8005064 <statemachine+0x1a74>
 8004ff4:	2000000c 	.word	0x2000000c
 8004ff8:	0801afb8 	.word	0x0801afb8
 8004ffc:	0801afc0 	.word	0x0801afc0
 8005000:	20000944 	.word	0x20000944
 8005004:	20000948 	.word	0x20000948
 8005008:	0801afc8 	.word	0x0801afc8
 800500c:	20000968 	.word	0x20000968
 8005010:	20000708 	.word	0x20000708
 8005014:	20000478 	.word	0x20000478
 8005018:	2000070c 	.word	0x2000070c
 800501c:	20000b38 	.word	0x20000b38
 8005020:	20000b50 	.word	0x20000b50
 8005024:	0801afd0 	.word	0x0801afd0
 8005028:	2000047d 	.word	0x2000047d
 800502c:	0801afd4 	.word	0x0801afd4
 8005030:	20000b04 	.word	0x20000b04
 8005034:	0801afe0 	.word	0x0801afe0
 8005038:	0801afe8 	.word	0x0801afe8
 800503c:	20000b00 	.word	0x20000b00
 8005040:	20000014 	.word	0x20000014
 8005044:	0801aff4 	.word	0x0801aff4
 8005048:	20000afc 	.word	0x20000afc
 800504c:	447a0000 	.word	0x447a0000
 8005050:	0801aff8 	.word	0x0801aff8
 8005054:	20000710 	.word	0x20000710
 8005058:	00000000 	.word	0x00000000
				 								percentage((float) 0);
 800505c:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 8005058 <statemachine+0x1a68>
 8005060:	f7fe f9fa 	bl	8003458 <percentage>
				 							ssd1306_UpdateScreen();
 8005064:	f7fd fd36 	bl	8002ad4 <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	3301      	adds	r3, #1
 800506c:	60bb      	str	r3, [r7, #8]
 800506e:	4b95      	ldr	r3, [pc, #596]	; (80052c4 <statemachine+0x1cd4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	da00      	bge.n	8005078 <statemachine+0x1a88>
 8005076:	330f      	adds	r3, #15
 8005078:	111b      	asrs	r3, r3, #4
 800507a:	4618      	mov	r0, r3
 800507c:	f7fb fa52 	bl	8000524 <__aeabi_i2d>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4610      	mov	r0, r2
 8005086:	4619      	mov	r1, r3
 8005088:	f7fb fd66 	bl	8000b58 <__aeabi_d2iz>
 800508c:	4602      	mov	r2, r0
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4293      	cmp	r3, r2
 8005092:	f77f af78 	ble.w	8004f86 <statemachine+0x1996>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 8005096:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800509a:	488b      	ldr	r0, [pc, #556]	; (80052c8 <statemachine+0x1cd8>)
 800509c:	f00e fd95 	bl	8013bca <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 80050a0:	f001 f9a4 	bl	80063ec <HAL_GetTick>
 80050a4:	4603      	mov	r3, r0
 80050a6:	4a89      	ldr	r2, [pc, #548]	; (80052cc <statemachine+0x1cdc>)
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b87      	ldr	r3, [pc, #540]	; (80052cc <statemachine+0x1cdc>)
 80050b0:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 80050b2:	4b87      	ldr	r3, [pc, #540]	; (80052d0 <statemachine+0x1ce0>)
 80050b4:	2201      	movs	r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 80050b8:	4b86      	ldr	r3, [pc, #536]	; (80052d4 <statemachine+0x1ce4>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 80050be:	4b81      	ldr	r3, [pc, #516]	; (80052c4 <statemachine+0x1cd4>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
				 						storeindex();
 80050c4:	f7fd fb12 	bl	80026ec <storeindex>
				 						BTN_A=0;
 80050c8:	4b83      	ldr	r3, [pc, #524]	; (80052d8 <statemachine+0x1ce8>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 80050ce:	4b83      	ldr	r3, [pc, #524]	; (80052dc <statemachine+0x1cec>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 80050d4:	4b81      	ldr	r3, [pc, #516]	; (80052dc <statemachine+0x1cec>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f340 80ef 	ble.w	80052bc <statemachine+0x1ccc>
					 						usbstate++;
 80050de:	4b80      	ldr	r3, [pc, #512]	; (80052e0 <statemachine+0x1cf0>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	3301      	adds	r3, #1
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	4b7e      	ldr	r3, [pc, #504]	; (80052e0 <statemachine+0x1cf0>)
 80050e8:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 80050ea:	4b7c      	ldr	r3, [pc, #496]	; (80052dc <statemachine+0x1cec>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 80050f0:	4b79      	ldr	r3, [pc, #484]	; (80052d8 <statemachine+0x1ce8>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
				 			  break;
 80050f6:	e0e1      	b.n	80052bc <statemachine+0x1ccc>
				 					ssd1306_Fill(Black);
 80050f8:	2000      	movs	r0, #0
 80050fa:	f7fd fcd3 	bl	8002aa4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 80050fe:	2128      	movs	r1, #40	; 0x28
 8005100:	2020      	movs	r0, #32
 8005102:	f7fd fe11 	bl	8002d28 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8005106:	4a77      	ldr	r2, [pc, #476]	; (80052e4 <statemachine+0x1cf4>)
 8005108:	2301      	movs	r3, #1
 800510a:	ca06      	ldmia	r2, {r1, r2}
 800510c:	4876      	ldr	r0, [pc, #472]	; (80052e8 <statemachine+0x1cf8>)
 800510e:	f7fd fde5 	bl	8002cdc <ssd1306_WriteString>
				 					if(pagenumber>0){
 8005112:	4b6c      	ldr	r3, [pc, #432]	; (80052c4 <statemachine+0x1cd4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	dd7d      	ble.n	8005216 <statemachine+0x1c26>
				 					int i=0;
 800511a:	2300      	movs	r3, #0
 800511c:	607b      	str	r3, [r7, #4]
				 					if(usbtransmiten==0){
 800511e:	4b73      	ldr	r3, [pc, #460]	; (80052ec <statemachine+0x1cfc>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d165      	bne.n	80051f2 <statemachine+0x1c02>
				 						while(i<pagenumber){
 8005126:	e036      	b.n	8005196 <statemachine+0x1ba6>
				 							ssd1306_Fill(Black);
 8005128:	2000      	movs	r0, #0
 800512a:	f7fd fcbb 	bl	8002aa4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 800512e:	2120      	movs	r1, #32
 8005130:	2020      	movs	r0, #32
 8005132:	f7fd fdf9 	bl	8002d28 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8005136:	4a6b      	ldr	r2, [pc, #428]	; (80052e4 <statemachine+0x1cf4>)
 8005138:	2301      	movs	r3, #1
 800513a:	ca06      	ldmia	r2, {r1, r2}
 800513c:	486a      	ldr	r0, [pc, #424]	; (80052e8 <statemachine+0x1cf8>)
 800513e:	f7fd fdcd 	bl	8002cdc <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	2300      	movs	r3, #0
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800514c:	4a68      	ldr	r2, [pc, #416]	; (80052f0 <statemachine+0x1d00>)
 800514e:	485e      	ldr	r0, [pc, #376]	; (80052c8 <statemachine+0x1cd8>)
 8005150:	f00e fddc 	bl	8013d0c <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 8005154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005158:	4865      	ldr	r0, [pc, #404]	; (80052f0 <statemachine+0x1d00>)
 800515a:	f00e fed7 	bl	8013f0c <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2264      	movs	r2, #100	; 0x64
 8005162:	fb02 f303 	mul.w	r3, r2, r3
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800516e:	4b55      	ldr	r3, [pc, #340]	; (80052c4 <statemachine+0x1cd4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800517a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800517e:	eeb0 0a66 	vmov.f32	s0, s13
 8005182:	f7fe f969 	bl	8003458 <percentage>
				 							ssd1306_UpdateScreen();
 8005186:	f7fd fca5 	bl	8002ad4 <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 800518a:	207d      	movs	r0, #125	; 0x7d
 800518c:	f001 f93a 	bl	8006404 <HAL_Delay>
				 							i++;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3301      	adds	r3, #1
 8005194:	607b      	str	r3, [r7, #4]
				 						while(i<pagenumber){
 8005196:	4b4b      	ldr	r3, [pc, #300]	; (80052c4 <statemachine+0x1cd4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	429a      	cmp	r2, r3
 800519e:	dbc3      	blt.n	8005128 <statemachine+0x1b38>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 80051a0:	4b48      	ldr	r3, [pc, #288]	; (80052c4 <statemachine+0x1cd4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4619      	mov	r1, r3
 80051a6:	4b4b      	ldr	r3, [pc, #300]	; (80052d4 <statemachine+0x1ce4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	2300      	movs	r3, #0
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	4a4f      	ldr	r2, [pc, #316]	; (80052f0 <statemachine+0x1d00>)
 80051b4:	4844      	ldr	r0, [pc, #272]	; (80052c8 <statemachine+0x1cd8>)
 80051b6:	f00e fda9 	bl	8013d0c <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 80051ba:	4b46      	ldr	r3, [pc, #280]	; (80052d4 <statemachine+0x1ce4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	4619      	mov	r1, r3
 80051c2:	484b      	ldr	r0, [pc, #300]	; (80052f0 <statemachine+0x1d00>)
 80051c4:	f00e fea2 	bl	8013f0c <CDC_Transmit_FS>
				 						HAL_Delay(125);
 80051c8:	207d      	movs	r0, #125	; 0x7d
 80051ca:	f001 f91b 	bl	8006404 <HAL_Delay>
				 						int taillefin=0;
 80051ce:	2300      	movs	r3, #0
 80051d0:	603b      	str	r3, [r7, #0]
										taillefin = snprintf((char  *)usbbuffer,64,"kawakobeme\n\r");
 80051d2:	4a48      	ldr	r2, [pc, #288]	; (80052f4 <statemachine+0x1d04>)
 80051d4:	2140      	movs	r1, #64	; 0x40
 80051d6:	4848      	ldr	r0, [pc, #288]	; (80052f8 <statemachine+0x1d08>)
 80051d8:	f011 fa70 	bl	80166bc <sniprintf>
 80051dc:	6038      	str	r0, [r7, #0]
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	4619      	mov	r1, r3
 80051e4:	4844      	ldr	r0, [pc, #272]	; (80052f8 <statemachine+0x1d08>)
 80051e6:	f00e fe91 	bl	8013f0c <CDC_Transmit_FS>
				 						usbtransmiten=1;
 80051ea:	4b40      	ldr	r3, [pc, #256]	; (80052ec <statemachine+0x1cfc>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	e003      	b.n	80051fa <statemachine+0x1c0a>
				 						usbpercent=1;
 80051f2:	4b42      	ldr	r3, [pc, #264]	; (80052fc <statemachine+0x1d0c>)
 80051f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80051f8:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 80051fa:	2000      	movs	r0, #0
 80051fc:	f7fd fc52 	bl	8002aa4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,45);
 8005200:	212d      	movs	r1, #45	; 0x2d
 8005202:	2020      	movs	r0, #32
 8005204:	f7fd fd90 	bl	8002d28 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 8005208:	4a3d      	ldr	r2, [pc, #244]	; (8005300 <statemachine+0x1d10>)
 800520a:	2301      	movs	r3, #1
 800520c:	ca06      	ldmia	r2, {r1, r2}
 800520e:	483d      	ldr	r0, [pc, #244]	; (8005304 <statemachine+0x1d14>)
 8005210:	f7fd fd64 	bl	8002cdc <ssd1306_WriteString>
 8005214:	e016      	b.n	8005244 <statemachine+0x1c54>
				 							ssd1306_Fill(Black);
 8005216:	2000      	movs	r0, #0
 8005218:	f7fd fc44 	bl	8002aa4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 800521c:	2128      	movs	r1, #40	; 0x28
 800521e:	2020      	movs	r0, #32
 8005220:	f7fd fd82 	bl	8002d28 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8005224:	4a2f      	ldr	r2, [pc, #188]	; (80052e4 <statemachine+0x1cf4>)
 8005226:	2301      	movs	r3, #1
 8005228:	ca06      	ldmia	r2, {r1, r2}
 800522a:	482f      	ldr	r0, [pc, #188]	; (80052e8 <statemachine+0x1cf8>)
 800522c:	f7fd fd56 	bl	8002cdc <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,48);
 8005230:	2130      	movs	r1, #48	; 0x30
 8005232:	2020      	movs	r0, #32
 8005234:	f7fd fd78 	bl	8002d28 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 8005238:	4a2a      	ldr	r2, [pc, #168]	; (80052e4 <statemachine+0x1cf4>)
 800523a:	2301      	movs	r3, #1
 800523c:	ca06      	ldmia	r2, {r1, r2}
 800523e:	4832      	ldr	r0, [pc, #200]	; (8005308 <statemachine+0x1d18>)
 8005240:	f7fd fd4c 	bl	8002cdc <ssd1306_WriteString>
				 					if(BTN_B>=1){
 8005244:	4b25      	ldr	r3, [pc, #148]	; (80052dc <statemachine+0x1cec>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	dd11      	ble.n	8005270 <statemachine+0x1c80>
				 									 						usbstate--;
 800524c:	4b24      	ldr	r3, [pc, #144]	; (80052e0 <statemachine+0x1cf0>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	3b01      	subs	r3, #1
 8005252:	b2da      	uxtb	r2, r3
 8005254:	4b22      	ldr	r3, [pc, #136]	; (80052e0 <statemachine+0x1cf0>)
 8005256:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 8005258:	4b21      	ldr	r3, [pc, #132]	; (80052e0 <statemachine+0x1cf0>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	3b01      	subs	r3, #1
 800525e:	b2da      	uxtb	r2, r3
 8005260:	4b1f      	ldr	r3, [pc, #124]	; (80052e0 <statemachine+0x1cf0>)
 8005262:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 8005264:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <statemachine+0x1cec>)
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 800526a:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <statemachine+0x1ce8>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8005270:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <statemachine+0x1ce8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	dd0b      	ble.n	8005290 <statemachine+0x1ca0>
				 									  			 	state++;
 8005278:	4b24      	ldr	r3, [pc, #144]	; (800530c <statemachine+0x1d1c>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	3301      	adds	r3, #1
 800527e:	b2da      	uxtb	r2, r3
 8005280:	4b22      	ldr	r3, [pc, #136]	; (800530c <statemachine+0x1d1c>)
 8005282:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005284:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <statemachine+0x1ce8>)
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 800528a:	4b14      	ldr	r3, [pc, #80]	; (80052dc <statemachine+0x1cec>)
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005290:	4b1f      	ldr	r3, [pc, #124]	; (8005310 <statemachine+0x1d20>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	dd13      	ble.n	80052c0 <statemachine+0x1cd0>
				 									 									  			 	state--;
 8005298:	4b1c      	ldr	r3, [pc, #112]	; (800530c <statemachine+0x1d1c>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	3b01      	subs	r3, #1
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	4b1a      	ldr	r3, [pc, #104]	; (800530c <statemachine+0x1d1c>)
 80052a2:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 80052a4:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <statemachine+0x1ce8>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 80052aa:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <statemachine+0x1cec>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 80052b0:	4b17      	ldr	r3, [pc, #92]	; (8005310 <statemachine+0x1d20>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
				 					 break;
 80052b6:	e003      	b.n	80052c0 <statemachine+0x1cd0>
				 					  break;
 80052b8:	bf00      	nop
 80052ba:	e11e      	b.n	80054fa <statemachine+0x1f0a>
				 			  break;
 80052bc:	bf00      	nop
 80052be:	e11c      	b.n	80054fa <statemachine+0x1f0a>
				 					 break;
 80052c0:	bf00      	nop
				  break;
 80052c2:	e11a      	b.n	80054fa <statemachine+0x1f0a>
 80052c4:	20000948 	.word	0x20000948
 80052c8:	20000710 	.word	0x20000710
 80052cc:	20000afc 	.word	0x20000afc
 80052d0:	20000b00 	.word	0x20000b00
 80052d4:	20000944 	.word	0x20000944
 80052d8:	20000708 	.word	0x20000708
 80052dc:	2000070c 	.word	0x2000070c
 80052e0:	2000047d 	.word	0x2000047d
 80052e4:	2000000c 	.word	0x2000000c
 80052e8:	0801b000 	.word	0x0801b000
 80052ec:	20000b04 	.word	0x20000b04
 80052f0:	20000844 	.word	0x20000844
 80052f4:	0801b008 	.word	0x0801b008
 80052f8:	20000a9c 	.word	0x20000a9c
 80052fc:	20000b08 	.word	0x20000b08
 8005300:	20000014 	.word	0x20000014
 8005304:	0801b018 	.word	0x0801b018
 8005308:	0801b020 	.word	0x0801b020
 800530c:	20000478 	.word	0x20000478
 8005310:	20000b50 	.word	0x20000b50



				  case STATE_MONITOR:
					  ssd1306_Fill(Black);
 8005314:	2000      	movs	r0, #0
 8005316:	f7fd fbc5 	bl	8002aa4 <ssd1306_Fill>
					  ssd1306_SetCursor(32,32);
 800531a:	2120      	movs	r1, #32
 800531c:	2020      	movs	r0, #32
 800531e:	f7fd fd03 	bl	8002d28 <ssd1306_SetCursor>
					  ssd1306_WriteString("gputemp",Font_6x8,White);
 8005322:	4a7c      	ldr	r2, [pc, #496]	; (8005514 <statemachine+0x1f24>)
 8005324:	2301      	movs	r3, #1
 8005326:	ca06      	ldmia	r2, {r1, r2}
 8005328:	487b      	ldr	r0, [pc, #492]	; (8005518 <statemachine+0x1f28>)
 800532a:	f7fd fcd7 	bl	8002cdc <ssd1306_WriteString>

					  usbbuffer[60]='$';
 800532e:	4b7b      	ldr	r3, [pc, #492]	; (800551c <statemachine+0x1f2c>)
 8005330:	2224      	movs	r2, #36	; 0x24
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					  getgpu((uint8_t  *)usbbuffer);
 8005336:	4879      	ldr	r0, [pc, #484]	; (800551c <statemachine+0x1f2c>)
 8005338:	f000 ff6c 	bl	8006214 <getgpu>
					  ssd1306_SetCursor(32,40);
 800533c:	2128      	movs	r1, #40	; 0x28
 800533e:	2020      	movs	r0, #32
 8005340:	f7fd fcf2 	bl	8002d28 <ssd1306_SetCursor>
					  snprintf((char  *)bufferscreen,50,"T=%d*C",gputemp);
 8005344:	4b76      	ldr	r3, [pc, #472]	; (8005520 <statemachine+0x1f30>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a76      	ldr	r2, [pc, #472]	; (8005524 <statemachine+0x1f34>)
 800534a:	2132      	movs	r1, #50	; 0x32
 800534c:	4876      	ldr	r0, [pc, #472]	; (8005528 <statemachine+0x1f38>)
 800534e:	f011 f9b5 	bl	80166bc <sniprintf>
					  ssd1306_WriteString((char  *)bufferscreen,Font_7x10,White);
 8005352:	4a76      	ldr	r2, [pc, #472]	; (800552c <statemachine+0x1f3c>)
 8005354:	2301      	movs	r3, #1
 8005356:	ca06      	ldmia	r2, {r1, r2}
 8005358:	4873      	ldr	r0, [pc, #460]	; (8005528 <statemachine+0x1f38>)
 800535a:	f7fd fcbf 	bl	8002cdc <ssd1306_WriteString>
					  ssd1306_SetCursor(32,50);
 800535e:	2132      	movs	r1, #50	; 0x32
 8005360:	2020      	movs	r0, #32
 8005362:	f7fd fce1 	bl	8002d28 <ssd1306_SetCursor>
					  snprintf((char  *)bufferscreen,50,"p=%dW",(int) gpupower);
 8005366:	4b72      	ldr	r3, [pc, #456]	; (8005530 <statemachine+0x1f40>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a72      	ldr	r2, [pc, #456]	; (8005534 <statemachine+0x1f44>)
 800536c:	2132      	movs	r1, #50	; 0x32
 800536e:	486e      	ldr	r0, [pc, #440]	; (8005528 <statemachine+0x1f38>)
 8005370:	f011 f9a4 	bl	80166bc <sniprintf>
					  ssd1306_WriteString((char  *)bufferscreen,Font_7x10,White);
 8005374:	4a6d      	ldr	r2, [pc, #436]	; (800552c <statemachine+0x1f3c>)
 8005376:	2301      	movs	r3, #1
 8005378:	ca06      	ldmia	r2, {r1, r2}
 800537a:	486b      	ldr	r0, [pc, #428]	; (8005528 <statemachine+0x1f38>)
 800537c:	f7fd fcae 	bl	8002cdc <ssd1306_WriteString>
					  //scrolltextmax=scrollText(longbufferscreen,Font_7x10,32,40,63,offsetforscroltext);




					  if(BTN_A>=1){
 8005380:	4b6d      	ldr	r3, [pc, #436]	; (8005538 <statemachine+0x1f48>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	dd0b      	ble.n	80053a0 <statemachine+0x1db0>
					 				 									  			 	state++;
 8005388:	4b6c      	ldr	r3, [pc, #432]	; (800553c <statemachine+0x1f4c>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	3301      	adds	r3, #1
 800538e:	b2da      	uxtb	r2, r3
 8005390:	4b6a      	ldr	r3, [pc, #424]	; (800553c <statemachine+0x1f4c>)
 8005392:	701a      	strb	r2, [r3, #0]
					 				 									  			 	BTN_A=0;
 8005394:	4b68      	ldr	r3, [pc, #416]	; (8005538 <statemachine+0x1f48>)
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
					 				 									  			 	BTN_B=0;
 800539a:	4b69      	ldr	r3, [pc, #420]	; (8005540 <statemachine+0x1f50>)
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]
					 				 									  	}
					 				 					if(BTN_A_LONG>=1){
 80053a0:	4b68      	ldr	r3, [pc, #416]	; (8005544 <statemachine+0x1f54>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f340 80aa 	ble.w	80054fe <statemachine+0x1f0e>
					 				 									 									  			 	state--;
 80053aa:	4b64      	ldr	r3, [pc, #400]	; (800553c <statemachine+0x1f4c>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	4b62      	ldr	r3, [pc, #392]	; (800553c <statemachine+0x1f4c>)
 80053b4:	701a      	strb	r2, [r3, #0]
					 				 									 									  			 	BTN_A=0;
 80053b6:	4b60      	ldr	r3, [pc, #384]	; (8005538 <statemachine+0x1f48>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
					 				 									 									  			 	BTN_B=0;
 80053bc:	4b60      	ldr	r3, [pc, #384]	; (8005540 <statemachine+0x1f50>)
 80053be:	2200      	movs	r2, #0
 80053c0:	601a      	str	r2, [r3, #0]
					 				 									 									  			 	BTN_A_LONG=0;
 80053c2:	4b60      	ldr	r3, [pc, #384]	; (8005544 <statemachine+0x1f54>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]
					 				 									 									  	}


					  break;
 80053c8:	e099      	b.n	80054fe <statemachine+0x1f0e>




				  case STATE_TEST:
					  ssd1306_Fill(Black);
 80053ca:	2000      	movs	r0, #0
 80053cc:	f7fd fb6a 	bl	8002aa4 <ssd1306_Fill>
					  ssd1306_SetCursor(32,32);
 80053d0:	2120      	movs	r1, #32
 80053d2:	2020      	movs	r0, #32
 80053d4:	f7fd fca8 	bl	8002d28 <ssd1306_SetCursor>
					  ssd1306_WriteString("test",Font_6x8,White);
 80053d8:	4a4e      	ldr	r2, [pc, #312]	; (8005514 <statemachine+0x1f24>)
 80053da:	2301      	movs	r3, #1
 80053dc:	ca06      	ldmia	r2, {r1, r2}
 80053de:	485a      	ldr	r0, [pc, #360]	; (8005548 <statemachine+0x1f58>)
 80053e0:	f7fd fc7c 	bl	8002cdc <ssd1306_WriteString>
					  memcpy((char  *)longbufferscreen,"ceci est un text plutot long, qui ne s'arrette toujours pas et pourtant il s'affiche complet",sizeof("ceci est un text plutot long, qui ne s'arrette toujours pas et pourtant il s'affiche complet"));
 80053e4:	225d      	movs	r2, #93	; 0x5d
 80053e6:	4959      	ldr	r1, [pc, #356]	; (800554c <statemachine+0x1f5c>)
 80053e8:	4859      	ldr	r0, [pc, #356]	; (8005550 <statemachine+0x1f60>)
 80053ea:	f011 fb1a 	bl	8016a22 <memcpy>
					  scrolltextmax=scrollText(longbufferscreen,Font_7x10,32,40,32,offsetforscroltext);
 80053ee:	4b59      	ldr	r3, [pc, #356]	; (8005554 <statemachine+0x1f64>)
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	4a4e      	ldr	r2, [pc, #312]	; (800552c <statemachine+0x1f3c>)
 80053f4:	9302      	str	r3, [sp, #8]
 80053f6:	2320      	movs	r3, #32
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	2328      	movs	r3, #40	; 0x28
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	2320      	movs	r3, #32
 8005400:	ca06      	ldmia	r2, {r1, r2}
 8005402:	4853      	ldr	r0, [pc, #332]	; (8005550 <statemachine+0x1f60>)
 8005404:	f7fe f888 	bl	8003518 <scrollText>
 8005408:	4603      	mov	r3, r0
 800540a:	461a      	mov	r2, r3
 800540c:	4b52      	ldr	r3, [pc, #328]	; (8005558 <statemachine+0x1f68>)
 800540e:	801a      	strh	r2, [r3, #0]
					  ssd1306_SetCursor(32,55);
 8005410:	2137      	movs	r1, #55	; 0x37
 8005412:	2020      	movs	r0, #32
 8005414:	f7fd fc88 	bl	8002d28 <ssd1306_SetCursor>
					  snprintf((char *)bufferscreen,50,"%d",offsetforscroltext);
 8005418:	4b4e      	ldr	r3, [pc, #312]	; (8005554 <statemachine+0x1f64>)
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	4a4f      	ldr	r2, [pc, #316]	; (800555c <statemachine+0x1f6c>)
 800541e:	2132      	movs	r1, #50	; 0x32
 8005420:	4841      	ldr	r0, [pc, #260]	; (8005528 <statemachine+0x1f38>)
 8005422:	f011 f94b 	bl	80166bc <sniprintf>
					  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005426:	4a3b      	ldr	r2, [pc, #236]	; (8005514 <statemachine+0x1f24>)
 8005428:	2301      	movs	r3, #1
 800542a:	ca06      	ldmia	r2, {r1, r2}
 800542c:	483e      	ldr	r0, [pc, #248]	; (8005528 <statemachine+0x1f38>)
 800542e:	f7fd fc55 	bl	8002cdc <ssd1306_WriteString>


					  if(offsetforscroltext>=scrolltextmax+16){
 8005432:	4b49      	ldr	r3, [pc, #292]	; (8005558 <statemachine+0x1f68>)
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	330f      	adds	r3, #15
 8005438:	4a46      	ldr	r2, [pc, #280]	; (8005554 <statemachine+0x1f64>)
 800543a:	8812      	ldrh	r2, [r2, #0]
 800543c:	4293      	cmp	r3, r2
 800543e:	da02      	bge.n	8005446 <statemachine+0x1e56>
					  	  offsetforscroltext=0;
 8005440:	4b44      	ldr	r3, [pc, #272]	; (8005554 <statemachine+0x1f64>)
 8005442:	2200      	movs	r2, #0
 8005444:	801a      	strh	r2, [r3, #0]





					  if(BTN_A>=1){
 8005446:	4b3c      	ldr	r3, [pc, #240]	; (8005538 <statemachine+0x1f48>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	dd35      	ble.n	80054ba <statemachine+0x1eca>
					 				 									state--;
 800544e:	4b3b      	ldr	r3, [pc, #236]	; (800553c <statemachine+0x1f4c>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	3b01      	subs	r3, #1
 8005454:	b2da      	uxtb	r2, r3
 8005456:	4b39      	ldr	r3, [pc, #228]	; (800553c <statemachine+0x1f4c>)
 8005458:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 800545a:	4b38      	ldr	r3, [pc, #224]	; (800553c <statemachine+0x1f4c>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	3b01      	subs	r3, #1
 8005460:	b2da      	uxtb	r2, r3
 8005462:	4b36      	ldr	r3, [pc, #216]	; (800553c <statemachine+0x1f4c>)
 8005464:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005466:	4b35      	ldr	r3, [pc, #212]	; (800553c <statemachine+0x1f4c>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	3b01      	subs	r3, #1
 800546c:	b2da      	uxtb	r2, r3
 800546e:	4b33      	ldr	r3, [pc, #204]	; (800553c <statemachine+0x1f4c>)
 8005470:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005472:	4b32      	ldr	r3, [pc, #200]	; (800553c <statemachine+0x1f4c>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	3b01      	subs	r3, #1
 8005478:	b2da      	uxtb	r2, r3
 800547a:	4b30      	ldr	r3, [pc, #192]	; (800553c <statemachine+0x1f4c>)
 800547c:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 800547e:	4b2f      	ldr	r3, [pc, #188]	; (800553c <statemachine+0x1f4c>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	3b01      	subs	r3, #1
 8005484:	b2da      	uxtb	r2, r3
 8005486:	4b2d      	ldr	r3, [pc, #180]	; (800553c <statemachine+0x1f4c>)
 8005488:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 800548a:	4b2c      	ldr	r3, [pc, #176]	; (800553c <statemachine+0x1f4c>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	3b01      	subs	r3, #1
 8005490:	b2da      	uxtb	r2, r3
 8005492:	4b2a      	ldr	r3, [pc, #168]	; (800553c <statemachine+0x1f4c>)
 8005494:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 8005496:	4b29      	ldr	r3, [pc, #164]	; (800553c <statemachine+0x1f4c>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	3b01      	subs	r3, #1
 800549c:	b2da      	uxtb	r2, r3
 800549e:	4b27      	ldr	r3, [pc, #156]	; (800553c <statemachine+0x1f4c>)
 80054a0:	701a      	strb	r2, [r3, #0]
					 				 									state--;
 80054a2:	4b26      	ldr	r3, [pc, #152]	; (800553c <statemachine+0x1f4c>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	4b24      	ldr	r3, [pc, #144]	; (800553c <statemachine+0x1f4c>)
 80054ac:	701a      	strb	r2, [r3, #0]
					 				 									  			 	BTN_A=0;
 80054ae:	4b22      	ldr	r3, [pc, #136]	; (8005538 <statemachine+0x1f48>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
					 				 									  			 	BTN_B=0;
 80054b4:	4b22      	ldr	r3, [pc, #136]	; (8005540 <statemachine+0x1f50>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
					 				 									  	}
					  if(BTN_A_LONG>=1){
 80054ba:	4b22      	ldr	r3, [pc, #136]	; (8005544 <statemachine+0x1f54>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	dd1f      	ble.n	8005502 <statemachine+0x1f12>
					  				 									 									  			 	state--;
 80054c2:	4b1e      	ldr	r3, [pc, #120]	; (800553c <statemachine+0x1f4c>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	4b1c      	ldr	r3, [pc, #112]	; (800553c <statemachine+0x1f4c>)
 80054cc:	701a      	strb	r2, [r3, #0]
					  				 									 									  			 	BTN_A=0;
 80054ce:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <statemachine+0x1f48>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_B=0;
 80054d4:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <statemachine+0x1f50>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
					  				 									 									  			 	BTN_A_LONG=0;
 80054da:	4b1a      	ldr	r3, [pc, #104]	; (8005544 <statemachine+0x1f54>)
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
					  				 									 									  	}



					  break;
 80054e0:	e00f      	b.n	8005502 <statemachine+0x1f12>
				  break;
 80054e2:	bf00      	nop
 80054e4:	e00e      	b.n	8005504 <statemachine+0x1f14>
			  break;
 80054e6:	bf00      	nop
 80054e8:	e00c      	b.n	8005504 <statemachine+0x1f14>
			  break;
 80054ea:	bf00      	nop
 80054ec:	e00a      	b.n	8005504 <statemachine+0x1f14>
			  break;
 80054ee:	bf00      	nop
 80054f0:	e008      	b.n	8005504 <statemachine+0x1f14>
			  break;
 80054f2:	bf00      	nop
 80054f4:	e006      	b.n	8005504 <statemachine+0x1f14>
				  break;
 80054f6:	bf00      	nop
 80054f8:	e004      	b.n	8005504 <statemachine+0x1f14>
				  break;
 80054fa:	bf00      	nop
 80054fc:	e002      	b.n	8005504 <statemachine+0x1f14>
					  break;
 80054fe:	bf00      	nop
 8005500:	e000      	b.n	8005504 <statemachine+0x1f14>
					  break;
 8005502:	bf00      	nop
	}
return ;
 8005504:	bf00      	nop
 8005506:	bf00      	nop
}
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	ecbd 8b02 	vpop	{d8}
 8005510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005512:	bf00      	nop
 8005514:	2000000c 	.word	0x2000000c
 8005518:	0801b028 	.word	0x0801b028
 800551c:	20000a9c 	.word	0x20000a9c
 8005520:	200010c0 	.word	0x200010c0
 8005524:	0801b030 	.word	0x0801b030
 8005528:	20000968 	.word	0x20000968
 800552c:	20000014 	.word	0x20000014
 8005530:	200010c4 	.word	0x200010c4
 8005534:	0801b038 	.word	0x0801b038
 8005538:	20000708 	.word	0x20000708
 800553c:	20000478 	.word	0x20000478
 8005540:	2000070c 	.word	0x2000070c
 8005544:	20000b50 	.word	0x20000b50
 8005548:	0801b040 	.word	0x0801b040
 800554c:	0801b048 	.word	0x0801b048
 8005550:	2000099c 	.word	0x2000099c
 8005554:	20000adc 	.word	0x20000adc
 8005558:	20000ade 	.word	0x20000ade
 800555c:	0801b0a8 	.word	0x0801b0a8

08005560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005566:	4b0f      	ldr	r3, [pc, #60]	; (80055a4 <HAL_MspInit+0x44>)
 8005568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800556a:	4a0e      	ldr	r2, [pc, #56]	; (80055a4 <HAL_MspInit+0x44>)
 800556c:	f043 0301 	orr.w	r3, r3, #1
 8005570:	6613      	str	r3, [r2, #96]	; 0x60
 8005572:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <HAL_MspInit+0x44>)
 8005574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	607b      	str	r3, [r7, #4]
 800557c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800557e:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <HAL_MspInit+0x44>)
 8005580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005582:	4a08      	ldr	r2, [pc, #32]	; (80055a4 <HAL_MspInit+0x44>)
 8005584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005588:	6593      	str	r3, [r2, #88]	; 0x58
 800558a:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_MspInit+0x44>)
 800558c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40021000 	.word	0x40021000

080055a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80055ac:	e7fe      	b.n	80055ac <NMI_Handler+0x4>

080055ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055ae:	b480      	push	{r7}
 80055b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055b2:	e7fe      	b.n	80055b2 <HardFault_Handler+0x4>

080055b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055b8:	e7fe      	b.n	80055b8 <MemManage_Handler+0x4>

080055ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055ba:	b480      	push	{r7}
 80055bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055be:	e7fe      	b.n	80055be <BusFault_Handler+0x4>

080055c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055c4:	e7fe      	b.n	80055c4 <UsageFault_Handler+0x4>

080055c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055c6:	b480      	push	{r7}
 80055c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055ca:	bf00      	nop
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055d8:	bf00      	nop
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055e2:	b480      	push	{r7}
 80055e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055e6:	bf00      	nop
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055f4:	f000 fee6 	bl	80063c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055f8:	bf00      	nop
 80055fa:	bd80      	pop	{r7, pc}

080055fc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005600:	2002      	movs	r0, #2
 8005602:	f002 fef1 	bl	80083e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005606:	bf00      	nop
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005610:	4802      	ldr	r0, [pc, #8]	; (800561c <DMA1_Channel1_IRQHandler+0x10>)
 8005612:	f002 fc64 	bl	8007ede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005616:	bf00      	nop
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	20000388 	.word	0x20000388

08005620 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005624:	4802      	ldr	r0, [pc, #8]	; (8005630 <DMA1_Channel2_IRQHandler+0x10>)
 8005626:	f002 fc5a 	bl	8007ede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800562a:	bf00      	nop
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000c28 	.word	0x20000c28

08005634 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005638:	4802      	ldr	r0, [pc, #8]	; (8005644 <DMA1_Channel3_IRQHandler+0x10>)
 800563a:	f002 fc50 	bl	8007ede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800563e:	bf00      	nop
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000c70 	.word	0x20000c70

08005648 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800564c:	4802      	ldr	r0, [pc, #8]	; (8005658 <ADC1_IRQHandler+0x10>)
 800564e:	f001 fa9d 	bl	8006b8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8005652:	bf00      	nop
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000324 	.word	0x20000324

0800565c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005660:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005664:	f002 fec0 	bl	80083e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005668:	bf00      	nop
 800566a:	bd80      	pop	{r7, pc}

0800566c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8005670:	4803      	ldr	r0, [pc, #12]	; (8005680 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8005672:	f007 fca0 	bl	800cfb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  updatedate();
 8005676:	f000 faab 	bl	8005bd0 <updatedate>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800567a:	bf00      	nop
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	200011b0 	.word	0x200011b0

08005684 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005688:	4802      	ldr	r0, [pc, #8]	; (8005694 <SPI1_IRQHandler+0x10>)
 800568a:	f006 ff1b 	bl	800c4c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800568e:	bf00      	nop
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000bc4 	.word	0x20000bc4

08005698 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800569c:	4805      	ldr	r0, [pc, #20]	; (80056b4 <TIM6_DAC_IRQHandler+0x1c>)
 800569e:	f007 fc8a 	bl	800cfb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  offsetforscroltext++;
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <TIM6_DAC_IRQHandler+0x20>)
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	3301      	adds	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	4b03      	ldr	r3, [pc, #12]	; (80056b8 <TIM6_DAC_IRQHandler+0x20>)
 80056ac:	801a      	strh	r2, [r3, #0]



  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80056ae:	bf00      	nop
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20001118 	.word	0x20001118
 80056b8:	20000adc 	.word	0x20000adc

080056bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  	cptdoubledonnee+=1;
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <TIM7_IRQHandler+0x20>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3301      	adds	r3, #1
 80056c6:	4a05      	ldr	r2, [pc, #20]	; (80056dc <TIM7_IRQHandler+0x20>)
 80056c8:	6013      	str	r3, [r2, #0]
  	enablewrite=1;
 80056ca:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <TIM7_IRQHandler+0x24>)
 80056cc:	2201      	movs	r2, #1
 80056ce:	601a      	str	r2, [r3, #0]



  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80056d0:	4804      	ldr	r0, [pc, #16]	; (80056e4 <TIM7_IRQHandler+0x28>)
 80056d2:	f007 fc70 	bl	800cfb6 <HAL_TIM_IRQHandler>




  /* USER CODE END TIM7_IRQn 1 */
}
 80056d6:	bf00      	nop
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20000b10 	.word	0x20000b10
 80056e0:	20000b30 	.word	0x20000b30
 80056e4:	20001164 	.word	0x20001164

080056e8 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80056ec:	4802      	ldr	r0, [pc, #8]	; (80056f8 <USB_IRQHandler+0x10>)
 80056ee:	f003 fc87 	bl	8009000 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80056f2:	bf00      	nop
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20002050 	.word	0x20002050

080056fc <DMA2_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA2 channel7 global interrupt.
  */
void DMA2_Channel7_IRQHandler(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel7_IRQn 0 */

  /* USER CODE END DMA2_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_rx);
 8005700:	4802      	ldr	r0, [pc, #8]	; (800570c <DMA2_Channel7_IRQHandler+0x10>)
 8005702:	f002 fbec 	bl	8007ede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel7_IRQn 1 */

  /* USER CODE END DMA2_Channel7_IRQn 1 */
}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	2000130c 	.word	0x2000130c

08005710 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8005714:	4802      	ldr	r0, [pc, #8]	; (8005720 <LPUART1_IRQHandler+0x10>)
 8005716:	f008 f963 	bl	800d9e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800571a:	bf00      	nop
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	200011fc 	.word	0x200011fc

08005724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  return 1;
 8005728:	2301      	movs	r3, #1
}
 800572a:	4618      	mov	r0, r3
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <_kill>:

int _kill(int pid, int sig)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800573e:	f011 f93b 	bl	80169b8 <__errno>
 8005742:	4603      	mov	r3, r0
 8005744:	2216      	movs	r2, #22
 8005746:	601a      	str	r2, [r3, #0]
  return -1;
 8005748:	f04f 33ff 	mov.w	r3, #4294967295
}
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <_exit>:

void _exit (int status)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800575c:	f04f 31ff 	mov.w	r1, #4294967295
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff ffe7 	bl	8005734 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005766:	e7fe      	b.n	8005766 <_exit+0x12>

08005768 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	e00a      	b.n	8005790 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800577a:	f3af 8000 	nop.w
 800577e:	4601      	mov	r1, r0
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	60ba      	str	r2, [r7, #8]
 8005786:	b2ca      	uxtb	r2, r1
 8005788:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	3301      	adds	r3, #1
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	429a      	cmp	r2, r3
 8005796:	dbf0      	blt.n	800577a <_read+0x12>
  }

  return len;
 8005798:	687b      	ldr	r3, [r7, #4]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b086      	sub	sp, #24
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	e009      	b.n	80057c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	60ba      	str	r2, [r7, #8]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	4618      	mov	r0, r3
 80057be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	3301      	adds	r3, #1
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	dbf1      	blt.n	80057b4 <_write+0x12>
  }
  return len;
 80057d0:	687b      	ldr	r3, [r7, #4]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <_close>:

int _close(int file)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80057e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005802:	605a      	str	r2, [r3, #4]
  return 0;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <_isatty>:

int _isatty(int file)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800581a:	2301      	movs	r3, #1
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
	...

08005844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800584c:	4a14      	ldr	r2, [pc, #80]	; (80058a0 <_sbrk+0x5c>)
 800584e:	4b15      	ldr	r3, [pc, #84]	; (80058a4 <_sbrk+0x60>)
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005858:	4b13      	ldr	r3, [pc, #76]	; (80058a8 <_sbrk+0x64>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d102      	bne.n	8005866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005860:	4b11      	ldr	r3, [pc, #68]	; (80058a8 <_sbrk+0x64>)
 8005862:	4a12      	ldr	r2, [pc, #72]	; (80058ac <_sbrk+0x68>)
 8005864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005866:	4b10      	ldr	r3, [pc, #64]	; (80058a8 <_sbrk+0x64>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4413      	add	r3, r2
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	429a      	cmp	r2, r3
 8005872:	d207      	bcs.n	8005884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005874:	f011 f8a0 	bl	80169b8 <__errno>
 8005878:	4603      	mov	r3, r0
 800587a:	220c      	movs	r2, #12
 800587c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800587e:	f04f 33ff 	mov.w	r3, #4294967295
 8005882:	e009      	b.n	8005898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005884:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <_sbrk+0x64>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800588a:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <_sbrk+0x64>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4413      	add	r3, r2
 8005892:	4a05      	ldr	r2, [pc, #20]	; (80058a8 <_sbrk+0x64>)
 8005894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005896:	68fb      	ldr	r3, [r7, #12]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	20010000 	.word	0x20010000
 80058a4:	00000400 	.word	0x00000400
 80058a8:	200010c8 	.word	0x200010c8
 80058ac:	200026b8 	.word	0x200026b8

080058b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <SystemInit+0x20>)
 80058b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ba:	4a05      	ldr	r2, [pc, #20]	; (80058d0 <SystemInit+0x20>)
 80058bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	e000ed00 	.word	0xe000ed00

080058d4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim15;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058da:	f107 0310 	add.w	r3, r7, #16
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	605a      	str	r2, [r3, #4]
 80058e4:	609a      	str	r2, [r3, #8]
 80058e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058e8:	1d3b      	adds	r3, r7, #4
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	605a      	str	r2, [r3, #4]
 80058f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80058f2:	4b1e      	ldr	r3, [pc, #120]	; (800596c <MX_TIM2_Init+0x98>)
 80058f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 400-1;
 80058fa:	4b1c      	ldr	r3, [pc, #112]	; (800596c <MX_TIM2_Init+0x98>)
 80058fc:	f240 128f 	movw	r2, #399	; 0x18f
 8005900:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005902:	4b1a      	ldr	r3, [pc, #104]	; (800596c <MX_TIM2_Init+0x98>)
 8005904:	2200      	movs	r2, #0
 8005906:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8005908:	4b18      	ldr	r3, [pc, #96]	; (800596c <MX_TIM2_Init+0x98>)
 800590a:	f242 720f 	movw	r2, #9999	; 0x270f
 800590e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005910:	4b16      	ldr	r3, [pc, #88]	; (800596c <MX_TIM2_Init+0x98>)
 8005912:	2200      	movs	r2, #0
 8005914:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <MX_TIM2_Init+0x98>)
 8005918:	2200      	movs	r2, #0
 800591a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800591c:	4813      	ldr	r0, [pc, #76]	; (800596c <MX_TIM2_Init+0x98>)
 800591e:	f007 fa23 	bl	800cd68 <HAL_TIM_Base_Init>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8005928:	f7fc f8b7 	bl	8001a9a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800592c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005930:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005932:	f107 0310 	add.w	r3, r7, #16
 8005936:	4619      	mov	r1, r3
 8005938:	480c      	ldr	r0, [pc, #48]	; (800596c <MX_TIM2_Init+0x98>)
 800593a:	f007 fc3e 	bl	800d1ba <HAL_TIM_ConfigClockSource>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8005944:	f7fc f8a9 	bl	8001a9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005948:	2320      	movs	r3, #32
 800594a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005950:	1d3b      	adds	r3, r7, #4
 8005952:	4619      	mov	r1, r3
 8005954:	4805      	ldr	r0, [pc, #20]	; (800596c <MX_TIM2_Init+0x98>)
 8005956:	f007 fe29 	bl	800d5ac <HAL_TIMEx_MasterConfigSynchronization>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d001      	beq.n	8005964 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8005960:	f7fc f89b 	bl	8001a9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005964:	bf00      	nop
 8005966:	3720      	adds	r7, #32
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	200010cc 	.word	0x200010cc

08005970 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005976:	1d3b      	adds	r3, r7, #4
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005980:	4b14      	ldr	r3, [pc, #80]	; (80059d4 <MX_TIM6_Init+0x64>)
 8005982:	4a15      	ldr	r2, [pc, #84]	; (80059d8 <MX_TIM6_Init+0x68>)
 8005984:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1999;
 8005986:	4b13      	ldr	r3, [pc, #76]	; (80059d4 <MX_TIM6_Init+0x64>)
 8005988:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800598c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800598e:	4b11      	ldr	r3, [pc, #68]	; (80059d4 <MX_TIM6_Init+0x64>)
 8005990:	2200      	movs	r2, #0
 8005992:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 249;
 8005994:	4b0f      	ldr	r3, [pc, #60]	; (80059d4 <MX_TIM6_Init+0x64>)
 8005996:	22f9      	movs	r2, #249	; 0xf9
 8005998:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800599a:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <MX_TIM6_Init+0x64>)
 800599c:	2200      	movs	r2, #0
 800599e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80059a0:	480c      	ldr	r0, [pc, #48]	; (80059d4 <MX_TIM6_Init+0x64>)
 80059a2:	f007 f9e1 	bl	800cd68 <HAL_TIM_Base_Init>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80059ac:	f7fc f875 	bl	8001a9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059b0:	2300      	movs	r3, #0
 80059b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059b4:	2300      	movs	r3, #0
 80059b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80059b8:	1d3b      	adds	r3, r7, #4
 80059ba:	4619      	mov	r1, r3
 80059bc:	4805      	ldr	r0, [pc, #20]	; (80059d4 <MX_TIM6_Init+0x64>)
 80059be:	f007 fdf5 	bl	800d5ac <HAL_TIMEx_MasterConfigSynchronization>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80059c8:	f7fc f867 	bl	8001a9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80059cc:	bf00      	nop
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	20001118 	.word	0x20001118
 80059d8:	40001000 	.word	0x40001000

080059dc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059e2:	1d3b      	adds	r3, r7, #4
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	605a      	str	r2, [r3, #4]
 80059ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80059ec:	4b15      	ldr	r3, [pc, #84]	; (8005a44 <MX_TIM7_Init+0x68>)
 80059ee:	4a16      	ldr	r2, [pc, #88]	; (8005a48 <MX_TIM7_Init+0x6c>)
 80059f0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20000-1;
 80059f2:	4b14      	ldr	r3, [pc, #80]	; (8005a44 <MX_TIM7_Init+0x68>)
 80059f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80059f8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059fa:	4b12      	ldr	r3, [pc, #72]	; (8005a44 <MX_TIM7_Init+0x68>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8005a00:	4b10      	ldr	r3, [pc, #64]	; (8005a44 <MX_TIM7_Init+0x68>)
 8005a02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a06:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a08:	4b0e      	ldr	r3, [pc, #56]	; (8005a44 <MX_TIM7_Init+0x68>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005a0e:	480d      	ldr	r0, [pc, #52]	; (8005a44 <MX_TIM7_Init+0x68>)
 8005a10:	f007 f9aa 	bl	800cd68 <HAL_TIM_Base_Init>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8005a1a:	f7fc f83e 	bl	8001a9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005a26:	1d3b      	adds	r3, r7, #4
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4806      	ldr	r0, [pc, #24]	; (8005a44 <MX_TIM7_Init+0x68>)
 8005a2c:	f007 fdbe 	bl	800d5ac <HAL_TIMEx_MasterConfigSynchronization>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8005a36:	f7fc f830 	bl	8001a9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005a3a:	bf00      	nop
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20001164 	.word	0x20001164
 8005a48:	40001400 	.word	0x40001400

08005a4c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a52:	f107 0310 	add.w	r3, r7, #16
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	605a      	str	r2, [r3, #4]
 8005a5c:	609a      	str	r2, [r3, #8]
 8005a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a60:	1d3b      	adds	r3, r7, #4
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	605a      	str	r2, [r3, #4]
 8005a68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005a6a:	4b1f      	ldr	r3, [pc, #124]	; (8005ae8 <MX_TIM15_Init+0x9c>)
 8005a6c:	4a1f      	ldr	r2, [pc, #124]	; (8005aec <MX_TIM15_Init+0xa0>)
 8005a6e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 39999;
 8005a70:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <MX_TIM15_Init+0x9c>)
 8005a72:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8005a76:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a78:	4b1b      	ldr	r3, [pc, #108]	; (8005ae8 <MX_TIM15_Init+0x9c>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8005a7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ae8 <MX_TIM15_Init+0x9c>)
 8005a80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a84:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a86:	4b18      	ldr	r3, [pc, #96]	; (8005ae8 <MX_TIM15_Init+0x9c>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005a8c:	4b16      	ldr	r3, [pc, #88]	; (8005ae8 <MX_TIM15_Init+0x9c>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a92:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <MX_TIM15_Init+0x9c>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005a98:	4813      	ldr	r0, [pc, #76]	; (8005ae8 <MX_TIM15_Init+0x9c>)
 8005a9a:	f007 f965 	bl	800cd68 <HAL_TIM_Base_Init>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8005aa4:	f7fb fff9 	bl	8001a9a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005aae:	f107 0310 	add.w	r3, r7, #16
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	480c      	ldr	r0, [pc, #48]	; (8005ae8 <MX_TIM15_Init+0x9c>)
 8005ab6:	f007 fb80 	bl	800d1ba <HAL_TIM_ConfigClockSource>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8005ac0:	f7fb ffeb 	bl	8001a9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005acc:	1d3b      	adds	r3, r7, #4
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4805      	ldr	r0, [pc, #20]	; (8005ae8 <MX_TIM15_Init+0x9c>)
 8005ad2:	f007 fd6b 	bl	800d5ac <HAL_TIMEx_MasterConfigSynchronization>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8005adc:	f7fb ffdd 	bl	8001a9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8005ae0:	bf00      	nop
 8005ae2:	3720      	adds	r7, #32
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	200011b0 	.word	0x200011b0
 8005aec:	40014000 	.word	0x40014000

08005af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b00:	d10c      	bne.n	8005b1c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b02:	4b2f      	ldr	r3, [pc, #188]	; (8005bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8005b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b06:	4a2e      	ldr	r2, [pc, #184]	; (8005bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8005b08:	f043 0301 	orr.w	r3, r3, #1
 8005b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8005b0e:	4b2c      	ldr	r3, [pc, #176]	; (8005bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8005b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8005b1a:	e04c      	b.n	8005bb6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a28      	ldr	r2, [pc, #160]	; (8005bc4 <HAL_TIM_Base_MspInit+0xd4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d114      	bne.n	8005b50 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005b26:	4b26      	ldr	r3, [pc, #152]	; (8005bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8005b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2a:	4a25      	ldr	r2, [pc, #148]	; (8005bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8005b2c:	f043 0310 	orr.w	r3, r3, #16
 8005b30:	6593      	str	r3, [r2, #88]	; 0x58
 8005b32:	4b23      	ldr	r3, [pc, #140]	; (8005bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8005b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 4, 0);
 8005b3e:	2200      	movs	r2, #0
 8005b40:	2104      	movs	r1, #4
 8005b42:	2036      	movs	r0, #54	; 0x36
 8005b44:	f001 fffd 	bl	8007b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005b48:	2036      	movs	r0, #54	; 0x36
 8005b4a:	f002 f816 	bl	8007b7a <HAL_NVIC_EnableIRQ>
}
 8005b4e:	e032      	b.n	8005bb6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1c      	ldr	r2, [pc, #112]	; (8005bc8 <HAL_TIM_Base_MspInit+0xd8>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d114      	bne.n	8005b84 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005b5a:	4b19      	ldr	r3, [pc, #100]	; (8005bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5e:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8005b60:	f043 0320 	orr.w	r3, r3, #32
 8005b64:	6593      	str	r3, [r2, #88]	; 0x58
 8005b66:	4b16      	ldr	r3, [pc, #88]	; (8005bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8005b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005b72:	2200      	movs	r2, #0
 8005b74:	2100      	movs	r1, #0
 8005b76:	2037      	movs	r0, #55	; 0x37
 8005b78:	f001 ffe3 	bl	8007b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005b7c:	2037      	movs	r0, #55	; 0x37
 8005b7e:	f001 fffc 	bl	8007b7a <HAL_NVIC_EnableIRQ>
}
 8005b82:	e018      	b.n	8005bb6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM15)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a10      	ldr	r2, [pc, #64]	; (8005bcc <HAL_TIM_Base_MspInit+0xdc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d113      	bne.n	8005bb6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005b8e:	4b0c      	ldr	r3, [pc, #48]	; (8005bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8005b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b92:	4a0b      	ldr	r2, [pc, #44]	; (8005bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8005b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b98:	6613      	str	r3, [r2, #96]	; 0x60
 8005b9a:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8005b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba2:	60bb      	str	r3, [r7, #8]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	2100      	movs	r1, #0
 8005baa:	2018      	movs	r0, #24
 8005bac:	f001 ffc9 	bl	8007b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005bb0:	2018      	movs	r0, #24
 8005bb2:	f001 ffe2 	bl	8007b7a <HAL_NVIC_EnableIRQ>
}
 8005bb6:	bf00      	nop
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40001000 	.word	0x40001000
 8005bc8:	40001400 	.word	0x40001400
 8005bcc:	40014000 	.word	0x40014000

08005bd0 <updatedate>:
  /* USER CODE END TIM15_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0

	SEC+=1;
 8005bd4:	4b98      	ldr	r3, [pc, #608]	; (8005e38 <updatedate+0x268>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	4b96      	ldr	r3, [pc, #600]	; (8005e38 <updatedate+0x268>)
 8005bde:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 8005be0:	4b95      	ldr	r3, [pc, #596]	; (8005e38 <updatedate+0x268>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b3b      	cmp	r3, #59	; 0x3b
 8005be6:	d908      	bls.n	8005bfa <updatedate+0x2a>
		SEC=0;
 8005be8:	4b93      	ldr	r3, [pc, #588]	; (8005e38 <updatedate+0x268>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 8005bee:	4b93      	ldr	r3, [pc, #588]	; (8005e3c <updatedate+0x26c>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	4b91      	ldr	r3, [pc, #580]	; (8005e3c <updatedate+0x26c>)
 8005bf8:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 8005bfa:	4b90      	ldr	r3, [pc, #576]	; (8005e3c <updatedate+0x26c>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b3b      	cmp	r3, #59	; 0x3b
 8005c00:	d908      	bls.n	8005c14 <updatedate+0x44>

		MINUTE=0;
 8005c02:	4b8e      	ldr	r3, [pc, #568]	; (8005e3c <updatedate+0x26c>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	701a      	strb	r2, [r3, #0]
		HR+=1;
 8005c08:	4b8d      	ldr	r3, [pc, #564]	; (8005e40 <updatedate+0x270>)
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	4b8b      	ldr	r3, [pc, #556]	; (8005e40 <updatedate+0x270>)
 8005c12:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 8005c14:	4b8a      	ldr	r3, [pc, #552]	; (8005e40 <updatedate+0x270>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b17      	cmp	r3, #23
 8005c1a:	d908      	bls.n	8005c2e <updatedate+0x5e>
		HR=0;
 8005c1c:	4b88      	ldr	r3, [pc, #544]	; (8005e40 <updatedate+0x270>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 8005c22:	4b88      	ldr	r3, [pc, #544]	; (8005e44 <updatedate+0x274>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	3301      	adds	r3, #1
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	4b86      	ldr	r3, [pc, #536]	; (8005e44 <updatedate+0x274>)
 8005c2c:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 8005c2e:	4b86      	ldr	r3, [pc, #536]	; (8005e48 <updatedate+0x278>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b0b      	cmp	r3, #11
 8005c34:	f200 8137 	bhi.w	8005ea6 <updatedate+0x2d6>
 8005c38:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <updatedate+0x70>)
 8005c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3e:	bf00      	nop
 8005c40:	08005c71 	.word	0x08005c71
 8005c44:	08005c9b 	.word	0x08005c9b
 8005c48:	08005cc5 	.word	0x08005cc5
 8005c4c:	08005cef 	.word	0x08005cef
 8005c50:	08005d19 	.word	0x08005d19
 8005c54:	08005d43 	.word	0x08005d43
 8005c58:	08005d6d 	.word	0x08005d6d
 8005c5c:	08005d97 	.word	0x08005d97
 8005c60:	08005dbf 	.word	0x08005dbf
 8005c64:	08005de7 	.word	0x08005de7
 8005c68:	08005e0f 	.word	0x08005e0f
 8005c6c:	08005e51 	.word	0x08005e51

	case JANVIER:
		if(JOURS>31){
 8005c70:	4b74      	ldr	r3, [pc, #464]	; (8005e44 <updatedate+0x274>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	2b1f      	cmp	r3, #31
 8005c76:	f240 80ff 	bls.w	8005e78 <updatedate+0x2a8>
			JOURS=1;
 8005c7a:	4b72      	ldr	r3, [pc, #456]	; (8005e44 <updatedate+0x274>)
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	701a      	strb	r2, [r3, #0]
			mois++;
 8005c80:	4b71      	ldr	r3, [pc, #452]	; (8005e48 <updatedate+0x278>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	3301      	adds	r3, #1
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	4b6f      	ldr	r3, [pc, #444]	; (8005e48 <updatedate+0x278>)
 8005c8a:	701a      	strb	r2, [r3, #0]
			MOIS++;
 8005c8c:	4b6f      	ldr	r3, [pc, #444]	; (8005e4c <updatedate+0x27c>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	3301      	adds	r3, #1
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	4b6d      	ldr	r3, [pc, #436]	; (8005e4c <updatedate+0x27c>)
 8005c96:	701a      	strb	r2, [r3, #0]
		}

		break;
 8005c98:	e0ee      	b.n	8005e78 <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 8005c9a:	4b6a      	ldr	r3, [pc, #424]	; (8005e44 <updatedate+0x274>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b1d      	cmp	r3, #29
 8005ca0:	f240 80ec 	bls.w	8005e7c <updatedate+0x2ac>
					JOURS=1;
 8005ca4:	4b67      	ldr	r3, [pc, #412]	; (8005e44 <updatedate+0x274>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	701a      	strb	r2, [r3, #0]
					mois++;
 8005caa:	4b67      	ldr	r3, [pc, #412]	; (8005e48 <updatedate+0x278>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	4b65      	ldr	r3, [pc, #404]	; (8005e48 <updatedate+0x278>)
 8005cb4:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005cb6:	4b65      	ldr	r3, [pc, #404]	; (8005e4c <updatedate+0x27c>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	4b63      	ldr	r3, [pc, #396]	; (8005e4c <updatedate+0x27c>)
 8005cc0:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005cc2:	e0db      	b.n	8005e7c <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 8005cc4:	4b5f      	ldr	r3, [pc, #380]	; (8005e44 <updatedate+0x274>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b1f      	cmp	r3, #31
 8005cca:	f240 80d9 	bls.w	8005e80 <updatedate+0x2b0>
					JOURS=1;
 8005cce:	4b5d      	ldr	r3, [pc, #372]	; (8005e44 <updatedate+0x274>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	701a      	strb	r2, [r3, #0]
					mois++;
 8005cd4:	4b5c      	ldr	r3, [pc, #368]	; (8005e48 <updatedate+0x278>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	4b5a      	ldr	r3, [pc, #360]	; (8005e48 <updatedate+0x278>)
 8005cde:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005ce0:	4b5a      	ldr	r3, [pc, #360]	; (8005e4c <updatedate+0x27c>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	4b58      	ldr	r3, [pc, #352]	; (8005e4c <updatedate+0x27c>)
 8005cea:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005cec:	e0c8      	b.n	8005e80 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 8005cee:	4b55      	ldr	r3, [pc, #340]	; (8005e44 <updatedate+0x274>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	2b1e      	cmp	r3, #30
 8005cf4:	f240 80c6 	bls.w	8005e84 <updatedate+0x2b4>
					JOURS=1;
 8005cf8:	4b52      	ldr	r3, [pc, #328]	; (8005e44 <updatedate+0x274>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	701a      	strb	r2, [r3, #0]
					mois++;
 8005cfe:	4b52      	ldr	r3, [pc, #328]	; (8005e48 <updatedate+0x278>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	3301      	adds	r3, #1
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	4b50      	ldr	r3, [pc, #320]	; (8005e48 <updatedate+0x278>)
 8005d08:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005d0a:	4b50      	ldr	r3, [pc, #320]	; (8005e4c <updatedate+0x27c>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	4b4e      	ldr	r3, [pc, #312]	; (8005e4c <updatedate+0x27c>)
 8005d14:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005d16:	e0b5      	b.n	8005e84 <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 8005d18:	4b4a      	ldr	r3, [pc, #296]	; (8005e44 <updatedate+0x274>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b1f      	cmp	r3, #31
 8005d1e:	f240 80b3 	bls.w	8005e88 <updatedate+0x2b8>
					JOURS=1;
 8005d22:	4b48      	ldr	r3, [pc, #288]	; (8005e44 <updatedate+0x274>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	701a      	strb	r2, [r3, #0]
					mois++;
 8005d28:	4b47      	ldr	r3, [pc, #284]	; (8005e48 <updatedate+0x278>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	4b45      	ldr	r3, [pc, #276]	; (8005e48 <updatedate+0x278>)
 8005d32:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005d34:	4b45      	ldr	r3, [pc, #276]	; (8005e4c <updatedate+0x27c>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	4b43      	ldr	r3, [pc, #268]	; (8005e4c <updatedate+0x27c>)
 8005d3e:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005d40:	e0a2      	b.n	8005e88 <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 8005d42:	4b40      	ldr	r3, [pc, #256]	; (8005e44 <updatedate+0x274>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b1e      	cmp	r3, #30
 8005d48:	f240 80a0 	bls.w	8005e8c <updatedate+0x2bc>
					JOURS=1;
 8005d4c:	4b3d      	ldr	r3, [pc, #244]	; (8005e44 <updatedate+0x274>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	701a      	strb	r2, [r3, #0]
					mois++;
 8005d52:	4b3d      	ldr	r3, [pc, #244]	; (8005e48 <updatedate+0x278>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	3301      	adds	r3, #1
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	4b3b      	ldr	r3, [pc, #236]	; (8005e48 <updatedate+0x278>)
 8005d5c:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005d5e:	4b3b      	ldr	r3, [pc, #236]	; (8005e4c <updatedate+0x27c>)
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	3301      	adds	r3, #1
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	4b39      	ldr	r3, [pc, #228]	; (8005e4c <updatedate+0x27c>)
 8005d68:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005d6a:	e08f      	b.n	8005e8c <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8005d6c:	4b35      	ldr	r3, [pc, #212]	; (8005e44 <updatedate+0x274>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b1f      	cmp	r3, #31
 8005d72:	f240 808d 	bls.w	8005e90 <updatedate+0x2c0>
					JOURS=1;
 8005d76:	4b33      	ldr	r3, [pc, #204]	; (8005e44 <updatedate+0x274>)
 8005d78:	2201      	movs	r2, #1
 8005d7a:	701a      	strb	r2, [r3, #0]
					mois++;
 8005d7c:	4b32      	ldr	r3, [pc, #200]	; (8005e48 <updatedate+0x278>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	3301      	adds	r3, #1
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	4b30      	ldr	r3, [pc, #192]	; (8005e48 <updatedate+0x278>)
 8005d86:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005d88:	4b30      	ldr	r3, [pc, #192]	; (8005e4c <updatedate+0x27c>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	4b2e      	ldr	r3, [pc, #184]	; (8005e4c <updatedate+0x27c>)
 8005d92:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005d94:	e07c      	b.n	8005e90 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 8005d96:	4b2b      	ldr	r3, [pc, #172]	; (8005e44 <updatedate+0x274>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b1f      	cmp	r3, #31
 8005d9c:	d97a      	bls.n	8005e94 <updatedate+0x2c4>
					JOURS=1;
 8005d9e:	4b29      	ldr	r3, [pc, #164]	; (8005e44 <updatedate+0x274>)
 8005da0:	2201      	movs	r2, #1
 8005da2:	701a      	strb	r2, [r3, #0]
					mois++;
 8005da4:	4b28      	ldr	r3, [pc, #160]	; (8005e48 <updatedate+0x278>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	3301      	adds	r3, #1
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	4b26      	ldr	r3, [pc, #152]	; (8005e48 <updatedate+0x278>)
 8005dae:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005db0:	4b26      	ldr	r3, [pc, #152]	; (8005e4c <updatedate+0x27c>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	3301      	adds	r3, #1
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	4b24      	ldr	r3, [pc, #144]	; (8005e4c <updatedate+0x27c>)
 8005dba:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005dbc:	e06a      	b.n	8005e94 <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8005dbe:	4b21      	ldr	r3, [pc, #132]	; (8005e44 <updatedate+0x274>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b1e      	cmp	r3, #30
 8005dc4:	d968      	bls.n	8005e98 <updatedate+0x2c8>
					JOURS=1;
 8005dc6:	4b1f      	ldr	r3, [pc, #124]	; (8005e44 <updatedate+0x274>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	701a      	strb	r2, [r3, #0]
					mois++;
 8005dcc:	4b1e      	ldr	r3, [pc, #120]	; (8005e48 <updatedate+0x278>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	4b1c      	ldr	r3, [pc, #112]	; (8005e48 <updatedate+0x278>)
 8005dd6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005dd8:	4b1c      	ldr	r3, [pc, #112]	; (8005e4c <updatedate+0x27c>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	4b1a      	ldr	r3, [pc, #104]	; (8005e4c <updatedate+0x27c>)
 8005de2:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005de4:	e058      	b.n	8005e98 <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 8005de6:	4b17      	ldr	r3, [pc, #92]	; (8005e44 <updatedate+0x274>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b1f      	cmp	r3, #31
 8005dec:	d956      	bls.n	8005e9c <updatedate+0x2cc>
					JOURS=1;
 8005dee:	4b15      	ldr	r3, [pc, #84]	; (8005e44 <updatedate+0x274>)
 8005df0:	2201      	movs	r2, #1
 8005df2:	701a      	strb	r2, [r3, #0]
					mois++;
 8005df4:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <updatedate+0x278>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <updatedate+0x278>)
 8005dfe:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005e00:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <updatedate+0x27c>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	3301      	adds	r3, #1
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	4b10      	ldr	r3, [pc, #64]	; (8005e4c <updatedate+0x27c>)
 8005e0a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005e0c:	e046      	b.n	8005e9c <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <updatedate+0x274>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b1e      	cmp	r3, #30
 8005e14:	d944      	bls.n	8005ea0 <updatedate+0x2d0>
					JOURS=1;
 8005e16:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <updatedate+0x274>)
 8005e18:	2201      	movs	r2, #1
 8005e1a:	701a      	strb	r2, [r3, #0]
					mois++;
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <updatedate+0x278>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	3301      	adds	r3, #1
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	4b08      	ldr	r3, [pc, #32]	; (8005e48 <updatedate+0x278>)
 8005e26:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005e28:	4b08      	ldr	r3, [pc, #32]	; (8005e4c <updatedate+0x27c>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	b2da      	uxtb	r2, r3
 8005e30:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <updatedate+0x27c>)
 8005e32:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005e34:	e034      	b.n	8005ea0 <updatedate+0x2d0>
 8005e36:	bf00      	nop
 8005e38:	20000b34 	.word	0x20000b34
 8005e3c:	20000b36 	.word	0x20000b36
 8005e40:	20000b35 	.word	0x20000b35
 8005e44:	20000008 	.word	0x20000008
 8005e48:	20000b37 	.word	0x20000b37
 8005e4c:	20000009 	.word	0x20000009
	case DECEMBRE:
		if(JOURS>31){
 8005e50:	4b1f      	ldr	r3, [pc, #124]	; (8005ed0 <updatedate+0x300>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b1f      	cmp	r3, #31
 8005e56:	d925      	bls.n	8005ea4 <updatedate+0x2d4>
					JOURS=1;
 8005e58:	4b1d      	ldr	r3, [pc, #116]	; (8005ed0 <updatedate+0x300>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	701a      	strb	r2, [r3, #0]
					mois++;
 8005e5e:	4b1d      	ldr	r3, [pc, #116]	; (8005ed4 <updatedate+0x304>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	3301      	adds	r3, #1
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	4b1b      	ldr	r3, [pc, #108]	; (8005ed4 <updatedate+0x304>)
 8005e68:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005e6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <updatedate+0x308>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	4b19      	ldr	r3, [pc, #100]	; (8005ed8 <updatedate+0x308>)
 8005e74:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005e76:	e015      	b.n	8005ea4 <updatedate+0x2d4>
		break;
 8005e78:	bf00      	nop
 8005e7a:	e014      	b.n	8005ea6 <updatedate+0x2d6>
		break;
 8005e7c:	bf00      	nop
 8005e7e:	e012      	b.n	8005ea6 <updatedate+0x2d6>
		break;
 8005e80:	bf00      	nop
 8005e82:	e010      	b.n	8005ea6 <updatedate+0x2d6>
		break;
 8005e84:	bf00      	nop
 8005e86:	e00e      	b.n	8005ea6 <updatedate+0x2d6>
		break;
 8005e88:	bf00      	nop
 8005e8a:	e00c      	b.n	8005ea6 <updatedate+0x2d6>
		break;
 8005e8c:	bf00      	nop
 8005e8e:	e00a      	b.n	8005ea6 <updatedate+0x2d6>
		break;
 8005e90:	bf00      	nop
 8005e92:	e008      	b.n	8005ea6 <updatedate+0x2d6>
		break;
 8005e94:	bf00      	nop
 8005e96:	e006      	b.n	8005ea6 <updatedate+0x2d6>
		break;
 8005e98:	bf00      	nop
 8005e9a:	e004      	b.n	8005ea6 <updatedate+0x2d6>
		break;
 8005e9c:	bf00      	nop
 8005e9e:	e002      	b.n	8005ea6 <updatedate+0x2d6>
		break;
 8005ea0:	bf00      	nop
 8005ea2:	e000      	b.n	8005ea6 <updatedate+0x2d6>
		break;
 8005ea4:	bf00      	nop

	}

	if(MOIS>12){
 8005ea6:	4b0c      	ldr	r3, [pc, #48]	; (8005ed8 <updatedate+0x308>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b0c      	cmp	r3, #12
 8005eac:	d90b      	bls.n	8005ec6 <updatedate+0x2f6>
		mois=JANVIER;
 8005eae:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <updatedate+0x304>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 8005eb4:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <updatedate+0x308>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 8005eba:	4b08      	ldr	r3, [pc, #32]	; (8005edc <updatedate+0x30c>)
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	4b06      	ldr	r3, [pc, #24]	; (8005edc <updatedate+0x30c>)
 8005ec4:	801a      	strh	r2, [r3, #0]
	}
}
 8005ec6:	bf00      	nop
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	20000008 	.word	0x20000008
 8005ed4:	20000b37 	.word	0x20000b37
 8005ed8:	20000009 	.word	0x20000009
 8005edc:	2000000a 	.word	0x2000000a

08005ee0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005ee4:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <MX_LPUART1_UART_Init+0x50>)
 8005ee6:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <MX_LPUART1_UART_Init+0x54>)
 8005ee8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8005eea:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <MX_LPUART1_UART_Init+0x50>)
 8005eec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005ef0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005ef2:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <MX_LPUART1_UART_Init+0x50>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005ef8:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <MX_LPUART1_UART_Init+0x50>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005efe:	4b0c      	ldr	r3, [pc, #48]	; (8005f30 <MX_LPUART1_UART_Init+0x50>)
 8005f00:	2200      	movs	r2, #0
 8005f02:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005f04:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <MX_LPUART1_UART_Init+0x50>)
 8005f06:	220c      	movs	r2, #12
 8005f08:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f0a:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <MX_LPUART1_UART_Init+0x50>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f10:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <MX_LPUART1_UART_Init+0x50>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f16:	4b06      	ldr	r3, [pc, #24]	; (8005f30 <MX_LPUART1_UART_Init+0x50>)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005f1c:	4804      	ldr	r0, [pc, #16]	; (8005f30 <MX_LPUART1_UART_Init+0x50>)
 8005f1e:	f007 fbc9 	bl	800d6b4 <HAL_UART_Init>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8005f28:	f7fb fdb7 	bl	8001a9a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005f2c:	bf00      	nop
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	200011fc 	.word	0x200011fc
 8005f34:	40008000 	.word	0x40008000

08005f38 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005f3c:	4b14      	ldr	r3, [pc, #80]	; (8005f90 <MX_USART1_UART_Init+0x58>)
 8005f3e:	4a15      	ldr	r2, [pc, #84]	; (8005f94 <MX_USART1_UART_Init+0x5c>)
 8005f40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005f42:	4b13      	ldr	r3, [pc, #76]	; (8005f90 <MX_USART1_UART_Init+0x58>)
 8005f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005f48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f4a:	4b11      	ldr	r3, [pc, #68]	; (8005f90 <MX_USART1_UART_Init+0x58>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005f50:	4b0f      	ldr	r3, [pc, #60]	; (8005f90 <MX_USART1_UART_Init+0x58>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005f56:	4b0e      	ldr	r3, [pc, #56]	; (8005f90 <MX_USART1_UART_Init+0x58>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005f5c:	4b0c      	ldr	r3, [pc, #48]	; (8005f90 <MX_USART1_UART_Init+0x58>)
 8005f5e:	220c      	movs	r2, #12
 8005f60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f62:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <MX_USART1_UART_Init+0x58>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005f68:	4b09      	ldr	r3, [pc, #36]	; (8005f90 <MX_USART1_UART_Init+0x58>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f6e:	4b08      	ldr	r3, [pc, #32]	; (8005f90 <MX_USART1_UART_Init+0x58>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f74:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <MX_USART1_UART_Init+0x58>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005f7a:	4805      	ldr	r0, [pc, #20]	; (8005f90 <MX_USART1_UART_Init+0x58>)
 8005f7c:	f007 fb9a 	bl	800d6b4 <HAL_UART_Init>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005f86:	f7fb fd88 	bl	8001a9a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005f8a:	bf00      	nop
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20001284 	.word	0x20001284
 8005f94:	40013800 	.word	0x40013800

08005f98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b0a0      	sub	sp, #128	; 0x80
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	605a      	str	r2, [r3, #4]
 8005faa:	609a      	str	r2, [r3, #8]
 8005fac:	60da      	str	r2, [r3, #12]
 8005fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005fb0:	f107 0318 	add.w	r3, r7, #24
 8005fb4:	2254      	movs	r2, #84	; 0x54
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f010 fc16 	bl	80167ea <memset>
  if(uartHandle->Instance==LPUART1)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a55      	ldr	r2, [pc, #340]	; (8006118 <HAL_UART_MspInit+0x180>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d168      	bne.n	800609a <HAL_UART_MspInit+0x102>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005fc8:	2320      	movs	r3, #32
 8005fca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005fd0:	f107 0318 	add.w	r3, r7, #24
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f005 fb15 	bl	800b604 <HAL_RCCEx_PeriphCLKConfig>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005fe0:	f7fb fd5b 	bl	8001a9a <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005fe4:	4b4d      	ldr	r3, [pc, #308]	; (800611c <HAL_UART_MspInit+0x184>)
 8005fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe8:	4a4c      	ldr	r2, [pc, #304]	; (800611c <HAL_UART_MspInit+0x184>)
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	65d3      	str	r3, [r2, #92]	; 0x5c
 8005ff0:	4b4a      	ldr	r3, [pc, #296]	; (800611c <HAL_UART_MspInit+0x184>)
 8005ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ffc:	4b47      	ldr	r3, [pc, #284]	; (800611c <HAL_UART_MspInit+0x184>)
 8005ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006000:	4a46      	ldr	r2, [pc, #280]	; (800611c <HAL_UART_MspInit+0x184>)
 8006002:	f043 0301 	orr.w	r3, r3, #1
 8006006:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006008:	4b44      	ldr	r3, [pc, #272]	; (800611c <HAL_UART_MspInit+0x184>)
 800600a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006014:	230c      	movs	r3, #12
 8006016:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006018:	2302      	movs	r3, #2
 800601a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800601c:	2300      	movs	r3, #0
 800601e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006020:	2303      	movs	r3, #3
 8006022:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8006024:	2308      	movs	r3, #8
 8006026:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006028:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800602c:	4619      	mov	r1, r3
 800602e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006032:	f002 f83f 	bl	80080b4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_RX Init */
    hdma_lpuart_rx.Instance = DMA2_Channel7;
 8006036:	4b3a      	ldr	r3, [pc, #232]	; (8006120 <HAL_UART_MspInit+0x188>)
 8006038:	4a3a      	ldr	r2, [pc, #232]	; (8006124 <HAL_UART_MspInit+0x18c>)
 800603a:	601a      	str	r2, [r3, #0]
    hdma_lpuart_rx.Init.Request = DMA_REQUEST_4;
 800603c:	4b38      	ldr	r3, [pc, #224]	; (8006120 <HAL_UART_MspInit+0x188>)
 800603e:	2204      	movs	r2, #4
 8006040:	605a      	str	r2, [r3, #4]
    hdma_lpuart_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006042:	4b37      	ldr	r3, [pc, #220]	; (8006120 <HAL_UART_MspInit+0x188>)
 8006044:	2200      	movs	r2, #0
 8006046:	609a      	str	r2, [r3, #8]
    hdma_lpuart_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006048:	4b35      	ldr	r3, [pc, #212]	; (8006120 <HAL_UART_MspInit+0x188>)
 800604a:	2200      	movs	r2, #0
 800604c:	60da      	str	r2, [r3, #12]
    hdma_lpuart_rx.Init.MemInc = DMA_MINC_ENABLE;
 800604e:	4b34      	ldr	r3, [pc, #208]	; (8006120 <HAL_UART_MspInit+0x188>)
 8006050:	2280      	movs	r2, #128	; 0x80
 8006052:	611a      	str	r2, [r3, #16]
    hdma_lpuart_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006054:	4b32      	ldr	r3, [pc, #200]	; (8006120 <HAL_UART_MspInit+0x188>)
 8006056:	2200      	movs	r2, #0
 8006058:	615a      	str	r2, [r3, #20]
    hdma_lpuart_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800605a:	4b31      	ldr	r3, [pc, #196]	; (8006120 <HAL_UART_MspInit+0x188>)
 800605c:	2200      	movs	r2, #0
 800605e:	619a      	str	r2, [r3, #24]
    hdma_lpuart_rx.Init.Mode = DMA_NORMAL;
 8006060:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <HAL_UART_MspInit+0x188>)
 8006062:	2200      	movs	r2, #0
 8006064:	61da      	str	r2, [r3, #28]
    hdma_lpuart_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006066:	4b2e      	ldr	r3, [pc, #184]	; (8006120 <HAL_UART_MspInit+0x188>)
 8006068:	2200      	movs	r2, #0
 800606a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_rx) != HAL_OK)
 800606c:	482c      	ldr	r0, [pc, #176]	; (8006120 <HAL_UART_MspInit+0x188>)
 800606e:	f001 fd9f 	bl	8007bb0 <HAL_DMA_Init>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8006078:	f7fb fd0f 	bl	8001a9a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart_rx);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a28      	ldr	r2, [pc, #160]	; (8006120 <HAL_UART_MspInit+0x188>)
 8006080:	675a      	str	r2, [r3, #116]	; 0x74
 8006082:	4a27      	ldr	r2, [pc, #156]	; (8006120 <HAL_UART_MspInit+0x188>)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8006088:	2200      	movs	r2, #0
 800608a:	2100      	movs	r1, #0
 800608c:	2046      	movs	r0, #70	; 0x46
 800608e:	f001 fd58 	bl	8007b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8006092:	2046      	movs	r0, #70	; 0x46
 8006094:	f001 fd71 	bl	8007b7a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006098:	e03a      	b.n	8006110 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART1)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a22      	ldr	r2, [pc, #136]	; (8006128 <HAL_UART_MspInit+0x190>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d135      	bne.n	8006110 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80060a4:	2301      	movs	r3, #1
 80060a6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80060a8:	2300      	movs	r3, #0
 80060aa:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80060ac:	f107 0318 	add.w	r3, r7, #24
 80060b0:	4618      	mov	r0, r3
 80060b2:	f005 faa7 	bl	800b604 <HAL_RCCEx_PeriphCLKConfig>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_UART_MspInit+0x128>
      Error_Handler();
 80060bc:	f7fb fced 	bl	8001a9a <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80060c0:	4b16      	ldr	r3, [pc, #88]	; (800611c <HAL_UART_MspInit+0x184>)
 80060c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c4:	4a15      	ldr	r2, [pc, #84]	; (800611c <HAL_UART_MspInit+0x184>)
 80060c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060ca:	6613      	str	r3, [r2, #96]	; 0x60
 80060cc:	4b13      	ldr	r3, [pc, #76]	; (800611c <HAL_UART_MspInit+0x184>)
 80060ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060d8:	4b10      	ldr	r3, [pc, #64]	; (800611c <HAL_UART_MspInit+0x184>)
 80060da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060dc:	4a0f      	ldr	r2, [pc, #60]	; (800611c <HAL_UART_MspInit+0x184>)
 80060de:	f043 0302 	orr.w	r3, r3, #2
 80060e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060e4:	4b0d      	ldr	r3, [pc, #52]	; (800611c <HAL_UART_MspInit+0x184>)
 80060e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	60bb      	str	r3, [r7, #8]
 80060ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80060f0:	23c0      	movs	r3, #192	; 0xc0
 80060f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060f4:	2302      	movs	r3, #2
 80060f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060fc:	2303      	movs	r3, #3
 80060fe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006100:	2307      	movs	r3, #7
 8006102:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006104:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006108:	4619      	mov	r1, r3
 800610a:	4808      	ldr	r0, [pc, #32]	; (800612c <HAL_UART_MspInit+0x194>)
 800610c:	f001 ffd2 	bl	80080b4 <HAL_GPIO_Init>
}
 8006110:	bf00      	nop
 8006112:	3780      	adds	r7, #128	; 0x80
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40008000 	.word	0x40008000
 800611c:	40021000 	.word	0x40021000
 8006120:	2000130c 	.word	0x2000130c
 8006124:	40020480 	.word	0x40020480
 8006128:	40013800 	.word	0x40013800
 800612c:	48000400 	.word	0x48000400

08006130 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8006138:	4b30      	ldr	r3, [pc, #192]	; (80061fc <HAL_UART_RxCpltCallback+0xcc>)
 800613a:	881a      	ldrh	r2, [r3, #0]
 800613c:	4b30      	ldr	r3, [pc, #192]	; (8006200 <HAL_UART_RxCpltCallback+0xd0>)
 800613e:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8006140:	4b2f      	ldr	r3, [pc, #188]	; (8006200 <HAL_UART_RxCpltCallback+0xd0>)
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8006148:	d922      	bls.n	8006190 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 800614a:	4b2d      	ldr	r3, [pc, #180]	; (8006200 <HAL_UART_RxCpltCallback+0xd0>)
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006152:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8006154:	4b2a      	ldr	r3, [pc, #168]	; (8006200 <HAL_UART_RxCpltCallback+0xd0>)
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	461a      	mov	r2, r3
 800615a:	4b2a      	ldr	r3, [pc, #168]	; (8006204 <HAL_UART_RxCpltCallback+0xd4>)
 800615c:	4413      	add	r3, r2
 800615e:	89fa      	ldrh	r2, [r7, #14]
 8006160:	4929      	ldr	r1, [pc, #164]	; (8006208 <HAL_UART_RxCpltCallback+0xd8>)
 8006162:	4618      	mov	r0, r3
 8006164:	f010 fc5d 	bl	8016a22 <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8006168:	4b25      	ldr	r3, [pc, #148]	; (8006200 <HAL_UART_RxCpltCallback+0xd0>)
 800616a:	2200      	movs	r2, #0
 800616c:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 800616e:	89fb      	ldrh	r3, [r7, #14]
 8006170:	4a25      	ldr	r2, [pc, #148]	; (8006208 <HAL_UART_RxCpltCallback+0xd8>)
 8006172:	1899      	adds	r1, r3, r2
 8006174:	89fb      	ldrh	r3, [r7, #14]
 8006176:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800617a:	461a      	mov	r2, r3
 800617c:	4821      	ldr	r0, [pc, #132]	; (8006204 <HAL_UART_RxCpltCallback+0xd4>)
 800617e:	f010 fc50 	bl	8016a22 <memcpy>
				newPos = (64-datatocopy);  // update the position
 8006182:	89fb      	ldrh	r3, [r7, #14]
 8006184:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006188:	b29a      	uxth	r2, r3
 800618a:	4b1c      	ldr	r3, [pc, #112]	; (80061fc <HAL_UART_RxCpltCallback+0xcc>)
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	e01e      	b.n	80061ce <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8006190:	4b1b      	ldr	r3, [pc, #108]	; (8006200 <HAL_UART_RxCpltCallback+0xd0>)
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	461a      	mov	r2, r3
 8006196:	4b1b      	ldr	r3, [pc, #108]	; (8006204 <HAL_UART_RxCpltCallback+0xd4>)
 8006198:	441a      	add	r2, r3
 800619a:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <HAL_UART_RxCpltCallback+0xd8>)
 800619c:	4610      	mov	r0, r2
 800619e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80061a2:	4602      	mov	r2, r0
 80061a4:	4619      	mov	r1, r3
 80061a6:	f8d1 c000 	ldr.w	ip, [r1]
 80061aa:	684e      	ldr	r6, [r1, #4]
 80061ac:	688d      	ldr	r5, [r1, #8]
 80061ae:	68c9      	ldr	r1, [r1, #12]
 80061b0:	f8c2 c000 	str.w	ip, [r2]
 80061b4:	6056      	str	r6, [r2, #4]
 80061b6:	6095      	str	r5, [r2, #8]
 80061b8:	60d1      	str	r1, [r2, #12]
 80061ba:	3310      	adds	r3, #16
 80061bc:	3010      	adds	r0, #16
 80061be:	42a3      	cmp	r3, r4
 80061c0:	d1ef      	bne.n	80061a2 <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 80061c2:	4b0f      	ldr	r3, [pc, #60]	; (8006200 <HAL_UART_RxCpltCallback+0xd0>)
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	3340      	adds	r3, #64	; 0x40
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <HAL_UART_RxCpltCallback+0xcc>)
 80061cc:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 80061ce:	2240      	movs	r2, #64	; 0x40
 80061d0:	490d      	ldr	r1, [pc, #52]	; (8006208 <HAL_UART_RxCpltCallback+0xd8>)
 80061d2:	480e      	ldr	r0, [pc, #56]	; (800620c <HAL_UART_RxCpltCallback+0xdc>)
 80061d4:	f007 fabc 	bl	800d750 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 80061d8:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <HAL_UART_RxCpltCallback+0xe0>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <HAL_UART_RxCpltCallback+0xe0>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0204 	bic.w	r2, r2, #4
 80061e6:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 80061e8:	2240      	movs	r2, #64	; 0x40
 80061ea:	4907      	ldr	r1, [pc, #28]	; (8006208 <HAL_UART_RxCpltCallback+0xd8>)
 80061ec:	4807      	ldr	r0, [pc, #28]	; (800620c <HAL_UART_RxCpltCallback+0xdc>)
 80061ee:	f007 faaf 	bl	800d750 <HAL_UART_Receive_DMA>
}
 80061f2:	bf00      	nop
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061fa:	bf00      	nop
 80061fc:	20000482 	.word	0x20000482
 8006200:	20000480 	.word	0x20000480
 8006204:	200004c4 	.word	0x200004c4
 8006208:	20000484 	.word	0x20000484
 800620c:	200011fc 	.word	0x200011fc
 8006210:	2000130c 	.word	0x2000130c

08006214 <getgpu>:
uint8_t usbnumbuf2[10];




void getgpu(uint8_t * usbbuffer){
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
	usbbuffer[64]='$';
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3340      	adds	r3, #64	; 0x40
 8006220:	2224      	movs	r2, #36	; 0x24
 8006222:	701a      	strb	r2, [r3, #0]
	memset(usbnumbuf1,'$',10);
 8006224:	220a      	movs	r2, #10
 8006226:	2124      	movs	r1, #36	; 0x24
 8006228:	4823      	ldr	r0, [pc, #140]	; (80062b8 <getgpu+0xa4>)
 800622a:	f010 fade 	bl	80167ea <memset>
	memset(usbnumbuf2,'$',10);
 800622e:	220a      	movs	r2, #10
 8006230:	2124      	movs	r1, #36	; 0x24
 8006232:	4822      	ldr	r0, [pc, #136]	; (80062bc <getgpu+0xa8>)
 8006234:	f010 fad9 	bl	80167ea <memset>


	int cnt=0;
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]
	while(usbbuffer[cnt]!='$'){
 800623c:	e00b      	b.n	8006256 <getgpu+0x42>

		usbnumbuf1[cnt]=usbbuffer[cnt];
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	4413      	add	r3, r2
 8006244:	7819      	ldrb	r1, [r3, #0]
 8006246:	4a1c      	ldr	r2, [pc, #112]	; (80062b8 <getgpu+0xa4>)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	460a      	mov	r2, r1
 800624e:	701a      	strb	r2, [r3, #0]
				  cnt++;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	3301      	adds	r3, #1
 8006254:	60fb      	str	r3, [r7, #12]
	while(usbbuffer[cnt]!='$'){
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	4413      	add	r3, r2
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b24      	cmp	r3, #36	; 0x24
 8006260:	d1ed      	bne.n	800623e <getgpu+0x2a>
			  }
			  cnt++;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3301      	adds	r3, #1
 8006266:	60fb      	str	r3, [r7, #12]
			  int cnt1=0;
 8006268:	2300      	movs	r3, #0
 800626a:	60bb      	str	r3, [r7, #8]
			  while(usbbuffer[cnt]!='$'){
 800626c:	e00e      	b.n	800628c <getgpu+0x78>

			  		  usbnumbuf2[cnt1]=usbbuffer[cnt];
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	4413      	add	r3, r2
 8006274:	7819      	ldrb	r1, [r3, #0]
 8006276:	4a11      	ldr	r2, [pc, #68]	; (80062bc <getgpu+0xa8>)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4413      	add	r3, r2
 800627c:	460a      	mov	r2, r1
 800627e:	701a      	strb	r2, [r3, #0]
			  		  cnt1++;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	3301      	adds	r3, #1
 8006284:	60bb      	str	r3, [r7, #8]
			  		  cnt++;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
			  while(usbbuffer[cnt]!='$'){
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	4413      	add	r3, r2
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b24      	cmp	r3, #36	; 0x24
 8006296:	d1ea      	bne.n	800626e <getgpu+0x5a>
			  	  }

	gputemp=atoi((uint8_t *)usbnumbuf1);
 8006298:	4807      	ldr	r0, [pc, #28]	; (80062b8 <getgpu+0xa4>)
 800629a:	f00e fb11 	bl	80148c0 <atoi>
 800629e:	4603      	mov	r3, r0
 80062a0:	4a07      	ldr	r2, [pc, #28]	; (80062c0 <getgpu+0xac>)
 80062a2:	6013      	str	r3, [r2, #0]
	gpupower=atoi((uint8_t *)usbnumbuf2);
 80062a4:	4805      	ldr	r0, [pc, #20]	; (80062bc <getgpu+0xa8>)
 80062a6:	f00e fb0b 	bl	80148c0 <atoi>
 80062aa:	4603      	mov	r3, r0
 80062ac:	4a05      	ldr	r2, [pc, #20]	; (80062c4 <getgpu+0xb0>)
 80062ae:	6013      	str	r3, [r2, #0]


}
 80062b0:	bf00      	nop
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	20001354 	.word	0x20001354
 80062bc:	20001360 	.word	0x20001360
 80062c0:	200010c0 	.word	0x200010c0
 80062c4:	200010c4 	.word	0x200010c4

080062c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80062c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006300 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80062cc:	f7ff faf0 	bl	80058b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80062d0:	480c      	ldr	r0, [pc, #48]	; (8006304 <LoopForever+0x6>)
  ldr r1, =_edata
 80062d2:	490d      	ldr	r1, [pc, #52]	; (8006308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80062d4:	4a0d      	ldr	r2, [pc, #52]	; (800630c <LoopForever+0xe>)
  movs r3, #0
 80062d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80062d8:	e002      	b.n	80062e0 <LoopCopyDataInit>

080062da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80062da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80062dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80062de:	3304      	adds	r3, #4

080062e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062e4:	d3f9      	bcc.n	80062da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062e6:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80062e8:	4c0a      	ldr	r4, [pc, #40]	; (8006314 <LoopForever+0x16>)
  movs r3, #0
 80062ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062ec:	e001      	b.n	80062f2 <LoopFillZerobss>

080062ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062f0:	3204      	adds	r2, #4

080062f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062f4:	d3fb      	bcc.n	80062ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80062f6:	f010 fb65 	bl	80169c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80062fa:	f7fb fabf 	bl	800187c <main>

080062fe <LoopForever>:

LoopForever:
    b LoopForever
 80062fe:	e7fe      	b.n	80062fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006300:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8006304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006308:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 800630c:	0801d370 	.word	0x0801d370
  ldr r2, =_sbss
 8006310:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8006314:	200026b4 	.word	0x200026b4

08006318 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006318:	e7fe      	b.n	8006318 <CAN1_RX0_IRQHandler>

0800631a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006324:	2003      	movs	r0, #3
 8006326:	f001 fc01 	bl	8007b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800632a:	200f      	movs	r0, #15
 800632c:	f000 f80e 	bl	800634c <HAL_InitTick>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	71fb      	strb	r3, [r7, #7]
 800633a:	e001      	b.n	8006340 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800633c:	f7ff f910 	bl	8005560 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006340:	79fb      	ldrb	r3, [r7, #7]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006358:	4b17      	ldr	r3, [pc, #92]	; (80063b8 <HAL_InitTick+0x6c>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d023      	beq.n	80063a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006360:	4b16      	ldr	r3, [pc, #88]	; (80063bc <HAL_InitTick+0x70>)
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <HAL_InitTick+0x6c>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	4619      	mov	r1, r3
 800636a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800636e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006372:	fbb2 f3f3 	udiv	r3, r2, r3
 8006376:	4618      	mov	r0, r3
 8006378:	f001 fc0d 	bl	8007b96 <HAL_SYSTICK_Config>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10f      	bne.n	80063a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b0f      	cmp	r3, #15
 8006386:	d809      	bhi.n	800639c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006388:	2200      	movs	r2, #0
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	f04f 30ff 	mov.w	r0, #4294967295
 8006390:	f001 fbd7 	bl	8007b42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006394:	4a0a      	ldr	r2, [pc, #40]	; (80063c0 <HAL_InitTick+0x74>)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	e007      	b.n	80063ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	73fb      	strb	r3, [r7, #15]
 80063a0:	e004      	b.n	80063ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	73fb      	strb	r3, [r7, #15]
 80063a6:	e001      	b.n	80063ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80063ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	2000002c 	.word	0x2000002c
 80063bc:	20000024 	.word	0x20000024
 80063c0:	20000028 	.word	0x20000028

080063c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80063c8:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <HAL_IncTick+0x20>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	461a      	mov	r2, r3
 80063ce:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <HAL_IncTick+0x24>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4413      	add	r3, r2
 80063d4:	4a04      	ldr	r2, [pc, #16]	; (80063e8 <HAL_IncTick+0x24>)
 80063d6:	6013      	str	r3, [r2, #0]
}
 80063d8:	bf00      	nop
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	2000002c 	.word	0x2000002c
 80063e8:	2000136c 	.word	0x2000136c

080063ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
  return uwTick;
 80063f0:	4b03      	ldr	r3, [pc, #12]	; (8006400 <HAL_GetTick+0x14>)
 80063f2:	681b      	ldr	r3, [r3, #0]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	2000136c 	.word	0x2000136c

08006404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800640c:	f7ff ffee 	bl	80063ec <HAL_GetTick>
 8006410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641c:	d005      	beq.n	800642a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800641e:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <HAL_Delay+0x44>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800642a:	bf00      	nop
 800642c:	f7ff ffde 	bl	80063ec <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	429a      	cmp	r2, r3
 800643a:	d8f7      	bhi.n	800642c <HAL_Delay+0x28>
  {
  }
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	2000002c 	.word	0x2000002c

0800644c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	431a      	orrs	r2, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	609a      	str	r2, [r3, #8]
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	609a      	str	r2, [r3, #8]
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3360      	adds	r3, #96	; 0x60
 80064c6:	461a      	mov	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <LL_ADC_SetOffset+0x44>)
 80064d6:	4013      	ands	r3, r2
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80064ec:	bf00      	nop
 80064ee:	371c      	adds	r7, #28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr
 80064f8:	03fff000 	.word	0x03fff000

080064fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3360      	adds	r3, #96	; 0x60
 800650a:	461a      	mov	r2, r3
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3360      	adds	r3, #96	; 0x60
 8006538:	461a      	mov	r2, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	431a      	orrs	r2, r3
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3330      	adds	r3, #48	; 0x30
 8006594:	461a      	mov	r2, r3
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	0a1b      	lsrs	r3, r3, #8
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	f003 030c 	and.w	r3, r3, #12
 80065a0:	4413      	add	r3, r2
 80065a2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f003 031f 	and.w	r3, r3, #31
 80065ae:	211f      	movs	r1, #31
 80065b0:	fa01 f303 	lsl.w	r3, r1, r3
 80065b4:	43db      	mvns	r3, r3
 80065b6:	401a      	ands	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	0e9b      	lsrs	r3, r3, #26
 80065bc:	f003 011f 	and.w	r1, r3, #31
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f003 031f 	and.w	r3, r3, #31
 80065c6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ca:	431a      	orrs	r2, r3
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80065d0:	bf00      	nop
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006602:	b480      	push	{r7}
 8006604:	b087      	sub	sp, #28
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3314      	adds	r3, #20
 8006612:	461a      	mov	r2, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	0e5b      	lsrs	r3, r3, #25
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	f003 0304 	and.w	r3, r3, #4
 800661e:	4413      	add	r3, r2
 8006620:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	0d1b      	lsrs	r3, r3, #20
 800662a:	f003 031f 	and.w	r3, r3, #31
 800662e:	2107      	movs	r1, #7
 8006630:	fa01 f303 	lsl.w	r3, r1, r3
 8006634:	43db      	mvns	r3, r3
 8006636:	401a      	ands	r2, r3
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	0d1b      	lsrs	r3, r3, #20
 800663c:	f003 031f 	and.w	r3, r3, #31
 8006640:	6879      	ldr	r1, [r7, #4]
 8006642:	fa01 f303 	lsl.w	r3, r1, r3
 8006646:	431a      	orrs	r2, r3
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800664c:	bf00      	nop
 800664e:	371c      	adds	r7, #28
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006670:	43db      	mvns	r3, r3
 8006672:	401a      	ands	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f003 0318 	and.w	r3, r3, #24
 800667a:	4908      	ldr	r1, [pc, #32]	; (800669c <LL_ADC_SetChannelSingleDiff+0x44>)
 800667c:	40d9      	lsrs	r1, r3
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	400b      	ands	r3, r1
 8006682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006686:	431a      	orrs	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800668e:	bf00      	nop
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	0007ffff 	.word	0x0007ffff

080066a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80066b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6093      	str	r3, [r2, #8]
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d8:	d101      	bne.n	80066de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80066fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006700:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006724:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006728:	d101      	bne.n	800672e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800674c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006750:	f043 0201 	orr.w	r2, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b01      	cmp	r3, #1
 8006776:	d101      	bne.n	800677c <LL_ADC_IsEnabled+0x18>
 8006778:	2301      	movs	r3, #1
 800677a:	e000      	b.n	800677e <LL_ADC_IsEnabled+0x1a>
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800679a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800679e:	f043 0204 	orr.w	r2, r3, #4
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f003 0304 	and.w	r3, r3, #4
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d101      	bne.n	80067ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80067c6:	2301      	movs	r3, #1
 80067c8:	e000      	b.n	80067cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 0308 	and.w	r3, r3, #8
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d101      	bne.n	80067f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80067ec:	2301      	movs	r3, #1
 80067ee:	e000      	b.n	80067f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
	...

08006800 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e126      	b.n	8006a68 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006824:	2b00      	cmp	r3, #0
 8006826:	d109      	bne.n	800683c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f7fa fc67 	bl	80010fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff ff3f 	bl	80066c4 <LL_ADC_IsDeepPowerDownEnabled>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff ff25 	bl	80066a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f7ff ff5a 	bl	8006714 <LL_ADC_IsInternalRegulatorEnabled>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d115      	bne.n	8006892 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff ff3e 	bl	80066ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006870:	4b7f      	ldr	r3, [pc, #508]	; (8006a70 <HAL_ADC_Init+0x270>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	099b      	lsrs	r3, r3, #6
 8006876:	4a7f      	ldr	r2, [pc, #508]	; (8006a74 <HAL_ADC_Init+0x274>)
 8006878:	fba2 2303 	umull	r2, r3, r2, r3
 800687c:	099b      	lsrs	r3, r3, #6
 800687e:	3301      	adds	r3, #1
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006884:	e002      	b.n	800688c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3b01      	subs	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1f9      	bne.n	8006886 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff ff3c 	bl	8006714 <LL_ADC_IsInternalRegulatorEnabled>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10d      	bne.n	80068be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a6:	f043 0210 	orr.w	r2, r3, #16
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b2:	f043 0201 	orr.w	r2, r3, #1
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff ff75 	bl	80067b2 <LL_ADC_REG_IsConversionOngoing>
 80068c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ce:	f003 0310 	and.w	r3, r3, #16
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f040 80bf 	bne.w	8006a56 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f040 80bb 	bne.w	8006a56 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80068e8:	f043 0202 	orr.w	r2, r3, #2
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff ff35 	bl	8006764 <LL_ADC_IsEnabled>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10b      	bne.n	8006918 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006900:	485d      	ldr	r0, [pc, #372]	; (8006a78 <HAL_ADC_Init+0x278>)
 8006902:	f7ff ff2f 	bl	8006764 <LL_ADC_IsEnabled>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d105      	bne.n	8006918 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	4619      	mov	r1, r3
 8006912:	485a      	ldr	r0, [pc, #360]	; (8006a7c <HAL_ADC_Init+0x27c>)
 8006914:	f7ff fd9a 	bl	800644c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	7e5b      	ldrb	r3, [r3, #25]
 800691c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006922:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006928:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800692e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006936:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006938:	4313      	orrs	r3, r2
 800693a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d106      	bne.n	8006954 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	3b01      	subs	r3, #1
 800694c:	045b      	lsls	r3, r3, #17
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	4313      	orrs	r3, r2
 8006952:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006958:	2b00      	cmp	r3, #0
 800695a:	d009      	beq.n	8006970 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006960:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800696a:	69ba      	ldr	r2, [r7, #24]
 800696c:	4313      	orrs	r3, r2
 800696e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	4b42      	ldr	r3, [pc, #264]	; (8006a80 <HAL_ADC_Init+0x280>)
 8006978:	4013      	ands	r3, r2
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6812      	ldr	r2, [r2, #0]
 800697e:	69b9      	ldr	r1, [r7, #24]
 8006980:	430b      	orrs	r3, r1
 8006982:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff ff25 	bl	80067d8 <LL_ADC_INJ_IsConversionOngoing>
 800698e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d13d      	bne.n	8006a12 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d13a      	bne.n	8006a12 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80069a0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069a8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80069aa:	4313      	orrs	r3, r2
 80069ac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069b8:	f023 0302 	bic.w	r3, r3, #2
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	69b9      	ldr	r1, [r7, #24]
 80069c2:	430b      	orrs	r3, r1
 80069c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d118      	bne.n	8006a02 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80069da:	f023 0304 	bic.w	r3, r3, #4
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80069e6:	4311      	orrs	r1, r2
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80069ec:	4311      	orrs	r1, r2
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80069f2:	430a      	orrs	r2, r1
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0201 	orr.w	r2, r2, #1
 80069fe:	611a      	str	r2, [r3, #16]
 8006a00:	e007      	b.n	8006a12 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	691a      	ldr	r2, [r3, #16]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0201 	bic.w	r2, r2, #1
 8006a10:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d10c      	bne.n	8006a34 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a20:	f023 010f 	bic.w	r1, r3, #15
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	1e5a      	subs	r2, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	631a      	str	r2, [r3, #48]	; 0x30
 8006a32:	e007      	b.n	8006a44 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 020f 	bic.w	r2, r2, #15
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a48:	f023 0303 	bic.w	r3, r3, #3
 8006a4c:	f043 0201 	orr.w	r2, r3, #1
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	655a      	str	r2, [r3, #84]	; 0x54
 8006a54:	e007      	b.n	8006a66 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5a:	f043 0210 	orr.w	r2, r3, #16
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006a66:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3720      	adds	r7, #32
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	20000024 	.word	0x20000024
 8006a74:	053e2d63 	.word	0x053e2d63
 8006a78:	50040000 	.word	0x50040000
 8006a7c:	50040300 	.word	0x50040300
 8006a80:	fff0c007 	.word	0xfff0c007

08006a84 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b086      	sub	sp, #24
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7ff fe8c 	bl	80067b2 <LL_ADC_REG_IsConversionOngoing>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d167      	bne.n	8006b70 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d101      	bne.n	8006aae <HAL_ADC_Start_DMA+0x2a>
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e063      	b.n	8006b76 <HAL_ADC_Start_DMA+0xf2>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 fe1c 	bl	80076f4 <ADC_Enable>
 8006abc:	4603      	mov	r3, r0
 8006abe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d14f      	bne.n	8006b66 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ace:	f023 0301 	bic.w	r3, r3, #1
 8006ad2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d006      	beq.n	8006af4 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aea:	f023 0206 	bic.w	r2, r3, #6
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	659a      	str	r2, [r3, #88]	; 0x58
 8006af2:	e002      	b.n	8006afa <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006afe:	4a20      	ldr	r2, [pc, #128]	; (8006b80 <HAL_ADC_Start_DMA+0xfc>)
 8006b00:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b06:	4a1f      	ldr	r2, [pc, #124]	; (8006b84 <HAL_ADC_Start_DMA+0x100>)
 8006b08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b0e:	4a1e      	ldr	r2, [pc, #120]	; (8006b88 <HAL_ADC_Start_DMA+0x104>)
 8006b10:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	221c      	movs	r2, #28
 8006b18:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f042 0210 	orr.w	r2, r2, #16
 8006b30:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f042 0201 	orr.w	r2, r2, #1
 8006b40:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3340      	adds	r3, #64	; 0x40
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f001 f8e5 	bl	8007d20 <HAL_DMA_Start_IT>
 8006b56:	4603      	mov	r3, r0
 8006b58:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff fe13 	bl	800678a <LL_ADC_REG_StartConversion>
 8006b64:	e006      	b.n	8006b74 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006b6e:	e001      	b.n	8006b74 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006b70:	2302      	movs	r3, #2
 8006b72:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	08007801 	.word	0x08007801
 8006b84:	080078d9 	.word	0x080078d9
 8006b88:	080078f5 	.word	0x080078f5

08006b8c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006b94:	2300      	movs	r3, #0
 8006b96:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d017      	beq.n	8006be2 <HAL_ADC_IRQHandler+0x56>
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d012      	beq.n	8006be2 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc0:	f003 0310 	and.w	r3, r3, #16
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d105      	bne.n	8006bd4 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bcc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fecf 	bl	8007978 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2202      	movs	r2, #2
 8006be0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d004      	beq.n	8006bf6 <HAL_ADC_IRQHandler+0x6a>
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f003 0304 	and.w	r3, r3, #4
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d109      	bne.n	8006c0a <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d05e      	beq.n	8006cbe <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f003 0308 	and.w	r3, r3, #8
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d059      	beq.n	8006cbe <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0e:	f003 0310 	and.w	r3, r3, #16
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d105      	bne.n	8006c22 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7ff fc99 	bl	800655e <LL_ADC_REG_IsTriggerSourceSWStart>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d03e      	beq.n	8006cb0 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d135      	bne.n	8006cb0 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b08      	cmp	r3, #8
 8006c50:	d12e      	bne.n	8006cb0 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff fdab 	bl	80067b2 <LL_ADC_REG_IsConversionOngoing>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d11a      	bne.n	8006c98 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 020c 	bic.w	r2, r2, #12
 8006c70:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d112      	bne.n	8006cb0 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8e:	f043 0201 	orr.w	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	655a      	str	r2, [r3, #84]	; 0x54
 8006c96:	e00b      	b.n	8006cb0 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9c:	f043 0210 	orr.w	r2, r3, #16
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca8:	f043 0201 	orr.w	r2, r3, #1
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7fa fa99 	bl	80011e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	220c      	movs	r2, #12
 8006cbc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d004      	beq.n	8006cd2 <HAL_ADC_IRQHandler+0x146>
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d072      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d06d      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cea:	f003 0310 	and.w	r3, r3, #16
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d105      	bne.n	8006cfe <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7ff fc6a 	bl	80065dc <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006d08:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7ff fc25 	bl	800655e <LL_ADC_REG_IsTriggerSourceSWStart>
 8006d14:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d047      	beq.n	8006db4 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d007      	beq.n	8006d3e <HAL_ADC_IRQHandler+0x1b2>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d03f      	beq.n	8006db4 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d13a      	bne.n	8006db4 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d48:	2b40      	cmp	r3, #64	; 0x40
 8006d4a:	d133      	bne.n	8006db4 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d12e      	bne.n	8006db4 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff fd3c 	bl	80067d8 <LL_ADC_INJ_IsConversionOngoing>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d11a      	bne.n	8006d9c <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006d74:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d112      	bne.n	8006db4 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d92:	f043 0201 	orr.w	r2, r3, #1
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	655a      	str	r2, [r3, #84]	; 0x54
 8006d9a:	e00b      	b.n	8006db4 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da0:	f043 0210 	orr.w	r2, r3, #16
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dac:	f043 0201 	orr.w	r2, r3, #1
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fdb7 	bl	8007928 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2260      	movs	r2, #96	; 0x60
 8006dc0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d011      	beq.n	8006df0 <HAL_ADC_IRQHandler+0x264>
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00c      	beq.n	8006df0 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f890 	bl	8006f08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2280      	movs	r2, #128	; 0x80
 8006dee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d012      	beq.n	8006e20 <HAL_ADC_IRQHandler+0x294>
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00d      	beq.n	8006e20 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e08:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fd9d 	bl	8007950 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e1e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d012      	beq.n	8006e50 <HAL_ADC_IRQHandler+0x2c4>
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00d      	beq.n	8006e50 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fd8f 	bl	8007964 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	f003 0310 	and.w	r3, r3, #16
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d02a      	beq.n	8006eb0 <HAL_ADC_IRQHandler+0x324>
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f003 0310 	and.w	r3, r3, #16
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d025      	beq.n	8006eb0 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d102      	bne.n	8006e72 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	61fb      	str	r3, [r7, #28]
 8006e70:	e008      	b.n	8006e84 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8006e80:	2301      	movs	r3, #1
 8006e82:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d10e      	bne.n	8006ea8 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e8e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9a:	f043 0202 	orr.w	r2, r3, #2
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f83a 	bl	8006f1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2210      	movs	r2, #16
 8006eae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d018      	beq.n	8006eec <HAL_ADC_IRQHandler+0x360>
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d013      	beq.n	8006eec <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed4:	f043 0208 	orr.w	r2, r3, #8
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ee4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fd28 	bl	800793c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006eec:	bf00      	nop
 8006eee:	3720      	adds	r7, #32
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b0b6      	sub	sp, #216	; 0xd8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d101      	bne.n	8006f52 <HAL_ADC_ConfigChannel+0x22>
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e3bb      	b.n	80076ca <HAL_ADC_ConfigChannel+0x79a>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7ff fc27 	bl	80067b2 <LL_ADC_REG_IsConversionOngoing>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f040 83a0 	bne.w	80076ac <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	2b05      	cmp	r3, #5
 8006f7a:	d824      	bhi.n	8006fc6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	3b02      	subs	r3, #2
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d81b      	bhi.n	8006fbe <HAL_ADC_ConfigChannel+0x8e>
 8006f86:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <HAL_ADC_ConfigChannel+0x5c>)
 8006f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8c:	08006f9d 	.word	0x08006f9d
 8006f90:	08006fa5 	.word	0x08006fa5
 8006f94:	08006fad 	.word	0x08006fad
 8006f98:	08006fb5 	.word	0x08006fb5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8006f9c:	230c      	movs	r3, #12
 8006f9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006fa2:	e010      	b.n	8006fc6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8006fa4:	2312      	movs	r3, #18
 8006fa6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006faa:	e00c      	b.n	8006fc6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8006fac:	2318      	movs	r3, #24
 8006fae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006fb2:	e008      	b.n	8006fc6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8006fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006fbc:	e003      	b.n	8006fc6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8006fbe:	2306      	movs	r3, #6
 8006fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8006fc4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006fd4:	f7ff fad6 	bl	8006584 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7ff fbe8 	bl	80067b2 <LL_ADC_REG_IsConversionOngoing>
 8006fe2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff fbf4 	bl	80067d8 <LL_ADC_INJ_IsConversionOngoing>
 8006ff0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006ff4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f040 81a4 	bne.w	8007346 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006ffe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007002:	2b00      	cmp	r3, #0
 8007004:	f040 819f 	bne.w	8007346 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6818      	ldr	r0, [r3, #0]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	6819      	ldr	r1, [r3, #0]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	461a      	mov	r2, r3
 8007016:	f7ff faf4 	bl	8006602 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	695a      	ldr	r2, [r3, #20]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	08db      	lsrs	r3, r3, #3
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	fa02 f303 	lsl.w	r3, r2, r3
 8007030:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b04      	cmp	r3, #4
 800703a:	d00a      	beq.n	8007052 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	6919      	ldr	r1, [r3, #16]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800704c:	f7ff fa32 	bl	80064b4 <LL_ADC_SetOffset>
 8007050:	e179      	b.n	8007346 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2100      	movs	r1, #0
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff fa4f 	bl	80064fc <LL_ADC_GetOffsetChannel>
 800705e:	4603      	mov	r3, r0
 8007060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10a      	bne.n	800707e <HAL_ADC_ConfigChannel+0x14e>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2100      	movs	r1, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff fa44 	bl	80064fc <LL_ADC_GetOffsetChannel>
 8007074:	4603      	mov	r3, r0
 8007076:	0e9b      	lsrs	r3, r3, #26
 8007078:	f003 021f 	and.w	r2, r3, #31
 800707c:	e01e      	b.n	80070bc <HAL_ADC_ConfigChannel+0x18c>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2100      	movs	r1, #0
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff fa39 	bl	80064fc <LL_ADC_GetOffsetChannel>
 800708a:	4603      	mov	r3, r0
 800708c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007090:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007094:	fa93 f3a3 	rbit	r3, r3
 8007098:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800709c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80070a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80070a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80070ac:	2320      	movs	r3, #32
 80070ae:	e004      	b.n	80070ba <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80070b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80070b4:	fab3 f383 	clz	r3, r3
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d105      	bne.n	80070d4 <HAL_ADC_ConfigChannel+0x1a4>
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	0e9b      	lsrs	r3, r3, #26
 80070ce:	f003 031f 	and.w	r3, r3, #31
 80070d2:	e018      	b.n	8007106 <HAL_ADC_ConfigChannel+0x1d6>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070e0:	fa93 f3a3 	rbit	r3, r3
 80070e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80070e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80070ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80070f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80070f8:	2320      	movs	r3, #32
 80070fa:	e004      	b.n	8007106 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80070fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007100:	fab3 f383 	clz	r3, r3
 8007104:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007106:	429a      	cmp	r2, r3
 8007108:	d106      	bne.n	8007118 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2200      	movs	r2, #0
 8007110:	2100      	movs	r1, #0
 8007112:	4618      	mov	r0, r3
 8007114:	f7ff fa08 	bl	8006528 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2101      	movs	r1, #1
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff f9ec 	bl	80064fc <LL_ADC_GetOffsetChannel>
 8007124:	4603      	mov	r3, r0
 8007126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10a      	bne.n	8007144 <HAL_ADC_ConfigChannel+0x214>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2101      	movs	r1, #1
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff f9e1 	bl	80064fc <LL_ADC_GetOffsetChannel>
 800713a:	4603      	mov	r3, r0
 800713c:	0e9b      	lsrs	r3, r3, #26
 800713e:	f003 021f 	and.w	r2, r3, #31
 8007142:	e01e      	b.n	8007182 <HAL_ADC_ConfigChannel+0x252>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2101      	movs	r1, #1
 800714a:	4618      	mov	r0, r3
 800714c:	f7ff f9d6 	bl	80064fc <LL_ADC_GetOffsetChannel>
 8007150:	4603      	mov	r3, r0
 8007152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800715a:	fa93 f3a3 	rbit	r3, r3
 800715e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8007162:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800716a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8007172:	2320      	movs	r3, #32
 8007174:	e004      	b.n	8007180 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8007176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800717a:	fab3 f383 	clz	r3, r3
 800717e:	b2db      	uxtb	r3, r3
 8007180:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800718a:	2b00      	cmp	r3, #0
 800718c:	d105      	bne.n	800719a <HAL_ADC_ConfigChannel+0x26a>
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	0e9b      	lsrs	r3, r3, #26
 8007194:	f003 031f 	and.w	r3, r3, #31
 8007198:	e018      	b.n	80071cc <HAL_ADC_ConfigChannel+0x29c>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80071a6:	fa93 f3a3 	rbit	r3, r3
 80071aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80071ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80071b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80071be:	2320      	movs	r3, #32
 80071c0:	e004      	b.n	80071cc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80071c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071c6:	fab3 f383 	clz	r3, r3
 80071ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d106      	bne.n	80071de <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2200      	movs	r2, #0
 80071d6:	2101      	movs	r1, #1
 80071d8:	4618      	mov	r0, r3
 80071da:	f7ff f9a5 	bl	8006528 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2102      	movs	r1, #2
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7ff f989 	bl	80064fc <LL_ADC_GetOffsetChannel>
 80071ea:	4603      	mov	r3, r0
 80071ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <HAL_ADC_ConfigChannel+0x2da>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2102      	movs	r1, #2
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7ff f97e 	bl	80064fc <LL_ADC_GetOffsetChannel>
 8007200:	4603      	mov	r3, r0
 8007202:	0e9b      	lsrs	r3, r3, #26
 8007204:	f003 021f 	and.w	r2, r3, #31
 8007208:	e01e      	b.n	8007248 <HAL_ADC_ConfigChannel+0x318>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2102      	movs	r1, #2
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff f973 	bl	80064fc <LL_ADC_GetOffsetChannel>
 8007216:	4603      	mov	r3, r0
 8007218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800721c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007220:	fa93 f3a3 	rbit	r3, r3
 8007224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8007228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800722c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8007230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8007238:	2320      	movs	r3, #32
 800723a:	e004      	b.n	8007246 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800723c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007240:	fab3 f383 	clz	r3, r3
 8007244:	b2db      	uxtb	r3, r3
 8007246:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007250:	2b00      	cmp	r3, #0
 8007252:	d105      	bne.n	8007260 <HAL_ADC_ConfigChannel+0x330>
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	0e9b      	lsrs	r3, r3, #26
 800725a:	f003 031f 	and.w	r3, r3, #31
 800725e:	e014      	b.n	800728a <HAL_ADC_ConfigChannel+0x35a>
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007266:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007268:	fa93 f3a3 	rbit	r3, r3
 800726c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800726e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007270:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8007274:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800727c:	2320      	movs	r3, #32
 800727e:	e004      	b.n	800728a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8007280:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007284:	fab3 f383 	clz	r3, r3
 8007288:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800728a:	429a      	cmp	r2, r3
 800728c:	d106      	bne.n	800729c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2200      	movs	r2, #0
 8007294:	2102      	movs	r1, #2
 8007296:	4618      	mov	r0, r3
 8007298:	f7ff f946 	bl	8006528 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2103      	movs	r1, #3
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff f92a 	bl	80064fc <LL_ADC_GetOffsetChannel>
 80072a8:	4603      	mov	r3, r0
 80072aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10a      	bne.n	80072c8 <HAL_ADC_ConfigChannel+0x398>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2103      	movs	r1, #3
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff f91f 	bl	80064fc <LL_ADC_GetOffsetChannel>
 80072be:	4603      	mov	r3, r0
 80072c0:	0e9b      	lsrs	r3, r3, #26
 80072c2:	f003 021f 	and.w	r2, r3, #31
 80072c6:	e017      	b.n	80072f8 <HAL_ADC_ConfigChannel+0x3c8>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2103      	movs	r1, #3
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7ff f914 	bl	80064fc <LL_ADC_GetOffsetChannel>
 80072d4:	4603      	mov	r3, r0
 80072d6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072da:	fa93 f3a3 	rbit	r3, r3
 80072de:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80072e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80072e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d101      	bne.n	80072ee <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80072ea:	2320      	movs	r3, #32
 80072ec:	e003      	b.n	80072f6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80072ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072f0:	fab3 f383 	clz	r3, r3
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007300:	2b00      	cmp	r3, #0
 8007302:	d105      	bne.n	8007310 <HAL_ADC_ConfigChannel+0x3e0>
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	0e9b      	lsrs	r3, r3, #26
 800730a:	f003 031f 	and.w	r3, r3, #31
 800730e:	e011      	b.n	8007334 <HAL_ADC_ConfigChannel+0x404>
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007318:	fa93 f3a3 	rbit	r3, r3
 800731c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800731e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007320:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8007322:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007324:	2b00      	cmp	r3, #0
 8007326:	d101      	bne.n	800732c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8007328:	2320      	movs	r3, #32
 800732a:	e003      	b.n	8007334 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800732c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800732e:	fab3 f383 	clz	r3, r3
 8007332:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007334:	429a      	cmp	r2, r3
 8007336:	d106      	bne.n	8007346 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2200      	movs	r2, #0
 800733e:	2103      	movs	r1, #3
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff f8f1 	bl	8006528 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff fa0a 	bl	8006764 <LL_ADC_IsEnabled>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	f040 8140 	bne.w	80075d8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6818      	ldr	r0, [r3, #0]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	6819      	ldr	r1, [r3, #0]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	461a      	mov	r2, r3
 8007366:	f7ff f977 	bl	8006658 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	4a8f      	ldr	r2, [pc, #572]	; (80075ac <HAL_ADC_ConfigChannel+0x67c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	f040 8131 	bne.w	80075d8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10b      	bne.n	800739e <HAL_ADC_ConfigChannel+0x46e>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	0e9b      	lsrs	r3, r3, #26
 800738c:	3301      	adds	r3, #1
 800738e:	f003 031f 	and.w	r3, r3, #31
 8007392:	2b09      	cmp	r3, #9
 8007394:	bf94      	ite	ls
 8007396:	2301      	movls	r3, #1
 8007398:	2300      	movhi	r3, #0
 800739a:	b2db      	uxtb	r3, r3
 800739c:	e019      	b.n	80073d2 <HAL_ADC_ConfigChannel+0x4a2>
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073a6:	fa93 f3a3 	rbit	r3, r3
 80073aa:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80073ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80073b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80073b6:	2320      	movs	r3, #32
 80073b8:	e003      	b.n	80073c2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80073ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073bc:	fab3 f383 	clz	r3, r3
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	3301      	adds	r3, #1
 80073c4:	f003 031f 	and.w	r3, r3, #31
 80073c8:	2b09      	cmp	r3, #9
 80073ca:	bf94      	ite	ls
 80073cc:	2301      	movls	r3, #1
 80073ce:	2300      	movhi	r3, #0
 80073d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d079      	beq.n	80074ca <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d107      	bne.n	80073f2 <HAL_ADC_ConfigChannel+0x4c2>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	0e9b      	lsrs	r3, r3, #26
 80073e8:	3301      	adds	r3, #1
 80073ea:	069b      	lsls	r3, r3, #26
 80073ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80073f0:	e015      	b.n	800741e <HAL_ADC_ConfigChannel+0x4ee>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fa:	fa93 f3a3 	rbit	r3, r3
 80073fe:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8007400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007402:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8007404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800740a:	2320      	movs	r3, #32
 800740c:	e003      	b.n	8007416 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800740e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007410:	fab3 f383 	clz	r3, r3
 8007414:	b2db      	uxtb	r3, r3
 8007416:	3301      	adds	r3, #1
 8007418:	069b      	lsls	r3, r3, #26
 800741a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007426:	2b00      	cmp	r3, #0
 8007428:	d109      	bne.n	800743e <HAL_ADC_ConfigChannel+0x50e>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	0e9b      	lsrs	r3, r3, #26
 8007430:	3301      	adds	r3, #1
 8007432:	f003 031f 	and.w	r3, r3, #31
 8007436:	2101      	movs	r1, #1
 8007438:	fa01 f303 	lsl.w	r3, r1, r3
 800743c:	e017      	b.n	800746e <HAL_ADC_ConfigChannel+0x53e>
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007446:	fa93 f3a3 	rbit	r3, r3
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800744c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800744e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8007450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8007456:	2320      	movs	r3, #32
 8007458:	e003      	b.n	8007462 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800745a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800745c:	fab3 f383 	clz	r3, r3
 8007460:	b2db      	uxtb	r3, r3
 8007462:	3301      	adds	r3, #1
 8007464:	f003 031f 	and.w	r3, r3, #31
 8007468:	2101      	movs	r1, #1
 800746a:	fa01 f303 	lsl.w	r3, r1, r3
 800746e:	ea42 0103 	orr.w	r1, r2, r3
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10a      	bne.n	8007494 <HAL_ADC_ConfigChannel+0x564>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	0e9b      	lsrs	r3, r3, #26
 8007484:	3301      	adds	r3, #1
 8007486:	f003 021f 	and.w	r2, r3, #31
 800748a:	4613      	mov	r3, r2
 800748c:	005b      	lsls	r3, r3, #1
 800748e:	4413      	add	r3, r2
 8007490:	051b      	lsls	r3, r3, #20
 8007492:	e018      	b.n	80074c6 <HAL_ADC_ConfigChannel+0x596>
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800749a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749c:	fa93 f3a3 	rbit	r3, r3
 80074a0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80074a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80074ac:	2320      	movs	r3, #32
 80074ae:	e003      	b.n	80074b8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80074b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b2:	fab3 f383 	clz	r3, r3
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	3301      	adds	r3, #1
 80074ba:	f003 021f 	and.w	r2, r3, #31
 80074be:	4613      	mov	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	4413      	add	r3, r2
 80074c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074c6:	430b      	orrs	r3, r1
 80074c8:	e081      	b.n	80075ce <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d107      	bne.n	80074e6 <HAL_ADC_ConfigChannel+0x5b6>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	0e9b      	lsrs	r3, r3, #26
 80074dc:	3301      	adds	r3, #1
 80074de:	069b      	lsls	r3, r3, #26
 80074e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80074e4:	e015      	b.n	8007512 <HAL_ADC_ConfigChannel+0x5e2>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	fa93 f3a3 	rbit	r3, r3
 80074f2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80074f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80074fe:	2320      	movs	r3, #32
 8007500:	e003      	b.n	800750a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	fab3 f383 	clz	r3, r3
 8007508:	b2db      	uxtb	r3, r3
 800750a:	3301      	adds	r3, #1
 800750c:	069b      	lsls	r3, r3, #26
 800750e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800751a:	2b00      	cmp	r3, #0
 800751c:	d109      	bne.n	8007532 <HAL_ADC_ConfigChannel+0x602>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	0e9b      	lsrs	r3, r3, #26
 8007524:	3301      	adds	r3, #1
 8007526:	f003 031f 	and.w	r3, r3, #31
 800752a:	2101      	movs	r1, #1
 800752c:	fa01 f303 	lsl.w	r3, r1, r3
 8007530:	e017      	b.n	8007562 <HAL_ADC_ConfigChannel+0x632>
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	fa93 f3a3 	rbit	r3, r3
 800753e:	61bb      	str	r3, [r7, #24]
  return result;
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800754a:	2320      	movs	r3, #32
 800754c:	e003      	b.n	8007556 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	fab3 f383 	clz	r3, r3
 8007554:	b2db      	uxtb	r3, r3
 8007556:	3301      	adds	r3, #1
 8007558:	f003 031f 	and.w	r3, r3, #31
 800755c:	2101      	movs	r1, #1
 800755e:	fa01 f303 	lsl.w	r3, r1, r3
 8007562:	ea42 0103 	orr.w	r1, r2, r3
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10d      	bne.n	800758e <HAL_ADC_ConfigChannel+0x65e>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	0e9b      	lsrs	r3, r3, #26
 8007578:	3301      	adds	r3, #1
 800757a:	f003 021f 	and.w	r2, r3, #31
 800757e:	4613      	mov	r3, r2
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	4413      	add	r3, r2
 8007584:	3b1e      	subs	r3, #30
 8007586:	051b      	lsls	r3, r3, #20
 8007588:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800758c:	e01e      	b.n	80075cc <HAL_ADC_ConfigChannel+0x69c>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	fa93 f3a3 	rbit	r3, r3
 800759a:	60fb      	str	r3, [r7, #12]
  return result;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d104      	bne.n	80075b0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80075a6:	2320      	movs	r3, #32
 80075a8:	e006      	b.n	80075b8 <HAL_ADC_ConfigChannel+0x688>
 80075aa:	bf00      	nop
 80075ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	fab3 f383 	clz	r3, r3
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	3301      	adds	r3, #1
 80075ba:	f003 021f 	and.w	r2, r3, #31
 80075be:	4613      	mov	r3, r2
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	4413      	add	r3, r2
 80075c4:	3b1e      	subs	r3, #30
 80075c6:	051b      	lsls	r3, r3, #20
 80075c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075d2:	4619      	mov	r1, r3
 80075d4:	f7ff f815 	bl	8006602 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	4b3d      	ldr	r3, [pc, #244]	; (80076d4 <HAL_ADC_ConfigChannel+0x7a4>)
 80075de:	4013      	ands	r3, r2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d06c      	beq.n	80076be <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80075e4:	483c      	ldr	r0, [pc, #240]	; (80076d8 <HAL_ADC_ConfigChannel+0x7a8>)
 80075e6:	f7fe ff57 	bl	8006498 <LL_ADC_GetCommonPathInternalCh>
 80075ea:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a3a      	ldr	r2, [pc, #232]	; (80076dc <HAL_ADC_ConfigChannel+0x7ac>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d127      	bne.n	8007648 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80075f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80075fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d121      	bne.n	8007648 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a35      	ldr	r2, [pc, #212]	; (80076e0 <HAL_ADC_ConfigChannel+0x7b0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d157      	bne.n	80076be <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800760e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007612:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007616:	4619      	mov	r1, r3
 8007618:	482f      	ldr	r0, [pc, #188]	; (80076d8 <HAL_ADC_ConfigChannel+0x7a8>)
 800761a:	f7fe ff2a 	bl	8006472 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800761e:	4b31      	ldr	r3, [pc, #196]	; (80076e4 <HAL_ADC_ConfigChannel+0x7b4>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	099b      	lsrs	r3, r3, #6
 8007624:	4a30      	ldr	r2, [pc, #192]	; (80076e8 <HAL_ADC_ConfigChannel+0x7b8>)
 8007626:	fba2 2303 	umull	r2, r3, r2, r3
 800762a:	099b      	lsrs	r3, r3, #6
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	4613      	mov	r3, r2
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	4413      	add	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007638:	e002      	b.n	8007640 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	3b01      	subs	r3, #1
 800763e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f9      	bne.n	800763a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007646:	e03a      	b.n	80076be <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a27      	ldr	r2, [pc, #156]	; (80076ec <HAL_ADC_ConfigChannel+0x7bc>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d113      	bne.n	800767a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007652:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10d      	bne.n	800767a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a1f      	ldr	r2, [pc, #124]	; (80076e0 <HAL_ADC_ConfigChannel+0x7b0>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d12a      	bne.n	80076be <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800766c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007670:	4619      	mov	r1, r3
 8007672:	4819      	ldr	r0, [pc, #100]	; (80076d8 <HAL_ADC_ConfigChannel+0x7a8>)
 8007674:	f7fe fefd 	bl	8006472 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007678:	e021      	b.n	80076be <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a1c      	ldr	r2, [pc, #112]	; (80076f0 <HAL_ADC_ConfigChannel+0x7c0>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d11c      	bne.n	80076be <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007684:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d116      	bne.n	80076be <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a12      	ldr	r2, [pc, #72]	; (80076e0 <HAL_ADC_ConfigChannel+0x7b0>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d111      	bne.n	80076be <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800769a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800769e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076a2:	4619      	mov	r1, r3
 80076a4:	480c      	ldr	r0, [pc, #48]	; (80076d8 <HAL_ADC_ConfigChannel+0x7a8>)
 80076a6:	f7fe fee4 	bl	8006472 <LL_ADC_SetCommonPathInternalCh>
 80076aa:	e008      	b.n	80076be <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b0:	f043 0220 	orr.w	r2, r3, #32
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80076c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	37d8      	adds	r7, #216	; 0xd8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	80080000 	.word	0x80080000
 80076d8:	50040300 	.word	0x50040300
 80076dc:	c7520000 	.word	0xc7520000
 80076e0:	50040000 	.word	0x50040000
 80076e4:	20000024 	.word	0x20000024
 80076e8:	053e2d63 	.word	0x053e2d63
 80076ec:	cb840000 	.word	0xcb840000
 80076f0:	80000001 	.word	0x80000001

080076f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80076fc:	2300      	movs	r3, #0
 80076fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff f82d 	bl	8006764 <LL_ADC_IsEnabled>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d169      	bne.n	80077e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689a      	ldr	r2, [r3, #8]
 8007716:	4b36      	ldr	r3, [pc, #216]	; (80077f0 <ADC_Enable+0xfc>)
 8007718:	4013      	ands	r3, r2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00d      	beq.n	800773a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007722:	f043 0210 	orr.w	r2, r3, #16
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800772e:	f043 0201 	orr.w	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e055      	b.n	80077e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe fffc 	bl	800673c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007744:	482b      	ldr	r0, [pc, #172]	; (80077f4 <ADC_Enable+0x100>)
 8007746:	f7fe fea7 	bl	8006498 <LL_ADC_GetCommonPathInternalCh>
 800774a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800774c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007750:	2b00      	cmp	r3, #0
 8007752:	d013      	beq.n	800777c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007754:	4b28      	ldr	r3, [pc, #160]	; (80077f8 <ADC_Enable+0x104>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	099b      	lsrs	r3, r3, #6
 800775a:	4a28      	ldr	r2, [pc, #160]	; (80077fc <ADC_Enable+0x108>)
 800775c:	fba2 2303 	umull	r2, r3, r2, r3
 8007760:	099b      	lsrs	r3, r3, #6
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	4613      	mov	r3, r2
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800776e:	e002      	b.n	8007776 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	3b01      	subs	r3, #1
 8007774:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f9      	bne.n	8007770 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800777c:	f7fe fe36 	bl	80063ec <HAL_GetTick>
 8007780:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007782:	e028      	b.n	80077d6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4618      	mov	r0, r3
 800778a:	f7fe ffeb 	bl	8006764 <LL_ADC_IsEnabled>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d104      	bne.n	800779e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4618      	mov	r0, r3
 800779a:	f7fe ffcf 	bl	800673c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800779e:	f7fe fe25 	bl	80063ec <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d914      	bls.n	80077d6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d00d      	beq.n	80077d6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077be:	f043 0210 	orr.w	r2, r3, #16
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ca:	f043 0201 	orr.w	r2, r3, #1
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e007      	b.n	80077e6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d1cf      	bne.n	8007784 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	8000003f 	.word	0x8000003f
 80077f4:	50040300 	.word	0x50040300
 80077f8:	20000024 	.word	0x20000024
 80077fc:	053e2d63 	.word	0x053e2d63

08007800 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007812:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007816:	2b00      	cmp	r3, #0
 8007818:	d14b      	bne.n	80078b2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0308 	and.w	r3, r3, #8
 8007830:	2b00      	cmp	r3, #0
 8007832:	d021      	beq.n	8007878 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4618      	mov	r0, r3
 800783a:	f7fe fe90 	bl	800655e <LL_ADC_REG_IsTriggerSourceSWStart>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d032      	beq.n	80078aa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d12b      	bne.n	80078aa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007856:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007862:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d11f      	bne.n	80078aa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786e:	f043 0201 	orr.w	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	655a      	str	r2, [r3, #84]	; 0x54
 8007876:	e018      	b.n	80078aa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d111      	bne.n	80078aa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d105      	bne.n	80078aa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a2:	f043 0201 	orr.w	r2, r3, #1
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f7f9 fc9c 	bl	80011e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80078b0:	e00e      	b.n	80078d0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b6:	f003 0310 	and.w	r3, r3, #16
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f7ff fb2c 	bl	8006f1c <HAL_ADC_ErrorCallback>
}
 80078c4:	e004      	b.n	80078d0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	4798      	blx	r3
}
 80078d0:	bf00      	nop
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7ff fb04 	bl	8006ef4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80078ec:	bf00      	nop
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007900:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007906:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007912:	f043 0204 	orr.w	r2, r3, #4
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f7ff fafe 	bl	8006f1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007920:	bf00      	nop
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f003 0307 	and.w	r3, r3, #7
 800799a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800799c:	4b0c      	ldr	r3, [pc, #48]	; (80079d0 <__NVIC_SetPriorityGrouping+0x44>)
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80079a8:	4013      	ands	r3, r2
 80079aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80079b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80079b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079be:	4a04      	ldr	r2, [pc, #16]	; (80079d0 <__NVIC_SetPriorityGrouping+0x44>)
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	60d3      	str	r3, [r2, #12]
}
 80079c4:	bf00      	nop
 80079c6:	3714      	adds	r7, #20
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	e000ed00 	.word	0xe000ed00

080079d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80079d4:	b480      	push	{r7}
 80079d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079d8:	4b04      	ldr	r3, [pc, #16]	; (80079ec <__NVIC_GetPriorityGrouping+0x18>)
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	0a1b      	lsrs	r3, r3, #8
 80079de:	f003 0307 	and.w	r3, r3, #7
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr
 80079ec:	e000ed00 	.word	0xe000ed00

080079f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	db0b      	blt.n	8007a1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a02:	79fb      	ldrb	r3, [r7, #7]
 8007a04:	f003 021f 	and.w	r2, r3, #31
 8007a08:	4907      	ldr	r1, [pc, #28]	; (8007a28 <__NVIC_EnableIRQ+0x38>)
 8007a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a0e:	095b      	lsrs	r3, r3, #5
 8007a10:	2001      	movs	r0, #1
 8007a12:	fa00 f202 	lsl.w	r2, r0, r2
 8007a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007a1a:	bf00      	nop
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	e000e100 	.word	0xe000e100

08007a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	6039      	str	r1, [r7, #0]
 8007a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	db0a      	blt.n	8007a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	490c      	ldr	r1, [pc, #48]	; (8007a78 <__NVIC_SetPriority+0x4c>)
 8007a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a4a:	0112      	lsls	r2, r2, #4
 8007a4c:	b2d2      	uxtb	r2, r2
 8007a4e:	440b      	add	r3, r1
 8007a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a54:	e00a      	b.n	8007a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	4908      	ldr	r1, [pc, #32]	; (8007a7c <__NVIC_SetPriority+0x50>)
 8007a5c:	79fb      	ldrb	r3, [r7, #7]
 8007a5e:	f003 030f 	and.w	r3, r3, #15
 8007a62:	3b04      	subs	r3, #4
 8007a64:	0112      	lsls	r2, r2, #4
 8007a66:	b2d2      	uxtb	r2, r2
 8007a68:	440b      	add	r3, r1
 8007a6a:	761a      	strb	r2, [r3, #24]
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	e000e100 	.word	0xe000e100
 8007a7c:	e000ed00 	.word	0xe000ed00

08007a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b089      	sub	sp, #36	; 0x24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f003 0307 	and.w	r3, r3, #7
 8007a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	f1c3 0307 	rsb	r3, r3, #7
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	bf28      	it	cs
 8007a9e:	2304      	movcs	r3, #4
 8007aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	2b06      	cmp	r3, #6
 8007aa8:	d902      	bls.n	8007ab0 <NVIC_EncodePriority+0x30>
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	3b03      	subs	r3, #3
 8007aae:	e000      	b.n	8007ab2 <NVIC_EncodePriority+0x32>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	fa02 f303 	lsl.w	r3, r2, r3
 8007abe:	43da      	mvns	r2, r3
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	401a      	ands	r2, r3
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad2:	43d9      	mvns	r1, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ad8:	4313      	orrs	r3, r2
         );
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3724      	adds	r7, #36	; 0x24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
	...

08007ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007af8:	d301      	bcc.n	8007afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007afa:	2301      	movs	r3, #1
 8007afc:	e00f      	b.n	8007b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007afe:	4a0a      	ldr	r2, [pc, #40]	; (8007b28 <SysTick_Config+0x40>)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007b06:	210f      	movs	r1, #15
 8007b08:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0c:	f7ff ff8e 	bl	8007a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b10:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <SysTick_Config+0x40>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b16:	4b04      	ldr	r3, [pc, #16]	; (8007b28 <SysTick_Config+0x40>)
 8007b18:	2207      	movs	r2, #7
 8007b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	e000e010 	.word	0xe000e010

08007b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7ff ff29 	bl	800798c <__NVIC_SetPriorityGrouping>
}
 8007b3a:	bf00      	nop
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b086      	sub	sp, #24
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	4603      	mov	r3, r0
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	607a      	str	r2, [r7, #4]
 8007b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007b50:	2300      	movs	r3, #0
 8007b52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007b54:	f7ff ff3e 	bl	80079d4 <__NVIC_GetPriorityGrouping>
 8007b58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	68b9      	ldr	r1, [r7, #8]
 8007b5e:	6978      	ldr	r0, [r7, #20]
 8007b60:	f7ff ff8e 	bl	8007a80 <NVIC_EncodePriority>
 8007b64:	4602      	mov	r2, r0
 8007b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b6a:	4611      	mov	r1, r2
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7ff ff5d 	bl	8007a2c <__NVIC_SetPriority>
}
 8007b72:	bf00      	nop
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b082      	sub	sp, #8
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	4603      	mov	r3, r0
 8007b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff ff31 	bl	80079f0 <__NVIC_EnableIRQ>
}
 8007b8e:	bf00      	nop
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b082      	sub	sp, #8
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff ffa2 	bl	8007ae8 <SysTick_Config>
 8007ba4:	4603      	mov	r3, r0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e098      	b.n	8007cf4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	4b4d      	ldr	r3, [pc, #308]	; (8007d00 <HAL_DMA_Init+0x150>)
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d80f      	bhi.n	8007bee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	4b4b      	ldr	r3, [pc, #300]	; (8007d04 <HAL_DMA_Init+0x154>)
 8007bd6:	4413      	add	r3, r2
 8007bd8:	4a4b      	ldr	r2, [pc, #300]	; (8007d08 <HAL_DMA_Init+0x158>)
 8007bda:	fba2 2303 	umull	r2, r3, r2, r3
 8007bde:	091b      	lsrs	r3, r3, #4
 8007be0:	009a      	lsls	r2, r3, #2
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a48      	ldr	r2, [pc, #288]	; (8007d0c <HAL_DMA_Init+0x15c>)
 8007bea:	641a      	str	r2, [r3, #64]	; 0x40
 8007bec:	e00e      	b.n	8007c0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	4b46      	ldr	r3, [pc, #280]	; (8007d10 <HAL_DMA_Init+0x160>)
 8007bf6:	4413      	add	r3, r2
 8007bf8:	4a43      	ldr	r2, [pc, #268]	; (8007d08 <HAL_DMA_Init+0x158>)
 8007bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfe:	091b      	lsrs	r3, r3, #4
 8007c00:	009a      	lsls	r2, r3, #2
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a42      	ldr	r2, [pc, #264]	; (8007d14 <HAL_DMA_Init+0x164>)
 8007c0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c66:	d039      	beq.n	8007cdc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6c:	4a27      	ldr	r2, [pc, #156]	; (8007d0c <HAL_DMA_Init+0x15c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d11a      	bne.n	8007ca8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007c72:	4b29      	ldr	r3, [pc, #164]	; (8007d18 <HAL_DMA_Init+0x168>)
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7a:	f003 031c 	and.w	r3, r3, #28
 8007c7e:	210f      	movs	r1, #15
 8007c80:	fa01 f303 	lsl.w	r3, r1, r3
 8007c84:	43db      	mvns	r3, r3
 8007c86:	4924      	ldr	r1, [pc, #144]	; (8007d18 <HAL_DMA_Init+0x168>)
 8007c88:	4013      	ands	r3, r2
 8007c8a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007c8c:	4b22      	ldr	r3, [pc, #136]	; (8007d18 <HAL_DMA_Init+0x168>)
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6859      	ldr	r1, [r3, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c98:	f003 031c 	and.w	r3, r3, #28
 8007c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca0:	491d      	ldr	r1, [pc, #116]	; (8007d18 <HAL_DMA_Init+0x168>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	600b      	str	r3, [r1, #0]
 8007ca6:	e019      	b.n	8007cdc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007ca8:	4b1c      	ldr	r3, [pc, #112]	; (8007d1c <HAL_DMA_Init+0x16c>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb0:	f003 031c 	and.w	r3, r3, #28
 8007cb4:	210f      	movs	r1, #15
 8007cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007cba:	43db      	mvns	r3, r3
 8007cbc:	4917      	ldr	r1, [pc, #92]	; (8007d1c <HAL_DMA_Init+0x16c>)
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007cc2:	4b16      	ldr	r3, [pc, #88]	; (8007d1c <HAL_DMA_Init+0x16c>)
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6859      	ldr	r1, [r3, #4]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cce:	f003 031c 	and.w	r3, r3, #28
 8007cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd6:	4911      	ldr	r1, [pc, #68]	; (8007d1c <HAL_DMA_Init+0x16c>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	40020407 	.word	0x40020407
 8007d04:	bffdfff8 	.word	0xbffdfff8
 8007d08:	cccccccd 	.word	0xcccccccd
 8007d0c:	40020000 	.word	0x40020000
 8007d10:	bffdfbf8 	.word	0xbffdfbf8
 8007d14:	40020400 	.word	0x40020400
 8007d18:	400200a8 	.word	0x400200a8
 8007d1c:	400204a8 	.word	0x400204a8

08007d20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_DMA_Start_IT+0x20>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e04b      	b.n	8007dd8 <HAL_DMA_Start_IT+0xb8>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d13a      	bne.n	8007dca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2202      	movs	r2, #2
 8007d58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 0201 	bic.w	r2, r2, #1
 8007d70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	68b9      	ldr	r1, [r7, #8]
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f000 f96b 	bl	8008054 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d008      	beq.n	8007d98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f042 020e 	orr.w	r2, r2, #14
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	e00f      	b.n	8007db8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 0204 	bic.w	r2, r2, #4
 8007da6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f042 020a 	orr.w	r2, r2, #10
 8007db6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f042 0201 	orr.w	r2, r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	e005      	b.n	8007dd6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d008      	beq.n	8007e0a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2204      	movs	r2, #4
 8007dfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e022      	b.n	8007e50 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f022 020e 	bic.w	r2, r2, #14
 8007e18:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 0201 	bic.w	r2, r2, #1
 8007e28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2e:	f003 021c 	and.w	r2, r3, #28
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	2101      	movs	r1, #1
 8007e38:	fa01 f202 	lsl.w	r2, r1, r2
 8007e3c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d005      	beq.n	8007e80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2204      	movs	r2, #4
 8007e78:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	73fb      	strb	r3, [r7, #15]
 8007e7e:	e029      	b.n	8007ed4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 020e 	bic.w	r2, r2, #14
 8007e8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 0201 	bic.w	r2, r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ea4:	f003 021c 	and.w	r2, r3, #28
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eac:	2101      	movs	r1, #1
 8007eae:	fa01 f202 	lsl.w	r2, r1, r2
 8007eb2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d003      	beq.n	8007ed4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	4798      	blx	r3
    }
  }
  return status;
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efa:	f003 031c 	and.w	r3, r3, #28
 8007efe:	2204      	movs	r2, #4
 8007f00:	409a      	lsls	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4013      	ands	r3, r2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d026      	beq.n	8007f58 <HAL_DMA_IRQHandler+0x7a>
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d021      	beq.n	8007f58 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 0320 	and.w	r3, r3, #32
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d107      	bne.n	8007f32 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 0204 	bic.w	r2, r2, #4
 8007f30:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f36:	f003 021c 	and.w	r2, r3, #28
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3e:	2104      	movs	r1, #4
 8007f40:	fa01 f202 	lsl.w	r2, r1, r2
 8007f44:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d071      	beq.n	8008032 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007f56:	e06c      	b.n	8008032 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5c:	f003 031c 	and.w	r3, r3, #28
 8007f60:	2202      	movs	r2, #2
 8007f62:	409a      	lsls	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4013      	ands	r3, r2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d02e      	beq.n	8007fca <HAL_DMA_IRQHandler+0xec>
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f003 0302 	and.w	r3, r3, #2
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d029      	beq.n	8007fca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0320 	and.w	r3, r3, #32
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10b      	bne.n	8007f9c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 020a 	bic.w	r2, r2, #10
 8007f92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa0:	f003 021c 	and.w	r2, r3, #28
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa8:	2102      	movs	r1, #2
 8007faa:	fa01 f202 	lsl.w	r2, r1, r2
 8007fae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d038      	beq.n	8008032 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007fc8:	e033      	b.n	8008032 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fce:	f003 031c 	and.w	r3, r3, #28
 8007fd2:	2208      	movs	r2, #8
 8007fd4:	409a      	lsls	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d02a      	beq.n	8008034 <HAL_DMA_IRQHandler+0x156>
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f003 0308 	and.w	r3, r3, #8
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d025      	beq.n	8008034 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 020e 	bic.w	r2, r2, #14
 8007ff6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffc:	f003 021c 	and.w	r2, r3, #28
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008004:	2101      	movs	r1, #1
 8008006:	fa01 f202 	lsl.w	r2, r1, r2
 800800a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008032:	bf00      	nop
 8008034:	bf00      	nop
}
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8008048:	4618      	mov	r0, r3
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008066:	f003 021c 	and.w	r2, r3, #28
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	2101      	movs	r1, #1
 8008070:	fa01 f202 	lsl.w	r2, r1, r2
 8008074:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	2b10      	cmp	r3, #16
 8008084:	d108      	bne.n	8008098 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008096:	e007      	b.n	80080a8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	60da      	str	r2, [r3, #12]
}
 80080a8:	bf00      	nop
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80080be:	2300      	movs	r3, #0
 80080c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080c2:	e148      	b.n	8008356 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	2101      	movs	r1, #1
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	fa01 f303 	lsl.w	r3, r1, r3
 80080d0:	4013      	ands	r3, r2
 80080d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 813a 	beq.w	8008350 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f003 0303 	and.w	r3, r3, #3
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d005      	beq.n	80080f4 <HAL_GPIO_Init+0x40>
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f003 0303 	and.w	r3, r3, #3
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d130      	bne.n	8008156 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	005b      	lsls	r3, r3, #1
 80080fe:	2203      	movs	r2, #3
 8008100:	fa02 f303 	lsl.w	r3, r2, r3
 8008104:	43db      	mvns	r3, r3
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	4013      	ands	r3, r2
 800810a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	fa02 f303 	lsl.w	r3, r2, r3
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	4313      	orrs	r3, r2
 800811c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800812a:	2201      	movs	r2, #1
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	fa02 f303 	lsl.w	r3, r2, r3
 8008132:	43db      	mvns	r3, r3
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	4013      	ands	r3, r2
 8008138:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	091b      	lsrs	r3, r3, #4
 8008140:	f003 0201 	and.w	r2, r3, #1
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	4313      	orrs	r3, r2
 800814e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	2b03      	cmp	r3, #3
 8008160:	d017      	beq.n	8008192 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	005b      	lsls	r3, r3, #1
 800816c:	2203      	movs	r2, #3
 800816e:	fa02 f303 	lsl.w	r3, r2, r3
 8008172:	43db      	mvns	r3, r3
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	4013      	ands	r3, r2
 8008178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	005b      	lsls	r3, r3, #1
 8008182:	fa02 f303 	lsl.w	r3, r2, r3
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	4313      	orrs	r3, r2
 800818a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	2b02      	cmp	r3, #2
 800819c:	d123      	bne.n	80081e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	08da      	lsrs	r2, r3, #3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	3208      	adds	r2, #8
 80081a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f003 0307 	and.w	r3, r3, #7
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	220f      	movs	r2, #15
 80081b6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ba:	43db      	mvns	r3, r3
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4013      	ands	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	691a      	ldr	r2, [r3, #16]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	f003 0307 	and.w	r3, r3, #7
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	fa02 f303 	lsl.w	r3, r2, r3
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	08da      	lsrs	r2, r3, #3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3208      	adds	r2, #8
 80081e0:	6939      	ldr	r1, [r7, #16]
 80081e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	005b      	lsls	r3, r3, #1
 80081f0:	2203      	movs	r2, #3
 80081f2:	fa02 f303 	lsl.w	r3, r2, r3
 80081f6:	43db      	mvns	r3, r3
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	4013      	ands	r3, r2
 80081fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f003 0203 	and.w	r2, r3, #3
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	fa02 f303 	lsl.w	r3, r2, r3
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	693a      	ldr	r2, [r7, #16]
 8008218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008222:	2b00      	cmp	r3, #0
 8008224:	f000 8094 	beq.w	8008350 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008228:	4b52      	ldr	r3, [pc, #328]	; (8008374 <HAL_GPIO_Init+0x2c0>)
 800822a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800822c:	4a51      	ldr	r2, [pc, #324]	; (8008374 <HAL_GPIO_Init+0x2c0>)
 800822e:	f043 0301 	orr.w	r3, r3, #1
 8008232:	6613      	str	r3, [r2, #96]	; 0x60
 8008234:	4b4f      	ldr	r3, [pc, #316]	; (8008374 <HAL_GPIO_Init+0x2c0>)
 8008236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	60bb      	str	r3, [r7, #8]
 800823e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008240:	4a4d      	ldr	r2, [pc, #308]	; (8008378 <HAL_GPIO_Init+0x2c4>)
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	089b      	lsrs	r3, r3, #2
 8008246:	3302      	adds	r3, #2
 8008248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800824c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f003 0303 	and.w	r3, r3, #3
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	220f      	movs	r2, #15
 8008258:	fa02 f303 	lsl.w	r3, r2, r3
 800825c:	43db      	mvns	r3, r3
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	4013      	ands	r3, r2
 8008262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800826a:	d00d      	beq.n	8008288 <HAL_GPIO_Init+0x1d4>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a43      	ldr	r2, [pc, #268]	; (800837c <HAL_GPIO_Init+0x2c8>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d007      	beq.n	8008284 <HAL_GPIO_Init+0x1d0>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a42      	ldr	r2, [pc, #264]	; (8008380 <HAL_GPIO_Init+0x2cc>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d101      	bne.n	8008280 <HAL_GPIO_Init+0x1cc>
 800827c:	2302      	movs	r3, #2
 800827e:	e004      	b.n	800828a <HAL_GPIO_Init+0x1d6>
 8008280:	2307      	movs	r3, #7
 8008282:	e002      	b.n	800828a <HAL_GPIO_Init+0x1d6>
 8008284:	2301      	movs	r3, #1
 8008286:	e000      	b.n	800828a <HAL_GPIO_Init+0x1d6>
 8008288:	2300      	movs	r3, #0
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	f002 0203 	and.w	r2, r2, #3
 8008290:	0092      	lsls	r2, r2, #2
 8008292:	4093      	lsls	r3, r2
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4313      	orrs	r3, r2
 8008298:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800829a:	4937      	ldr	r1, [pc, #220]	; (8008378 <HAL_GPIO_Init+0x2c4>)
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	089b      	lsrs	r3, r3, #2
 80082a0:	3302      	adds	r3, #2
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80082a8:	4b36      	ldr	r3, [pc, #216]	; (8008384 <HAL_GPIO_Init+0x2d0>)
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	43db      	mvns	r3, r3
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	4013      	ands	r3, r2
 80082b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d003      	beq.n	80082cc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80082cc:	4a2d      	ldr	r2, [pc, #180]	; (8008384 <HAL_GPIO_Init+0x2d0>)
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80082d2:	4b2c      	ldr	r3, [pc, #176]	; (8008384 <HAL_GPIO_Init+0x2d0>)
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	43db      	mvns	r3, r3
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	4013      	ands	r3, r2
 80082e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80082f6:	4a23      	ldr	r2, [pc, #140]	; (8008384 <HAL_GPIO_Init+0x2d0>)
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80082fc:	4b21      	ldr	r3, [pc, #132]	; (8008384 <HAL_GPIO_Init+0x2d0>)
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	43db      	mvns	r3, r3
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	4013      	ands	r3, r2
 800830a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	4313      	orrs	r3, r2
 800831e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008320:	4a18      	ldr	r2, [pc, #96]	; (8008384 <HAL_GPIO_Init+0x2d0>)
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008326:	4b17      	ldr	r3, [pc, #92]	; (8008384 <HAL_GPIO_Init+0x2d0>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	43db      	mvns	r3, r3
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	4013      	ands	r3, r2
 8008334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4313      	orrs	r3, r2
 8008348:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800834a:	4a0e      	ldr	r2, [pc, #56]	; (8008384 <HAL_GPIO_Init+0x2d0>)
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	3301      	adds	r3, #1
 8008354:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	fa22 f303 	lsr.w	r3, r2, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	f47f aeaf 	bne.w	80080c4 <HAL_GPIO_Init+0x10>
  }
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	371c      	adds	r7, #28
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	40021000 	.word	0x40021000
 8008378:	40010000 	.word	0x40010000
 800837c:	48000400 	.word	0x48000400
 8008380:	48000800 	.word	0x48000800
 8008384:	40010400 	.word	0x40010400

08008388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	460b      	mov	r3, r1
 8008392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	691a      	ldr	r2, [r3, #16]
 8008398:	887b      	ldrh	r3, [r7, #2]
 800839a:	4013      	ands	r3, r2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80083a0:	2301      	movs	r3, #1
 80083a2:	73fb      	strb	r3, [r7, #15]
 80083a4:	e001      	b.n	80083aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80083a6:	2300      	movs	r3, #0
 80083a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	807b      	strh	r3, [r7, #2]
 80083c4:	4613      	mov	r3, r2
 80083c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80083c8:	787b      	ldrb	r3, [r7, #1]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80083ce:	887a      	ldrh	r2, [r7, #2]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80083d4:	e002      	b.n	80083dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80083d6:	887a      	ldrh	r2, [r7, #2]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	4603      	mov	r3, r0
 80083f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80083f2:	4b08      	ldr	r3, [pc, #32]	; (8008414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083f4:	695a      	ldr	r2, [r3, #20]
 80083f6:	88fb      	ldrh	r3, [r7, #6]
 80083f8:	4013      	ands	r3, r2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d006      	beq.n	800840c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80083fe:	4a05      	ldr	r2, [pc, #20]	; (8008414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008400:	88fb      	ldrh	r3, [r7, #6]
 8008402:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008404:	88fb      	ldrh	r3, [r7, #6]
 8008406:	4618      	mov	r0, r3
 8008408:	f7f9 f9b6 	bl	8001778 <HAL_GPIO_EXTI_Callback>
  }
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	40010400 	.word	0x40010400

08008418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e08d      	b.n	8008546 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d106      	bne.n	8008444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7f9 f8dc 	bl	80015fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2224      	movs	r2, #36	; 0x24
 8008448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f022 0201 	bic.w	r2, r2, #1
 800845a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008468:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	689a      	ldr	r2, [r3, #8]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008478:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d107      	bne.n	8008492 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	689a      	ldr	r2, [r3, #8]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800848e:	609a      	str	r2, [r3, #8]
 8008490:	e006      	b.n	80084a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800849e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d108      	bne.n	80084ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685a      	ldr	r2, [r3, #4]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084b6:	605a      	str	r2, [r3, #4]
 80084b8:	e007      	b.n	80084ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	6812      	ldr	r2, [r2, #0]
 80084d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80084d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68da      	ldr	r2, [r3, #12]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	691a      	ldr	r2, [r3, #16]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	69d9      	ldr	r1, [r3, #28]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a1a      	ldr	r2, [r3, #32]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	430a      	orrs	r2, r1
 8008516:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f042 0201 	orr.w	r2, r2, #1
 8008526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2220      	movs	r2, #32
 8008532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
	...

08008550 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af02      	add	r7, sp, #8
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	4608      	mov	r0, r1
 800855a:	4611      	mov	r1, r2
 800855c:	461a      	mov	r2, r3
 800855e:	4603      	mov	r3, r0
 8008560:	817b      	strh	r3, [r7, #10]
 8008562:	460b      	mov	r3, r1
 8008564:	813b      	strh	r3, [r7, #8]
 8008566:	4613      	mov	r3, r2
 8008568:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b20      	cmp	r3, #32
 8008574:	f040 80f9 	bne.w	800876a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008578:	6a3b      	ldr	r3, [r7, #32]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <HAL_I2C_Mem_Write+0x34>
 800857e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008580:	2b00      	cmp	r3, #0
 8008582:	d105      	bne.n	8008590 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800858a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e0ed      	b.n	800876c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008596:	2b01      	cmp	r3, #1
 8008598:	d101      	bne.n	800859e <HAL_I2C_Mem_Write+0x4e>
 800859a:	2302      	movs	r3, #2
 800859c:	e0e6      	b.n	800876c <HAL_I2C_Mem_Write+0x21c>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80085a6:	f7fd ff21 	bl	80063ec <HAL_GetTick>
 80085aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	2319      	movs	r3, #25
 80085b2:	2201      	movs	r2, #1
 80085b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 f955 	bl	8008868 <I2C_WaitOnFlagUntilTimeout>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e0d1      	b.n	800876c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2221      	movs	r2, #33	; 0x21
 80085cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2240      	movs	r2, #64	; 0x40
 80085d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6a3a      	ldr	r2, [r7, #32]
 80085e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80085e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085f0:	88f8      	ldrh	r0, [r7, #6]
 80085f2:	893a      	ldrh	r2, [r7, #8]
 80085f4:	8979      	ldrh	r1, [r7, #10]
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	9301      	str	r3, [sp, #4]
 80085fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	4603      	mov	r3, r0
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 f8b9 	bl	8008778 <I2C_RequestMemoryWrite>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e0a9      	b.n	800876c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800861c:	b29b      	uxth	r3, r3
 800861e:	2bff      	cmp	r3, #255	; 0xff
 8008620:	d90e      	bls.n	8008640 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	22ff      	movs	r2, #255	; 0xff
 8008626:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800862c:	b2da      	uxtb	r2, r3
 800862e:	8979      	ldrh	r1, [r7, #10]
 8008630:	2300      	movs	r3, #0
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 facf 	bl	8008bdc <I2C_TransferConfig>
 800863e:	e00f      	b.n	8008660 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008644:	b29a      	uxth	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800864e:	b2da      	uxtb	r2, r3
 8008650:	8979      	ldrh	r1, [r7, #10]
 8008652:	2300      	movs	r3, #0
 8008654:	9300      	str	r3, [sp, #0]
 8008656:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f000 fabe 	bl	8008bdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 f94e 	bl	8008906 <I2C_WaitOnTXISFlagUntilTimeout>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e07b      	b.n	800876c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	781a      	ldrb	r2, [r3, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	1c5a      	adds	r2, r3, #1
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800868e:	b29b      	uxth	r3, r3
 8008690:	3b01      	subs	r3, #1
 8008692:	b29a      	uxth	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800869c:	3b01      	subs	r3, #1
 800869e:	b29a      	uxth	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d034      	beq.n	8008718 <HAL_I2C_Mem_Write+0x1c8>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d130      	bne.n	8008718 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086bc:	2200      	movs	r2, #0
 80086be:	2180      	movs	r1, #128	; 0x80
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 f8d1 	bl	8008868 <I2C_WaitOnFlagUntilTimeout>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e04d      	b.n	800876c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	2bff      	cmp	r3, #255	; 0xff
 80086d8:	d90e      	bls.n	80086f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	22ff      	movs	r2, #255	; 0xff
 80086de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	8979      	ldrh	r1, [r7, #10]
 80086e8:	2300      	movs	r3, #0
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 fa73 	bl	8008bdc <I2C_TransferConfig>
 80086f6:	e00f      	b.n	8008718 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086fc:	b29a      	uxth	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008706:	b2da      	uxtb	r2, r3
 8008708:	8979      	ldrh	r1, [r7, #10]
 800870a:	2300      	movs	r3, #0
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f000 fa62 	bl	8008bdc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800871c:	b29b      	uxth	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d19e      	bne.n	8008660 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 f934 	bl	8008994 <I2C_WaitOnSTOPFlagUntilTimeout>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e01a      	b.n	800876c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2220      	movs	r2, #32
 800873c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6859      	ldr	r1, [r3, #4]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <HAL_I2C_Mem_Write+0x224>)
 800874a:	400b      	ands	r3, r1
 800874c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2220      	movs	r2, #32
 8008752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008766:	2300      	movs	r3, #0
 8008768:	e000      	b.n	800876c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800876a:	2302      	movs	r3, #2
  }
}
 800876c:	4618      	mov	r0, r3
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	fe00e800 	.word	0xfe00e800

08008778 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af02      	add	r7, sp, #8
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	4608      	mov	r0, r1
 8008782:	4611      	mov	r1, r2
 8008784:	461a      	mov	r2, r3
 8008786:	4603      	mov	r3, r0
 8008788:	817b      	strh	r3, [r7, #10]
 800878a:	460b      	mov	r3, r1
 800878c:	813b      	strh	r3, [r7, #8]
 800878e:	4613      	mov	r3, r2
 8008790:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008792:	88fb      	ldrh	r3, [r7, #6]
 8008794:	b2da      	uxtb	r2, r3
 8008796:	8979      	ldrh	r1, [r7, #10]
 8008798:	4b20      	ldr	r3, [pc, #128]	; (800881c <I2C_RequestMemoryWrite+0xa4>)
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 fa1b 	bl	8008bdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	69b9      	ldr	r1, [r7, #24]
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f000 f8ab 	bl	8008906 <I2C_WaitOnTXISFlagUntilTimeout>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e02c      	b.n	8008814 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80087ba:	88fb      	ldrh	r3, [r7, #6]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d105      	bne.n	80087cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80087c0:	893b      	ldrh	r3, [r7, #8]
 80087c2:	b2da      	uxtb	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	629a      	str	r2, [r3, #40]	; 0x28
 80087ca:	e015      	b.n	80087f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80087cc:	893b      	ldrh	r3, [r7, #8]
 80087ce:	0a1b      	lsrs	r3, r3, #8
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	69b9      	ldr	r1, [r7, #24]
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f000 f891 	bl	8008906 <I2C_WaitOnTXISFlagUntilTimeout>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e012      	b.n	8008814 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80087ee:	893b      	ldrh	r3, [r7, #8]
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	2200      	movs	r2, #0
 8008800:	2180      	movs	r1, #128	; 0x80
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f000 f830 	bl	8008868 <I2C_WaitOnFlagUntilTimeout>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e000      	b.n	8008814 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	80002000 	.word	0x80002000

08008820 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b02      	cmp	r3, #2
 8008834:	d103      	bne.n	800883e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2200      	movs	r2, #0
 800883c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	f003 0301 	and.w	r3, r3, #1
 8008848:	2b01      	cmp	r3, #1
 800884a:	d007      	beq.n	800885c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	699a      	ldr	r2, [r3, #24]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f042 0201 	orr.w	r2, r2, #1
 800885a:	619a      	str	r2, [r3, #24]
  }
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	603b      	str	r3, [r7, #0]
 8008874:	4613      	mov	r3, r2
 8008876:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008878:	e031      	b.n	80088de <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008880:	d02d      	beq.n	80088de <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008882:	f7fd fdb3 	bl	80063ec <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	429a      	cmp	r2, r3
 8008890:	d302      	bcc.n	8008898 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d122      	bne.n	80088de <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	699a      	ldr	r2, [r3, #24]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	4013      	ands	r3, r2
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	bf0c      	ite	eq
 80088a8:	2301      	moveq	r3, #1
 80088aa:	2300      	movne	r3, #0
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	461a      	mov	r2, r3
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d113      	bne.n	80088de <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ba:	f043 0220 	orr.w	r2, r3, #32
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e00f      	b.n	80088fe <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	699a      	ldr	r2, [r3, #24]
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4013      	ands	r3, r2
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	bf0c      	ite	eq
 80088ee:	2301      	moveq	r3, #1
 80088f0:	2300      	movne	r3, #0
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	461a      	mov	r2, r3
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d0be      	beq.n	800887a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	60f8      	str	r0, [r7, #12]
 800890e:	60b9      	str	r1, [r7, #8]
 8008910:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008912:	e033      	b.n	800897c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	68b9      	ldr	r1, [r7, #8]
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 f87f 	bl	8008a1c <I2C_IsErrorOccurred>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d001      	beq.n	8008928 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e031      	b.n	800898c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892e:	d025      	beq.n	800897c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008930:	f7fd fd5c 	bl	80063ec <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	429a      	cmp	r2, r3
 800893e:	d302      	bcc.n	8008946 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d11a      	bne.n	800897c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	f003 0302 	and.w	r3, r3, #2
 8008950:	2b02      	cmp	r3, #2
 8008952:	d013      	beq.n	800897c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008958:	f043 0220 	orr.w	r2, r3, #32
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2220      	movs	r2, #32
 8008964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e007      	b.n	800898c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	f003 0302 	and.w	r3, r3, #2
 8008986:	2b02      	cmp	r3, #2
 8008988:	d1c4      	bne.n	8008914 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80089a0:	e02f      	b.n	8008a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	68b9      	ldr	r1, [r7, #8]
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f000 f838 	bl	8008a1c <I2C_IsErrorOccurred>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e02d      	b.n	8008a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089b6:	f7fd fd19 	bl	80063ec <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d302      	bcc.n	80089cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d11a      	bne.n	8008a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	f003 0320 	and.w	r3, r3, #32
 80089d6:	2b20      	cmp	r3, #32
 80089d8:	d013      	beq.n	8008a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089de:	f043 0220 	orr.w	r2, r3, #32
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2220      	movs	r2, #32
 80089ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e007      	b.n	8008a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	f003 0320 	and.w	r3, r3, #32
 8008a0c:	2b20      	cmp	r3, #32
 8008a0e:	d1c8      	bne.n	80089a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
	...

08008a1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08a      	sub	sp, #40	; 0x28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008a36:	2300      	movs	r3, #0
 8008a38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	f003 0310 	and.w	r3, r3, #16
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d068      	beq.n	8008b1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2210      	movs	r2, #16
 8008a4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008a50:	e049      	b.n	8008ae6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a58:	d045      	beq.n	8008ae6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008a5a:	f7fd fcc7 	bl	80063ec <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d302      	bcc.n	8008a70 <I2C_IsErrorOccurred+0x54>
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d13a      	bne.n	8008ae6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a92:	d121      	bne.n	8008ad8 <I2C_IsErrorOccurred+0xbc>
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a9a:	d01d      	beq.n	8008ad8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008a9c:	7cfb      	ldrb	r3, [r7, #19]
 8008a9e:	2b20      	cmp	r3, #32
 8008aa0:	d01a      	beq.n	8008ad8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ab0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008ab2:	f7fd fc9b 	bl	80063ec <HAL_GetTick>
 8008ab6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ab8:	e00e      	b.n	8008ad8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008aba:	f7fd fc97 	bl	80063ec <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	2b19      	cmp	r3, #25
 8008ac6:	d907      	bls.n	8008ad8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	f043 0320 	orr.w	r3, r3, #32
 8008ace:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008ad6:	e006      	b.n	8008ae6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	f003 0320 	and.w	r3, r3, #32
 8008ae2:	2b20      	cmp	r3, #32
 8008ae4:	d1e9      	bne.n	8008aba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	f003 0320 	and.w	r3, r3, #32
 8008af0:	2b20      	cmp	r3, #32
 8008af2:	d003      	beq.n	8008afc <I2C_IsErrorOccurred+0xe0>
 8008af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d0aa      	beq.n	8008a52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d103      	bne.n	8008b0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	f043 0304 	orr.w	r3, r3, #4
 8008b12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	f043 0301 	orr.w	r3, r3, #1
 8008b32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00b      	beq.n	8008b66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	f043 0308 	orr.w	r3, r3, #8
 8008b54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00b      	beq.n	8008b88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008b70:	6a3b      	ldr	r3, [r7, #32]
 8008b72:	f043 0302 	orr.w	r3, r3, #2
 8008b76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d01c      	beq.n	8008bca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f7ff fe45 	bl	8008820 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6859      	ldr	r1, [r3, #4]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	4b0d      	ldr	r3, [pc, #52]	; (8008bd8 <I2C_IsErrorOccurred+0x1bc>)
 8008ba2:	400b      	ands	r3, r1
 8008ba4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	431a      	orrs	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008bca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3728      	adds	r7, #40	; 0x28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	fe00e800 	.word	0xfe00e800

08008bdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	607b      	str	r3, [r7, #4]
 8008be6:	460b      	mov	r3, r1
 8008be8:	817b      	strh	r3, [r7, #10]
 8008bea:	4613      	mov	r3, r2
 8008bec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008bee:	897b      	ldrh	r3, [r7, #10]
 8008bf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008bf4:	7a7b      	ldrb	r3, [r7, #9]
 8008bf6:	041b      	lsls	r3, r3, #16
 8008bf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008bfc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	685a      	ldr	r2, [r3, #4]
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	0d5b      	lsrs	r3, r3, #21
 8008c16:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008c1a:	4b08      	ldr	r3, [pc, #32]	; (8008c3c <I2C_TransferConfig+0x60>)
 8008c1c:	430b      	orrs	r3, r1
 8008c1e:	43db      	mvns	r3, r3
 8008c20:	ea02 0103 	and.w	r1, r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008c2e:	bf00      	nop
 8008c30:	371c      	adds	r7, #28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	03ff63ff 	.word	0x03ff63ff

08008c40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b20      	cmp	r3, #32
 8008c54:	d138      	bne.n	8008cc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d101      	bne.n	8008c64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008c60:	2302      	movs	r3, #2
 8008c62:	e032      	b.n	8008cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2224      	movs	r2, #36	; 0x24
 8008c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f022 0201 	bic.w	r2, r2, #1
 8008c82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6819      	ldr	r1, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f042 0201 	orr.w	r2, r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	e000      	b.n	8008cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008cc8:	2302      	movs	r3, #2
  }
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b085      	sub	sp, #20
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b20      	cmp	r3, #32
 8008cea:	d139      	bne.n	8008d60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d101      	bne.n	8008cfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	e033      	b.n	8008d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2224      	movs	r2, #36	; 0x24
 8008d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f022 0201 	bic.w	r2, r2, #1
 8008d18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008d28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	021b      	lsls	r3, r3, #8
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f042 0201 	orr.w	r2, r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2220      	movs	r2, #32
 8008d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	e000      	b.n	8008d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008d60:	2302      	movs	r3, #2
  }
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
	...

08008d70 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d78:	4b0b      	ldr	r3, [pc, #44]	; (8008da8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d7c:	4a0a      	ldr	r2, [pc, #40]	; (8008da8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008d7e:	f043 0301 	orr.w	r3, r3, #1
 8008d82:	6613      	str	r3, [r2, #96]	; 0x60
 8008d84:	4b08      	ldr	r3, [pc, #32]	; (8008da8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8008d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	60fb      	str	r3, [r7, #12]
 8008d8e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8008d90:	4b06      	ldr	r3, [pc, #24]	; (8008dac <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008d92:	685a      	ldr	r2, [r3, #4]
 8008d94:	4905      	ldr	r1, [pc, #20]	; (8008dac <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	604b      	str	r3, [r1, #4]
}
 8008d9c:	bf00      	nop
 8008d9e:	3714      	adds	r7, #20
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr
 8008da8:	40021000 	.word	0x40021000
 8008dac:	40010000 	.word	0x40010000

08008db0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008db2:	b08b      	sub	sp, #44	; 0x2c
 8008db4:	af06      	add	r7, sp, #24
 8008db6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e0f8      	b.n	8008fb4 <HAL_PCD_Init+0x204>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d106      	bne.n	8008ddc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f00b f9f2 	bl	80141c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2203      	movs	r2, #3
 8008de0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f005 ff7b 	bl	800ece4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	603b      	str	r3, [r7, #0]
 8008df4:	687e      	ldr	r6, [r7, #4]
 8008df6:	466d      	mov	r5, sp
 8008df8:	f106 0410 	add.w	r4, r6, #16
 8008dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008dfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	602b      	str	r3, [r5, #0]
 8008e04:	1d33      	adds	r3, r6, #4
 8008e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e08:	6838      	ldr	r0, [r7, #0]
 8008e0a:	f005 ff43 	bl	800ec94 <USB_CoreInit>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d005      	beq.n	8008e20 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e0c9      	b.n	8008fb4 <HAL_PCD_Init+0x204>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2100      	movs	r1, #0
 8008e26:	4618      	mov	r0, r3
 8008e28:	f005 ff77 	bl	800ed1a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73fb      	strb	r3, [r7, #15]
 8008e30:	e040      	b.n	8008eb4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
 8008e34:	6879      	ldr	r1, [r7, #4]
 8008e36:	1c5a      	adds	r2, r3, #1
 8008e38:	4613      	mov	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	00db      	lsls	r3, r3, #3
 8008e40:	440b      	add	r3, r1
 8008e42:	3301      	adds	r3, #1
 8008e44:	2201      	movs	r2, #1
 8008e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	00db      	lsls	r3, r3, #3
 8008e56:	440b      	add	r3, r1
 8008e58:	7bfa      	ldrb	r2, [r7, #15]
 8008e5a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	6879      	ldr	r1, [r7, #4]
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	4613      	mov	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	00db      	lsls	r3, r3, #3
 8008e6a:	440b      	add	r3, r1
 8008e6c:	3303      	adds	r3, #3
 8008e6e:	2200      	movs	r2, #0
 8008e70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008e72:	7bfa      	ldrb	r2, [r7, #15]
 8008e74:	6879      	ldr	r1, [r7, #4]
 8008e76:	4613      	mov	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	00db      	lsls	r3, r3, #3
 8008e7e:	440b      	add	r3, r1
 8008e80:	3338      	adds	r3, #56	; 0x38
 8008e82:	2200      	movs	r2, #0
 8008e84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008e86:	7bfa      	ldrb	r2, [r7, #15]
 8008e88:	6879      	ldr	r1, [r7, #4]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	440b      	add	r3, r1
 8008e94:	333c      	adds	r3, #60	; 0x3c
 8008e96:	2200      	movs	r2, #0
 8008e98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008e9a:	7bfa      	ldrb	r2, [r7, #15]
 8008e9c:	6879      	ldr	r1, [r7, #4]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	00db      	lsls	r3, r3, #3
 8008ea6:	440b      	add	r3, r1
 8008ea8:	3340      	adds	r3, #64	; 0x40
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	73fb      	strb	r3, [r7, #15]
 8008eb4:	7bfa      	ldrb	r2, [r7, #15]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d3b9      	bcc.n	8008e32 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]
 8008ec2:	e044      	b.n	8008f4e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008ec4:	7bfa      	ldrb	r2, [r7, #15]
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	00db      	lsls	r3, r3, #3
 8008ed0:	440b      	add	r3, r1
 8008ed2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008eda:	7bfa      	ldrb	r2, [r7, #15]
 8008edc:	6879      	ldr	r1, [r7, #4]
 8008ede:	4613      	mov	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4413      	add	r3, r2
 8008ee4:	00db      	lsls	r3, r3, #3
 8008ee6:	440b      	add	r3, r1
 8008ee8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008eec:	7bfa      	ldrb	r2, [r7, #15]
 8008eee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008ef0:	7bfa      	ldrb	r2, [r7, #15]
 8008ef2:	6879      	ldr	r1, [r7, #4]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	440b      	add	r3, r1
 8008efe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8008f02:	2200      	movs	r2, #0
 8008f04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008f06:	7bfa      	ldrb	r2, [r7, #15]
 8008f08:	6879      	ldr	r1, [r7, #4]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4413      	add	r3, r2
 8008f10:	00db      	lsls	r3, r3, #3
 8008f12:	440b      	add	r3, r1
 8008f14:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008f1c:	7bfa      	ldrb	r2, [r7, #15]
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	4613      	mov	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	00db      	lsls	r3, r3, #3
 8008f28:	440b      	add	r3, r1
 8008f2a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008f32:	7bfa      	ldrb	r2, [r7, #15]
 8008f34:	6879      	ldr	r1, [r7, #4]
 8008f36:	4613      	mov	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	00db      	lsls	r3, r3, #3
 8008f3e:	440b      	add	r3, r1
 8008f40:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	73fb      	strb	r3, [r7, #15]
 8008f4e:	7bfa      	ldrb	r2, [r7, #15]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d3b5      	bcc.n	8008ec4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	603b      	str	r3, [r7, #0]
 8008f5e:	687e      	ldr	r6, [r7, #4]
 8008f60:	466d      	mov	r5, sp
 8008f62:	f106 0410 	add.w	r4, r6, #16
 8008f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	602b      	str	r3, [r5, #0]
 8008f6e:	1d33      	adds	r3, r6, #4
 8008f70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f72:	6838      	ldr	r0, [r7, #0]
 8008f74:	f005 fede 	bl	800ed34 <USB_DevInit>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d005      	beq.n	8008f8a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2202      	movs	r2, #2
 8008f82:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e014      	b.n	8008fb4 <HAL_PCD_Init+0x204>
  }

  hpcd->USB_Address = 0U;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d102      	bne.n	8008fa8 <HAL_PCD_Init+0x1f8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f001 fc58 	bl	800a858 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f008 f96f 	bl	8011290 <USB_DevDisconnect>

  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fbc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d101      	bne.n	8008fd2 <HAL_PCD_Start+0x16>
 8008fce:	2302      	movs	r3, #2
 8008fd0:	e012      	b.n	8008ff8 <HAL_PCD_Start+0x3c>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f005 fe69 	bl	800ecb6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f008 f93a 	bl	8011262 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4618      	mov	r0, r3
 800900e:	f008 f954 	bl	80112ba <USB_ReadInterrupts>
 8009012:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fb13 	bl	800964a <PCD_EP_ISR_Handler>

    return;
 8009024:	e110      	b.n	8009248 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800902c:	2b00      	cmp	r3, #0
 800902e:	d013      	beq.n	8009058 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009038:	b29a      	uxth	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009042:	b292      	uxth	r2, r2
 8009044:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f00b f934 	bl	80142b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800904e:	2100      	movs	r1, #0
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f8fc 	bl	800924e <HAL_PCD_SetAddress>

    return;
 8009056:	e0f7      	b.n	8009248 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00c      	beq.n	800907c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800906a:	b29a      	uxth	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009074:	b292      	uxth	r2, r2
 8009076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800907a:	e0e5      	b.n	8009248 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00c      	beq.n	80090a0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800908e:	b29a      	uxth	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009098:	b292      	uxth	r2, r2
 800909a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800909e:	e0d3      	b.n	8009248 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d034      	beq.n	8009114 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80090b2:	b29a      	uxth	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0204 	bic.w	r2, r2, #4
 80090bc:	b292      	uxth	r2, r2
 80090be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80090ca:	b29a      	uxth	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0208 	bic.w	r2, r2, #8
 80090d4:	b292      	uxth	r2, r2
 80090d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d107      	bne.n	80090f4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80090ec:	2100      	movs	r1, #0
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f00b fb92 	bl	8014818 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f00b f917 	bl	8014328 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009102:	b29a      	uxth	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800910c:	b292      	uxth	r2, r2
 800910e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009112:	e099      	b.n	8009248 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800911a:	2b00      	cmp	r3, #0
 800911c:	d027      	beq.n	800916e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009126:	b29a      	uxth	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f042 0208 	orr.w	r2, r2, #8
 8009130:	b292      	uxth	r2, r2
 8009132:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800913e:	b29a      	uxth	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009148:	b292      	uxth	r2, r2
 800914a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009156:	b29a      	uxth	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f042 0204 	orr.w	r2, r2, #4
 8009160:	b292      	uxth	r2, r2
 8009162:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f00b f8c4 	bl	80142f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800916c:	e06c      	b.n	8009248 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009174:	2b00      	cmp	r3, #0
 8009176:	d040      	beq.n	80091fa <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009180:	b29a      	uxth	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800918a:	b292      	uxth	r2, r2
 800918c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d12b      	bne.n	80091f2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f042 0204 	orr.w	r2, r2, #4
 80091ac:	b292      	uxth	r2, r2
 80091ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f042 0208 	orr.w	r2, r2, #8
 80091c4:	b292      	uxth	r2, r2
 80091c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80091da:	b29b      	uxth	r3, r3
 80091dc:	089b      	lsrs	r3, r3, #2
 80091de:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80091e8:	2101      	movs	r1, #1
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f00b fb14 	bl	8014818 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80091f0:	e02a      	b.n	8009248 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f00b f87e 	bl	80142f4 <HAL_PCD_SuspendCallback>
    return;
 80091f8:	e026      	b.n	8009248 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00f      	beq.n	8009224 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800920c:	b29a      	uxth	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009216:	b292      	uxth	r2, r2
 8009218:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f00b f83c 	bl	801429a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009222:	e011      	b.n	8009248 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00c      	beq.n	8009248 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009236:	b29a      	uxth	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009240:	b292      	uxth	r2, r2
 8009242:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009246:	bf00      	nop
  }
}
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009260:	2b01      	cmp	r3, #1
 8009262:	d101      	bne.n	8009268 <HAL_PCD_SetAddress+0x1a>
 8009264:	2302      	movs	r3, #2
 8009266:	e013      	b.n	8009290 <HAL_PCD_SetAddress+0x42>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	78fa      	ldrb	r2, [r7, #3]
 8009274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	78fa      	ldrb	r2, [r7, #3]
 800927e:	4611      	mov	r1, r2
 8009280:	4618      	mov	r0, r3
 8009282:	f007 ffda 	bl	801123a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
 80092a0:	4608      	mov	r0, r1
 80092a2:	4611      	mov	r1, r2
 80092a4:	461a      	mov	r2, r3
 80092a6:	4603      	mov	r3, r0
 80092a8:	70fb      	strb	r3, [r7, #3]
 80092aa:	460b      	mov	r3, r1
 80092ac:	803b      	strh	r3, [r7, #0]
 80092ae:	4613      	mov	r3, r2
 80092b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80092b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	da0e      	bge.n	80092dc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092be:	78fb      	ldrb	r3, [r7, #3]
 80092c0:	f003 0307 	and.w	r3, r3, #7
 80092c4:	1c5a      	adds	r2, r3, #1
 80092c6:	4613      	mov	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4413      	add	r3, r2
 80092cc:	00db      	lsls	r3, r3, #3
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	4413      	add	r3, r2
 80092d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2201      	movs	r2, #1
 80092d8:	705a      	strb	r2, [r3, #1]
 80092da:	e00e      	b.n	80092fa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	f003 0207 	and.w	r2, r3, #7
 80092e2:	4613      	mov	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	00db      	lsls	r3, r3, #3
 80092ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	4413      	add	r3, r2
 80092f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	f003 0307 	and.w	r3, r3, #7
 8009300:	b2da      	uxtb	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009306:	883a      	ldrh	r2, [r7, #0]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	78ba      	ldrb	r2, [r7, #2]
 8009310:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009312:	78bb      	ldrb	r3, [r7, #2]
 8009314:	2b02      	cmp	r3, #2
 8009316:	d102      	bne.n	800931e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009324:	2b01      	cmp	r3, #1
 8009326:	d101      	bne.n	800932c <HAL_PCD_EP_Open+0x94>
 8009328:	2302      	movs	r3, #2
 800932a:	e00e      	b.n	800934a <HAL_PCD_EP_Open+0xb2>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68f9      	ldr	r1, [r7, #12]
 800933a:	4618      	mov	r0, r3
 800933c:	f005 fd1c 	bl	800ed78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8009348:	7afb      	ldrb	r3, [r7, #11]
}
 800934a:	4618      	mov	r0, r3
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b084      	sub	sp, #16
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	460b      	mov	r3, r1
 800935c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800935e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009362:	2b00      	cmp	r3, #0
 8009364:	da0e      	bge.n	8009384 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009366:	78fb      	ldrb	r3, [r7, #3]
 8009368:	f003 0307 	and.w	r3, r3, #7
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	00db      	lsls	r3, r3, #3
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	4413      	add	r3, r2
 800937a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2201      	movs	r2, #1
 8009380:	705a      	strb	r2, [r3, #1]
 8009382:	e00e      	b.n	80093a2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	f003 0207 	and.w	r2, r3, #7
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	4413      	add	r3, r2
 800939a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	f003 0307 	and.w	r3, r3, #7
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d101      	bne.n	80093bc <HAL_PCD_EP_Close+0x6a>
 80093b8:	2302      	movs	r3, #2
 80093ba:	e00e      	b.n	80093da <HAL_PCD_EP_Close+0x88>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68f9      	ldr	r1, [r7, #12]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f006 f898 	bl	800f500 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b086      	sub	sp, #24
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
 80093ee:	460b      	mov	r3, r1
 80093f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093f2:	7afb      	ldrb	r3, [r7, #11]
 80093f4:	f003 0207 	and.w	r2, r3, #7
 80093f8:	4613      	mov	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4413      	add	r3, r2
 80093fe:	00db      	lsls	r3, r3, #3
 8009400:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	4413      	add	r3, r2
 8009408:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2200      	movs	r2, #0
 800941a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	2200      	movs	r2, #0
 8009420:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009422:	7afb      	ldrb	r3, [r7, #11]
 8009424:	f003 0307 	and.w	r3, r3, #7
 8009428:	b2da      	uxtb	r2, r3
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6979      	ldr	r1, [r7, #20]
 8009434:	4618      	mov	r0, r3
 8009436:	f006 fa50 	bl	800f8da <USB_EPStartXfer>

  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3718      	adds	r7, #24
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	460b      	mov	r3, r1
 800944e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	f003 0207 	and.w	r2, r3, #7
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	4613      	mov	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	00db      	lsls	r3, r3, #3
 8009460:	440b      	add	r3, r1
 8009462:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8009466:	681b      	ldr	r3, [r3, #0]
}
 8009468:	4618      	mov	r0, r3
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	607a      	str	r2, [r7, #4]
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	460b      	mov	r3, r1
 8009482:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009484:	7afb      	ldrb	r3, [r7, #11]
 8009486:	f003 0307 	and.w	r3, r3, #7
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	4613      	mov	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	4413      	add	r3, r2
 8009492:	00db      	lsls	r3, r3, #3
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	4413      	add	r3, r2
 8009498:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	2200      	movs	r2, #0
 80094b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	2201      	movs	r2, #1
 80094be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094c0:	7afb      	ldrb	r3, [r7, #11]
 80094c2:	f003 0307 	and.w	r3, r3, #7
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	6979      	ldr	r1, [r7, #20]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f006 fa01 	bl	800f8da <USB_EPStartXfer>

  return HAL_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b084      	sub	sp, #16
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	460b      	mov	r3, r1
 80094ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80094ee:	78fb      	ldrb	r3, [r7, #3]
 80094f0:	f003 0207 	and.w	r2, r3, #7
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d901      	bls.n	8009500 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e04c      	b.n	800959a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009504:	2b00      	cmp	r3, #0
 8009506:	da0e      	bge.n	8009526 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	f003 0307 	and.w	r3, r3, #7
 800950e:	1c5a      	adds	r2, r3, #1
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	00db      	lsls	r3, r3, #3
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	4413      	add	r3, r2
 800951c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2201      	movs	r2, #1
 8009522:	705a      	strb	r2, [r3, #1]
 8009524:	e00c      	b.n	8009540 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009526:	78fa      	ldrb	r2, [r7, #3]
 8009528:	4613      	mov	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	00db      	lsls	r3, r3, #3
 8009530:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	4413      	add	r3, r2
 8009538:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2201      	movs	r2, #1
 8009544:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009546:	78fb      	ldrb	r3, [r7, #3]
 8009548:	f003 0307 	and.w	r3, r3, #7
 800954c:	b2da      	uxtb	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009558:	2b01      	cmp	r3, #1
 800955a:	d101      	bne.n	8009560 <HAL_PCD_EP_SetStall+0x7e>
 800955c:	2302      	movs	r3, #2
 800955e:	e01c      	b.n	800959a <HAL_PCD_EP_SetStall+0xb8>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2201      	movs	r2, #1
 8009564:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68f9      	ldr	r1, [r7, #12]
 800956e:	4618      	mov	r0, r3
 8009570:	f007 fd64 	bl	801103c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	f003 0307 	and.w	r3, r3, #7
 800957a:	2b00      	cmp	r3, #0
 800957c:	d108      	bne.n	8009590 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009588:	4619      	mov	r1, r3
 800958a:	4610      	mov	r0, r2
 800958c:	f007 fea5 	bl	80112da <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	460b      	mov	r3, r1
 80095ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80095ae:	78fb      	ldrb	r3, [r7, #3]
 80095b0:	f003 020f 	and.w	r2, r3, #15
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d901      	bls.n	80095c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e040      	b.n	8009642 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80095c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	da0e      	bge.n	80095e6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095c8:	78fb      	ldrb	r3, [r7, #3]
 80095ca:	f003 0307 	and.w	r3, r3, #7
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	4613      	mov	r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4413      	add	r3, r2
 80095d6:	00db      	lsls	r3, r3, #3
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	4413      	add	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2201      	movs	r2, #1
 80095e2:	705a      	strb	r2, [r3, #1]
 80095e4:	e00e      	b.n	8009604 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095e6:	78fb      	ldrb	r3, [r7, #3]
 80095e8:	f003 0207 	and.w	r2, r3, #7
 80095ec:	4613      	mov	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4413      	add	r3, r2
 80095f2:	00db      	lsls	r3, r3, #3
 80095f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	4413      	add	r3, r2
 80095fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800960a:	78fb      	ldrb	r3, [r7, #3]
 800960c:	f003 0307 	and.w	r3, r3, #7
 8009610:	b2da      	uxtb	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800961c:	2b01      	cmp	r3, #1
 800961e:	d101      	bne.n	8009624 <HAL_PCD_EP_ClrStall+0x82>
 8009620:	2302      	movs	r3, #2
 8009622:	e00e      	b.n	8009642 <HAL_PCD_EP_ClrStall+0xa0>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68f9      	ldr	r1, [r7, #12]
 8009632:	4618      	mov	r0, r3
 8009634:	f007 fd53 	bl	80110de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b096      	sub	sp, #88	; 0x58
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009652:	e3b1      	b.n	8009db8 <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800965c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009660:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009664:	b2db      	uxtb	r3, r3
 8009666:	f003 030f 	and.w	r3, r3, #15
 800966a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800966e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009672:	2b00      	cmp	r3, #0
 8009674:	f040 8173 	bne.w	800995e <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009678:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800967c:	f003 0310 	and.w	r3, r3, #16
 8009680:	2b00      	cmp	r3, #0
 8009682:	d150      	bne.n	8009726 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	881b      	ldrh	r3, [r3, #0]
 800968a:	b29b      	uxth	r3, r3
 800968c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009694:	81fb      	strh	r3, [r7, #14]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	89fb      	ldrh	r3, [r7, #14]
 800969c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	3328      	adds	r3, #40	; 0x28
 80096ac:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	461a      	mov	r2, r3
 80096ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	00db      	lsls	r3, r3, #3
 80096c0:	4413      	add	r3, r2
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	6812      	ldr	r2, [r2, #0]
 80096c6:	4413      	add	r3, r2
 80096c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80096cc:	881b      	ldrh	r3, [r3, #0]
 80096ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80096d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096d4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80096d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096d8:	695a      	ldr	r2, [r3, #20]
 80096da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	441a      	add	r2, r3
 80096e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096e2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80096e4:	2100      	movs	r1, #0
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f00a fdbd 	bl	8014266 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 835f 	beq.w	8009db8 <PCD_EP_ISR_Handler+0x76e>
 80096fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f040 835a 	bne.w	8009db8 <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800970a:	b2db      	uxtb	r3, r3
 800970c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009710:	b2da      	uxtb	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	b292      	uxth	r2, r2
 8009718:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009724:	e348      	b.n	8009db8 <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800972c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	881b      	ldrh	r3, [r3, #0]
 8009734:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009738:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800973c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009740:	2b00      	cmp	r3, #0
 8009742:	d032      	beq.n	80097aa <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800974c:	b29b      	uxth	r3, r3
 800974e:	461a      	mov	r2, r3
 8009750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	00db      	lsls	r3, r3, #3
 8009756:	4413      	add	r3, r2
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	6812      	ldr	r2, [r2, #0]
 800975c:	4413      	add	r3, r2
 800975e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009762:	881b      	ldrh	r3, [r3, #0]
 8009764:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800976a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6818      	ldr	r0, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8009776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009778:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800977a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800977c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800977e:	b29b      	uxth	r3, r3
 8009780:	f007 fdf9 	bl	8011376 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	881b      	ldrh	r3, [r3, #0]
 800978a:	b29a      	uxth	r2, r3
 800978c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009790:	4013      	ands	r3, r2
 8009792:	823b      	strh	r3, [r7, #16]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	8a3a      	ldrh	r2, [r7, #16]
 800979a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800979e:	b292      	uxth	r2, r2
 80097a0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f00a fd32 	bl	801420c <HAL_PCD_SetupStageCallback>
 80097a8:	e306      	b.n	8009db8 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80097aa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f280 8302 	bge.w	8009db8 <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	881b      	ldrh	r3, [r3, #0]
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80097c0:	4013      	ands	r3, r2
 80097c2:	83fb      	strh	r3, [r7, #30]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	8bfa      	ldrh	r2, [r7, #30]
 80097ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80097ce:	b292      	uxth	r2, r2
 80097d0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097da:	b29b      	uxth	r3, r3
 80097dc:	461a      	mov	r2, r3
 80097de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	00db      	lsls	r3, r3, #3
 80097e4:	4413      	add	r3, r2
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	6812      	ldr	r2, [r2, #0]
 80097ea:	4413      	add	r3, r2
 80097ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80097f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097f8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80097fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097fc:	69db      	ldr	r3, [r3, #28]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d019      	beq.n	8009836 <PCD_EP_ISR_Handler+0x1ec>
 8009802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d015      	beq.n	8009836 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009810:	6959      	ldr	r1, [r3, #20]
 8009812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009814:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009818:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800981a:	b29b      	uxth	r3, r3
 800981c:	f007 fdab 	bl	8011376 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009822:	695a      	ldr	r2, [r3, #20]
 8009824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009826:	69db      	ldr	r3, [r3, #28]
 8009828:	441a      	add	r2, r3
 800982a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800982c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800982e:	2100      	movs	r1, #0
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f00a fcfd 	bl	8014230 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	881b      	ldrh	r3, [r3, #0]
 800983c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009840:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009848:	2b00      	cmp	r3, #0
 800984a:	f040 82b5 	bne.w	8009db8 <PCD_EP_ISR_Handler+0x76e>
 800984e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009852:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009856:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800985a:	f000 82ad 	beq.w	8009db8 <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	61bb      	str	r3, [r7, #24]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800986c:	b29b      	uxth	r3, r3
 800986e:	461a      	mov	r2, r3
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	4413      	add	r3, r2
 8009874:	61bb      	str	r3, [r7, #24]
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800987c:	617b      	str	r3, [r7, #20]
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	b29b      	uxth	r3, r3
 8009884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009888:	b29a      	uxth	r2, r3
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	801a      	strh	r2, [r3, #0]
 800988e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	2b3e      	cmp	r3, #62	; 0x3e
 8009894:	d91d      	bls.n	80098d2 <PCD_EP_ISR_Handler+0x288>
 8009896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	095b      	lsrs	r3, r3, #5
 800989c:	647b      	str	r3, [r7, #68]	; 0x44
 800989e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	f003 031f 	and.w	r3, r3, #31
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d102      	bne.n	80098b0 <PCD_EP_ISR_Handler+0x266>
 80098aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ac:	3b01      	subs	r3, #1
 80098ae:	647b      	str	r3, [r7, #68]	; 0x44
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	029b      	lsls	r3, r3, #10
 80098bc:	b29b      	uxth	r3, r3
 80098be:	4313      	orrs	r3, r2
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	801a      	strh	r2, [r3, #0]
 80098d0:	e026      	b.n	8009920 <PCD_EP_ISR_Handler+0x2d6>
 80098d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098d4:	691b      	ldr	r3, [r3, #16]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10a      	bne.n	80098f0 <PCD_EP_ISR_Handler+0x2a6>
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	881b      	ldrh	r3, [r3, #0]
 80098de:	b29b      	uxth	r3, r3
 80098e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	801a      	strh	r2, [r3, #0]
 80098ee:	e017      	b.n	8009920 <PCD_EP_ISR_Handler+0x2d6>
 80098f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	085b      	lsrs	r3, r3, #1
 80098f6:	647b      	str	r3, [r7, #68]	; 0x44
 80098f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098fa:	691b      	ldr	r3, [r3, #16]
 80098fc:	f003 0301 	and.w	r3, r3, #1
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <PCD_EP_ISR_Handler+0x2c0>
 8009904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009906:	3301      	adds	r3, #1
 8009908:	647b      	str	r3, [r7, #68]	; 0x44
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	881b      	ldrh	r3, [r3, #0]
 800990e:	b29a      	uxth	r2, r3
 8009910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009912:	b29b      	uxth	r3, r3
 8009914:	029b      	lsls	r3, r3, #10
 8009916:	b29b      	uxth	r3, r3
 8009918:	4313      	orrs	r3, r2
 800991a:	b29a      	uxth	r2, r3
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	b29b      	uxth	r3, r3
 8009928:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800992c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009930:	827b      	strh	r3, [r7, #18]
 8009932:	8a7b      	ldrh	r3, [r7, #18]
 8009934:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009938:	827b      	strh	r3, [r7, #18]
 800993a:	8a7b      	ldrh	r3, [r7, #18]
 800993c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009940:	827b      	strh	r3, [r7, #18]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	8a7b      	ldrh	r3, [r7, #18]
 8009948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800994c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009958:	b29b      	uxth	r3, r3
 800995a:	8013      	strh	r3, [r2, #0]
 800995c:	e22c      	b.n	8009db8 <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	461a      	mov	r2, r3
 8009964:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4413      	add	r3, r2
 800996c:	881b      	ldrh	r3, [r3, #0]
 800996e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009972:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8009976:	2b00      	cmp	r3, #0
 8009978:	f280 80f6 	bge.w	8009b68 <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	461a      	mov	r2, r3
 8009982:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	881b      	ldrh	r3, [r3, #0]
 800998c:	b29a      	uxth	r2, r3
 800998e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8009992:	4013      	ands	r3, r2
 8009994:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	461a      	mov	r2, r3
 800999e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	4413      	add	r3, r2
 80099a6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80099aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80099ae:	b292      	uxth	r2, r2
 80099b0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80099b2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80099b6:	4613      	mov	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	00db      	lsls	r3, r3, #3
 80099be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	4413      	add	r3, r2
 80099c6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80099c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099ca:	7b1b      	ldrb	r3, [r3, #12]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d123      	bne.n	8009a18 <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099d8:	b29b      	uxth	r3, r3
 80099da:	461a      	mov	r2, r3
 80099dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	00db      	lsls	r3, r3, #3
 80099e2:	4413      	add	r3, r2
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	6812      	ldr	r2, [r2, #0]
 80099e8:	4413      	add	r3, r2
 80099ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099f4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80099f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f000 808e 	beq.w	8009b1e <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6818      	ldr	r0, [r3, #0]
 8009a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a08:	6959      	ldr	r1, [r3, #20]
 8009a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a0c:	88da      	ldrh	r2, [r3, #6]
 8009a0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009a12:	f007 fcb0 	bl	8011376 <USB_ReadPMA>
 8009a16:	e082      	b.n	8009b1e <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a1a:	78db      	ldrb	r3, [r3, #3]
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d10a      	bne.n	8009a36 <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009a20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009a24:	461a      	mov	r2, r3
 8009a26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 f9d3 	bl	8009dd4 <HAL_PCD_EP_DB_Receive>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8009a34:	e073      	b.n	8009b1e <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	881b      	ldrh	r3, [r3, #0]
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a50:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	461a      	mov	r2, r3
 8009a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	441a      	add	r2, r3
 8009a62:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	881b      	ldrh	r3, [r3, #0]
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d022      	beq.n	8009ada <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	00db      	lsls	r3, r3, #3
 8009aa6:	4413      	add	r3, r2
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	6812      	ldr	r2, [r2, #0]
 8009aac:	4413      	add	r3, r2
 8009aae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ab8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8009abc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d02c      	beq.n	8009b1e <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6818      	ldr	r0, [r3, #0]
 8009ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aca:	6959      	ldr	r1, [r3, #20]
 8009acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ace:	891a      	ldrh	r2, [r3, #8]
 8009ad0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009ad4:	f007 fc4f 	bl	8011376 <USB_ReadPMA>
 8009ad8:	e021      	b.n	8009b1e <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	00db      	lsls	r3, r3, #3
 8009aec:	4413      	add	r3, r2
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	6812      	ldr	r2, [r2, #0]
 8009af2:	4413      	add	r3, r2
 8009af4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009afe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8009b02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d009      	beq.n	8009b1e <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6818      	ldr	r0, [r3, #0]
 8009b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b10:	6959      	ldr	r1, [r3, #20]
 8009b12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b14:	895a      	ldrh	r2, [r3, #10]
 8009b16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009b1a:	f007 fc2c 	bl	8011376 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b20:	69da      	ldr	r2, [r3, #28]
 8009b22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009b26:	441a      	add	r2, r3
 8009b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b2a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b2e:	695a      	ldr	r2, [r3, #20]
 8009b30:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8009b34:	441a      	add	r2, r3
 8009b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b38:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d005      	beq.n	8009b4e <PCD_EP_ISR_Handler+0x504>
 8009b42:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8009b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d206      	bcs.n	8009b5c <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f00a fb6b 	bl	8014230 <HAL_PCD_DataOutStageCallback>
 8009b5a:	e005      	b.n	8009b68 <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b62:	4618      	mov	r0, r3
 8009b64:	f005 feb9 	bl	800f8da <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009b68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 8121 	beq.w	8009db8 <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 8009b76:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009b7a:	1c5a      	adds	r2, r3, #1
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	00db      	lsls	r3, r3, #3
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	4413      	add	r3, r2
 8009b88:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	881b      	ldrh	r3, [r3, #0]
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8009ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ba4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	461a      	mov	r2, r3
 8009bae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	441a      	add	r2, r3
 8009bb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bc8:	78db      	ldrb	r3, [r3, #3]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	f040 80a2 	bne.w	8009d14 <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 8009bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bd8:	7b1b      	ldrb	r3, [r3, #12]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f000 8093 	beq.w	8009d06 <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009be0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d046      	beq.n	8009c7a <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bee:	785b      	ldrb	r3, [r3, #1]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d126      	bne.n	8009c42 <PCD_EP_ISR_Handler+0x5f8>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	461a      	mov	r2, r3
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	4413      	add	r3, r2
 8009c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	00da      	lsls	r2, r3, #3
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c14:	4413      	add	r3, r2
 8009c16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c1a:	623b      	str	r3, [r7, #32]
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
 8009c1e:	881b      	ldrh	r3, [r3, #0]
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	6a3b      	ldr	r3, [r7, #32]
 8009c2a:	801a      	strh	r2, [r3, #0]
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	881b      	ldrh	r3, [r3, #0]
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	6a3b      	ldr	r3, [r7, #32]
 8009c3e:	801a      	strh	r2, [r3, #0]
 8009c40:	e061      	b.n	8009d06 <PCD_EP_ISR_Handler+0x6bc>
 8009c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c44:	785b      	ldrb	r3, [r3, #1]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d15d      	bne.n	8009d06 <PCD_EP_ISR_Handler+0x6bc>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5e:	4413      	add	r3, r2
 8009c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	00da      	lsls	r2, r3, #3
 8009c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c74:	2200      	movs	r2, #0
 8009c76:	801a      	strh	r2, [r3, #0]
 8009c78:	e045      	b.n	8009d06 <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c82:	785b      	ldrb	r3, [r3, #1]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d126      	bne.n	8009cd6 <PCD_EP_ISR_Handler+0x68c>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	461a      	mov	r2, r3
 8009c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c9c:	4413      	add	r3, r2
 8009c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8009ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	00da      	lsls	r2, r3, #3
 8009ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca8:	4413      	add	r3, r2
 8009caa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009cae:	633b      	str	r3, [r7, #48]	; 0x30
 8009cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb2:	881b      	ldrh	r3, [r3, #0]
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbe:	801a      	strh	r2, [r3, #0]
 8009cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd2:	801a      	strh	r2, [r3, #0]
 8009cd4:	e017      	b.n	8009d06 <PCD_EP_ISR_Handler+0x6bc>
 8009cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cd8:	785b      	ldrb	r3, [r3, #1]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d113      	bne.n	8009d06 <PCD_EP_ISR_Handler+0x6bc>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	461a      	mov	r2, r3
 8009cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cec:	4413      	add	r3, r2
 8009cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	00da      	lsls	r2, r3, #3
 8009cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d02:	2200      	movs	r2, #0
 8009d04:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f00a faaa 	bl	8014266 <HAL_PCD_DataInStageCallback>
 8009d12:	e051      	b.n	8009db8 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009d14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d144      	bne.n	8009daa <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	00db      	lsls	r3, r3, #3
 8009d32:	4413      	add	r3, r2
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	6812      	ldr	r2, [r2, #0]
 8009d38:	4413      	add	r3, r2
 8009d3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d3e:	881b      	ldrh	r3, [r3, #0]
 8009d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d44:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8009d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d4a:	699a      	ldr	r2, [r3, #24]
 8009d4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d907      	bls.n	8009d64 <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8009d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d56:	699a      	ldr	r2, [r3, #24]
 8009d58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d5c:	1ad2      	subs	r2, r2, r3
 8009d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d60:	619a      	str	r2, [r3, #24]
 8009d62:	e002      	b.n	8009d6a <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8009d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d66:	2200      	movs	r2, #0
 8009d68:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8009d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d106      	bne.n	8009d80 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f00a fa74 	bl	8014266 <HAL_PCD_DataInStageCallback>
 8009d7e:	e01b      	b.n	8009db8 <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d82:	695a      	ldr	r2, [r3, #20]
 8009d84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d88:	441a      	add	r2, r3
 8009d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d8c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d90:	69da      	ldr	r2, [r3, #28]
 8009d92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009d96:	441a      	add	r2, r3
 8009d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d9a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009da2:	4618      	mov	r0, r3
 8009da4:	f005 fd99 	bl	800f8da <USB_EPStartXfer>
 8009da8:	e006      	b.n	8009db8 <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009daa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009dae:	461a      	mov	r2, r3
 8009db0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f917 	bl	8009fe6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	b21b      	sxth	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f6ff ac45 	blt.w	8009654 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3758      	adds	r7, #88	; 0x58
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b088      	sub	sp, #32
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	4613      	mov	r3, r2
 8009de0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009de2:	88fb      	ldrh	r3, [r7, #6]
 8009de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d07c      	beq.n	8009ee6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	461a      	mov	r2, r3
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	00db      	lsls	r3, r3, #3
 8009dfe:	4413      	add	r3, r2
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	6812      	ldr	r2, [r2, #0]
 8009e04:	4413      	add	r3, r2
 8009e06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e0a:	881b      	ldrh	r3, [r3, #0]
 8009e0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e10:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	699a      	ldr	r2, [r3, #24]
 8009e16:	8b7b      	ldrh	r3, [r7, #26]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d306      	bcc.n	8009e2a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	699a      	ldr	r2, [r3, #24]
 8009e20:	8b7b      	ldrh	r3, [r7, #26]
 8009e22:	1ad2      	subs	r2, r2, r3
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	619a      	str	r2, [r3, #24]
 8009e28:	e002      	b.n	8009e30 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	699b      	ldr	r3, [r3, #24]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d123      	bne.n	8009e80 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e52:	833b      	strh	r3, [r7, #24]
 8009e54:	8b3b      	ldrh	r3, [r7, #24]
 8009e56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e5a:	833b      	strh	r3, [r7, #24]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	461a      	mov	r2, r3
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	441a      	add	r2, r3
 8009e6a:	8b3b      	ldrh	r3, [r7, #24]
 8009e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009e80:	88fb      	ldrh	r3, [r7, #6]
 8009e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d01f      	beq.n	8009eca <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	881b      	ldrh	r3, [r3, #0]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ea4:	82fb      	strh	r3, [r7, #22]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	441a      	add	r2, r3
 8009eb4:	8afb      	ldrh	r3, [r7, #22]
 8009eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ec2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009eca:	8b7b      	ldrh	r3, [r7, #26]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 8085 	beq.w	8009fdc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6818      	ldr	r0, [r3, #0]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	6959      	ldr	r1, [r3, #20]
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	891a      	ldrh	r2, [r3, #8]
 8009ede:	8b7b      	ldrh	r3, [r7, #26]
 8009ee0:	f007 fa49 	bl	8011376 <USB_ReadPMA>
 8009ee4:	e07a      	b.n	8009fdc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	00db      	lsls	r3, r3, #3
 8009ef8:	4413      	add	r3, r2
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	6812      	ldr	r2, [r2, #0]
 8009efe:	4413      	add	r3, r2
 8009f00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f0a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	699a      	ldr	r2, [r3, #24]
 8009f10:	8b7b      	ldrh	r3, [r7, #26]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d306      	bcc.n	8009f24 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	699a      	ldr	r2, [r3, #24]
 8009f1a:	8b7b      	ldrh	r3, [r7, #26]
 8009f1c:	1ad2      	subs	r2, r2, r3
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	619a      	str	r2, [r3, #24]
 8009f22:	e002      	b.n	8009f2a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	2200      	movs	r2, #0
 8009f28:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d123      	bne.n	8009f7a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	461a      	mov	r2, r3
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	881b      	ldrh	r3, [r3, #0]
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f4c:	83fb      	strh	r3, [r7, #30]
 8009f4e:	8bfb      	ldrh	r3, [r7, #30]
 8009f50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009f54:	83fb      	strh	r3, [r7, #30]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	441a      	add	r2, r3
 8009f64:	8bfb      	ldrh	r3, [r7, #30]
 8009f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009f7a:	88fb      	ldrh	r3, [r7, #6]
 8009f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d11f      	bne.n	8009fc4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	461a      	mov	r2, r3
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	881b      	ldrh	r3, [r3, #0]
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f9e:	83bb      	strh	r3, [r7, #28]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	441a      	add	r2, r3
 8009fae:	8bbb      	ldrh	r3, [r7, #28]
 8009fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009fc4:	8b7b      	ldrh	r3, [r7, #26]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d008      	beq.n	8009fdc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6818      	ldr	r0, [r3, #0]
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	6959      	ldr	r1, [r3, #20]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	895a      	ldrh	r2, [r3, #10]
 8009fd6:	8b7b      	ldrh	r3, [r7, #26]
 8009fd8:	f007 f9cd 	bl	8011376 <USB_ReadPMA>
    }
  }

  return count;
 8009fdc:	8b7b      	ldrh	r3, [r7, #26]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3720      	adds	r7, #32
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b0a4      	sub	sp, #144	; 0x90
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	60f8      	str	r0, [r7, #12]
 8009fee:	60b9      	str	r1, [r7, #8]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009ff4:	88fb      	ldrh	r3, [r7, #6]
 8009ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f000 81db 	beq.w	800a3b6 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a008:	b29b      	uxth	r3, r3
 800a00a:	461a      	mov	r2, r3
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	00db      	lsls	r3, r3, #3
 800a012:	4413      	add	r3, r2
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	6812      	ldr	r2, [r2, #0]
 800a018:	4413      	add	r3, r2
 800a01a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a024:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	699a      	ldr	r2, [r3, #24]
 800a02c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a030:	429a      	cmp	r2, r3
 800a032:	d907      	bls.n	800a044 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	699a      	ldr	r2, [r3, #24]
 800a038:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a03c:	1ad2      	subs	r2, r2, r3
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	619a      	str	r2, [r3, #24]
 800a042:	e002      	b.n	800a04a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	2200      	movs	r2, #0
 800a048:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f040 80b9 	bne.w	800a1c6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	785b      	ldrb	r3, [r3, #1]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d126      	bne.n	800a0aa <HAL_PCD_EP_DB_Transmit+0xc4>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	461a      	mov	r2, r3
 800a06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a070:	4413      	add	r3, r2
 800a072:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	00da      	lsls	r2, r3, #3
 800a07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07c:	4413      	add	r3, r2
 800a07e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a082:	62bb      	str	r3, [r7, #40]	; 0x28
 800a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a086:	881b      	ldrh	r3, [r3, #0]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a08e:	b29a      	uxth	r2, r3
 800a090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a092:	801a      	strh	r2, [r3, #0]
 800a094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	b29b      	uxth	r3, r3
 800a09a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a09e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a6:	801a      	strh	r2, [r3, #0]
 800a0a8:	e01a      	b.n	800a0e0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	785b      	ldrb	r3, [r3, #1]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d116      	bne.n	800a0e0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	637b      	str	r3, [r7, #52]	; 0x34
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c6:	4413      	add	r3, r2
 800a0c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	00da      	lsls	r2, r3, #3
 800a0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a0d8:	633b      	str	r3, [r7, #48]	; 0x30
 800a0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0dc:	2200      	movs	r2, #0
 800a0de:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	785b      	ldrb	r3, [r3, #1]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d126      	bne.n	800a13c <HAL_PCD_EP_DB_Transmit+0x156>
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	61fb      	str	r3, [r7, #28]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	461a      	mov	r2, r3
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	4413      	add	r3, r2
 800a104:	61fb      	str	r3, [r7, #28]
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	00da      	lsls	r2, r3, #3
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	4413      	add	r3, r2
 800a110:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a114:	61bb      	str	r3, [r7, #24]
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	881b      	ldrh	r3, [r3, #0]
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a120:	b29a      	uxth	r2, r3
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	801a      	strh	r2, [r3, #0]
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	881b      	ldrh	r3, [r3, #0]
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a134:	b29a      	uxth	r2, r3
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	801a      	strh	r2, [r3, #0]
 800a13a:	e017      	b.n	800a16c <HAL_PCD_EP_DB_Transmit+0x186>
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	785b      	ldrb	r3, [r3, #1]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d113      	bne.n	800a16c <HAL_PCD_EP_DB_Transmit+0x186>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	461a      	mov	r2, r3
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	4413      	add	r3, r2
 800a154:	627b      	str	r3, [r7, #36]	; 0x24
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	00da      	lsls	r2, r3, #3
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	4413      	add	r3, r2
 800a160:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a164:	623b      	str	r3, [r7, #32]
 800a166:	6a3b      	ldr	r3, [r7, #32]
 800a168:	2200      	movs	r2, #0
 800a16a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	4619      	mov	r1, r3
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f00a f877 	bl	8014266 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a178:	88fb      	ldrh	r3, [r7, #6]
 800a17a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f000 82fa 	beq.w	800a778 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	461a      	mov	r2, r3
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4413      	add	r3, r2
 800a192:	881b      	ldrh	r3, [r3, #0]
 800a194:	b29b      	uxth	r3, r3
 800a196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a19a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a19e:	82fb      	strh	r3, [r7, #22]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	441a      	add	r2, r3
 800a1ae:	8afb      	ldrh	r3, [r7, #22]
 800a1b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	8013      	strh	r3, [r2, #0]
 800a1c4:	e2d8      	b.n	800a778 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a1c6:	88fb      	ldrh	r3, [r7, #6]
 800a1c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d021      	beq.n	800a214 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4413      	add	r3, r2
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1ea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	441a      	add	r2, r3
 800a1fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a20c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a210:	b29b      	uxth	r3, r3
 800a212:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	f040 82ac 	bne.w	800a778 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	695a      	ldr	r2, [r3, #20]
 800a224:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a228:	441a      	add	r2, r3
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	69da      	ldr	r2, [r3, #28]
 800a232:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a236:	441a      	add	r2, r3
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	6a1a      	ldr	r2, [r3, #32]
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	429a      	cmp	r2, r3
 800a246:	d30b      	bcc.n	800a260 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	6a1a      	ldr	r2, [r3, #32]
 800a254:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a258:	1ad2      	subs	r2, r2, r3
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	621a      	str	r2, [r3, #32]
 800a25e:	e017      	b.n	800a290 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	6a1b      	ldr	r3, [r3, #32]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d108      	bne.n	800a27a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800a268:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a26c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a278:	e00a      	b.n	800a290 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	2200      	movs	r2, #0
 800a28e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	785b      	ldrb	r3, [r3, #1]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d165      	bne.n	800a364 <HAL_PCD_EP_DB_Transmit+0x37e>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ac:	4413      	add	r3, r2
 800a2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	00da      	lsls	r2, r3, #3
 800a2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b8:	4413      	add	r3, r2
 800a2ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2be:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c2:	881b      	ldrh	r3, [r3, #0]
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ce:	801a      	strh	r2, [r3, #0]
 800a2d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2d4:	2b3e      	cmp	r3, #62	; 0x3e
 800a2d6:	d91d      	bls.n	800a314 <HAL_PCD_EP_DB_Transmit+0x32e>
 800a2d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2dc:	095b      	lsrs	r3, r3, #5
 800a2de:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2e4:	f003 031f 	and.w	r3, r3, #31
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d102      	bne.n	800a2f2 <HAL_PCD_EP_DB_Transmit+0x30c>
 800a2ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	029b      	lsls	r3, r3, #10
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	4313      	orrs	r3, r2
 800a302:	b29b      	uxth	r3, r3
 800a304:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a308:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a310:	801a      	strh	r2, [r3, #0]
 800a312:	e044      	b.n	800a39e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a314:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10a      	bne.n	800a332 <HAL_PCD_EP_DB_Transmit+0x34c>
 800a31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a31e:	881b      	ldrh	r3, [r3, #0]
 800a320:	b29b      	uxth	r3, r3
 800a322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32e:	801a      	strh	r2, [r3, #0]
 800a330:	e035      	b.n	800a39e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a336:	085b      	lsrs	r3, r3, #1
 800a338:	64bb      	str	r3, [r7, #72]	; 0x48
 800a33a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a33e:	f003 0301 	and.w	r3, r3, #1
 800a342:	2b00      	cmp	r3, #0
 800a344:	d002      	beq.n	800a34c <HAL_PCD_EP_DB_Transmit+0x366>
 800a346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a348:	3301      	adds	r3, #1
 800a34a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34e:	881b      	ldrh	r3, [r3, #0]
 800a350:	b29a      	uxth	r2, r3
 800a352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a354:	b29b      	uxth	r3, r3
 800a356:	029b      	lsls	r3, r3, #10
 800a358:	b29b      	uxth	r3, r3
 800a35a:	4313      	orrs	r3, r2
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a360:	801a      	strh	r2, [r3, #0]
 800a362:	e01c      	b.n	800a39e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	785b      	ldrb	r3, [r3, #1]
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d118      	bne.n	800a39e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	647b      	str	r3, [r7, #68]	; 0x44
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	461a      	mov	r2, r3
 800a37e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a380:	4413      	add	r3, r2
 800a382:	647b      	str	r3, [r7, #68]	; 0x44
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	00da      	lsls	r2, r3, #3
 800a38a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a38c:	4413      	add	r3, r2
 800a38e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a392:	643b      	str	r3, [r7, #64]	; 0x40
 800a394:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a398:	b29a      	uxth	r2, r3
 800a39a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a39c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6818      	ldr	r0, [r3, #0]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	6959      	ldr	r1, [r3, #20]
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	891a      	ldrh	r2, [r3, #8]
 800a3aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	f006 ff9f 	bl	80112f2 <USB_WritePMA>
 800a3b4:	e1e0      	b.n	800a778 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	4413      	add	r3, r2
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	6812      	ldr	r2, [r2, #0]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3d4:	881b      	ldrh	r3, [r3, #0]
 800a3d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3da:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	699a      	ldr	r2, [r3, #24]
 800a3e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d307      	bcc.n	800a3fa <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	699a      	ldr	r2, [r3, #24]
 800a3ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a3f2:	1ad2      	subs	r2, r2, r3
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	619a      	str	r2, [r3, #24]
 800a3f8:	e002      	b.n	800a400 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	2b00      	cmp	r3, #0
 800a406:	f040 80c0 	bne.w	800a58a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	785b      	ldrb	r3, [r3, #1]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d126      	bne.n	800a460 <HAL_PCD_EP_DB_Transmit+0x47a>
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a420:	b29b      	uxth	r3, r3
 800a422:	461a      	mov	r2, r3
 800a424:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a426:	4413      	add	r3, r2
 800a428:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	00da      	lsls	r2, r3, #3
 800a430:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a432:	4413      	add	r3, r2
 800a434:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a438:	67bb      	str	r3, [r7, #120]	; 0x78
 800a43a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a43c:	881b      	ldrh	r3, [r3, #0]
 800a43e:	b29b      	uxth	r3, r3
 800a440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a444:	b29a      	uxth	r2, r3
 800a446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a448:	801a      	strh	r2, [r3, #0]
 800a44a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a44c:	881b      	ldrh	r3, [r3, #0]
 800a44e:	b29b      	uxth	r3, r3
 800a450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a458:	b29a      	uxth	r2, r3
 800a45a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a45c:	801a      	strh	r2, [r3, #0]
 800a45e:	e01a      	b.n	800a496 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	785b      	ldrb	r3, [r3, #1]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d116      	bne.n	800a496 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	667b      	str	r3, [r7, #100]	; 0x64
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a476:	b29b      	uxth	r3, r3
 800a478:	461a      	mov	r2, r3
 800a47a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a47c:	4413      	add	r3, r2
 800a47e:	667b      	str	r3, [r7, #100]	; 0x64
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	00da      	lsls	r2, r3, #3
 800a486:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a488:	4413      	add	r3, r2
 800a48a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a48e:	663b      	str	r3, [r7, #96]	; 0x60
 800a490:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a492:	2200      	movs	r2, #0
 800a494:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	677b      	str	r3, [r7, #116]	; 0x74
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	785b      	ldrb	r3, [r3, #1]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d12b      	bne.n	800a4fc <HAL_PCD_EP_DB_Transmit+0x516>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4b8:	4413      	add	r3, r2
 800a4ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	00da      	lsls	r2, r3, #3
 800a4c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a4ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a4ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a4d2:	881b      	ldrh	r3, [r3, #0]
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a4e0:	801a      	strh	r2, [r3, #0]
 800a4e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a4e6:	881b      	ldrh	r3, [r3, #0]
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4f2:	b29a      	uxth	r2, r3
 800a4f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a4f8:	801a      	strh	r2, [r3, #0]
 800a4fa:	e017      	b.n	800a52c <HAL_PCD_EP_DB_Transmit+0x546>
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	785b      	ldrb	r3, [r3, #1]
 800a500:	2b01      	cmp	r3, #1
 800a502:	d113      	bne.n	800a52c <HAL_PCD_EP_DB_Transmit+0x546>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	461a      	mov	r2, r3
 800a510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a512:	4413      	add	r3, r2
 800a514:	677b      	str	r3, [r7, #116]	; 0x74
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	00da      	lsls	r2, r3, #3
 800a51c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a51e:	4413      	add	r3, r2
 800a520:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a524:	673b      	str	r3, [r7, #112]	; 0x70
 800a526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a528:	2200      	movs	r2, #0
 800a52a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	4619      	mov	r1, r3
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f009 fe97 	bl	8014266 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a538:	88fb      	ldrh	r3, [r7, #6]
 800a53a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f040 811a 	bne.w	800a778 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	461a      	mov	r2, r3
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	4413      	add	r3, r2
 800a552:	881b      	ldrh	r3, [r3, #0]
 800a554:	b29b      	uxth	r3, r3
 800a556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a55a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a55e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	441a      	add	r2, r3
 800a570:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800a574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a57c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a584:	b29b      	uxth	r3, r3
 800a586:	8013      	strh	r3, [r2, #0]
 800a588:	e0f6      	b.n	800a778 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a58a:	88fb      	ldrh	r3, [r7, #6]
 800a58c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d121      	bne.n	800a5d8 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	461a      	mov	r2, r3
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	881b      	ldrh	r3, [r3, #0]
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	441a      	add	r2, r3
 800a5c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a5c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	f040 80ca 	bne.w	800a778 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	695a      	ldr	r2, [r3, #20]
 800a5e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a5ec:	441a      	add	r2, r3
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	69da      	ldr	r2, [r3, #28]
 800a5f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a5fa:	441a      	add	r2, r3
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	6a1a      	ldr	r2, [r3, #32]
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d30b      	bcc.n	800a624 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	6a1a      	ldr	r2, [r3, #32]
 800a618:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a61c:	1ad2      	subs	r2, r2, r3
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	621a      	str	r2, [r3, #32]
 800a622:	e017      	b.n	800a654 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	6a1b      	ldr	r3, [r3, #32]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d108      	bne.n	800a63e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800a62c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800a63c:	e00a      	b.n	800a654 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	2200      	movs	r2, #0
 800a64a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	657b      	str	r3, [r7, #84]	; 0x54
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	785b      	ldrb	r3, [r3, #1]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d165      	bne.n	800a72e <HAL_PCD_EP_DB_Transmit+0x748>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a670:	b29b      	uxth	r3, r3
 800a672:	461a      	mov	r2, r3
 800a674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a676:	4413      	add	r3, r2
 800a678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	00da      	lsls	r2, r3, #3
 800a680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a682:	4413      	add	r3, r2
 800a684:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a688:	65bb      	str	r3, [r7, #88]	; 0x58
 800a68a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	b29b      	uxth	r3, r3
 800a690:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a694:	b29a      	uxth	r2, r3
 800a696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a698:	801a      	strh	r2, [r3, #0]
 800a69a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a69e:	2b3e      	cmp	r3, #62	; 0x3e
 800a6a0:	d91d      	bls.n	800a6de <HAL_PCD_EP_DB_Transmit+0x6f8>
 800a6a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6a6:	095b      	lsrs	r3, r3, #5
 800a6a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6ae:	f003 031f 	and.w	r3, r3, #31
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d102      	bne.n	800a6bc <HAL_PCD_EP_DB_Transmit+0x6d6>
 800a6b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6be:	881b      	ldrh	r3, [r3, #0]
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	029b      	lsls	r3, r3, #10
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6da:	801a      	strh	r2, [r3, #0]
 800a6dc:	e041      	b.n	800a762 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a6de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10a      	bne.n	800a6fc <HAL_PCD_EP_DB_Transmit+0x716>
 800a6e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6e8:	881b      	ldrh	r3, [r3, #0]
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a6f8:	801a      	strh	r2, [r3, #0]
 800a6fa:	e032      	b.n	800a762 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a6fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a700:	085b      	lsrs	r3, r3, #1
 800a702:	66bb      	str	r3, [r7, #104]	; 0x68
 800a704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <HAL_PCD_EP_DB_Transmit+0x730>
 800a710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a712:	3301      	adds	r3, #1
 800a714:	66bb      	str	r3, [r7, #104]	; 0x68
 800a716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a718:	881b      	ldrh	r3, [r3, #0]
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a71e:	b29b      	uxth	r3, r3
 800a720:	029b      	lsls	r3, r3, #10
 800a722:	b29b      	uxth	r3, r3
 800a724:	4313      	orrs	r3, r2
 800a726:	b29a      	uxth	r2, r3
 800a728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a72a:	801a      	strh	r2, [r3, #0]
 800a72c:	e019      	b.n	800a762 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	785b      	ldrb	r3, [r3, #1]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d115      	bne.n	800a762 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a73e:	b29b      	uxth	r3, r3
 800a740:	461a      	mov	r2, r3
 800a742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a744:	4413      	add	r3, r2
 800a746:	657b      	str	r3, [r7, #84]	; 0x54
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	00da      	lsls	r2, r3, #3
 800a74e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a750:	4413      	add	r3, r2
 800a752:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a756:	653b      	str	r3, [r7, #80]	; 0x50
 800a758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a760:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6818      	ldr	r0, [r3, #0]
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	6959      	ldr	r1, [r3, #20]
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	895a      	ldrh	r2, [r3, #10]
 800a76e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a772:	b29b      	uxth	r3, r3
 800a774:	f006 fdbd 	bl	80112f2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	461a      	mov	r2, r3
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	881b      	ldrh	r3, [r3, #0]
 800a788:	b29b      	uxth	r3, r3
 800a78a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a78e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a792:	82bb      	strh	r3, [r7, #20]
 800a794:	8abb      	ldrh	r3, [r7, #20]
 800a796:	f083 0310 	eor.w	r3, r3, #16
 800a79a:	82bb      	strh	r3, [r7, #20]
 800a79c:	8abb      	ldrh	r3, [r7, #20]
 800a79e:	f083 0320 	eor.w	r3, r3, #32
 800a7a2:	82bb      	strh	r3, [r7, #20]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	441a      	add	r2, r3
 800a7b2:	8abb      	ldrh	r3, [r7, #20]
 800a7b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3790      	adds	r7, #144	; 0x90
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b087      	sub	sp, #28
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	60f8      	str	r0, [r7, #12]
 800a7da:	607b      	str	r3, [r7, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	817b      	strh	r3, [r7, #10]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a7e4:	897b      	ldrh	r3, [r7, #10]
 800a7e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00b      	beq.n	800a808 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7f0:	897b      	ldrh	r3, [r7, #10]
 800a7f2:	f003 0307 	and.w	r3, r3, #7
 800a7f6:	1c5a      	adds	r2, r3, #1
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	4413      	add	r3, r2
 800a7fe:	00db      	lsls	r3, r3, #3
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	4413      	add	r3, r2
 800a804:	617b      	str	r3, [r7, #20]
 800a806:	e009      	b.n	800a81c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a808:	897a      	ldrh	r2, [r7, #10]
 800a80a:	4613      	mov	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	00db      	lsls	r3, r3, #3
 800a812:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a816:	68fa      	ldr	r2, [r7, #12]
 800a818:	4413      	add	r3, r2
 800a81a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a81c:	893b      	ldrh	r3, [r7, #8]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d107      	bne.n	800a832 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	2200      	movs	r2, #0
 800a826:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	b29a      	uxth	r2, r3
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	80da      	strh	r2, [r3, #6]
 800a830:	e00b      	b.n	800a84a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	2201      	movs	r2, #1
 800a836:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	0c1b      	lsrs	r3, r3, #16
 800a844:	b29a      	uxth	r2, r3
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	371c      	adds	r7, #28
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
  hpcd->LPM_State = LPM_L0;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	f043 0301 	orr.w	r3, r3, #1
 800a882:	b29a      	uxth	r2, r3
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a890:	b29b      	uxth	r3, r3
 800a892:	f043 0302 	orr.w	r3, r3, #2
 800a896:	b29a      	uxth	r2, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3714      	adds	r7, #20
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a8b0:	4b04      	ldr	r3, [pc, #16]	; (800a8c4 <HAL_PWREx_GetVoltageRange+0x18>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	40007000 	.word	0x40007000

0800a8c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8d6:	d130      	bne.n	800a93a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a8d8:	4b23      	ldr	r3, [pc, #140]	; (800a968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a8e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8e4:	d038      	beq.n	800a958 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a8e6:	4b20      	ldr	r3, [pc, #128]	; (800a968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a8ee:	4a1e      	ldr	r2, [pc, #120]	; (800a968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a8f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a8f6:	4b1d      	ldr	r3, [pc, #116]	; (800a96c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2232      	movs	r2, #50	; 0x32
 800a8fc:	fb02 f303 	mul.w	r3, r2, r3
 800a900:	4a1b      	ldr	r2, [pc, #108]	; (800a970 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a902:	fba2 2303 	umull	r2, r3, r2, r3
 800a906:	0c9b      	lsrs	r3, r3, #18
 800a908:	3301      	adds	r3, #1
 800a90a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a90c:	e002      	b.n	800a914 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3b01      	subs	r3, #1
 800a912:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a914:	4b14      	ldr	r3, [pc, #80]	; (800a968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a916:	695b      	ldr	r3, [r3, #20]
 800a918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a91c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a920:	d102      	bne.n	800a928 <HAL_PWREx_ControlVoltageScaling+0x60>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d1f2      	bne.n	800a90e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a928:	4b0f      	ldr	r3, [pc, #60]	; (800a968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a92a:	695b      	ldr	r3, [r3, #20]
 800a92c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a934:	d110      	bne.n	800a958 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a936:	2303      	movs	r3, #3
 800a938:	e00f      	b.n	800a95a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a93a:	4b0b      	ldr	r3, [pc, #44]	; (800a968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a946:	d007      	beq.n	800a958 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a948:	4b07      	ldr	r3, [pc, #28]	; (800a968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a950:	4a05      	ldr	r2, [pc, #20]	; (800a968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a952:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a956:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	40007000 	.word	0x40007000
 800a96c:	20000024 	.word	0x20000024
 800a970:	431bde83 	.word	0x431bde83

0800a974 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a974:	b480      	push	{r7}
 800a976:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800a978:	4b05      	ldr	r3, [pc, #20]	; (800a990 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	4a04      	ldr	r2, [pc, #16]	; (800a990 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a97e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a982:	6053      	str	r3, [r2, #4]
}
 800a984:	bf00      	nop
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	40007000 	.word	0x40007000

0800a994 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b088      	sub	sp, #32
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d102      	bne.n	800a9a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	f000 bc02 	b.w	800b1ac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9a8:	4b96      	ldr	r3, [pc, #600]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	f003 030c 	and.w	r3, r3, #12
 800a9b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a9b2:	4b94      	ldr	r3, [pc, #592]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	f003 0303 	and.w	r3, r3, #3
 800a9ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0310 	and.w	r3, r3, #16
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 80e4 	beq.w	800ab92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d007      	beq.n	800a9e0 <HAL_RCC_OscConfig+0x4c>
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	2b0c      	cmp	r3, #12
 800a9d4:	f040 808b 	bne.w	800aaee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	f040 8087 	bne.w	800aaee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a9e0:	4b88      	ldr	r3, [pc, #544]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 0302 	and.w	r3, r3, #2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d005      	beq.n	800a9f8 <HAL_RCC_OscConfig+0x64>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	699b      	ldr	r3, [r3, #24]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d101      	bne.n	800a9f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e3d9      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a1a      	ldr	r2, [r3, #32]
 800a9fc:	4b81      	ldr	r3, [pc, #516]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f003 0308 	and.w	r3, r3, #8
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d004      	beq.n	800aa12 <HAL_RCC_OscConfig+0x7e>
 800aa08:	4b7e      	ldr	r3, [pc, #504]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa10:	e005      	b.n	800aa1e <HAL_RCC_OscConfig+0x8a>
 800aa12:	4b7c      	ldr	r3, [pc, #496]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aa14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa18:	091b      	lsrs	r3, r3, #4
 800aa1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d223      	bcs.n	800aa6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a1b      	ldr	r3, [r3, #32]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 fd8c 	bl	800b544 <RCC_SetFlashLatencyFromMSIRange>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d001      	beq.n	800aa36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e3ba      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aa36:	4b73      	ldr	r3, [pc, #460]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a72      	ldr	r2, [pc, #456]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aa3c:	f043 0308 	orr.w	r3, r3, #8
 800aa40:	6013      	str	r3, [r2, #0]
 800aa42:	4b70      	ldr	r3, [pc, #448]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	496d      	ldr	r1, [pc, #436]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aa50:	4313      	orrs	r3, r2
 800aa52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aa54:	4b6b      	ldr	r3, [pc, #428]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aa56:	685b      	ldr	r3, [r3, #4]
 800aa58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	021b      	lsls	r3, r3, #8
 800aa62:	4968      	ldr	r1, [pc, #416]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aa64:	4313      	orrs	r3, r2
 800aa66:	604b      	str	r3, [r1, #4]
 800aa68:	e025      	b.n	800aab6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aa6a:	4b66      	ldr	r3, [pc, #408]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a65      	ldr	r2, [pc, #404]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aa70:	f043 0308 	orr.w	r3, r3, #8
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	4b63      	ldr	r3, [pc, #396]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	4960      	ldr	r1, [pc, #384]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aa84:	4313      	orrs	r3, r2
 800aa86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aa88:	4b5e      	ldr	r3, [pc, #376]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	69db      	ldr	r3, [r3, #28]
 800aa94:	021b      	lsls	r3, r3, #8
 800aa96:	495b      	ldr	r1, [pc, #364]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d109      	bne.n	800aab6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a1b      	ldr	r3, [r3, #32]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f000 fd4c 	bl	800b544 <RCC_SetFlashLatencyFromMSIRange>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	e37a      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aab6:	f000 fc81 	bl	800b3bc <HAL_RCC_GetSysClockFreq>
 800aaba:	4602      	mov	r2, r0
 800aabc:	4b51      	ldr	r3, [pc, #324]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	091b      	lsrs	r3, r3, #4
 800aac2:	f003 030f 	and.w	r3, r3, #15
 800aac6:	4950      	ldr	r1, [pc, #320]	; (800ac08 <HAL_RCC_OscConfig+0x274>)
 800aac8:	5ccb      	ldrb	r3, [r1, r3]
 800aaca:	f003 031f 	and.w	r3, r3, #31
 800aace:	fa22 f303 	lsr.w	r3, r2, r3
 800aad2:	4a4e      	ldr	r2, [pc, #312]	; (800ac0c <HAL_RCC_OscConfig+0x278>)
 800aad4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800aad6:	4b4e      	ldr	r3, [pc, #312]	; (800ac10 <HAL_RCC_OscConfig+0x27c>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fb fc36 	bl	800634c <HAL_InitTick>
 800aae0:	4603      	mov	r3, r0
 800aae2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800aae4:	7bfb      	ldrb	r3, [r7, #15]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d052      	beq.n	800ab90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800aaea:	7bfb      	ldrb	r3, [r7, #15]
 800aaec:	e35e      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d032      	beq.n	800ab5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800aaf6:	4b43      	ldr	r3, [pc, #268]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a42      	ldr	r2, [pc, #264]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800aafc:	f043 0301 	orr.w	r3, r3, #1
 800ab00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ab02:	f7fb fc73 	bl	80063ec <HAL_GetTick>
 800ab06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ab08:	e008      	b.n	800ab1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ab0a:	f7fb fc6f 	bl	80063ec <HAL_GetTick>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d901      	bls.n	800ab1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800ab18:	2303      	movs	r3, #3
 800ab1a:	e347      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ab1c:	4b39      	ldr	r3, [pc, #228]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 0302 	and.w	r3, r3, #2
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d0f0      	beq.n	800ab0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ab28:	4b36      	ldr	r3, [pc, #216]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a35      	ldr	r2, [pc, #212]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800ab2e:	f043 0308 	orr.w	r3, r3, #8
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	4b33      	ldr	r3, [pc, #204]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a1b      	ldr	r3, [r3, #32]
 800ab40:	4930      	ldr	r1, [pc, #192]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ab46:	4b2f      	ldr	r3, [pc, #188]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	69db      	ldr	r3, [r3, #28]
 800ab52:	021b      	lsls	r3, r3, #8
 800ab54:	492b      	ldr	r1, [pc, #172]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800ab56:	4313      	orrs	r3, r2
 800ab58:	604b      	str	r3, [r1, #4]
 800ab5a:	e01a      	b.n	800ab92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ab5c:	4b29      	ldr	r3, [pc, #164]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a28      	ldr	r2, [pc, #160]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800ab62:	f023 0301 	bic.w	r3, r3, #1
 800ab66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800ab68:	f7fb fc40 	bl	80063ec <HAL_GetTick>
 800ab6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ab6e:	e008      	b.n	800ab82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ab70:	f7fb fc3c 	bl	80063ec <HAL_GetTick>
 800ab74:	4602      	mov	r2, r0
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d901      	bls.n	800ab82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e314      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800ab82:	4b20      	ldr	r3, [pc, #128]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f003 0302 	and.w	r3, r3, #2
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1f0      	bne.n	800ab70 <HAL_RCC_OscConfig+0x1dc>
 800ab8e:	e000      	b.n	800ab92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ab90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f003 0301 	and.w	r3, r3, #1
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d073      	beq.n	800ac86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	2b08      	cmp	r3, #8
 800aba2:	d005      	beq.n	800abb0 <HAL_RCC_OscConfig+0x21c>
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	2b0c      	cmp	r3, #12
 800aba8:	d10e      	bne.n	800abc8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	2b03      	cmp	r3, #3
 800abae:	d10b      	bne.n	800abc8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800abb0:	4b14      	ldr	r3, [pc, #80]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d063      	beq.n	800ac84 <HAL_RCC_OscConfig+0x2f0>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d15f      	bne.n	800ac84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e2f1      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abd0:	d106      	bne.n	800abe0 <HAL_RCC_OscConfig+0x24c>
 800abd2:	4b0c      	ldr	r3, [pc, #48]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a0b      	ldr	r2, [pc, #44]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800abd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abdc:	6013      	str	r3, [r2, #0]
 800abde:	e025      	b.n	800ac2c <HAL_RCC_OscConfig+0x298>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abe8:	d114      	bne.n	800ac14 <HAL_RCC_OscConfig+0x280>
 800abea:	4b06      	ldr	r3, [pc, #24]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a05      	ldr	r2, [pc, #20]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800abf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800abf4:	6013      	str	r3, [r2, #0]
 800abf6:	4b03      	ldr	r3, [pc, #12]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	4a02      	ldr	r2, [pc, #8]	; (800ac04 <HAL_RCC_OscConfig+0x270>)
 800abfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac00:	6013      	str	r3, [r2, #0]
 800ac02:	e013      	b.n	800ac2c <HAL_RCC_OscConfig+0x298>
 800ac04:	40021000 	.word	0x40021000
 800ac08:	0801cca0 	.word	0x0801cca0
 800ac0c:	20000024 	.word	0x20000024
 800ac10:	20000028 	.word	0x20000028
 800ac14:	4ba0      	ldr	r3, [pc, #640]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a9f      	ldr	r2, [pc, #636]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ac1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac1e:	6013      	str	r3, [r2, #0]
 800ac20:	4b9d      	ldr	r3, [pc, #628]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a9c      	ldr	r2, [pc, #624]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ac26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	685b      	ldr	r3, [r3, #4]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d013      	beq.n	800ac5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac34:	f7fb fbda 	bl	80063ec <HAL_GetTick>
 800ac38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ac3a:	e008      	b.n	800ac4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac3c:	f7fb fbd6 	bl	80063ec <HAL_GetTick>
 800ac40:	4602      	mov	r2, r0
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	2b64      	cmp	r3, #100	; 0x64
 800ac48:	d901      	bls.n	800ac4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800ac4a:	2303      	movs	r3, #3
 800ac4c:	e2ae      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ac4e:	4b92      	ldr	r3, [pc, #584]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d0f0      	beq.n	800ac3c <HAL_RCC_OscConfig+0x2a8>
 800ac5a:	e014      	b.n	800ac86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac5c:	f7fb fbc6 	bl	80063ec <HAL_GetTick>
 800ac60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ac62:	e008      	b.n	800ac76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac64:	f7fb fbc2 	bl	80063ec <HAL_GetTick>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	2b64      	cmp	r3, #100	; 0x64
 800ac70:	d901      	bls.n	800ac76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e29a      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ac76:	4b88      	ldr	r3, [pc, #544]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1f0      	bne.n	800ac64 <HAL_RCC_OscConfig+0x2d0>
 800ac82:	e000      	b.n	800ac86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0302 	and.w	r3, r3, #2
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d060      	beq.n	800ad54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	2b04      	cmp	r3, #4
 800ac96:	d005      	beq.n	800aca4 <HAL_RCC_OscConfig+0x310>
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	2b0c      	cmp	r3, #12
 800ac9c:	d119      	bne.n	800acd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d116      	bne.n	800acd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aca4:	4b7c      	ldr	r3, [pc, #496]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acac:	2b00      	cmp	r3, #0
 800acae:	d005      	beq.n	800acbc <HAL_RCC_OscConfig+0x328>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d101      	bne.n	800acbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	e277      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acbc:	4b76      	ldr	r3, [pc, #472]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	061b      	lsls	r3, r3, #24
 800acca:	4973      	ldr	r1, [pc, #460]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800accc:	4313      	orrs	r3, r2
 800acce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800acd0:	e040      	b.n	800ad54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d023      	beq.n	800ad22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800acda:	4b6f      	ldr	r3, [pc, #444]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a6e      	ldr	r2, [pc, #440]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ace0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ace4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ace6:	f7fb fb81 	bl	80063ec <HAL_GetTick>
 800acea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800acec:	e008      	b.n	800ad00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acee:	f7fb fb7d 	bl	80063ec <HAL_GetTick>
 800acf2:	4602      	mov	r2, r0
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	d901      	bls.n	800ad00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800acfc:	2303      	movs	r3, #3
 800acfe:	e255      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad00:	4b65      	ldr	r3, [pc, #404]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d0f0      	beq.n	800acee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad0c:	4b62      	ldr	r3, [pc, #392]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	061b      	lsls	r3, r3, #24
 800ad1a:	495f      	ldr	r1, [pc, #380]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	604b      	str	r3, [r1, #4]
 800ad20:	e018      	b.n	800ad54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ad22:	4b5d      	ldr	r3, [pc, #372]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a5c      	ldr	r2, [pc, #368]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ad28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad2e:	f7fb fb5d 	bl	80063ec <HAL_GetTick>
 800ad32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ad34:	e008      	b.n	800ad48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad36:	f7fb fb59 	bl	80063ec <HAL_GetTick>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d901      	bls.n	800ad48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800ad44:	2303      	movs	r3, #3
 800ad46:	e231      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ad48:	4b53      	ldr	r3, [pc, #332]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1f0      	bne.n	800ad36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 0308 	and.w	r3, r3, #8
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d03c      	beq.n	800adda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	695b      	ldr	r3, [r3, #20]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d01c      	beq.n	800ada2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad68:	4b4b      	ldr	r3, [pc, #300]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ad6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad6e:	4a4a      	ldr	r2, [pc, #296]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ad70:	f043 0301 	orr.w	r3, r3, #1
 800ad74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad78:	f7fb fb38 	bl	80063ec <HAL_GetTick>
 800ad7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ad7e:	e008      	b.n	800ad92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ad80:	f7fb fb34 	bl	80063ec <HAL_GetTick>
 800ad84:	4602      	mov	r2, r0
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	d901      	bls.n	800ad92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e20c      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ad92:	4b41      	ldr	r3, [pc, #260]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ad94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad98:	f003 0302 	and.w	r3, r3, #2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d0ef      	beq.n	800ad80 <HAL_RCC_OscConfig+0x3ec>
 800ada0:	e01b      	b.n	800adda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ada2:	4b3d      	ldr	r3, [pc, #244]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ada4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ada8:	4a3b      	ldr	r2, [pc, #236]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800adaa:	f023 0301 	bic.w	r3, r3, #1
 800adae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adb2:	f7fb fb1b 	bl	80063ec <HAL_GetTick>
 800adb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800adb8:	e008      	b.n	800adcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adba:	f7fb fb17 	bl	80063ec <HAL_GetTick>
 800adbe:	4602      	mov	r2, r0
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	1ad3      	subs	r3, r2, r3
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	d901      	bls.n	800adcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e1ef      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800adcc:	4b32      	ldr	r3, [pc, #200]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800adce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800add2:	f003 0302 	and.w	r3, r3, #2
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1ef      	bne.n	800adba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 0304 	and.w	r3, r3, #4
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f000 80a6 	beq.w	800af34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ade8:	2300      	movs	r3, #0
 800adea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800adec:	4b2a      	ldr	r3, [pc, #168]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800adee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10d      	bne.n	800ae14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800adf8:	4b27      	ldr	r3, [pc, #156]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800adfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adfc:	4a26      	ldr	r2, [pc, #152]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800adfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae02:	6593      	str	r3, [r2, #88]	; 0x58
 800ae04:	4b24      	ldr	r3, [pc, #144]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ae06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae0c:	60bb      	str	r3, [r7, #8]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae10:	2301      	movs	r3, #1
 800ae12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae14:	4b21      	ldr	r3, [pc, #132]	; (800ae9c <HAL_RCC_OscConfig+0x508>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d118      	bne.n	800ae52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae20:	4b1e      	ldr	r3, [pc, #120]	; (800ae9c <HAL_RCC_OscConfig+0x508>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a1d      	ldr	r2, [pc, #116]	; (800ae9c <HAL_RCC_OscConfig+0x508>)
 800ae26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ae2c:	f7fb fade 	bl	80063ec <HAL_GetTick>
 800ae30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae32:	e008      	b.n	800ae46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae34:	f7fb fada 	bl	80063ec <HAL_GetTick>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d901      	bls.n	800ae46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800ae42:	2303      	movs	r3, #3
 800ae44:	e1b2      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ae46:	4b15      	ldr	r3, [pc, #84]	; (800ae9c <HAL_RCC_OscConfig+0x508>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d0f0      	beq.n	800ae34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d108      	bne.n	800ae6c <HAL_RCC_OscConfig+0x4d8>
 800ae5a:	4b0f      	ldr	r3, [pc, #60]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ae5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae60:	4a0d      	ldr	r2, [pc, #52]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ae62:	f043 0301 	orr.w	r3, r3, #1
 800ae66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ae6a:	e029      	b.n	800aec0 <HAL_RCC_OscConfig+0x52c>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	2b05      	cmp	r3, #5
 800ae72:	d115      	bne.n	800aea0 <HAL_RCC_OscConfig+0x50c>
 800ae74:	4b08      	ldr	r3, [pc, #32]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ae76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae7a:	4a07      	ldr	r2, [pc, #28]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ae7c:	f043 0304 	orr.w	r3, r3, #4
 800ae80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ae84:	4b04      	ldr	r3, [pc, #16]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ae86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae8a:	4a03      	ldr	r2, [pc, #12]	; (800ae98 <HAL_RCC_OscConfig+0x504>)
 800ae8c:	f043 0301 	orr.w	r3, r3, #1
 800ae90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ae94:	e014      	b.n	800aec0 <HAL_RCC_OscConfig+0x52c>
 800ae96:	bf00      	nop
 800ae98:	40021000 	.word	0x40021000
 800ae9c:	40007000 	.word	0x40007000
 800aea0:	4b9a      	ldr	r3, [pc, #616]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800aea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aea6:	4a99      	ldr	r2, [pc, #612]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800aea8:	f023 0301 	bic.w	r3, r3, #1
 800aeac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aeb0:	4b96      	ldr	r3, [pc, #600]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800aeb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeb6:	4a95      	ldr	r2, [pc, #596]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800aeb8:	f023 0304 	bic.w	r3, r3, #4
 800aebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d016      	beq.n	800aef6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aec8:	f7fb fa90 	bl	80063ec <HAL_GetTick>
 800aecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aece:	e00a      	b.n	800aee6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aed0:	f7fb fa8c 	bl	80063ec <HAL_GetTick>
 800aed4:	4602      	mov	r2, r0
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	1ad3      	subs	r3, r2, r3
 800aeda:	f241 3288 	movw	r2, #5000	; 0x1388
 800aede:	4293      	cmp	r3, r2
 800aee0:	d901      	bls.n	800aee6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800aee2:	2303      	movs	r3, #3
 800aee4:	e162      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aee6:	4b89      	ldr	r3, [pc, #548]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800aee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeec:	f003 0302 	and.w	r3, r3, #2
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d0ed      	beq.n	800aed0 <HAL_RCC_OscConfig+0x53c>
 800aef4:	e015      	b.n	800af22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aef6:	f7fb fa79 	bl	80063ec <HAL_GetTick>
 800aefa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aefc:	e00a      	b.n	800af14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aefe:	f7fb fa75 	bl	80063ec <HAL_GetTick>
 800af02:	4602      	mov	r2, r0
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	f241 3288 	movw	r2, #5000	; 0x1388
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d901      	bls.n	800af14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800af10:	2303      	movs	r3, #3
 800af12:	e14b      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800af14:	4b7d      	ldr	r3, [pc, #500]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800af16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af1a:	f003 0302 	and.w	r3, r3, #2
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d1ed      	bne.n	800aefe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800af22:	7ffb      	ldrb	r3, [r7, #31]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d105      	bne.n	800af34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af28:	4b78      	ldr	r3, [pc, #480]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800af2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af2c:	4a77      	ldr	r2, [pc, #476]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800af2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af32:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f003 0320 	and.w	r3, r3, #32
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d03c      	beq.n	800afba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af44:	2b00      	cmp	r3, #0
 800af46:	d01c      	beq.n	800af82 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800af48:	4b70      	ldr	r3, [pc, #448]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800af4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af4e:	4a6f      	ldr	r2, [pc, #444]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800af50:	f043 0301 	orr.w	r3, r3, #1
 800af54:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af58:	f7fb fa48 	bl	80063ec <HAL_GetTick>
 800af5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800af5e:	e008      	b.n	800af72 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800af60:	f7fb fa44 	bl	80063ec <HAL_GetTick>
 800af64:	4602      	mov	r2, r0
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	1ad3      	subs	r3, r2, r3
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d901      	bls.n	800af72 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800af6e:	2303      	movs	r3, #3
 800af70:	e11c      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800af72:	4b66      	ldr	r3, [pc, #408]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800af74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af78:	f003 0302 	and.w	r3, r3, #2
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d0ef      	beq.n	800af60 <HAL_RCC_OscConfig+0x5cc>
 800af80:	e01b      	b.n	800afba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800af82:	4b62      	ldr	r3, [pc, #392]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800af84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800af88:	4a60      	ldr	r2, [pc, #384]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800af8a:	f023 0301 	bic.w	r3, r3, #1
 800af8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af92:	f7fb fa2b 	bl	80063ec <HAL_GetTick>
 800af96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800af98:	e008      	b.n	800afac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800af9a:	f7fb fa27 	bl	80063ec <HAL_GetTick>
 800af9e:	4602      	mov	r2, r0
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	1ad3      	subs	r3, r2, r3
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	d901      	bls.n	800afac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e0ff      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800afac:	4b57      	ldr	r3, [pc, #348]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800afae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800afb2:	f003 0302 	and.w	r3, r3, #2
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1ef      	bne.n	800af9a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f000 80f3 	beq.w	800b1aa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc8:	2b02      	cmp	r3, #2
 800afca:	f040 80c9 	bne.w	800b160 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800afce:	4b4f      	ldr	r3, [pc, #316]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	f003 0203 	and.w	r2, r3, #3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afde:	429a      	cmp	r2, r3
 800afe0:	d12c      	bne.n	800b03c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afec:	3b01      	subs	r3, #1
 800afee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d123      	bne.n	800b03c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800affe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b000:	429a      	cmp	r2, r3
 800b002:	d11b      	bne.n	800b03c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b010:	429a      	cmp	r2, r3
 800b012:	d113      	bne.n	800b03c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b01e:	085b      	lsrs	r3, r3, #1
 800b020:	3b01      	subs	r3, #1
 800b022:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b024:	429a      	cmp	r2, r3
 800b026:	d109      	bne.n	800b03c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b032:	085b      	lsrs	r3, r3, #1
 800b034:	3b01      	subs	r3, #1
 800b036:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b038:	429a      	cmp	r2, r3
 800b03a:	d06b      	beq.n	800b114 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	2b0c      	cmp	r3, #12
 800b040:	d062      	beq.n	800b108 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b042:	4b32      	ldr	r3, [pc, #200]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d001      	beq.n	800b052 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	e0ac      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b052:	4b2e      	ldr	r3, [pc, #184]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a2d      	ldr	r2, [pc, #180]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800b058:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b05c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b05e:	f7fb f9c5 	bl	80063ec <HAL_GetTick>
 800b062:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b064:	e008      	b.n	800b078 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b066:	f7fb f9c1 	bl	80063ec <HAL_GetTick>
 800b06a:	4602      	mov	r2, r0
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	1ad3      	subs	r3, r2, r3
 800b070:	2b02      	cmp	r3, #2
 800b072:	d901      	bls.n	800b078 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800b074:	2303      	movs	r3, #3
 800b076:	e099      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b078:	4b24      	ldr	r3, [pc, #144]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1f0      	bne.n	800b066 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b084:	4b21      	ldr	r3, [pc, #132]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800b086:	68da      	ldr	r2, [r3, #12]
 800b088:	4b21      	ldr	r3, [pc, #132]	; (800b110 <HAL_RCC_OscConfig+0x77c>)
 800b08a:	4013      	ands	r3, r2
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b094:	3a01      	subs	r2, #1
 800b096:	0112      	lsls	r2, r2, #4
 800b098:	4311      	orrs	r1, r2
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b09e:	0212      	lsls	r2, r2, #8
 800b0a0:	4311      	orrs	r1, r2
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b0a6:	0852      	lsrs	r2, r2, #1
 800b0a8:	3a01      	subs	r2, #1
 800b0aa:	0552      	lsls	r2, r2, #21
 800b0ac:	4311      	orrs	r1, r2
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b0b2:	0852      	lsrs	r2, r2, #1
 800b0b4:	3a01      	subs	r2, #1
 800b0b6:	0652      	lsls	r2, r2, #25
 800b0b8:	4311      	orrs	r1, r2
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b0be:	06d2      	lsls	r2, r2, #27
 800b0c0:	430a      	orrs	r2, r1
 800b0c2:	4912      	ldr	r1, [pc, #72]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b0c8:	4b10      	ldr	r3, [pc, #64]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a0f      	ldr	r2, [pc, #60]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800b0ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b0d4:	4b0d      	ldr	r3, [pc, #52]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	4a0c      	ldr	r2, [pc, #48]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800b0da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b0e0:	f7fb f984 	bl	80063ec <HAL_GetTick>
 800b0e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b0e6:	e008      	b.n	800b0fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0e8:	f7fb f980 	bl	80063ec <HAL_GetTick>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d901      	bls.n	800b0fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	e058      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b0fa:	4b04      	ldr	r3, [pc, #16]	; (800b10c <HAL_RCC_OscConfig+0x778>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b102:	2b00      	cmp	r3, #0
 800b104:	d0f0      	beq.n	800b0e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b106:	e050      	b.n	800b1aa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	e04f      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
 800b10c:	40021000 	.word	0x40021000
 800b110:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b114:	4b27      	ldr	r3, [pc, #156]	; (800b1b4 <HAL_RCC_OscConfig+0x820>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d144      	bne.n	800b1aa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b120:	4b24      	ldr	r3, [pc, #144]	; (800b1b4 <HAL_RCC_OscConfig+0x820>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a23      	ldr	r2, [pc, #140]	; (800b1b4 <HAL_RCC_OscConfig+0x820>)
 800b126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b12a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b12c:	4b21      	ldr	r3, [pc, #132]	; (800b1b4 <HAL_RCC_OscConfig+0x820>)
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	4a20      	ldr	r2, [pc, #128]	; (800b1b4 <HAL_RCC_OscConfig+0x820>)
 800b132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b136:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b138:	f7fb f958 	bl	80063ec <HAL_GetTick>
 800b13c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b13e:	e008      	b.n	800b152 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b140:	f7fb f954 	bl	80063ec <HAL_GetTick>
 800b144:	4602      	mov	r2, r0
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d901      	bls.n	800b152 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800b14e:	2303      	movs	r3, #3
 800b150:	e02c      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b152:	4b18      	ldr	r3, [pc, #96]	; (800b1b4 <HAL_RCC_OscConfig+0x820>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d0f0      	beq.n	800b140 <HAL_RCC_OscConfig+0x7ac>
 800b15e:	e024      	b.n	800b1aa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	2b0c      	cmp	r3, #12
 800b164:	d01f      	beq.n	800b1a6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b166:	4b13      	ldr	r3, [pc, #76]	; (800b1b4 <HAL_RCC_OscConfig+0x820>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a12      	ldr	r2, [pc, #72]	; (800b1b4 <HAL_RCC_OscConfig+0x820>)
 800b16c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b172:	f7fb f93b 	bl	80063ec <HAL_GetTick>
 800b176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b178:	e008      	b.n	800b18c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b17a:	f7fb f937 	bl	80063ec <HAL_GetTick>
 800b17e:	4602      	mov	r2, r0
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	2b02      	cmp	r3, #2
 800b186:	d901      	bls.n	800b18c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800b188:	2303      	movs	r3, #3
 800b18a:	e00f      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b18c:	4b09      	ldr	r3, [pc, #36]	; (800b1b4 <HAL_RCC_OscConfig+0x820>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1f0      	bne.n	800b17a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800b198:	4b06      	ldr	r3, [pc, #24]	; (800b1b4 <HAL_RCC_OscConfig+0x820>)
 800b19a:	68da      	ldr	r2, [r3, #12]
 800b19c:	4905      	ldr	r1, [pc, #20]	; (800b1b4 <HAL_RCC_OscConfig+0x820>)
 800b19e:	4b06      	ldr	r3, [pc, #24]	; (800b1b8 <HAL_RCC_OscConfig+0x824>)
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	60cb      	str	r3, [r1, #12]
 800b1a4:	e001      	b.n	800b1aa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e000      	b.n	800b1ac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3720      	adds	r7, #32
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	40021000 	.word	0x40021000
 800b1b8:	feeefffc 	.word	0xfeeefffc

0800b1bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d101      	bne.n	800b1d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e0e7      	b.n	800b3a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b1d0:	4b75      	ldr	r3, [pc, #468]	; (800b3a8 <HAL_RCC_ClockConfig+0x1ec>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 0307 	and.w	r3, r3, #7
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d910      	bls.n	800b200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1de:	4b72      	ldr	r3, [pc, #456]	; (800b3a8 <HAL_RCC_ClockConfig+0x1ec>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f023 0207 	bic.w	r2, r3, #7
 800b1e6:	4970      	ldr	r1, [pc, #448]	; (800b3a8 <HAL_RCC_ClockConfig+0x1ec>)
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1ee:	4b6e      	ldr	r3, [pc, #440]	; (800b3a8 <HAL_RCC_ClockConfig+0x1ec>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 0307 	and.w	r3, r3, #7
 800b1f6:	683a      	ldr	r2, [r7, #0]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d001      	beq.n	800b200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e0cf      	b.n	800b3a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0302 	and.w	r3, r3, #2
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d010      	beq.n	800b22e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	689a      	ldr	r2, [r3, #8]
 800b210:	4b66      	ldr	r3, [pc, #408]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b218:	429a      	cmp	r2, r3
 800b21a:	d908      	bls.n	800b22e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b21c:	4b63      	ldr	r3, [pc, #396]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	4960      	ldr	r1, [pc, #384]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b22a:	4313      	orrs	r3, r2
 800b22c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	2b00      	cmp	r3, #0
 800b238:	d04c      	beq.n	800b2d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	2b03      	cmp	r3, #3
 800b240:	d107      	bne.n	800b252 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b242:	4b5a      	ldr	r3, [pc, #360]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d121      	bne.n	800b292 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	e0a6      	b.n	800b3a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	2b02      	cmp	r3, #2
 800b258:	d107      	bne.n	800b26a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b25a:	4b54      	ldr	r3, [pc, #336]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b262:	2b00      	cmp	r3, #0
 800b264:	d115      	bne.n	800b292 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e09a      	b.n	800b3a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d107      	bne.n	800b282 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b272:	4b4e      	ldr	r3, [pc, #312]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f003 0302 	and.w	r3, r3, #2
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d109      	bne.n	800b292 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	e08e      	b.n	800b3a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b282:	4b4a      	ldr	r3, [pc, #296]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d101      	bne.n	800b292 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800b28e:	2301      	movs	r3, #1
 800b290:	e086      	b.n	800b3a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b292:	4b46      	ldr	r3, [pc, #280]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	f023 0203 	bic.w	r2, r3, #3
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	4943      	ldr	r1, [pc, #268]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2a4:	f7fb f8a2 	bl	80063ec <HAL_GetTick>
 800b2a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2aa:	e00a      	b.n	800b2c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2ac:	f7fb f89e 	bl	80063ec <HAL_GetTick>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	1ad3      	subs	r3, r2, r3
 800b2b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d901      	bls.n	800b2c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800b2be:	2303      	movs	r3, #3
 800b2c0:	e06e      	b.n	800b3a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2c2:	4b3a      	ldr	r3, [pc, #232]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	f003 020c 	and.w	r2, r3, #12
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d1eb      	bne.n	800b2ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 0302 	and.w	r3, r3, #2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d010      	beq.n	800b302 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	689a      	ldr	r2, [r3, #8]
 800b2e4:	4b31      	ldr	r3, [pc, #196]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d208      	bcs.n	800b302 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b2f0:	4b2e      	ldr	r3, [pc, #184]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	492b      	ldr	r1, [pc, #172]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b2fe:	4313      	orrs	r3, r2
 800b300:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b302:	4b29      	ldr	r3, [pc, #164]	; (800b3a8 <HAL_RCC_ClockConfig+0x1ec>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f003 0307 	and.w	r3, r3, #7
 800b30a:	683a      	ldr	r2, [r7, #0]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d210      	bcs.n	800b332 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b310:	4b25      	ldr	r3, [pc, #148]	; (800b3a8 <HAL_RCC_ClockConfig+0x1ec>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f023 0207 	bic.w	r2, r3, #7
 800b318:	4923      	ldr	r1, [pc, #140]	; (800b3a8 <HAL_RCC_ClockConfig+0x1ec>)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	4313      	orrs	r3, r2
 800b31e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b320:	4b21      	ldr	r3, [pc, #132]	; (800b3a8 <HAL_RCC_ClockConfig+0x1ec>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 0307 	and.w	r3, r3, #7
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d001      	beq.n	800b332 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	e036      	b.n	800b3a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 0304 	and.w	r3, r3, #4
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d008      	beq.n	800b350 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b33e:	4b1b      	ldr	r3, [pc, #108]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	4918      	ldr	r1, [pc, #96]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b34c:	4313      	orrs	r3, r2
 800b34e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 0308 	and.w	r3, r3, #8
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d009      	beq.n	800b370 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b35c:	4b13      	ldr	r3, [pc, #76]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	00db      	lsls	r3, r3, #3
 800b36a:	4910      	ldr	r1, [pc, #64]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b36c:	4313      	orrs	r3, r2
 800b36e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b370:	f000 f824 	bl	800b3bc <HAL_RCC_GetSysClockFreq>
 800b374:	4602      	mov	r2, r0
 800b376:	4b0d      	ldr	r3, [pc, #52]	; (800b3ac <HAL_RCC_ClockConfig+0x1f0>)
 800b378:	689b      	ldr	r3, [r3, #8]
 800b37a:	091b      	lsrs	r3, r3, #4
 800b37c:	f003 030f 	and.w	r3, r3, #15
 800b380:	490b      	ldr	r1, [pc, #44]	; (800b3b0 <HAL_RCC_ClockConfig+0x1f4>)
 800b382:	5ccb      	ldrb	r3, [r1, r3]
 800b384:	f003 031f 	and.w	r3, r3, #31
 800b388:	fa22 f303 	lsr.w	r3, r2, r3
 800b38c:	4a09      	ldr	r2, [pc, #36]	; (800b3b4 <HAL_RCC_ClockConfig+0x1f8>)
 800b38e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800b390:	4b09      	ldr	r3, [pc, #36]	; (800b3b8 <HAL_RCC_ClockConfig+0x1fc>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4618      	mov	r0, r3
 800b396:	f7fa ffd9 	bl	800634c <HAL_InitTick>
 800b39a:	4603      	mov	r3, r0
 800b39c:	72fb      	strb	r3, [r7, #11]

  return status;
 800b39e:	7afb      	ldrb	r3, [r7, #11]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	40022000 	.word	0x40022000
 800b3ac:	40021000 	.word	0x40021000
 800b3b0:	0801cca0 	.word	0x0801cca0
 800b3b4:	20000024 	.word	0x20000024
 800b3b8:	20000028 	.word	0x20000028

0800b3bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b089      	sub	sp, #36	; 0x24
 800b3c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	61fb      	str	r3, [r7, #28]
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b3ca:	4b3e      	ldr	r3, [pc, #248]	; (800b4c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	f003 030c 	and.w	r3, r3, #12
 800b3d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b3d4:	4b3b      	ldr	r3, [pc, #236]	; (800b4c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	f003 0303 	and.w	r3, r3, #3
 800b3dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d005      	beq.n	800b3f0 <HAL_RCC_GetSysClockFreq+0x34>
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	2b0c      	cmp	r3, #12
 800b3e8:	d121      	bne.n	800b42e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d11e      	bne.n	800b42e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800b3f0:	4b34      	ldr	r3, [pc, #208]	; (800b4c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 0308 	and.w	r3, r3, #8
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d107      	bne.n	800b40c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800b3fc:	4b31      	ldr	r3, [pc, #196]	; (800b4c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b3fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b402:	0a1b      	lsrs	r3, r3, #8
 800b404:	f003 030f 	and.w	r3, r3, #15
 800b408:	61fb      	str	r3, [r7, #28]
 800b40a:	e005      	b.n	800b418 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800b40c:	4b2d      	ldr	r3, [pc, #180]	; (800b4c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	091b      	lsrs	r3, r3, #4
 800b412:	f003 030f 	and.w	r3, r3, #15
 800b416:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b418:	4a2b      	ldr	r2, [pc, #172]	; (800b4c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b420:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10d      	bne.n	800b444 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b42c:	e00a      	b.n	800b444 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	2b04      	cmp	r3, #4
 800b432:	d102      	bne.n	800b43a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b434:	4b25      	ldr	r3, [pc, #148]	; (800b4cc <HAL_RCC_GetSysClockFreq+0x110>)
 800b436:	61bb      	str	r3, [r7, #24]
 800b438:	e004      	b.n	800b444 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	2b08      	cmp	r3, #8
 800b43e:	d101      	bne.n	800b444 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b440:	4b23      	ldr	r3, [pc, #140]	; (800b4d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800b442:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	2b0c      	cmp	r3, #12
 800b448:	d134      	bne.n	800b4b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b44a:	4b1e      	ldr	r3, [pc, #120]	; (800b4c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	f003 0303 	and.w	r3, r3, #3
 800b452:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	2b02      	cmp	r3, #2
 800b458:	d003      	beq.n	800b462 <HAL_RCC_GetSysClockFreq+0xa6>
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	2b03      	cmp	r3, #3
 800b45e:	d003      	beq.n	800b468 <HAL_RCC_GetSysClockFreq+0xac>
 800b460:	e005      	b.n	800b46e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b462:	4b1a      	ldr	r3, [pc, #104]	; (800b4cc <HAL_RCC_GetSysClockFreq+0x110>)
 800b464:	617b      	str	r3, [r7, #20]
      break;
 800b466:	e005      	b.n	800b474 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b468:	4b19      	ldr	r3, [pc, #100]	; (800b4d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800b46a:	617b      	str	r3, [r7, #20]
      break;
 800b46c:	e002      	b.n	800b474 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	617b      	str	r3, [r7, #20]
      break;
 800b472:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b474:	4b13      	ldr	r3, [pc, #76]	; (800b4c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	091b      	lsrs	r3, r3, #4
 800b47a:	f003 0307 	and.w	r3, r3, #7
 800b47e:	3301      	adds	r3, #1
 800b480:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b482:	4b10      	ldr	r3, [pc, #64]	; (800b4c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	0a1b      	lsrs	r3, r3, #8
 800b488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b48c:	697a      	ldr	r2, [r7, #20]
 800b48e:	fb03 f202 	mul.w	r2, r3, r2
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	fbb2 f3f3 	udiv	r3, r2, r3
 800b498:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b49a:	4b0a      	ldr	r3, [pc, #40]	; (800b4c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	0e5b      	lsrs	r3, r3, #25
 800b4a0:	f003 0303 	and.w	r3, r3, #3
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b4aa:	697a      	ldr	r2, [r7, #20]
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b4b4:	69bb      	ldr	r3, [r7, #24]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3724      	adds	r7, #36	; 0x24
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	40021000 	.word	0x40021000
 800b4c8:	0801ccb8 	.word	0x0801ccb8
 800b4cc:	00f42400 	.word	0x00f42400
 800b4d0:	007a1200 	.word	0x007a1200

0800b4d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b4d8:	4b03      	ldr	r3, [pc, #12]	; (800b4e8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b4da:	681b      	ldr	r3, [r3, #0]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	20000024 	.word	0x20000024

0800b4ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b4f0:	f7ff fff0 	bl	800b4d4 <HAL_RCC_GetHCLKFreq>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	4b06      	ldr	r3, [pc, #24]	; (800b510 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	0a1b      	lsrs	r3, r3, #8
 800b4fc:	f003 0307 	and.w	r3, r3, #7
 800b500:	4904      	ldr	r1, [pc, #16]	; (800b514 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b502:	5ccb      	ldrb	r3, [r1, r3]
 800b504:	f003 031f 	and.w	r3, r3, #31
 800b508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	40021000 	.word	0x40021000
 800b514:	0801ccb0 	.word	0x0801ccb0

0800b518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b51c:	f7ff ffda 	bl	800b4d4 <HAL_RCC_GetHCLKFreq>
 800b520:	4602      	mov	r2, r0
 800b522:	4b06      	ldr	r3, [pc, #24]	; (800b53c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	0adb      	lsrs	r3, r3, #11
 800b528:	f003 0307 	and.w	r3, r3, #7
 800b52c:	4904      	ldr	r1, [pc, #16]	; (800b540 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b52e:	5ccb      	ldrb	r3, [r1, r3]
 800b530:	f003 031f 	and.w	r3, r3, #31
 800b534:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b538:	4618      	mov	r0, r3
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	40021000 	.word	0x40021000
 800b540:	0801ccb0 	.word	0x0801ccb0

0800b544 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b54c:	2300      	movs	r3, #0
 800b54e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b550:	4b2a      	ldr	r3, [pc, #168]	; (800b5fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d003      	beq.n	800b564 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b55c:	f7ff f9a6 	bl	800a8ac <HAL_PWREx_GetVoltageRange>
 800b560:	6178      	str	r0, [r7, #20]
 800b562:	e014      	b.n	800b58e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b564:	4b25      	ldr	r3, [pc, #148]	; (800b5fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b568:	4a24      	ldr	r2, [pc, #144]	; (800b5fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b56a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b56e:	6593      	str	r3, [r2, #88]	; 0x58
 800b570:	4b22      	ldr	r3, [pc, #136]	; (800b5fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b578:	60fb      	str	r3, [r7, #12]
 800b57a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b57c:	f7ff f996 	bl	800a8ac <HAL_PWREx_GetVoltageRange>
 800b580:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b582:	4b1e      	ldr	r3, [pc, #120]	; (800b5fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b586:	4a1d      	ldr	r2, [pc, #116]	; (800b5fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b58c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b594:	d10b      	bne.n	800b5ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b80      	cmp	r3, #128	; 0x80
 800b59a:	d919      	bls.n	800b5d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2ba0      	cmp	r3, #160	; 0xa0
 800b5a0:	d902      	bls.n	800b5a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b5a2:	2302      	movs	r3, #2
 800b5a4:	613b      	str	r3, [r7, #16]
 800b5a6:	e013      	b.n	800b5d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	613b      	str	r3, [r7, #16]
 800b5ac:	e010      	b.n	800b5d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b80      	cmp	r3, #128	; 0x80
 800b5b2:	d902      	bls.n	800b5ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	613b      	str	r3, [r7, #16]
 800b5b8:	e00a      	b.n	800b5d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2b80      	cmp	r3, #128	; 0x80
 800b5be:	d102      	bne.n	800b5c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b5c0:	2302      	movs	r3, #2
 800b5c2:	613b      	str	r3, [r7, #16]
 800b5c4:	e004      	b.n	800b5d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2b70      	cmp	r3, #112	; 0x70
 800b5ca:	d101      	bne.n	800b5d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b5d0:	4b0b      	ldr	r3, [pc, #44]	; (800b600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f023 0207 	bic.w	r2, r3, #7
 800b5d8:	4909      	ldr	r1, [pc, #36]	; (800b600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b5e0:	4b07      	ldr	r3, [pc, #28]	; (800b600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f003 0307 	and.w	r3, r3, #7
 800b5e8:	693a      	ldr	r2, [r7, #16]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d001      	beq.n	800b5f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e000      	b.n	800b5f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3718      	adds	r7, #24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	40021000 	.word	0x40021000
 800b600:	40022000 	.word	0x40022000

0800b604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b60c:	2300      	movs	r3, #0
 800b60e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b610:	2300      	movs	r3, #0
 800b612:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d031      	beq.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b624:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b628:	d01a      	beq.n	800b660 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800b62a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b62e:	d814      	bhi.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b630:	2b00      	cmp	r3, #0
 800b632:	d009      	beq.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b634:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b638:	d10f      	bne.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800b63a:	4b5d      	ldr	r3, [pc, #372]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	4a5c      	ldr	r2, [pc, #368]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b644:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b646:	e00c      	b.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	3304      	adds	r3, #4
 800b64c:	2100      	movs	r1, #0
 800b64e:	4618      	mov	r0, r3
 800b650:	f000 f9ce 	bl	800b9f0 <RCCEx_PLLSAI1_Config>
 800b654:	4603      	mov	r3, r0
 800b656:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b658:	e003      	b.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	74fb      	strb	r3, [r7, #19]
      break;
 800b65e:	e000      	b.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800b660:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b662:	7cfb      	ldrb	r3, [r7, #19]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10b      	bne.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b668:	4b51      	ldr	r3, [pc, #324]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b66a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b66e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b676:	494e      	ldr	r1, [pc, #312]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b678:	4313      	orrs	r3, r2
 800b67a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b67e:	e001      	b.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b680:	7cfb      	ldrb	r3, [r7, #19]
 800b682:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f000 809e 	beq.w	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b692:	2300      	movs	r3, #0
 800b694:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b696:	4b46      	ldr	r3, [pc, #280]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b69a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d101      	bne.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e000      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00d      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6ac:	4b40      	ldr	r3, [pc, #256]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b6ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6b0:	4a3f      	ldr	r2, [pc, #252]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b6b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6b6:	6593      	str	r3, [r2, #88]	; 0x58
 800b6b8:	4b3d      	ldr	r3, [pc, #244]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b6ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6c0:	60bb      	str	r3, [r7, #8]
 800b6c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b6c8:	4b3a      	ldr	r3, [pc, #232]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a39      	ldr	r2, [pc, #228]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b6ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b6d4:	f7fa fe8a 	bl	80063ec <HAL_GetTick>
 800b6d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b6da:	e009      	b.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6dc:	f7fa fe86 	bl	80063ec <HAL_GetTick>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d902      	bls.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	74fb      	strb	r3, [r7, #19]
        break;
 800b6ee:	e005      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b6f0:	4b30      	ldr	r3, [pc, #192]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d0ef      	beq.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800b6fc:	7cfb      	ldrb	r3, [r7, #19]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d15a      	bne.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b702:	4b2b      	ldr	r3, [pc, #172]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b70c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d01e      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b718:	697a      	ldr	r2, [r7, #20]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d019      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b71e:	4b24      	ldr	r3, [pc, #144]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b728:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b72a:	4b21      	ldr	r3, [pc, #132]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b730:	4a1f      	ldr	r2, [pc, #124]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b73a:	4b1d      	ldr	r3, [pc, #116]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b73c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b740:	4a1b      	ldr	r2, [pc, #108]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b74a:	4a19      	ldr	r2, [pc, #100]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	f003 0301 	and.w	r3, r3, #1
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d016      	beq.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b75c:	f7fa fe46 	bl	80063ec <HAL_GetTick>
 800b760:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b762:	e00b      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b764:	f7fa fe42 	bl	80063ec <HAL_GetTick>
 800b768:	4602      	mov	r2, r0
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b772:	4293      	cmp	r3, r2
 800b774:	d902      	bls.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800b776:	2303      	movs	r3, #3
 800b778:	74fb      	strb	r3, [r7, #19]
            break;
 800b77a:	e006      	b.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b77c:	4b0c      	ldr	r3, [pc, #48]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b77e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b782:	f003 0302 	and.w	r3, r3, #2
 800b786:	2b00      	cmp	r3, #0
 800b788:	d0ec      	beq.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800b78a:	7cfb      	ldrb	r3, [r7, #19]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10b      	bne.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b790:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b796:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b79e:	4904      	ldr	r1, [pc, #16]	; (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b7a6:	e009      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b7a8:	7cfb      	ldrb	r3, [r7, #19]
 800b7aa:	74bb      	strb	r3, [r7, #18]
 800b7ac:	e006      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800b7ae:	bf00      	nop
 800b7b0:	40021000 	.word	0x40021000
 800b7b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7b8:	7cfb      	ldrb	r3, [r7, #19]
 800b7ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b7bc:	7c7b      	ldrb	r3, [r7, #17]
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d105      	bne.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7c2:	4b8a      	ldr	r3, [pc, #552]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b7c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7c6:	4a89      	ldr	r2, [pc, #548]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b7c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f003 0301 	and.w	r3, r3, #1
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00a      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b7da:	4b84      	ldr	r3, [pc, #528]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b7dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7e0:	f023 0203 	bic.w	r2, r3, #3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a1b      	ldr	r3, [r3, #32]
 800b7e8:	4980      	ldr	r1, [pc, #512]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f003 0302 	and.w	r3, r3, #2
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00a      	beq.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b7fc:	4b7b      	ldr	r3, [pc, #492]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b7fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b802:	f023 020c 	bic.w	r2, r3, #12
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80a:	4978      	ldr	r1, [pc, #480]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b80c:	4313      	orrs	r3, r2
 800b80e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 0320 	and.w	r3, r3, #32
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00a      	beq.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b81e:	4b73      	ldr	r3, [pc, #460]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b824:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b82c:	496f      	ldr	r1, [pc, #444]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b82e:	4313      	orrs	r3, r2
 800b830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00a      	beq.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b840:	4b6a      	ldr	r3, [pc, #424]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b846:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b84e:	4967      	ldr	r1, [pc, #412]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b850:	4313      	orrs	r3, r2
 800b852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00a      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b862:	4b62      	ldr	r3, [pc, #392]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b868:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b870:	495e      	ldr	r1, [pc, #376]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b872:	4313      	orrs	r3, r2
 800b874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00a      	beq.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b884:	4b59      	ldr	r3, [pc, #356]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b88a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b892:	4956      	ldr	r1, [pc, #344]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b894:	4313      	orrs	r3, r2
 800b896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00a      	beq.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b8a6:	4b51      	ldr	r3, [pc, #324]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b8a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b4:	494d      	ldr	r1, [pc, #308]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d028      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b8c8:	4b48      	ldr	r3, [pc, #288]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b8ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d6:	4945      	ldr	r1, [pc, #276]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8e6:	d106      	bne.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b8e8:	4b40      	ldr	r3, [pc, #256]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	4a3f      	ldr	r2, [pc, #252]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b8ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8f2:	60d3      	str	r3, [r2, #12]
 800b8f4:	e011      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b8fe:	d10c      	bne.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	3304      	adds	r3, #4
 800b904:	2101      	movs	r1, #1
 800b906:	4618      	mov	r0, r3
 800b908:	f000 f872 	bl	800b9f0 <RCCEx_PLLSAI1_Config>
 800b90c:	4603      	mov	r3, r0
 800b90e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b910:	7cfb      	ldrb	r3, [r7, #19]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d001      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800b916:	7cfb      	ldrb	r3, [r7, #19]
 800b918:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b922:	2b00      	cmp	r3, #0
 800b924:	d028      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b926:	4b31      	ldr	r3, [pc, #196]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b92c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b934:	492d      	ldr	r1, [pc, #180]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b936:	4313      	orrs	r3, r2
 800b938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b940:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b944:	d106      	bne.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b946:	4b29      	ldr	r3, [pc, #164]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	4a28      	ldr	r2, [pc, #160]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b94c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b950:	60d3      	str	r3, [r2, #12]
 800b952:	e011      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b95c:	d10c      	bne.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	3304      	adds	r3, #4
 800b962:	2101      	movs	r1, #1
 800b964:	4618      	mov	r0, r3
 800b966:	f000 f843 	bl	800b9f0 <RCCEx_PLLSAI1_Config>
 800b96a:	4603      	mov	r3, r0
 800b96c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b96e:	7cfb      	ldrb	r3, [r7, #19]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800b974:	7cfb      	ldrb	r3, [r7, #19]
 800b976:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b980:	2b00      	cmp	r3, #0
 800b982:	d01c      	beq.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b984:	4b19      	ldr	r3, [pc, #100]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b98a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b992:	4916      	ldr	r1, [pc, #88]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b994:	4313      	orrs	r3, r2
 800b996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b99e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9a2:	d10c      	bne.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	3304      	adds	r3, #4
 800b9a8:	2102      	movs	r1, #2
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f000 f820 	bl	800b9f0 <RCCEx_PLLSAI1_Config>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b9b4:	7cfb      	ldrb	r3, [r7, #19]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800b9ba:	7cfb      	ldrb	r3, [r7, #19]
 800b9bc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00a      	beq.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b9ca:	4b08      	ldr	r3, [pc, #32]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b9cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9d0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9d8:	4904      	ldr	r1, [pc, #16]	; (800b9ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b9e0:	7cbb      	ldrb	r3, [r7, #18]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3718      	adds	r7, #24
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	40021000 	.word	0x40021000

0800b9f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b9fe:	4b74      	ldr	r3, [pc, #464]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	f003 0303 	and.w	r3, r3, #3
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d018      	beq.n	800ba3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ba0a:	4b71      	ldr	r3, [pc, #452]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	f003 0203 	and.w	r2, r3, #3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d10d      	bne.n	800ba36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
       ||
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d009      	beq.n	800ba36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800ba22:	4b6b      	ldr	r3, [pc, #428]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	091b      	lsrs	r3, r3, #4
 800ba28:	f003 0307 	and.w	r3, r3, #7
 800ba2c:	1c5a      	adds	r2, r3, #1
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
       ||
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d047      	beq.n	800bac6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800ba36:	2301      	movs	r3, #1
 800ba38:	73fb      	strb	r3, [r7, #15]
 800ba3a:	e044      	b.n	800bac6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b03      	cmp	r3, #3
 800ba42:	d018      	beq.n	800ba76 <RCCEx_PLLSAI1_Config+0x86>
 800ba44:	2b03      	cmp	r3, #3
 800ba46:	d825      	bhi.n	800ba94 <RCCEx_PLLSAI1_Config+0xa4>
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d002      	beq.n	800ba52 <RCCEx_PLLSAI1_Config+0x62>
 800ba4c:	2b02      	cmp	r3, #2
 800ba4e:	d009      	beq.n	800ba64 <RCCEx_PLLSAI1_Config+0x74>
 800ba50:	e020      	b.n	800ba94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ba52:	4b5f      	ldr	r3, [pc, #380]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f003 0302 	and.w	r3, r3, #2
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d11d      	bne.n	800ba9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba62:	e01a      	b.n	800ba9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ba64:	4b5a      	ldr	r3, [pc, #360]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d116      	bne.n	800ba9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba74:	e013      	b.n	800ba9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ba76:	4b56      	ldr	r3, [pc, #344]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d10f      	bne.n	800baa2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ba82:	4b53      	ldr	r3, [pc, #332]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d109      	bne.n	800baa2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba92:	e006      	b.n	800baa2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ba94:	2301      	movs	r3, #1
 800ba96:	73fb      	strb	r3, [r7, #15]
      break;
 800ba98:	e004      	b.n	800baa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ba9a:	bf00      	nop
 800ba9c:	e002      	b.n	800baa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ba9e:	bf00      	nop
 800baa0:	e000      	b.n	800baa4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800baa2:	bf00      	nop
    }

    if(status == HAL_OK)
 800baa4:	7bfb      	ldrb	r3, [r7, #15]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10d      	bne.n	800bac6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800baaa:	4b49      	ldr	r3, [pc, #292]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6819      	ldr	r1, [r3, #0]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	685b      	ldr	r3, [r3, #4]
 800baba:	3b01      	subs	r3, #1
 800babc:	011b      	lsls	r3, r3, #4
 800babe:	430b      	orrs	r3, r1
 800bac0:	4943      	ldr	r1, [pc, #268]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800bac2:	4313      	orrs	r3, r2
 800bac4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d17c      	bne.n	800bbc6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800bacc:	4b40      	ldr	r3, [pc, #256]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4a3f      	ldr	r2, [pc, #252]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800bad2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bad6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bad8:	f7fa fc88 	bl	80063ec <HAL_GetTick>
 800badc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800bade:	e009      	b.n	800baf4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bae0:	f7fa fc84 	bl	80063ec <HAL_GetTick>
 800bae4:	4602      	mov	r2, r0
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	2b02      	cmp	r3, #2
 800baec:	d902      	bls.n	800baf4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800baee:	2303      	movs	r3, #3
 800baf0:	73fb      	strb	r3, [r7, #15]
        break;
 800baf2:	e005      	b.n	800bb00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800baf4:	4b36      	ldr	r3, [pc, #216]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1ef      	bne.n	800bae0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d15f      	bne.n	800bbc6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d110      	bne.n	800bb2e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bb0c:	4b30      	ldr	r3, [pc, #192]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800bb14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	6892      	ldr	r2, [r2, #8]
 800bb1c:	0211      	lsls	r1, r2, #8
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	68d2      	ldr	r2, [r2, #12]
 800bb22:	06d2      	lsls	r2, r2, #27
 800bb24:	430a      	orrs	r2, r1
 800bb26:	492a      	ldr	r1, [pc, #168]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	610b      	str	r3, [r1, #16]
 800bb2c:	e027      	b.n	800bb7e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d112      	bne.n	800bb5a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bb34:	4b26      	ldr	r3, [pc, #152]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800bb3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	6892      	ldr	r2, [r2, #8]
 800bb44:	0211      	lsls	r1, r2, #8
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	6912      	ldr	r2, [r2, #16]
 800bb4a:	0852      	lsrs	r2, r2, #1
 800bb4c:	3a01      	subs	r2, #1
 800bb4e:	0552      	lsls	r2, r2, #21
 800bb50:	430a      	orrs	r2, r1
 800bb52:	491f      	ldr	r1, [pc, #124]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb54:	4313      	orrs	r3, r2
 800bb56:	610b      	str	r3, [r1, #16]
 800bb58:	e011      	b.n	800bb7e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800bb5a:	4b1d      	ldr	r3, [pc, #116]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800bb62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	6892      	ldr	r2, [r2, #8]
 800bb6a:	0211      	lsls	r1, r2, #8
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	6952      	ldr	r2, [r2, #20]
 800bb70:	0852      	lsrs	r2, r2, #1
 800bb72:	3a01      	subs	r2, #1
 800bb74:	0652      	lsls	r2, r2, #25
 800bb76:	430a      	orrs	r2, r1
 800bb78:	4915      	ldr	r1, [pc, #84]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800bb7e:	4b14      	ldr	r3, [pc, #80]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a13      	ldr	r2, [pc, #76]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800bb84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bb88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb8a:	f7fa fc2f 	bl	80063ec <HAL_GetTick>
 800bb8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bb90:	e009      	b.n	800bba6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb92:	f7fa fc2b 	bl	80063ec <HAL_GetTick>
 800bb96:	4602      	mov	r2, r0
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	1ad3      	subs	r3, r2, r3
 800bb9c:	2b02      	cmp	r3, #2
 800bb9e:	d902      	bls.n	800bba6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800bba0:	2303      	movs	r3, #3
 800bba2:	73fb      	strb	r3, [r7, #15]
          break;
 800bba4:	e005      	b.n	800bbb2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800bba6:	4b0a      	ldr	r3, [pc, #40]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d0ef      	beq.n	800bb92 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d106      	bne.n	800bbc6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800bbb8:	4b05      	ldr	r3, [pc, #20]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800bbba:	691a      	ldr	r2, [r3, #16]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	4903      	ldr	r1, [pc, #12]	; (800bbd0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800bbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	40021000 	.word	0x40021000

0800bbd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	e095      	b.n	800bd12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d108      	bne.n	800bc00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbf6:	d009      	beq.n	800bc0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	61da      	str	r2, [r3, #28]
 800bbfe:	e005      	b.n	800bc0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d106      	bne.n	800bc2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7f6 fc10 	bl	800244c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2202      	movs	r2, #2
 800bc30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bc4c:	d902      	bls.n	800bc54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60fb      	str	r3, [r7, #12]
 800bc52:	e002      	b.n	800bc5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bc54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bc62:	d007      	beq.n	800bc74 <HAL_SPI_Init+0xa0>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bc6c:	d002      	beq.n	800bc74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800bc84:	431a      	orrs	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	f003 0302 	and.w	r3, r3, #2
 800bc8e:	431a      	orrs	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	695b      	ldr	r3, [r3, #20]
 800bc94:	f003 0301 	and.w	r3, r3, #1
 800bc98:	431a      	orrs	r2, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	699b      	ldr	r3, [r3, #24]
 800bc9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bca2:	431a      	orrs	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	69db      	ldr	r3, [r3, #28]
 800bca8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bcac:	431a      	orrs	r2, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a1b      	ldr	r3, [r3, #32]
 800bcb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcb6:	ea42 0103 	orr.w	r1, r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	430a      	orrs	r2, r1
 800bcc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	699b      	ldr	r3, [r3, #24]
 800bcce:	0c1b      	lsrs	r3, r3, #16
 800bcd0:	f003 0204 	and.w	r2, r3, #4
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd8:	f003 0310 	and.w	r3, r3, #16
 800bcdc:	431a      	orrs	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce2:	f003 0308 	and.w	r3, r3, #8
 800bce6:	431a      	orrs	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800bcf0:	ea42 0103 	orr.w	r1, r2, r3
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	430a      	orrs	r2, r1
 800bd00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2200      	movs	r2, #0
 800bd06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3710      	adds	r7, #16
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
	...

0800bd1c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	4613      	mov	r3, r2
 800bd28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d101      	bne.n	800bd3c <HAL_SPI_Transmit_DMA+0x20>
 800bd38:	2302      	movs	r3, #2
 800bd3a:	e0d4      	b.n	800bee6 <HAL_SPI_Transmit_DMA+0x1ca>
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d002      	beq.n	800bd56 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800bd50:	2302      	movs	r3, #2
 800bd52:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bd54:	e0c2      	b.n	800bedc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d002      	beq.n	800bd62 <HAL_SPI_Transmit_DMA+0x46>
 800bd5c:	88fb      	ldrh	r3, [r7, #6]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d102      	bne.n	800bd68 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bd66:	e0b9      	b.n	800bedc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2203      	movs	r2, #3
 800bd6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2200      	movs	r2, #0
 800bd74:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	68ba      	ldr	r2, [r7, #8]
 800bd7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	88fa      	ldrh	r2, [r7, #6]
 800bd80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	88fa      	ldrh	r2, [r7, #6]
 800bd86:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2200      	movs	r2, #0
 800bd98:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bdb2:	d10f      	bne.n	800bdd4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bdd2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd8:	4a45      	ldr	r2, [pc, #276]	; (800bef0 <HAL_SPI_Transmit_DMA+0x1d4>)
 800bdda:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bde0:	4a44      	ldr	r2, [pc, #272]	; (800bef4 <HAL_SPI_Transmit_DMA+0x1d8>)
 800bde2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bde8:	4a43      	ldr	r2, [pc, #268]	; (800bef8 <HAL_SPI_Transmit_DMA+0x1dc>)
 800bdea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	685a      	ldr	r2, [r3, #4]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800be02:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800be0c:	d82d      	bhi.n	800be6a <HAL_SPI_Transmit_DMA+0x14e>
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be12:	699b      	ldr	r3, [r3, #24]
 800be14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be18:	d127      	bne.n	800be6a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be1e:	b29b      	uxth	r3, r3
 800be20:	f003 0301 	and.w	r3, r3, #1
 800be24:	2b00      	cmp	r3, #0
 800be26:	d10f      	bne.n	800be48 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	685a      	ldr	r2, [r3, #4]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800be36:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	085b      	lsrs	r3, r3, #1
 800be40:	b29a      	uxth	r2, r3
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	87da      	strh	r2, [r3, #62]	; 0x3e
 800be46:	e010      	b.n	800be6a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be56:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	085b      	lsrs	r3, r3, #1
 800be60:	b29b      	uxth	r3, r3
 800be62:	3301      	adds	r3, #1
 800be64:	b29a      	uxth	r2, r3
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be72:	4619      	mov	r1, r3
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	330c      	adds	r3, #12
 800be7a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800be80:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800be82:	f7fb ff4d 	bl	8007d20 <HAL_DMA_Start_IT>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d008      	beq.n	800be9e <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be90:	f043 0210 	orr.w	r2, r3, #16
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	75fb      	strb	r3, [r7, #23]

    goto error;
 800be9c:	e01e      	b.n	800bedc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bea8:	2b40      	cmp	r3, #64	; 0x40
 800beaa:	d007      	beq.n	800bebc <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	681a      	ldr	r2, [r3, #0]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800beba:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	685a      	ldr	r2, [r3, #4]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f042 0220 	orr.w	r2, r2, #32
 800beca:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	685a      	ldr	r2, [r3, #4]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f042 0202 	orr.w	r2, r2, #2
 800beda:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800bee4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3718      	adds	r7, #24
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	0800c933 	.word	0x0800c933
 800bef4:	0800c755 	.word	0x0800c755
 800bef8:	0800c987 	.word	0x0800c987

0800befc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b086      	sub	sp, #24
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	60f8      	str	r0, [r7, #12]
 800bf04:	60b9      	str	r1, [r7, #8]
 800bf06:	4613      	mov	r3, r2
 800bf08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d002      	beq.n	800bf20 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800bf1a:	2302      	movs	r3, #2
 800bf1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bf1e:	e0fe      	b.n	800c11e <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d110      	bne.n	800bf4a <HAL_SPI_Receive_DMA+0x4e>
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf30:	d10b      	bne.n	800bf4a <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2204      	movs	r2, #4
 800bf36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800bf3a:	88fb      	ldrh	r3, [r7, #6]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	68b9      	ldr	r1, [r7, #8]
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f000 f8fb 	bl	800c13c <HAL_SPI_TransmitReceive_DMA>
 800bf46:	4603      	mov	r3, r0
 800bf48:	e0ee      	b.n	800c128 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d101      	bne.n	800bf58 <HAL_SPI_Receive_DMA+0x5c>
 800bf54:	2302      	movs	r3, #2
 800bf56:	e0e7      	b.n	800c128 <HAL_SPI_Receive_DMA+0x22c>
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d002      	beq.n	800bf6c <HAL_SPI_Receive_DMA+0x70>
 800bf66:	88fb      	ldrh	r3, [r7, #6]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d102      	bne.n	800bf72 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bf70:	e0d5      	b.n	800c11e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2204      	movs	r2, #4
 800bf76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	88fa      	ldrh	r2, [r7, #6]
 800bf8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	88fa      	ldrh	r2, [r7, #6]
 800bf92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfb6:	d10f      	bne.n	800bfd8 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bfc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bfd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	685a      	ldr	r2, [r3, #4]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bfe6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bff0:	d908      	bls.n	800c004 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	685a      	ldr	r2, [r3, #4]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c000:	605a      	str	r2, [r3, #4]
 800c002:	e042      	b.n	800c08a <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	685a      	ldr	r2, [r3, #4]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c012:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c01e:	d134      	bne.n	800c08a <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	685a      	ldr	r2, [r3, #4]
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c02e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c036:	b29b      	uxth	r3, r3
 800c038:	f003 0301 	and.w	r3, r3, #1
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d111      	bne.n	800c064 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	685a      	ldr	r2, [r3, #4]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c04e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c056:	b29b      	uxth	r3, r3
 800c058:	085b      	lsrs	r3, r3, #1
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c062:	e012      	b.n	800c08a <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	685a      	ldr	r2, [r3, #4]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c072:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	085b      	lsrs	r3, r3, #1
 800c07e:	b29b      	uxth	r3, r3
 800c080:	3301      	adds	r3, #1
 800c082:	b29a      	uxth	r2, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c08e:	4a28      	ldr	r2, [pc, #160]	; (800c130 <HAL_SPI_Receive_DMA+0x234>)
 800c090:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c096:	4a27      	ldr	r2, [pc, #156]	; (800c134 <HAL_SPI_Receive_DMA+0x238>)
 800c098:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c09e:	4a26      	ldr	r2, [pc, #152]	; (800c138 <HAL_SPI_Receive_DMA+0x23c>)
 800c0a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	330c      	adds	r3, #12
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ba:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c0c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c0c4:	f7fb fe2c 	bl	8007d20 <HAL_DMA_Start_IT>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d008      	beq.n	800c0e0 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0d2:	f043 0210 	orr.w	r2, r3, #16
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c0de:	e01e      	b.n	800c11e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ea:	2b40      	cmp	r3, #64	; 0x40
 800c0ec:	d007      	beq.n	800c0fe <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c0fc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	685a      	ldr	r2, [r3, #4]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f042 0220 	orr.w	r2, r2, #32
 800c10c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	685a      	ldr	r2, [r3, #4]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f042 0201 	orr.w	r2, r2, #1
 800c11c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2200      	movs	r2, #0
 800c122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c126:	7dfb      	ldrb	r3, [r7, #23]
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3718      	adds	r7, #24
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	0800c94f 	.word	0x0800c94f
 800c134:	0800c7fb 	.word	0x0800c7fb
 800c138:	0800c987 	.word	0x0800c987

0800c13c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
 800c148:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c14a:	2300      	movs	r3, #0
 800c14c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c154:	2b01      	cmp	r3, #1
 800c156:	d101      	bne.n	800c15c <HAL_SPI_TransmitReceive_DMA+0x20>
 800c158:	2302      	movs	r3, #2
 800c15a:	e164      	b.n	800c426 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2201      	movs	r2, #1
 800c160:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c16a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c172:	7dbb      	ldrb	r3, [r7, #22]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d00d      	beq.n	800c194 <HAL_SPI_TransmitReceive_DMA+0x58>
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c17e:	d106      	bne.n	800c18e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d102      	bne.n	800c18e <HAL_SPI_TransmitReceive_DMA+0x52>
 800c188:	7dbb      	ldrb	r3, [r7, #22]
 800c18a:	2b04      	cmp	r3, #4
 800c18c:	d002      	beq.n	800c194 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800c18e:	2302      	movs	r3, #2
 800c190:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c192:	e143      	b.n	800c41c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d005      	beq.n	800c1a6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d002      	beq.n	800c1a6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c1a0:	887b      	ldrh	r3, [r7, #2]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d102      	bne.n	800c1ac <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c1aa:	e137      	b.n	800c41c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	2b04      	cmp	r3, #4
 800c1b6:	d003      	beq.n	800c1c0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2205      	movs	r2, #5
 800c1bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	887a      	ldrh	r2, [r7, #2]
 800c1d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	887a      	ldrh	r2, [r7, #2]
 800c1d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	887a      	ldrh	r2, [r7, #2]
 800c1e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	887a      	ldrh	r2, [r7, #2]
 800c1ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	685a      	ldr	r2, [r3, #4]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800c208:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c212:	d908      	bls.n	800c226 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	685a      	ldr	r2, [r3, #4]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c222:	605a      	str	r2, [r3, #4]
 800c224:	e06f      	b.n	800c306 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c234:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c23a:	699b      	ldr	r3, [r3, #24]
 800c23c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c240:	d126      	bne.n	800c290 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c246:	f003 0301 	and.w	r3, r3, #1
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d10f      	bne.n	800c26e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	685a      	ldr	r2, [r3, #4]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c25c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c262:	b29b      	uxth	r3, r3
 800c264:	085b      	lsrs	r3, r3, #1
 800c266:	b29a      	uxth	r2, r3
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c26c:	e010      	b.n	800c290 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	685a      	ldr	r2, [r3, #4]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c27c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c282:	b29b      	uxth	r3, r3
 800c284:	085b      	lsrs	r3, r3, #1
 800c286:	b29b      	uxth	r3, r3
 800c288:	3301      	adds	r3, #1
 800c28a:	b29a      	uxth	r2, r3
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c294:	699b      	ldr	r3, [r3, #24]
 800c296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c29a:	d134      	bne.n	800c306 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	685a      	ldr	r2, [r3, #4]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c2aa:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	f003 0301 	and.w	r3, r3, #1
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d111      	bne.n	800c2e0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c2ca:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	085b      	lsrs	r3, r3, #1
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c2de:	e012      	b.n	800c306 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	685a      	ldr	r2, [r3, #4]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c2ee:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	085b      	lsrs	r3, r3, #1
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c30c:	b2db      	uxtb	r3, r3
 800c30e:	2b04      	cmp	r3, #4
 800c310:	d108      	bne.n	800c324 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c316:	4a46      	ldr	r2, [pc, #280]	; (800c430 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800c318:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c31e:	4a45      	ldr	r2, [pc, #276]	; (800c434 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800c320:	62da      	str	r2, [r3, #44]	; 0x2c
 800c322:	e007      	b.n	800c334 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c328:	4a43      	ldr	r2, [pc, #268]	; (800c438 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800c32a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c330:	4a42      	ldr	r2, [pc, #264]	; (800c43c <HAL_SPI_TransmitReceive_DMA+0x300>)
 800c332:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c338:	4a41      	ldr	r2, [pc, #260]	; (800c440 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800c33a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c340:	2200      	movs	r2, #0
 800c342:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	330c      	adds	r3, #12
 800c34e:	4619      	mov	r1, r3
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c354:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c35c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c35e:	f7fb fcdf 	bl	8007d20 <HAL_DMA_Start_IT>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d008      	beq.n	800c37a <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c36c:	f043 0210 	orr.w	r2, r3, #16
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c374:	2301      	movs	r3, #1
 800c376:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c378:	e050      	b.n	800c41c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	685a      	ldr	r2, [r3, #4]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f042 0201 	orr.w	r2, r2, #1
 800c388:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c38e:	2200      	movs	r2, #0
 800c390:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c396:	2200      	movs	r2, #0
 800c398:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c39e:	2200      	movs	r2, #0
 800c3a0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	330c      	adds	r3, #12
 800c3ba:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3c0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c3c2:	f7fb fcad 	bl	8007d20 <HAL_DMA_Start_IT>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d008      	beq.n	800c3de <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3d0:	f043 0210 	orr.w	r2, r3, #16
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	75fb      	strb	r3, [r7, #23]

    goto error;
 800c3dc:	e01e      	b.n	800c41c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3e8:	2b40      	cmp	r3, #64	; 0x40
 800c3ea:	d007      	beq.n	800c3fc <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3fa:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	685a      	ldr	r2, [r3, #4]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f042 0220 	orr.w	r2, r2, #32
 800c40a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	685a      	ldr	r2, [r3, #4]
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f042 0202 	orr.w	r2, r2, #2
 800c41a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2200      	movs	r2, #0
 800c420:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c424:	7dfb      	ldrb	r3, [r7, #23]
}
 800c426:	4618      	mov	r0, r3
 800c428:	3718      	adds	r7, #24
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	0800c94f 	.word	0x0800c94f
 800c434:	0800c7fb 	.word	0x0800c7fb
 800c438:	0800c96b 	.word	0x0800c96b
 800c43c:	0800c8a3 	.word	0x0800c8a3
 800c440:	0800c987 	.word	0x0800c987

0800c444 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c44c:	2300      	movs	r3, #0
 800c44e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c454:	2b00      	cmp	r3, #0
 800c456:	d00f      	beq.n	800c478 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7fb fcbf 	bl	8007de0 <HAL_DMA_Abort>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d007      	beq.n	800c478 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c46c:	f043 0210 	orr.w	r2, r3, #16
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00f      	beq.n	800c4a0 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c484:	4618      	mov	r0, r3
 800c486:	f7fb fcab 	bl	8007de0 <HAL_DMA_Abort>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d007      	beq.n	800c4a0 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c494:	f043 0210 	orr.w	r2, r3, #16
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 800c49c:	2301      	movs	r3, #1
 800c49e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	685a      	ldr	r2, [r3, #4]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f022 0203 	bic.w	r2, r2, #3
 800c4ae:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 800c4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3710      	adds	r7, #16
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
	...

0800c4c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b088      	sub	sp, #32
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d10e      	bne.n	800c504 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d009      	beq.n	800c504 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d004      	beq.n	800c504 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	4798      	blx	r3
    return;
 800c502:	e0ce      	b.n	800c6a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	f003 0302 	and.w	r3, r3, #2
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d009      	beq.n	800c522 <HAL_SPI_IRQHandler+0x5e>
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c514:	2b00      	cmp	r3, #0
 800c516:	d004      	beq.n	800c522 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	4798      	blx	r3
    return;
 800c520:	e0bf      	b.n	800c6a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	f003 0320 	and.w	r3, r3, #32
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d10a      	bne.n	800c542 <HAL_SPI_IRQHandler+0x7e>
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c532:	2b00      	cmp	r3, #0
 800c534:	d105      	bne.n	800c542 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f000 80b0 	beq.w	800c6a2 <HAL_SPI_IRQHandler+0x1de>
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	f003 0320 	and.w	r3, r3, #32
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f000 80aa 	beq.w	800c6a2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c554:	2b00      	cmp	r3, #0
 800c556:	d023      	beq.n	800c5a0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	2b03      	cmp	r3, #3
 800c562:	d011      	beq.n	800c588 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c568:	f043 0204 	orr.w	r2, r3, #4
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c570:	2300      	movs	r3, #0
 800c572:	617b      	str	r3, [r7, #20]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	617b      	str	r3, [r7, #20]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	617b      	str	r3, [r7, #20]
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	e00b      	b.n	800c5a0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c588:	2300      	movs	r3, #0
 800c58a:	613b      	str	r3, [r7, #16]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	613b      	str	r3, [r7, #16]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	613b      	str	r3, [r7, #16]
 800c59c:	693b      	ldr	r3, [r7, #16]
        return;
 800c59e:	e080      	b.n	800c6a2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c5a0:	69bb      	ldr	r3, [r7, #24]
 800c5a2:	f003 0320 	and.w	r3, r3, #32
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d014      	beq.n	800c5d4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5ae:	f043 0201 	orr.w	r2, r3, #1
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	60fb      	str	r3, [r7, #12]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	60fb      	str	r3, [r7, #12]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5d0:	601a      	str	r2, [r3, #0]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d00c      	beq.n	800c5f8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5e2:	f043 0208 	orr.w	r2, r3, #8
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	60bb      	str	r3, [r7, #8]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	60bb      	str	r3, [r7, #8]
 800c5f6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d04f      	beq.n	800c6a0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	685a      	ldr	r2, [r3, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c60e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	f003 0302 	and.w	r3, r3, #2
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d104      	bne.n	800c62c <HAL_SPI_IRQHandler+0x168>
 800c622:	69fb      	ldr	r3, [r7, #28]
 800c624:	f003 0301 	and.w	r3, r3, #1
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d034      	beq.n	800c696 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	685a      	ldr	r2, [r3, #4]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f022 0203 	bic.w	r2, r2, #3
 800c63a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c640:	2b00      	cmp	r3, #0
 800c642:	d011      	beq.n	800c668 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c648:	4a17      	ldr	r2, [pc, #92]	; (800c6a8 <HAL_SPI_IRQHandler+0x1e4>)
 800c64a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c650:	4618      	mov	r0, r3
 800c652:	f7fb fc03 	bl	8007e5c <HAL_DMA_Abort_IT>
 800c656:	4603      	mov	r3, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d005      	beq.n	800c668 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c660:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d016      	beq.n	800c69e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c674:	4a0c      	ldr	r2, [pc, #48]	; (800c6a8 <HAL_SPI_IRQHandler+0x1e4>)
 800c676:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7fb fbed 	bl	8007e5c <HAL_DMA_Abort_IT>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00a      	beq.n	800c69e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c68c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800c694:	e003      	b.n	800c69e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f844 	bl	800c724 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c69c:	e000      	b.n	800c6a0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800c69e:	bf00      	nop
    return;
 800c6a0:	bf00      	nop
  }
}
 800c6a2:	3720      	adds	r7, #32
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	0800c9c7 	.word	0x0800c9c7

0800c6ac <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c6b4:	bf00      	nop
 800c6b6:	370c      	adds	r7, #12
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr

0800c6c0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c6c8:	bf00      	nop
 800c6ca:	370c      	adds	r7, #12
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d2:	4770      	bx	lr

0800c6d4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c6d4:	b480      	push	{r7}
 800c6d6:	b083      	sub	sp, #12
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c6dc:	bf00      	nop
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c6f0:	bf00      	nop
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c704:	bf00      	nop
 800c706:	370c      	adds	r7, #12
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800c718:	bf00      	nop
 800c71a:	370c      	adds	r7, #12
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c724:	b480      	push	{r7}
 800c726:	b083      	sub	sp, #12
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c72c:	bf00      	nop
 800c72e:	370c      	adds	r7, #12
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c746:	b2db      	uxtb	r3, r3
}
 800c748:	4618      	mov	r0, r3
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c760:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c762:	f7f9 fe43 	bl	80063ec <HAL_GetTick>
 800c766:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f003 0320 	and.w	r3, r3, #32
 800c772:	2b20      	cmp	r3, #32
 800c774:	d03b      	beq.n	800c7ee <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f022 0220 	bic.w	r2, r2, #32
 800c784:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	685a      	ldr	r2, [r3, #4]
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f022 0202 	bic.w	r2, r2, #2
 800c794:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c796:	693a      	ldr	r2, [r7, #16]
 800c798:	2164      	movs	r1, #100	; 0x64
 800c79a:	6978      	ldr	r0, [r7, #20]
 800c79c:	f000 fa9e 	bl	800ccdc <SPI_EndRxTxTransaction>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d005      	beq.n	800c7b2 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7aa:	f043 0220 	orr.w	r2, r3, #32
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d10a      	bne.n	800c7d0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	60fb      	str	r3, [r7, #12]
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	68db      	ldr	r3, [r3, #12]
 800c7c4:	60fb      	str	r3, [r7, #12]
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	60fb      	str	r3, [r7, #12]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d003      	beq.n	800c7ee <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c7e6:	6978      	ldr	r0, [r7, #20]
 800c7e8:	f7ff ff9c 	bl	800c724 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c7ec:	e002      	b.n	800c7f4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800c7ee:	6978      	ldr	r0, [r7, #20]
 800c7f0:	f7ff ff5c 	bl	800c6ac <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c7f4:	3718      	adds	r7, #24
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b084      	sub	sp, #16
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c806:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c808:	f7f9 fdf0 	bl	80063ec <HAL_GetTick>
 800c80c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f003 0320 	and.w	r3, r3, #32
 800c818:	2b20      	cmp	r3, #32
 800c81a:	d03c      	beq.n	800c896 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	685a      	ldr	r2, [r3, #4]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f022 0220 	bic.w	r2, r2, #32
 800c82a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d10d      	bne.n	800c850 <SPI_DMAReceiveCplt+0x56>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c83c:	d108      	bne.n	800c850 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	685a      	ldr	r2, [r3, #4]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f022 0203 	bic.w	r2, r2, #3
 800c84c:	605a      	str	r2, [r3, #4]
 800c84e:	e007      	b.n	800c860 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	685a      	ldr	r2, [r3, #4]
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f022 0201 	bic.w	r2, r2, #1
 800c85e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	2164      	movs	r1, #100	; 0x64
 800c864:	68f8      	ldr	r0, [r7, #12]
 800c866:	f000 f9e1 	bl	800cc2c <SPI_EndRxTransaction>
 800c86a:	4603      	mov	r3, r0
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d002      	beq.n	800c876 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2220      	movs	r2, #32
 800c874:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2200      	movs	r2, #0
 800c87a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	2201      	movs	r2, #1
 800c882:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d003      	beq.n	800c896 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c88e:	68f8      	ldr	r0, [r7, #12]
 800c890:	f7ff ff48 	bl	800c724 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c894:	e002      	b.n	800c89c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800c896:	68f8      	ldr	r0, [r7, #12]
 800c898:	f7ff ff12 	bl	800c6c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b084      	sub	sp, #16
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ae:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c8b0:	f7f9 fd9c 	bl	80063ec <HAL_GetTick>
 800c8b4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f003 0320 	and.w	r3, r3, #32
 800c8c0:	2b20      	cmp	r3, #32
 800c8c2:	d030      	beq.n	800c926 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	685a      	ldr	r2, [r3, #4]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f022 0220 	bic.w	r2, r2, #32
 800c8d2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c8d4:	68ba      	ldr	r2, [r7, #8]
 800c8d6:	2164      	movs	r1, #100	; 0x64
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f000 f9ff 	bl	800ccdc <SPI_EndRxTxTransaction>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d005      	beq.n	800c8f0 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8e8:	f043 0220 	orr.w	r2, r3, #32
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	685a      	ldr	r2, [r3, #4]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f022 0203 	bic.w	r2, r2, #3
 800c8fe:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2200      	movs	r2, #0
 800c904:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2200      	movs	r2, #0
 800c90a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2201      	movs	r2, #1
 800c912:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d003      	beq.n	800c926 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c91e:	68f8      	ldr	r0, [r7, #12]
 800c920:	f7ff ff00 	bl	800c724 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c924:	e002      	b.n	800c92c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800c926:	68f8      	ldr	r0, [r7, #12]
 800c928:	f7ff fed4 	bl	800c6d4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b084      	sub	sp, #16
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c93e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f7ff fed1 	bl	800c6e8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c946:	bf00      	nop
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b084      	sub	sp, #16
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f7ff fecd 	bl	800c6fc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c962:	bf00      	nop
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b084      	sub	sp, #16
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c976:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f7ff fec9 	bl	800c710 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c97e:	bf00      	nop
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c986:	b580      	push	{r7, lr}
 800c988:	b084      	sub	sp, #16
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c992:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	685a      	ldr	r2, [r3, #4]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f022 0203 	bic.w	r2, r2, #3
 800c9a2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9a8:	f043 0210 	orr.w	r2, r3, #16
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f7ff feb3 	bl	800c724 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c9be:	bf00      	nop
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b084      	sub	sp, #16
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f7ff fe9e 	bl	800c724 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c9e8:	bf00      	nop
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b088      	sub	sp, #32
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	603b      	str	r3, [r7, #0]
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ca00:	f7f9 fcf4 	bl	80063ec <HAL_GetTick>
 800ca04:	4602      	mov	r2, r0
 800ca06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca08:	1a9b      	subs	r3, r3, r2
 800ca0a:	683a      	ldr	r2, [r7, #0]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ca10:	f7f9 fcec 	bl	80063ec <HAL_GetTick>
 800ca14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ca16:	4b39      	ldr	r3, [pc, #228]	; (800cafc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	015b      	lsls	r3, r3, #5
 800ca1c:	0d1b      	lsrs	r3, r3, #20
 800ca1e:	69fa      	ldr	r2, [r7, #28]
 800ca20:	fb02 f303 	mul.w	r3, r2, r3
 800ca24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ca26:	e054      	b.n	800cad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca2e:	d050      	beq.n	800cad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ca30:	f7f9 fcdc 	bl	80063ec <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	69fa      	ldr	r2, [r7, #28]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d902      	bls.n	800ca46 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d13d      	bne.n	800cac2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ca54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ca5e:	d111      	bne.n	800ca84 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca68:	d004      	beq.n	800ca74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca72:	d107      	bne.n	800ca84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca8c:	d10f      	bne.n	800caae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca9c:	601a      	str	r2, [r3, #0]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800caac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2201      	movs	r2, #1
 800cab2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2200      	movs	r2, #0
 800caba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cabe:	2303      	movs	r3, #3
 800cac0:	e017      	b.n	800caf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d101      	bne.n	800cacc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cac8:	2300      	movs	r3, #0
 800caca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	3b01      	subs	r3, #1
 800cad0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	689a      	ldr	r2, [r3, #8]
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	4013      	ands	r3, r2
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	429a      	cmp	r2, r3
 800cae0:	bf0c      	ite	eq
 800cae2:	2301      	moveq	r3, #1
 800cae4:	2300      	movne	r3, #0
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	461a      	mov	r2, r3
 800caea:	79fb      	ldrb	r3, [r7, #7]
 800caec:	429a      	cmp	r2, r3
 800caee:	d19b      	bne.n	800ca28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800caf0:	2300      	movs	r3, #0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3720      	adds	r7, #32
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	20000024 	.word	0x20000024

0800cb00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b08a      	sub	sp, #40	; 0x28
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	60b9      	str	r1, [r7, #8]
 800cb0a:	607a      	str	r2, [r7, #4]
 800cb0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cb12:	f7f9 fc6b 	bl	80063ec <HAL_GetTick>
 800cb16:	4602      	mov	r2, r0
 800cb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1a:	1a9b      	subs	r3, r3, r2
 800cb1c:	683a      	ldr	r2, [r7, #0]
 800cb1e:	4413      	add	r3, r2
 800cb20:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800cb22:	f7f9 fc63 	bl	80063ec <HAL_GetTick>
 800cb26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	330c      	adds	r3, #12
 800cb2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800cb30:	4b3d      	ldr	r3, [pc, #244]	; (800cc28 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	4613      	mov	r3, r2
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4413      	add	r3, r2
 800cb3a:	00da      	lsls	r2, r3, #3
 800cb3c:	1ad3      	subs	r3, r2, r3
 800cb3e:	0d1b      	lsrs	r3, r3, #20
 800cb40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb42:	fb02 f303 	mul.w	r3, r2, r3
 800cb46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800cb48:	e060      	b.n	800cc0c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cb50:	d107      	bne.n	800cb62 <SPI_WaitFifoStateUntilTimeout+0x62>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d104      	bne.n	800cb62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800cb60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb68:	d050      	beq.n	800cc0c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cb6a:	f7f9 fc3f 	bl	80063ec <HAL_GetTick>
 800cb6e:	4602      	mov	r2, r0
 800cb70:	6a3b      	ldr	r3, [r7, #32]
 800cb72:	1ad3      	subs	r3, r2, r3
 800cb74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d902      	bls.n	800cb80 <SPI_WaitFifoStateUntilTimeout+0x80>
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d13d      	bne.n	800cbfc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	685a      	ldr	r2, [r3, #4]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cb8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb98:	d111      	bne.n	800cbbe <SPI_WaitFifoStateUntilTimeout+0xbe>
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cba2:	d004      	beq.n	800cbae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbac:	d107      	bne.n	800cbbe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cbbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cbc6:	d10f      	bne.n	800cbe8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cbd6:	601a      	str	r2, [r3, #0]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cbe6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2201      	movs	r2, #1
 800cbec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cbf8:	2303      	movs	r3, #3
 800cbfa:	e010      	b.n	800cc1e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d101      	bne.n	800cc06 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800cc02:	2300      	movs	r3, #0
 800cc04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	3b01      	subs	r3, #1
 800cc0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	689a      	ldr	r2, [r3, #8]
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	4013      	ands	r3, r2
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d196      	bne.n	800cb4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3728      	adds	r7, #40	; 0x28
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	20000024 	.word	0x20000024

0800cc2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af02      	add	r7, sp, #8
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc40:	d111      	bne.n	800cc66 <SPI_EndRxTransaction+0x3a>
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	689b      	ldr	r3, [r3, #8]
 800cc46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc4a:	d004      	beq.n	800cc56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc54:	d107      	bne.n	800cc66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc64:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	9300      	str	r3, [sp, #0]
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	2180      	movs	r1, #128	; 0x80
 800cc70:	68f8      	ldr	r0, [r7, #12]
 800cc72:	f7ff febd 	bl	800c9f0 <SPI_WaitFlagStateUntilTimeout>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d007      	beq.n	800cc8c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc80:	f043 0220 	orr.w	r2, r3, #32
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cc88:	2303      	movs	r3, #3
 800cc8a:	e023      	b.n	800ccd4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc94:	d11d      	bne.n	800ccd2 <SPI_EndRxTransaction+0xa6>
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc9e:	d004      	beq.n	800ccaa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	689b      	ldr	r3, [r3, #8]
 800cca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cca8:	d113      	bne.n	800ccd2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	9300      	str	r3, [sp, #0]
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f7ff ff22 	bl	800cb00 <SPI_WaitFifoStateUntilTimeout>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d007      	beq.n	800ccd2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccc6:	f043 0220 	orr.w	r2, r3, #32
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ccce:	2303      	movs	r3, #3
 800ccd0:	e000      	b.n	800ccd4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ccd2:	2300      	movs	r3, #0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3710      	adds	r7, #16
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af02      	add	r7, sp, #8
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ccf4:	68f8      	ldr	r0, [r7, #12]
 800ccf6:	f7ff ff03 	bl	800cb00 <SPI_WaitFifoStateUntilTimeout>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d007      	beq.n	800cd10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd04:	f043 0220 	orr.w	r2, r3, #32
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cd0c:	2303      	movs	r3, #3
 800cd0e:	e027      	b.n	800cd60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	9300      	str	r3, [sp, #0]
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	2200      	movs	r2, #0
 800cd18:	2180      	movs	r1, #128	; 0x80
 800cd1a:	68f8      	ldr	r0, [r7, #12]
 800cd1c:	f7ff fe68 	bl	800c9f0 <SPI_WaitFlagStateUntilTimeout>
 800cd20:	4603      	mov	r3, r0
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d007      	beq.n	800cd36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd2a:	f043 0220 	orr.w	r2, r3, #32
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cd32:	2303      	movs	r3, #3
 800cd34:	e014      	b.n	800cd60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	9300      	str	r3, [sp, #0]
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f7ff fedc 	bl	800cb00 <SPI_WaitFifoStateUntilTimeout>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d007      	beq.n	800cd5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd52:	f043 0220 	orr.w	r2, r3, #32
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800cd5a:	2303      	movs	r3, #3
 800cd5c:	e000      	b.n	800cd60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800cd5e:	2300      	movs	r3, #0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d101      	bne.n	800cd7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	e049      	b.n	800ce0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d106      	bne.n	800cd94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f7f8 feae 	bl	8005af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2202      	movs	r2, #2
 800cd98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	3304      	adds	r3, #4
 800cda4:	4619      	mov	r1, r3
 800cda6:	4610      	mov	r0, r2
 800cda8:	f000 fb02 	bl	800d3b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2201      	movs	r2, #1
 800cde0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2201      	movs	r2, #1
 800cde8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2201      	movs	r2, #1
 800ce00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3708      	adds	r7, #8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
	...

0800ce18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b085      	sub	sp, #20
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d001      	beq.n	800ce30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e033      	b.n	800ce98 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2202      	movs	r2, #2
 800ce34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a19      	ldr	r2, [pc, #100]	; (800cea4 <HAL_TIM_Base_Start+0x8c>)
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d009      	beq.n	800ce56 <HAL_TIM_Base_Start+0x3e>
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce4a:	d004      	beq.n	800ce56 <HAL_TIM_Base_Start+0x3e>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	4a15      	ldr	r2, [pc, #84]	; (800cea8 <HAL_TIM_Base_Start+0x90>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d115      	bne.n	800ce82 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	689a      	ldr	r2, [r3, #8]
 800ce5c:	4b13      	ldr	r3, [pc, #76]	; (800ceac <HAL_TIM_Base_Start+0x94>)
 800ce5e:	4013      	ands	r3, r2
 800ce60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2b06      	cmp	r3, #6
 800ce66:	d015      	beq.n	800ce94 <HAL_TIM_Base_Start+0x7c>
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce6e:	d011      	beq.n	800ce94 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f042 0201 	orr.w	r2, r2, #1
 800ce7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce80:	e008      	b.n	800ce94 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f042 0201 	orr.w	r2, r2, #1
 800ce90:	601a      	str	r2, [r3, #0]
 800ce92:	e000      	b.n	800ce96 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ce96:	2300      	movs	r3, #0
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3714      	adds	r7, #20
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr
 800cea4:	40012c00 	.word	0x40012c00
 800cea8:	40014000 	.word	0x40014000
 800ceac:	00010007 	.word	0x00010007

0800ceb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d001      	beq.n	800cec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cec4:	2301      	movs	r3, #1
 800cec6:	e03b      	b.n	800cf40 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2202      	movs	r2, #2
 800cecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	68da      	ldr	r2, [r3, #12]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f042 0201 	orr.w	r2, r2, #1
 800cede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a19      	ldr	r2, [pc, #100]	; (800cf4c <HAL_TIM_Base_Start_IT+0x9c>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d009      	beq.n	800cefe <HAL_TIM_Base_Start_IT+0x4e>
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cef2:	d004      	beq.n	800cefe <HAL_TIM_Base_Start_IT+0x4e>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a15      	ldr	r2, [pc, #84]	; (800cf50 <HAL_TIM_Base_Start_IT+0xa0>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d115      	bne.n	800cf2a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	689a      	ldr	r2, [r3, #8]
 800cf04:	4b13      	ldr	r3, [pc, #76]	; (800cf54 <HAL_TIM_Base_Start_IT+0xa4>)
 800cf06:	4013      	ands	r3, r2
 800cf08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2b06      	cmp	r3, #6
 800cf0e:	d015      	beq.n	800cf3c <HAL_TIM_Base_Start_IT+0x8c>
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf16:	d011      	beq.n	800cf3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f042 0201 	orr.w	r2, r2, #1
 800cf26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf28:	e008      	b.n	800cf3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f042 0201 	orr.w	r2, r2, #1
 800cf38:	601a      	str	r2, [r3, #0]
 800cf3a:	e000      	b.n	800cf3e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3714      	adds	r7, #20
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr
 800cf4c:	40012c00 	.word	0x40012c00
 800cf50:	40014000 	.word	0x40014000
 800cf54:	00010007 	.word	0x00010007

0800cf58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	68da      	ldr	r2, [r3, #12]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f022 0201 	bic.w	r2, r2, #1
 800cf6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	6a1a      	ldr	r2, [r3, #32]
 800cf76:	f241 1311 	movw	r3, #4369	; 0x1111
 800cf7a:	4013      	ands	r3, r2
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d10f      	bne.n	800cfa0 <HAL_TIM_Base_Stop_IT+0x48>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	6a1a      	ldr	r2, [r3, #32]
 800cf86:	f240 4344 	movw	r3, #1092	; 0x444
 800cf8a:	4013      	ands	r3, r2
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d107      	bne.n	800cfa0 <HAL_TIM_Base_Stop_IT+0x48>
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f022 0201 	bic.w	r2, r2, #1
 800cf9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cfa8:	2300      	movs	r3, #0
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	370c      	adds	r7, #12
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr

0800cfb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b084      	sub	sp, #16
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	691b      	ldr	r3, [r3, #16]
 800cfcc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	f003 0302 	and.w	r3, r3, #2
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d020      	beq.n	800d01a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f003 0302 	and.w	r3, r3, #2
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d01b      	beq.n	800d01a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f06f 0202 	mvn.w	r2, #2
 800cfea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2201      	movs	r2, #1
 800cff0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	699b      	ldr	r3, [r3, #24]
 800cff8:	f003 0303 	and.w	r3, r3, #3
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d003      	beq.n	800d008 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 f9b7 	bl	800d374 <HAL_TIM_IC_CaptureCallback>
 800d006:	e005      	b.n	800d014 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 f9a9 	bl	800d360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 f9ba 	bl	800d388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	f003 0304 	and.w	r3, r3, #4
 800d020:	2b00      	cmp	r3, #0
 800d022:	d020      	beq.n	800d066 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	f003 0304 	and.w	r3, r3, #4
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d01b      	beq.n	800d066 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f06f 0204 	mvn.w	r2, #4
 800d036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2202      	movs	r2, #2
 800d03c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	699b      	ldr	r3, [r3, #24]
 800d044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d003      	beq.n	800d054 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 f991 	bl	800d374 <HAL_TIM_IC_CaptureCallback>
 800d052:	e005      	b.n	800d060 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 f983 	bl	800d360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f000 f994 	bl	800d388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	f003 0308 	and.w	r3, r3, #8
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d020      	beq.n	800d0b2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f003 0308 	and.w	r3, r3, #8
 800d076:	2b00      	cmp	r3, #0
 800d078:	d01b      	beq.n	800d0b2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f06f 0208 	mvn.w	r2, #8
 800d082:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2204      	movs	r2, #4
 800d088:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	69db      	ldr	r3, [r3, #28]
 800d090:	f003 0303 	and.w	r3, r3, #3
 800d094:	2b00      	cmp	r3, #0
 800d096:	d003      	beq.n	800d0a0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 f96b 	bl	800d374 <HAL_TIM_IC_CaptureCallback>
 800d09e:	e005      	b.n	800d0ac <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 f95d 	bl	800d360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 f96e 	bl	800d388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	f003 0310 	and.w	r3, r3, #16
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d020      	beq.n	800d0fe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f003 0310 	and.w	r3, r3, #16
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d01b      	beq.n	800d0fe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	f06f 0210 	mvn.w	r2, #16
 800d0ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2208      	movs	r2, #8
 800d0d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	69db      	ldr	r3, [r3, #28]
 800d0dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d003      	beq.n	800d0ec <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f945 	bl	800d374 <HAL_TIM_IC_CaptureCallback>
 800d0ea:	e005      	b.n	800d0f8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 f937 	bl	800d360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 f948 	bl	800d388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	f003 0301 	and.w	r3, r3, #1
 800d104:	2b00      	cmp	r3, #0
 800d106:	d00c      	beq.n	800d122 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f003 0301 	and.w	r3, r3, #1
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d007      	beq.n	800d122 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f06f 0201 	mvn.w	r2, #1
 800d11a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 f915 	bl	800d34c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00c      	beq.n	800d146 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d132:	2b00      	cmp	r3, #0
 800d134:	d007      	beq.n	800d146 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d13e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f000 faa3 	bl	800d68c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d00c      	beq.n	800d16a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d156:	2b00      	cmp	r3, #0
 800d158:	d007      	beq.n	800d16a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 fa9b 	bl	800d6a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d170:	2b00      	cmp	r3, #0
 800d172:	d00c      	beq.n	800d18e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d007      	beq.n	800d18e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f907 	bl	800d39c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	f003 0320 	and.w	r3, r3, #32
 800d194:	2b00      	cmp	r3, #0
 800d196:	d00c      	beq.n	800d1b2 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f003 0320 	and.w	r3, r3, #32
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d007      	beq.n	800d1b2 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f06f 0220 	mvn.w	r2, #32
 800d1aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f000 fa63 	bl	800d678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d1b2:	bf00      	nop
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b084      	sub	sp, #16
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
 800d1c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d101      	bne.n	800d1d6 <HAL_TIM_ConfigClockSource+0x1c>
 800d1d2:	2302      	movs	r3, #2
 800d1d4:	e0b6      	b.n	800d344 <HAL_TIM_ConfigClockSource+0x18a>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2201      	movs	r2, #1
 800d1da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2202      	movs	r2, #2
 800d1e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d1f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d200:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	68ba      	ldr	r2, [r7, #8]
 800d208:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d212:	d03e      	beq.n	800d292 <HAL_TIM_ConfigClockSource+0xd8>
 800d214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d218:	f200 8087 	bhi.w	800d32a <HAL_TIM_ConfigClockSource+0x170>
 800d21c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d220:	f000 8086 	beq.w	800d330 <HAL_TIM_ConfigClockSource+0x176>
 800d224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d228:	d87f      	bhi.n	800d32a <HAL_TIM_ConfigClockSource+0x170>
 800d22a:	2b70      	cmp	r3, #112	; 0x70
 800d22c:	d01a      	beq.n	800d264 <HAL_TIM_ConfigClockSource+0xaa>
 800d22e:	2b70      	cmp	r3, #112	; 0x70
 800d230:	d87b      	bhi.n	800d32a <HAL_TIM_ConfigClockSource+0x170>
 800d232:	2b60      	cmp	r3, #96	; 0x60
 800d234:	d050      	beq.n	800d2d8 <HAL_TIM_ConfigClockSource+0x11e>
 800d236:	2b60      	cmp	r3, #96	; 0x60
 800d238:	d877      	bhi.n	800d32a <HAL_TIM_ConfigClockSource+0x170>
 800d23a:	2b50      	cmp	r3, #80	; 0x50
 800d23c:	d03c      	beq.n	800d2b8 <HAL_TIM_ConfigClockSource+0xfe>
 800d23e:	2b50      	cmp	r3, #80	; 0x50
 800d240:	d873      	bhi.n	800d32a <HAL_TIM_ConfigClockSource+0x170>
 800d242:	2b40      	cmp	r3, #64	; 0x40
 800d244:	d058      	beq.n	800d2f8 <HAL_TIM_ConfigClockSource+0x13e>
 800d246:	2b40      	cmp	r3, #64	; 0x40
 800d248:	d86f      	bhi.n	800d32a <HAL_TIM_ConfigClockSource+0x170>
 800d24a:	2b30      	cmp	r3, #48	; 0x30
 800d24c:	d064      	beq.n	800d318 <HAL_TIM_ConfigClockSource+0x15e>
 800d24e:	2b30      	cmp	r3, #48	; 0x30
 800d250:	d86b      	bhi.n	800d32a <HAL_TIM_ConfigClockSource+0x170>
 800d252:	2b20      	cmp	r3, #32
 800d254:	d060      	beq.n	800d318 <HAL_TIM_ConfigClockSource+0x15e>
 800d256:	2b20      	cmp	r3, #32
 800d258:	d867      	bhi.n	800d32a <HAL_TIM_ConfigClockSource+0x170>
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d05c      	beq.n	800d318 <HAL_TIM_ConfigClockSource+0x15e>
 800d25e:	2b10      	cmp	r3, #16
 800d260:	d05a      	beq.n	800d318 <HAL_TIM_ConfigClockSource+0x15e>
 800d262:	e062      	b.n	800d32a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d274:	f000 f97a 	bl	800d56c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	689b      	ldr	r3, [r3, #8]
 800d27e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d286:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	68ba      	ldr	r2, [r7, #8]
 800d28e:	609a      	str	r2, [r3, #8]
      break;
 800d290:	e04f      	b.n	800d332 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d2a2:	f000 f963 	bl	800d56c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	689a      	ldr	r2, [r3, #8]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d2b4:	609a      	str	r2, [r3, #8]
      break;
 800d2b6:	e03c      	b.n	800d332 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	f000 f8d7 	bl	800d478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	2150      	movs	r1, #80	; 0x50
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f000 f930 	bl	800d536 <TIM_ITRx_SetConfig>
      break;
 800d2d6:	e02c      	b.n	800d332 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	f000 f8f6 	bl	800d4d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2160      	movs	r1, #96	; 0x60
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f000 f920 	bl	800d536 <TIM_ITRx_SetConfig>
      break;
 800d2f6:	e01c      	b.n	800d332 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d304:	461a      	mov	r2, r3
 800d306:	f000 f8b7 	bl	800d478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2140      	movs	r1, #64	; 0x40
 800d310:	4618      	mov	r0, r3
 800d312:	f000 f910 	bl	800d536 <TIM_ITRx_SetConfig>
      break;
 800d316:	e00c      	b.n	800d332 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4619      	mov	r1, r3
 800d322:	4610      	mov	r0, r2
 800d324:	f000 f907 	bl	800d536 <TIM_ITRx_SetConfig>
      break;
 800d328:	e003      	b.n	800d332 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800d32a:	2301      	movs	r3, #1
 800d32c:	73fb      	strb	r3, [r7, #15]
      break;
 800d32e:	e000      	b.n	800d332 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800d330:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2201      	movs	r2, #1
 800d336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2200      	movs	r2, #0
 800d33e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d342:	7bfb      	ldrb	r3, [r7, #15]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3710      	adds	r7, #16
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800d354:	bf00      	nop
 800d356:	370c      	adds	r7, #12
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	4770      	bx	lr

0800d360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d360:	b480      	push	{r7}
 800d362:	b083      	sub	sp, #12
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d368:	bf00      	nop
 800d36a:	370c      	adds	r7, #12
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr

0800d374 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d37c:	bf00      	nop
 800d37e:	370c      	adds	r7, #12
 800d380:	46bd      	mov	sp, r7
 800d382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d386:	4770      	bx	lr

0800d388 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d388:	b480      	push	{r7}
 800d38a:	b083      	sub	sp, #12
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d390:	bf00      	nop
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d3a4:	bf00      	nop
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr

0800d3b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4a2a      	ldr	r2, [pc, #168]	; (800d46c <TIM_Base_SetConfig+0xbc>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d003      	beq.n	800d3d0 <TIM_Base_SetConfig+0x20>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3ce:	d108      	bne.n	800d3e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	68fa      	ldr	r2, [r7, #12]
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	4a21      	ldr	r2, [pc, #132]	; (800d46c <TIM_Base_SetConfig+0xbc>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d00b      	beq.n	800d402 <TIM_Base_SetConfig+0x52>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3f0:	d007      	beq.n	800d402 <TIM_Base_SetConfig+0x52>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	4a1e      	ldr	r2, [pc, #120]	; (800d470 <TIM_Base_SetConfig+0xc0>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d003      	beq.n	800d402 <TIM_Base_SetConfig+0x52>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	4a1d      	ldr	r2, [pc, #116]	; (800d474 <TIM_Base_SetConfig+0xc4>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d108      	bne.n	800d414 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	68fa      	ldr	r2, [r7, #12]
 800d410:	4313      	orrs	r3, r2
 800d412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	695b      	ldr	r3, [r3, #20]
 800d41e:	4313      	orrs	r3, r2
 800d420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	689a      	ldr	r2, [r3, #8]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	4a0c      	ldr	r2, [pc, #48]	; (800d46c <TIM_Base_SetConfig+0xbc>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d007      	beq.n	800d450 <TIM_Base_SetConfig+0xa0>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4a0b      	ldr	r2, [pc, #44]	; (800d470 <TIM_Base_SetConfig+0xc0>)
 800d444:	4293      	cmp	r3, r2
 800d446:	d003      	beq.n	800d450 <TIM_Base_SetConfig+0xa0>
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	4a0a      	ldr	r2, [pc, #40]	; (800d474 <TIM_Base_SetConfig+0xc4>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d103      	bne.n	800d458 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	691a      	ldr	r2, [r3, #16]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2201      	movs	r2, #1
 800d45c:	615a      	str	r2, [r3, #20]
}
 800d45e:	bf00      	nop
 800d460:	3714      	adds	r7, #20
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr
 800d46a:	bf00      	nop
 800d46c:	40012c00 	.word	0x40012c00
 800d470:	40014000 	.word	0x40014000
 800d474:	40014400 	.word	0x40014400

0800d478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d478:	b480      	push	{r7}
 800d47a:	b087      	sub	sp, #28
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6a1b      	ldr	r3, [r3, #32]
 800d488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6a1b      	ldr	r3, [r3, #32]
 800d48e:	f023 0201 	bic.w	r2, r3, #1
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	699b      	ldr	r3, [r3, #24]
 800d49a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d4a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	011b      	lsls	r3, r3, #4
 800d4a8:	693a      	ldr	r2, [r7, #16]
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	f023 030a 	bic.w	r3, r3, #10
 800d4b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d4b6:	697a      	ldr	r2, [r7, #20]
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	693a      	ldr	r2, [r7, #16]
 800d4c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	697a      	ldr	r2, [r7, #20]
 800d4c8:	621a      	str	r2, [r3, #32]
}
 800d4ca:	bf00      	nop
 800d4cc:	371c      	adds	r7, #28
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr

0800d4d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d4d6:	b480      	push	{r7}
 800d4d8:	b087      	sub	sp, #28
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	60f8      	str	r0, [r7, #12]
 800d4de:	60b9      	str	r1, [r7, #8]
 800d4e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6a1b      	ldr	r3, [r3, #32]
 800d4e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	6a1b      	ldr	r3, [r3, #32]
 800d4ec:	f023 0210 	bic.w	r2, r3, #16
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	699b      	ldr	r3, [r3, #24]
 800d4f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d500:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	031b      	lsls	r3, r3, #12
 800d506:	693a      	ldr	r2, [r7, #16]
 800d508:	4313      	orrs	r3, r2
 800d50a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d512:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	011b      	lsls	r3, r3, #4
 800d518:	697a      	ldr	r2, [r7, #20]
 800d51a:	4313      	orrs	r3, r2
 800d51c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	693a      	ldr	r2, [r7, #16]
 800d522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	697a      	ldr	r2, [r7, #20]
 800d528:	621a      	str	r2, [r3, #32]
}
 800d52a:	bf00      	nop
 800d52c:	371c      	adds	r7, #28
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr

0800d536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d536:	b480      	push	{r7}
 800d538:	b085      	sub	sp, #20
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
 800d53e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d54c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d54e:	683a      	ldr	r2, [r7, #0]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	4313      	orrs	r3, r2
 800d554:	f043 0307 	orr.w	r3, r3, #7
 800d558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	68fa      	ldr	r2, [r7, #12]
 800d55e:	609a      	str	r2, [r3, #8]
}
 800d560:	bf00      	nop
 800d562:	3714      	adds	r7, #20
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b087      	sub	sp, #28
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	607a      	str	r2, [r7, #4]
 800d578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	689b      	ldr	r3, [r3, #8]
 800d57e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	021a      	lsls	r2, r3, #8
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	431a      	orrs	r2, r3
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	4313      	orrs	r3, r2
 800d594:	697a      	ldr	r2, [r7, #20]
 800d596:	4313      	orrs	r3, r2
 800d598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	697a      	ldr	r2, [r7, #20]
 800d59e:	609a      	str	r2, [r3, #8]
}
 800d5a0:	bf00      	nop
 800d5a2:	371c      	adds	r7, #28
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b085      	sub	sp, #20
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d101      	bne.n	800d5c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d5c0:	2302      	movs	r3, #2
 800d5c2:	e04f      	b.n	800d664 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2202      	movs	r2, #2
 800d5d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4a21      	ldr	r2, [pc, #132]	; (800d670 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d108      	bne.n	800d600 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d5f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	685b      	ldr	r3, [r3, #4]
 800d5fa:	68fa      	ldr	r2, [r7, #12]
 800d5fc:	4313      	orrs	r3, r2
 800d5fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	68fa      	ldr	r2, [r7, #12]
 800d60e:	4313      	orrs	r3, r2
 800d610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	68fa      	ldr	r2, [r7, #12]
 800d618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4a14      	ldr	r2, [pc, #80]	; (800d670 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d009      	beq.n	800d638 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d62c:	d004      	beq.n	800d638 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a10      	ldr	r2, [pc, #64]	; (800d674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d10c      	bne.n	800d652 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d63e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	689b      	ldr	r3, [r3, #8]
 800d644:	68ba      	ldr	r2, [r7, #8]
 800d646:	4313      	orrs	r3, r2
 800d648:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	68ba      	ldr	r2, [r7, #8]
 800d650:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2201      	movs	r2, #1
 800d656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	3714      	adds	r7, #20
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr
 800d670:	40012c00 	.word	0x40012c00
 800d674:	40014000 	.word	0x40014000

0800d678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d678:	b480      	push	{r7}
 800d67a:	b083      	sub	sp, #12
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d680:	bf00      	nop
 800d682:	370c      	adds	r7, #12
 800d684:	46bd      	mov	sp, r7
 800d686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68a:	4770      	bx	lr

0800d68c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d68c:	b480      	push	{r7}
 800d68e:	b083      	sub	sp, #12
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d694:	bf00      	nop
 800d696:	370c      	adds	r7, #12
 800d698:	46bd      	mov	sp, r7
 800d69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69e:	4770      	bx	lr

0800d6a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d6a8:	bf00      	nop
 800d6aa:	370c      	adds	r7, #12
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr

0800d6b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b082      	sub	sp, #8
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d101      	bne.n	800d6c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e040      	b.n	800d748 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d106      	bne.n	800d6dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f7f8 fc5e 	bl	8005f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2224      	movs	r2, #36	; 0x24
 800d6e0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f022 0201 	bic.w	r2, r2, #1
 800d6f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d002      	beq.n	800d700 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 feb0 	bl	800e460 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f000 fc81 	bl	800e008 <UART_SetConfig>
 800d706:	4603      	mov	r3, r0
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d101      	bne.n	800d710 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800d70c:	2301      	movs	r3, #1
 800d70e:	e01b      	b.n	800d748 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	685a      	ldr	r2, [r3, #4]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d71e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	689a      	ldr	r2, [r3, #8]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d72e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f042 0201 	orr.w	r2, r2, #1
 800d73e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 ff2f 	bl	800e5a4 <UART_CheckIdleState>
 800d746:	4603      	mov	r3, r0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b08a      	sub	sp, #40	; 0x28
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	4613      	mov	r3, r2
 800d75c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d764:	2b20      	cmp	r3, #32
 800d766:	d137      	bne.n	800d7d8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d002      	beq.n	800d774 <HAL_UART_Receive_DMA+0x24>
 800d76e:	88fb      	ldrh	r3, [r7, #6]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d101      	bne.n	800d778 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d774:	2301      	movs	r3, #1
 800d776:	e030      	b.n	800d7da <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2200      	movs	r2, #0
 800d77c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4a18      	ldr	r2, [pc, #96]	; (800d7e4 <HAL_UART_Receive_DMA+0x94>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d01f      	beq.n	800d7c8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d792:	2b00      	cmp	r3, #0
 800d794:	d018      	beq.n	800d7c8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	e853 3f00 	ldrex	r3, [r3]
 800d7a2:	613b      	str	r3, [r7, #16]
   return(result);
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d7aa:	627b      	str	r3, [r7, #36]	; 0x24
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b4:	623b      	str	r3, [r7, #32]
 800d7b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b8:	69f9      	ldr	r1, [r7, #28]
 800d7ba:	6a3a      	ldr	r2, [r7, #32]
 800d7bc:	e841 2300 	strex	r3, r2, [r1]
 800d7c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d1e6      	bne.n	800d796 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d7c8:	88fb      	ldrh	r3, [r7, #6]
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	68b9      	ldr	r1, [r7, #8]
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f000 fff8 	bl	800e7c4 <UART_Start_Receive_DMA>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	e000      	b.n	800d7da <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d7d8:	2302      	movs	r3, #2
  }
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3728      	adds	r7, #40	; 0x28
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	40008000 	.word	0x40008000

0800d7e8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b0a0      	sub	sp, #128	; 0x80
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
#else
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7f8:	e853 3f00 	ldrex	r3, [r3]
 800d7fc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d7fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d800:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800d804:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	461a      	mov	r2, r3
 800d80c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d80e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d810:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d812:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d814:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d816:	e841 2300 	strex	r3, r2, [r1]
 800d81a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d81c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d1e6      	bne.n	800d7f0 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	3308      	adds	r3, #8
 800d828:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d82a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d82c:	e853 3f00 	ldrex	r3, [r3]
 800d830:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d834:	f023 0301 	bic.w	r3, r3, #1
 800d838:	67bb      	str	r3, [r7, #120]	; 0x78
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	3308      	adds	r3, #8
 800d840:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d842:	657a      	str	r2, [r7, #84]	; 0x54
 800d844:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d846:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d848:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d84a:	e841 2300 	strex	r3, r2, [r1]
 800d84e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d852:	2b00      	cmp	r3, #0
 800d854:	d1e5      	bne.n	800d822 <HAL_UART_Abort+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d118      	bne.n	800d890 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d866:	e853 3f00 	ldrex	r3, [r3]
 800d86a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86e:	f023 0310 	bic.w	r3, r3, #16
 800d872:	677b      	str	r3, [r7, #116]	; 0x74
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	461a      	mov	r2, r3
 800d87a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d87c:	643b      	str	r3, [r7, #64]	; 0x40
 800d87e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d880:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d882:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d884:	e841 2300 	strex	r3, r2, [r1]
 800d888:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d1e6      	bne.n	800d85e <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d89a:	2b80      	cmp	r3, #128	; 0x80
 800d89c:	d137      	bne.n	800d90e <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	3308      	adds	r3, #8
 800d8a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8a6:	6a3b      	ldr	r3, [r7, #32]
 800d8a8:	e853 3f00 	ldrex	r3, [r3]
 800d8ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8b4:	673b      	str	r3, [r7, #112]	; 0x70
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	3308      	adds	r3, #8
 800d8bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d8be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d8c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8c6:	e841 2300 	strex	r3, r2, [r1]
 800d8ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d1e5      	bne.n	800d89e <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d019      	beq.n	800d90e <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8de:	2200      	movs	r2, #0
 800d8e0:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7fa fa7a 	bl	8007de0 <HAL_DMA_Abort>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00d      	beq.n	800d90e <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f7fa fba0 	bl	800803c <HAL_DMA_GetError>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b20      	cmp	r3, #32
 800d900:	d105      	bne.n	800d90e <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2210      	movs	r2, #16
 800d906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d90a:	2303      	movs	r3, #3
 800d90c:	e063      	b.n	800d9d6 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	689b      	ldr	r3, [r3, #8]
 800d914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d918:	2b40      	cmp	r3, #64	; 0x40
 800d91a:	d137      	bne.n	800d98c <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	3308      	adds	r3, #8
 800d922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	e853 3f00 	ldrex	r3, [r3]
 800d92a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d932:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	3308      	adds	r3, #8
 800d93a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d93c:	61ba      	str	r2, [r7, #24]
 800d93e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d940:	6979      	ldr	r1, [r7, #20]
 800d942:	69ba      	ldr	r2, [r7, #24]
 800d944:	e841 2300 	strex	r3, r2, [r1]
 800d948:	613b      	str	r3, [r7, #16]
   return(result);
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d1e5      	bne.n	800d91c <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d954:	2b00      	cmp	r3, #0
 800d956:	d019      	beq.n	800d98c <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d95c:	2200      	movs	r2, #0
 800d95e:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d964:	4618      	mov	r0, r3
 800d966:	f7fa fa3b 	bl	8007de0 <HAL_DMA_Abort>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00d      	beq.n	800d98c <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d974:	4618      	mov	r0, r3
 800d976:	f7fa fb61 	bl	800803c <HAL_DMA_GetError>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b20      	cmp	r3, #32
 800d97e:	d105      	bne.n	800d98c <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2210      	movs	r2, #16
 800d984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d988:	2303      	movs	r3, #3
 800d98a:	e024      	b.n	800d9d6 <HAL_UART_Abort+0x1ee>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2200      	movs	r2, #0
 800d990:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2200      	movs	r2, #0
 800d998:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	220f      	movs	r2, #15
 800d9a2:	621a      	str	r2, [r3, #32]
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	8b1b      	ldrh	r3, [r3, #24]
 800d9aa:	b29a      	uxth	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f042 0208 	orr.w	r2, r2, #8
 800d9b4:	b292      	uxth	r2, r2
 800d9b6:	831a      	strh	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2220      	movs	r2, #32
 800d9bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2220      	movs	r2, #32
 800d9c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	661a      	str	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d9d4:	2300      	movs	r3, #0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3780      	adds	r7, #128	; 0x80
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
	...

0800d9e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b0ba      	sub	sp, #232	; 0xe8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	69db      	ldr	r3, [r3, #28]
 800d9ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800da06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800da0a:	f640 030f 	movw	r3, #2063	; 0x80f
 800da0e:	4013      	ands	r3, r2
 800da10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800da14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d115      	bne.n	800da48 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800da1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da20:	f003 0320 	and.w	r3, r3, #32
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00f      	beq.n	800da48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800da28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da2c:	f003 0320 	and.w	r3, r3, #32
 800da30:	2b00      	cmp	r3, #0
 800da32:	d009      	beq.n	800da48 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f000 82ae 	beq.w	800df9a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	4798      	blx	r3
      }
      return;
 800da46:	e2a8      	b.n	800df9a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800da48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	f000 8117 	beq.w	800dc80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800da52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da56:	f003 0301 	and.w	r3, r3, #1
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d106      	bne.n	800da6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800da5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800da62:	4b85      	ldr	r3, [pc, #532]	; (800dc78 <HAL_UART_IRQHandler+0x298>)
 800da64:	4013      	ands	r3, r2
 800da66:	2b00      	cmp	r3, #0
 800da68:	f000 810a 	beq.w	800dc80 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800da6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da70:	f003 0301 	and.w	r3, r3, #1
 800da74:	2b00      	cmp	r3, #0
 800da76:	d011      	beq.n	800da9c <HAL_UART_IRQHandler+0xbc>
 800da78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00b      	beq.n	800da9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2201      	movs	r2, #1
 800da8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da92:	f043 0201 	orr.w	r2, r3, #1
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800da9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800daa0:	f003 0302 	and.w	r3, r3, #2
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d011      	beq.n	800dacc <HAL_UART_IRQHandler+0xec>
 800daa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800daac:	f003 0301 	and.w	r3, r3, #1
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d00b      	beq.n	800dacc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2202      	movs	r2, #2
 800daba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dac2:	f043 0204 	orr.w	r2, r3, #4
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dacc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dad0:	f003 0304 	and.w	r3, r3, #4
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d011      	beq.n	800dafc <HAL_UART_IRQHandler+0x11c>
 800dad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dadc:	f003 0301 	and.w	r3, r3, #1
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00b      	beq.n	800dafc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2204      	movs	r2, #4
 800daea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800daf2:	f043 0202 	orr.w	r2, r3, #2
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db00:	f003 0308 	and.w	r3, r3, #8
 800db04:	2b00      	cmp	r3, #0
 800db06:	d017      	beq.n	800db38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800db08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db0c:	f003 0320 	and.w	r3, r3, #32
 800db10:	2b00      	cmp	r3, #0
 800db12:	d105      	bne.n	800db20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800db14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00b      	beq.n	800db38 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	2208      	movs	r2, #8
 800db26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db2e:	f043 0208 	orr.w	r2, r3, #8
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800db38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db40:	2b00      	cmp	r3, #0
 800db42:	d012      	beq.n	800db6a <HAL_UART_IRQHandler+0x18a>
 800db44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d00c      	beq.n	800db6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db60:	f043 0220 	orr.w	r2, r3, #32
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db70:	2b00      	cmp	r3, #0
 800db72:	f000 8214 	beq.w	800df9e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800db76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db7a:	f003 0320 	and.w	r3, r3, #32
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d00d      	beq.n	800db9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800db82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db86:	f003 0320 	and.w	r3, r3, #32
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d007      	beq.n	800db9e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db92:	2b00      	cmp	r3, #0
 800db94:	d003      	beq.n	800db9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dba4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbb2:	2b40      	cmp	r3, #64	; 0x40
 800dbb4:	d005      	beq.n	800dbc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dbb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dbba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d04f      	beq.n	800dc62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 fec4 	bl	800e950 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	689b      	ldr	r3, [r3, #8]
 800dbce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbd2:	2b40      	cmp	r3, #64	; 0x40
 800dbd4:	d141      	bne.n	800dc5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	3308      	adds	r3, #8
 800dbdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dbe4:	e853 3f00 	ldrex	r3, [r3]
 800dbe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dbec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dbf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	3308      	adds	r3, #8
 800dbfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dc02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dc06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dc0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dc12:	e841 2300 	strex	r3, r2, [r1]
 800dc16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800dc1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d1d9      	bne.n	800dbd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d013      	beq.n	800dc52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc2e:	4a13      	ldr	r2, [pc, #76]	; (800dc7c <HAL_UART_IRQHandler+0x29c>)
 800dc30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7fa f910 	bl	8007e5c <HAL_DMA_Abort_IT>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d017      	beq.n	800dc72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800dc4c:	4610      	mov	r0, r2
 800dc4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc50:	e00f      	b.n	800dc72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 f9c2 	bl	800dfdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc58:	e00b      	b.n	800dc72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 f9be 	bl	800dfdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc60:	e007      	b.n	800dc72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 f9ba 	bl	800dfdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800dc70:	e195      	b.n	800df9e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc72:	bf00      	nop
    return;
 800dc74:	e193      	b.n	800df9e <HAL_UART_IRQHandler+0x5be>
 800dc76:	bf00      	nop
 800dc78:	04000120 	.word	0x04000120
 800dc7c:	0800ec01 	.word	0x0800ec01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	f040 814e 	bne.w	800df26 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dc8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc8e:	f003 0310 	and.w	r3, r3, #16
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f000 8147 	beq.w	800df26 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dc98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc9c:	f003 0310 	and.w	r3, r3, #16
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	f000 8140 	beq.w	800df26 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2210      	movs	r2, #16
 800dcac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcb8:	2b40      	cmp	r3, #64	; 0x40
 800dcba:	f040 80b8 	bne.w	800de2e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dcca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	f000 8167 	beq.w	800dfa2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dcda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dcde:	429a      	cmp	r2, r3
 800dce0:	f080 815f 	bcs.w	800dfa2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dcea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f003 0320 	and.w	r3, r3, #32
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f040 8086 	bne.w	800de0c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd0c:	e853 3f00 	ldrex	r3, [r3]
 800dd10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dd14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	461a      	mov	r2, r3
 800dd26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dd2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dd2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dd36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dd3a:	e841 2300 	strex	r3, r2, [r1]
 800dd3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dd42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d1da      	bne.n	800dd00 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	3308      	adds	r3, #8
 800dd50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd54:	e853 3f00 	ldrex	r3, [r3]
 800dd58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dd5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd5c:	f023 0301 	bic.w	r3, r3, #1
 800dd60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	3308      	adds	r3, #8
 800dd6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dd6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dd72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dd76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dd7a:	e841 2300 	strex	r3, r2, [r1]
 800dd7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dd80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d1e1      	bne.n	800dd4a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	3308      	adds	r3, #8
 800dd8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dd90:	e853 3f00 	ldrex	r3, [r3]
 800dd94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dd96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	3308      	adds	r3, #8
 800dda6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ddaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ddac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ddb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ddb2:	e841 2300 	strex	r3, r2, [r1]
 800ddb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ddb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d1e3      	bne.n	800dd86 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2220      	movs	r2, #32
 800ddc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddd4:	e853 3f00 	ldrex	r3, [r3]
 800ddd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ddda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dddc:	f023 0310 	bic.w	r3, r3, #16
 800dde0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	461a      	mov	r2, r3
 800ddea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ddee:	65bb      	str	r3, [r7, #88]	; 0x58
 800ddf0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ddf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ddf6:	e841 2300 	strex	r3, r2, [r1]
 800ddfa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ddfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d1e4      	bne.n	800ddcc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de06:	4618      	mov	r0, r3
 800de08:	f7f9 ffea 	bl	8007de0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2202      	movs	r2, #2
 800de10:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800de1e:	b29b      	uxth	r3, r3
 800de20:	1ad3      	subs	r3, r2, r3
 800de22:	b29b      	uxth	r3, r3
 800de24:	4619      	mov	r1, r3
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 f8e2 	bl	800dff0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800de2c:	e0b9      	b.n	800dfa2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	1ad3      	subs	r3, r2, r3
 800de3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800de48:	b29b      	uxth	r3, r3
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f000 80ab 	beq.w	800dfa6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800de50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800de54:	2b00      	cmp	r3, #0
 800de56:	f000 80a6 	beq.w	800dfa6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de62:	e853 3f00 	ldrex	r3, [r3]
 800de66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800de68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	461a      	mov	r2, r3
 800de78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800de7c:	647b      	str	r3, [r7, #68]	; 0x44
 800de7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800de82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de84:	e841 2300 	strex	r3, r2, [r1]
 800de88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800de8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d1e4      	bne.n	800de5a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	3308      	adds	r3, #8
 800de96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9a:	e853 3f00 	ldrex	r3, [r3]
 800de9e:	623b      	str	r3, [r7, #32]
   return(result);
 800dea0:	6a3b      	ldr	r3, [r7, #32]
 800dea2:	f023 0301 	bic.w	r3, r3, #1
 800dea6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	3308      	adds	r3, #8
 800deb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800deb4:	633a      	str	r2, [r7, #48]	; 0x30
 800deb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800deba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800debc:	e841 2300 	strex	r3, r2, [r1]
 800dec0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d1e3      	bne.n	800de90 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2220      	movs	r2, #32
 800decc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2200      	movs	r2, #0
 800ded4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2200      	movs	r2, #0
 800deda:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	e853 3f00 	ldrex	r3, [r3]
 800dee8:	60fb      	str	r3, [r7, #12]
   return(result);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f023 0310 	bic.w	r3, r3, #16
 800def0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	461a      	mov	r2, r3
 800defa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800defe:	61fb      	str	r3, [r7, #28]
 800df00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df02:	69b9      	ldr	r1, [r7, #24]
 800df04:	69fa      	ldr	r2, [r7, #28]
 800df06:	e841 2300 	strex	r3, r2, [r1]
 800df0a:	617b      	str	r3, [r7, #20]
   return(result);
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d1e4      	bne.n	800dedc <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2202      	movs	r2, #2
 800df16:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800df18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800df1c:	4619      	mov	r1, r3
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f000 f866 	bl	800dff0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800df24:	e03f      	b.n	800dfa6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800df26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d00e      	beq.n	800df50 <HAL_UART_IRQHandler+0x570>
 800df32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800df36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d008      	beq.n	800df50 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800df46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 fe99 	bl	800ec80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df4e:	e02d      	b.n	800dfac <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800df50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d00e      	beq.n	800df7a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800df5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df64:	2b00      	cmp	r3, #0
 800df66:	d008      	beq.n	800df7a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d01c      	beq.n	800dfaa <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	4798      	blx	r3
    }
    return;
 800df78:	e017      	b.n	800dfaa <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800df7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df82:	2b00      	cmp	r3, #0
 800df84:	d012      	beq.n	800dfac <HAL_UART_IRQHandler+0x5cc>
 800df86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d00c      	beq.n	800dfac <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f000 fe4a 	bl	800ec2c <UART_EndTransmit_IT>
    return;
 800df98:	e008      	b.n	800dfac <HAL_UART_IRQHandler+0x5cc>
      return;
 800df9a:	bf00      	nop
 800df9c:	e006      	b.n	800dfac <HAL_UART_IRQHandler+0x5cc>
    return;
 800df9e:	bf00      	nop
 800dfa0:	e004      	b.n	800dfac <HAL_UART_IRQHandler+0x5cc>
      return;
 800dfa2:	bf00      	nop
 800dfa4:	e002      	b.n	800dfac <HAL_UART_IRQHandler+0x5cc>
      return;
 800dfa6:	bf00      	nop
 800dfa8:	e000      	b.n	800dfac <HAL_UART_IRQHandler+0x5cc>
    return;
 800dfaa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800dfac:	37e8      	adds	r7, #232	; 0xe8
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	bf00      	nop

0800dfb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800dfbc:	bf00      	nop
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800dfd0:	bf00      	nop
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr

0800dfdc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b083      	sub	sp, #12
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dfe4:	bf00      	nop
 800dfe6:	370c      	adds	r7, #12
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfee:	4770      	bx	lr

0800dff0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b083      	sub	sp, #12
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	460b      	mov	r3, r1
 800dffa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800dffc:	bf00      	nop
 800dffe:	370c      	adds	r7, #12
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e00c:	b08a      	sub	sp, #40	; 0x28
 800e00e:	af00      	add	r7, sp, #0
 800e010:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e012:	2300      	movs	r3, #0
 800e014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	689a      	ldr	r2, [r3, #8]
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	691b      	ldr	r3, [r3, #16]
 800e020:	431a      	orrs	r2, r3
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	695b      	ldr	r3, [r3, #20]
 800e026:	431a      	orrs	r2, r3
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	69db      	ldr	r3, [r3, #28]
 800e02c:	4313      	orrs	r3, r2
 800e02e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	681a      	ldr	r2, [r3, #0]
 800e036:	4bb4      	ldr	r3, [pc, #720]	; (800e308 <UART_SetConfig+0x300>)
 800e038:	4013      	ands	r3, r2
 800e03a:	68fa      	ldr	r2, [r7, #12]
 800e03c:	6812      	ldr	r2, [r2, #0]
 800e03e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e040:	430b      	orrs	r3, r1
 800e042:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	68da      	ldr	r2, [r3, #12]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	430a      	orrs	r2, r1
 800e058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	699b      	ldr	r3, [r3, #24]
 800e05e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4aa9      	ldr	r2, [pc, #676]	; (800e30c <UART_SetConfig+0x304>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d004      	beq.n	800e074 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	6a1b      	ldr	r3, [r3, #32]
 800e06e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e070:	4313      	orrs	r3, r2
 800e072:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	689b      	ldr	r3, [r3, #8]
 800e07a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e084:	430a      	orrs	r2, r1
 800e086:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4aa0      	ldr	r2, [pc, #640]	; (800e310 <UART_SetConfig+0x308>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d126      	bne.n	800e0e0 <UART_SetConfig+0xd8>
 800e092:	4ba0      	ldr	r3, [pc, #640]	; (800e314 <UART_SetConfig+0x30c>)
 800e094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e098:	f003 0303 	and.w	r3, r3, #3
 800e09c:	2b03      	cmp	r3, #3
 800e09e:	d81b      	bhi.n	800e0d8 <UART_SetConfig+0xd0>
 800e0a0:	a201      	add	r2, pc, #4	; (adr r2, 800e0a8 <UART_SetConfig+0xa0>)
 800e0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a6:	bf00      	nop
 800e0a8:	0800e0b9 	.word	0x0800e0b9
 800e0ac:	0800e0c9 	.word	0x0800e0c9
 800e0b0:	0800e0c1 	.word	0x0800e0c1
 800e0b4:	0800e0d1 	.word	0x0800e0d1
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e0be:	e080      	b.n	800e1c2 <UART_SetConfig+0x1ba>
 800e0c0:	2302      	movs	r3, #2
 800e0c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e0c6:	e07c      	b.n	800e1c2 <UART_SetConfig+0x1ba>
 800e0c8:	2304      	movs	r3, #4
 800e0ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e0ce:	e078      	b.n	800e1c2 <UART_SetConfig+0x1ba>
 800e0d0:	2308      	movs	r3, #8
 800e0d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e0d6:	e074      	b.n	800e1c2 <UART_SetConfig+0x1ba>
 800e0d8:	2310      	movs	r3, #16
 800e0da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e0de:	e070      	b.n	800e1c2 <UART_SetConfig+0x1ba>
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a8c      	ldr	r2, [pc, #560]	; (800e318 <UART_SetConfig+0x310>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d138      	bne.n	800e15c <UART_SetConfig+0x154>
 800e0ea:	4b8a      	ldr	r3, [pc, #552]	; (800e314 <UART_SetConfig+0x30c>)
 800e0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0f0:	f003 030c 	and.w	r3, r3, #12
 800e0f4:	2b0c      	cmp	r3, #12
 800e0f6:	d82d      	bhi.n	800e154 <UART_SetConfig+0x14c>
 800e0f8:	a201      	add	r2, pc, #4	; (adr r2, 800e100 <UART_SetConfig+0xf8>)
 800e0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0fe:	bf00      	nop
 800e100:	0800e135 	.word	0x0800e135
 800e104:	0800e155 	.word	0x0800e155
 800e108:	0800e155 	.word	0x0800e155
 800e10c:	0800e155 	.word	0x0800e155
 800e110:	0800e145 	.word	0x0800e145
 800e114:	0800e155 	.word	0x0800e155
 800e118:	0800e155 	.word	0x0800e155
 800e11c:	0800e155 	.word	0x0800e155
 800e120:	0800e13d 	.word	0x0800e13d
 800e124:	0800e155 	.word	0x0800e155
 800e128:	0800e155 	.word	0x0800e155
 800e12c:	0800e155 	.word	0x0800e155
 800e130:	0800e14d 	.word	0x0800e14d
 800e134:	2300      	movs	r3, #0
 800e136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e13a:	e042      	b.n	800e1c2 <UART_SetConfig+0x1ba>
 800e13c:	2302      	movs	r3, #2
 800e13e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e142:	e03e      	b.n	800e1c2 <UART_SetConfig+0x1ba>
 800e144:	2304      	movs	r3, #4
 800e146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e14a:	e03a      	b.n	800e1c2 <UART_SetConfig+0x1ba>
 800e14c:	2308      	movs	r3, #8
 800e14e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e152:	e036      	b.n	800e1c2 <UART_SetConfig+0x1ba>
 800e154:	2310      	movs	r3, #16
 800e156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e15a:	e032      	b.n	800e1c2 <UART_SetConfig+0x1ba>
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	4a6a      	ldr	r2, [pc, #424]	; (800e30c <UART_SetConfig+0x304>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d12a      	bne.n	800e1bc <UART_SetConfig+0x1b4>
 800e166:	4b6b      	ldr	r3, [pc, #428]	; (800e314 <UART_SetConfig+0x30c>)
 800e168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e16c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e170:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e174:	d01a      	beq.n	800e1ac <UART_SetConfig+0x1a4>
 800e176:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e17a:	d81b      	bhi.n	800e1b4 <UART_SetConfig+0x1ac>
 800e17c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e180:	d00c      	beq.n	800e19c <UART_SetConfig+0x194>
 800e182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e186:	d815      	bhi.n	800e1b4 <UART_SetConfig+0x1ac>
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d003      	beq.n	800e194 <UART_SetConfig+0x18c>
 800e18c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e190:	d008      	beq.n	800e1a4 <UART_SetConfig+0x19c>
 800e192:	e00f      	b.n	800e1b4 <UART_SetConfig+0x1ac>
 800e194:	2300      	movs	r3, #0
 800e196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e19a:	e012      	b.n	800e1c2 <UART_SetConfig+0x1ba>
 800e19c:	2302      	movs	r3, #2
 800e19e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e1a2:	e00e      	b.n	800e1c2 <UART_SetConfig+0x1ba>
 800e1a4:	2304      	movs	r3, #4
 800e1a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e1aa:	e00a      	b.n	800e1c2 <UART_SetConfig+0x1ba>
 800e1ac:	2308      	movs	r3, #8
 800e1ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e1b2:	e006      	b.n	800e1c2 <UART_SetConfig+0x1ba>
 800e1b4:	2310      	movs	r3, #16
 800e1b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800e1ba:	e002      	b.n	800e1c2 <UART_SetConfig+0x1ba>
 800e1bc:	2310      	movs	r3, #16
 800e1be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4a51      	ldr	r2, [pc, #324]	; (800e30c <UART_SetConfig+0x304>)
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d17a      	bne.n	800e2c2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e1cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e1d0:	2b08      	cmp	r3, #8
 800e1d2:	d824      	bhi.n	800e21e <UART_SetConfig+0x216>
 800e1d4:	a201      	add	r2, pc, #4	; (adr r2, 800e1dc <UART_SetConfig+0x1d4>)
 800e1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1da:	bf00      	nop
 800e1dc:	0800e201 	.word	0x0800e201
 800e1e0:	0800e21f 	.word	0x0800e21f
 800e1e4:	0800e209 	.word	0x0800e209
 800e1e8:	0800e21f 	.word	0x0800e21f
 800e1ec:	0800e20f 	.word	0x0800e20f
 800e1f0:	0800e21f 	.word	0x0800e21f
 800e1f4:	0800e21f 	.word	0x0800e21f
 800e1f8:	0800e21f 	.word	0x0800e21f
 800e1fc:	0800e217 	.word	0x0800e217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e200:	f7fd f974 	bl	800b4ec <HAL_RCC_GetPCLK1Freq>
 800e204:	61f8      	str	r0, [r7, #28]
        break;
 800e206:	e010      	b.n	800e22a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e208:	4b44      	ldr	r3, [pc, #272]	; (800e31c <UART_SetConfig+0x314>)
 800e20a:	61fb      	str	r3, [r7, #28]
        break;
 800e20c:	e00d      	b.n	800e22a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e20e:	f7fd f8d5 	bl	800b3bc <HAL_RCC_GetSysClockFreq>
 800e212:	61f8      	str	r0, [r7, #28]
        break;
 800e214:	e009      	b.n	800e22a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e21a:	61fb      	str	r3, [r7, #28]
        break;
 800e21c:	e005      	b.n	800e22a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800e21e:	2300      	movs	r3, #0
 800e220:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e222:	2301      	movs	r3, #1
 800e224:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e228:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f000 8107 	beq.w	800e440 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	685a      	ldr	r2, [r3, #4]
 800e236:	4613      	mov	r3, r2
 800e238:	005b      	lsls	r3, r3, #1
 800e23a:	4413      	add	r3, r2
 800e23c:	69fa      	ldr	r2, [r7, #28]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d305      	bcc.n	800e24e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e248:	69fa      	ldr	r2, [r7, #28]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d903      	bls.n	800e256 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800e24e:	2301      	movs	r3, #1
 800e250:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e254:	e0f4      	b.n	800e440 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	2200      	movs	r2, #0
 800e25a:	461c      	mov	r4, r3
 800e25c:	4615      	mov	r5, r2
 800e25e:	f04f 0200 	mov.w	r2, #0
 800e262:	f04f 0300 	mov.w	r3, #0
 800e266:	022b      	lsls	r3, r5, #8
 800e268:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800e26c:	0222      	lsls	r2, r4, #8
 800e26e:	68f9      	ldr	r1, [r7, #12]
 800e270:	6849      	ldr	r1, [r1, #4]
 800e272:	0849      	lsrs	r1, r1, #1
 800e274:	2000      	movs	r0, #0
 800e276:	4688      	mov	r8, r1
 800e278:	4681      	mov	r9, r0
 800e27a:	eb12 0a08 	adds.w	sl, r2, r8
 800e27e:	eb43 0b09 	adc.w	fp, r3, r9
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	2200      	movs	r2, #0
 800e288:	603b      	str	r3, [r7, #0]
 800e28a:	607a      	str	r2, [r7, #4]
 800e28c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e290:	4650      	mov	r0, sl
 800e292:	4659      	mov	r1, fp
 800e294:	f7f2 fcf8 	bl	8000c88 <__aeabi_uldivmod>
 800e298:	4602      	mov	r2, r0
 800e29a:	460b      	mov	r3, r1
 800e29c:	4613      	mov	r3, r2
 800e29e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e2a6:	d308      	bcc.n	800e2ba <UART_SetConfig+0x2b2>
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2ae:	d204      	bcs.n	800e2ba <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	69ba      	ldr	r2, [r7, #24]
 800e2b6:	60da      	str	r2, [r3, #12]
 800e2b8:	e0c2      	b.n	800e440 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e2c0:	e0be      	b.n	800e440 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	69db      	ldr	r3, [r3, #28]
 800e2c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2ca:	d16a      	bne.n	800e3a2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800e2cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e2d0:	2b08      	cmp	r3, #8
 800e2d2:	d834      	bhi.n	800e33e <UART_SetConfig+0x336>
 800e2d4:	a201      	add	r2, pc, #4	; (adr r2, 800e2dc <UART_SetConfig+0x2d4>)
 800e2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2da:	bf00      	nop
 800e2dc:	0800e301 	.word	0x0800e301
 800e2e0:	0800e321 	.word	0x0800e321
 800e2e4:	0800e329 	.word	0x0800e329
 800e2e8:	0800e33f 	.word	0x0800e33f
 800e2ec:	0800e32f 	.word	0x0800e32f
 800e2f0:	0800e33f 	.word	0x0800e33f
 800e2f4:	0800e33f 	.word	0x0800e33f
 800e2f8:	0800e33f 	.word	0x0800e33f
 800e2fc:	0800e337 	.word	0x0800e337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e300:	f7fd f8f4 	bl	800b4ec <HAL_RCC_GetPCLK1Freq>
 800e304:	61f8      	str	r0, [r7, #28]
        break;
 800e306:	e020      	b.n	800e34a <UART_SetConfig+0x342>
 800e308:	efff69f3 	.word	0xefff69f3
 800e30c:	40008000 	.word	0x40008000
 800e310:	40013800 	.word	0x40013800
 800e314:	40021000 	.word	0x40021000
 800e318:	40004400 	.word	0x40004400
 800e31c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e320:	f7fd f8fa 	bl	800b518 <HAL_RCC_GetPCLK2Freq>
 800e324:	61f8      	str	r0, [r7, #28]
        break;
 800e326:	e010      	b.n	800e34a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e328:	4b4c      	ldr	r3, [pc, #304]	; (800e45c <UART_SetConfig+0x454>)
 800e32a:	61fb      	str	r3, [r7, #28]
        break;
 800e32c:	e00d      	b.n	800e34a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e32e:	f7fd f845 	bl	800b3bc <HAL_RCC_GetSysClockFreq>
 800e332:	61f8      	str	r0, [r7, #28]
        break;
 800e334:	e009      	b.n	800e34a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e33a:	61fb      	str	r3, [r7, #28]
        break;
 800e33c:	e005      	b.n	800e34a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800e33e:	2300      	movs	r3, #0
 800e340:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e342:	2301      	movs	r3, #1
 800e344:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e348:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e34a:	69fb      	ldr	r3, [r7, #28]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d077      	beq.n	800e440 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	005a      	lsls	r2, r3, #1
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	685b      	ldr	r3, [r3, #4]
 800e358:	085b      	lsrs	r3, r3, #1
 800e35a:	441a      	add	r2, r3
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	fbb2 f3f3 	udiv	r3, r2, r3
 800e364:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e366:	69bb      	ldr	r3, [r7, #24]
 800e368:	2b0f      	cmp	r3, #15
 800e36a:	d916      	bls.n	800e39a <UART_SetConfig+0x392>
 800e36c:	69bb      	ldr	r3, [r7, #24]
 800e36e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e372:	d212      	bcs.n	800e39a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e374:	69bb      	ldr	r3, [r7, #24]
 800e376:	b29b      	uxth	r3, r3
 800e378:	f023 030f 	bic.w	r3, r3, #15
 800e37c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	085b      	lsrs	r3, r3, #1
 800e382:	b29b      	uxth	r3, r3
 800e384:	f003 0307 	and.w	r3, r3, #7
 800e388:	b29a      	uxth	r2, r3
 800e38a:	8afb      	ldrh	r3, [r7, #22]
 800e38c:	4313      	orrs	r3, r2
 800e38e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	8afa      	ldrh	r2, [r7, #22]
 800e396:	60da      	str	r2, [r3, #12]
 800e398:	e052      	b.n	800e440 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800e39a:	2301      	movs	r3, #1
 800e39c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e3a0:	e04e      	b.n	800e440 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e3a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e3a6:	2b08      	cmp	r3, #8
 800e3a8:	d827      	bhi.n	800e3fa <UART_SetConfig+0x3f2>
 800e3aa:	a201      	add	r2, pc, #4	; (adr r2, 800e3b0 <UART_SetConfig+0x3a8>)
 800e3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b0:	0800e3d5 	.word	0x0800e3d5
 800e3b4:	0800e3dd 	.word	0x0800e3dd
 800e3b8:	0800e3e5 	.word	0x0800e3e5
 800e3bc:	0800e3fb 	.word	0x0800e3fb
 800e3c0:	0800e3eb 	.word	0x0800e3eb
 800e3c4:	0800e3fb 	.word	0x0800e3fb
 800e3c8:	0800e3fb 	.word	0x0800e3fb
 800e3cc:	0800e3fb 	.word	0x0800e3fb
 800e3d0:	0800e3f3 	.word	0x0800e3f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3d4:	f7fd f88a 	bl	800b4ec <HAL_RCC_GetPCLK1Freq>
 800e3d8:	61f8      	str	r0, [r7, #28]
        break;
 800e3da:	e014      	b.n	800e406 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e3dc:	f7fd f89c 	bl	800b518 <HAL_RCC_GetPCLK2Freq>
 800e3e0:	61f8      	str	r0, [r7, #28]
        break;
 800e3e2:	e010      	b.n	800e406 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e3e4:	4b1d      	ldr	r3, [pc, #116]	; (800e45c <UART_SetConfig+0x454>)
 800e3e6:	61fb      	str	r3, [r7, #28]
        break;
 800e3e8:	e00d      	b.n	800e406 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e3ea:	f7fc ffe7 	bl	800b3bc <HAL_RCC_GetSysClockFreq>
 800e3ee:	61f8      	str	r0, [r7, #28]
        break;
 800e3f0:	e009      	b.n	800e406 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e3f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e3f6:	61fb      	str	r3, [r7, #28]
        break;
 800e3f8:	e005      	b.n	800e406 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800e3fe:	2301      	movs	r3, #1
 800e400:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800e404:	bf00      	nop
    }

    if (pclk != 0U)
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d019      	beq.n	800e440 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	085a      	lsrs	r2, r3, #1
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	441a      	add	r2, r3
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e41e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e420:	69bb      	ldr	r3, [r7, #24]
 800e422:	2b0f      	cmp	r3, #15
 800e424:	d909      	bls.n	800e43a <UART_SetConfig+0x432>
 800e426:	69bb      	ldr	r3, [r7, #24]
 800e428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e42c:	d205      	bcs.n	800e43a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e42e:	69bb      	ldr	r3, [r7, #24]
 800e430:	b29a      	uxth	r2, r3
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	60da      	str	r2, [r3, #12]
 800e438:	e002      	b.n	800e440 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800e43a:	2301      	movs	r3, #1
 800e43c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	2200      	movs	r2, #0
 800e444:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2200      	movs	r2, #0
 800e44a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800e44c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800e450:	4618      	mov	r0, r3
 800e452:	3728      	adds	r7, #40	; 0x28
 800e454:	46bd      	mov	sp, r7
 800e456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e45a:	bf00      	nop
 800e45c:	00f42400 	.word	0x00f42400

0800e460 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e460:	b480      	push	{r7}
 800e462:	b083      	sub	sp, #12
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e46c:	f003 0308 	and.w	r3, r3, #8
 800e470:	2b00      	cmp	r3, #0
 800e472:	d00a      	beq.n	800e48a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	430a      	orrs	r2, r1
 800e488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e48e:	f003 0301 	and.w	r3, r3, #1
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00a      	beq.n	800e4ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	685b      	ldr	r3, [r3, #4]
 800e49c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	430a      	orrs	r2, r1
 800e4aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4b0:	f003 0302 	and.w	r3, r3, #2
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d00a      	beq.n	800e4ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	430a      	orrs	r2, r1
 800e4cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d2:	f003 0304 	and.w	r3, r3, #4
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00a      	beq.n	800e4f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	430a      	orrs	r2, r1
 800e4ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f4:	f003 0310 	and.w	r3, r3, #16
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d00a      	beq.n	800e512 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	689b      	ldr	r3, [r3, #8]
 800e502:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	430a      	orrs	r2, r1
 800e510:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e516:	f003 0320 	and.w	r3, r3, #32
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d00a      	beq.n	800e534 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	689b      	ldr	r3, [r3, #8]
 800e524:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	430a      	orrs	r2, r1
 800e532:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d01a      	beq.n	800e576 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	430a      	orrs	r2, r1
 800e554:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e55a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e55e:	d10a      	bne.n	800e576 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	430a      	orrs	r2, r1
 800e574:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e57a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00a      	beq.n	800e598 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	430a      	orrs	r2, r1
 800e596:	605a      	str	r2, [r3, #4]
  }
}
 800e598:	bf00      	nop
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b098      	sub	sp, #96	; 0x60
 800e5a8:	af02      	add	r7, sp, #8
 800e5aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e5b4:	f7f7 ff1a 	bl	80063ec <HAL_GetTick>
 800e5b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f003 0308 	and.w	r3, r3, #8
 800e5c4:	2b08      	cmp	r3, #8
 800e5c6:	d12e      	bne.n	800e626 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e5c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e5cc:	9300      	str	r3, [sp, #0]
 800e5ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 f88c 	bl	800e6f4 <UART_WaitOnFlagUntilTimeout>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d021      	beq.n	800e626 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ea:	e853 3f00 	ldrex	r3, [r3]
 800e5ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e5f6:	653b      	str	r3, [r7, #80]	; 0x50
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	461a      	mov	r2, r3
 800e5fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e600:	647b      	str	r3, [r7, #68]	; 0x44
 800e602:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e604:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e608:	e841 2300 	strex	r3, r2, [r1]
 800e60c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e610:	2b00      	cmp	r3, #0
 800e612:	d1e6      	bne.n	800e5e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2220      	movs	r2, #32
 800e618:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2200      	movs	r2, #0
 800e61e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e622:	2303      	movs	r3, #3
 800e624:	e062      	b.n	800e6ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f003 0304 	and.w	r3, r3, #4
 800e630:	2b04      	cmp	r3, #4
 800e632:	d149      	bne.n	800e6c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e634:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e63c:	2200      	movs	r2, #0
 800e63e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 f856 	bl	800e6f4 <UART_WaitOnFlagUntilTimeout>
 800e648:	4603      	mov	r3, r0
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d03c      	beq.n	800e6c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e656:	e853 3f00 	ldrex	r3, [r3]
 800e65a:	623b      	str	r3, [r7, #32]
   return(result);
 800e65c:	6a3b      	ldr	r3, [r7, #32]
 800e65e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e662:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	461a      	mov	r2, r3
 800e66a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e66c:	633b      	str	r3, [r7, #48]	; 0x30
 800e66e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e670:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e672:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e674:	e841 2300 	strex	r3, r2, [r1]
 800e678:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d1e6      	bne.n	800e64e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	3308      	adds	r3, #8
 800e686:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	e853 3f00 	ldrex	r3, [r3]
 800e68e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f023 0301 	bic.w	r3, r3, #1
 800e696:	64bb      	str	r3, [r7, #72]	; 0x48
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	3308      	adds	r3, #8
 800e69e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6a0:	61fa      	str	r2, [r7, #28]
 800e6a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6a4:	69b9      	ldr	r1, [r7, #24]
 800e6a6:	69fa      	ldr	r2, [r7, #28]
 800e6a8:	e841 2300 	strex	r3, r2, [r1]
 800e6ac:	617b      	str	r3, [r7, #20]
   return(result);
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d1e5      	bne.n	800e680 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2220      	movs	r2, #32
 800e6b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e6c4:	2303      	movs	r3, #3
 800e6c6:	e011      	b.n	800e6ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2220      	movs	r2, #32
 800e6cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2220      	movs	r2, #32
 800e6d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800e6ea:	2300      	movs	r3, #0
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3758      	adds	r7, #88	; 0x58
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	60b9      	str	r1, [r7, #8]
 800e6fe:	603b      	str	r3, [r7, #0]
 800e700:	4613      	mov	r3, r2
 800e702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e704:	e049      	b.n	800e79a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e70c:	d045      	beq.n	800e79a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e70e:	f7f7 fe6d 	bl	80063ec <HAL_GetTick>
 800e712:	4602      	mov	r2, r0
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	1ad3      	subs	r3, r2, r3
 800e718:	69ba      	ldr	r2, [r7, #24]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d302      	bcc.n	800e724 <UART_WaitOnFlagUntilTimeout+0x30>
 800e71e:	69bb      	ldr	r3, [r7, #24]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d101      	bne.n	800e728 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e724:	2303      	movs	r3, #3
 800e726:	e048      	b.n	800e7ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f003 0304 	and.w	r3, r3, #4
 800e732:	2b00      	cmp	r3, #0
 800e734:	d031      	beq.n	800e79a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	69db      	ldr	r3, [r3, #28]
 800e73c:	f003 0308 	and.w	r3, r3, #8
 800e740:	2b08      	cmp	r3, #8
 800e742:	d110      	bne.n	800e766 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2208      	movs	r2, #8
 800e74a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f000 f8ff 	bl	800e950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2208      	movs	r2, #8
 800e756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2200      	movs	r2, #0
 800e75e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800e762:	2301      	movs	r3, #1
 800e764:	e029      	b.n	800e7ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	69db      	ldr	r3, [r3, #28]
 800e76c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e774:	d111      	bne.n	800e79a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e77e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f000 f8e5 	bl	800e950 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	2220      	movs	r2, #32
 800e78a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	2200      	movs	r2, #0
 800e792:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800e796:	2303      	movs	r3, #3
 800e798:	e00f      	b.n	800e7ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	69da      	ldr	r2, [r3, #28]
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	4013      	ands	r3, r2
 800e7a4:	68ba      	ldr	r2, [r7, #8]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	bf0c      	ite	eq
 800e7aa:	2301      	moveq	r3, #1
 800e7ac:	2300      	movne	r3, #0
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	79fb      	ldrb	r3, [r7, #7]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d0a6      	beq.n	800e706 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e7b8:	2300      	movs	r3, #0
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3710      	adds	r7, #16
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
	...

0800e7c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b096      	sub	sp, #88	; 0x58
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	88fa      	ldrh	r2, [r7, #6]
 800e7dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2222      	movs	r2, #34	; 0x22
 800e7ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d028      	beq.n	800e84a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7fc:	4a3e      	ldr	r2, [pc, #248]	; (800e8f8 <UART_Start_Receive_DMA+0x134>)
 800e7fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e804:	4a3d      	ldr	r2, [pc, #244]	; (800e8fc <UART_Start_Receive_DMA+0x138>)
 800e806:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e80c:	4a3c      	ldr	r2, [pc, #240]	; (800e900 <UART_Start_Receive_DMA+0x13c>)
 800e80e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e814:	2200      	movs	r2, #0
 800e816:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	3324      	adds	r3, #36	; 0x24
 800e822:	4619      	mov	r1, r3
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e828:	461a      	mov	r2, r3
 800e82a:	88fb      	ldrh	r3, [r7, #6]
 800e82c:	f7f9 fa78 	bl	8007d20 <HAL_DMA_Start_IT>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d009      	beq.n	800e84a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	2210      	movs	r2, #16
 800e83a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	2220      	movs	r2, #32
 800e842:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800e846:	2301      	movs	r3, #1
 800e848:	e051      	b.n	800e8ee <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	691b      	ldr	r3, [r3, #16]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d018      	beq.n	800e884 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e85a:	e853 3f00 	ldrex	r3, [r3]
 800e85e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e866:	657b      	str	r3, [r7, #84]	; 0x54
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	461a      	mov	r2, r3
 800e86e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e870:	64bb      	str	r3, [r7, #72]	; 0x48
 800e872:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e874:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e876:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e878:	e841 2300 	strex	r3, r2, [r1]
 800e87c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e87e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e880:	2b00      	cmp	r3, #0
 800e882:	d1e6      	bne.n	800e852 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	3308      	adds	r3, #8
 800e88a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88e:	e853 3f00 	ldrex	r3, [r3]
 800e892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e896:	f043 0301 	orr.w	r3, r3, #1
 800e89a:	653b      	str	r3, [r7, #80]	; 0x50
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	3308      	adds	r3, #8
 800e8a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8a4:	637a      	str	r2, [r7, #52]	; 0x34
 800e8a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e8aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8ac:	e841 2300 	strex	r3, r2, [r1]
 800e8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d1e5      	bne.n	800e884 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	3308      	adds	r3, #8
 800e8be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	e853 3f00 	ldrex	r3, [r3]
 800e8c6:	613b      	str	r3, [r7, #16]
   return(result);
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	3308      	adds	r3, #8
 800e8d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e8d8:	623a      	str	r2, [r7, #32]
 800e8da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8dc:	69f9      	ldr	r1, [r7, #28]
 800e8de:	6a3a      	ldr	r2, [r7, #32]
 800e8e0:	e841 2300 	strex	r3, r2, [r1]
 800e8e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e8e6:	69bb      	ldr	r3, [r7, #24]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d1e5      	bne.n	800e8b8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800e8ec:	2300      	movs	r3, #0
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3758      	adds	r7, #88	; 0x58
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	0800ea19 	.word	0x0800ea19
 800e8fc:	0800eb45 	.word	0x0800eb45
 800e900:	0800eb83 	.word	0x0800eb83

0800e904 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e904:	b480      	push	{r7}
 800e906:	b089      	sub	sp, #36	; 0x24
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	e853 3f00 	ldrex	r3, [r3]
 800e918:	60bb      	str	r3, [r7, #8]
   return(result);
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e920:	61fb      	str	r3, [r7, #28]
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	461a      	mov	r2, r3
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	61bb      	str	r3, [r7, #24]
 800e92c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e92e:	6979      	ldr	r1, [r7, #20]
 800e930:	69ba      	ldr	r2, [r7, #24]
 800e932:	e841 2300 	strex	r3, r2, [r1]
 800e936:	613b      	str	r3, [r7, #16]
   return(result);
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d1e6      	bne.n	800e90c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2220      	movs	r2, #32
 800e942:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800e944:	bf00      	nop
 800e946:	3724      	adds	r7, #36	; 0x24
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr

0800e950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e950:	b480      	push	{r7}
 800e952:	b095      	sub	sp, #84	; 0x54
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e960:	e853 3f00 	ldrex	r3, [r3]
 800e964:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e96c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	461a      	mov	r2, r3
 800e974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e976:	643b      	str	r3, [r7, #64]	; 0x40
 800e978:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e97c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e97e:	e841 2300 	strex	r3, r2, [r1]
 800e982:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e986:	2b00      	cmp	r3, #0
 800e988:	d1e6      	bne.n	800e958 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	3308      	adds	r3, #8
 800e990:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e992:	6a3b      	ldr	r3, [r7, #32]
 800e994:	e853 3f00 	ldrex	r3, [r3]
 800e998:	61fb      	str	r3, [r7, #28]
   return(result);
 800e99a:	69fb      	ldr	r3, [r7, #28]
 800e99c:	f023 0301 	bic.w	r3, r3, #1
 800e9a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	3308      	adds	r3, #8
 800e9a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e9ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9b2:	e841 2300 	strex	r3, r2, [r1]
 800e9b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d1e5      	bne.n	800e98a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9c2:	2b01      	cmp	r3, #1
 800e9c4:	d118      	bne.n	800e9f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	e853 3f00 	ldrex	r3, [r3]
 800e9d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	f023 0310 	bic.w	r3, r3, #16
 800e9da:	647b      	str	r3, [r7, #68]	; 0x44
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9e4:	61bb      	str	r3, [r7, #24]
 800e9e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e8:	6979      	ldr	r1, [r7, #20]
 800e9ea:	69ba      	ldr	r2, [r7, #24]
 800e9ec:	e841 2300 	strex	r3, r2, [r1]
 800e9f0:	613b      	str	r3, [r7, #16]
   return(result);
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d1e6      	bne.n	800e9c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2220      	movs	r2, #32
 800e9fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2200      	movs	r2, #0
 800ea04:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ea0c:	bf00      	nop
 800ea0e:	3754      	adds	r7, #84	; 0x54
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr

0800ea18 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b09c      	sub	sp, #112	; 0x70
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea24:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f003 0320 	and.w	r3, r3, #32
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d171      	bne.n	800eb18 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800ea34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea36:	2200      	movs	r2, #0
 800ea38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea44:	e853 3f00 	ldrex	r3, [r3]
 800ea48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ea4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea50:	66bb      	str	r3, [r7, #104]	; 0x68
 800ea52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	461a      	mov	r2, r3
 800ea58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea5a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ea60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea62:	e841 2300 	strex	r3, r2, [r1]
 800ea66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ea68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d1e6      	bne.n	800ea3c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	3308      	adds	r3, #8
 800ea74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea78:	e853 3f00 	ldrex	r3, [r3]
 800ea7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ea7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea80:	f023 0301 	bic.w	r3, r3, #1
 800ea84:	667b      	str	r3, [r7, #100]	; 0x64
 800ea86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	3308      	adds	r3, #8
 800ea8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ea8e:	647a      	str	r2, [r7, #68]	; 0x44
 800ea90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea96:	e841 2300 	strex	r3, r2, [r1]
 800ea9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d1e5      	bne.n	800ea6e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eaa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	3308      	adds	r3, #8
 800eaa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaac:	e853 3f00 	ldrex	r3, [r3]
 800eab0:	623b      	str	r3, [r7, #32]
   return(result);
 800eab2:	6a3b      	ldr	r3, [r7, #32]
 800eab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eab8:	663b      	str	r3, [r7, #96]	; 0x60
 800eaba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	3308      	adds	r3, #8
 800eac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eac2:	633a      	str	r2, [r7, #48]	; 0x30
 800eac4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eaca:	e841 2300 	strex	r3, r2, [r1]
 800eace:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ead0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d1e5      	bne.n	800eaa2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ead6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ead8:	2220      	movs	r2, #32
 800eada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d118      	bne.n	800eb18 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	e853 3f00 	ldrex	r3, [r3]
 800eaf2:	60fb      	str	r3, [r7, #12]
   return(result);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f023 0310 	bic.w	r3, r3, #16
 800eafa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eafc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	461a      	mov	r2, r3
 800eb02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb04:	61fb      	str	r3, [r7, #28]
 800eb06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb08:	69b9      	ldr	r1, [r7, #24]
 800eb0a:	69fa      	ldr	r2, [r7, #28]
 800eb0c:	e841 2300 	strex	r3, r2, [r1]
 800eb10:	617b      	str	r3, [r7, #20]
   return(result);
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d1e6      	bne.n	800eae6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eb18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d107      	bne.n	800eb36 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eb30:	f7ff fa5e 	bl	800dff0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eb34:	e002      	b.n	800eb3c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800eb36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eb38:	f7f7 fafa 	bl	8006130 <HAL_UART_RxCpltCallback>
}
 800eb3c:	bf00      	nop
 800eb3e:	3770      	adds	r7, #112	; 0x70
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb50:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2201      	movs	r2, #1
 800eb56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d109      	bne.n	800eb74 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800eb66:	085b      	lsrs	r3, r3, #1
 800eb68:	b29b      	uxth	r3, r3
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	68f8      	ldr	r0, [r7, #12]
 800eb6e:	f7ff fa3f 	bl	800dff0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eb72:	e002      	b.n	800eb7a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800eb74:	68f8      	ldr	r0, [r7, #12]
 800eb76:	f7ff fa27 	bl	800dfc8 <HAL_UART_RxHalfCpltCallback>
}
 800eb7a:	bf00      	nop
 800eb7c:	3710      	adds	r7, #16
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}

0800eb82 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eb82:	b580      	push	{r7, lr}
 800eb84:	b086      	sub	sp, #24
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb8e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb94:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb9c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	689b      	ldr	r3, [r3, #8]
 800eba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eba8:	2b80      	cmp	r3, #128	; 0x80
 800ebaa:	d109      	bne.n	800ebc0 <UART_DMAError+0x3e>
 800ebac:	693b      	ldr	r3, [r7, #16]
 800ebae:	2b21      	cmp	r3, #33	; 0x21
 800ebb0:	d106      	bne.n	800ebc0 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ebba:	6978      	ldr	r0, [r7, #20]
 800ebbc:	f7ff fea2 	bl	800e904 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	689b      	ldr	r3, [r3, #8]
 800ebc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebca:	2b40      	cmp	r3, #64	; 0x40
 800ebcc:	d109      	bne.n	800ebe2 <UART_DMAError+0x60>
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2b22      	cmp	r3, #34	; 0x22
 800ebd2:	d106      	bne.n	800ebe2 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ebdc:	6978      	ldr	r0, [r7, #20]
 800ebde:	f7ff feb7 	bl	800e950 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebe8:	f043 0210 	orr.w	r2, r3, #16
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ebf2:	6978      	ldr	r0, [r7, #20]
 800ebf4:	f7ff f9f2 	bl	800dfdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebf8:	bf00      	nop
 800ebfa:	3718      	adds	r7, #24
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}

0800ec00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	2200      	movs	r2, #0
 800ec12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ec1e:	68f8      	ldr	r0, [r7, #12]
 800ec20:	f7ff f9dc 	bl	800dfdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec24:	bf00      	nop
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b088      	sub	sp, #32
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	e853 3f00 	ldrex	r3, [r3]
 800ec40:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec48:	61fb      	str	r3, [r7, #28]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	461a      	mov	r2, r3
 800ec50:	69fb      	ldr	r3, [r7, #28]
 800ec52:	61bb      	str	r3, [r7, #24]
 800ec54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec56:	6979      	ldr	r1, [r7, #20]
 800ec58:	69ba      	ldr	r2, [r7, #24]
 800ec5a:	e841 2300 	strex	r3, r2, [r1]
 800ec5e:	613b      	str	r3, [r7, #16]
   return(result);
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d1e6      	bne.n	800ec34 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2220      	movs	r2, #32
 800ec6a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2200      	movs	r2, #0
 800ec70:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f7ff f99e 	bl	800dfb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec78:	bf00      	nop
 800ec7a:	3720      	adds	r7, #32
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ec80:	b480      	push	{r7}
 800ec82:	b083      	sub	sp, #12
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ec88:	bf00      	nop
 800ec8a:	370c      	adds	r7, #12
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr

0800ec94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ec94:	b084      	sub	sp, #16
 800ec96:	b480      	push	{r7}
 800ec98:	b083      	sub	sp, #12
 800ec9a:	af00      	add	r7, sp, #0
 800ec9c:	6078      	str	r0, [r7, #4]
 800ec9e:	f107 0014 	add.w	r0, r7, #20
 800eca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800eca6:	2300      	movs	r3, #0
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb2:	b004      	add	sp, #16
 800ecb4:	4770      	bx	lr

0800ecb6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ecb6:	b480      	push	{r7}
 800ecb8:	b085      	sub	sp, #20
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ecc6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ecca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ecd6:	2300      	movs	r3, #0
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3714      	adds	r7, #20
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ecec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ecf0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ecf8:	b29a      	uxth	r2, r3
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	43db      	mvns	r3, r3
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	4013      	ands	r3, r2
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ed0c:	2300      	movs	r3, #0
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3714      	adds	r7, #20
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr

0800ed1a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800ed1a:	b480      	push	{r7}
 800ed1c:	b083      	sub	sp, #12
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]
 800ed22:	460b      	mov	r3, r1
 800ed24:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ed26:	2300      	movs	r3, #0
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	370c      	adds	r7, #12
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr

0800ed34 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ed34:	b084      	sub	sp, #16
 800ed36:	b480      	push	{r7}
 800ed38:	b083      	sub	sp, #12
 800ed3a:	af00      	add	r7, sp, #0
 800ed3c:	6078      	str	r0, [r7, #4]
 800ed3e:	f107 0014 	add.w	r0, r7, #20
 800ed42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2201      	movs	r2, #1
 800ed4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2200      	movs	r2, #0
 800ed62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ed66:	2300      	movs	r3, #0
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	b004      	add	sp, #16
 800ed74:	4770      	bx	lr
	...

0800ed78 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b09d      	sub	sp, #116	; 0x74
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ed82:	2300      	movs	r3, #0
 800ed84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	4413      	add	r3, r2
 800ed92:	881b      	ldrh	r3, [r3, #0]
 800ed94:	b29b      	uxth	r3, r3
 800ed96:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800ed9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed9e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	78db      	ldrb	r3, [r3, #3]
 800eda6:	2b03      	cmp	r3, #3
 800eda8:	d81f      	bhi.n	800edea <USB_ActivateEndpoint+0x72>
 800edaa:	a201      	add	r2, pc, #4	; (adr r2, 800edb0 <USB_ActivateEndpoint+0x38>)
 800edac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edb0:	0800edc1 	.word	0x0800edc1
 800edb4:	0800eddd 	.word	0x0800eddd
 800edb8:	0800edf3 	.word	0x0800edf3
 800edbc:	0800edcf 	.word	0x0800edcf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800edc0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800edc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800edc8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800edcc:	e012      	b.n	800edf4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800edce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800edd2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800edd6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800edda:	e00b      	b.n	800edf4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800eddc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ede0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ede4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ede8:	e004      	b.n	800edf4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800edea:	2301      	movs	r3, #1
 800edec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800edf0:	e000      	b.n	800edf4 <USB_ActivateEndpoint+0x7c>
      break;
 800edf2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	441a      	add	r2, r3
 800edfe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ee02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ee16:	687a      	ldr	r2, [r7, #4]
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	4413      	add	r3, r2
 800ee20:	881b      	ldrh	r3, [r3, #0]
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	b21b      	sxth	r3, r3
 800ee26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee2e:	b21a      	sxth	r2, r3
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	b21b      	sxth	r3, r3
 800ee36:	4313      	orrs	r3, r2
 800ee38:	b21b      	sxth	r3, r3
 800ee3a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	441a      	add	r2, r3
 800ee48:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ee4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ee50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ee54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ee58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	7b1b      	ldrb	r3, [r3, #12]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f040 8178 	bne.w	800f15a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	785b      	ldrb	r3, [r3, #1]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	f000 8084 	beq.w	800ef7c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	61bb      	str	r3, [r7, #24]
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	461a      	mov	r2, r3
 800ee82:	69bb      	ldr	r3, [r7, #24]
 800ee84:	4413      	add	r3, r2
 800ee86:	61bb      	str	r3, [r7, #24]
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	00da      	lsls	r2, r3, #3
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	4413      	add	r3, r2
 800ee92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ee96:	617b      	str	r3, [r7, #20]
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	88db      	ldrh	r3, [r3, #6]
 800ee9c:	085b      	lsrs	r3, r3, #1
 800ee9e:	b29b      	uxth	r3, r3
 800eea0:	005b      	lsls	r3, r3, #1
 800eea2:	b29a      	uxth	r2, r3
 800eea4:	697b      	ldr	r3, [r7, #20]
 800eea6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eea8:	687a      	ldr	r2, [r7, #4]
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	781b      	ldrb	r3, [r3, #0]
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	4413      	add	r3, r2
 800eeb2:	881b      	ldrh	r3, [r3, #0]
 800eeb4:	827b      	strh	r3, [r7, #18]
 800eeb6:	8a7b      	ldrh	r3, [r7, #18]
 800eeb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d01b      	beq.n	800eef8 <USB_ActivateEndpoint+0x180>
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	781b      	ldrb	r3, [r3, #0]
 800eec6:	009b      	lsls	r3, r3, #2
 800eec8:	4413      	add	r3, r2
 800eeca:	881b      	ldrh	r3, [r3, #0]
 800eecc:	b29b      	uxth	r3, r3
 800eece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eed6:	823b      	strh	r3, [r7, #16]
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	441a      	add	r2, r3
 800eee2:	8a3b      	ldrh	r3, [r7, #16]
 800eee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eeec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eef0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800eef4:	b29b      	uxth	r3, r3
 800eef6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	78db      	ldrb	r3, [r3, #3]
 800eefc:	2b01      	cmp	r3, #1
 800eefe:	d020      	beq.n	800ef42 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ef00:	687a      	ldr	r2, [r7, #4]
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	781b      	ldrb	r3, [r3, #0]
 800ef06:	009b      	lsls	r3, r3, #2
 800ef08:	4413      	add	r3, r2
 800ef0a:	881b      	ldrh	r3, [r3, #0]
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef16:	81bb      	strh	r3, [r7, #12]
 800ef18:	89bb      	ldrh	r3, [r7, #12]
 800ef1a:	f083 0320 	eor.w	r3, r3, #32
 800ef1e:	81bb      	strh	r3, [r7, #12]
 800ef20:	687a      	ldr	r2, [r7, #4]
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	009b      	lsls	r3, r3, #2
 800ef28:	441a      	add	r2, r3
 800ef2a:	89bb      	ldrh	r3, [r7, #12]
 800ef2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	8013      	strh	r3, [r2, #0]
 800ef40:	e2d5      	b.n	800f4ee <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	009b      	lsls	r3, r3, #2
 800ef4a:	4413      	add	r3, r2
 800ef4c:	881b      	ldrh	r3, [r3, #0]
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef58:	81fb      	strh	r3, [r7, #14]
 800ef5a:	687a      	ldr	r2, [r7, #4]
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	781b      	ldrb	r3, [r3, #0]
 800ef60:	009b      	lsls	r3, r3, #2
 800ef62:	441a      	add	r2, r3
 800ef64:	89fb      	ldrh	r3, [r7, #14]
 800ef66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ef72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	8013      	strh	r3, [r2, #0]
 800ef7a:	e2b8      	b.n	800f4ee <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	633b      	str	r3, [r7, #48]	; 0x30
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	461a      	mov	r2, r3
 800ef8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8c:	4413      	add	r3, r2
 800ef8e:	633b      	str	r3, [r7, #48]	; 0x30
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	00da      	lsls	r2, r3, #3
 800ef96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef98:	4413      	add	r3, r2
 800ef9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ef9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	88db      	ldrh	r3, [r3, #6]
 800efa4:	085b      	lsrs	r3, r3, #1
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	005b      	lsls	r3, r3, #1
 800efaa:	b29a      	uxth	r2, r3
 800efac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efae:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800efba:	b29b      	uxth	r3, r3
 800efbc:	461a      	mov	r2, r3
 800efbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc0:	4413      	add	r3, r2
 800efc2:	62bb      	str	r3, [r7, #40]	; 0x28
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	00da      	lsls	r2, r3, #3
 800efca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efcc:	4413      	add	r3, r2
 800efce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800efd2:	627b      	str	r3, [r7, #36]	; 0x24
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	881b      	ldrh	r3, [r3, #0]
 800efd8:	b29b      	uxth	r3, r3
 800efda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800efde:	b29a      	uxth	r2, r3
 800efe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe2:	801a      	strh	r2, [r3, #0]
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	691b      	ldr	r3, [r3, #16]
 800efe8:	2b3e      	cmp	r3, #62	; 0x3e
 800efea:	d91d      	bls.n	800f028 <USB_ActivateEndpoint+0x2b0>
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	691b      	ldr	r3, [r3, #16]
 800eff0:	095b      	lsrs	r3, r3, #5
 800eff2:	66bb      	str	r3, [r7, #104]	; 0x68
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	691b      	ldr	r3, [r3, #16]
 800eff8:	f003 031f 	and.w	r3, r3, #31
 800effc:	2b00      	cmp	r3, #0
 800effe:	d102      	bne.n	800f006 <USB_ActivateEndpoint+0x28e>
 800f000:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f002:	3b01      	subs	r3, #1
 800f004:	66bb      	str	r3, [r7, #104]	; 0x68
 800f006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f008:	881b      	ldrh	r3, [r3, #0]
 800f00a:	b29a      	uxth	r2, r3
 800f00c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f00e:	b29b      	uxth	r3, r3
 800f010:	029b      	lsls	r3, r3, #10
 800f012:	b29b      	uxth	r3, r3
 800f014:	4313      	orrs	r3, r2
 800f016:	b29b      	uxth	r3, r3
 800f018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f01c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f020:	b29a      	uxth	r2, r3
 800f022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f024:	801a      	strh	r2, [r3, #0]
 800f026:	e026      	b.n	800f076 <USB_ActivateEndpoint+0x2fe>
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	691b      	ldr	r3, [r3, #16]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d10a      	bne.n	800f046 <USB_ActivateEndpoint+0x2ce>
 800f030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f032:	881b      	ldrh	r3, [r3, #0]
 800f034:	b29b      	uxth	r3, r3
 800f036:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f03a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f03e:	b29a      	uxth	r2, r3
 800f040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f042:	801a      	strh	r2, [r3, #0]
 800f044:	e017      	b.n	800f076 <USB_ActivateEndpoint+0x2fe>
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	691b      	ldr	r3, [r3, #16]
 800f04a:	085b      	lsrs	r3, r3, #1
 800f04c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	691b      	ldr	r3, [r3, #16]
 800f052:	f003 0301 	and.w	r3, r3, #1
 800f056:	2b00      	cmp	r3, #0
 800f058:	d002      	beq.n	800f060 <USB_ActivateEndpoint+0x2e8>
 800f05a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f05c:	3301      	adds	r3, #1
 800f05e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f062:	881b      	ldrh	r3, [r3, #0]
 800f064:	b29a      	uxth	r2, r3
 800f066:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f068:	b29b      	uxth	r3, r3
 800f06a:	029b      	lsls	r3, r3, #10
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	4313      	orrs	r3, r2
 800f070:	b29a      	uxth	r2, r3
 800f072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f074:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	009b      	lsls	r3, r3, #2
 800f07e:	4413      	add	r3, r2
 800f080:	881b      	ldrh	r3, [r3, #0]
 800f082:	847b      	strh	r3, [r7, #34]	; 0x22
 800f084:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d01b      	beq.n	800f0c6 <USB_ActivateEndpoint+0x34e>
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	781b      	ldrb	r3, [r3, #0]
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	4413      	add	r3, r2
 800f098:	881b      	ldrh	r3, [r3, #0]
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0a4:	843b      	strh	r3, [r7, #32]
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	009b      	lsls	r3, r3, #2
 800f0ae:	441a      	add	r2, r3
 800f0b0:	8c3b      	ldrh	r3, [r7, #32]
 800f0b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f0b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f0be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0c2:	b29b      	uxth	r3, r3
 800f0c4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	781b      	ldrb	r3, [r3, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d124      	bne.n	800f118 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	009b      	lsls	r3, r3, #2
 800f0d6:	4413      	add	r3, r2
 800f0d8:	881b      	ldrh	r3, [r3, #0]
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f0e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0e4:	83bb      	strh	r3, [r7, #28]
 800f0e6:	8bbb      	ldrh	r3, [r7, #28]
 800f0e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f0ec:	83bb      	strh	r3, [r7, #28]
 800f0ee:	8bbb      	ldrh	r3, [r7, #28]
 800f0f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f0f4:	83bb      	strh	r3, [r7, #28]
 800f0f6:	687a      	ldr	r2, [r7, #4]
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	781b      	ldrb	r3, [r3, #0]
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	441a      	add	r2, r3
 800f100:	8bbb      	ldrh	r3, [r7, #28]
 800f102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f10a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f10e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f112:	b29b      	uxth	r3, r3
 800f114:	8013      	strh	r3, [r2, #0]
 800f116:	e1ea      	b.n	800f4ee <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	009b      	lsls	r3, r3, #2
 800f120:	4413      	add	r3, r2
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	b29b      	uxth	r3, r3
 800f126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f12a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f12e:	83fb      	strh	r3, [r7, #30]
 800f130:	8bfb      	ldrh	r3, [r7, #30]
 800f132:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f136:	83fb      	strh	r3, [r7, #30]
 800f138:	687a      	ldr	r2, [r7, #4]
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	009b      	lsls	r3, r3, #2
 800f140:	441a      	add	r2, r3
 800f142:	8bfb      	ldrh	r3, [r7, #30]
 800f144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f14c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f154:	b29b      	uxth	r3, r3
 800f156:	8013      	strh	r3, [r2, #0]
 800f158:	e1c9      	b.n	800f4ee <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	78db      	ldrb	r3, [r3, #3]
 800f15e:	2b02      	cmp	r3, #2
 800f160:	d11e      	bne.n	800f1a0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	009b      	lsls	r3, r3, #2
 800f16a:	4413      	add	r3, r2
 800f16c:	881b      	ldrh	r3, [r3, #0]
 800f16e:	b29b      	uxth	r3, r3
 800f170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f178:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f17c:	687a      	ldr	r2, [r7, #4]
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	009b      	lsls	r3, r3, #2
 800f184:	441a      	add	r2, r3
 800f186:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800f18a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f18e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f192:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800f196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	8013      	strh	r3, [r2, #0]
 800f19e:	e01d      	b.n	800f1dc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	009b      	lsls	r3, r3, #2
 800f1a8:	4413      	add	r3, r2
 800f1aa:	881b      	ldrh	r3, [r3, #0]
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800f1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1b6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	009b      	lsls	r3, r3, #2
 800f1c2:	441a      	add	r2, r3
 800f1c4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800f1c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f1ec:	4413      	add	r3, r2
 800f1ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	00da      	lsls	r2, r3, #3
 800f1f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f1f8:	4413      	add	r3, r2
 800f1fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f1fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	891b      	ldrh	r3, [r3, #8]
 800f204:	085b      	lsrs	r3, r3, #1
 800f206:	b29b      	uxth	r3, r3
 800f208:	005b      	lsls	r3, r3, #1
 800f20a:	b29a      	uxth	r2, r3
 800f20c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f20e:	801a      	strh	r2, [r3, #0]
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	657b      	str	r3, [r7, #84]	; 0x54
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	461a      	mov	r2, r3
 800f21e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f220:	4413      	add	r3, r2
 800f222:	657b      	str	r3, [r7, #84]	; 0x54
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	00da      	lsls	r2, r3, #3
 800f22a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f22c:	4413      	add	r3, r2
 800f22e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800f232:	653b      	str	r3, [r7, #80]	; 0x50
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	895b      	ldrh	r3, [r3, #10]
 800f238:	085b      	lsrs	r3, r3, #1
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	005b      	lsls	r3, r3, #1
 800f23e:	b29a      	uxth	r2, r3
 800f240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f242:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	785b      	ldrb	r3, [r3, #1]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	f040 8093 	bne.w	800f374 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f24e:	687a      	ldr	r2, [r7, #4]
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	4413      	add	r3, r2
 800f258:	881b      	ldrh	r3, [r3, #0]
 800f25a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f25e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f266:	2b00      	cmp	r3, #0
 800f268:	d01b      	beq.n	800f2a2 <USB_ActivateEndpoint+0x52a>
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	781b      	ldrb	r3, [r3, #0]
 800f270:	009b      	lsls	r3, r3, #2
 800f272:	4413      	add	r3, r2
 800f274:	881b      	ldrh	r3, [r3, #0]
 800f276:	b29b      	uxth	r3, r3
 800f278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f27c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f280:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	009b      	lsls	r3, r3, #2
 800f28a:	441a      	add	r2, r3
 800f28c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f28e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f296:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f29a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f2a2:	687a      	ldr	r2, [r7, #4]
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	009b      	lsls	r3, r3, #2
 800f2aa:	4413      	add	r3, r2
 800f2ac:	881b      	ldrh	r3, [r3, #0]
 800f2ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f2b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f2b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d01b      	beq.n	800f2f2 <USB_ActivateEndpoint+0x57a>
 800f2ba:	687a      	ldr	r2, [r7, #4]
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	009b      	lsls	r3, r3, #2
 800f2c2:	4413      	add	r3, r2
 800f2c4:	881b      	ldrh	r3, [r3, #0]
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f2cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2d0:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	009b      	lsls	r3, r3, #2
 800f2da:	441a      	add	r2, r3
 800f2dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f2de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f2ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	781b      	ldrb	r3, [r3, #0]
 800f2f8:	009b      	lsls	r3, r3, #2
 800f2fa:	4413      	add	r3, r2
 800f2fc:	881b      	ldrh	r3, [r3, #0]
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f308:	873b      	strh	r3, [r7, #56]	; 0x38
 800f30a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f30c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f310:	873b      	strh	r3, [r7, #56]	; 0x38
 800f312:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f314:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f318:	873b      	strh	r3, [r7, #56]	; 0x38
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	441a      	add	r2, r3
 800f324:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f32a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f32e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f336:	b29b      	uxth	r3, r3
 800f338:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	009b      	lsls	r3, r3, #2
 800f342:	4413      	add	r3, r2
 800f344:	881b      	ldrh	r3, [r3, #0]
 800f346:	b29b      	uxth	r3, r3
 800f348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f34c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f350:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f352:	687a      	ldr	r2, [r7, #4]
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	009b      	lsls	r3, r3, #2
 800f35a:	441a      	add	r2, r3
 800f35c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f35e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f36a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f36e:	b29b      	uxth	r3, r3
 800f370:	8013      	strh	r3, [r2, #0]
 800f372:	e0bc      	b.n	800f4ee <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f374:	687a      	ldr	r2, [r7, #4]
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	009b      	lsls	r3, r3, #2
 800f37c:	4413      	add	r3, r2
 800f37e:	881b      	ldrh	r3, [r3, #0]
 800f380:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f384:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d01d      	beq.n	800f3cc <USB_ActivateEndpoint+0x654>
 800f390:	687a      	ldr	r2, [r7, #4]
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	4413      	add	r3, r2
 800f39a:	881b      	ldrh	r3, [r3, #0]
 800f39c:	b29b      	uxth	r3, r3
 800f39e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3a6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	441a      	add	r2, r3
 800f3b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f3b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f3bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f3c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f3c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3c8:	b29b      	uxth	r3, r3
 800f3ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	009b      	lsls	r3, r3, #2
 800f3d4:	4413      	add	r3, r2
 800f3d6:	881b      	ldrh	r3, [r3, #0]
 800f3d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800f3dc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800f3e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d01d      	beq.n	800f424 <USB_ActivateEndpoint+0x6ac>
 800f3e8:	687a      	ldr	r2, [r7, #4]
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	009b      	lsls	r3, r3, #2
 800f3f0:	4413      	add	r3, r2
 800f3f2:	881b      	ldrh	r3, [r3, #0]
 800f3f4:	b29b      	uxth	r3, r3
 800f3f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	441a      	add	r2, r3
 800f40c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800f410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f41c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f420:	b29b      	uxth	r3, r3
 800f422:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	78db      	ldrb	r3, [r3, #3]
 800f428:	2b01      	cmp	r3, #1
 800f42a:	d024      	beq.n	800f476 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f42c:	687a      	ldr	r2, [r7, #4]
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	009b      	lsls	r3, r3, #2
 800f434:	4413      	add	r3, r2
 800f436:	881b      	ldrh	r3, [r3, #0]
 800f438:	b29b      	uxth	r3, r3
 800f43a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f43e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f442:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f446:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f44a:	f083 0320 	eor.w	r3, r3, #32
 800f44e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	009b      	lsls	r3, r3, #2
 800f45a:	441a      	add	r2, r3
 800f45c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f470:	b29b      	uxth	r3, r3
 800f472:	8013      	strh	r3, [r2, #0]
 800f474:	e01d      	b.n	800f4b2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f476:	687a      	ldr	r2, [r7, #4]
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	009b      	lsls	r3, r3, #2
 800f47e:	4413      	add	r3, r2
 800f480:	881b      	ldrh	r3, [r3, #0]
 800f482:	b29b      	uxth	r3, r3
 800f484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f48c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	009b      	lsls	r3, r3, #2
 800f498:	441a      	add	r2, r3
 800f49a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f49e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	4413      	add	r3, r2
 800f4bc:	881b      	ldrh	r3, [r3, #0]
 800f4be:	b29b      	uxth	r3, r3
 800f4c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f4c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	441a      	add	r2, r3
 800f4d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f4da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f4de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f4e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800f4ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3774      	adds	r7, #116	; 0x74
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop

0800f500 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f500:	b480      	push	{r7}
 800f502:	b08d      	sub	sp, #52	; 0x34
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	7b1b      	ldrb	r3, [r3, #12]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	f040 808e 	bne.w	800f630 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	785b      	ldrb	r3, [r3, #1]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d044      	beq.n	800f5a6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	009b      	lsls	r3, r3, #2
 800f524:	4413      	add	r3, r2
 800f526:	881b      	ldrh	r3, [r3, #0]
 800f528:	81bb      	strh	r3, [r7, #12]
 800f52a:	89bb      	ldrh	r3, [r7, #12]
 800f52c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f530:	2b00      	cmp	r3, #0
 800f532:	d01b      	beq.n	800f56c <USB_DeactivateEndpoint+0x6c>
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	781b      	ldrb	r3, [r3, #0]
 800f53a:	009b      	lsls	r3, r3, #2
 800f53c:	4413      	add	r3, r2
 800f53e:	881b      	ldrh	r3, [r3, #0]
 800f540:	b29b      	uxth	r3, r3
 800f542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f54a:	817b      	strh	r3, [r7, #10]
 800f54c:	687a      	ldr	r2, [r7, #4]
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	441a      	add	r2, r3
 800f556:	897b      	ldrh	r3, [r7, #10]
 800f558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f55c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f564:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f568:	b29b      	uxth	r3, r3
 800f56a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	009b      	lsls	r3, r3, #2
 800f574:	4413      	add	r3, r2
 800f576:	881b      	ldrh	r3, [r3, #0]
 800f578:	b29b      	uxth	r3, r3
 800f57a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f57e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f582:	813b      	strh	r3, [r7, #8]
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	781b      	ldrb	r3, [r3, #0]
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	441a      	add	r2, r3
 800f58e:	893b      	ldrh	r3, [r7, #8]
 800f590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f59c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	8013      	strh	r3, [r2, #0]
 800f5a4:	e192      	b.n	800f8cc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f5a6:	687a      	ldr	r2, [r7, #4]
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	781b      	ldrb	r3, [r3, #0]
 800f5ac:	009b      	lsls	r3, r3, #2
 800f5ae:	4413      	add	r3, r2
 800f5b0:	881b      	ldrh	r3, [r3, #0]
 800f5b2:	827b      	strh	r3, [r7, #18]
 800f5b4:	8a7b      	ldrh	r3, [r7, #18]
 800f5b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d01b      	beq.n	800f5f6 <USB_DeactivateEndpoint+0xf6>
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	009b      	lsls	r3, r3, #2
 800f5c6:	4413      	add	r3, r2
 800f5c8:	881b      	ldrh	r3, [r3, #0]
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5d4:	823b      	strh	r3, [r7, #16]
 800f5d6:	687a      	ldr	r2, [r7, #4]
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	441a      	add	r2, r3
 800f5e0:	8a3b      	ldrh	r3, [r7, #16]
 800f5e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f5e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f5ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f5ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	4413      	add	r3, r2
 800f600:	881b      	ldrh	r3, [r3, #0]
 800f602:	b29b      	uxth	r3, r3
 800f604:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f60c:	81fb      	strh	r3, [r7, #14]
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	009b      	lsls	r3, r3, #2
 800f616:	441a      	add	r2, r3
 800f618:	89fb      	ldrh	r3, [r7, #14]
 800f61a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f61e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	8013      	strh	r3, [r2, #0]
 800f62e:	e14d      	b.n	800f8cc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	785b      	ldrb	r3, [r3, #1]
 800f634:	2b00      	cmp	r3, #0
 800f636:	f040 80a5 	bne.w	800f784 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f63a:	687a      	ldr	r2, [r7, #4]
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	009b      	lsls	r3, r3, #2
 800f642:	4413      	add	r3, r2
 800f644:	881b      	ldrh	r3, [r3, #0]
 800f646:	843b      	strh	r3, [r7, #32]
 800f648:	8c3b      	ldrh	r3, [r7, #32]
 800f64a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d01b      	beq.n	800f68a <USB_DeactivateEndpoint+0x18a>
 800f652:	687a      	ldr	r2, [r7, #4]
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	009b      	lsls	r3, r3, #2
 800f65a:	4413      	add	r3, r2
 800f65c:	881b      	ldrh	r3, [r3, #0]
 800f65e:	b29b      	uxth	r3, r3
 800f660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f668:	83fb      	strh	r3, [r7, #30]
 800f66a:	687a      	ldr	r2, [r7, #4]
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	009b      	lsls	r3, r3, #2
 800f672:	441a      	add	r2, r3
 800f674:	8bfb      	ldrh	r3, [r7, #30]
 800f676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f67a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f67e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f686:	b29b      	uxth	r3, r3
 800f688:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f68a:	687a      	ldr	r2, [r7, #4]
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	781b      	ldrb	r3, [r3, #0]
 800f690:	009b      	lsls	r3, r3, #2
 800f692:	4413      	add	r3, r2
 800f694:	881b      	ldrh	r3, [r3, #0]
 800f696:	83bb      	strh	r3, [r7, #28]
 800f698:	8bbb      	ldrh	r3, [r7, #28]
 800f69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d01b      	beq.n	800f6da <USB_DeactivateEndpoint+0x1da>
 800f6a2:	687a      	ldr	r2, [r7, #4]
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	009b      	lsls	r3, r3, #2
 800f6aa:	4413      	add	r3, r2
 800f6ac:	881b      	ldrh	r3, [r3, #0]
 800f6ae:	b29b      	uxth	r3, r3
 800f6b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6b8:	837b      	strh	r3, [r7, #26]
 800f6ba:	687a      	ldr	r2, [r7, #4]
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	009b      	lsls	r3, r3, #2
 800f6c2:	441a      	add	r2, r3
 800f6c4:	8b7b      	ldrh	r3, [r7, #26]
 800f6c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f6ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f6ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f6d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800f6da:	687a      	ldr	r2, [r7, #4]
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	009b      	lsls	r3, r3, #2
 800f6e2:	4413      	add	r3, r2
 800f6e4:	881b      	ldrh	r3, [r3, #0]
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f6ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6f0:	833b      	strh	r3, [r7, #24]
 800f6f2:	687a      	ldr	r2, [r7, #4]
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	781b      	ldrb	r3, [r3, #0]
 800f6f8:	009b      	lsls	r3, r3, #2
 800f6fa:	441a      	add	r2, r3
 800f6fc:	8b3b      	ldrh	r3, [r7, #24]
 800f6fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f70a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f70e:	b29b      	uxth	r3, r3
 800f710:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f712:	687a      	ldr	r2, [r7, #4]
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	781b      	ldrb	r3, [r3, #0]
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	4413      	add	r3, r2
 800f71c:	881b      	ldrh	r3, [r3, #0]
 800f71e:	b29b      	uxth	r3, r3
 800f720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f728:	82fb      	strh	r3, [r7, #22]
 800f72a:	687a      	ldr	r2, [r7, #4]
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	009b      	lsls	r3, r3, #2
 800f732:	441a      	add	r2, r3
 800f734:	8afb      	ldrh	r3, [r7, #22]
 800f736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f73a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f73e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f746:	b29b      	uxth	r3, r3
 800f748:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f74a:	687a      	ldr	r2, [r7, #4]
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	009b      	lsls	r3, r3, #2
 800f752:	4413      	add	r3, r2
 800f754:	881b      	ldrh	r3, [r3, #0]
 800f756:	b29b      	uxth	r3, r3
 800f758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f75c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f760:	82bb      	strh	r3, [r7, #20]
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	009b      	lsls	r3, r3, #2
 800f76a:	441a      	add	r2, r3
 800f76c:	8abb      	ldrh	r3, [r7, #20]
 800f76e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f77a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f77e:	b29b      	uxth	r3, r3
 800f780:	8013      	strh	r3, [r2, #0]
 800f782:	e0a3      	b.n	800f8cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f784:	687a      	ldr	r2, [r7, #4]
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	009b      	lsls	r3, r3, #2
 800f78c:	4413      	add	r3, r2
 800f78e:	881b      	ldrh	r3, [r3, #0]
 800f790:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f792:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d01b      	beq.n	800f7d4 <USB_DeactivateEndpoint+0x2d4>
 800f79c:	687a      	ldr	r2, [r7, #4]
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	009b      	lsls	r3, r3, #2
 800f7a4:	4413      	add	r3, r2
 800f7a6:	881b      	ldrh	r3, [r3, #0]
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	009b      	lsls	r3, r3, #2
 800f7bc:	441a      	add	r2, r3
 800f7be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f7c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f7c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f7c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f7cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7d0:	b29b      	uxth	r3, r3
 800f7d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f7d4:	687a      	ldr	r2, [r7, #4]
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	009b      	lsls	r3, r3, #2
 800f7dc:	4413      	add	r3, r2
 800f7de:	881b      	ldrh	r3, [r3, #0]
 800f7e0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f7e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d01b      	beq.n	800f824 <USB_DeactivateEndpoint+0x324>
 800f7ec:	687a      	ldr	r2, [r7, #4]
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	4413      	add	r3, r2
 800f7f6:	881b      	ldrh	r3, [r3, #0]
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f7fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f802:	853b      	strh	r3, [r7, #40]	; 0x28
 800f804:	687a      	ldr	r2, [r7, #4]
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	009b      	lsls	r3, r3, #2
 800f80c:	441a      	add	r2, r3
 800f80e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f81c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f820:	b29b      	uxth	r3, r3
 800f822:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	009b      	lsls	r3, r3, #2
 800f82c:	4413      	add	r3, r2
 800f82e:	881b      	ldrh	r3, [r3, #0]
 800f830:	b29b      	uxth	r3, r3
 800f832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f83a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	009b      	lsls	r3, r3, #2
 800f844:	441a      	add	r2, r3
 800f846:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f84c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f858:	b29b      	uxth	r3, r3
 800f85a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f85c:	687a      	ldr	r2, [r7, #4]
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	009b      	lsls	r3, r3, #2
 800f864:	4413      	add	r3, r2
 800f866:	881b      	ldrh	r3, [r3, #0]
 800f868:	b29b      	uxth	r3, r3
 800f86a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f86e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f872:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	009b      	lsls	r3, r3, #2
 800f87c:	441a      	add	r2, r3
 800f87e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f88c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f890:	b29b      	uxth	r3, r3
 800f892:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	781b      	ldrb	r3, [r3, #0]
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	4413      	add	r3, r2
 800f89e:	881b      	ldrh	r3, [r3, #0]
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f8a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8aa:	847b      	strh	r3, [r7, #34]	; 0x22
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	441a      	add	r2, r3
 800f8b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f8b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f8bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f8c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f8c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f8cc:	2300      	movs	r3, #0
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3734      	adds	r7, #52	; 0x34
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d8:	4770      	bx	lr

0800f8da <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f8da:	b580      	push	{r7, lr}
 800f8dc:	b0c2      	sub	sp, #264	; 0x108
 800f8de:	af00      	add	r7, sp, #0
 800f8e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f8e8:	6018      	str	r0, [r3, #0]
 800f8ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8f2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f8f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f8f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	785b      	ldrb	r3, [r3, #1]
 800f900:	2b01      	cmp	r3, #1
 800f902:	f040 86b7 	bne.w	8010674 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800f906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f90a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	699a      	ldr	r2, [r3, #24]
 800f912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	691b      	ldr	r3, [r3, #16]
 800f91e:	429a      	cmp	r2, r3
 800f920:	d908      	bls.n	800f934 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800f922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	691b      	ldr	r3, [r3, #16]
 800f92e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800f932:	e007      	b.n	800f944 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800f934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	699b      	ldr	r3, [r3, #24]
 800f940:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800f944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	7b1b      	ldrb	r3, [r3, #12]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d13a      	bne.n	800f9ca <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800f954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f958:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	6959      	ldr	r1, [r3, #20]
 800f960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f964:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	88da      	ldrh	r2, [r3, #6]
 800f96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f970:	b29b      	uxth	r3, r3
 800f972:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f976:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800f97a:	6800      	ldr	r0, [r0, #0]
 800f97c:	f001 fcb9 	bl	80112f2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800f980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f984:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	613b      	str	r3, [r7, #16]
 800f98c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f990:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	461a      	mov	r2, r3
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	613b      	str	r3, [r7, #16]
 800f9a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	00da      	lsls	r2, r3, #3
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f9ba:	60fb      	str	r3, [r7, #12]
 800f9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	801a      	strh	r2, [r3, #0]
 800f9c6:	f000 be1f 	b.w	8010608 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800f9ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	78db      	ldrb	r3, [r3, #3]
 800f9d6:	2b02      	cmp	r3, #2
 800f9d8:	f040 8462 	bne.w	80102a0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800f9dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	6a1a      	ldr	r2, [r3, #32]
 800f9e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	691b      	ldr	r3, [r3, #16]
 800f9f4:	429a      	cmp	r2, r3
 800f9f6:	f240 83df 	bls.w	80101b8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800f9fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f9fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa02:	681a      	ldr	r2, [r3, #0]
 800fa04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	009b      	lsls	r3, r3, #2
 800fa12:	4413      	add	r3, r2
 800fa14:	881b      	ldrh	r3, [r3, #0]
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800fa24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa2c:	681a      	ldr	r2, [r3, #0]
 800fa2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	441a      	add	r2, r3
 800fa3e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800fa42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa4a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800fa4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800fa56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	6a1a      	ldr	r2, [r3, #32]
 800fa62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fa66:	1ad2      	subs	r2, r2, r3
 800fa68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800fa74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fa7c:	681a      	ldr	r2, [r3, #0]
 800fa7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fa82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	009b      	lsls	r3, r3, #2
 800fa8c:	4413      	add	r3, r2
 800fa8e:	881b      	ldrh	r3, [r3, #0]
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	f000 81c7 	beq.w	800fe2a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800fa9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	633b      	str	r3, [r7, #48]	; 0x30
 800faa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800faac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	785b      	ldrb	r3, [r3, #1]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d177      	bne.n	800fba8 <USB_EPStartXfer+0x2ce>
 800fab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fabc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	62bb      	str	r3, [r7, #40]	; 0x28
 800fac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fac8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	461a      	mov	r2, r3
 800fad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fad8:	4413      	add	r3, r2
 800fada:	62bb      	str	r3, [r7, #40]	; 0x28
 800fadc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fae0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	00da      	lsls	r2, r3, #3
 800faea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faec:	4413      	add	r3, r2
 800faee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800faf2:	627b      	str	r3, [r7, #36]	; 0x24
 800faf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf6:	881b      	ldrh	r3, [r3, #0]
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fafe:	b29a      	uxth	r2, r3
 800fb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb02:	801a      	strh	r2, [r3, #0]
 800fb04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb08:	2b3e      	cmp	r3, #62	; 0x3e
 800fb0a:	d921      	bls.n	800fb50 <USB_EPStartXfer+0x276>
 800fb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb10:	095b      	lsrs	r3, r3, #5
 800fb12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fb16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb1a:	f003 031f 	and.w	r3, r3, #31
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d104      	bne.n	800fb2c <USB_EPStartXfer+0x252>
 800fb22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fb26:	3b01      	subs	r3, #1
 800fb28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2e:	881b      	ldrh	r3, [r3, #0]
 800fb30:	b29a      	uxth	r2, r3
 800fb32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	029b      	lsls	r3, r3, #10
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	4313      	orrs	r3, r2
 800fb3e:	b29b      	uxth	r3, r3
 800fb40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb48:	b29a      	uxth	r2, r3
 800fb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4c:	801a      	strh	r2, [r3, #0]
 800fb4e:	e050      	b.n	800fbf2 <USB_EPStartXfer+0x318>
 800fb50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d10a      	bne.n	800fb6e <USB_EPStartXfer+0x294>
 800fb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb5a:	881b      	ldrh	r3, [r3, #0]
 800fb5c:	b29b      	uxth	r3, r3
 800fb5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fb62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fb66:	b29a      	uxth	r2, r3
 800fb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb6a:	801a      	strh	r2, [r3, #0]
 800fb6c:	e041      	b.n	800fbf2 <USB_EPStartXfer+0x318>
 800fb6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb72:	085b      	lsrs	r3, r3, #1
 800fb74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fb78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fb7c:	f003 0301 	and.w	r3, r3, #1
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d004      	beq.n	800fb8e <USB_EPStartXfer+0x2b4>
 800fb84:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fb88:	3301      	adds	r3, #1
 800fb8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800fb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb90:	881b      	ldrh	r3, [r3, #0]
 800fb92:	b29a      	uxth	r2, r3
 800fb94:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fb98:	b29b      	uxth	r3, r3
 800fb9a:	029b      	lsls	r3, r3, #10
 800fb9c:	b29b      	uxth	r3, r3
 800fb9e:	4313      	orrs	r3, r2
 800fba0:	b29a      	uxth	r2, r3
 800fba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba4:	801a      	strh	r2, [r3, #0]
 800fba6:	e024      	b.n	800fbf2 <USB_EPStartXfer+0x318>
 800fba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	785b      	ldrb	r3, [r3, #1]
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d11c      	bne.n	800fbf2 <USB_EPStartXfer+0x318>
 800fbb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fbc6:	b29b      	uxth	r3, r3
 800fbc8:	461a      	mov	r2, r3
 800fbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbcc:	4413      	add	r3, r2
 800fbce:	633b      	str	r3, [r7, #48]	; 0x30
 800fbd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	00da      	lsls	r2, r3, #3
 800fbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe0:	4413      	add	r3, r2
 800fbe2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fbe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fbec:	b29a      	uxth	r2, r3
 800fbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800fbf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fbf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	895b      	ldrh	r3, [r3, #10]
 800fbfe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fc02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	6959      	ldr	r1, [r3, #20]
 800fc0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fc18:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fc1c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fc20:	6800      	ldr	r0, [r0, #0]
 800fc22:	f001 fb66 	bl	80112f2 <USB_WritePMA>
            ep->xfer_buff += len;
 800fc26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	695a      	ldr	r2, [r3, #20]
 800fc32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc36:	441a      	add	r2, r3
 800fc38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800fc44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	6a1a      	ldr	r2, [r3, #32]
 800fc50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	691b      	ldr	r3, [r3, #16]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d90f      	bls.n	800fc80 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800fc60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	6a1a      	ldr	r2, [r3, #32]
 800fc6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fc70:	1ad2      	subs	r2, r2, r3
 800fc72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	621a      	str	r2, [r3, #32]
 800fc7e:	e00e      	b.n	800fc9e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800fc80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	6a1b      	ldr	r3, [r3, #32]
 800fc8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800fc90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fc94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fc9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	785b      	ldrb	r3, [r3, #1]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d177      	bne.n	800fd9e <USB_EPStartXfer+0x4c4>
 800fcae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	61bb      	str	r3, [r7, #24]
 800fcba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fcc8:	b29b      	uxth	r3, r3
 800fcca:	461a      	mov	r2, r3
 800fccc:	69bb      	ldr	r3, [r7, #24]
 800fcce:	4413      	add	r3, r2
 800fcd0:	61bb      	str	r3, [r7, #24]
 800fcd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fcd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	781b      	ldrb	r3, [r3, #0]
 800fcde:	00da      	lsls	r2, r3, #3
 800fce0:	69bb      	ldr	r3, [r7, #24]
 800fce2:	4413      	add	r3, r2
 800fce4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fce8:	617b      	str	r3, [r7, #20]
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	881b      	ldrh	r3, [r3, #0]
 800fcee:	b29b      	uxth	r3, r3
 800fcf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fcf4:	b29a      	uxth	r2, r3
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	801a      	strh	r2, [r3, #0]
 800fcfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fcfe:	2b3e      	cmp	r3, #62	; 0x3e
 800fd00:	d921      	bls.n	800fd46 <USB_EPStartXfer+0x46c>
 800fd02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd06:	095b      	lsrs	r3, r3, #5
 800fd08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fd0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd10:	f003 031f 	and.w	r3, r3, #31
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d104      	bne.n	800fd22 <USB_EPStartXfer+0x448>
 800fd18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fd1c:	3b01      	subs	r3, #1
 800fd1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	881b      	ldrh	r3, [r3, #0]
 800fd26:	b29a      	uxth	r2, r3
 800fd28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fd2c:	b29b      	uxth	r3, r3
 800fd2e:	029b      	lsls	r3, r3, #10
 800fd30:	b29b      	uxth	r3, r3
 800fd32:	4313      	orrs	r3, r2
 800fd34:	b29b      	uxth	r3, r3
 800fd36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd3e:	b29a      	uxth	r2, r3
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	801a      	strh	r2, [r3, #0]
 800fd44:	e056      	b.n	800fdf4 <USB_EPStartXfer+0x51a>
 800fd46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d10a      	bne.n	800fd64 <USB_EPStartXfer+0x48a>
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	881b      	ldrh	r3, [r3, #0]
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fd58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fd5c:	b29a      	uxth	r2, r3
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	801a      	strh	r2, [r3, #0]
 800fd62:	e047      	b.n	800fdf4 <USB_EPStartXfer+0x51a>
 800fd64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd68:	085b      	lsrs	r3, r3, #1
 800fd6a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fd6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fd72:	f003 0301 	and.w	r3, r3, #1
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d004      	beq.n	800fd84 <USB_EPStartXfer+0x4aa>
 800fd7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fd7e:	3301      	adds	r3, #1
 800fd80:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	881b      	ldrh	r3, [r3, #0]
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	029b      	lsls	r3, r3, #10
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	4313      	orrs	r3, r2
 800fd96:	b29a      	uxth	r2, r3
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	801a      	strh	r2, [r3, #0]
 800fd9c:	e02a      	b.n	800fdf4 <USB_EPStartXfer+0x51a>
 800fd9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fda2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	785b      	ldrb	r3, [r3, #1]
 800fdaa:	2b01      	cmp	r3, #1
 800fdac:	d122      	bne.n	800fdf4 <USB_EPStartXfer+0x51a>
 800fdae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	623b      	str	r3, [r7, #32]
 800fdba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fdc8:	b29b      	uxth	r3, r3
 800fdca:	461a      	mov	r2, r3
 800fdcc:	6a3b      	ldr	r3, [r7, #32]
 800fdce:	4413      	add	r3, r2
 800fdd0:	623b      	str	r3, [r7, #32]
 800fdd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	00da      	lsls	r2, r3, #3
 800fde0:	6a3b      	ldr	r3, [r7, #32]
 800fde2:	4413      	add	r3, r2
 800fde4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fde8:	61fb      	str	r3, [r7, #28]
 800fdea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800fdf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fdf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	891b      	ldrh	r3, [r3, #8]
 800fe00:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800fe04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	6959      	ldr	r1, [r3, #20]
 800fe10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800fe1a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800fe1e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800fe22:	6800      	ldr	r0, [r0, #0]
 800fe24:	f001 fa65 	bl	80112f2 <USB_WritePMA>
 800fe28:	e3ee      	b.n	8010608 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800fe2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	785b      	ldrb	r3, [r3, #1]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d177      	bne.n	800ff2a <USB_EPStartXfer+0x650>
 800fe3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fe54:	b29b      	uxth	r3, r3
 800fe56:	461a      	mov	r2, r3
 800fe58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe5a:	4413      	add	r3, r2
 800fe5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fe62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	00da      	lsls	r2, r3, #3
 800fe6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe6e:	4413      	add	r3, r2
 800fe70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800fe74:	647b      	str	r3, [r7, #68]	; 0x44
 800fe76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe78:	881b      	ldrh	r3, [r3, #0]
 800fe7a:	b29b      	uxth	r3, r3
 800fe7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fe80:	b29a      	uxth	r2, r3
 800fe82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe84:	801a      	strh	r2, [r3, #0]
 800fe86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe8a:	2b3e      	cmp	r3, #62	; 0x3e
 800fe8c:	d921      	bls.n	800fed2 <USB_EPStartXfer+0x5f8>
 800fe8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe92:	095b      	lsrs	r3, r3, #5
 800fe94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800fe98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fe9c:	f003 031f 	and.w	r3, r3, #31
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d104      	bne.n	800feae <USB_EPStartXfer+0x5d4>
 800fea4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800fea8:	3b01      	subs	r3, #1
 800feaa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800feae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800feb0:	881b      	ldrh	r3, [r3, #0]
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800feb8:	b29b      	uxth	r3, r3
 800feba:	029b      	lsls	r3, r3, #10
 800febc:	b29b      	uxth	r3, r3
 800febe:	4313      	orrs	r3, r2
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800feca:	b29a      	uxth	r2, r3
 800fecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fece:	801a      	strh	r2, [r3, #0]
 800fed0:	e056      	b.n	800ff80 <USB_EPStartXfer+0x6a6>
 800fed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d10a      	bne.n	800fef0 <USB_EPStartXfer+0x616>
 800feda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fedc:	881b      	ldrh	r3, [r3, #0]
 800fede:	b29b      	uxth	r3, r3
 800fee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fee8:	b29a      	uxth	r2, r3
 800feea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800feec:	801a      	strh	r2, [r3, #0]
 800feee:	e047      	b.n	800ff80 <USB_EPStartXfer+0x6a6>
 800fef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fef4:	085b      	lsrs	r3, r3, #1
 800fef6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800fefa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fefe:	f003 0301 	and.w	r3, r3, #1
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d004      	beq.n	800ff10 <USB_EPStartXfer+0x636>
 800ff06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ff10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff12:	881b      	ldrh	r3, [r3, #0]
 800ff14:	b29a      	uxth	r2, r3
 800ff16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	029b      	lsls	r3, r3, #10
 800ff1e:	b29b      	uxth	r3, r3
 800ff20:	4313      	orrs	r3, r2
 800ff22:	b29a      	uxth	r2, r3
 800ff24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff26:	801a      	strh	r2, [r3, #0]
 800ff28:	e02a      	b.n	800ff80 <USB_EPStartXfer+0x6a6>
 800ff2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	785b      	ldrb	r3, [r3, #1]
 800ff36:	2b01      	cmp	r3, #1
 800ff38:	d122      	bne.n	800ff80 <USB_EPStartXfer+0x6a6>
 800ff3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	653b      	str	r3, [r7, #80]	; 0x50
 800ff46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	461a      	mov	r2, r3
 800ff58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff5a:	4413      	add	r3, r2
 800ff5c:	653b      	str	r3, [r7, #80]	; 0x50
 800ff5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	00da      	lsls	r2, r3, #3
 800ff6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff6e:	4413      	add	r3, r2
 800ff70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ff74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ff76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ff80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	891b      	ldrh	r3, [r3, #8]
 800ff8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ff90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ff94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	6959      	ldr	r1, [r3, #20]
 800ff9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffa0:	b29b      	uxth	r3, r3
 800ffa2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ffa6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ffaa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ffae:	6800      	ldr	r0, [r0, #0]
 800ffb0:	f001 f99f 	bl	80112f2 <USB_WritePMA>
            ep->xfer_buff += len;
 800ffb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	695a      	ldr	r2, [r3, #20]
 800ffc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ffc4:	441a      	add	r2, r3
 800ffc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ffd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	6a1a      	ldr	r2, [r3, #32]
 800ffde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ffe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	691b      	ldr	r3, [r3, #16]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d90f      	bls.n	801000e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800ffee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800fff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	6a1a      	ldr	r2, [r3, #32]
 800fffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800fffe:	1ad2      	subs	r2, r2, r3
 8010000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010004:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	621a      	str	r2, [r3, #32]
 801000c:	e00e      	b.n	801002c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 801000e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	6a1b      	ldr	r3, [r3, #32]
 801001a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801001e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	2200      	movs	r2, #0
 801002a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801002c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010030:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	643b      	str	r3, [r7, #64]	; 0x40
 8010038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801003c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	785b      	ldrb	r3, [r3, #1]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d177      	bne.n	8010138 <USB_EPStartXfer+0x85e>
 8010048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801004c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	63bb      	str	r3, [r7, #56]	; 0x38
 8010054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010058:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010062:	b29b      	uxth	r3, r3
 8010064:	461a      	mov	r2, r3
 8010066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010068:	4413      	add	r3, r2
 801006a:	63bb      	str	r3, [r7, #56]	; 0x38
 801006c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	781b      	ldrb	r3, [r3, #0]
 8010078:	00da      	lsls	r2, r3, #3
 801007a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007c:	4413      	add	r3, r2
 801007e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010082:	637b      	str	r3, [r7, #52]	; 0x34
 8010084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010086:	881b      	ldrh	r3, [r3, #0]
 8010088:	b29b      	uxth	r3, r3
 801008a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801008e:	b29a      	uxth	r2, r3
 8010090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010092:	801a      	strh	r2, [r3, #0]
 8010094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010098:	2b3e      	cmp	r3, #62	; 0x3e
 801009a:	d921      	bls.n	80100e0 <USB_EPStartXfer+0x806>
 801009c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100a0:	095b      	lsrs	r3, r3, #5
 80100a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80100a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100aa:	f003 031f 	and.w	r3, r3, #31
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d104      	bne.n	80100bc <USB_EPStartXfer+0x7e2>
 80100b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80100b6:	3b01      	subs	r3, #1
 80100b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80100bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100be:	881b      	ldrh	r3, [r3, #0]
 80100c0:	b29a      	uxth	r2, r3
 80100c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80100c6:	b29b      	uxth	r3, r3
 80100c8:	029b      	lsls	r3, r3, #10
 80100ca:	b29b      	uxth	r3, r3
 80100cc:	4313      	orrs	r3, r2
 80100ce:	b29b      	uxth	r3, r3
 80100d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80100d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80100d8:	b29a      	uxth	r2, r3
 80100da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100dc:	801a      	strh	r2, [r3, #0]
 80100de:	e050      	b.n	8010182 <USB_EPStartXfer+0x8a8>
 80100e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d10a      	bne.n	80100fe <USB_EPStartXfer+0x824>
 80100e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ea:	881b      	ldrh	r3, [r3, #0]
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80100f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80100f6:	b29a      	uxth	r2, r3
 80100f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100fa:	801a      	strh	r2, [r3, #0]
 80100fc:	e041      	b.n	8010182 <USB_EPStartXfer+0x8a8>
 80100fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010102:	085b      	lsrs	r3, r3, #1
 8010104:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801010c:	f003 0301 	and.w	r3, r3, #1
 8010110:	2b00      	cmp	r3, #0
 8010112:	d004      	beq.n	801011e <USB_EPStartXfer+0x844>
 8010114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010118:	3301      	adds	r3, #1
 801011a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801011e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010120:	881b      	ldrh	r3, [r3, #0]
 8010122:	b29a      	uxth	r2, r3
 8010124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010128:	b29b      	uxth	r3, r3
 801012a:	029b      	lsls	r3, r3, #10
 801012c:	b29b      	uxth	r3, r3
 801012e:	4313      	orrs	r3, r2
 8010130:	b29a      	uxth	r2, r3
 8010132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010134:	801a      	strh	r2, [r3, #0]
 8010136:	e024      	b.n	8010182 <USB_EPStartXfer+0x8a8>
 8010138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801013c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	785b      	ldrb	r3, [r3, #1]
 8010144:	2b01      	cmp	r3, #1
 8010146:	d11c      	bne.n	8010182 <USB_EPStartXfer+0x8a8>
 8010148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801014c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010156:	b29b      	uxth	r3, r3
 8010158:	461a      	mov	r2, r3
 801015a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801015c:	4413      	add	r3, r2
 801015e:	643b      	str	r3, [r7, #64]	; 0x40
 8010160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	00da      	lsls	r2, r3, #3
 801016e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010170:	4413      	add	r3, r2
 8010172:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801017c:	b29a      	uxth	r2, r3
 801017e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010180:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	895b      	ldrh	r3, [r3, #10]
 801018e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	6959      	ldr	r1, [r3, #20]
 801019e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80101a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80101ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80101b0:	6800      	ldr	r0, [r0, #0]
 80101b2:	f001 f89e 	bl	80112f2 <USB_WritePMA>
 80101b6:	e227      	b.n	8010608 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80101b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	6a1b      	ldr	r3, [r3, #32]
 80101c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80101c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80101d0:	681a      	ldr	r2, [r3, #0]
 80101d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	781b      	ldrb	r3, [r3, #0]
 80101de:	009b      	lsls	r3, r3, #2
 80101e0:	4413      	add	r3, r2
 80101e2:	881b      	ldrh	r3, [r3, #0]
 80101e4:	b29b      	uxth	r3, r3
 80101e6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80101ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101ee:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80101f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80101f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80101fa:	681a      	ldr	r2, [r3, #0]
 80101fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	781b      	ldrb	r3, [r3, #0]
 8010208:	009b      	lsls	r3, r3, #2
 801020a:	441a      	add	r2, r3
 801020c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801021c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010220:	b29b      	uxth	r3, r3
 8010222:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010228:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010234:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801023e:	b29b      	uxth	r3, r3
 8010240:	461a      	mov	r2, r3
 8010242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010244:	4413      	add	r3, r2
 8010246:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801024c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	00da      	lsls	r2, r3, #3
 8010256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010258:	4413      	add	r3, r2
 801025a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801025e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010264:	b29a      	uxth	r2, r3
 8010266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010268:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801026a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801026e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	891b      	ldrh	r3, [r3, #8]
 8010276:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801027a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801027e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	6959      	ldr	r1, [r3, #20]
 8010286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801028a:	b29b      	uxth	r3, r3
 801028c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010290:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010294:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010298:	6800      	ldr	r0, [r0, #0]
 801029a:	f001 f82a 	bl	80112f2 <USB_WritePMA>
 801029e:	e1b3      	b.n	8010608 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80102a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	6a1a      	ldr	r2, [r3, #32]
 80102ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80102b0:	1ad2      	subs	r2, r2, r3
 80102b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80102be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102c6:	681a      	ldr	r2, [r3, #0]
 80102c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	009b      	lsls	r3, r3, #2
 80102d6:	4413      	add	r3, r2
 80102d8:	881b      	ldrh	r3, [r3, #0]
 80102da:	b29b      	uxth	r3, r3
 80102dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	f000 80c6 	beq.w	8010472 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80102e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	673b      	str	r3, [r7, #112]	; 0x70
 80102f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80102f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	785b      	ldrb	r3, [r3, #1]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d177      	bne.n	80103f2 <USB_EPStartXfer+0xb18>
 8010302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010306:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	66bb      	str	r3, [r7, #104]	; 0x68
 801030e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010312:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801031c:	b29b      	uxth	r3, r3
 801031e:	461a      	mov	r2, r3
 8010320:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010322:	4413      	add	r3, r2
 8010324:	66bb      	str	r3, [r7, #104]	; 0x68
 8010326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801032a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	781b      	ldrb	r3, [r3, #0]
 8010332:	00da      	lsls	r2, r3, #3
 8010334:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010336:	4413      	add	r3, r2
 8010338:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801033c:	667b      	str	r3, [r7, #100]	; 0x64
 801033e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010340:	881b      	ldrh	r3, [r3, #0]
 8010342:	b29b      	uxth	r3, r3
 8010344:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010348:	b29a      	uxth	r2, r3
 801034a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801034c:	801a      	strh	r2, [r3, #0]
 801034e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010352:	2b3e      	cmp	r3, #62	; 0x3e
 8010354:	d921      	bls.n	801039a <USB_EPStartXfer+0xac0>
 8010356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801035a:	095b      	lsrs	r3, r3, #5
 801035c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010364:	f003 031f 	and.w	r3, r3, #31
 8010368:	2b00      	cmp	r3, #0
 801036a:	d104      	bne.n	8010376 <USB_EPStartXfer+0xa9c>
 801036c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010370:	3b01      	subs	r3, #1
 8010372:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010376:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010378:	881b      	ldrh	r3, [r3, #0]
 801037a:	b29a      	uxth	r2, r3
 801037c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010380:	b29b      	uxth	r3, r3
 8010382:	029b      	lsls	r3, r3, #10
 8010384:	b29b      	uxth	r3, r3
 8010386:	4313      	orrs	r3, r2
 8010388:	b29b      	uxth	r3, r3
 801038a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801038e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010392:	b29a      	uxth	r2, r3
 8010394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010396:	801a      	strh	r2, [r3, #0]
 8010398:	e050      	b.n	801043c <USB_EPStartXfer+0xb62>
 801039a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d10a      	bne.n	80103b8 <USB_EPStartXfer+0xade>
 80103a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103a4:	881b      	ldrh	r3, [r3, #0]
 80103a6:	b29b      	uxth	r3, r3
 80103a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80103ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80103b0:	b29a      	uxth	r2, r3
 80103b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103b4:	801a      	strh	r2, [r3, #0]
 80103b6:	e041      	b.n	801043c <USB_EPStartXfer+0xb62>
 80103b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103bc:	085b      	lsrs	r3, r3, #1
 80103be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80103c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80103c6:	f003 0301 	and.w	r3, r3, #1
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d004      	beq.n	80103d8 <USB_EPStartXfer+0xafe>
 80103ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80103d2:	3301      	adds	r3, #1
 80103d4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80103d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103da:	881b      	ldrh	r3, [r3, #0]
 80103dc:	b29a      	uxth	r2, r3
 80103de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80103e2:	b29b      	uxth	r3, r3
 80103e4:	029b      	lsls	r3, r3, #10
 80103e6:	b29b      	uxth	r3, r3
 80103e8:	4313      	orrs	r3, r2
 80103ea:	b29a      	uxth	r2, r3
 80103ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103ee:	801a      	strh	r2, [r3, #0]
 80103f0:	e024      	b.n	801043c <USB_EPStartXfer+0xb62>
 80103f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80103f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	785b      	ldrb	r3, [r3, #1]
 80103fe:	2b01      	cmp	r3, #1
 8010400:	d11c      	bne.n	801043c <USB_EPStartXfer+0xb62>
 8010402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010410:	b29b      	uxth	r3, r3
 8010412:	461a      	mov	r2, r3
 8010414:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010416:	4413      	add	r3, r2
 8010418:	673b      	str	r3, [r7, #112]	; 0x70
 801041a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801041e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	00da      	lsls	r2, r3, #3
 8010428:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801042a:	4413      	add	r3, r2
 801042c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010430:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010436:	b29a      	uxth	r2, r3
 8010438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801043a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801043c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	895b      	ldrh	r3, [r3, #10]
 8010448:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801044c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	6959      	ldr	r1, [r3, #20]
 8010458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801045c:	b29b      	uxth	r3, r3
 801045e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010462:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010466:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801046a:	6800      	ldr	r0, [r0, #0]
 801046c:	f000 ff41 	bl	80112f2 <USB_WritePMA>
 8010470:	e0ca      	b.n	8010608 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	785b      	ldrb	r3, [r3, #1]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d177      	bne.n	8010572 <USB_EPStartXfer+0xc98>
 8010482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801048e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801049c:	b29b      	uxth	r3, r3
 801049e:	461a      	mov	r2, r3
 80104a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80104a2:	4413      	add	r3, r2
 80104a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80104a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	00da      	lsls	r2, r3, #3
 80104b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80104b6:	4413      	add	r3, r2
 80104b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80104bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80104be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104c0:	881b      	ldrh	r3, [r3, #0]
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80104c8:	b29a      	uxth	r2, r3
 80104ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104cc:	801a      	strh	r2, [r3, #0]
 80104ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104d2:	2b3e      	cmp	r3, #62	; 0x3e
 80104d4:	d921      	bls.n	801051a <USB_EPStartXfer+0xc40>
 80104d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104da:	095b      	lsrs	r3, r3, #5
 80104dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80104e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80104e4:	f003 031f 	and.w	r3, r3, #31
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d104      	bne.n	80104f6 <USB_EPStartXfer+0xc1c>
 80104ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80104f0:	3b01      	subs	r3, #1
 80104f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80104f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80104f8:	881b      	ldrh	r3, [r3, #0]
 80104fa:	b29a      	uxth	r2, r3
 80104fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010500:	b29b      	uxth	r3, r3
 8010502:	029b      	lsls	r3, r3, #10
 8010504:	b29b      	uxth	r3, r3
 8010506:	4313      	orrs	r3, r2
 8010508:	b29b      	uxth	r3, r3
 801050a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801050e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010512:	b29a      	uxth	r2, r3
 8010514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010516:	801a      	strh	r2, [r3, #0]
 8010518:	e05c      	b.n	80105d4 <USB_EPStartXfer+0xcfa>
 801051a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801051e:	2b00      	cmp	r3, #0
 8010520:	d10a      	bne.n	8010538 <USB_EPStartXfer+0xc5e>
 8010522:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010524:	881b      	ldrh	r3, [r3, #0]
 8010526:	b29b      	uxth	r3, r3
 8010528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801052c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010530:	b29a      	uxth	r2, r3
 8010532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010534:	801a      	strh	r2, [r3, #0]
 8010536:	e04d      	b.n	80105d4 <USB_EPStartXfer+0xcfa>
 8010538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801053c:	085b      	lsrs	r3, r3, #1
 801053e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010546:	f003 0301 	and.w	r3, r3, #1
 801054a:	2b00      	cmp	r3, #0
 801054c:	d004      	beq.n	8010558 <USB_EPStartXfer+0xc7e>
 801054e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010552:	3301      	adds	r3, #1
 8010554:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801055a:	881b      	ldrh	r3, [r3, #0]
 801055c:	b29a      	uxth	r2, r3
 801055e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010562:	b29b      	uxth	r3, r3
 8010564:	029b      	lsls	r3, r3, #10
 8010566:	b29b      	uxth	r3, r3
 8010568:	4313      	orrs	r3, r2
 801056a:	b29a      	uxth	r2, r3
 801056c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801056e:	801a      	strh	r2, [r3, #0]
 8010570:	e030      	b.n	80105d4 <USB_EPStartXfer+0xcfa>
 8010572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	785b      	ldrb	r3, [r3, #1]
 801057e:	2b01      	cmp	r3, #1
 8010580:	d128      	bne.n	80105d4 <USB_EPStartXfer+0xcfa>
 8010582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010594:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801059e:	b29b      	uxth	r3, r3
 80105a0:	461a      	mov	r2, r3
 80105a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80105a6:	4413      	add	r3, r2
 80105a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80105ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	00da      	lsls	r2, r3, #3
 80105ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80105be:	4413      	add	r3, r2
 80105c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80105c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80105c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80105d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80105d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	891b      	ldrh	r3, [r3, #8]
 80105e0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80105e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	6959      	ldr	r1, [r3, #20]
 80105f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80105fa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80105fe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010602:	6800      	ldr	r0, [r0, #0]
 8010604:	f000 fe75 	bl	80112f2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8010608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801060c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010610:	681a      	ldr	r2, [r3, #0]
 8010612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	009b      	lsls	r3, r3, #2
 8010620:	4413      	add	r3, r2
 8010622:	881b      	ldrh	r3, [r3, #0]
 8010624:	b29b      	uxth	r3, r3
 8010626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801062a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801062e:	817b      	strh	r3, [r7, #10]
 8010630:	897b      	ldrh	r3, [r7, #10]
 8010632:	f083 0310 	eor.w	r3, r3, #16
 8010636:	817b      	strh	r3, [r7, #10]
 8010638:	897b      	ldrh	r3, [r7, #10]
 801063a:	f083 0320 	eor.w	r3, r3, #32
 801063e:	817b      	strh	r3, [r7, #10]
 8010640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010644:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801064e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	009b      	lsls	r3, r3, #2
 8010658:	441a      	add	r2, r3
 801065a:	897b      	ldrh	r3, [r7, #10]
 801065c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010660:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010664:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801066c:	b29b      	uxth	r3, r3
 801066e:	8013      	strh	r3, [r2, #0]
 8010670:	f000 bcde 	b.w	8011030 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8010674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	7b1b      	ldrb	r3, [r3, #12]
 8010680:	2b00      	cmp	r3, #0
 8010682:	f040 80bb 	bne.w	80107fc <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8010686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801068a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	699a      	ldr	r2, [r3, #24]
 8010692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	691b      	ldr	r3, [r3, #16]
 801069e:	429a      	cmp	r2, r3
 80106a0:	d917      	bls.n	80106d2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80106a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	691b      	ldr	r3, [r3, #16]
 80106ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80106b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	699a      	ldr	r2, [r3, #24]
 80106be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106c2:	1ad2      	subs	r2, r2, r3
 80106c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	619a      	str	r2, [r3, #24]
 80106d0:	e00e      	b.n	80106f0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80106d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	699b      	ldr	r3, [r3, #24]
 80106de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80106e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	2200      	movs	r2, #0
 80106ee:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80106f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80106f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80106fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801070c:	b29b      	uxth	r3, r3
 801070e:	461a      	mov	r2, r3
 8010710:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010714:	4413      	add	r3, r2
 8010716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801071a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801071e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	781b      	ldrb	r3, [r3, #0]
 8010726:	00da      	lsls	r2, r3, #3
 8010728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801072c:	4413      	add	r3, r2
 801072e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010732:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801073a:	881b      	ldrh	r3, [r3, #0]
 801073c:	b29b      	uxth	r3, r3
 801073e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010742:	b29a      	uxth	r2, r3
 8010744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010748:	801a      	strh	r2, [r3, #0]
 801074a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801074e:	2b3e      	cmp	r3, #62	; 0x3e
 8010750:	d924      	bls.n	801079c <USB_EPStartXfer+0xec2>
 8010752:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010756:	095b      	lsrs	r3, r3, #5
 8010758:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801075c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010760:	f003 031f 	and.w	r3, r3, #31
 8010764:	2b00      	cmp	r3, #0
 8010766:	d104      	bne.n	8010772 <USB_EPStartXfer+0xe98>
 8010768:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801076c:	3b01      	subs	r3, #1
 801076e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010776:	881b      	ldrh	r3, [r3, #0]
 8010778:	b29a      	uxth	r2, r3
 801077a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801077e:	b29b      	uxth	r3, r3
 8010780:	029b      	lsls	r3, r3, #10
 8010782:	b29b      	uxth	r3, r3
 8010784:	4313      	orrs	r3, r2
 8010786:	b29b      	uxth	r3, r3
 8010788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801078c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010790:	b29a      	uxth	r2, r3
 8010792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010796:	801a      	strh	r2, [r3, #0]
 8010798:	f000 bc10 	b.w	8010fbc <USB_EPStartXfer+0x16e2>
 801079c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d10c      	bne.n	80107be <USB_EPStartXfer+0xee4>
 80107a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107a8:	881b      	ldrh	r3, [r3, #0]
 80107aa:	b29b      	uxth	r3, r3
 80107ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80107b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80107b4:	b29a      	uxth	r2, r3
 80107b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107ba:	801a      	strh	r2, [r3, #0]
 80107bc:	e3fe      	b.n	8010fbc <USB_EPStartXfer+0x16e2>
 80107be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107c2:	085b      	lsrs	r3, r3, #1
 80107c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80107c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107cc:	f003 0301 	and.w	r3, r3, #1
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d004      	beq.n	80107de <USB_EPStartXfer+0xf04>
 80107d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80107d8:	3301      	adds	r3, #1
 80107da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80107de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107e2:	881b      	ldrh	r3, [r3, #0]
 80107e4:	b29a      	uxth	r2, r3
 80107e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	029b      	lsls	r3, r3, #10
 80107ee:	b29b      	uxth	r3, r3
 80107f0:	4313      	orrs	r3, r2
 80107f2:	b29a      	uxth	r2, r3
 80107f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80107f8:	801a      	strh	r2, [r3, #0]
 80107fa:	e3df      	b.n	8010fbc <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80107fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	78db      	ldrb	r3, [r3, #3]
 8010808:	2b02      	cmp	r3, #2
 801080a:	f040 8218 	bne.w	8010c3e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801080e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	785b      	ldrb	r3, [r3, #1]
 801081a:	2b00      	cmp	r3, #0
 801081c:	f040 809d 	bne.w	801095a <USB_EPStartXfer+0x1080>
 8010820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801082e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010832:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801083c:	b29b      	uxth	r3, r3
 801083e:	461a      	mov	r2, r3
 8010840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010844:	4413      	add	r3, r2
 8010846:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801084a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801084e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	781b      	ldrb	r3, [r3, #0]
 8010856:	00da      	lsls	r2, r3, #3
 8010858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801085c:	4413      	add	r3, r2
 801085e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010862:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801086a:	881b      	ldrh	r3, [r3, #0]
 801086c:	b29b      	uxth	r3, r3
 801086e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010872:	b29a      	uxth	r2, r3
 8010874:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010878:	801a      	strh	r2, [r3, #0]
 801087a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801087e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	691b      	ldr	r3, [r3, #16]
 8010886:	2b3e      	cmp	r3, #62	; 0x3e
 8010888:	d92b      	bls.n	80108e2 <USB_EPStartXfer+0x1008>
 801088a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801088e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	691b      	ldr	r3, [r3, #16]
 8010896:	095b      	lsrs	r3, r3, #5
 8010898:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801089c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	691b      	ldr	r3, [r3, #16]
 80108a8:	f003 031f 	and.w	r3, r3, #31
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d104      	bne.n	80108ba <USB_EPStartXfer+0xfe0>
 80108b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108b4:	3b01      	subs	r3, #1
 80108b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80108ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80108be:	881b      	ldrh	r3, [r3, #0]
 80108c0:	b29a      	uxth	r2, r3
 80108c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	029b      	lsls	r3, r3, #10
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	4313      	orrs	r3, r2
 80108ce:	b29b      	uxth	r3, r3
 80108d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80108d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80108d8:	b29a      	uxth	r2, r3
 80108da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80108de:	801a      	strh	r2, [r3, #0]
 80108e0:	e070      	b.n	80109c4 <USB_EPStartXfer+0x10ea>
 80108e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80108e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	691b      	ldr	r3, [r3, #16]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d10c      	bne.n	801090c <USB_EPStartXfer+0x1032>
 80108f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80108f6:	881b      	ldrh	r3, [r3, #0]
 80108f8:	b29b      	uxth	r3, r3
 80108fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80108fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010902:	b29a      	uxth	r2, r3
 8010904:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010908:	801a      	strh	r2, [r3, #0]
 801090a:	e05b      	b.n	80109c4 <USB_EPStartXfer+0x10ea>
 801090c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	691b      	ldr	r3, [r3, #16]
 8010918:	085b      	lsrs	r3, r3, #1
 801091a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801091e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	691b      	ldr	r3, [r3, #16]
 801092a:	f003 0301 	and.w	r3, r3, #1
 801092e:	2b00      	cmp	r3, #0
 8010930:	d004      	beq.n	801093c <USB_EPStartXfer+0x1062>
 8010932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010936:	3301      	adds	r3, #1
 8010938:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801093c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010940:	881b      	ldrh	r3, [r3, #0]
 8010942:	b29a      	uxth	r2, r3
 8010944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010948:	b29b      	uxth	r3, r3
 801094a:	029b      	lsls	r3, r3, #10
 801094c:	b29b      	uxth	r3, r3
 801094e:	4313      	orrs	r3, r2
 8010950:	b29a      	uxth	r2, r3
 8010952:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010956:	801a      	strh	r2, [r3, #0]
 8010958:	e034      	b.n	80109c4 <USB_EPStartXfer+0x10ea>
 801095a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801095e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	785b      	ldrb	r3, [r3, #1]
 8010966:	2b01      	cmp	r3, #1
 8010968:	d12c      	bne.n	80109c4 <USB_EPStartXfer+0x10ea>
 801096a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801096e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801097c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010986:	b29b      	uxth	r3, r3
 8010988:	461a      	mov	r2, r3
 801098a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801098e:	4413      	add	r3, r2
 8010990:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010998:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	00da      	lsls	r2, r3, #3
 80109a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80109a6:	4413      	add	r3, r2
 80109a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80109ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80109b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	691b      	ldr	r3, [r3, #16]
 80109bc:	b29a      	uxth	r2, r3
 80109be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80109c2:	801a      	strh	r2, [r3, #0]
 80109c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80109d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	785b      	ldrb	r3, [r3, #1]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	f040 809d 	bne.w	8010b1e <USB_EPStartXfer+0x1244>
 80109e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80109f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a00:	b29b      	uxth	r3, r3
 8010a02:	461a      	mov	r2, r3
 8010a04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010a08:	4413      	add	r3, r2
 8010a0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	00da      	lsls	r2, r3, #3
 8010a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010a20:	4413      	add	r3, r2
 8010a22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010a26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a2e:	881b      	ldrh	r3, [r3, #0]
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010a36:	b29a      	uxth	r2, r3
 8010a38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a3c:	801a      	strh	r2, [r3, #0]
 8010a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	691b      	ldr	r3, [r3, #16]
 8010a4a:	2b3e      	cmp	r3, #62	; 0x3e
 8010a4c:	d92b      	bls.n	8010aa6 <USB_EPStartXfer+0x11cc>
 8010a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	691b      	ldr	r3, [r3, #16]
 8010a5a:	095b      	lsrs	r3, r3, #5
 8010a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	691b      	ldr	r3, [r3, #16]
 8010a6c:	f003 031f 	and.w	r3, r3, #31
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d104      	bne.n	8010a7e <USB_EPStartXfer+0x11a4>
 8010a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a78:	3b01      	subs	r3, #1
 8010a7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010a7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a82:	881b      	ldrh	r3, [r3, #0]
 8010a84:	b29a      	uxth	r2, r3
 8010a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010a8a:	b29b      	uxth	r3, r3
 8010a8c:	029b      	lsls	r3, r3, #10
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	4313      	orrs	r3, r2
 8010a92:	b29b      	uxth	r3, r3
 8010a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a9c:	b29a      	uxth	r2, r3
 8010a9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010aa2:	801a      	strh	r2, [r3, #0]
 8010aa4:	e069      	b.n	8010b7a <USB_EPStartXfer+0x12a0>
 8010aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	691b      	ldr	r3, [r3, #16]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d10c      	bne.n	8010ad0 <USB_EPStartXfer+0x11f6>
 8010ab6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010aba:	881b      	ldrh	r3, [r3, #0]
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ac6:	b29a      	uxth	r2, r3
 8010ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010acc:	801a      	strh	r2, [r3, #0]
 8010ace:	e054      	b.n	8010b7a <USB_EPStartXfer+0x12a0>
 8010ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	691b      	ldr	r3, [r3, #16]
 8010adc:	085b      	lsrs	r3, r3, #1
 8010ade:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	691b      	ldr	r3, [r3, #16]
 8010aee:	f003 0301 	and.w	r3, r3, #1
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d004      	beq.n	8010b00 <USB_EPStartXfer+0x1226>
 8010af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010afa:	3301      	adds	r3, #1
 8010afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b04:	881b      	ldrh	r3, [r3, #0]
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	029b      	lsls	r3, r3, #10
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	4313      	orrs	r3, r2
 8010b14:	b29a      	uxth	r2, r3
 8010b16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b1a:	801a      	strh	r2, [r3, #0]
 8010b1c:	e02d      	b.n	8010b7a <USB_EPStartXfer+0x12a0>
 8010b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	785b      	ldrb	r3, [r3, #1]
 8010b2a:	2b01      	cmp	r3, #1
 8010b2c:	d125      	bne.n	8010b7a <USB_EPStartXfer+0x12a0>
 8010b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	461a      	mov	r2, r3
 8010b40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010b44:	4413      	add	r3, r2
 8010b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	00da      	lsls	r2, r3, #3
 8010b58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010b5c:	4413      	add	r3, r2
 8010b5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010b62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	691b      	ldr	r3, [r3, #16]
 8010b72:	b29a      	uxth	r2, r3
 8010b74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010b78:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8010b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	69db      	ldr	r3, [r3, #28]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	f000 8218 	beq.w	8010fbc <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8010b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b94:	681a      	ldr	r2, [r3, #0]
 8010b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	009b      	lsls	r3, r3, #2
 8010ba4:	4413      	add	r3, r2
 8010ba6:	881b      	ldrh	r3, [r3, #0]
 8010ba8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010bac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d005      	beq.n	8010bc4 <USB_EPStartXfer+0x12ea>
 8010bb8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d10d      	bne.n	8010be0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010bc4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	f040 81f5 	bne.w	8010fbc <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8010bd2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8010bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f040 81ee 	bne.w	8010fbc <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8010be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010be4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010be8:	681a      	ldr	r2, [r3, #0]
 8010bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	781b      	ldrb	r3, [r3, #0]
 8010bf6:	009b      	lsls	r3, r3, #2
 8010bf8:	4413      	add	r3, r2
 8010bfa:	881b      	ldrh	r3, [r3, #0]
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c06:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8010c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c12:	681a      	ldr	r2, [r3, #0]
 8010c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	009b      	lsls	r3, r3, #2
 8010c22:	441a      	add	r2, r3
 8010c24:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8010c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010c38:	b29b      	uxth	r3, r3
 8010c3a:	8013      	strh	r3, [r2, #0]
 8010c3c:	e1be      	b.n	8010fbc <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8010c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	78db      	ldrb	r3, [r3, #3]
 8010c4a:	2b01      	cmp	r3, #1
 8010c4c:	f040 81b4 	bne.w	8010fb8 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8010c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	699a      	ldr	r2, [r3, #24]
 8010c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	691b      	ldr	r3, [r3, #16]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d917      	bls.n	8010c9c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8010c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	691b      	ldr	r3, [r3, #16]
 8010c78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8010c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	699a      	ldr	r2, [r3, #24]
 8010c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c8c:	1ad2      	subs	r2, r2, r3
 8010c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	619a      	str	r2, [r3, #24]
 8010c9a:	e00e      	b.n	8010cba <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8010c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	699b      	ldr	r3, [r3, #24]
 8010ca8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8010cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8010cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	785b      	ldrb	r3, [r3, #1]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	f040 8085 	bne.w	8010dd6 <USB_EPStartXfer+0x14fc>
 8010ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010ce8:	b29b      	uxth	r3, r3
 8010cea:	461a      	mov	r2, r3
 8010cec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010cf0:	4413      	add	r3, r2
 8010cf2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	781b      	ldrb	r3, [r3, #0]
 8010d02:	00da      	lsls	r2, r3, #3
 8010d04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010d08:	4413      	add	r3, r2
 8010d0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010d0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010d12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010d16:	881b      	ldrh	r3, [r3, #0]
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010d1e:	b29a      	uxth	r2, r3
 8010d20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010d24:	801a      	strh	r2, [r3, #0]
 8010d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d2a:	2b3e      	cmp	r3, #62	; 0x3e
 8010d2c:	d923      	bls.n	8010d76 <USB_EPStartXfer+0x149c>
 8010d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d32:	095b      	lsrs	r3, r3, #5
 8010d34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d3c:	f003 031f 	and.w	r3, r3, #31
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d104      	bne.n	8010d4e <USB_EPStartXfer+0x1474>
 8010d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d48:	3b01      	subs	r3, #1
 8010d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010d4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010d52:	881b      	ldrh	r3, [r3, #0]
 8010d54:	b29a      	uxth	r2, r3
 8010d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	029b      	lsls	r3, r3, #10
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	4313      	orrs	r3, r2
 8010d62:	b29b      	uxth	r3, r3
 8010d64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d6c:	b29a      	uxth	r2, r3
 8010d6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010d72:	801a      	strh	r2, [r3, #0]
 8010d74:	e060      	b.n	8010e38 <USB_EPStartXfer+0x155e>
 8010d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d10c      	bne.n	8010d98 <USB_EPStartXfer+0x14be>
 8010d7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010d82:	881b      	ldrh	r3, [r3, #0]
 8010d84:	b29b      	uxth	r3, r3
 8010d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d8e:	b29a      	uxth	r2, r3
 8010d90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010d94:	801a      	strh	r2, [r3, #0]
 8010d96:	e04f      	b.n	8010e38 <USB_EPStartXfer+0x155e>
 8010d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d9c:	085b      	lsrs	r3, r3, #1
 8010d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010da6:	f003 0301 	and.w	r3, r3, #1
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d004      	beq.n	8010db8 <USB_EPStartXfer+0x14de>
 8010dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010db2:	3301      	adds	r3, #1
 8010db4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010db8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010dbc:	881b      	ldrh	r3, [r3, #0]
 8010dbe:	b29a      	uxth	r2, r3
 8010dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010dc4:	b29b      	uxth	r3, r3
 8010dc6:	029b      	lsls	r3, r3, #10
 8010dc8:	b29b      	uxth	r3, r3
 8010dca:	4313      	orrs	r3, r2
 8010dcc:	b29a      	uxth	r2, r3
 8010dce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010dd2:	801a      	strh	r2, [r3, #0]
 8010dd4:	e030      	b.n	8010e38 <USB_EPStartXfer+0x155e>
 8010dd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	785b      	ldrb	r3, [r3, #1]
 8010de2:	2b01      	cmp	r3, #1
 8010de4:	d128      	bne.n	8010e38 <USB_EPStartXfer+0x155e>
 8010de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010df4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010df8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e02:	b29b      	uxth	r3, r3
 8010e04:	461a      	mov	r2, r3
 8010e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010e0a:	4413      	add	r3, r2
 8010e0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010e10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	781b      	ldrb	r3, [r3, #0]
 8010e1c:	00da      	lsls	r2, r3, #3
 8010e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010e22:	4413      	add	r3, r2
 8010e24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e30:	b29a      	uxth	r2, r3
 8010e32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010e36:	801a      	strh	r2, [r3, #0]
 8010e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	785b      	ldrb	r3, [r3, #1]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	f040 8085 	bne.w	8010f62 <USB_EPStartXfer+0x1688>
 8010e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	461a      	mov	r2, r3
 8010e78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010e7c:	4413      	add	r3, r2
 8010e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	781b      	ldrb	r3, [r3, #0]
 8010e8e:	00da      	lsls	r2, r3, #3
 8010e90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010e94:	4413      	add	r3, r2
 8010e96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010e9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010ea2:	881b      	ldrh	r3, [r3, #0]
 8010ea4:	b29b      	uxth	r3, r3
 8010ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010eaa:	b29a      	uxth	r2, r3
 8010eac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010eb0:	801a      	strh	r2, [r3, #0]
 8010eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010eb6:	2b3e      	cmp	r3, #62	; 0x3e
 8010eb8:	d923      	bls.n	8010f02 <USB_EPStartXfer+0x1628>
 8010eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ebe:	095b      	lsrs	r3, r3, #5
 8010ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ec8:	f003 031f 	and.w	r3, r3, #31
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d104      	bne.n	8010eda <USB_EPStartXfer+0x1600>
 8010ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010ed4:	3b01      	subs	r3, #1
 8010ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010eda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010ede:	881b      	ldrh	r3, [r3, #0]
 8010ee0:	b29a      	uxth	r2, r3
 8010ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	029b      	lsls	r3, r3, #10
 8010eea:	b29b      	uxth	r3, r3
 8010eec:	4313      	orrs	r3, r2
 8010eee:	b29b      	uxth	r3, r3
 8010ef0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ef4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ef8:	b29a      	uxth	r2, r3
 8010efa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010efe:	801a      	strh	r2, [r3, #0]
 8010f00:	e05c      	b.n	8010fbc <USB_EPStartXfer+0x16e2>
 8010f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d10c      	bne.n	8010f24 <USB_EPStartXfer+0x164a>
 8010f0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f0e:	881b      	ldrh	r3, [r3, #0]
 8010f10:	b29b      	uxth	r3, r3
 8010f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f1a:	b29a      	uxth	r2, r3
 8010f1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f20:	801a      	strh	r2, [r3, #0]
 8010f22:	e04b      	b.n	8010fbc <USB_EPStartXfer+0x16e2>
 8010f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f28:	085b      	lsrs	r3, r3, #1
 8010f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f32:	f003 0301 	and.w	r3, r3, #1
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d004      	beq.n	8010f44 <USB_EPStartXfer+0x166a>
 8010f3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010f3e:	3301      	adds	r3, #1
 8010f40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010f44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f48:	881b      	ldrh	r3, [r3, #0]
 8010f4a:	b29a      	uxth	r2, r3
 8010f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010f50:	b29b      	uxth	r3, r3
 8010f52:	029b      	lsls	r3, r3, #10
 8010f54:	b29b      	uxth	r3, r3
 8010f56:	4313      	orrs	r3, r2
 8010f58:	b29a      	uxth	r2, r3
 8010f5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010f5e:	801a      	strh	r2, [r3, #0]
 8010f60:	e02c      	b.n	8010fbc <USB_EPStartXfer+0x16e2>
 8010f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	785b      	ldrb	r3, [r3, #1]
 8010f6e:	2b01      	cmp	r3, #1
 8010f70:	d124      	bne.n	8010fbc <USB_EPStartXfer+0x16e2>
 8010f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010f80:	b29b      	uxth	r3, r3
 8010f82:	461a      	mov	r2, r3
 8010f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010f88:	4413      	add	r3, r2
 8010f8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	781b      	ldrb	r3, [r3, #0]
 8010f9a:	00da      	lsls	r2, r3, #3
 8010f9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010fa0:	4413      	add	r3, r2
 8010fa2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fae:	b29a      	uxth	r2, r3
 8010fb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010fb4:	801a      	strh	r2, [r3, #0]
 8010fb6:	e001      	b.n	8010fbc <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8010fb8:	2301      	movs	r3, #1
 8010fba:	e03a      	b.n	8011032 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	009b      	lsls	r3, r3, #2
 8010fd4:	4413      	add	r3, r2
 8010fd6:	881b      	ldrh	r3, [r3, #0]
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fe2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010fe6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010fea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010fee:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010ff2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010ff6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010ffa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801100c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	781b      	ldrb	r3, [r3, #0]
 8011014:	009b      	lsls	r3, r3, #2
 8011016:	441a      	add	r2, r3
 8011018:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801101c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801102c:	b29b      	uxth	r3, r3
 801102e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011030:	2300      	movs	r3, #0
}
 8011032:	4618      	mov	r0, r3
 8011034:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}

0801103c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801103c:	b480      	push	{r7}
 801103e:	b085      	sub	sp, #20
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	785b      	ldrb	r3, [r3, #1]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d020      	beq.n	8011090 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801104e:	687a      	ldr	r2, [r7, #4]
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	781b      	ldrb	r3, [r3, #0]
 8011054:	009b      	lsls	r3, r3, #2
 8011056:	4413      	add	r3, r2
 8011058:	881b      	ldrh	r3, [r3, #0]
 801105a:	b29b      	uxth	r3, r3
 801105c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011064:	81bb      	strh	r3, [r7, #12]
 8011066:	89bb      	ldrh	r3, [r7, #12]
 8011068:	f083 0310 	eor.w	r3, r3, #16
 801106c:	81bb      	strh	r3, [r7, #12]
 801106e:	687a      	ldr	r2, [r7, #4]
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	781b      	ldrb	r3, [r3, #0]
 8011074:	009b      	lsls	r3, r3, #2
 8011076:	441a      	add	r2, r3
 8011078:	89bb      	ldrh	r3, [r7, #12]
 801107a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801107e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801108a:	b29b      	uxth	r3, r3
 801108c:	8013      	strh	r3, [r2, #0]
 801108e:	e01f      	b.n	80110d0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011090:	687a      	ldr	r2, [r7, #4]
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	781b      	ldrb	r3, [r3, #0]
 8011096:	009b      	lsls	r3, r3, #2
 8011098:	4413      	add	r3, r2
 801109a:	881b      	ldrh	r3, [r3, #0]
 801109c:	b29b      	uxth	r3, r3
 801109e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80110a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110a6:	81fb      	strh	r3, [r7, #14]
 80110a8:	89fb      	ldrh	r3, [r7, #14]
 80110aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80110ae:	81fb      	strh	r3, [r7, #14]
 80110b0:	687a      	ldr	r2, [r7, #4]
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	781b      	ldrb	r3, [r3, #0]
 80110b6:	009b      	lsls	r3, r3, #2
 80110b8:	441a      	add	r2, r3
 80110ba:	89fb      	ldrh	r3, [r7, #14]
 80110bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80110c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80110c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110cc:	b29b      	uxth	r3, r3
 80110ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3714      	adds	r7, #20
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr

080110de <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80110de:	b480      	push	{r7}
 80110e0:	b087      	sub	sp, #28
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
 80110e6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	7b1b      	ldrb	r3, [r3, #12]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	f040 809d 	bne.w	801122c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	785b      	ldrb	r3, [r3, #1]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d04c      	beq.n	8011194 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80110fa:	687a      	ldr	r2, [r7, #4]
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	009b      	lsls	r3, r3, #2
 8011102:	4413      	add	r3, r2
 8011104:	881b      	ldrh	r3, [r3, #0]
 8011106:	823b      	strh	r3, [r7, #16]
 8011108:	8a3b      	ldrh	r3, [r7, #16]
 801110a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801110e:	2b00      	cmp	r3, #0
 8011110:	d01b      	beq.n	801114a <USB_EPClearStall+0x6c>
 8011112:	687a      	ldr	r2, [r7, #4]
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	009b      	lsls	r3, r3, #2
 801111a:	4413      	add	r3, r2
 801111c:	881b      	ldrh	r3, [r3, #0]
 801111e:	b29b      	uxth	r3, r3
 8011120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011128:	81fb      	strh	r3, [r7, #14]
 801112a:	687a      	ldr	r2, [r7, #4]
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	781b      	ldrb	r3, [r3, #0]
 8011130:	009b      	lsls	r3, r3, #2
 8011132:	441a      	add	r2, r3
 8011134:	89fb      	ldrh	r3, [r7, #14]
 8011136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801113a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801113e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011142:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011146:	b29b      	uxth	r3, r3
 8011148:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	78db      	ldrb	r3, [r3, #3]
 801114e:	2b01      	cmp	r3, #1
 8011150:	d06c      	beq.n	801122c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011152:	687a      	ldr	r2, [r7, #4]
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	781b      	ldrb	r3, [r3, #0]
 8011158:	009b      	lsls	r3, r3, #2
 801115a:	4413      	add	r3, r2
 801115c:	881b      	ldrh	r3, [r3, #0]
 801115e:	b29b      	uxth	r3, r3
 8011160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011168:	81bb      	strh	r3, [r7, #12]
 801116a:	89bb      	ldrh	r3, [r7, #12]
 801116c:	f083 0320 	eor.w	r3, r3, #32
 8011170:	81bb      	strh	r3, [r7, #12]
 8011172:	687a      	ldr	r2, [r7, #4]
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	009b      	lsls	r3, r3, #2
 801117a:	441a      	add	r2, r3
 801117c:	89bb      	ldrh	r3, [r7, #12]
 801117e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801118a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801118e:	b29b      	uxth	r3, r3
 8011190:	8013      	strh	r3, [r2, #0]
 8011192:	e04b      	b.n	801122c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011194:	687a      	ldr	r2, [r7, #4]
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	781b      	ldrb	r3, [r3, #0]
 801119a:	009b      	lsls	r3, r3, #2
 801119c:	4413      	add	r3, r2
 801119e:	881b      	ldrh	r3, [r3, #0]
 80111a0:	82fb      	strh	r3, [r7, #22]
 80111a2:	8afb      	ldrh	r3, [r7, #22]
 80111a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d01b      	beq.n	80111e4 <USB_EPClearStall+0x106>
 80111ac:	687a      	ldr	r2, [r7, #4]
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	009b      	lsls	r3, r3, #2
 80111b4:	4413      	add	r3, r2
 80111b6:	881b      	ldrh	r3, [r3, #0]
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111c2:	82bb      	strh	r3, [r7, #20]
 80111c4:	687a      	ldr	r2, [r7, #4]
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	009b      	lsls	r3, r3, #2
 80111cc:	441a      	add	r2, r3
 80111ce:	8abb      	ldrh	r3, [r7, #20]
 80111d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80111d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80111d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80111dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111e0:	b29b      	uxth	r3, r3
 80111e2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80111e4:	687a      	ldr	r2, [r7, #4]
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	009b      	lsls	r3, r3, #2
 80111ec:	4413      	add	r3, r2
 80111ee:	881b      	ldrh	r3, [r3, #0]
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80111f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80111fa:	827b      	strh	r3, [r7, #18]
 80111fc:	8a7b      	ldrh	r3, [r7, #18]
 80111fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011202:	827b      	strh	r3, [r7, #18]
 8011204:	8a7b      	ldrh	r3, [r7, #18]
 8011206:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801120a:	827b      	strh	r3, [r7, #18]
 801120c:	687a      	ldr	r2, [r7, #4]
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	009b      	lsls	r3, r3, #2
 8011214:	441a      	add	r2, r3
 8011216:	8a7b      	ldrh	r3, [r7, #18]
 8011218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801121c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011228:	b29b      	uxth	r3, r3
 801122a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 801122c:	2300      	movs	r3, #0
}
 801122e:	4618      	mov	r0, r3
 8011230:	371c      	adds	r7, #28
 8011232:	46bd      	mov	sp, r7
 8011234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011238:	4770      	bx	lr

0801123a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801123a:	b480      	push	{r7}
 801123c:	b083      	sub	sp, #12
 801123e:	af00      	add	r7, sp, #0
 8011240:	6078      	str	r0, [r7, #4]
 8011242:	460b      	mov	r3, r1
 8011244:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8011246:	78fb      	ldrb	r3, [r7, #3]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d103      	bne.n	8011254 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	2280      	movs	r2, #128	; 0x80
 8011250:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8011254:	2300      	movs	r3, #0
}
 8011256:	4618      	mov	r0, r3
 8011258:	370c      	adds	r7, #12
 801125a:	46bd      	mov	sp, r7
 801125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011260:	4770      	bx	lr

08011262 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011262:	b480      	push	{r7}
 8011264:	b083      	sub	sp, #12
 8011266:	af00      	add	r7, sp, #0
 8011268:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011270:	b29b      	uxth	r3, r3
 8011272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801127a:	b29a      	uxth	r2, r3
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8011282:	2300      	movs	r3, #0
}
 8011284:	4618      	mov	r0, r3
 8011286:	370c      	adds	r7, #12
 8011288:	46bd      	mov	sp, r7
 801128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128e:	4770      	bx	lr

08011290 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8011290:	b480      	push	{r7}
 8011292:	b083      	sub	sp, #12
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801129e:	b29b      	uxth	r3, r3
 80112a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80112a4:	b29a      	uxth	r2, r3
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80112ac:	2300      	movs	r3, #0
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	370c      	adds	r7, #12
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr

080112ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80112ba:	b480      	push	{r7}
 80112bc:	b085      	sub	sp, #20
 80112be:	af00      	add	r7, sp, #0
 80112c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80112c8:	b29b      	uxth	r3, r3
 80112ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80112cc:	68fb      	ldr	r3, [r7, #12]
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3714      	adds	r7, #20
 80112d2:	46bd      	mov	sp, r7
 80112d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d8:	4770      	bx	lr

080112da <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80112da:	b480      	push	{r7}
 80112dc:	b083      	sub	sp, #12
 80112de:	af00      	add	r7, sp, #0
 80112e0:	6078      	str	r0, [r7, #4]
 80112e2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80112e4:	2300      	movs	r3, #0
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	370c      	adds	r7, #12
 80112ea:	46bd      	mov	sp, r7
 80112ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f0:	4770      	bx	lr

080112f2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80112f2:	b480      	push	{r7}
 80112f4:	b08b      	sub	sp, #44	; 0x2c
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	60f8      	str	r0, [r7, #12]
 80112fa:	60b9      	str	r1, [r7, #8]
 80112fc:	4611      	mov	r1, r2
 80112fe:	461a      	mov	r2, r3
 8011300:	460b      	mov	r3, r1
 8011302:	80fb      	strh	r3, [r7, #6]
 8011304:	4613      	mov	r3, r2
 8011306:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011308:	88bb      	ldrh	r3, [r7, #4]
 801130a:	3301      	adds	r3, #1
 801130c:	085b      	lsrs	r3, r3, #1
 801130e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011318:	88fa      	ldrh	r2, [r7, #6]
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	4413      	add	r3, r2
 801131e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011322:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011324:	69bb      	ldr	r3, [r7, #24]
 8011326:	627b      	str	r3, [r7, #36]	; 0x24
 8011328:	e01b      	b.n	8011362 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 801132a:	69fb      	ldr	r3, [r7, #28]
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011330:	69fb      	ldr	r3, [r7, #28]
 8011332:	3301      	adds	r3, #1
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	021b      	lsls	r3, r3, #8
 8011338:	b21a      	sxth	r2, r3
 801133a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801133e:	4313      	orrs	r3, r2
 8011340:	b21b      	sxth	r3, r3
 8011342:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011344:	6a3b      	ldr	r3, [r7, #32]
 8011346:	8a7a      	ldrh	r2, [r7, #18]
 8011348:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801134a:	6a3b      	ldr	r3, [r7, #32]
 801134c:	3302      	adds	r3, #2
 801134e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8011350:	69fb      	ldr	r3, [r7, #28]
 8011352:	3301      	adds	r3, #1
 8011354:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8011356:	69fb      	ldr	r3, [r7, #28]
 8011358:	3301      	adds	r3, #1
 801135a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135e:	3b01      	subs	r3, #1
 8011360:	627b      	str	r3, [r7, #36]	; 0x24
 8011362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011364:	2b00      	cmp	r3, #0
 8011366:	d1e0      	bne.n	801132a <USB_WritePMA+0x38>
  }
}
 8011368:	bf00      	nop
 801136a:	bf00      	nop
 801136c:	372c      	adds	r7, #44	; 0x2c
 801136e:	46bd      	mov	sp, r7
 8011370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011374:	4770      	bx	lr

08011376 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011376:	b480      	push	{r7}
 8011378:	b08b      	sub	sp, #44	; 0x2c
 801137a:	af00      	add	r7, sp, #0
 801137c:	60f8      	str	r0, [r7, #12]
 801137e:	60b9      	str	r1, [r7, #8]
 8011380:	4611      	mov	r1, r2
 8011382:	461a      	mov	r2, r3
 8011384:	460b      	mov	r3, r1
 8011386:	80fb      	strh	r3, [r7, #6]
 8011388:	4613      	mov	r3, r2
 801138a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801138c:	88bb      	ldrh	r3, [r7, #4]
 801138e:	085b      	lsrs	r3, r3, #1
 8011390:	b29b      	uxth	r3, r3
 8011392:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801139c:	88fa      	ldrh	r2, [r7, #6]
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	4413      	add	r3, r2
 80113a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80113a6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80113a8:	69bb      	ldr	r3, [r7, #24]
 80113aa:	627b      	str	r3, [r7, #36]	; 0x24
 80113ac:	e018      	b.n	80113e0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80113ae:	6a3b      	ldr	r3, [r7, #32]
 80113b0:	881b      	ldrh	r3, [r3, #0]
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80113b6:	6a3b      	ldr	r3, [r7, #32]
 80113b8:	3302      	adds	r3, #2
 80113ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80113bc:	693b      	ldr	r3, [r7, #16]
 80113be:	b2da      	uxtb	r2, r3
 80113c0:	69fb      	ldr	r3, [r7, #28]
 80113c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80113c4:	69fb      	ldr	r3, [r7, #28]
 80113c6:	3301      	adds	r3, #1
 80113c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	0a1b      	lsrs	r3, r3, #8
 80113ce:	b2da      	uxtb	r2, r3
 80113d0:	69fb      	ldr	r3, [r7, #28]
 80113d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80113d4:	69fb      	ldr	r3, [r7, #28]
 80113d6:	3301      	adds	r3, #1
 80113d8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80113da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113dc:	3b01      	subs	r3, #1
 80113de:	627b      	str	r3, [r7, #36]	; 0x24
 80113e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d1e3      	bne.n	80113ae <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80113e6:	88bb      	ldrh	r3, [r7, #4]
 80113e8:	f003 0301 	and.w	r3, r3, #1
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d007      	beq.n	8011402 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80113f2:	6a3b      	ldr	r3, [r7, #32]
 80113f4:	881b      	ldrh	r3, [r3, #0]
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	b2da      	uxtb	r2, r3
 80113fe:	69fb      	ldr	r3, [r7, #28]
 8011400:	701a      	strb	r2, [r3, #0]
  }
}
 8011402:	bf00      	nop
 8011404:	372c      	adds	r7, #44	; 0x2c
 8011406:	46bd      	mov	sp, r7
 8011408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140c:	4770      	bx	lr
	...

08011410 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]
 8011418:	460b      	mov	r3, r1
 801141a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801141c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011420:	f003 fa30 	bl	8014884 <USBD_static_malloc>
 8011424:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d109      	bne.n	8011440 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	32b0      	adds	r2, #176	; 0xb0
 8011436:	2100      	movs	r1, #0
 8011438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801143c:	2302      	movs	r3, #2
 801143e:	e0d4      	b.n	80115ea <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8011440:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8011444:	2100      	movs	r1, #0
 8011446:	68f8      	ldr	r0, [r7, #12]
 8011448:	f005 f9cf 	bl	80167ea <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	32b0      	adds	r2, #176	; 0xb0
 8011456:	68f9      	ldr	r1, [r7, #12]
 8011458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	32b0      	adds	r2, #176	; 0xb0
 8011466:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	7c1b      	ldrb	r3, [r3, #16]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d138      	bne.n	80114ea <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011478:	4b5e      	ldr	r3, [pc, #376]	; (80115f4 <USBD_CDC_Init+0x1e4>)
 801147a:	7819      	ldrb	r1, [r3, #0]
 801147c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011480:	2202      	movs	r2, #2
 8011482:	6878      	ldr	r0, [r7, #4]
 8011484:	f003 f800 	bl	8014488 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011488:	4b5a      	ldr	r3, [pc, #360]	; (80115f4 <USBD_CDC_Init+0x1e4>)
 801148a:	781b      	ldrb	r3, [r3, #0]
 801148c:	f003 020f 	and.w	r2, r3, #15
 8011490:	6879      	ldr	r1, [r7, #4]
 8011492:	4613      	mov	r3, r2
 8011494:	009b      	lsls	r3, r3, #2
 8011496:	4413      	add	r3, r2
 8011498:	009b      	lsls	r3, r3, #2
 801149a:	440b      	add	r3, r1
 801149c:	3324      	adds	r3, #36	; 0x24
 801149e:	2201      	movs	r2, #1
 80114a0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80114a2:	4b55      	ldr	r3, [pc, #340]	; (80115f8 <USBD_CDC_Init+0x1e8>)
 80114a4:	7819      	ldrb	r1, [r3, #0]
 80114a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114aa:	2202      	movs	r2, #2
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f002 ffeb 	bl	8014488 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80114b2:	4b51      	ldr	r3, [pc, #324]	; (80115f8 <USBD_CDC_Init+0x1e8>)
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	f003 020f 	and.w	r2, r3, #15
 80114ba:	6879      	ldr	r1, [r7, #4]
 80114bc:	4613      	mov	r3, r2
 80114be:	009b      	lsls	r3, r3, #2
 80114c0:	4413      	add	r3, r2
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	440b      	add	r3, r1
 80114c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80114ca:	2201      	movs	r2, #1
 80114cc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80114ce:	4b4b      	ldr	r3, [pc, #300]	; (80115fc <USBD_CDC_Init+0x1ec>)
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	f003 020f 	and.w	r2, r3, #15
 80114d6:	6879      	ldr	r1, [r7, #4]
 80114d8:	4613      	mov	r3, r2
 80114da:	009b      	lsls	r3, r3, #2
 80114dc:	4413      	add	r3, r2
 80114de:	009b      	lsls	r3, r3, #2
 80114e0:	440b      	add	r3, r1
 80114e2:	3326      	adds	r3, #38	; 0x26
 80114e4:	2210      	movs	r2, #16
 80114e6:	801a      	strh	r2, [r3, #0]
 80114e8:	e035      	b.n	8011556 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80114ea:	4b42      	ldr	r3, [pc, #264]	; (80115f4 <USBD_CDC_Init+0x1e4>)
 80114ec:	7819      	ldrb	r1, [r3, #0]
 80114ee:	2340      	movs	r3, #64	; 0x40
 80114f0:	2202      	movs	r2, #2
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f002 ffc8 	bl	8014488 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80114f8:	4b3e      	ldr	r3, [pc, #248]	; (80115f4 <USBD_CDC_Init+0x1e4>)
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	f003 020f 	and.w	r2, r3, #15
 8011500:	6879      	ldr	r1, [r7, #4]
 8011502:	4613      	mov	r3, r2
 8011504:	009b      	lsls	r3, r3, #2
 8011506:	4413      	add	r3, r2
 8011508:	009b      	lsls	r3, r3, #2
 801150a:	440b      	add	r3, r1
 801150c:	3324      	adds	r3, #36	; 0x24
 801150e:	2201      	movs	r2, #1
 8011510:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011512:	4b39      	ldr	r3, [pc, #228]	; (80115f8 <USBD_CDC_Init+0x1e8>)
 8011514:	7819      	ldrb	r1, [r3, #0]
 8011516:	2340      	movs	r3, #64	; 0x40
 8011518:	2202      	movs	r2, #2
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f002 ffb4 	bl	8014488 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011520:	4b35      	ldr	r3, [pc, #212]	; (80115f8 <USBD_CDC_Init+0x1e8>)
 8011522:	781b      	ldrb	r3, [r3, #0]
 8011524:	f003 020f 	and.w	r2, r3, #15
 8011528:	6879      	ldr	r1, [r7, #4]
 801152a:	4613      	mov	r3, r2
 801152c:	009b      	lsls	r3, r3, #2
 801152e:	4413      	add	r3, r2
 8011530:	009b      	lsls	r3, r3, #2
 8011532:	440b      	add	r3, r1
 8011534:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011538:	2201      	movs	r2, #1
 801153a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801153c:	4b2f      	ldr	r3, [pc, #188]	; (80115fc <USBD_CDC_Init+0x1ec>)
 801153e:	781b      	ldrb	r3, [r3, #0]
 8011540:	f003 020f 	and.w	r2, r3, #15
 8011544:	6879      	ldr	r1, [r7, #4]
 8011546:	4613      	mov	r3, r2
 8011548:	009b      	lsls	r3, r3, #2
 801154a:	4413      	add	r3, r2
 801154c:	009b      	lsls	r3, r3, #2
 801154e:	440b      	add	r3, r1
 8011550:	3326      	adds	r3, #38	; 0x26
 8011552:	2210      	movs	r2, #16
 8011554:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011556:	4b29      	ldr	r3, [pc, #164]	; (80115fc <USBD_CDC_Init+0x1ec>)
 8011558:	7819      	ldrb	r1, [r3, #0]
 801155a:	2308      	movs	r3, #8
 801155c:	2203      	movs	r2, #3
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f002 ff92 	bl	8014488 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8011564:	4b25      	ldr	r3, [pc, #148]	; (80115fc <USBD_CDC_Init+0x1ec>)
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	f003 020f 	and.w	r2, r3, #15
 801156c:	6879      	ldr	r1, [r7, #4]
 801156e:	4613      	mov	r3, r2
 8011570:	009b      	lsls	r3, r3, #2
 8011572:	4413      	add	r3, r2
 8011574:	009b      	lsls	r3, r3, #2
 8011576:	440b      	add	r3, r1
 8011578:	3324      	adds	r3, #36	; 0x24
 801157a:	2201      	movs	r2, #1
 801157c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	2200      	movs	r2, #0
 8011582:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801158c:	687a      	ldr	r2, [r7, #4]
 801158e:	33b0      	adds	r3, #176	; 0xb0
 8011590:	009b      	lsls	r3, r3, #2
 8011592:	4413      	add	r3, r2
 8011594:	685b      	ldr	r3, [r3, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2200      	movs	r2, #0
 801159e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	2200      	movs	r2, #0
 80115a6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d101      	bne.n	80115b8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80115b4:	2302      	movs	r3, #2
 80115b6:	e018      	b.n	80115ea <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	7c1b      	ldrb	r3, [r3, #16]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d10a      	bne.n	80115d6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80115c0:	4b0d      	ldr	r3, [pc, #52]	; (80115f8 <USBD_CDC_Init+0x1e8>)
 80115c2:	7819      	ldrb	r1, [r3, #0]
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80115ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f003 f8d6 	bl	8014780 <USBD_LL_PrepareReceive>
 80115d4:	e008      	b.n	80115e8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80115d6:	4b08      	ldr	r3, [pc, #32]	; (80115f8 <USBD_CDC_Init+0x1e8>)
 80115d8:	7819      	ldrb	r1, [r3, #0]
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80115e0:	2340      	movs	r3, #64	; 0x40
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	f003 f8cc 	bl	8014780 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80115e8:	2300      	movs	r3, #0
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3710      	adds	r7, #16
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
 80115f2:	bf00      	nop
 80115f4:	200000b7 	.word	0x200000b7
 80115f8:	200000b8 	.word	0x200000b8
 80115fc:	200000b9 	.word	0x200000b9

08011600 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b082      	sub	sp, #8
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
 8011608:	460b      	mov	r3, r1
 801160a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801160c:	4b3a      	ldr	r3, [pc, #232]	; (80116f8 <USBD_CDC_DeInit+0xf8>)
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	4619      	mov	r1, r3
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f002 ff76 	bl	8014504 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8011618:	4b37      	ldr	r3, [pc, #220]	; (80116f8 <USBD_CDC_DeInit+0xf8>)
 801161a:	781b      	ldrb	r3, [r3, #0]
 801161c:	f003 020f 	and.w	r2, r3, #15
 8011620:	6879      	ldr	r1, [r7, #4]
 8011622:	4613      	mov	r3, r2
 8011624:	009b      	lsls	r3, r3, #2
 8011626:	4413      	add	r3, r2
 8011628:	009b      	lsls	r3, r3, #2
 801162a:	440b      	add	r3, r1
 801162c:	3324      	adds	r3, #36	; 0x24
 801162e:	2200      	movs	r2, #0
 8011630:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8011632:	4b32      	ldr	r3, [pc, #200]	; (80116fc <USBD_CDC_DeInit+0xfc>)
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	4619      	mov	r1, r3
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f002 ff63 	bl	8014504 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801163e:	4b2f      	ldr	r3, [pc, #188]	; (80116fc <USBD_CDC_DeInit+0xfc>)
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	f003 020f 	and.w	r2, r3, #15
 8011646:	6879      	ldr	r1, [r7, #4]
 8011648:	4613      	mov	r3, r2
 801164a:	009b      	lsls	r3, r3, #2
 801164c:	4413      	add	r3, r2
 801164e:	009b      	lsls	r3, r3, #2
 8011650:	440b      	add	r3, r1
 8011652:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011656:	2200      	movs	r2, #0
 8011658:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801165a:	4b29      	ldr	r3, [pc, #164]	; (8011700 <USBD_CDC_DeInit+0x100>)
 801165c:	781b      	ldrb	r3, [r3, #0]
 801165e:	4619      	mov	r1, r3
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f002 ff4f 	bl	8014504 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8011666:	4b26      	ldr	r3, [pc, #152]	; (8011700 <USBD_CDC_DeInit+0x100>)
 8011668:	781b      	ldrb	r3, [r3, #0]
 801166a:	f003 020f 	and.w	r2, r3, #15
 801166e:	6879      	ldr	r1, [r7, #4]
 8011670:	4613      	mov	r3, r2
 8011672:	009b      	lsls	r3, r3, #2
 8011674:	4413      	add	r3, r2
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	440b      	add	r3, r1
 801167a:	3324      	adds	r3, #36	; 0x24
 801167c:	2200      	movs	r2, #0
 801167e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8011680:	4b1f      	ldr	r3, [pc, #124]	; (8011700 <USBD_CDC_DeInit+0x100>)
 8011682:	781b      	ldrb	r3, [r3, #0]
 8011684:	f003 020f 	and.w	r2, r3, #15
 8011688:	6879      	ldr	r1, [r7, #4]
 801168a:	4613      	mov	r3, r2
 801168c:	009b      	lsls	r3, r3, #2
 801168e:	4413      	add	r3, r2
 8011690:	009b      	lsls	r3, r3, #2
 8011692:	440b      	add	r3, r1
 8011694:	3326      	adds	r3, #38	; 0x26
 8011696:	2200      	movs	r2, #0
 8011698:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	32b0      	adds	r2, #176	; 0xb0
 80116a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d01f      	beq.n	80116ec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80116b2:	687a      	ldr	r2, [r7, #4]
 80116b4:	33b0      	adds	r3, #176	; 0xb0
 80116b6:	009b      	lsls	r3, r3, #2
 80116b8:	4413      	add	r3, r2
 80116ba:	685b      	ldr	r3, [r3, #4]
 80116bc:	685b      	ldr	r3, [r3, #4]
 80116be:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	32b0      	adds	r2, #176	; 0xb0
 80116ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116ce:	4618      	mov	r0, r3
 80116d0:	f003 f8e6 	bl	80148a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	32b0      	adds	r2, #176	; 0xb0
 80116de:	2100      	movs	r1, #0
 80116e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2200      	movs	r2, #0
 80116e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80116ec:	2300      	movs	r3, #0
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3708      	adds	r7, #8
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}
 80116f6:	bf00      	nop
 80116f8:	200000b7 	.word	0x200000b7
 80116fc:	200000b8 	.word	0x200000b8
 8011700:	200000b9 	.word	0x200000b9

08011704 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b086      	sub	sp, #24
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	32b0      	adds	r2, #176	; 0xb0
 8011718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801171c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801171e:	2300      	movs	r3, #0
 8011720:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011722:	2300      	movs	r3, #0
 8011724:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011726:	2300      	movs	r3, #0
 8011728:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d101      	bne.n	8011734 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8011730:	2303      	movs	r3, #3
 8011732:	e0bf      	b.n	80118b4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801173c:	2b00      	cmp	r3, #0
 801173e:	d050      	beq.n	80117e2 <USBD_CDC_Setup+0xde>
 8011740:	2b20      	cmp	r3, #32
 8011742:	f040 80af 	bne.w	80118a4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	88db      	ldrh	r3, [r3, #6]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d03a      	beq.n	80117c4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	b25b      	sxtb	r3, r3
 8011754:	2b00      	cmp	r3, #0
 8011756:	da1b      	bge.n	8011790 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801175e:	687a      	ldr	r2, [r7, #4]
 8011760:	33b0      	adds	r3, #176	; 0xb0
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	4413      	add	r3, r2
 8011766:	685b      	ldr	r3, [r3, #4]
 8011768:	689b      	ldr	r3, [r3, #8]
 801176a:	683a      	ldr	r2, [r7, #0]
 801176c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801176e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011770:	683a      	ldr	r2, [r7, #0]
 8011772:	88d2      	ldrh	r2, [r2, #6]
 8011774:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	88db      	ldrh	r3, [r3, #6]
 801177a:	2b07      	cmp	r3, #7
 801177c:	bf28      	it	cs
 801177e:	2307      	movcs	r3, #7
 8011780:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011782:	693b      	ldr	r3, [r7, #16]
 8011784:	89fa      	ldrh	r2, [r7, #14]
 8011786:	4619      	mov	r1, r3
 8011788:	6878      	ldr	r0, [r7, #4]
 801178a:	f001 fd21 	bl	80131d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801178e:	e090      	b.n	80118b2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	785a      	ldrb	r2, [r3, #1]
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	88db      	ldrh	r3, [r3, #6]
 801179e:	2b3f      	cmp	r3, #63	; 0x3f
 80117a0:	d803      	bhi.n	80117aa <USBD_CDC_Setup+0xa6>
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	88db      	ldrh	r3, [r3, #6]
 80117a6:	b2da      	uxtb	r2, r3
 80117a8:	e000      	b.n	80117ac <USBD_CDC_Setup+0xa8>
 80117aa:	2240      	movs	r2, #64	; 0x40
 80117ac:	693b      	ldr	r3, [r7, #16]
 80117ae:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80117b2:	6939      	ldr	r1, [r7, #16]
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80117ba:	461a      	mov	r2, r3
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	f001 fd33 	bl	8013228 <USBD_CtlPrepareRx>
      break;
 80117c2:	e076      	b.n	80118b2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80117ca:	687a      	ldr	r2, [r7, #4]
 80117cc:	33b0      	adds	r3, #176	; 0xb0
 80117ce:	009b      	lsls	r3, r3, #2
 80117d0:	4413      	add	r3, r2
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	689b      	ldr	r3, [r3, #8]
 80117d6:	683a      	ldr	r2, [r7, #0]
 80117d8:	7850      	ldrb	r0, [r2, #1]
 80117da:	2200      	movs	r2, #0
 80117dc:	6839      	ldr	r1, [r7, #0]
 80117de:	4798      	blx	r3
      break;
 80117e0:	e067      	b.n	80118b2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	785b      	ldrb	r3, [r3, #1]
 80117e6:	2b0b      	cmp	r3, #11
 80117e8:	d851      	bhi.n	801188e <USBD_CDC_Setup+0x18a>
 80117ea:	a201      	add	r2, pc, #4	; (adr r2, 80117f0 <USBD_CDC_Setup+0xec>)
 80117ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117f0:	08011821 	.word	0x08011821
 80117f4:	0801189d 	.word	0x0801189d
 80117f8:	0801188f 	.word	0x0801188f
 80117fc:	0801188f 	.word	0x0801188f
 8011800:	0801188f 	.word	0x0801188f
 8011804:	0801188f 	.word	0x0801188f
 8011808:	0801188f 	.word	0x0801188f
 801180c:	0801188f 	.word	0x0801188f
 8011810:	0801188f 	.word	0x0801188f
 8011814:	0801188f 	.word	0x0801188f
 8011818:	0801184b 	.word	0x0801184b
 801181c:	08011875 	.word	0x08011875
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011826:	b2db      	uxtb	r3, r3
 8011828:	2b03      	cmp	r3, #3
 801182a:	d107      	bne.n	801183c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801182c:	f107 030a 	add.w	r3, r7, #10
 8011830:	2202      	movs	r2, #2
 8011832:	4619      	mov	r1, r3
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f001 fccb 	bl	80131d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801183a:	e032      	b.n	80118a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801183c:	6839      	ldr	r1, [r7, #0]
 801183e:	6878      	ldr	r0, [r7, #4]
 8011840:	f001 fc55 	bl	80130ee <USBD_CtlError>
            ret = USBD_FAIL;
 8011844:	2303      	movs	r3, #3
 8011846:	75fb      	strb	r3, [r7, #23]
          break;
 8011848:	e02b      	b.n	80118a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011850:	b2db      	uxtb	r3, r3
 8011852:	2b03      	cmp	r3, #3
 8011854:	d107      	bne.n	8011866 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011856:	f107 030d 	add.w	r3, r7, #13
 801185a:	2201      	movs	r2, #1
 801185c:	4619      	mov	r1, r3
 801185e:	6878      	ldr	r0, [r7, #4]
 8011860:	f001 fcb6 	bl	80131d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011864:	e01d      	b.n	80118a2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011866:	6839      	ldr	r1, [r7, #0]
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f001 fc40 	bl	80130ee <USBD_CtlError>
            ret = USBD_FAIL;
 801186e:	2303      	movs	r3, #3
 8011870:	75fb      	strb	r3, [r7, #23]
          break;
 8011872:	e016      	b.n	80118a2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801187a:	b2db      	uxtb	r3, r3
 801187c:	2b03      	cmp	r3, #3
 801187e:	d00f      	beq.n	80118a0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8011880:	6839      	ldr	r1, [r7, #0]
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f001 fc33 	bl	80130ee <USBD_CtlError>
            ret = USBD_FAIL;
 8011888:	2303      	movs	r3, #3
 801188a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801188c:	e008      	b.n	80118a0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801188e:	6839      	ldr	r1, [r7, #0]
 8011890:	6878      	ldr	r0, [r7, #4]
 8011892:	f001 fc2c 	bl	80130ee <USBD_CtlError>
          ret = USBD_FAIL;
 8011896:	2303      	movs	r3, #3
 8011898:	75fb      	strb	r3, [r7, #23]
          break;
 801189a:	e002      	b.n	80118a2 <USBD_CDC_Setup+0x19e>
          break;
 801189c:	bf00      	nop
 801189e:	e008      	b.n	80118b2 <USBD_CDC_Setup+0x1ae>
          break;
 80118a0:	bf00      	nop
      }
      break;
 80118a2:	e006      	b.n	80118b2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80118a4:	6839      	ldr	r1, [r7, #0]
 80118a6:	6878      	ldr	r0, [r7, #4]
 80118a8:	f001 fc21 	bl	80130ee <USBD_CtlError>
      ret = USBD_FAIL;
 80118ac:	2303      	movs	r3, #3
 80118ae:	75fb      	strb	r3, [r7, #23]
      break;
 80118b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80118b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	3718      	adds	r7, #24
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}

080118bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b084      	sub	sp, #16
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	460b      	mov	r3, r1
 80118c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80118ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	32b0      	adds	r2, #176	; 0xb0
 80118da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d101      	bne.n	80118e6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80118e2:	2303      	movs	r3, #3
 80118e4:	e065      	b.n	80119b2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	32b0      	adds	r2, #176	; 0xb0
 80118f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80118f6:	78fb      	ldrb	r3, [r7, #3]
 80118f8:	f003 020f 	and.w	r2, r3, #15
 80118fc:	6879      	ldr	r1, [r7, #4]
 80118fe:	4613      	mov	r3, r2
 8011900:	009b      	lsls	r3, r3, #2
 8011902:	4413      	add	r3, r2
 8011904:	009b      	lsls	r3, r3, #2
 8011906:	440b      	add	r3, r1
 8011908:	3318      	adds	r3, #24
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d02f      	beq.n	8011970 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8011910:	78fb      	ldrb	r3, [r7, #3]
 8011912:	f003 020f 	and.w	r2, r3, #15
 8011916:	6879      	ldr	r1, [r7, #4]
 8011918:	4613      	mov	r3, r2
 801191a:	009b      	lsls	r3, r3, #2
 801191c:	4413      	add	r3, r2
 801191e:	009b      	lsls	r3, r3, #2
 8011920:	440b      	add	r3, r1
 8011922:	3318      	adds	r3, #24
 8011924:	681a      	ldr	r2, [r3, #0]
 8011926:	78fb      	ldrb	r3, [r7, #3]
 8011928:	f003 010f 	and.w	r1, r3, #15
 801192c:	68f8      	ldr	r0, [r7, #12]
 801192e:	460b      	mov	r3, r1
 8011930:	009b      	lsls	r3, r3, #2
 8011932:	440b      	add	r3, r1
 8011934:	00db      	lsls	r3, r3, #3
 8011936:	4403      	add	r3, r0
 8011938:	3338      	adds	r3, #56	; 0x38
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	fbb2 f1f3 	udiv	r1, r2, r3
 8011940:	fb01 f303 	mul.w	r3, r1, r3
 8011944:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011946:	2b00      	cmp	r3, #0
 8011948:	d112      	bne.n	8011970 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801194a:	78fb      	ldrb	r3, [r7, #3]
 801194c:	f003 020f 	and.w	r2, r3, #15
 8011950:	6879      	ldr	r1, [r7, #4]
 8011952:	4613      	mov	r3, r2
 8011954:	009b      	lsls	r3, r3, #2
 8011956:	4413      	add	r3, r2
 8011958:	009b      	lsls	r3, r3, #2
 801195a:	440b      	add	r3, r1
 801195c:	3318      	adds	r3, #24
 801195e:	2200      	movs	r2, #0
 8011960:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011962:	78f9      	ldrb	r1, [r7, #3]
 8011964:	2300      	movs	r3, #0
 8011966:	2200      	movs	r2, #0
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f002 fed1 	bl	8014710 <USBD_LL_Transmit>
 801196e:	e01f      	b.n	80119b0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	2200      	movs	r2, #0
 8011974:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	33b0      	adds	r3, #176	; 0xb0
 8011982:	009b      	lsls	r3, r3, #2
 8011984:	4413      	add	r3, r2
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	691b      	ldr	r3, [r3, #16]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d010      	beq.n	80119b0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011994:	687a      	ldr	r2, [r7, #4]
 8011996:	33b0      	adds	r3, #176	; 0xb0
 8011998:	009b      	lsls	r3, r3, #2
 801199a:	4413      	add	r3, r2
 801199c:	685b      	ldr	r3, [r3, #4]
 801199e:	691b      	ldr	r3, [r3, #16]
 80119a0:	68ba      	ldr	r2, [r7, #8]
 80119a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80119a6:	68ba      	ldr	r2, [r7, #8]
 80119a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80119ac:	78fa      	ldrb	r2, [r7, #3]
 80119ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80119b0:	2300      	movs	r3, #0
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	3710      	adds	r7, #16
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}

080119ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80119ba:	b580      	push	{r7, lr}
 80119bc:	b084      	sub	sp, #16
 80119be:	af00      	add	r7, sp, #0
 80119c0:	6078      	str	r0, [r7, #4]
 80119c2:	460b      	mov	r3, r1
 80119c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	32b0      	adds	r2, #176	; 0xb0
 80119d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	32b0      	adds	r2, #176	; 0xb0
 80119e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d101      	bne.n	80119ec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80119e8:	2303      	movs	r3, #3
 80119ea:	e01a      	b.n	8011a22 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80119ec:	78fb      	ldrb	r3, [r7, #3]
 80119ee:	4619      	mov	r1, r3
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f002 fefd 	bl	80147f0 <USBD_LL_GetRxDataSize>
 80119f6:	4602      	mov	r2, r0
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011a04:	687a      	ldr	r2, [r7, #4]
 8011a06:	33b0      	adds	r3, #176	; 0xb0
 8011a08:	009b      	lsls	r3, r3, #2
 8011a0a:	4413      	add	r3, r2
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	68db      	ldr	r3, [r3, #12]
 8011a10:	68fa      	ldr	r2, [r7, #12]
 8011a12:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011a16:	68fa      	ldr	r2, [r7, #12]
 8011a18:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011a1c:	4611      	mov	r1, r2
 8011a1e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011a20:	2300      	movs	r3, #0
}
 8011a22:	4618      	mov	r0, r3
 8011a24:	3710      	adds	r7, #16
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}

08011a2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011a2a:	b580      	push	{r7, lr}
 8011a2c:	b084      	sub	sp, #16
 8011a2e:	af00      	add	r7, sp, #0
 8011a30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	32b0      	adds	r2, #176	; 0xb0
 8011a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d101      	bne.n	8011a4c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011a48:	2303      	movs	r3, #3
 8011a4a:	e025      	b.n	8011a98 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	33b0      	adds	r3, #176	; 0xb0
 8011a56:	009b      	lsls	r3, r3, #2
 8011a58:	4413      	add	r3, r2
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d01a      	beq.n	8011a96 <USBD_CDC_EP0_RxReady+0x6c>
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011a66:	2bff      	cmp	r3, #255	; 0xff
 8011a68:	d015      	beq.n	8011a96 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011a70:	687a      	ldr	r2, [r7, #4]
 8011a72:	33b0      	adds	r3, #176	; 0xb0
 8011a74:	009b      	lsls	r3, r3, #2
 8011a76:	4413      	add	r3, r2
 8011a78:	685b      	ldr	r3, [r3, #4]
 8011a7a:	689b      	ldr	r3, [r3, #8]
 8011a7c:	68fa      	ldr	r2, [r7, #12]
 8011a7e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8011a82:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8011a84:	68fa      	ldr	r2, [r7, #12]
 8011a86:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011a8a:	b292      	uxth	r2, r2
 8011a8c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	22ff      	movs	r2, #255	; 0xff
 8011a92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011a96:	2300      	movs	r3, #0
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3710      	adds	r7, #16
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b086      	sub	sp, #24
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011aa8:	2182      	movs	r1, #130	; 0x82
 8011aaa:	4818      	ldr	r0, [pc, #96]	; (8011b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011aac:	f000 fcbd 	bl	801242a <USBD_GetEpDesc>
 8011ab0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011ab2:	2101      	movs	r1, #1
 8011ab4:	4815      	ldr	r0, [pc, #84]	; (8011b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011ab6:	f000 fcb8 	bl	801242a <USBD_GetEpDesc>
 8011aba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011abc:	2181      	movs	r1, #129	; 0x81
 8011abe:	4813      	ldr	r0, [pc, #76]	; (8011b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011ac0:	f000 fcb3 	bl	801242a <USBD_GetEpDesc>
 8011ac4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d002      	beq.n	8011ad2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	2210      	movs	r2, #16
 8011ad0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d006      	beq.n	8011ae6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	2200      	movs	r2, #0
 8011adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011ae0:	711a      	strb	r2, [r3, #4]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d006      	beq.n	8011afa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	2200      	movs	r2, #0
 8011af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011af4:	711a      	strb	r2, [r3, #4]
 8011af6:	2200      	movs	r2, #0
 8011af8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	2243      	movs	r2, #67	; 0x43
 8011afe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011b00:	4b02      	ldr	r3, [pc, #8]	; (8011b0c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3718      	adds	r7, #24
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	20000074 	.word	0x20000074

08011b10 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b086      	sub	sp, #24
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011b18:	2182      	movs	r1, #130	; 0x82
 8011b1a:	4818      	ldr	r0, [pc, #96]	; (8011b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011b1c:	f000 fc85 	bl	801242a <USBD_GetEpDesc>
 8011b20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011b22:	2101      	movs	r1, #1
 8011b24:	4815      	ldr	r0, [pc, #84]	; (8011b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011b26:	f000 fc80 	bl	801242a <USBD_GetEpDesc>
 8011b2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011b2c:	2181      	movs	r1, #129	; 0x81
 8011b2e:	4813      	ldr	r0, [pc, #76]	; (8011b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011b30:	f000 fc7b 	bl	801242a <USBD_GetEpDesc>
 8011b34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d002      	beq.n	8011b42 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	2210      	movs	r2, #16
 8011b40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d006      	beq.n	8011b56 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	711a      	strb	r2, [r3, #4]
 8011b4e:	2200      	movs	r2, #0
 8011b50:	f042 0202 	orr.w	r2, r2, #2
 8011b54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d006      	beq.n	8011b6a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	2200      	movs	r2, #0
 8011b60:	711a      	strb	r2, [r3, #4]
 8011b62:	2200      	movs	r2, #0
 8011b64:	f042 0202 	orr.w	r2, r2, #2
 8011b68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2243      	movs	r2, #67	; 0x43
 8011b6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011b70:	4b02      	ldr	r3, [pc, #8]	; (8011b7c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3718      	adds	r7, #24
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}
 8011b7a:	bf00      	nop
 8011b7c:	20000074 	.word	0x20000074

08011b80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b086      	sub	sp, #24
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011b88:	2182      	movs	r1, #130	; 0x82
 8011b8a:	4818      	ldr	r0, [pc, #96]	; (8011bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011b8c:	f000 fc4d 	bl	801242a <USBD_GetEpDesc>
 8011b90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011b92:	2101      	movs	r1, #1
 8011b94:	4815      	ldr	r0, [pc, #84]	; (8011bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011b96:	f000 fc48 	bl	801242a <USBD_GetEpDesc>
 8011b9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011b9c:	2181      	movs	r1, #129	; 0x81
 8011b9e:	4813      	ldr	r0, [pc, #76]	; (8011bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011ba0:	f000 fc43 	bl	801242a <USBD_GetEpDesc>
 8011ba4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d002      	beq.n	8011bb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	2210      	movs	r2, #16
 8011bb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d006      	beq.n	8011bc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011bb8:	693b      	ldr	r3, [r7, #16]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011bc0:	711a      	strb	r2, [r3, #4]
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d006      	beq.n	8011bda <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011bd4:	711a      	strb	r2, [r3, #4]
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	2243      	movs	r2, #67	; 0x43
 8011bde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011be0:	4b02      	ldr	r3, [pc, #8]	; (8011bec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3718      	adds	r7, #24
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
 8011bea:	bf00      	nop
 8011bec:	20000074 	.word	0x20000074

08011bf0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011bf0:	b480      	push	{r7}
 8011bf2:	b083      	sub	sp, #12
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	220a      	movs	r2, #10
 8011bfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011bfe:	4b03      	ldr	r3, [pc, #12]	; (8011c0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011c00:	4618      	mov	r0, r3
 8011c02:	370c      	adds	r7, #12
 8011c04:	46bd      	mov	sp, r7
 8011c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0a:	4770      	bx	lr
 8011c0c:	20000030 	.word	0x20000030

08011c10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011c10:	b480      	push	{r7}
 8011c12:	b083      	sub	sp, #12
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d101      	bne.n	8011c24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011c20:	2303      	movs	r3, #3
 8011c22:	e009      	b.n	8011c38 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	33b0      	adds	r3, #176	; 0xb0
 8011c2e:	009b      	lsls	r3, r3, #2
 8011c30:	4413      	add	r3, r2
 8011c32:	683a      	ldr	r2, [r7, #0]
 8011c34:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011c36:	2300      	movs	r3, #0
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	370c      	adds	r7, #12
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c42:	4770      	bx	lr

08011c44 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b087      	sub	sp, #28
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	60f8      	str	r0, [r7, #12]
 8011c4c:	60b9      	str	r1, [r7, #8]
 8011c4e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	32b0      	adds	r2, #176	; 0xb0
 8011c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c5e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d101      	bne.n	8011c6a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011c66:	2303      	movs	r3, #3
 8011c68:	e008      	b.n	8011c7c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	68ba      	ldr	r2, [r7, #8]
 8011c6e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	687a      	ldr	r2, [r7, #4]
 8011c76:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011c7a:	2300      	movs	r3, #0
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	371c      	adds	r7, #28
 8011c80:	46bd      	mov	sp, r7
 8011c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c86:	4770      	bx	lr

08011c88 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011c88:	b480      	push	{r7}
 8011c8a:	b085      	sub	sp, #20
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	32b0      	adds	r2, #176	; 0xb0
 8011c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ca0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d101      	bne.n	8011cac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011ca8:	2303      	movs	r3, #3
 8011caa:	e004      	b.n	8011cb6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	683a      	ldr	r2, [r7, #0]
 8011cb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011cb4:	2300      	movs	r3, #0
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3714      	adds	r7, #20
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc0:	4770      	bx	lr
	...

08011cc4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b084      	sub	sp, #16
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	32b0      	adds	r2, #176	; 0xb0
 8011cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cda:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8011cdc:	2301      	movs	r3, #1
 8011cde:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d101      	bne.n	8011cea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011ce6:	2303      	movs	r3, #3
 8011ce8:	e025      	b.n	8011d36 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8011cea:	68bb      	ldr	r3, [r7, #8]
 8011cec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d11f      	bne.n	8011d34 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	2201      	movs	r2, #1
 8011cf8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8011cfc:	4b10      	ldr	r3, [pc, #64]	; (8011d40 <USBD_CDC_TransmitPacket+0x7c>)
 8011cfe:	781b      	ldrb	r3, [r3, #0]
 8011d00:	f003 020f 	and.w	r2, r3, #15
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	4613      	mov	r3, r2
 8011d0e:	009b      	lsls	r3, r3, #2
 8011d10:	4413      	add	r3, r2
 8011d12:	009b      	lsls	r3, r3, #2
 8011d14:	4403      	add	r3, r0
 8011d16:	3318      	adds	r3, #24
 8011d18:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8011d1a:	4b09      	ldr	r3, [pc, #36]	; (8011d40 <USBD_CDC_TransmitPacket+0x7c>)
 8011d1c:	7819      	ldrb	r1, [r3, #0]
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f002 fcf0 	bl	8014710 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011d30:	2300      	movs	r3, #0
 8011d32:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3710      	adds	r7, #16
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	bd80      	pop	{r7, pc}
 8011d3e:	bf00      	nop
 8011d40:	200000b7 	.word	0x200000b7

08011d44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	32b0      	adds	r2, #176	; 0xb0
 8011d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d5a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	32b0      	adds	r2, #176	; 0xb0
 8011d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d101      	bne.n	8011d72 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8011d6e:	2303      	movs	r3, #3
 8011d70:	e018      	b.n	8011da4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	7c1b      	ldrb	r3, [r3, #16]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d10a      	bne.n	8011d90 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011d7a:	4b0c      	ldr	r3, [pc, #48]	; (8011dac <USBD_CDC_ReceivePacket+0x68>)
 8011d7c:	7819      	ldrb	r1, [r3, #0]
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011d88:	6878      	ldr	r0, [r7, #4]
 8011d8a:	f002 fcf9 	bl	8014780 <USBD_LL_PrepareReceive>
 8011d8e:	e008      	b.n	8011da2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011d90:	4b06      	ldr	r3, [pc, #24]	; (8011dac <USBD_CDC_ReceivePacket+0x68>)
 8011d92:	7819      	ldrb	r1, [r3, #0]
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011d9a:	2340      	movs	r3, #64	; 0x40
 8011d9c:	6878      	ldr	r0, [r7, #4]
 8011d9e:	f002 fcef 	bl	8014780 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011da2:	2300      	movs	r3, #0
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	3710      	adds	r7, #16
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}
 8011dac:	200000b8 	.word	0x200000b8

08011db0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b086      	sub	sp, #24
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	60f8      	str	r0, [r7, #12]
 8011db8:	60b9      	str	r1, [r7, #8]
 8011dba:	4613      	mov	r3, r2
 8011dbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d101      	bne.n	8011dc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011dc4:	2303      	movs	r3, #3
 8011dc6:	e01f      	b.n	8011e08 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	2200      	movs	r2, #0
 8011ddc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d003      	beq.n	8011dee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	68ba      	ldr	r2, [r7, #8]
 8011dea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	2201      	movs	r2, #1
 8011df2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	79fa      	ldrb	r2, [r7, #7]
 8011dfa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011dfc:	68f8      	ldr	r0, [r7, #12]
 8011dfe:	f002 faaf 	bl	8014360 <USBD_LL_Init>
 8011e02:	4603      	mov	r3, r0
 8011e04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3718      	adds	r7, #24
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}

08011e10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b084      	sub	sp, #16
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d101      	bne.n	8011e28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011e24:	2303      	movs	r3, #3
 8011e26:	e025      	b.n	8011e74 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	683a      	ldr	r2, [r7, #0]
 8011e2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	32ae      	adds	r2, #174	; 0xae
 8011e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d00f      	beq.n	8011e64 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	32ae      	adds	r2, #174	; 0xae
 8011e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e54:	f107 020e 	add.w	r2, r7, #14
 8011e58:	4610      	mov	r0, r2
 8011e5a:	4798      	blx	r3
 8011e5c:	4602      	mov	r2, r0
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011e6a:	1c5a      	adds	r2, r3, #1
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8011e72:	2300      	movs	r3, #0
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	3710      	adds	r7, #16
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}

08011e7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b082      	sub	sp, #8
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	f002 facd 	bl	8014424 <USBD_LL_Start>
 8011e8a:	4603      	mov	r3, r0
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3708      	adds	r7, #8
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}

08011e94 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011e94:	b480      	push	{r7}
 8011e96:	b083      	sub	sp, #12
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011e9c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	370c      	adds	r7, #12
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea8:	4770      	bx	lr

08011eaa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011eaa:	b580      	push	{r7, lr}
 8011eac:	b084      	sub	sp, #16
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	6078      	str	r0, [r7, #4]
 8011eb2:	460b      	mov	r3, r1
 8011eb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d009      	beq.n	8011ed8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	78fa      	ldrb	r2, [r7, #3]
 8011ece:	4611      	mov	r1, r2
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	4798      	blx	r3
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3710      	adds	r7, #16
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}

08011ee2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011ee2:	b580      	push	{r7, lr}
 8011ee4:	b084      	sub	sp, #16
 8011ee6:	af00      	add	r7, sp, #0
 8011ee8:	6078      	str	r0, [r7, #4]
 8011eea:	460b      	mov	r3, r1
 8011eec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	78fa      	ldrb	r2, [r7, #3]
 8011efc:	4611      	mov	r1, r2
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	4798      	blx	r3
 8011f02:	4603      	mov	r3, r0
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d001      	beq.n	8011f0c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011f08:	2303      	movs	r3, #3
 8011f0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3710      	adds	r7, #16
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}

08011f16 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011f16:	b580      	push	{r7, lr}
 8011f18:	b084      	sub	sp, #16
 8011f1a:	af00      	add	r7, sp, #0
 8011f1c:	6078      	str	r0, [r7, #4]
 8011f1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011f26:	6839      	ldr	r1, [r7, #0]
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f001 f8a6 	bl	801307a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	2201      	movs	r2, #1
 8011f32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011f3c:	461a      	mov	r2, r3
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011f4a:	f003 031f 	and.w	r3, r3, #31
 8011f4e:	2b02      	cmp	r3, #2
 8011f50:	d01a      	beq.n	8011f88 <USBD_LL_SetupStage+0x72>
 8011f52:	2b02      	cmp	r3, #2
 8011f54:	d822      	bhi.n	8011f9c <USBD_LL_SetupStage+0x86>
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d002      	beq.n	8011f60 <USBD_LL_SetupStage+0x4a>
 8011f5a:	2b01      	cmp	r3, #1
 8011f5c:	d00a      	beq.n	8011f74 <USBD_LL_SetupStage+0x5e>
 8011f5e:	e01d      	b.n	8011f9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011f66:	4619      	mov	r1, r3
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f000 fad3 	bl	8012514 <USBD_StdDevReq>
 8011f6e:	4603      	mov	r3, r0
 8011f70:	73fb      	strb	r3, [r7, #15]
      break;
 8011f72:	e020      	b.n	8011fb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011f7a:	4619      	mov	r1, r3
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f000 fb3b 	bl	80125f8 <USBD_StdItfReq>
 8011f82:	4603      	mov	r3, r0
 8011f84:	73fb      	strb	r3, [r7, #15]
      break;
 8011f86:	e016      	b.n	8011fb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011f8e:	4619      	mov	r1, r3
 8011f90:	6878      	ldr	r0, [r7, #4]
 8011f92:	f000 fb9d 	bl	80126d0 <USBD_StdEPReq>
 8011f96:	4603      	mov	r3, r0
 8011f98:	73fb      	strb	r3, [r7, #15]
      break;
 8011f9a:	e00c      	b.n	8011fb6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011fa2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011fa6:	b2db      	uxtb	r3, r3
 8011fa8:	4619      	mov	r1, r3
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	f002 fae0 	bl	8014570 <USBD_LL_StallEP>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8011fb4:	bf00      	nop
  }

  return ret;
 8011fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	3710      	adds	r7, #16
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd80      	pop	{r7, pc}

08011fc0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b086      	sub	sp, #24
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	60f8      	str	r0, [r7, #12]
 8011fc8:	460b      	mov	r3, r1
 8011fca:	607a      	str	r2, [r7, #4]
 8011fcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011fd2:	7afb      	ldrb	r3, [r7, #11]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d16e      	bne.n	80120b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011fde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011fe6:	2b03      	cmp	r3, #3
 8011fe8:	f040 8098 	bne.w	801211c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011fec:	693b      	ldr	r3, [r7, #16]
 8011fee:	689a      	ldr	r2, [r3, #8]
 8011ff0:	693b      	ldr	r3, [r7, #16]
 8011ff2:	68db      	ldr	r3, [r3, #12]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d913      	bls.n	8012020 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011ff8:	693b      	ldr	r3, [r7, #16]
 8011ffa:	689a      	ldr	r2, [r3, #8]
 8011ffc:	693b      	ldr	r3, [r7, #16]
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	1ad2      	subs	r2, r2, r3
 8012002:	693b      	ldr	r3, [r7, #16]
 8012004:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012006:	693b      	ldr	r3, [r7, #16]
 8012008:	68da      	ldr	r2, [r3, #12]
 801200a:	693b      	ldr	r3, [r7, #16]
 801200c:	689b      	ldr	r3, [r3, #8]
 801200e:	4293      	cmp	r3, r2
 8012010:	bf28      	it	cs
 8012012:	4613      	movcs	r3, r2
 8012014:	461a      	mov	r2, r3
 8012016:	6879      	ldr	r1, [r7, #4]
 8012018:	68f8      	ldr	r0, [r7, #12]
 801201a:	f001 f922 	bl	8013262 <USBD_CtlContinueRx>
 801201e:	e07d      	b.n	801211c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012026:	f003 031f 	and.w	r3, r3, #31
 801202a:	2b02      	cmp	r3, #2
 801202c:	d014      	beq.n	8012058 <USBD_LL_DataOutStage+0x98>
 801202e:	2b02      	cmp	r3, #2
 8012030:	d81d      	bhi.n	801206e <USBD_LL_DataOutStage+0xae>
 8012032:	2b00      	cmp	r3, #0
 8012034:	d002      	beq.n	801203c <USBD_LL_DataOutStage+0x7c>
 8012036:	2b01      	cmp	r3, #1
 8012038:	d003      	beq.n	8012042 <USBD_LL_DataOutStage+0x82>
 801203a:	e018      	b.n	801206e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801203c:	2300      	movs	r3, #0
 801203e:	75bb      	strb	r3, [r7, #22]
            break;
 8012040:	e018      	b.n	8012074 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8012048:	b2db      	uxtb	r3, r3
 801204a:	4619      	mov	r1, r3
 801204c:	68f8      	ldr	r0, [r7, #12]
 801204e:	f000 f9d2 	bl	80123f6 <USBD_CoreFindIF>
 8012052:	4603      	mov	r3, r0
 8012054:	75bb      	strb	r3, [r7, #22]
            break;
 8012056:	e00d      	b.n	8012074 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801205e:	b2db      	uxtb	r3, r3
 8012060:	4619      	mov	r1, r3
 8012062:	68f8      	ldr	r0, [r7, #12]
 8012064:	f000 f9d4 	bl	8012410 <USBD_CoreFindEP>
 8012068:	4603      	mov	r3, r0
 801206a:	75bb      	strb	r3, [r7, #22]
            break;
 801206c:	e002      	b.n	8012074 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801206e:	2300      	movs	r3, #0
 8012070:	75bb      	strb	r3, [r7, #22]
            break;
 8012072:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012074:	7dbb      	ldrb	r3, [r7, #22]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d119      	bne.n	80120ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012080:	b2db      	uxtb	r3, r3
 8012082:	2b03      	cmp	r3, #3
 8012084:	d113      	bne.n	80120ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012086:	7dba      	ldrb	r2, [r7, #22]
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	32ae      	adds	r2, #174	; 0xae
 801208c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012090:	691b      	ldr	r3, [r3, #16]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d00b      	beq.n	80120ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012096:	7dba      	ldrb	r2, [r7, #22]
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801209e:	7dba      	ldrb	r2, [r7, #22]
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	32ae      	adds	r2, #174	; 0xae
 80120a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120a8:	691b      	ldr	r3, [r3, #16]
 80120aa:	68f8      	ldr	r0, [r7, #12]
 80120ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80120ae:	68f8      	ldr	r0, [r7, #12]
 80120b0:	f001 f8e8 	bl	8013284 <USBD_CtlSendStatus>
 80120b4:	e032      	b.n	801211c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80120b6:	7afb      	ldrb	r3, [r7, #11]
 80120b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120bc:	b2db      	uxtb	r3, r3
 80120be:	4619      	mov	r1, r3
 80120c0:	68f8      	ldr	r0, [r7, #12]
 80120c2:	f000 f9a5 	bl	8012410 <USBD_CoreFindEP>
 80120c6:	4603      	mov	r3, r0
 80120c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80120ca:	7dbb      	ldrb	r3, [r7, #22]
 80120cc:	2bff      	cmp	r3, #255	; 0xff
 80120ce:	d025      	beq.n	801211c <USBD_LL_DataOutStage+0x15c>
 80120d0:	7dbb      	ldrb	r3, [r7, #22]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d122      	bne.n	801211c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	2b03      	cmp	r3, #3
 80120e0:	d117      	bne.n	8012112 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80120e2:	7dba      	ldrb	r2, [r7, #22]
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	32ae      	adds	r2, #174	; 0xae
 80120e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120ec:	699b      	ldr	r3, [r3, #24]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d00f      	beq.n	8012112 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80120f2:	7dba      	ldrb	r2, [r7, #22]
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80120fa:	7dba      	ldrb	r2, [r7, #22]
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	32ae      	adds	r2, #174	; 0xae
 8012100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012104:	699b      	ldr	r3, [r3, #24]
 8012106:	7afa      	ldrb	r2, [r7, #11]
 8012108:	4611      	mov	r1, r2
 801210a:	68f8      	ldr	r0, [r7, #12]
 801210c:	4798      	blx	r3
 801210e:	4603      	mov	r3, r0
 8012110:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012112:	7dfb      	ldrb	r3, [r7, #23]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d001      	beq.n	801211c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012118:	7dfb      	ldrb	r3, [r7, #23]
 801211a:	e000      	b.n	801211e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801211c:	2300      	movs	r3, #0
}
 801211e:	4618      	mov	r0, r3
 8012120:	3718      	adds	r7, #24
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}

08012126 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012126:	b580      	push	{r7, lr}
 8012128:	b086      	sub	sp, #24
 801212a:	af00      	add	r7, sp, #0
 801212c:	60f8      	str	r0, [r7, #12]
 801212e:	460b      	mov	r3, r1
 8012130:	607a      	str	r2, [r7, #4]
 8012132:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8012134:	7afb      	ldrb	r3, [r7, #11]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d16f      	bne.n	801221a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	3314      	adds	r3, #20
 801213e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012146:	2b02      	cmp	r3, #2
 8012148:	d15a      	bne.n	8012200 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801214a:	693b      	ldr	r3, [r7, #16]
 801214c:	689a      	ldr	r2, [r3, #8]
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	68db      	ldr	r3, [r3, #12]
 8012152:	429a      	cmp	r2, r3
 8012154:	d914      	bls.n	8012180 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	689a      	ldr	r2, [r3, #8]
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	68db      	ldr	r3, [r3, #12]
 801215e:	1ad2      	subs	r2, r2, r3
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	689b      	ldr	r3, [r3, #8]
 8012168:	461a      	mov	r2, r3
 801216a:	6879      	ldr	r1, [r7, #4]
 801216c:	68f8      	ldr	r0, [r7, #12]
 801216e:	f001 f84a 	bl	8013206 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012172:	2300      	movs	r3, #0
 8012174:	2200      	movs	r2, #0
 8012176:	2100      	movs	r1, #0
 8012178:	68f8      	ldr	r0, [r7, #12]
 801217a:	f002 fb01 	bl	8014780 <USBD_LL_PrepareReceive>
 801217e:	e03f      	b.n	8012200 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012180:	693b      	ldr	r3, [r7, #16]
 8012182:	68da      	ldr	r2, [r3, #12]
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	689b      	ldr	r3, [r3, #8]
 8012188:	429a      	cmp	r2, r3
 801218a:	d11c      	bne.n	80121c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801218c:	693b      	ldr	r3, [r7, #16]
 801218e:	685a      	ldr	r2, [r3, #4]
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012194:	429a      	cmp	r2, r3
 8012196:	d316      	bcc.n	80121c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012198:	693b      	ldr	r3, [r7, #16]
 801219a:	685a      	ldr	r2, [r3, #4]
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80121a2:	429a      	cmp	r2, r3
 80121a4:	d20f      	bcs.n	80121c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80121a6:	2200      	movs	r2, #0
 80121a8:	2100      	movs	r1, #0
 80121aa:	68f8      	ldr	r0, [r7, #12]
 80121ac:	f001 f82b 	bl	8013206 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	2200      	movs	r2, #0
 80121b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80121b8:	2300      	movs	r3, #0
 80121ba:	2200      	movs	r2, #0
 80121bc:	2100      	movs	r1, #0
 80121be:	68f8      	ldr	r0, [r7, #12]
 80121c0:	f002 fade 	bl	8014780 <USBD_LL_PrepareReceive>
 80121c4:	e01c      	b.n	8012200 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121cc:	b2db      	uxtb	r3, r3
 80121ce:	2b03      	cmp	r3, #3
 80121d0:	d10f      	bne.n	80121f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121d8:	68db      	ldr	r3, [r3, #12]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d009      	beq.n	80121f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	2200      	movs	r2, #0
 80121e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121ec:	68db      	ldr	r3, [r3, #12]
 80121ee:	68f8      	ldr	r0, [r7, #12]
 80121f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80121f2:	2180      	movs	r1, #128	; 0x80
 80121f4:	68f8      	ldr	r0, [r7, #12]
 80121f6:	f002 f9bb 	bl	8014570 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80121fa:	68f8      	ldr	r0, [r7, #12]
 80121fc:	f001 f855 	bl	80132aa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012206:	2b00      	cmp	r3, #0
 8012208:	d03a      	beq.n	8012280 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801220a:	68f8      	ldr	r0, [r7, #12]
 801220c:	f7ff fe42 	bl	8011e94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	2200      	movs	r2, #0
 8012214:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012218:	e032      	b.n	8012280 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801221a:	7afb      	ldrb	r3, [r7, #11]
 801221c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012220:	b2db      	uxtb	r3, r3
 8012222:	4619      	mov	r1, r3
 8012224:	68f8      	ldr	r0, [r7, #12]
 8012226:	f000 f8f3 	bl	8012410 <USBD_CoreFindEP>
 801222a:	4603      	mov	r3, r0
 801222c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801222e:	7dfb      	ldrb	r3, [r7, #23]
 8012230:	2bff      	cmp	r3, #255	; 0xff
 8012232:	d025      	beq.n	8012280 <USBD_LL_DataInStage+0x15a>
 8012234:	7dfb      	ldrb	r3, [r7, #23]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d122      	bne.n	8012280 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012240:	b2db      	uxtb	r3, r3
 8012242:	2b03      	cmp	r3, #3
 8012244:	d11c      	bne.n	8012280 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8012246:	7dfa      	ldrb	r2, [r7, #23]
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	32ae      	adds	r2, #174	; 0xae
 801224c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012250:	695b      	ldr	r3, [r3, #20]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d014      	beq.n	8012280 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8012256:	7dfa      	ldrb	r2, [r7, #23]
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801225e:	7dfa      	ldrb	r2, [r7, #23]
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	32ae      	adds	r2, #174	; 0xae
 8012264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012268:	695b      	ldr	r3, [r3, #20]
 801226a:	7afa      	ldrb	r2, [r7, #11]
 801226c:	4611      	mov	r1, r2
 801226e:	68f8      	ldr	r0, [r7, #12]
 8012270:	4798      	blx	r3
 8012272:	4603      	mov	r3, r0
 8012274:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8012276:	7dbb      	ldrb	r3, [r7, #22]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d001      	beq.n	8012280 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801227c:	7dbb      	ldrb	r3, [r7, #22]
 801227e:	e000      	b.n	8012282 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8012280:	2300      	movs	r3, #0
}
 8012282:	4618      	mov	r0, r3
 8012284:	3718      	adds	r7, #24
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}

0801228a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801228a:	b580      	push	{r7, lr}
 801228c:	b084      	sub	sp, #16
 801228e:	af00      	add	r7, sp, #0
 8012290:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8012292:	2300      	movs	r3, #0
 8012294:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2201      	movs	r2, #1
 801229a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	2200      	movs	r2, #0
 80122a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	2200      	movs	r2, #0
 80122aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	2200      	movs	r2, #0
 80122b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2200      	movs	r2, #0
 80122b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d014      	beq.n	80122f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122cc:	685b      	ldr	r3, [r3, #4]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d00e      	beq.n	80122f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	687a      	ldr	r2, [r7, #4]
 80122dc:	6852      	ldr	r2, [r2, #4]
 80122de:	b2d2      	uxtb	r2, r2
 80122e0:	4611      	mov	r1, r2
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	4798      	blx	r3
 80122e6:	4603      	mov	r3, r0
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d001      	beq.n	80122f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80122ec:	2303      	movs	r3, #3
 80122ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80122f0:	2340      	movs	r3, #64	; 0x40
 80122f2:	2200      	movs	r2, #0
 80122f4:	2100      	movs	r1, #0
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f002 f8c6 	bl	8014488 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2201      	movs	r2, #1
 8012300:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2240      	movs	r2, #64	; 0x40
 8012308:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801230c:	2340      	movs	r3, #64	; 0x40
 801230e:	2200      	movs	r2, #0
 8012310:	2180      	movs	r1, #128	; 0x80
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f002 f8b8 	bl	8014488 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2201      	movs	r2, #1
 801231c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	2240      	movs	r2, #64	; 0x40
 8012322:	621a      	str	r2, [r3, #32]

  return ret;
 8012324:	7bfb      	ldrb	r3, [r7, #15]
}
 8012326:	4618      	mov	r0, r3
 8012328:	3710      	adds	r7, #16
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}

0801232e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801232e:	b480      	push	{r7}
 8012330:	b083      	sub	sp, #12
 8012332:	af00      	add	r7, sp, #0
 8012334:	6078      	str	r0, [r7, #4]
 8012336:	460b      	mov	r3, r1
 8012338:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	78fa      	ldrb	r2, [r7, #3]
 801233e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012340:	2300      	movs	r3, #0
}
 8012342:	4618      	mov	r0, r3
 8012344:	370c      	adds	r7, #12
 8012346:	46bd      	mov	sp, r7
 8012348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234c:	4770      	bx	lr

0801234e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801234e:	b480      	push	{r7}
 8012350:	b083      	sub	sp, #12
 8012352:	af00      	add	r7, sp, #0
 8012354:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801235c:	b2db      	uxtb	r3, r3
 801235e:	2b04      	cmp	r3, #4
 8012360:	d006      	beq.n	8012370 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012368:	b2da      	uxtb	r2, r3
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2204      	movs	r2, #4
 8012374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012378:	2300      	movs	r3, #0
}
 801237a:	4618      	mov	r0, r3
 801237c:	370c      	adds	r7, #12
 801237e:	46bd      	mov	sp, r7
 8012380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012384:	4770      	bx	lr

08012386 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012386:	b480      	push	{r7}
 8012388:	b083      	sub	sp, #12
 801238a:	af00      	add	r7, sp, #0
 801238c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012394:	b2db      	uxtb	r3, r3
 8012396:	2b04      	cmp	r3, #4
 8012398:	d106      	bne.n	80123a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80123a0:	b2da      	uxtb	r2, r3
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80123a8:	2300      	movs	r3, #0
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	370c      	adds	r7, #12
 80123ae:	46bd      	mov	sp, r7
 80123b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b4:	4770      	bx	lr

080123b6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80123b6:	b580      	push	{r7, lr}
 80123b8:	b082      	sub	sp, #8
 80123ba:	af00      	add	r7, sp, #0
 80123bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	2b03      	cmp	r3, #3
 80123c8:	d110      	bne.n	80123ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d00b      	beq.n	80123ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123da:	69db      	ldr	r3, [r3, #28]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d005      	beq.n	80123ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123e6:	69db      	ldr	r3, [r3, #28]
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80123ec:	2300      	movs	r3, #0
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	3708      	adds	r7, #8
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}

080123f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80123f6:	b480      	push	{r7}
 80123f8:	b083      	sub	sp, #12
 80123fa:	af00      	add	r7, sp, #0
 80123fc:	6078      	str	r0, [r7, #4]
 80123fe:	460b      	mov	r3, r1
 8012400:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012402:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012404:	4618      	mov	r0, r3
 8012406:	370c      	adds	r7, #12
 8012408:	46bd      	mov	sp, r7
 801240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240e:	4770      	bx	lr

08012410 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012410:	b480      	push	{r7}
 8012412:	b083      	sub	sp, #12
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
 8012418:	460b      	mov	r3, r1
 801241a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801241c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801241e:	4618      	mov	r0, r3
 8012420:	370c      	adds	r7, #12
 8012422:	46bd      	mov	sp, r7
 8012424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012428:	4770      	bx	lr

0801242a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801242a:	b580      	push	{r7, lr}
 801242c:	b086      	sub	sp, #24
 801242e:	af00      	add	r7, sp, #0
 8012430:	6078      	str	r0, [r7, #4]
 8012432:	460b      	mov	r3, r1
 8012434:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801243e:	2300      	movs	r3, #0
 8012440:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	885b      	ldrh	r3, [r3, #2]
 8012446:	b29a      	uxth	r2, r3
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	781b      	ldrb	r3, [r3, #0]
 801244c:	b29b      	uxth	r3, r3
 801244e:	429a      	cmp	r2, r3
 8012450:	d920      	bls.n	8012494 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	781b      	ldrb	r3, [r3, #0]
 8012456:	b29b      	uxth	r3, r3
 8012458:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801245a:	e013      	b.n	8012484 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801245c:	f107 030a 	add.w	r3, r7, #10
 8012460:	4619      	mov	r1, r3
 8012462:	6978      	ldr	r0, [r7, #20]
 8012464:	f000 f81b 	bl	801249e <USBD_GetNextDesc>
 8012468:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	785b      	ldrb	r3, [r3, #1]
 801246e:	2b05      	cmp	r3, #5
 8012470:	d108      	bne.n	8012484 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	789b      	ldrb	r3, [r3, #2]
 801247a:	78fa      	ldrb	r2, [r7, #3]
 801247c:	429a      	cmp	r2, r3
 801247e:	d008      	beq.n	8012492 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012480:	2300      	movs	r3, #0
 8012482:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	885b      	ldrh	r3, [r3, #2]
 8012488:	b29a      	uxth	r2, r3
 801248a:	897b      	ldrh	r3, [r7, #10]
 801248c:	429a      	cmp	r2, r3
 801248e:	d8e5      	bhi.n	801245c <USBD_GetEpDesc+0x32>
 8012490:	e000      	b.n	8012494 <USBD_GetEpDesc+0x6a>
          break;
 8012492:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012494:	693b      	ldr	r3, [r7, #16]
}
 8012496:	4618      	mov	r0, r3
 8012498:	3718      	adds	r7, #24
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}

0801249e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801249e:	b480      	push	{r7}
 80124a0:	b085      	sub	sp, #20
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
 80124a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	881a      	ldrh	r2, [r3, #0]
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	b29b      	uxth	r3, r3
 80124b6:	4413      	add	r3, r2
 80124b8:	b29a      	uxth	r2, r3
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	781b      	ldrb	r3, [r3, #0]
 80124c2:	461a      	mov	r2, r3
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	4413      	add	r3, r2
 80124c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80124ca:	68fb      	ldr	r3, [r7, #12]
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	3714      	adds	r7, #20
 80124d0:	46bd      	mov	sp, r7
 80124d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d6:	4770      	bx	lr

080124d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80124d8:	b480      	push	{r7}
 80124da:	b087      	sub	sp, #28
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	3301      	adds	r3, #1
 80124ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80124f0:	697b      	ldr	r3, [r7, #20]
 80124f2:	781b      	ldrb	r3, [r3, #0]
 80124f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80124f6:	8a3b      	ldrh	r3, [r7, #16]
 80124f8:	021b      	lsls	r3, r3, #8
 80124fa:	b21a      	sxth	r2, r3
 80124fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012500:	4313      	orrs	r3, r2
 8012502:	b21b      	sxth	r3, r3
 8012504:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012506:	89fb      	ldrh	r3, [r7, #14]
}
 8012508:	4618      	mov	r0, r3
 801250a:	371c      	adds	r7, #28
 801250c:	46bd      	mov	sp, r7
 801250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012512:	4770      	bx	lr

08012514 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b084      	sub	sp, #16
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
 801251c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801251e:	2300      	movs	r3, #0
 8012520:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	781b      	ldrb	r3, [r3, #0]
 8012526:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801252a:	2b40      	cmp	r3, #64	; 0x40
 801252c:	d005      	beq.n	801253a <USBD_StdDevReq+0x26>
 801252e:	2b40      	cmp	r3, #64	; 0x40
 8012530:	d857      	bhi.n	80125e2 <USBD_StdDevReq+0xce>
 8012532:	2b00      	cmp	r3, #0
 8012534:	d00f      	beq.n	8012556 <USBD_StdDevReq+0x42>
 8012536:	2b20      	cmp	r3, #32
 8012538:	d153      	bne.n	80125e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	32ae      	adds	r2, #174	; 0xae
 8012544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012548:	689b      	ldr	r3, [r3, #8]
 801254a:	6839      	ldr	r1, [r7, #0]
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	4798      	blx	r3
 8012550:	4603      	mov	r3, r0
 8012552:	73fb      	strb	r3, [r7, #15]
      break;
 8012554:	e04a      	b.n	80125ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	785b      	ldrb	r3, [r3, #1]
 801255a:	2b09      	cmp	r3, #9
 801255c:	d83b      	bhi.n	80125d6 <USBD_StdDevReq+0xc2>
 801255e:	a201      	add	r2, pc, #4	; (adr r2, 8012564 <USBD_StdDevReq+0x50>)
 8012560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012564:	080125b9 	.word	0x080125b9
 8012568:	080125cd 	.word	0x080125cd
 801256c:	080125d7 	.word	0x080125d7
 8012570:	080125c3 	.word	0x080125c3
 8012574:	080125d7 	.word	0x080125d7
 8012578:	08012597 	.word	0x08012597
 801257c:	0801258d 	.word	0x0801258d
 8012580:	080125d7 	.word	0x080125d7
 8012584:	080125af 	.word	0x080125af
 8012588:	080125a1 	.word	0x080125a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801258c:	6839      	ldr	r1, [r7, #0]
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 fa3c 	bl	8012a0c <USBD_GetDescriptor>
          break;
 8012594:	e024      	b.n	80125e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012596:	6839      	ldr	r1, [r7, #0]
 8012598:	6878      	ldr	r0, [r7, #4]
 801259a:	f000 fbcb 	bl	8012d34 <USBD_SetAddress>
          break;
 801259e:	e01f      	b.n	80125e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80125a0:	6839      	ldr	r1, [r7, #0]
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f000 fc0a 	bl	8012dbc <USBD_SetConfig>
 80125a8:	4603      	mov	r3, r0
 80125aa:	73fb      	strb	r3, [r7, #15]
          break;
 80125ac:	e018      	b.n	80125e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80125ae:	6839      	ldr	r1, [r7, #0]
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	f000 fcad 	bl	8012f10 <USBD_GetConfig>
          break;
 80125b6:	e013      	b.n	80125e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80125b8:	6839      	ldr	r1, [r7, #0]
 80125ba:	6878      	ldr	r0, [r7, #4]
 80125bc:	f000 fcde 	bl	8012f7c <USBD_GetStatus>
          break;
 80125c0:	e00e      	b.n	80125e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80125c2:	6839      	ldr	r1, [r7, #0]
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f000 fd0d 	bl	8012fe4 <USBD_SetFeature>
          break;
 80125ca:	e009      	b.n	80125e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80125cc:	6839      	ldr	r1, [r7, #0]
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f000 fd31 	bl	8013036 <USBD_ClrFeature>
          break;
 80125d4:	e004      	b.n	80125e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80125d6:	6839      	ldr	r1, [r7, #0]
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f000 fd88 	bl	80130ee <USBD_CtlError>
          break;
 80125de:	bf00      	nop
      }
      break;
 80125e0:	e004      	b.n	80125ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80125e2:	6839      	ldr	r1, [r7, #0]
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f000 fd82 	bl	80130ee <USBD_CtlError>
      break;
 80125ea:	bf00      	nop
  }

  return ret;
 80125ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80125ee:	4618      	mov	r0, r3
 80125f0:	3710      	adds	r7, #16
 80125f2:	46bd      	mov	sp, r7
 80125f4:	bd80      	pop	{r7, pc}
 80125f6:	bf00      	nop

080125f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b084      	sub	sp, #16
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
 8012600:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012602:	2300      	movs	r3, #0
 8012604:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	781b      	ldrb	r3, [r3, #0]
 801260a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801260e:	2b40      	cmp	r3, #64	; 0x40
 8012610:	d005      	beq.n	801261e <USBD_StdItfReq+0x26>
 8012612:	2b40      	cmp	r3, #64	; 0x40
 8012614:	d852      	bhi.n	80126bc <USBD_StdItfReq+0xc4>
 8012616:	2b00      	cmp	r3, #0
 8012618:	d001      	beq.n	801261e <USBD_StdItfReq+0x26>
 801261a:	2b20      	cmp	r3, #32
 801261c:	d14e      	bne.n	80126bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012624:	b2db      	uxtb	r3, r3
 8012626:	3b01      	subs	r3, #1
 8012628:	2b02      	cmp	r3, #2
 801262a:	d840      	bhi.n	80126ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	889b      	ldrh	r3, [r3, #4]
 8012630:	b2db      	uxtb	r3, r3
 8012632:	2b01      	cmp	r3, #1
 8012634:	d836      	bhi.n	80126a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	889b      	ldrh	r3, [r3, #4]
 801263a:	b2db      	uxtb	r3, r3
 801263c:	4619      	mov	r1, r3
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f7ff fed9 	bl	80123f6 <USBD_CoreFindIF>
 8012644:	4603      	mov	r3, r0
 8012646:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012648:	7bbb      	ldrb	r3, [r7, #14]
 801264a:	2bff      	cmp	r3, #255	; 0xff
 801264c:	d01d      	beq.n	801268a <USBD_StdItfReq+0x92>
 801264e:	7bbb      	ldrb	r3, [r7, #14]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d11a      	bne.n	801268a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012654:	7bba      	ldrb	r2, [r7, #14]
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	32ae      	adds	r2, #174	; 0xae
 801265a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801265e:	689b      	ldr	r3, [r3, #8]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d00f      	beq.n	8012684 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012664:	7bba      	ldrb	r2, [r7, #14]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801266c:	7bba      	ldrb	r2, [r7, #14]
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	32ae      	adds	r2, #174	; 0xae
 8012672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012676:	689b      	ldr	r3, [r3, #8]
 8012678:	6839      	ldr	r1, [r7, #0]
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	4798      	blx	r3
 801267e:	4603      	mov	r3, r0
 8012680:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012682:	e004      	b.n	801268e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012684:	2303      	movs	r3, #3
 8012686:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012688:	e001      	b.n	801268e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801268a:	2303      	movs	r3, #3
 801268c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	88db      	ldrh	r3, [r3, #6]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d110      	bne.n	80126b8 <USBD_StdItfReq+0xc0>
 8012696:	7bfb      	ldrb	r3, [r7, #15]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d10d      	bne.n	80126b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801269c:	6878      	ldr	r0, [r7, #4]
 801269e:	f000 fdf1 	bl	8013284 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80126a2:	e009      	b.n	80126b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80126a4:	6839      	ldr	r1, [r7, #0]
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f000 fd21 	bl	80130ee <USBD_CtlError>
          break;
 80126ac:	e004      	b.n	80126b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80126ae:	6839      	ldr	r1, [r7, #0]
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f000 fd1c 	bl	80130ee <USBD_CtlError>
          break;
 80126b6:	e000      	b.n	80126ba <USBD_StdItfReq+0xc2>
          break;
 80126b8:	bf00      	nop
      }
      break;
 80126ba:	e004      	b.n	80126c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80126bc:	6839      	ldr	r1, [r7, #0]
 80126be:	6878      	ldr	r0, [r7, #4]
 80126c0:	f000 fd15 	bl	80130ee <USBD_CtlError>
      break;
 80126c4:	bf00      	nop
  }

  return ret;
 80126c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80126c8:	4618      	mov	r0, r3
 80126ca:	3710      	adds	r7, #16
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}

080126d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b084      	sub	sp, #16
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
 80126d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80126da:	2300      	movs	r3, #0
 80126dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	889b      	ldrh	r3, [r3, #4]
 80126e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80126ec:	2b40      	cmp	r3, #64	; 0x40
 80126ee:	d007      	beq.n	8012700 <USBD_StdEPReq+0x30>
 80126f0:	2b40      	cmp	r3, #64	; 0x40
 80126f2:	f200 817f 	bhi.w	80129f4 <USBD_StdEPReq+0x324>
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d02a      	beq.n	8012750 <USBD_StdEPReq+0x80>
 80126fa:	2b20      	cmp	r3, #32
 80126fc:	f040 817a 	bne.w	80129f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012700:	7bbb      	ldrb	r3, [r7, #14]
 8012702:	4619      	mov	r1, r3
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f7ff fe83 	bl	8012410 <USBD_CoreFindEP>
 801270a:	4603      	mov	r3, r0
 801270c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801270e:	7b7b      	ldrb	r3, [r7, #13]
 8012710:	2bff      	cmp	r3, #255	; 0xff
 8012712:	f000 8174 	beq.w	80129fe <USBD_StdEPReq+0x32e>
 8012716:	7b7b      	ldrb	r3, [r7, #13]
 8012718:	2b00      	cmp	r3, #0
 801271a:	f040 8170 	bne.w	80129fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801271e:	7b7a      	ldrb	r2, [r7, #13]
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012726:	7b7a      	ldrb	r2, [r7, #13]
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	32ae      	adds	r2, #174	; 0xae
 801272c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012730:	689b      	ldr	r3, [r3, #8]
 8012732:	2b00      	cmp	r3, #0
 8012734:	f000 8163 	beq.w	80129fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012738:	7b7a      	ldrb	r2, [r7, #13]
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	32ae      	adds	r2, #174	; 0xae
 801273e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012742:	689b      	ldr	r3, [r3, #8]
 8012744:	6839      	ldr	r1, [r7, #0]
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	4798      	blx	r3
 801274a:	4603      	mov	r3, r0
 801274c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801274e:	e156      	b.n	80129fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	785b      	ldrb	r3, [r3, #1]
 8012754:	2b03      	cmp	r3, #3
 8012756:	d008      	beq.n	801276a <USBD_StdEPReq+0x9a>
 8012758:	2b03      	cmp	r3, #3
 801275a:	f300 8145 	bgt.w	80129e8 <USBD_StdEPReq+0x318>
 801275e:	2b00      	cmp	r3, #0
 8012760:	f000 809b 	beq.w	801289a <USBD_StdEPReq+0x1ca>
 8012764:	2b01      	cmp	r3, #1
 8012766:	d03c      	beq.n	80127e2 <USBD_StdEPReq+0x112>
 8012768:	e13e      	b.n	80129e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012770:	b2db      	uxtb	r3, r3
 8012772:	2b02      	cmp	r3, #2
 8012774:	d002      	beq.n	801277c <USBD_StdEPReq+0xac>
 8012776:	2b03      	cmp	r3, #3
 8012778:	d016      	beq.n	80127a8 <USBD_StdEPReq+0xd8>
 801277a:	e02c      	b.n	80127d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801277c:	7bbb      	ldrb	r3, [r7, #14]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d00d      	beq.n	801279e <USBD_StdEPReq+0xce>
 8012782:	7bbb      	ldrb	r3, [r7, #14]
 8012784:	2b80      	cmp	r3, #128	; 0x80
 8012786:	d00a      	beq.n	801279e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012788:	7bbb      	ldrb	r3, [r7, #14]
 801278a:	4619      	mov	r1, r3
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	f001 feef 	bl	8014570 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012792:	2180      	movs	r1, #128	; 0x80
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f001 feeb 	bl	8014570 <USBD_LL_StallEP>
 801279a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801279c:	e020      	b.n	80127e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801279e:	6839      	ldr	r1, [r7, #0]
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f000 fca4 	bl	80130ee <USBD_CtlError>
              break;
 80127a6:	e01b      	b.n	80127e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	885b      	ldrh	r3, [r3, #2]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d10e      	bne.n	80127ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80127b0:	7bbb      	ldrb	r3, [r7, #14]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d00b      	beq.n	80127ce <USBD_StdEPReq+0xfe>
 80127b6:	7bbb      	ldrb	r3, [r7, #14]
 80127b8:	2b80      	cmp	r3, #128	; 0x80
 80127ba:	d008      	beq.n	80127ce <USBD_StdEPReq+0xfe>
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	88db      	ldrh	r3, [r3, #6]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d104      	bne.n	80127ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80127c4:	7bbb      	ldrb	r3, [r7, #14]
 80127c6:	4619      	mov	r1, r3
 80127c8:	6878      	ldr	r0, [r7, #4]
 80127ca:	f001 fed1 	bl	8014570 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f000 fd58 	bl	8013284 <USBD_CtlSendStatus>

              break;
 80127d4:	e004      	b.n	80127e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80127d6:	6839      	ldr	r1, [r7, #0]
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f000 fc88 	bl	80130ee <USBD_CtlError>
              break;
 80127de:	bf00      	nop
          }
          break;
 80127e0:	e107      	b.n	80129f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127e8:	b2db      	uxtb	r3, r3
 80127ea:	2b02      	cmp	r3, #2
 80127ec:	d002      	beq.n	80127f4 <USBD_StdEPReq+0x124>
 80127ee:	2b03      	cmp	r3, #3
 80127f0:	d016      	beq.n	8012820 <USBD_StdEPReq+0x150>
 80127f2:	e04b      	b.n	801288c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80127f4:	7bbb      	ldrb	r3, [r7, #14]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d00d      	beq.n	8012816 <USBD_StdEPReq+0x146>
 80127fa:	7bbb      	ldrb	r3, [r7, #14]
 80127fc:	2b80      	cmp	r3, #128	; 0x80
 80127fe:	d00a      	beq.n	8012816 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012800:	7bbb      	ldrb	r3, [r7, #14]
 8012802:	4619      	mov	r1, r3
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f001 feb3 	bl	8014570 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801280a:	2180      	movs	r1, #128	; 0x80
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f001 feaf 	bl	8014570 <USBD_LL_StallEP>
 8012812:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012814:	e040      	b.n	8012898 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012816:	6839      	ldr	r1, [r7, #0]
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f000 fc68 	bl	80130ee <USBD_CtlError>
              break;
 801281e:	e03b      	b.n	8012898 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	885b      	ldrh	r3, [r3, #2]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d136      	bne.n	8012896 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012828:	7bbb      	ldrb	r3, [r7, #14]
 801282a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801282e:	2b00      	cmp	r3, #0
 8012830:	d004      	beq.n	801283c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012832:	7bbb      	ldrb	r3, [r7, #14]
 8012834:	4619      	mov	r1, r3
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f001 fed0 	bl	80145dc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801283c:	6878      	ldr	r0, [r7, #4]
 801283e:	f000 fd21 	bl	8013284 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012842:	7bbb      	ldrb	r3, [r7, #14]
 8012844:	4619      	mov	r1, r3
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f7ff fde2 	bl	8012410 <USBD_CoreFindEP>
 801284c:	4603      	mov	r3, r0
 801284e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012850:	7b7b      	ldrb	r3, [r7, #13]
 8012852:	2bff      	cmp	r3, #255	; 0xff
 8012854:	d01f      	beq.n	8012896 <USBD_StdEPReq+0x1c6>
 8012856:	7b7b      	ldrb	r3, [r7, #13]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d11c      	bne.n	8012896 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801285c:	7b7a      	ldrb	r2, [r7, #13]
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012864:	7b7a      	ldrb	r2, [r7, #13]
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	32ae      	adds	r2, #174	; 0xae
 801286a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801286e:	689b      	ldr	r3, [r3, #8]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d010      	beq.n	8012896 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012874:	7b7a      	ldrb	r2, [r7, #13]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	32ae      	adds	r2, #174	; 0xae
 801287a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801287e:	689b      	ldr	r3, [r3, #8]
 8012880:	6839      	ldr	r1, [r7, #0]
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	4798      	blx	r3
 8012886:	4603      	mov	r3, r0
 8012888:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801288a:	e004      	b.n	8012896 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801288c:	6839      	ldr	r1, [r7, #0]
 801288e:	6878      	ldr	r0, [r7, #4]
 8012890:	f000 fc2d 	bl	80130ee <USBD_CtlError>
              break;
 8012894:	e000      	b.n	8012898 <USBD_StdEPReq+0x1c8>
              break;
 8012896:	bf00      	nop
          }
          break;
 8012898:	e0ab      	b.n	80129f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128a0:	b2db      	uxtb	r3, r3
 80128a2:	2b02      	cmp	r3, #2
 80128a4:	d002      	beq.n	80128ac <USBD_StdEPReq+0x1dc>
 80128a6:	2b03      	cmp	r3, #3
 80128a8:	d032      	beq.n	8012910 <USBD_StdEPReq+0x240>
 80128aa:	e097      	b.n	80129dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80128ac:	7bbb      	ldrb	r3, [r7, #14]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d007      	beq.n	80128c2 <USBD_StdEPReq+0x1f2>
 80128b2:	7bbb      	ldrb	r3, [r7, #14]
 80128b4:	2b80      	cmp	r3, #128	; 0x80
 80128b6:	d004      	beq.n	80128c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80128b8:	6839      	ldr	r1, [r7, #0]
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f000 fc17 	bl	80130ee <USBD_CtlError>
                break;
 80128c0:	e091      	b.n	80129e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80128c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	da0b      	bge.n	80128e2 <USBD_StdEPReq+0x212>
 80128ca:	7bbb      	ldrb	r3, [r7, #14]
 80128cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80128d0:	4613      	mov	r3, r2
 80128d2:	009b      	lsls	r3, r3, #2
 80128d4:	4413      	add	r3, r2
 80128d6:	009b      	lsls	r3, r3, #2
 80128d8:	3310      	adds	r3, #16
 80128da:	687a      	ldr	r2, [r7, #4]
 80128dc:	4413      	add	r3, r2
 80128de:	3304      	adds	r3, #4
 80128e0:	e00b      	b.n	80128fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80128e2:	7bbb      	ldrb	r3, [r7, #14]
 80128e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80128e8:	4613      	mov	r3, r2
 80128ea:	009b      	lsls	r3, r3, #2
 80128ec:	4413      	add	r3, r2
 80128ee:	009b      	lsls	r3, r3, #2
 80128f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80128f4:	687a      	ldr	r2, [r7, #4]
 80128f6:	4413      	add	r3, r2
 80128f8:	3304      	adds	r3, #4
 80128fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	2200      	movs	r2, #0
 8012900:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	2202      	movs	r2, #2
 8012906:	4619      	mov	r1, r3
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f000 fc61 	bl	80131d0 <USBD_CtlSendData>
              break;
 801290e:	e06a      	b.n	80129e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012910:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012914:	2b00      	cmp	r3, #0
 8012916:	da11      	bge.n	801293c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012918:	7bbb      	ldrb	r3, [r7, #14]
 801291a:	f003 020f 	and.w	r2, r3, #15
 801291e:	6879      	ldr	r1, [r7, #4]
 8012920:	4613      	mov	r3, r2
 8012922:	009b      	lsls	r3, r3, #2
 8012924:	4413      	add	r3, r2
 8012926:	009b      	lsls	r3, r3, #2
 8012928:	440b      	add	r3, r1
 801292a:	3324      	adds	r3, #36	; 0x24
 801292c:	881b      	ldrh	r3, [r3, #0]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d117      	bne.n	8012962 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012932:	6839      	ldr	r1, [r7, #0]
 8012934:	6878      	ldr	r0, [r7, #4]
 8012936:	f000 fbda 	bl	80130ee <USBD_CtlError>
                  break;
 801293a:	e054      	b.n	80129e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801293c:	7bbb      	ldrb	r3, [r7, #14]
 801293e:	f003 020f 	and.w	r2, r3, #15
 8012942:	6879      	ldr	r1, [r7, #4]
 8012944:	4613      	mov	r3, r2
 8012946:	009b      	lsls	r3, r3, #2
 8012948:	4413      	add	r3, r2
 801294a:	009b      	lsls	r3, r3, #2
 801294c:	440b      	add	r3, r1
 801294e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012952:	881b      	ldrh	r3, [r3, #0]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d104      	bne.n	8012962 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012958:	6839      	ldr	r1, [r7, #0]
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f000 fbc7 	bl	80130ee <USBD_CtlError>
                  break;
 8012960:	e041      	b.n	80129e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012962:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012966:	2b00      	cmp	r3, #0
 8012968:	da0b      	bge.n	8012982 <USBD_StdEPReq+0x2b2>
 801296a:	7bbb      	ldrb	r3, [r7, #14]
 801296c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012970:	4613      	mov	r3, r2
 8012972:	009b      	lsls	r3, r3, #2
 8012974:	4413      	add	r3, r2
 8012976:	009b      	lsls	r3, r3, #2
 8012978:	3310      	adds	r3, #16
 801297a:	687a      	ldr	r2, [r7, #4]
 801297c:	4413      	add	r3, r2
 801297e:	3304      	adds	r3, #4
 8012980:	e00b      	b.n	801299a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012982:	7bbb      	ldrb	r3, [r7, #14]
 8012984:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012988:	4613      	mov	r3, r2
 801298a:	009b      	lsls	r3, r3, #2
 801298c:	4413      	add	r3, r2
 801298e:	009b      	lsls	r3, r3, #2
 8012990:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012994:	687a      	ldr	r2, [r7, #4]
 8012996:	4413      	add	r3, r2
 8012998:	3304      	adds	r3, #4
 801299a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801299c:	7bbb      	ldrb	r3, [r7, #14]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d002      	beq.n	80129a8 <USBD_StdEPReq+0x2d8>
 80129a2:	7bbb      	ldrb	r3, [r7, #14]
 80129a4:	2b80      	cmp	r3, #128	; 0x80
 80129a6:	d103      	bne.n	80129b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	2200      	movs	r2, #0
 80129ac:	601a      	str	r2, [r3, #0]
 80129ae:	e00e      	b.n	80129ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80129b0:	7bbb      	ldrb	r3, [r7, #14]
 80129b2:	4619      	mov	r1, r3
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f001 fe47 	bl	8014648 <USBD_LL_IsStallEP>
 80129ba:	4603      	mov	r3, r0
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d003      	beq.n	80129c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	2201      	movs	r2, #1
 80129c4:	601a      	str	r2, [r3, #0]
 80129c6:	e002      	b.n	80129ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80129c8:	68bb      	ldr	r3, [r7, #8]
 80129ca:	2200      	movs	r2, #0
 80129cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	2202      	movs	r2, #2
 80129d2:	4619      	mov	r1, r3
 80129d4:	6878      	ldr	r0, [r7, #4]
 80129d6:	f000 fbfb 	bl	80131d0 <USBD_CtlSendData>
              break;
 80129da:	e004      	b.n	80129e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80129dc:	6839      	ldr	r1, [r7, #0]
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f000 fb85 	bl	80130ee <USBD_CtlError>
              break;
 80129e4:	bf00      	nop
          }
          break;
 80129e6:	e004      	b.n	80129f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80129e8:	6839      	ldr	r1, [r7, #0]
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	f000 fb7f 	bl	80130ee <USBD_CtlError>
          break;
 80129f0:	bf00      	nop
      }
      break;
 80129f2:	e005      	b.n	8012a00 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80129f4:	6839      	ldr	r1, [r7, #0]
 80129f6:	6878      	ldr	r0, [r7, #4]
 80129f8:	f000 fb79 	bl	80130ee <USBD_CtlError>
      break;
 80129fc:	e000      	b.n	8012a00 <USBD_StdEPReq+0x330>
      break;
 80129fe:	bf00      	nop
  }

  return ret;
 8012a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a02:	4618      	mov	r0, r3
 8012a04:	3710      	adds	r7, #16
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}
	...

08012a0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b084      	sub	sp, #16
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012a16:	2300      	movs	r3, #0
 8012a18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	885b      	ldrh	r3, [r3, #2]
 8012a26:	0a1b      	lsrs	r3, r3, #8
 8012a28:	b29b      	uxth	r3, r3
 8012a2a:	3b01      	subs	r3, #1
 8012a2c:	2b0e      	cmp	r3, #14
 8012a2e:	f200 8152 	bhi.w	8012cd6 <USBD_GetDescriptor+0x2ca>
 8012a32:	a201      	add	r2, pc, #4	; (adr r2, 8012a38 <USBD_GetDescriptor+0x2c>)
 8012a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a38:	08012aa9 	.word	0x08012aa9
 8012a3c:	08012ac1 	.word	0x08012ac1
 8012a40:	08012b01 	.word	0x08012b01
 8012a44:	08012cd7 	.word	0x08012cd7
 8012a48:	08012cd7 	.word	0x08012cd7
 8012a4c:	08012c77 	.word	0x08012c77
 8012a50:	08012ca3 	.word	0x08012ca3
 8012a54:	08012cd7 	.word	0x08012cd7
 8012a58:	08012cd7 	.word	0x08012cd7
 8012a5c:	08012cd7 	.word	0x08012cd7
 8012a60:	08012cd7 	.word	0x08012cd7
 8012a64:	08012cd7 	.word	0x08012cd7
 8012a68:	08012cd7 	.word	0x08012cd7
 8012a6c:	08012cd7 	.word	0x08012cd7
 8012a70:	08012a75 	.word	0x08012a75
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a7a:	69db      	ldr	r3, [r3, #28]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d00b      	beq.n	8012a98 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a86:	69db      	ldr	r3, [r3, #28]
 8012a88:	687a      	ldr	r2, [r7, #4]
 8012a8a:	7c12      	ldrb	r2, [r2, #16]
 8012a8c:	f107 0108 	add.w	r1, r7, #8
 8012a90:	4610      	mov	r0, r2
 8012a92:	4798      	blx	r3
 8012a94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012a96:	e126      	b.n	8012ce6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012a98:	6839      	ldr	r1, [r7, #0]
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f000 fb27 	bl	80130ee <USBD_CtlError>
        err++;
 8012aa0:	7afb      	ldrb	r3, [r7, #11]
 8012aa2:	3301      	adds	r3, #1
 8012aa4:	72fb      	strb	r3, [r7, #11]
      break;
 8012aa6:	e11e      	b.n	8012ce6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	687a      	ldr	r2, [r7, #4]
 8012ab2:	7c12      	ldrb	r2, [r2, #16]
 8012ab4:	f107 0108 	add.w	r1, r7, #8
 8012ab8:	4610      	mov	r0, r2
 8012aba:	4798      	blx	r3
 8012abc:	60f8      	str	r0, [r7, #12]
      break;
 8012abe:	e112      	b.n	8012ce6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	7c1b      	ldrb	r3, [r3, #16]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d10d      	bne.n	8012ae4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ad0:	f107 0208 	add.w	r2, r7, #8
 8012ad4:	4610      	mov	r0, r2
 8012ad6:	4798      	blx	r3
 8012ad8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	3301      	adds	r3, #1
 8012ade:	2202      	movs	r2, #2
 8012ae0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012ae2:	e100      	b.n	8012ce6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aec:	f107 0208 	add.w	r2, r7, #8
 8012af0:	4610      	mov	r0, r2
 8012af2:	4798      	blx	r3
 8012af4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	3301      	adds	r3, #1
 8012afa:	2202      	movs	r2, #2
 8012afc:	701a      	strb	r2, [r3, #0]
      break;
 8012afe:	e0f2      	b.n	8012ce6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012b00:	683b      	ldr	r3, [r7, #0]
 8012b02:	885b      	ldrh	r3, [r3, #2]
 8012b04:	b2db      	uxtb	r3, r3
 8012b06:	2b05      	cmp	r3, #5
 8012b08:	f200 80ac 	bhi.w	8012c64 <USBD_GetDescriptor+0x258>
 8012b0c:	a201      	add	r2, pc, #4	; (adr r2, 8012b14 <USBD_GetDescriptor+0x108>)
 8012b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b12:	bf00      	nop
 8012b14:	08012b2d 	.word	0x08012b2d
 8012b18:	08012b61 	.word	0x08012b61
 8012b1c:	08012b95 	.word	0x08012b95
 8012b20:	08012bc9 	.word	0x08012bc9
 8012b24:	08012bfd 	.word	0x08012bfd
 8012b28:	08012c31 	.word	0x08012c31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b32:	685b      	ldr	r3, [r3, #4]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d00b      	beq.n	8012b50 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	687a      	ldr	r2, [r7, #4]
 8012b42:	7c12      	ldrb	r2, [r2, #16]
 8012b44:	f107 0108 	add.w	r1, r7, #8
 8012b48:	4610      	mov	r0, r2
 8012b4a:	4798      	blx	r3
 8012b4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b4e:	e091      	b.n	8012c74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012b50:	6839      	ldr	r1, [r7, #0]
 8012b52:	6878      	ldr	r0, [r7, #4]
 8012b54:	f000 facb 	bl	80130ee <USBD_CtlError>
            err++;
 8012b58:	7afb      	ldrb	r3, [r7, #11]
 8012b5a:	3301      	adds	r3, #1
 8012b5c:	72fb      	strb	r3, [r7, #11]
          break;
 8012b5e:	e089      	b.n	8012c74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b66:	689b      	ldr	r3, [r3, #8]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d00b      	beq.n	8012b84 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b72:	689b      	ldr	r3, [r3, #8]
 8012b74:	687a      	ldr	r2, [r7, #4]
 8012b76:	7c12      	ldrb	r2, [r2, #16]
 8012b78:	f107 0108 	add.w	r1, r7, #8
 8012b7c:	4610      	mov	r0, r2
 8012b7e:	4798      	blx	r3
 8012b80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012b82:	e077      	b.n	8012c74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012b84:	6839      	ldr	r1, [r7, #0]
 8012b86:	6878      	ldr	r0, [r7, #4]
 8012b88:	f000 fab1 	bl	80130ee <USBD_CtlError>
            err++;
 8012b8c:	7afb      	ldrb	r3, [r7, #11]
 8012b8e:	3301      	adds	r3, #1
 8012b90:	72fb      	strb	r3, [r7, #11]
          break;
 8012b92:	e06f      	b.n	8012c74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b9a:	68db      	ldr	r3, [r3, #12]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d00b      	beq.n	8012bb8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ba6:	68db      	ldr	r3, [r3, #12]
 8012ba8:	687a      	ldr	r2, [r7, #4]
 8012baa:	7c12      	ldrb	r2, [r2, #16]
 8012bac:	f107 0108 	add.w	r1, r7, #8
 8012bb0:	4610      	mov	r0, r2
 8012bb2:	4798      	blx	r3
 8012bb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012bb6:	e05d      	b.n	8012c74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012bb8:	6839      	ldr	r1, [r7, #0]
 8012bba:	6878      	ldr	r0, [r7, #4]
 8012bbc:	f000 fa97 	bl	80130ee <USBD_CtlError>
            err++;
 8012bc0:	7afb      	ldrb	r3, [r7, #11]
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	72fb      	strb	r3, [r7, #11]
          break;
 8012bc6:	e055      	b.n	8012c74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bce:	691b      	ldr	r3, [r3, #16]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d00b      	beq.n	8012bec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012bda:	691b      	ldr	r3, [r3, #16]
 8012bdc:	687a      	ldr	r2, [r7, #4]
 8012bde:	7c12      	ldrb	r2, [r2, #16]
 8012be0:	f107 0108 	add.w	r1, r7, #8
 8012be4:	4610      	mov	r0, r2
 8012be6:	4798      	blx	r3
 8012be8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012bea:	e043      	b.n	8012c74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012bec:	6839      	ldr	r1, [r7, #0]
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f000 fa7d 	bl	80130ee <USBD_CtlError>
            err++;
 8012bf4:	7afb      	ldrb	r3, [r7, #11]
 8012bf6:	3301      	adds	r3, #1
 8012bf8:	72fb      	strb	r3, [r7, #11]
          break;
 8012bfa:	e03b      	b.n	8012c74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c02:	695b      	ldr	r3, [r3, #20]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d00b      	beq.n	8012c20 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c0e:	695b      	ldr	r3, [r3, #20]
 8012c10:	687a      	ldr	r2, [r7, #4]
 8012c12:	7c12      	ldrb	r2, [r2, #16]
 8012c14:	f107 0108 	add.w	r1, r7, #8
 8012c18:	4610      	mov	r0, r2
 8012c1a:	4798      	blx	r3
 8012c1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c1e:	e029      	b.n	8012c74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c20:	6839      	ldr	r1, [r7, #0]
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f000 fa63 	bl	80130ee <USBD_CtlError>
            err++;
 8012c28:	7afb      	ldrb	r3, [r7, #11]
 8012c2a:	3301      	adds	r3, #1
 8012c2c:	72fb      	strb	r3, [r7, #11]
          break;
 8012c2e:	e021      	b.n	8012c74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c36:	699b      	ldr	r3, [r3, #24]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d00b      	beq.n	8012c54 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c42:	699b      	ldr	r3, [r3, #24]
 8012c44:	687a      	ldr	r2, [r7, #4]
 8012c46:	7c12      	ldrb	r2, [r2, #16]
 8012c48:	f107 0108 	add.w	r1, r7, #8
 8012c4c:	4610      	mov	r0, r2
 8012c4e:	4798      	blx	r3
 8012c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c52:	e00f      	b.n	8012c74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c54:	6839      	ldr	r1, [r7, #0]
 8012c56:	6878      	ldr	r0, [r7, #4]
 8012c58:	f000 fa49 	bl	80130ee <USBD_CtlError>
            err++;
 8012c5c:	7afb      	ldrb	r3, [r7, #11]
 8012c5e:	3301      	adds	r3, #1
 8012c60:	72fb      	strb	r3, [r7, #11]
          break;
 8012c62:	e007      	b.n	8012c74 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012c64:	6839      	ldr	r1, [r7, #0]
 8012c66:	6878      	ldr	r0, [r7, #4]
 8012c68:	f000 fa41 	bl	80130ee <USBD_CtlError>
          err++;
 8012c6c:	7afb      	ldrb	r3, [r7, #11]
 8012c6e:	3301      	adds	r3, #1
 8012c70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012c72:	bf00      	nop
      }
      break;
 8012c74:	e037      	b.n	8012ce6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	7c1b      	ldrb	r3, [r3, #16]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d109      	bne.n	8012c92 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c86:	f107 0208 	add.w	r2, r7, #8
 8012c8a:	4610      	mov	r0, r2
 8012c8c:	4798      	blx	r3
 8012c8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012c90:	e029      	b.n	8012ce6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012c92:	6839      	ldr	r1, [r7, #0]
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f000 fa2a 	bl	80130ee <USBD_CtlError>
        err++;
 8012c9a:	7afb      	ldrb	r3, [r7, #11]
 8012c9c:	3301      	adds	r3, #1
 8012c9e:	72fb      	strb	r3, [r7, #11]
      break;
 8012ca0:	e021      	b.n	8012ce6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	7c1b      	ldrb	r3, [r3, #16]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d10d      	bne.n	8012cc6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cb2:	f107 0208 	add.w	r2, r7, #8
 8012cb6:	4610      	mov	r0, r2
 8012cb8:	4798      	blx	r3
 8012cba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	3301      	adds	r3, #1
 8012cc0:	2207      	movs	r2, #7
 8012cc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012cc4:	e00f      	b.n	8012ce6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012cc6:	6839      	ldr	r1, [r7, #0]
 8012cc8:	6878      	ldr	r0, [r7, #4]
 8012cca:	f000 fa10 	bl	80130ee <USBD_CtlError>
        err++;
 8012cce:	7afb      	ldrb	r3, [r7, #11]
 8012cd0:	3301      	adds	r3, #1
 8012cd2:	72fb      	strb	r3, [r7, #11]
      break;
 8012cd4:	e007      	b.n	8012ce6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012cd6:	6839      	ldr	r1, [r7, #0]
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f000 fa08 	bl	80130ee <USBD_CtlError>
      err++;
 8012cde:	7afb      	ldrb	r3, [r7, #11]
 8012ce0:	3301      	adds	r3, #1
 8012ce2:	72fb      	strb	r3, [r7, #11]
      break;
 8012ce4:	bf00      	nop
  }

  if (err != 0U)
 8012ce6:	7afb      	ldrb	r3, [r7, #11]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d11e      	bne.n	8012d2a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012cec:	683b      	ldr	r3, [r7, #0]
 8012cee:	88db      	ldrh	r3, [r3, #6]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d016      	beq.n	8012d22 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012cf4:	893b      	ldrh	r3, [r7, #8]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d00e      	beq.n	8012d18 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012cfa:	683b      	ldr	r3, [r7, #0]
 8012cfc:	88da      	ldrh	r2, [r3, #6]
 8012cfe:	893b      	ldrh	r3, [r7, #8]
 8012d00:	4293      	cmp	r3, r2
 8012d02:	bf28      	it	cs
 8012d04:	4613      	movcs	r3, r2
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012d0a:	893b      	ldrh	r3, [r7, #8]
 8012d0c:	461a      	mov	r2, r3
 8012d0e:	68f9      	ldr	r1, [r7, #12]
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f000 fa5d 	bl	80131d0 <USBD_CtlSendData>
 8012d16:	e009      	b.n	8012d2c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012d18:	6839      	ldr	r1, [r7, #0]
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f000 f9e7 	bl	80130ee <USBD_CtlError>
 8012d20:	e004      	b.n	8012d2c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f000 faae 	bl	8013284 <USBD_CtlSendStatus>
 8012d28:	e000      	b.n	8012d2c <USBD_GetDescriptor+0x320>
    return;
 8012d2a:	bf00      	nop
  }
}
 8012d2c:	3710      	adds	r7, #16
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}
 8012d32:	bf00      	nop

08012d34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b084      	sub	sp, #16
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
 8012d3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	889b      	ldrh	r3, [r3, #4]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d131      	bne.n	8012daa <USBD_SetAddress+0x76>
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	88db      	ldrh	r3, [r3, #6]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d12d      	bne.n	8012daa <USBD_SetAddress+0x76>
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	885b      	ldrh	r3, [r3, #2]
 8012d52:	2b7f      	cmp	r3, #127	; 0x7f
 8012d54:	d829      	bhi.n	8012daa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	885b      	ldrh	r3, [r3, #2]
 8012d5a:	b2db      	uxtb	r3, r3
 8012d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012d60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d68:	b2db      	uxtb	r3, r3
 8012d6a:	2b03      	cmp	r3, #3
 8012d6c:	d104      	bne.n	8012d78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012d6e:	6839      	ldr	r1, [r7, #0]
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f000 f9bc 	bl	80130ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d76:	e01d      	b.n	8012db4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	7bfa      	ldrb	r2, [r7, #15]
 8012d7c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012d80:	7bfb      	ldrb	r3, [r7, #15]
 8012d82:	4619      	mov	r1, r3
 8012d84:	6878      	ldr	r0, [r7, #4]
 8012d86:	f001 fc8d 	bl	80146a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f000 fa7a 	bl	8013284 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012d90:	7bfb      	ldrb	r3, [r7, #15]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d004      	beq.n	8012da0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2202      	movs	r2, #2
 8012d9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d9e:	e009      	b.n	8012db4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2201      	movs	r2, #1
 8012da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012da8:	e004      	b.n	8012db4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012daa:	6839      	ldr	r1, [r7, #0]
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f000 f99e 	bl	80130ee <USBD_CtlError>
  }
}
 8012db2:	bf00      	nop
 8012db4:	bf00      	nop
 8012db6:	3710      	adds	r7, #16
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}

08012dbc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b084      	sub	sp, #16
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
 8012dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	885b      	ldrh	r3, [r3, #2]
 8012dce:	b2da      	uxtb	r2, r3
 8012dd0:	4b4e      	ldr	r3, [pc, #312]	; (8012f0c <USBD_SetConfig+0x150>)
 8012dd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012dd4:	4b4d      	ldr	r3, [pc, #308]	; (8012f0c <USBD_SetConfig+0x150>)
 8012dd6:	781b      	ldrb	r3, [r3, #0]
 8012dd8:	2b01      	cmp	r3, #1
 8012dda:	d905      	bls.n	8012de8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012ddc:	6839      	ldr	r1, [r7, #0]
 8012dde:	6878      	ldr	r0, [r7, #4]
 8012de0:	f000 f985 	bl	80130ee <USBD_CtlError>
    return USBD_FAIL;
 8012de4:	2303      	movs	r3, #3
 8012de6:	e08c      	b.n	8012f02 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012dee:	b2db      	uxtb	r3, r3
 8012df0:	2b02      	cmp	r3, #2
 8012df2:	d002      	beq.n	8012dfa <USBD_SetConfig+0x3e>
 8012df4:	2b03      	cmp	r3, #3
 8012df6:	d029      	beq.n	8012e4c <USBD_SetConfig+0x90>
 8012df8:	e075      	b.n	8012ee6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012dfa:	4b44      	ldr	r3, [pc, #272]	; (8012f0c <USBD_SetConfig+0x150>)
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d020      	beq.n	8012e44 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012e02:	4b42      	ldr	r3, [pc, #264]	; (8012f0c <USBD_SetConfig+0x150>)
 8012e04:	781b      	ldrb	r3, [r3, #0]
 8012e06:	461a      	mov	r2, r3
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012e0c:	4b3f      	ldr	r3, [pc, #252]	; (8012f0c <USBD_SetConfig+0x150>)
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	4619      	mov	r1, r3
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f7ff f849 	bl	8011eaa <USBD_SetClassConfig>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012e1c:	7bfb      	ldrb	r3, [r7, #15]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d008      	beq.n	8012e34 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012e22:	6839      	ldr	r1, [r7, #0]
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f000 f962 	bl	80130ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2202      	movs	r2, #2
 8012e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012e32:	e065      	b.n	8012f00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f000 fa25 	bl	8013284 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2203      	movs	r2, #3
 8012e3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012e42:	e05d      	b.n	8012f00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f000 fa1d 	bl	8013284 <USBD_CtlSendStatus>
      break;
 8012e4a:	e059      	b.n	8012f00 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012e4c:	4b2f      	ldr	r3, [pc, #188]	; (8012f0c <USBD_SetConfig+0x150>)
 8012e4e:	781b      	ldrb	r3, [r3, #0]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d112      	bne.n	8012e7a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2202      	movs	r2, #2
 8012e58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012e5c:	4b2b      	ldr	r3, [pc, #172]	; (8012f0c <USBD_SetConfig+0x150>)
 8012e5e:	781b      	ldrb	r3, [r3, #0]
 8012e60:	461a      	mov	r2, r3
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012e66:	4b29      	ldr	r3, [pc, #164]	; (8012f0c <USBD_SetConfig+0x150>)
 8012e68:	781b      	ldrb	r3, [r3, #0]
 8012e6a:	4619      	mov	r1, r3
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f7ff f838 	bl	8011ee2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012e72:	6878      	ldr	r0, [r7, #4]
 8012e74:	f000 fa06 	bl	8013284 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012e78:	e042      	b.n	8012f00 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012e7a:	4b24      	ldr	r3, [pc, #144]	; (8012f0c <USBD_SetConfig+0x150>)
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	461a      	mov	r2, r3
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	685b      	ldr	r3, [r3, #4]
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d02a      	beq.n	8012ede <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	685b      	ldr	r3, [r3, #4]
 8012e8c:	b2db      	uxtb	r3, r3
 8012e8e:	4619      	mov	r1, r3
 8012e90:	6878      	ldr	r0, [r7, #4]
 8012e92:	f7ff f826 	bl	8011ee2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012e96:	4b1d      	ldr	r3, [pc, #116]	; (8012f0c <USBD_SetConfig+0x150>)
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	461a      	mov	r2, r3
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012ea0:	4b1a      	ldr	r3, [pc, #104]	; (8012f0c <USBD_SetConfig+0x150>)
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	4619      	mov	r1, r3
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f7fe ffff 	bl	8011eaa <USBD_SetClassConfig>
 8012eac:	4603      	mov	r3, r0
 8012eae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012eb0:	7bfb      	ldrb	r3, [r7, #15]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d00f      	beq.n	8012ed6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012eb6:	6839      	ldr	r1, [r7, #0]
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f000 f918 	bl	80130ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	685b      	ldr	r3, [r3, #4]
 8012ec2:	b2db      	uxtb	r3, r3
 8012ec4:	4619      	mov	r1, r3
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f7ff f80b 	bl	8011ee2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2202      	movs	r2, #2
 8012ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012ed4:	e014      	b.n	8012f00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f000 f9d4 	bl	8013284 <USBD_CtlSendStatus>
      break;
 8012edc:	e010      	b.n	8012f00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f000 f9d0 	bl	8013284 <USBD_CtlSendStatus>
      break;
 8012ee4:	e00c      	b.n	8012f00 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012ee6:	6839      	ldr	r1, [r7, #0]
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f000 f900 	bl	80130ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012eee:	4b07      	ldr	r3, [pc, #28]	; (8012f0c <USBD_SetConfig+0x150>)
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f7fe fff4 	bl	8011ee2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012efa:	2303      	movs	r3, #3
 8012efc:	73fb      	strb	r3, [r7, #15]
      break;
 8012efe:	bf00      	nop
  }

  return ret;
 8012f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3710      	adds	r7, #16
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
 8012f0a:	bf00      	nop
 8012f0c:	20001370 	.word	0x20001370

08012f10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b082      	sub	sp, #8
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
 8012f18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	88db      	ldrh	r3, [r3, #6]
 8012f1e:	2b01      	cmp	r3, #1
 8012f20:	d004      	beq.n	8012f2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012f22:	6839      	ldr	r1, [r7, #0]
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f000 f8e2 	bl	80130ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012f2a:	e023      	b.n	8012f74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f32:	b2db      	uxtb	r3, r3
 8012f34:	2b02      	cmp	r3, #2
 8012f36:	dc02      	bgt.n	8012f3e <USBD_GetConfig+0x2e>
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	dc03      	bgt.n	8012f44 <USBD_GetConfig+0x34>
 8012f3c:	e015      	b.n	8012f6a <USBD_GetConfig+0x5a>
 8012f3e:	2b03      	cmp	r3, #3
 8012f40:	d00b      	beq.n	8012f5a <USBD_GetConfig+0x4a>
 8012f42:	e012      	b.n	8012f6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	2200      	movs	r2, #0
 8012f48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	3308      	adds	r3, #8
 8012f4e:	2201      	movs	r2, #1
 8012f50:	4619      	mov	r1, r3
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f000 f93c 	bl	80131d0 <USBD_CtlSendData>
        break;
 8012f58:	e00c      	b.n	8012f74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	3304      	adds	r3, #4
 8012f5e:	2201      	movs	r2, #1
 8012f60:	4619      	mov	r1, r3
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f000 f934 	bl	80131d0 <USBD_CtlSendData>
        break;
 8012f68:	e004      	b.n	8012f74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012f6a:	6839      	ldr	r1, [r7, #0]
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f000 f8be 	bl	80130ee <USBD_CtlError>
        break;
 8012f72:	bf00      	nop
}
 8012f74:	bf00      	nop
 8012f76:	3708      	adds	r7, #8
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}

08012f7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b082      	sub	sp, #8
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012f8c:	b2db      	uxtb	r3, r3
 8012f8e:	3b01      	subs	r3, #1
 8012f90:	2b02      	cmp	r3, #2
 8012f92:	d81e      	bhi.n	8012fd2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	88db      	ldrh	r3, [r3, #6]
 8012f98:	2b02      	cmp	r3, #2
 8012f9a:	d004      	beq.n	8012fa6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012f9c:	6839      	ldr	r1, [r7, #0]
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f000 f8a5 	bl	80130ee <USBD_CtlError>
        break;
 8012fa4:	e01a      	b.n	8012fdc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	2201      	movs	r2, #1
 8012faa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d005      	beq.n	8012fc2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	68db      	ldr	r3, [r3, #12]
 8012fba:	f043 0202 	orr.w	r2, r3, #2
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	330c      	adds	r3, #12
 8012fc6:	2202      	movs	r2, #2
 8012fc8:	4619      	mov	r1, r3
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f000 f900 	bl	80131d0 <USBD_CtlSendData>
      break;
 8012fd0:	e004      	b.n	8012fdc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012fd2:	6839      	ldr	r1, [r7, #0]
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f000 f88a 	bl	80130ee <USBD_CtlError>
      break;
 8012fda:	bf00      	nop
  }
}
 8012fdc:	bf00      	nop
 8012fde:	3708      	adds	r7, #8
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}

08012fe4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b082      	sub	sp, #8
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	885b      	ldrh	r3, [r3, #2]
 8012ff2:	2b01      	cmp	r3, #1
 8012ff4:	d107      	bne.n	8013006 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2201      	movs	r2, #1
 8012ffa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	f000 f940 	bl	8013284 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013004:	e013      	b.n	801302e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	885b      	ldrh	r3, [r3, #2]
 801300a:	2b02      	cmp	r3, #2
 801300c:	d10b      	bne.n	8013026 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	889b      	ldrh	r3, [r3, #4]
 8013012:	0a1b      	lsrs	r3, r3, #8
 8013014:	b29b      	uxth	r3, r3
 8013016:	b2da      	uxtb	r2, r3
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f000 f930 	bl	8013284 <USBD_CtlSendStatus>
}
 8013024:	e003      	b.n	801302e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8013026:	6839      	ldr	r1, [r7, #0]
 8013028:	6878      	ldr	r0, [r7, #4]
 801302a:	f000 f860 	bl	80130ee <USBD_CtlError>
}
 801302e:	bf00      	nop
 8013030:	3708      	adds	r7, #8
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}

08013036 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013036:	b580      	push	{r7, lr}
 8013038:	b082      	sub	sp, #8
 801303a:	af00      	add	r7, sp, #0
 801303c:	6078      	str	r0, [r7, #4]
 801303e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013046:	b2db      	uxtb	r3, r3
 8013048:	3b01      	subs	r3, #1
 801304a:	2b02      	cmp	r3, #2
 801304c:	d80b      	bhi.n	8013066 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	885b      	ldrh	r3, [r3, #2]
 8013052:	2b01      	cmp	r3, #1
 8013054:	d10c      	bne.n	8013070 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	2200      	movs	r2, #0
 801305a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f000 f910 	bl	8013284 <USBD_CtlSendStatus>
      }
      break;
 8013064:	e004      	b.n	8013070 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013066:	6839      	ldr	r1, [r7, #0]
 8013068:	6878      	ldr	r0, [r7, #4]
 801306a:	f000 f840 	bl	80130ee <USBD_CtlError>
      break;
 801306e:	e000      	b.n	8013072 <USBD_ClrFeature+0x3c>
      break;
 8013070:	bf00      	nop
  }
}
 8013072:	bf00      	nop
 8013074:	3708      	adds	r7, #8
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}

0801307a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801307a:	b580      	push	{r7, lr}
 801307c:	b084      	sub	sp, #16
 801307e:	af00      	add	r7, sp, #0
 8013080:	6078      	str	r0, [r7, #4]
 8013082:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013084:	683b      	ldr	r3, [r7, #0]
 8013086:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	781a      	ldrb	r2, [r3, #0]
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	3301      	adds	r3, #1
 8013094:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	781a      	ldrb	r2, [r3, #0]
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	3301      	adds	r3, #1
 80130a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80130a4:	68f8      	ldr	r0, [r7, #12]
 80130a6:	f7ff fa17 	bl	80124d8 <SWAPBYTE>
 80130aa:	4603      	mov	r3, r0
 80130ac:	461a      	mov	r2, r3
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	3301      	adds	r3, #1
 80130b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	3301      	adds	r3, #1
 80130bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80130be:	68f8      	ldr	r0, [r7, #12]
 80130c0:	f7ff fa0a 	bl	80124d8 <SWAPBYTE>
 80130c4:	4603      	mov	r3, r0
 80130c6:	461a      	mov	r2, r3
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	3301      	adds	r3, #1
 80130d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	3301      	adds	r3, #1
 80130d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80130d8:	68f8      	ldr	r0, [r7, #12]
 80130da:	f7ff f9fd 	bl	80124d8 <SWAPBYTE>
 80130de:	4603      	mov	r3, r0
 80130e0:	461a      	mov	r2, r3
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	80da      	strh	r2, [r3, #6]
}
 80130e6:	bf00      	nop
 80130e8:	3710      	adds	r7, #16
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}

080130ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130ee:	b580      	push	{r7, lr}
 80130f0:	b082      	sub	sp, #8
 80130f2:	af00      	add	r7, sp, #0
 80130f4:	6078      	str	r0, [r7, #4]
 80130f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80130f8:	2180      	movs	r1, #128	; 0x80
 80130fa:	6878      	ldr	r0, [r7, #4]
 80130fc:	f001 fa38 	bl	8014570 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013100:	2100      	movs	r1, #0
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f001 fa34 	bl	8014570 <USBD_LL_StallEP>
}
 8013108:	bf00      	nop
 801310a:	3708      	adds	r7, #8
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}

08013110 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b086      	sub	sp, #24
 8013114:	af00      	add	r7, sp, #0
 8013116:	60f8      	str	r0, [r7, #12]
 8013118:	60b9      	str	r1, [r7, #8]
 801311a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801311c:	2300      	movs	r3, #0
 801311e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d036      	beq.n	8013194 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801312a:	6938      	ldr	r0, [r7, #16]
 801312c:	f000 f836 	bl	801319c <USBD_GetLen>
 8013130:	4603      	mov	r3, r0
 8013132:	3301      	adds	r3, #1
 8013134:	b29b      	uxth	r3, r3
 8013136:	005b      	lsls	r3, r3, #1
 8013138:	b29a      	uxth	r2, r3
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801313e:	7dfb      	ldrb	r3, [r7, #23]
 8013140:	68ba      	ldr	r2, [r7, #8]
 8013142:	4413      	add	r3, r2
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	7812      	ldrb	r2, [r2, #0]
 8013148:	701a      	strb	r2, [r3, #0]
  idx++;
 801314a:	7dfb      	ldrb	r3, [r7, #23]
 801314c:	3301      	adds	r3, #1
 801314e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013150:	7dfb      	ldrb	r3, [r7, #23]
 8013152:	68ba      	ldr	r2, [r7, #8]
 8013154:	4413      	add	r3, r2
 8013156:	2203      	movs	r2, #3
 8013158:	701a      	strb	r2, [r3, #0]
  idx++;
 801315a:	7dfb      	ldrb	r3, [r7, #23]
 801315c:	3301      	adds	r3, #1
 801315e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013160:	e013      	b.n	801318a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8013162:	7dfb      	ldrb	r3, [r7, #23]
 8013164:	68ba      	ldr	r2, [r7, #8]
 8013166:	4413      	add	r3, r2
 8013168:	693a      	ldr	r2, [r7, #16]
 801316a:	7812      	ldrb	r2, [r2, #0]
 801316c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801316e:	693b      	ldr	r3, [r7, #16]
 8013170:	3301      	adds	r3, #1
 8013172:	613b      	str	r3, [r7, #16]
    idx++;
 8013174:	7dfb      	ldrb	r3, [r7, #23]
 8013176:	3301      	adds	r3, #1
 8013178:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801317a:	7dfb      	ldrb	r3, [r7, #23]
 801317c:	68ba      	ldr	r2, [r7, #8]
 801317e:	4413      	add	r3, r2
 8013180:	2200      	movs	r2, #0
 8013182:	701a      	strb	r2, [r3, #0]
    idx++;
 8013184:	7dfb      	ldrb	r3, [r7, #23]
 8013186:	3301      	adds	r3, #1
 8013188:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d1e7      	bne.n	8013162 <USBD_GetString+0x52>
 8013192:	e000      	b.n	8013196 <USBD_GetString+0x86>
    return;
 8013194:	bf00      	nop
  }
}
 8013196:	3718      	adds	r7, #24
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}

0801319c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801319c:	b480      	push	{r7}
 801319e:	b085      	sub	sp, #20
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80131a4:	2300      	movs	r3, #0
 80131a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80131ac:	e005      	b.n	80131ba <USBD_GetLen+0x1e>
  {
    len++;
 80131ae:	7bfb      	ldrb	r3, [r7, #15]
 80131b0:	3301      	adds	r3, #1
 80131b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80131b4:	68bb      	ldr	r3, [r7, #8]
 80131b6:	3301      	adds	r3, #1
 80131b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d1f5      	bne.n	80131ae <USBD_GetLen+0x12>
  }

  return len;
 80131c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3714      	adds	r7, #20
 80131c8:	46bd      	mov	sp, r7
 80131ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ce:	4770      	bx	lr

080131d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b084      	sub	sp, #16
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	60b9      	str	r1, [r7, #8]
 80131da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	2202      	movs	r2, #2
 80131e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	687a      	ldr	r2, [r7, #4]
 80131e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	687a      	ldr	r2, [r7, #4]
 80131ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	68ba      	ldr	r2, [r7, #8]
 80131f4:	2100      	movs	r1, #0
 80131f6:	68f8      	ldr	r0, [r7, #12]
 80131f8:	f001 fa8a 	bl	8014710 <USBD_LL_Transmit>

  return USBD_OK;
 80131fc:	2300      	movs	r3, #0
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3710      	adds	r7, #16
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}

08013206 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013206:	b580      	push	{r7, lr}
 8013208:	b084      	sub	sp, #16
 801320a:	af00      	add	r7, sp, #0
 801320c:	60f8      	str	r0, [r7, #12]
 801320e:	60b9      	str	r1, [r7, #8]
 8013210:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	68ba      	ldr	r2, [r7, #8]
 8013216:	2100      	movs	r1, #0
 8013218:	68f8      	ldr	r0, [r7, #12]
 801321a:	f001 fa79 	bl	8014710 <USBD_LL_Transmit>

  return USBD_OK;
 801321e:	2300      	movs	r3, #0
}
 8013220:	4618      	mov	r0, r3
 8013222:	3710      	adds	r7, #16
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}

08013228 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013228:	b580      	push	{r7, lr}
 801322a:	b084      	sub	sp, #16
 801322c:	af00      	add	r7, sp, #0
 801322e:	60f8      	str	r0, [r7, #12]
 8013230:	60b9      	str	r1, [r7, #8]
 8013232:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2203      	movs	r2, #3
 8013238:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	687a      	ldr	r2, [r7, #4]
 8013240:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	687a      	ldr	r2, [r7, #4]
 8013248:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	68ba      	ldr	r2, [r7, #8]
 8013250:	2100      	movs	r1, #0
 8013252:	68f8      	ldr	r0, [r7, #12]
 8013254:	f001 fa94 	bl	8014780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013258:	2300      	movs	r3, #0
}
 801325a:	4618      	mov	r0, r3
 801325c:	3710      	adds	r7, #16
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}

08013262 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013262:	b580      	push	{r7, lr}
 8013264:	b084      	sub	sp, #16
 8013266:	af00      	add	r7, sp, #0
 8013268:	60f8      	str	r0, [r7, #12]
 801326a:	60b9      	str	r1, [r7, #8]
 801326c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	68ba      	ldr	r2, [r7, #8]
 8013272:	2100      	movs	r1, #0
 8013274:	68f8      	ldr	r0, [r7, #12]
 8013276:	f001 fa83 	bl	8014780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801327a:	2300      	movs	r3, #0
}
 801327c:	4618      	mov	r0, r3
 801327e:	3710      	adds	r7, #16
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b082      	sub	sp, #8
 8013288:	af00      	add	r7, sp, #0
 801328a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2204      	movs	r2, #4
 8013290:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013294:	2300      	movs	r3, #0
 8013296:	2200      	movs	r2, #0
 8013298:	2100      	movs	r1, #0
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	f001 fa38 	bl	8014710 <USBD_LL_Transmit>

  return USBD_OK;
 80132a0:	2300      	movs	r3, #0
}
 80132a2:	4618      	mov	r0, r3
 80132a4:	3708      	adds	r7, #8
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bd80      	pop	{r7, pc}

080132aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80132aa:	b580      	push	{r7, lr}
 80132ac:	b082      	sub	sp, #8
 80132ae:	af00      	add	r7, sp, #0
 80132b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2205      	movs	r2, #5
 80132b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80132ba:	2300      	movs	r3, #0
 80132bc:	2200      	movs	r2, #0
 80132be:	2100      	movs	r1, #0
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f001 fa5d 	bl	8014780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80132c6:	2300      	movs	r3, #0
}
 80132c8:	4618      	mov	r0, r3
 80132ca:	3708      	adds	r7, #8
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}

080132d0 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b082      	sub	sp, #8
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f7f3 f893 	bl	8006404 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 80132de:	bf00      	nop
 80132e0:	3708      	adds	r7, #8
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}

080132e6 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 80132e6:	b580      	push	{r7, lr}
 80132e8:	b082      	sub	sp, #8
 80132ea:	af00      	add	r7, sp, #0
 80132ec:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 80132ee:	e002      	b.n	80132f6 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 80132f0:	2001      	movs	r0, #1
 80132f2:	f7ff ffed 	bl	80132d0 <SPIF_Delay>
  while (Handle->Lock)
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	7b1b      	ldrb	r3, [r3, #12]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d1f8      	bne.n	80132f0 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	2201      	movs	r2, #1
 8013302:	731a      	strb	r2, [r3, #12]
}
 8013304:	bf00      	nop
 8013306:	3708      	adds	r7, #8
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}

0801330c <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 801330c:	b480      	push	{r7}
 801330e:	b083      	sub	sp, #12
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	2200      	movs	r2, #0
 8013318:	731a      	strb	r2, [r3, #12]
}
 801331a:	bf00      	nop
 801331c:	370c      	adds	r7, #12
 801331e:	46bd      	mov	sp, r7
 8013320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013324:	4770      	bx	lr

08013326 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8013326:	b580      	push	{r7, lr}
 8013328:	b084      	sub	sp, #16
 801332a:	af00      	add	r7, sp, #0
 801332c:	6078      	str	r0, [r7, #4]
 801332e:	460b      	mov	r3, r1
 8013330:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	6858      	ldr	r0, [r3, #4]
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	691b      	ldr	r3, [r3, #16]
 801333a:	b29b      	uxth	r3, r3
 801333c:	78fa      	ldrb	r2, [r7, #3]
 801333e:	4619      	mov	r1, r3
 8013340:	f7f5 f83a 	bl	80083b8 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8013344:	2300      	movs	r3, #0
 8013346:	60fb      	str	r3, [r7, #12]
 8013348:	e002      	b.n	8013350 <SPIF_CsPin+0x2a>
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	3301      	adds	r3, #1
 801334e:	60fb      	str	r3, [r7, #12]
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	2b09      	cmp	r3, #9
 8013354:	ddf9      	ble.n	801334a <SPIF_CsPin+0x24>
}
 8013356:	bf00      	nop
 8013358:	bf00      	nop
 801335a:	3710      	adds	r7, #16
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}

08013360 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b086      	sub	sp, #24
 8013364:	af00      	add	r7, sp, #0
 8013366:	60f8      	str	r0, [r7, #12]
 8013368:	60b9      	str	r1, [r7, #8]
 801336a:	607a      	str	r2, [r7, #4]
 801336c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801336e:	2300      	movs	r3, #0
 8013370:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8013372:	f7f3 f83b 	bl	80063ec <HAL_GetTick>
 8013376:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_TransmitReceive_DMA(Handle->HSpi, Tx, Rx, Size) != HAL_OK)
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	6818      	ldr	r0, [r3, #0]
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	b29b      	uxth	r3, r3
 8013380:	687a      	ldr	r2, [r7, #4]
 8013382:	68b9      	ldr	r1, [r7, #8]
 8013384:	f7f8 feda 	bl	800c13c <HAL_SPI_TransmitReceive_DMA>
 8013388:	4603      	mov	r3, r0
 801338a:	2b00      	cmp	r3, #0
 801338c:	d11a      	bne.n	80133c4 <SPIF_TransmitReceive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 801338e:	2001      	movs	r0, #1
 8013390:	f7ff ff9e 	bl	80132d0 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8013394:	f7f3 f82a 	bl	80063ec <HAL_GetTick>
 8013398:	4602      	mov	r2, r0
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	1ad3      	subs	r3, r2, r3
 801339e:	6a3a      	ldr	r2, [r7, #32]
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d805      	bhi.n	80133b0 <SPIF_TransmitReceive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7f9 f84b 	bl	800c444 <HAL_SPI_DMAStop>
        break;
 80133ae:	e009      	b.n	80133c4 <SPIF_TransmitReceive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7f9 f9bf 	bl	800c738 <HAL_SPI_GetState>
 80133ba:	4603      	mov	r3, r0
 80133bc:	2b01      	cmp	r3, #1
 80133be:	d1e6      	bne.n	801338e <SPIF_TransmitReceive+0x2e>
      {
        retVal = true;
 80133c0:	2301      	movs	r3, #1
 80133c2:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 80133c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	3718      	adds	r7, #24
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}

080133ce <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 80133ce:	b580      	push	{r7, lr}
 80133d0:	b086      	sub	sp, #24
 80133d2:	af00      	add	r7, sp, #0
 80133d4:	60f8      	str	r0, [r7, #12]
 80133d6:	60b9      	str	r1, [r7, #8]
 80133d8:	607a      	str	r2, [r7, #4]
 80133da:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80133dc:	2300      	movs	r3, #0
 80133de:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 80133e0:	f7f3 f804 	bl	80063ec <HAL_GetTick>
 80133e4:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Transmit_DMA(Handle->HSpi, Tx, Size) != HAL_OK)
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	687a      	ldr	r2, [r7, #4]
 80133ec:	b292      	uxth	r2, r2
 80133ee:	68b9      	ldr	r1, [r7, #8]
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7f8 fc93 	bl	800bd1c <HAL_SPI_Transmit_DMA>
 80133f6:	4603      	mov	r3, r0
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d11a      	bne.n	8013432 <SPIF_Transmit+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 80133fc:	2001      	movs	r0, #1
 80133fe:	f7ff ff67 	bl	80132d0 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8013402:	f7f2 fff3 	bl	80063ec <HAL_GetTick>
 8013406:	4602      	mov	r2, r0
 8013408:	693b      	ldr	r3, [r7, #16]
 801340a:	1ad3      	subs	r3, r2, r3
 801340c:	683a      	ldr	r2, [r7, #0]
 801340e:	429a      	cmp	r2, r3
 8013410:	d805      	bhi.n	801341e <SPIF_Transmit+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	4618      	mov	r0, r3
 8013418:	f7f9 f814 	bl	800c444 <HAL_SPI_DMAStop>
        break;
 801341c:	e009      	b.n	8013432 <SPIF_Transmit+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	4618      	mov	r0, r3
 8013424:	f7f9 f988 	bl	800c738 <HAL_SPI_GetState>
 8013428:	4603      	mov	r3, r0
 801342a:	2b01      	cmp	r3, #1
 801342c:	d1e6      	bne.n	80133fc <SPIF_Transmit+0x2e>
      {
        retVal = true;
 801342e:	2301      	movs	r3, #1
 8013430:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8013432:	7dfb      	ldrb	r3, [r7, #23]
}
 8013434:	4618      	mov	r0, r3
 8013436:	3718      	adds	r7, #24
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}

0801343c <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b086      	sub	sp, #24
 8013440:	af00      	add	r7, sp, #0
 8013442:	60f8      	str	r0, [r7, #12]
 8013444:	60b9      	str	r1, [r7, #8]
 8013446:	607a      	str	r2, [r7, #4]
 8013448:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801344a:	2300      	movs	r3, #0
 801344c:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 801344e:	f7f2 ffcd 	bl	80063ec <HAL_GetTick>
 8013452:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Receive_DMA(Handle->HSpi, Rx, Size) != HAL_OK)
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	687a      	ldr	r2, [r7, #4]
 801345a:	b292      	uxth	r2, r2
 801345c:	68b9      	ldr	r1, [r7, #8]
 801345e:	4618      	mov	r0, r3
 8013460:	f7f8 fd4c 	bl	800befc <HAL_SPI_Receive_DMA>
 8013464:	4603      	mov	r3, r0
 8013466:	2b00      	cmp	r3, #0
 8013468:	d11a      	bne.n	80134a0 <SPIF_Receive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 801346a:	2001      	movs	r0, #1
 801346c:	f7ff ff30 	bl	80132d0 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8013470:	f7f2 ffbc 	bl	80063ec <HAL_GetTick>
 8013474:	4602      	mov	r2, r0
 8013476:	693b      	ldr	r3, [r7, #16]
 8013478:	1ad3      	subs	r3, r2, r3
 801347a:	683a      	ldr	r2, [r7, #0]
 801347c:	429a      	cmp	r2, r3
 801347e:	d805      	bhi.n	801348c <SPIF_Receive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	4618      	mov	r0, r3
 8013486:	f7f8 ffdd 	bl	800c444 <HAL_SPI_DMAStop>
        break;
 801348a:	e009      	b.n	80134a0 <SPIF_Receive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	4618      	mov	r0, r3
 8013492:	f7f9 f951 	bl	800c738 <HAL_SPI_GetState>
 8013496:	4603      	mov	r3, r0
 8013498:	2b01      	cmp	r3, #1
 801349a:	d1e6      	bne.n	801346a <SPIF_Receive+0x2e>
      {
        retVal = true;
 801349c:	2301      	movs	r3, #1
 801349e:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 80134a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3718      	adds	r7, #24
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}

080134aa <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 80134aa:	b580      	push	{r7, lr}
 80134ac:	b084      	sub	sp, #16
 80134ae:	af00      	add	r7, sp, #0
 80134b0:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 80134b2:	2301      	movs	r3, #1
 80134b4:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 80134b6:	2306      	movs	r3, #6
 80134b8:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 80134ba:	2100      	movs	r1, #0
 80134bc:	6878      	ldr	r0, [r7, #4]
 80134be:	f7ff ff32 	bl	8013326 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 80134c2:	f107 010c 	add.w	r1, r7, #12
 80134c6:	2364      	movs	r3, #100	; 0x64
 80134c8:	2201      	movs	r2, #1
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f7ff ff7f 	bl	80133ce <SPIF_Transmit>
 80134d0:	4603      	mov	r3, r0
 80134d2:	f083 0301 	eor.w	r3, r3, #1
 80134d6:	b2db      	uxtb	r3, r3
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d001      	beq.n	80134e0 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 80134dc:	2300      	movs	r3, #0
 80134de:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 80134e0:	2101      	movs	r1, #1
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f7ff ff1f 	bl	8013326 <SPIF_CsPin>
  return retVal;
 80134e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3710      	adds	r7, #16
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}

080134f2 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 80134f2:	b580      	push	{r7, lr}
 80134f4:	b084      	sub	sp, #16
 80134f6:	af00      	add	r7, sp, #0
 80134f8:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 80134fa:	2301      	movs	r3, #1
 80134fc:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 80134fe:	2304      	movs	r3, #4
 8013500:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8013502:	2100      	movs	r1, #0
 8013504:	6878      	ldr	r0, [r7, #4]
 8013506:	f7ff ff0e 	bl	8013326 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 801350a:	f107 010c 	add.w	r1, r7, #12
 801350e:	2364      	movs	r3, #100	; 0x64
 8013510:	2201      	movs	r2, #1
 8013512:	6878      	ldr	r0, [r7, #4]
 8013514:	f7ff ff5b 	bl	80133ce <SPIF_Transmit>
 8013518:	4603      	mov	r3, r0
 801351a:	f083 0301 	eor.w	r3, r3, #1
 801351e:	b2db      	uxtb	r3, r3
 8013520:	2b00      	cmp	r3, #0
 8013522:	d001      	beq.n	8013528 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8013524:	2300      	movs	r3, #0
 8013526:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8013528:	2101      	movs	r1, #1
 801352a:	6878      	ldr	r0, [r7, #4]
 801352c:	f7ff fefb 	bl	8013326 <SPIF_CsPin>
  return retVal;
 8013530:	7bfb      	ldrb	r3, [r7, #15]
}
 8013532:	4618      	mov	r0, r3
 8013534:	3710      	adds	r7, #16
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}

0801353a <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 801353a:	b580      	push	{r7, lr}
 801353c:	b086      	sub	sp, #24
 801353e:	af02      	add	r7, sp, #8
 8013540:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 8013542:	2300      	movs	r3, #0
 8013544:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 8013546:	f24a 5305 	movw	r3, #42245	; 0xa505
 801354a:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 801354c:	2100      	movs	r1, #0
 801354e:	6878      	ldr	r0, [r7, #4]
 8013550:	f7ff fee9 	bl	8013326 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 8013554:	f107 0208 	add.w	r2, r7, #8
 8013558:	f107 010c 	add.w	r1, r7, #12
 801355c:	2364      	movs	r3, #100	; 0x64
 801355e:	9300      	str	r3, [sp, #0]
 8013560:	2302      	movs	r3, #2
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f7ff fefc 	bl	8013360 <SPIF_TransmitReceive>
 8013568:	4603      	mov	r3, r0
 801356a:	2b00      	cmp	r3, #0
 801356c:	d001      	beq.n	8013572 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 801356e:	7a7b      	ldrb	r3, [r7, #9]
 8013570:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 8013572:	2101      	movs	r1, #1
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	f7ff fed6 	bl	8013326 <SPIF_CsPin>
  return retVal;
 801357a:	7bfb      	ldrb	r3, [r7, #15]
}
 801357c:	4618      	mov	r0, r3
 801357e:	3710      	adds	r7, #16
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}

08013584 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b084      	sub	sp, #16
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
 801358c:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 801358e:	2300      	movs	r3, #0
 8013590:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 8013592:	f7f2 ff2b 	bl	80063ec <HAL_GetTick>
 8013596:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 8013598:	2001      	movs	r0, #1
 801359a:	f7ff fe99 	bl	80132d0 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 801359e:	f7f2 ff25 	bl	80063ec <HAL_GetTick>
 80135a2:	4602      	mov	r2, r0
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	1ad3      	subs	r3, r2, r3
 80135a8:	683a      	ldr	r2, [r7, #0]
 80135aa:	429a      	cmp	r2, r3
 80135ac:	d90a      	bls.n	80135c4 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f7ff ffc3 	bl	801353a <SPIF_ReadReg1>
 80135b4:	4603      	mov	r3, r0
 80135b6:	f003 0301 	and.w	r3, r3, #1
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d1ec      	bne.n	8013598 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 80135be:	2301      	movs	r3, #1
 80135c0:	73fb      	strb	r3, [r7, #15]
      break;
 80135c2:	e000      	b.n	80135c6 <SPIF_WaitForWriting+0x42>
      break;
 80135c4:	bf00      	nop
    }
  }
  return retVal;
 80135c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80135c8:	4618      	mov	r0, r3
 80135ca:	3710      	adds	r7, #16
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bd80      	pop	{r7, pc}

080135d0 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b088      	sub	sp, #32
 80135d4:	af02      	add	r7, sp, #8
 80135d6:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 80135d8:	f06f 0360 	mvn.w	r3, #96	; 0x60
 80135dc:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 80135de:	2300      	movs	r3, #0
 80135e0:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 80135e2:	2100      	movs	r1, #0
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f7ff fe9e 	bl	8013326 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 80135ea:	f107 020c 	add.w	r2, r7, #12
 80135ee:	f107 0110 	add.w	r1, r7, #16
 80135f2:	2364      	movs	r3, #100	; 0x64
 80135f4:	9300      	str	r3, [sp, #0]
 80135f6:	2304      	movs	r3, #4
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f7ff feb1 	bl	8013360 <SPIF_TransmitReceive>
 80135fe:	4603      	mov	r3, r0
 8013600:	f083 0301 	eor.w	r3, r3, #1
 8013604:	b2db      	uxtb	r3, r3
 8013606:	2b00      	cmp	r3, #0
 8013608:	d004      	beq.n	8013614 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 801360a:	2101      	movs	r1, #1
 801360c:	6878      	ldr	r0, [r7, #4]
 801360e:	f7ff fe8a 	bl	8013326 <SPIF_CsPin>
      break;
 8013612:	e16f      	b.n	80138f4 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8013614:	2101      	movs	r1, #1
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f7ff fe85 	bl	8013326 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 801361c:	7b7a      	ldrb	r2, [r7, #13]
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 8013622:	7bba      	ldrb	r2, [r7, #14]
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8013628:	7bfa      	ldrb	r2, [r7, #15]
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	7a1b      	ldrb	r3, [r3, #8]
 8013632:	2bef      	cmp	r3, #239	; 0xef
 8013634:	f000 80f0 	beq.w	8013818 <SPIF_FindChip+0x248>
 8013638:	2bef      	cmp	r3, #239	; 0xef
 801363a:	f300 80e9 	bgt.w	8013810 <SPIF_FindChip+0x240>
 801363e:	2bc8      	cmp	r3, #200	; 0xc8
 8013640:	f300 80e6 	bgt.w	8013810 <SPIF_FindChip+0x240>
 8013644:	2b85      	cmp	r3, #133	; 0x85
 8013646:	da0c      	bge.n	8013662 <SPIF_FindChip+0x92>
 8013648:	2b62      	cmp	r3, #98	; 0x62
 801364a:	f000 80e7 	beq.w	801381c <SPIF_FindChip+0x24c>
 801364e:	2b62      	cmp	r3, #98	; 0x62
 8013650:	f300 80de 	bgt.w	8013810 <SPIF_FindChip+0x240>
 8013654:	2b20      	cmp	r3, #32
 8013656:	f300 80d9 	bgt.w	801380c <SPIF_FindChip+0x23c>
 801365a:	2b00      	cmp	r3, #0
 801365c:	f300 8090 	bgt.w	8013780 <SPIF_FindChip+0x1b0>
 8013660:	e0d6      	b.n	8013810 <SPIF_FindChip+0x240>
 8013662:	3b85      	subs	r3, #133	; 0x85
 8013664:	2b43      	cmp	r3, #67	; 0x43
 8013666:	f200 80d3 	bhi.w	8013810 <SPIF_FindChip+0x240>
 801366a:	a201      	add	r2, pc, #4	; (adr r2, 8013670 <SPIF_FindChip+0xa0>)
 801366c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013670:	08013821 	.word	0x08013821
 8013674:	08013811 	.word	0x08013811
 8013678:	08013811 	.word	0x08013811
 801367c:	08013811 	.word	0x08013811
 8013680:	08013821 	.word	0x08013821
 8013684:	08013811 	.word	0x08013811
 8013688:	08013811 	.word	0x08013811
 801368c:	08013821 	.word	0x08013821
 8013690:	08013811 	.word	0x08013811
 8013694:	08013811 	.word	0x08013811
 8013698:	08013811 	.word	0x08013811
 801369c:	08013811 	.word	0x08013811
 80136a0:	08013811 	.word	0x08013811
 80136a4:	08013811 	.word	0x08013811
 80136a8:	08013811 	.word	0x08013811
 80136ac:	08013811 	.word	0x08013811
 80136b0:	08013811 	.word	0x08013811
 80136b4:	08013811 	.word	0x08013811
 80136b8:	08013811 	.word	0x08013811
 80136bc:	08013811 	.word	0x08013811
 80136c0:	08013811 	.word	0x08013811
 80136c4:	08013811 	.word	0x08013811
 80136c8:	08013811 	.word	0x08013811
 80136cc:	08013811 	.word	0x08013811
 80136d0:	08013821 	.word	0x08013821
 80136d4:	08013811 	.word	0x08013811
 80136d8:	08013811 	.word	0x08013811
 80136dc:	08013811 	.word	0x08013811
 80136e0:	08013821 	.word	0x08013821
 80136e4:	08013811 	.word	0x08013811
 80136e8:	08013811 	.word	0x08013811
 80136ec:	08013811 	.word	0x08013811
 80136f0:	08013811 	.word	0x08013811
 80136f4:	08013811 	.word	0x08013811
 80136f8:	08013811 	.word	0x08013811
 80136fc:	08013811 	.word	0x08013811
 8013700:	08013811 	.word	0x08013811
 8013704:	08013811 	.word	0x08013811
 8013708:	08013811 	.word	0x08013811
 801370c:	08013811 	.word	0x08013811
 8013710:	08013821 	.word	0x08013821
 8013714:	08013811 	.word	0x08013811
 8013718:	08013811 	.word	0x08013811
 801371c:	08013811 	.word	0x08013811
 8013720:	08013811 	.word	0x08013811
 8013724:	08013811 	.word	0x08013811
 8013728:	08013811 	.word	0x08013811
 801372c:	08013811 	.word	0x08013811
 8013730:	08013811 	.word	0x08013811
 8013734:	08013811 	.word	0x08013811
 8013738:	08013811 	.word	0x08013811
 801373c:	08013811 	.word	0x08013811
 8013740:	08013811 	.word	0x08013811
 8013744:	08013811 	.word	0x08013811
 8013748:	08013811 	.word	0x08013811
 801374c:	08013811 	.word	0x08013811
 8013750:	08013811 	.word	0x08013811
 8013754:	08013811 	.word	0x08013811
 8013758:	08013821 	.word	0x08013821
 801375c:	08013811 	.word	0x08013811
 8013760:	08013811 	.word	0x08013811
 8013764:	08013821 	.word	0x08013821
 8013768:	08013811 	.word	0x08013811
 801376c:	08013811 	.word	0x08013811
 8013770:	08013811 	.word	0x08013811
 8013774:	08013811 	.word	0x08013811
 8013778:	08013811 	.word	0x08013811
 801377c:	08013821 	.word	0x08013821
 8013780:	3b01      	subs	r3, #1
 8013782:	2b1f      	cmp	r3, #31
 8013784:	d844      	bhi.n	8013810 <SPIF_FindChip+0x240>
 8013786:	a201      	add	r2, pc, #4	; (adr r2, 801378c <SPIF_FindChip+0x1bc>)
 8013788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801378c:	08013825 	.word	0x08013825
 8013790:	08013811 	.word	0x08013811
 8013794:	08013811 	.word	0x08013811
 8013798:	08013825 	.word	0x08013825
 801379c:	08013811 	.word	0x08013811
 80137a0:	08013811 	.word	0x08013811
 80137a4:	08013811 	.word	0x08013811
 80137a8:	08013811 	.word	0x08013811
 80137ac:	08013811 	.word	0x08013811
 80137b0:	08013811 	.word	0x08013811
 80137b4:	08013811 	.word	0x08013811
 80137b8:	08013811 	.word	0x08013811
 80137bc:	08013811 	.word	0x08013811
 80137c0:	08013811 	.word	0x08013811
 80137c4:	08013811 	.word	0x08013811
 80137c8:	08013811 	.word	0x08013811
 80137cc:	08013811 	.word	0x08013811
 80137d0:	08013811 	.word	0x08013811
 80137d4:	08013811 	.word	0x08013811
 80137d8:	08013811 	.word	0x08013811
 80137dc:	08013811 	.word	0x08013811
 80137e0:	08013811 	.word	0x08013811
 80137e4:	08013811 	.word	0x08013811
 80137e8:	08013811 	.word	0x08013811
 80137ec:	08013811 	.word	0x08013811
 80137f0:	08013811 	.word	0x08013811
 80137f4:	08013811 	.word	0x08013811
 80137f8:	08013825 	.word	0x08013825
 80137fc:	08013811 	.word	0x08013811
 8013800:	08013811 	.word	0x08013811
 8013804:	08013811 	.word	0x08013811
 8013808:	08013825 	.word	0x08013825
 801380c:	2b37      	cmp	r3, #55	; 0x37
 801380e:	d00b      	beq.n	8013828 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	2200      	movs	r2, #0
 8013814:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 8013816:	e008      	b.n	801382a <SPIF_FindChip+0x25a>
      break;
 8013818:	bf00      	nop
 801381a:	e006      	b.n	801382a <SPIF_FindChip+0x25a>
      break;
 801381c:	bf00      	nop
 801381e:	e004      	b.n	801382a <SPIF_FindChip+0x25a>
      break;
 8013820:	bf00      	nop
 8013822:	e002      	b.n	801382a <SPIF_FindChip+0x25a>
      break;
 8013824:	bf00      	nop
 8013826:	e000      	b.n	801382a <SPIF_FindChip+0x25a>
      break;
 8013828:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	7a5b      	ldrb	r3, [r3, #9]
 801382e:	3b11      	subs	r3, #17
 8013830:	2b0f      	cmp	r3, #15
 8013832:	d84e      	bhi.n	80138d2 <SPIF_FindChip+0x302>
 8013834:	a201      	add	r2, pc, #4	; (adr r2, 801383c <SPIF_FindChip+0x26c>)
 8013836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801383a:	bf00      	nop
 801383c:	0801387d 	.word	0x0801387d
 8013840:	08013885 	.word	0x08013885
 8013844:	0801388d 	.word	0x0801388d
 8013848:	08013895 	.word	0x08013895
 801384c:	0801389d 	.word	0x0801389d
 8013850:	080138a5 	.word	0x080138a5
 8013854:	080138ad 	.word	0x080138ad
 8013858:	080138b5 	.word	0x080138b5
 801385c:	080138bf 	.word	0x080138bf
 8013860:	080138d3 	.word	0x080138d3
 8013864:	080138d3 	.word	0x080138d3
 8013868:	080138d3 	.word	0x080138d3
 801386c:	080138d3 	.word	0x080138d3
 8013870:	080138d3 	.word	0x080138d3
 8013874:	080138d3 	.word	0x080138d3
 8013878:	080138c9 	.word	0x080138c9
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	2202      	movs	r2, #2
 8013880:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 8013882:	e02a      	b.n	80138da <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2204      	movs	r2, #4
 8013888:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 801388a:	e026      	b.n	80138da <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2208      	movs	r2, #8
 8013890:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 8013892:	e022      	b.n	80138da <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	2210      	movs	r2, #16
 8013898:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 801389a:	e01e      	b.n	80138da <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2220      	movs	r2, #32
 80138a0:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 80138a2:	e01a      	b.n	80138da <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2240      	movs	r2, #64	; 0x40
 80138a8:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 80138aa:	e016      	b.n	80138da <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2280      	movs	r2, #128	; 0x80
 80138b0:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 80138b2:	e012      	b.n	80138da <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80138ba:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 80138bc:	e00d      	b.n	80138da <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80138c4:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 80138c6:	e008      	b.n	80138da <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80138ce:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 80138d0:	e003      	b.n	80138da <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	2200      	movs	r2, #0
 80138d6:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 80138d8:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	69db      	ldr	r3, [r3, #28]
 80138de:	011a      	lsls	r2, r3, #4
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	699b      	ldr	r3, [r3, #24]
 80138e8:	031b      	lsls	r3, r3, #12
 80138ea:	0a1a      	lsrs	r2, r3, #8
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 80138f0:	2301      	movs	r3, #1
 80138f2:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 80138f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80138f6:	4618      	mov	r0, r3
 80138f8:	3718      	adds	r7, #24
 80138fa:	46bd      	mov	sp, r7
 80138fc:	bd80      	pop	{r7, pc}
 80138fe:	bf00      	nop

08013900 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b08a      	sub	sp, #40	; 0x28
 8013904:	af00      	add	r7, sp, #0
 8013906:	60f8      	str	r0, [r7, #12]
 8013908:	60b9      	str	r1, [r7, #8]
 801390a:	607a      	str	r2, [r7, #4]
 801390c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801390e:	2300      	movs	r3, #0
 8013910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8013914:	2300      	movs	r3, #0
 8013916:	623b      	str	r3, [r7, #32]
 8013918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801391a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801391e:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	695b      	ldr	r3, [r3, #20]
 8013924:	68ba      	ldr	r2, [r7, #8]
 8013926:	429a      	cmp	r2, r3
 8013928:	f080 8084 	bcs.w	8013a34 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 801392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801392e:	2bff      	cmp	r3, #255	; 0xff
 8013930:	f200 8082 	bhi.w	8013a38 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 8013934:	683a      	ldr	r2, [r7, #0]
 8013936:	69fb      	ldr	r3, [r7, #28]
 8013938:	429a      	cmp	r2, r3
 801393a:	d901      	bls.n	8013940 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	021b      	lsls	r3, r3, #8
 8013944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013946:	4413      	add	r3, r2
 8013948:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 801394a:	68f8      	ldr	r0, [r7, #12]
 801394c:	f7ff fdad 	bl	80134aa <SPIF_WriteEnable>
 8013950:	4603      	mov	r3, r0
 8013952:	f083 0301 	eor.w	r3, r3, #1
 8013956:	b2db      	uxtb	r3, r3
 8013958:	2b00      	cmp	r3, #0
 801395a:	d16f      	bne.n	8013a3c <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 801395c:	2100      	movs	r1, #0
 801395e:	68f8      	ldr	r0, [r7, #12]
 8013960:	f7ff fce1 	bl	8013326 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	69db      	ldr	r3, [r3, #28]
 8013968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801396c:	d322      	bcc.n	80139b4 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 801396e:	2312      	movs	r3, #18
 8013970:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 8013972:	6a3b      	ldr	r3, [r7, #32]
 8013974:	0e1b      	lsrs	r3, r3, #24
 8013976:	b2db      	uxtb	r3, r3
 8013978:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 801397a:	6a3b      	ldr	r3, [r7, #32]
 801397c:	0c1b      	lsrs	r3, r3, #16
 801397e:	b2db      	uxtb	r3, r3
 8013980:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 8013982:	6a3b      	ldr	r3, [r7, #32]
 8013984:	0a1b      	lsrs	r3, r3, #8
 8013986:	b2db      	uxtb	r3, r3
 8013988:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 801398a:	6a3b      	ldr	r3, [r7, #32]
 801398c:	b2db      	uxtb	r3, r3
 801398e:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8013990:	f107 0114 	add.w	r1, r7, #20
 8013994:	2364      	movs	r3, #100	; 0x64
 8013996:	2205      	movs	r2, #5
 8013998:	68f8      	ldr	r0, [r7, #12]
 801399a:	f7ff fd18 	bl	80133ce <SPIF_Transmit>
 801399e:	4603      	mov	r3, r0
 80139a0:	f083 0301 	eor.w	r3, r3, #1
 80139a4:	b2db      	uxtb	r3, r3
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d023      	beq.n	80139f2 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80139aa:	2101      	movs	r1, #1
 80139ac:	68f8      	ldr	r0, [r7, #12]
 80139ae:	f7ff fcba 	bl	8013326 <SPIF_CsPin>
        break;
 80139b2:	e044      	b.n	8013a3e <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 80139b4:	2302      	movs	r3, #2
 80139b6:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 80139b8:	6a3b      	ldr	r3, [r7, #32]
 80139ba:	0c1b      	lsrs	r3, r3, #16
 80139bc:	b2db      	uxtb	r3, r3
 80139be:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 80139c0:	6a3b      	ldr	r3, [r7, #32]
 80139c2:	0a1b      	lsrs	r3, r3, #8
 80139c4:	b2db      	uxtb	r3, r3
 80139c6:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 80139c8:	6a3b      	ldr	r3, [r7, #32]
 80139ca:	b2db      	uxtb	r3, r3
 80139cc:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80139ce:	f107 0114 	add.w	r1, r7, #20
 80139d2:	2364      	movs	r3, #100	; 0x64
 80139d4:	2204      	movs	r2, #4
 80139d6:	68f8      	ldr	r0, [r7, #12]
 80139d8:	f7ff fcf9 	bl	80133ce <SPIF_Transmit>
 80139dc:	4603      	mov	r3, r0
 80139de:	f083 0301 	eor.w	r3, r3, #1
 80139e2:	b2db      	uxtb	r3, r3
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d004      	beq.n	80139f2 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 80139e8:	2101      	movs	r1, #1
 80139ea:	68f8      	ldr	r0, [r7, #12]
 80139ec:	f7ff fc9b 	bl	8013326 <SPIF_CsPin>
        break;
 80139f0:	e025      	b.n	8013a3e <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 80139f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80139f6:	683a      	ldr	r2, [r7, #0]
 80139f8:	6879      	ldr	r1, [r7, #4]
 80139fa:	68f8      	ldr	r0, [r7, #12]
 80139fc:	f7ff fce7 	bl	80133ce <SPIF_Transmit>
 8013a00:	4603      	mov	r3, r0
 8013a02:	f083 0301 	eor.w	r3, r3, #1
 8013a06:	b2db      	uxtb	r3, r3
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d004      	beq.n	8013a16 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8013a0c:	2101      	movs	r1, #1
 8013a0e:	68f8      	ldr	r0, [r7, #12]
 8013a10:	f7ff fc89 	bl	8013326 <SPIF_CsPin>
      break;
 8013a14:	e013      	b.n	8013a3e <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8013a16:	2101      	movs	r1, #1
 8013a18:	68f8      	ldr	r0, [r7, #12]
 8013a1a:	f7ff fc84 	bl	8013326 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 8013a1e:	2164      	movs	r1, #100	; 0x64
 8013a20:	68f8      	ldr	r0, [r7, #12]
 8013a22:	f7ff fdaf 	bl	8013584 <SPIF_WaitForWriting>
 8013a26:	4603      	mov	r3, r0
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d008      	beq.n	8013a3e <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013a32:	e004      	b.n	8013a3e <SPIF_WriteFn+0x13e>
      break;
 8013a34:	bf00      	nop
 8013a36:	e002      	b.n	8013a3e <SPIF_WriteFn+0x13e>
      break;
 8013a38:	bf00      	nop
 8013a3a:	e000      	b.n	8013a3e <SPIF_WriteFn+0x13e>
      break;
 8013a3c:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8013a3e:	68f8      	ldr	r0, [r7, #12]
 8013a40:	f7ff fd57 	bl	80134f2 <SPIF_WriteDisable>
  return retVal;
 8013a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8013a48:	4618      	mov	r0, r3
 8013a4a:	3728      	adds	r7, #40	; 0x28
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}

08013a50 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b086      	sub	sp, #24
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	60f8      	str	r0, [r7, #12]
 8013a58:	60b9      	str	r1, [r7, #8]
 8013a5a:	607a      	str	r2, [r7, #4]
 8013a5c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8013a62:	2100      	movs	r1, #0
 8013a64:	68f8      	ldr	r0, [r7, #12]
 8013a66:	f7ff fc5e 	bl	8013326 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	69db      	ldr	r3, [r3, #28]
 8013a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a72:	d322      	bcc.n	8013aba <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8013a74:	2313      	movs	r3, #19
 8013a76:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8013a78:	68bb      	ldr	r3, [r7, #8]
 8013a7a:	0e1b      	lsrs	r3, r3, #24
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	0c1b      	lsrs	r3, r3, #16
 8013a84:	b2db      	uxtb	r3, r3
 8013a86:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	0a1b      	lsrs	r3, r3, #8
 8013a8c:	b2db      	uxtb	r3, r3
 8013a8e:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	b2db      	uxtb	r3, r3
 8013a94:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8013a96:	f107 0110 	add.w	r1, r7, #16
 8013a9a:	2364      	movs	r3, #100	; 0x64
 8013a9c:	2205      	movs	r2, #5
 8013a9e:	68f8      	ldr	r0, [r7, #12]
 8013aa0:	f7ff fc95 	bl	80133ce <SPIF_Transmit>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	f083 0301 	eor.w	r3, r3, #1
 8013aaa:	b2db      	uxtb	r3, r3
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d023      	beq.n	8013af8 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8013ab0:	2101      	movs	r1, #1
 8013ab2:	68f8      	ldr	r0, [r7, #12]
 8013ab4:	f7ff fc37 	bl	8013326 <SPIF_CsPin>
        break;
 8013ab8:	e036      	b.n	8013b28 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 8013aba:	2303      	movs	r3, #3
 8013abc:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	0c1b      	lsrs	r3, r3, #16
 8013ac2:	b2db      	uxtb	r3, r3
 8013ac4:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	0a1b      	lsrs	r3, r3, #8
 8013aca:	b2db      	uxtb	r3, r3
 8013acc:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 8013ace:	68bb      	ldr	r3, [r7, #8]
 8013ad0:	b2db      	uxtb	r3, r3
 8013ad2:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8013ad4:	f107 0110 	add.w	r1, r7, #16
 8013ad8:	2364      	movs	r3, #100	; 0x64
 8013ada:	2204      	movs	r2, #4
 8013adc:	68f8      	ldr	r0, [r7, #12]
 8013ade:	f7ff fc76 	bl	80133ce <SPIF_Transmit>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	f083 0301 	eor.w	r3, r3, #1
 8013ae8:	b2db      	uxtb	r3, r3
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d004      	beq.n	8013af8 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8013aee:	2101      	movs	r1, #1
 8013af0:	68f8      	ldr	r0, [r7, #12]
 8013af2:	f7ff fc18 	bl	8013326 <SPIF_CsPin>
        break;
 8013af6:	e017      	b.n	8013b28 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8013af8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8013afc:	683a      	ldr	r2, [r7, #0]
 8013afe:	6879      	ldr	r1, [r7, #4]
 8013b00:	68f8      	ldr	r0, [r7, #12]
 8013b02:	f7ff fc9b 	bl	801343c <SPIF_Receive>
 8013b06:	4603      	mov	r3, r0
 8013b08:	f083 0301 	eor.w	r3, r3, #1
 8013b0c:	b2db      	uxtb	r3, r3
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d004      	beq.n	8013b1c <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8013b12:	2101      	movs	r1, #1
 8013b14:	68f8      	ldr	r0, [r7, #12]
 8013b16:	f7ff fc06 	bl	8013326 <SPIF_CsPin>
      break;
 8013b1a:	e005      	b.n	8013b28 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8013b1c:	2101      	movs	r1, #1
 8013b1e:	68f8      	ldr	r0, [r7, #12]
 8013b20:	f7ff fc01 	bl	8013326 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8013b24:	2301      	movs	r3, #1
 8013b26:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8013b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	3718      	adds	r7, #24
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}

08013b32 <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 8013b32:	b580      	push	{r7, lr}
 8013b34:	b086      	sub	sp, #24
 8013b36:	af00      	add	r7, sp, #0
 8013b38:	60f8      	str	r0, [r7, #12]
 8013b3a:	60b9      	str	r1, [r7, #8]
 8013b3c:	607a      	str	r2, [r7, #4]
 8013b3e:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8013b40:	2300      	movs	r3, #0
 8013b42:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d03a      	beq.n	8013bc0 <SPIF_Init+0x8e>
 8013b4a:	68bb      	ldr	r3, [r7, #8]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d037      	beq.n	8013bc0 <SPIF_Init+0x8e>
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d034      	beq.n	8013bc0 <SPIF_Init+0x8e>
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	7a9b      	ldrb	r3, [r3, #10]
 8013b5a:	2b01      	cmp	r3, #1
 8013b5c:	d030      	beq.n	8013bc0 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 8013b5e:	2220      	movs	r2, #32
 8013b60:	2100      	movs	r1, #0
 8013b62:	68f8      	ldr	r0, [r7, #12]
 8013b64:	f002 fe41 	bl	80167ea <memset>
    Handle->HSpi = HSpi;
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	68ba      	ldr	r2, [r7, #8]
 8013b6c:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	687a      	ldr	r2, [r7, #4]
 8013b72:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8013b74:	887a      	ldrh	r2, [r7, #2]
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 8013b7a:	2101      	movs	r1, #1
 8013b7c:	68f8      	ldr	r0, [r7, #12]
 8013b7e:	f7ff fbd2 	bl	8013326 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 8013b82:	e002      	b.n	8013b8a <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8013b84:	2001      	movs	r0, #1
 8013b86:	f7ff fba3 	bl	80132d0 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 8013b8a:	f7f2 fc2f 	bl	80063ec <HAL_GetTick>
 8013b8e:	4603      	mov	r3, r0
 8013b90:	2b13      	cmp	r3, #19
 8013b92:	d9f7      	bls.n	8013b84 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8013b94:	68f8      	ldr	r0, [r7, #12]
 8013b96:	f7ff fcac 	bl	80134f2 <SPIF_WriteDisable>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	f083 0301 	eor.w	r3, r3, #1
 8013ba0:	b2db      	uxtb	r3, r3
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d10b      	bne.n	8013bbe <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8013ba6:	68f8      	ldr	r0, [r7, #12]
 8013ba8:	f7ff fd12 	bl	80135d0 <SPIF_FindChip>
 8013bac:	4603      	mov	r3, r0
 8013bae:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8013bb0:	7dfb      	ldrb	r3, [r7, #23]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d004      	beq.n	8013bc0 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	2201      	movs	r2, #1
 8013bba:	729a      	strb	r2, [r3, #10]
 8013bbc:	e000      	b.n	8013bc0 <SPIF_Init+0x8e>
      break;
 8013bbe:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8013bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	3718      	adds	r7, #24
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}

08013bca <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 8013bca:	b580      	push	{r7, lr}
 8013bcc:	b086      	sub	sp, #24
 8013bce:	af00      	add	r7, sp, #0
 8013bd0:	6078      	str	r0, [r7, #4]
 8013bd2:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	f7ff fb86 	bl	80132e6 <SPIF_Lock>
  bool retVal = false;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 8013bde:	683b      	ldr	r3, [r7, #0]
 8013be0:	031b      	lsls	r3, r3, #12
 8013be2:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	699b      	ldr	r3, [r3, #24]
 8013be8:	683a      	ldr	r2, [r7, #0]
 8013bea:	429a      	cmp	r2, r3
 8013bec:	d262      	bcs.n	8013cb4 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f7ff fc5b 	bl	80134aa <SPIF_WriteEnable>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	f083 0301 	eor.w	r3, r3, #1
 8013bfa:	b2db      	uxtb	r3, r3
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d15b      	bne.n	8013cb8 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8013c00:	2100      	movs	r1, #0
 8013c02:	6878      	ldr	r0, [r7, #4]
 8013c04:	f7ff fb8f 	bl	8013326 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	69db      	ldr	r3, [r3, #28]
 8013c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013c10:	d322      	bcc.n	8013c58 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8013c12:	2321      	movs	r3, #33	; 0x21
 8013c14:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	0e1b      	lsrs	r3, r3, #24
 8013c1a:	b2db      	uxtb	r3, r3
 8013c1c:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 8013c1e:	693b      	ldr	r3, [r7, #16]
 8013c20:	0c1b      	lsrs	r3, r3, #16
 8013c22:	b2db      	uxtb	r3, r3
 8013c24:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	0a1b      	lsrs	r3, r3, #8
 8013c2a:	b2db      	uxtb	r3, r3
 8013c2c:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 8013c2e:	693b      	ldr	r3, [r7, #16]
 8013c30:	b2db      	uxtb	r3, r3
 8013c32:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8013c34:	f107 0108 	add.w	r1, r7, #8
 8013c38:	2364      	movs	r3, #100	; 0x64
 8013c3a:	2205      	movs	r2, #5
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	f7ff fbc6 	bl	80133ce <SPIF_Transmit>
 8013c42:	4603      	mov	r3, r0
 8013c44:	f083 0301 	eor.w	r3, r3, #1
 8013c48:	b2db      	uxtb	r3, r3
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d023      	beq.n	8013c96 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8013c4e:	2101      	movs	r1, #1
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f7ff fb68 	bl	8013326 <SPIF_CsPin>
        break;
 8013c56:	e030      	b.n	8013cba <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 8013c58:	2320      	movs	r3, #32
 8013c5a:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 8013c5c:	693b      	ldr	r3, [r7, #16]
 8013c5e:	0c1b      	lsrs	r3, r3, #16
 8013c60:	b2db      	uxtb	r3, r3
 8013c62:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8013c64:	693b      	ldr	r3, [r7, #16]
 8013c66:	0a1b      	lsrs	r3, r3, #8
 8013c68:	b2db      	uxtb	r3, r3
 8013c6a:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 8013c6c:	693b      	ldr	r3, [r7, #16]
 8013c6e:	b2db      	uxtb	r3, r3
 8013c70:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8013c72:	f107 0108 	add.w	r1, r7, #8
 8013c76:	2364      	movs	r3, #100	; 0x64
 8013c78:	2204      	movs	r2, #4
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f7ff fba7 	bl	80133ce <SPIF_Transmit>
 8013c80:	4603      	mov	r3, r0
 8013c82:	f083 0301 	eor.w	r3, r3, #1
 8013c86:	b2db      	uxtb	r3, r3
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d004      	beq.n	8013c96 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 8013c8c:	2101      	movs	r1, #1
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f7ff fb49 	bl	8013326 <SPIF_CsPin>
        break;
 8013c94:	e011      	b.n	8013cba <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8013c96:	2101      	movs	r1, #1
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f7ff fb44 	bl	8013326 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 8013c9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f7ff fc6e 	bl	8013584 <SPIF_WaitForWriting>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d005      	beq.n	8013cba <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8013cae:	2301      	movs	r3, #1
 8013cb0:	75fb      	strb	r3, [r7, #23]
 8013cb2:	e002      	b.n	8013cba <SPIF_EraseSector+0xf0>
      break;
 8013cb4:	bf00      	nop
 8013cb6:	e000      	b.n	8013cba <SPIF_EraseSector+0xf0>
      break;
 8013cb8:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8013cba:	6878      	ldr	r0, [r7, #4]
 8013cbc:	f7ff fc19 	bl	80134f2 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8013cc0:	6878      	ldr	r0, [r7, #4]
 8013cc2:	f7ff fb23 	bl	801330c <SPIF_UnLock>
  return retVal;
 8013cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cc8:	4618      	mov	r0, r3
 8013cca:	3718      	adds	r7, #24
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}

08013cd0 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b088      	sub	sp, #32
 8013cd4:	af02      	add	r7, sp, #8
 8013cd6:	60f8      	str	r0, [r7, #12]
 8013cd8:	60b9      	str	r1, [r7, #8]
 8013cda:	607a      	str	r2, [r7, #4]
 8013cdc:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8013cde:	68f8      	ldr	r0, [r7, #12]
 8013ce0:	f7ff fb01 	bl	80132e6 <SPIF_Lock>
  bool retVal = false;
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8013ce8:	6a3b      	ldr	r3, [r7, #32]
 8013cea:	9300      	str	r3, [sp, #0]
 8013cec:	683b      	ldr	r3, [r7, #0]
 8013cee:	687a      	ldr	r2, [r7, #4]
 8013cf0:	68b9      	ldr	r1, [r7, #8]
 8013cf2:	68f8      	ldr	r0, [r7, #12]
 8013cf4:	f7ff fe04 	bl	8013900 <SPIF_WriteFn>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 8013cfc:	68f8      	ldr	r0, [r7, #12]
 8013cfe:	f7ff fb05 	bl	801330c <SPIF_UnLock>
  return retVal;
 8013d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3718      	adds	r7, #24
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}

08013d0c <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b088      	sub	sp, #32
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	60f8      	str	r0, [r7, #12]
 8013d14:	60b9      	str	r1, [r7, #8]
 8013d16:	607a      	str	r2, [r7, #4]
 8013d18:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8013d1a:	68f8      	ldr	r0, [r7, #12]
 8013d1c:	f7ff fae3 	bl	80132e6 <SPIF_Lock>
  bool retVal = false;
 8013d20:	2300      	movs	r3, #0
 8013d22:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	021b      	lsls	r3, r3, #8
 8013d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d2a:	4413      	add	r3, r2
 8013d2c:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 8013d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d30:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8013d34:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8013d36:	683a      	ldr	r2, [r7, #0]
 8013d38:	697b      	ldr	r3, [r7, #20]
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	d901      	bls.n	8013d42 <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	687a      	ldr	r2, [r7, #4]
 8013d46:	69b9      	ldr	r1, [r7, #24]
 8013d48:	68f8      	ldr	r0, [r7, #12]
 8013d4a:	f7ff fe81 	bl	8013a50 <SPIF_ReadFn>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8013d52:	68f8      	ldr	r0, [r7, #12]
 8013d54:	f7ff fada 	bl	801330c <SPIF_UnLock>
  return retVal;
 8013d58:	7ffb      	ldrb	r3, [r7, #31]
}
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	3720      	adds	r7, #32
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd80      	pop	{r7, pc}
	...

08013d64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013d68:	2200      	movs	r2, #0
 8013d6a:	4912      	ldr	r1, [pc, #72]	; (8013db4 <MX_USB_DEVICE_Init+0x50>)
 8013d6c:	4812      	ldr	r0, [pc, #72]	; (8013db8 <MX_USB_DEVICE_Init+0x54>)
 8013d6e:	f7fe f81f 	bl	8011db0 <USBD_Init>
 8013d72:	4603      	mov	r3, r0
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d001      	beq.n	8013d7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013d78:	f7ed fe8f 	bl	8001a9a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013d7c:	490f      	ldr	r1, [pc, #60]	; (8013dbc <MX_USB_DEVICE_Init+0x58>)
 8013d7e:	480e      	ldr	r0, [pc, #56]	; (8013db8 <MX_USB_DEVICE_Init+0x54>)
 8013d80:	f7fe f846 	bl	8011e10 <USBD_RegisterClass>
 8013d84:	4603      	mov	r3, r0
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d001      	beq.n	8013d8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013d8a:	f7ed fe86 	bl	8001a9a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013d8e:	490c      	ldr	r1, [pc, #48]	; (8013dc0 <MX_USB_DEVICE_Init+0x5c>)
 8013d90:	4809      	ldr	r0, [pc, #36]	; (8013db8 <MX_USB_DEVICE_Init+0x54>)
 8013d92:	f7fd ff3d 	bl	8011c10 <USBD_CDC_RegisterInterface>
 8013d96:	4603      	mov	r3, r0
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d001      	beq.n	8013da0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013d9c:	f7ed fe7d 	bl	8001a9a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013da0:	4805      	ldr	r0, [pc, #20]	; (8013db8 <MX_USB_DEVICE_Init+0x54>)
 8013da2:	f7fe f86b 	bl	8011e7c <USBD_Start>
 8013da6:	4603      	mov	r3, r0
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d001      	beq.n	8013db0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013dac:	f7ed fe75 	bl	8001a9a <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013db0:	bf00      	nop
 8013db2:	bd80      	pop	{r7, pc}
 8013db4:	200000d0 	.word	0x200000d0
 8013db8:	20001374 	.word	0x20001374
 8013dbc:	2000003c 	.word	0x2000003c
 8013dc0:	200000bc 	.word	0x200000bc

08013dc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013dc8:	2200      	movs	r2, #0
 8013dca:	4905      	ldr	r1, [pc, #20]	; (8013de0 <CDC_Init_FS+0x1c>)
 8013dcc:	4805      	ldr	r0, [pc, #20]	; (8013de4 <CDC_Init_FS+0x20>)
 8013dce:	f7fd ff39 	bl	8011c44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013dd2:	4905      	ldr	r1, [pc, #20]	; (8013de8 <CDC_Init_FS+0x24>)
 8013dd4:	4803      	ldr	r0, [pc, #12]	; (8013de4 <CDC_Init_FS+0x20>)
 8013dd6:	f7fd ff57 	bl	8011c88 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013dda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013ddc:	4618      	mov	r0, r3
 8013dde:	bd80      	pop	{r7, pc}
 8013de0:	20001a50 	.word	0x20001a50
 8013de4:	20001374 	.word	0x20001374
 8013de8:	20001650 	.word	0x20001650

08013dec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013dec:	b480      	push	{r7}
 8013dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013df0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	46bd      	mov	sp, r7
 8013df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfa:	4770      	bx	lr

08013dfc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013dfc:	b480      	push	{r7}
 8013dfe:	b083      	sub	sp, #12
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	4603      	mov	r3, r0
 8013e04:	6039      	str	r1, [r7, #0]
 8013e06:	71fb      	strb	r3, [r7, #7]
 8013e08:	4613      	mov	r3, r2
 8013e0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013e0c:	79fb      	ldrb	r3, [r7, #7]
 8013e0e:	2b23      	cmp	r3, #35	; 0x23
 8013e10:	d84a      	bhi.n	8013ea8 <CDC_Control_FS+0xac>
 8013e12:	a201      	add	r2, pc, #4	; (adr r2, 8013e18 <CDC_Control_FS+0x1c>)
 8013e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e18:	08013ea9 	.word	0x08013ea9
 8013e1c:	08013ea9 	.word	0x08013ea9
 8013e20:	08013ea9 	.word	0x08013ea9
 8013e24:	08013ea9 	.word	0x08013ea9
 8013e28:	08013ea9 	.word	0x08013ea9
 8013e2c:	08013ea9 	.word	0x08013ea9
 8013e30:	08013ea9 	.word	0x08013ea9
 8013e34:	08013ea9 	.word	0x08013ea9
 8013e38:	08013ea9 	.word	0x08013ea9
 8013e3c:	08013ea9 	.word	0x08013ea9
 8013e40:	08013ea9 	.word	0x08013ea9
 8013e44:	08013ea9 	.word	0x08013ea9
 8013e48:	08013ea9 	.word	0x08013ea9
 8013e4c:	08013ea9 	.word	0x08013ea9
 8013e50:	08013ea9 	.word	0x08013ea9
 8013e54:	08013ea9 	.word	0x08013ea9
 8013e58:	08013ea9 	.word	0x08013ea9
 8013e5c:	08013ea9 	.word	0x08013ea9
 8013e60:	08013ea9 	.word	0x08013ea9
 8013e64:	08013ea9 	.word	0x08013ea9
 8013e68:	08013ea9 	.word	0x08013ea9
 8013e6c:	08013ea9 	.word	0x08013ea9
 8013e70:	08013ea9 	.word	0x08013ea9
 8013e74:	08013ea9 	.word	0x08013ea9
 8013e78:	08013ea9 	.word	0x08013ea9
 8013e7c:	08013ea9 	.word	0x08013ea9
 8013e80:	08013ea9 	.word	0x08013ea9
 8013e84:	08013ea9 	.word	0x08013ea9
 8013e88:	08013ea9 	.word	0x08013ea9
 8013e8c:	08013ea9 	.word	0x08013ea9
 8013e90:	08013ea9 	.word	0x08013ea9
 8013e94:	08013ea9 	.word	0x08013ea9
 8013e98:	08013ea9 	.word	0x08013ea9
 8013e9c:	08013ea9 	.word	0x08013ea9
 8013ea0:	08013ea9 	.word	0x08013ea9
 8013ea4:	08013ea9 	.word	0x08013ea9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013ea8:	bf00      	nop
  }

  return (USBD_OK);
 8013eaa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	370c      	adds	r7, #12
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb6:	4770      	bx	lr

08013eb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b084      	sub	sp, #16
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
 8013ec0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013ec2:	6879      	ldr	r1, [r7, #4]
 8013ec4:	480f      	ldr	r0, [pc, #60]	; (8013f04 <CDC_Receive_FS+0x4c>)
 8013ec6:	f7fd fedf 	bl	8011c88 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013eca:	480e      	ldr	r0, [pc, #56]	; (8013f04 <CDC_Receive_FS+0x4c>)
 8013ecc:	f7fd ff3a 	bl	8011d44 <USBD_CDC_ReceivePacket>

  memset (usbbuffer, '\0', 64);  // clear the buffer
 8013ed0:	2240      	movs	r2, #64	; 0x40
 8013ed2:	2100      	movs	r1, #0
 8013ed4:	480c      	ldr	r0, [pc, #48]	; (8013f08 <CDC_Receive_FS+0x50>)
 8013ed6:	f002 fc88 	bl	80167ea <memset>
  uint8_t len = (uint8_t)*Len;
 8013eda:	683b      	ldr	r3, [r7, #0]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	73fb      	strb	r3, [r7, #15]
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 8013ee0:	7bfb      	ldrb	r3, [r7, #15]
 8013ee2:	461a      	mov	r2, r3
 8013ee4:	6879      	ldr	r1, [r7, #4]
 8013ee6:	4808      	ldr	r0, [pc, #32]	; (8013f08 <CDC_Receive_FS+0x50>)
 8013ee8:	f002 fd9b 	bl	8016a22 <memcpy>
  memset(Buf, '\0', len);
 8013eec:	7bfb      	ldrb	r3, [r7, #15]
 8013eee:	461a      	mov	r2, r3
 8013ef0:	2100      	movs	r1, #0
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	f002 fc79 	bl	80167ea <memset>





  return (USBD_OK);
 8013ef8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013efa:	4618      	mov	r0, r3
 8013efc:	3710      	adds	r7, #16
 8013efe:	46bd      	mov	sp, r7
 8013f00:	bd80      	pop	{r7, pc}
 8013f02:	bf00      	nop
 8013f04:	20001374 	.word	0x20001374
 8013f08:	20000a9c 	.word	0x20000a9c

08013f0c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b084      	sub	sp, #16
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	460b      	mov	r3, r1
 8013f16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013f18:	2300      	movs	r3, #0
 8013f1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013f1c:	4b0d      	ldr	r3, [pc, #52]	; (8013f54 <CDC_Transmit_FS+0x48>)
 8013f1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d001      	beq.n	8013f32 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013f2e:	2301      	movs	r3, #1
 8013f30:	e00b      	b.n	8013f4a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013f32:	887b      	ldrh	r3, [r7, #2]
 8013f34:	461a      	mov	r2, r3
 8013f36:	6879      	ldr	r1, [r7, #4]
 8013f38:	4806      	ldr	r0, [pc, #24]	; (8013f54 <CDC_Transmit_FS+0x48>)
 8013f3a:	f7fd fe83 	bl	8011c44 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013f3e:	4805      	ldr	r0, [pc, #20]	; (8013f54 <CDC_Transmit_FS+0x48>)
 8013f40:	f7fd fec0 	bl	8011cc4 <USBD_CDC_TransmitPacket>
 8013f44:	4603      	mov	r3, r0
 8013f46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	3710      	adds	r7, #16
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}
 8013f52:	bf00      	nop
 8013f54:	20001374 	.word	0x20001374

08013f58 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013f58:	b480      	push	{r7}
 8013f5a:	b087      	sub	sp, #28
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	60f8      	str	r0, [r7, #12]
 8013f60:	60b9      	str	r1, [r7, #8]
 8013f62:	4613      	mov	r3, r2
 8013f64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013f66:	2300      	movs	r3, #0
 8013f68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013f6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	371c      	adds	r7, #28
 8013f72:	46bd      	mov	sp, r7
 8013f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f78:	4770      	bx	lr
	...

08013f7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013f7c:	b480      	push	{r7}
 8013f7e:	b083      	sub	sp, #12
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	4603      	mov	r3, r0
 8013f84:	6039      	str	r1, [r7, #0]
 8013f86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013f88:	683b      	ldr	r3, [r7, #0]
 8013f8a:	2212      	movs	r2, #18
 8013f8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013f8e:	4b03      	ldr	r3, [pc, #12]	; (8013f9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8013f90:	4618      	mov	r0, r3
 8013f92:	370c      	adds	r7, #12
 8013f94:	46bd      	mov	sp, r7
 8013f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9a:	4770      	bx	lr
 8013f9c:	200000f0 	.word	0x200000f0

08013fa0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013fa0:	b480      	push	{r7}
 8013fa2:	b083      	sub	sp, #12
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	6039      	str	r1, [r7, #0]
 8013faa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	2204      	movs	r2, #4
 8013fb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013fb2:	4b03      	ldr	r3, [pc, #12]	; (8013fc0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	370c      	adds	r7, #12
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fbe:	4770      	bx	lr
 8013fc0:	20000110 	.word	0x20000110

08013fc4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b082      	sub	sp, #8
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	4603      	mov	r3, r0
 8013fcc:	6039      	str	r1, [r7, #0]
 8013fce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013fd0:	79fb      	ldrb	r3, [r7, #7]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d105      	bne.n	8013fe2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013fd6:	683a      	ldr	r2, [r7, #0]
 8013fd8:	4907      	ldr	r1, [pc, #28]	; (8013ff8 <USBD_FS_ProductStrDescriptor+0x34>)
 8013fda:	4808      	ldr	r0, [pc, #32]	; (8013ffc <USBD_FS_ProductStrDescriptor+0x38>)
 8013fdc:	f7ff f898 	bl	8013110 <USBD_GetString>
 8013fe0:	e004      	b.n	8013fec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013fe2:	683a      	ldr	r2, [r7, #0]
 8013fe4:	4904      	ldr	r1, [pc, #16]	; (8013ff8 <USBD_FS_ProductStrDescriptor+0x34>)
 8013fe6:	4805      	ldr	r0, [pc, #20]	; (8013ffc <USBD_FS_ProductStrDescriptor+0x38>)
 8013fe8:	f7ff f892 	bl	8013110 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013fec:	4b02      	ldr	r3, [pc, #8]	; (8013ff8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3708      	adds	r7, #8
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
 8013ff6:	bf00      	nop
 8013ff8:	20001e50 	.word	0x20001e50
 8013ffc:	0801b0ac 	.word	0x0801b0ac

08014000 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b082      	sub	sp, #8
 8014004:	af00      	add	r7, sp, #0
 8014006:	4603      	mov	r3, r0
 8014008:	6039      	str	r1, [r7, #0]
 801400a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801400c:	683a      	ldr	r2, [r7, #0]
 801400e:	4904      	ldr	r1, [pc, #16]	; (8014020 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014010:	4804      	ldr	r0, [pc, #16]	; (8014024 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014012:	f7ff f87d 	bl	8013110 <USBD_GetString>
  return USBD_StrDesc;
 8014016:	4b02      	ldr	r3, [pc, #8]	; (8014020 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014018:	4618      	mov	r0, r3
 801401a:	3708      	adds	r7, #8
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}
 8014020:	20001e50 	.word	0x20001e50
 8014024:	0801b0b8 	.word	0x0801b0b8

08014028 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b082      	sub	sp, #8
 801402c:	af00      	add	r7, sp, #0
 801402e:	4603      	mov	r3, r0
 8014030:	6039      	str	r1, [r7, #0]
 8014032:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014034:	683b      	ldr	r3, [r7, #0]
 8014036:	221a      	movs	r2, #26
 8014038:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801403a:	f000 f855 	bl	80140e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801403e:	4b02      	ldr	r3, [pc, #8]	; (8014048 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014040:	4618      	mov	r0, r3
 8014042:	3708      	adds	r7, #8
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}
 8014048:	20000114 	.word	0x20000114

0801404c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b082      	sub	sp, #8
 8014050:	af00      	add	r7, sp, #0
 8014052:	4603      	mov	r3, r0
 8014054:	6039      	str	r1, [r7, #0]
 8014056:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014058:	79fb      	ldrb	r3, [r7, #7]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d105      	bne.n	801406a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801405e:	683a      	ldr	r2, [r7, #0]
 8014060:	4907      	ldr	r1, [pc, #28]	; (8014080 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014062:	4808      	ldr	r0, [pc, #32]	; (8014084 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014064:	f7ff f854 	bl	8013110 <USBD_GetString>
 8014068:	e004      	b.n	8014074 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801406a:	683a      	ldr	r2, [r7, #0]
 801406c:	4904      	ldr	r1, [pc, #16]	; (8014080 <USBD_FS_ConfigStrDescriptor+0x34>)
 801406e:	4805      	ldr	r0, [pc, #20]	; (8014084 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014070:	f7ff f84e 	bl	8013110 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014074:	4b02      	ldr	r3, [pc, #8]	; (8014080 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014076:	4618      	mov	r0, r3
 8014078:	3708      	adds	r7, #8
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}
 801407e:	bf00      	nop
 8014080:	20001e50 	.word	0x20001e50
 8014084:	0801b0cc 	.word	0x0801b0cc

08014088 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b082      	sub	sp, #8
 801408c:	af00      	add	r7, sp, #0
 801408e:	4603      	mov	r3, r0
 8014090:	6039      	str	r1, [r7, #0]
 8014092:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014094:	79fb      	ldrb	r3, [r7, #7]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d105      	bne.n	80140a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801409a:	683a      	ldr	r2, [r7, #0]
 801409c:	4907      	ldr	r1, [pc, #28]	; (80140bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801409e:	4808      	ldr	r0, [pc, #32]	; (80140c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80140a0:	f7ff f836 	bl	8013110 <USBD_GetString>
 80140a4:	e004      	b.n	80140b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80140a6:	683a      	ldr	r2, [r7, #0]
 80140a8:	4904      	ldr	r1, [pc, #16]	; (80140bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80140aa:	4805      	ldr	r0, [pc, #20]	; (80140c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80140ac:	f7ff f830 	bl	8013110 <USBD_GetString>
  }
  return USBD_StrDesc;
 80140b0:	4b02      	ldr	r3, [pc, #8]	; (80140bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80140b2:	4618      	mov	r0, r3
 80140b4:	3708      	adds	r7, #8
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}
 80140ba:	bf00      	nop
 80140bc:	20001e50 	.word	0x20001e50
 80140c0:	0801b0d8 	.word	0x0801b0d8

080140c4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80140c4:	b480      	push	{r7}
 80140c6:	b083      	sub	sp, #12
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	4603      	mov	r3, r0
 80140cc:	6039      	str	r1, [r7, #0]
 80140ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	220c      	movs	r2, #12
 80140d4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80140d6:	4b03      	ldr	r3, [pc, #12]	; (80140e4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80140d8:	4618      	mov	r0, r3
 80140da:	370c      	adds	r7, #12
 80140dc:	46bd      	mov	sp, r7
 80140de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e2:	4770      	bx	lr
 80140e4:	20000104 	.word	0x20000104

080140e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b084      	sub	sp, #16
 80140ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80140ee:	4b0f      	ldr	r3, [pc, #60]	; (801412c <Get_SerialNum+0x44>)
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80140f4:	4b0e      	ldr	r3, [pc, #56]	; (8014130 <Get_SerialNum+0x48>)
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80140fa:	4b0e      	ldr	r3, [pc, #56]	; (8014134 <Get_SerialNum+0x4c>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014100:	68fa      	ldr	r2, [r7, #12]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	4413      	add	r3, r2
 8014106:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d009      	beq.n	8014122 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801410e:	2208      	movs	r2, #8
 8014110:	4909      	ldr	r1, [pc, #36]	; (8014138 <Get_SerialNum+0x50>)
 8014112:	68f8      	ldr	r0, [r7, #12]
 8014114:	f000 f814 	bl	8014140 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014118:	2204      	movs	r2, #4
 801411a:	4908      	ldr	r1, [pc, #32]	; (801413c <Get_SerialNum+0x54>)
 801411c:	68b8      	ldr	r0, [r7, #8]
 801411e:	f000 f80f 	bl	8014140 <IntToUnicode>
  }
}
 8014122:	bf00      	nop
 8014124:	3710      	adds	r7, #16
 8014126:	46bd      	mov	sp, r7
 8014128:	bd80      	pop	{r7, pc}
 801412a:	bf00      	nop
 801412c:	1fff7590 	.word	0x1fff7590
 8014130:	1fff7594 	.word	0x1fff7594
 8014134:	1fff7598 	.word	0x1fff7598
 8014138:	20000116 	.word	0x20000116
 801413c:	20000126 	.word	0x20000126

08014140 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014140:	b480      	push	{r7}
 8014142:	b087      	sub	sp, #28
 8014144:	af00      	add	r7, sp, #0
 8014146:	60f8      	str	r0, [r7, #12]
 8014148:	60b9      	str	r1, [r7, #8]
 801414a:	4613      	mov	r3, r2
 801414c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801414e:	2300      	movs	r3, #0
 8014150:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014152:	2300      	movs	r3, #0
 8014154:	75fb      	strb	r3, [r7, #23]
 8014156:	e027      	b.n	80141a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	0f1b      	lsrs	r3, r3, #28
 801415c:	2b09      	cmp	r3, #9
 801415e:	d80b      	bhi.n	8014178 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	0f1b      	lsrs	r3, r3, #28
 8014164:	b2da      	uxtb	r2, r3
 8014166:	7dfb      	ldrb	r3, [r7, #23]
 8014168:	005b      	lsls	r3, r3, #1
 801416a:	4619      	mov	r1, r3
 801416c:	68bb      	ldr	r3, [r7, #8]
 801416e:	440b      	add	r3, r1
 8014170:	3230      	adds	r2, #48	; 0x30
 8014172:	b2d2      	uxtb	r2, r2
 8014174:	701a      	strb	r2, [r3, #0]
 8014176:	e00a      	b.n	801418e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	0f1b      	lsrs	r3, r3, #28
 801417c:	b2da      	uxtb	r2, r3
 801417e:	7dfb      	ldrb	r3, [r7, #23]
 8014180:	005b      	lsls	r3, r3, #1
 8014182:	4619      	mov	r1, r3
 8014184:	68bb      	ldr	r3, [r7, #8]
 8014186:	440b      	add	r3, r1
 8014188:	3237      	adds	r2, #55	; 0x37
 801418a:	b2d2      	uxtb	r2, r2
 801418c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	011b      	lsls	r3, r3, #4
 8014192:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014194:	7dfb      	ldrb	r3, [r7, #23]
 8014196:	005b      	lsls	r3, r3, #1
 8014198:	3301      	adds	r3, #1
 801419a:	68ba      	ldr	r2, [r7, #8]
 801419c:	4413      	add	r3, r2
 801419e:	2200      	movs	r2, #0
 80141a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80141a2:	7dfb      	ldrb	r3, [r7, #23]
 80141a4:	3301      	adds	r3, #1
 80141a6:	75fb      	strb	r3, [r7, #23]
 80141a8:	7dfa      	ldrb	r2, [r7, #23]
 80141aa:	79fb      	ldrb	r3, [r7, #7]
 80141ac:	429a      	cmp	r2, r3
 80141ae:	d3d3      	bcc.n	8014158 <IntToUnicode+0x18>
  }
}
 80141b0:	bf00      	nop
 80141b2:	bf00      	nop
 80141b4:	371c      	adds	r7, #28
 80141b6:	46bd      	mov	sp, r7
 80141b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141bc:	4770      	bx	lr
	...

080141c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b084      	sub	sp, #16
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	4a0d      	ldr	r2, [pc, #52]	; (8014204 <HAL_PCD_MspInit+0x44>)
 80141ce:	4293      	cmp	r3, r2
 80141d0:	d113      	bne.n	80141fa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80141d2:	4b0d      	ldr	r3, [pc, #52]	; (8014208 <HAL_PCD_MspInit+0x48>)
 80141d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141d6:	4a0c      	ldr	r2, [pc, #48]	; (8014208 <HAL_PCD_MspInit+0x48>)
 80141d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80141dc:	6593      	str	r3, [r2, #88]	; 0x58
 80141de:	4b0a      	ldr	r3, [pc, #40]	; (8014208 <HAL_PCD_MspInit+0x48>)
 80141e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80141e6:	60fb      	str	r3, [r7, #12]
 80141e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80141ea:	2200      	movs	r2, #0
 80141ec:	2100      	movs	r1, #0
 80141ee:	2043      	movs	r0, #67	; 0x43
 80141f0:	f7f3 fca7 	bl	8007b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80141f4:	2043      	movs	r0, #67	; 0x43
 80141f6:	f7f3 fcc0 	bl	8007b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80141fa:	bf00      	nop
 80141fc:	3710      	adds	r7, #16
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}
 8014202:	bf00      	nop
 8014204:	40006800 	.word	0x40006800
 8014208:	40021000 	.word	0x40021000

0801420c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b082      	sub	sp, #8
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8d3 22f4 	ldr.w	r2, [r3, #756]	; 0x2f4
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8014220:	4619      	mov	r1, r3
 8014222:	4610      	mov	r0, r2
 8014224:	f7fd fe77 	bl	8011f16 <USBD_LL_SetupStage>
}
 8014228:	bf00      	nop
 801422a:	3708      	adds	r7, #8
 801422c:	46bd      	mov	sp, r7
 801422e:	bd80      	pop	{r7, pc}

08014230 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b082      	sub	sp, #8
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
 8014238:	460b      	mov	r3, r1
 801423a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8014242:	78fa      	ldrb	r2, [r7, #3]
 8014244:	6879      	ldr	r1, [r7, #4]
 8014246:	4613      	mov	r3, r2
 8014248:	009b      	lsls	r3, r3, #2
 801424a:	4413      	add	r3, r2
 801424c:	00db      	lsls	r3, r3, #3
 801424e:	440b      	add	r3, r1
 8014250:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8014254:	681a      	ldr	r2, [r3, #0]
 8014256:	78fb      	ldrb	r3, [r7, #3]
 8014258:	4619      	mov	r1, r3
 801425a:	f7fd feb1 	bl	8011fc0 <USBD_LL_DataOutStage>
}
 801425e:	bf00      	nop
 8014260:	3708      	adds	r7, #8
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}

08014266 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014266:	b580      	push	{r7, lr}
 8014268:	b082      	sub	sp, #8
 801426a:	af00      	add	r7, sp, #0
 801426c:	6078      	str	r0, [r7, #4]
 801426e:	460b      	mov	r3, r1
 8014270:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	f8d3 02f4 	ldr.w	r0, [r3, #756]	; 0x2f4
 8014278:	78fa      	ldrb	r2, [r7, #3]
 801427a:	6879      	ldr	r1, [r7, #4]
 801427c:	4613      	mov	r3, r2
 801427e:	009b      	lsls	r3, r3, #2
 8014280:	4413      	add	r3, r2
 8014282:	00db      	lsls	r3, r3, #3
 8014284:	440b      	add	r3, r1
 8014286:	333c      	adds	r3, #60	; 0x3c
 8014288:	681a      	ldr	r2, [r3, #0]
 801428a:	78fb      	ldrb	r3, [r7, #3]
 801428c:	4619      	mov	r1, r3
 801428e:	f7fd ff4a 	bl	8012126 <USBD_LL_DataInStage>
}
 8014292:	bf00      	nop
 8014294:	3708      	adds	r7, #8
 8014296:	46bd      	mov	sp, r7
 8014298:	bd80      	pop	{r7, pc}

0801429a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801429a:	b580      	push	{r7, lr}
 801429c:	b082      	sub	sp, #8
 801429e:	af00      	add	r7, sp, #0
 80142a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80142a8:	4618      	mov	r0, r3
 80142aa:	f7fe f884 	bl	80123b6 <USBD_LL_SOF>
}
 80142ae:	bf00      	nop
 80142b0:	3708      	adds	r7, #8
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}

080142b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80142b6:	b580      	push	{r7, lr}
 80142b8:	b084      	sub	sp, #16
 80142ba:	af00      	add	r7, sp, #0
 80142bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80142be:	2301      	movs	r3, #1
 80142c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	689b      	ldr	r3, [r3, #8]
 80142c6:	2b02      	cmp	r3, #2
 80142c8:	d001      	beq.n	80142ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80142ca:	f7ed fbe6 	bl	8001a9a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80142d4:	7bfa      	ldrb	r2, [r7, #15]
 80142d6:	4611      	mov	r1, r2
 80142d8:	4618      	mov	r0, r3
 80142da:	f7fe f828 	bl	801232e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7fd ffd0 	bl	801228a <USBD_LL_Reset>
}
 80142ea:	bf00      	nop
 80142ec:	3710      	adds	r7, #16
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}
	...

080142f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b082      	sub	sp, #8
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 8014302:	4618      	mov	r0, r3
 8014304:	f7fe f823 	bl	801234e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	699b      	ldr	r3, [r3, #24]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d005      	beq.n	801431c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014310:	4b04      	ldr	r3, [pc, #16]	; (8014324 <HAL_PCD_SuspendCallback+0x30>)
 8014312:	691b      	ldr	r3, [r3, #16]
 8014314:	4a03      	ldr	r2, [pc, #12]	; (8014324 <HAL_PCD_SuspendCallback+0x30>)
 8014316:	f043 0306 	orr.w	r3, r3, #6
 801431a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801431c:	bf00      	nop
 801431e:	3708      	adds	r7, #8
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}
 8014324:	e000ed00 	.word	0xe000ed00

08014328 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b082      	sub	sp, #8
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	699b      	ldr	r3, [r3, #24]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d007      	beq.n	8014348 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014338:	4b08      	ldr	r3, [pc, #32]	; (801435c <HAL_PCD_ResumeCallback+0x34>)
 801433a:	691b      	ldr	r3, [r3, #16]
 801433c:	4a07      	ldr	r2, [pc, #28]	; (801435c <HAL_PCD_ResumeCallback+0x34>)
 801433e:	f023 0306 	bic.w	r3, r3, #6
 8014342:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014344:	f000 fab6 	bl	80148b4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801434e:	4618      	mov	r0, r3
 8014350:	f7fe f819 	bl	8012386 <USBD_LL_Resume>
}
 8014354:	bf00      	nop
 8014356:	3708      	adds	r7, #8
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}
 801435c:	e000ed00 	.word	0xe000ed00

08014360 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8014368:	f7f6 fb04 	bl	800a974 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801436c:	4a2b      	ldr	r2, [pc, #172]	; (801441c <USBD_LL_Init+0xbc>)
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	f8c2 32f4 	str.w	r3, [r2, #756]	; 0x2f4
  pdev->pData = &hpcd_USB_FS;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	4a29      	ldr	r2, [pc, #164]	; (801441c <USBD_LL_Init+0xbc>)
 8014378:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_FS.Instance = USB;
 801437c:	4b27      	ldr	r3, [pc, #156]	; (801441c <USBD_LL_Init+0xbc>)
 801437e:	4a28      	ldr	r2, [pc, #160]	; (8014420 <USBD_LL_Init+0xc0>)
 8014380:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014382:	4b26      	ldr	r3, [pc, #152]	; (801441c <USBD_LL_Init+0xbc>)
 8014384:	2208      	movs	r2, #8
 8014386:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014388:	4b24      	ldr	r3, [pc, #144]	; (801441c <USBD_LL_Init+0xbc>)
 801438a:	2202      	movs	r2, #2
 801438c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801438e:	4b23      	ldr	r3, [pc, #140]	; (801441c <USBD_LL_Init+0xbc>)
 8014390:	2202      	movs	r2, #2
 8014392:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8014394:	4b21      	ldr	r3, [pc, #132]	; (801441c <USBD_LL_Init+0xbc>)
 8014396:	2200      	movs	r2, #0
 8014398:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801439a:	4b20      	ldr	r3, [pc, #128]	; (801441c <USBD_LL_Init+0xbc>)
 801439c:	2200      	movs	r2, #0
 801439e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80143a0:	4b1e      	ldr	r3, [pc, #120]	; (801441c <USBD_LL_Init+0xbc>)
 80143a2:	2200      	movs	r2, #0
 80143a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80143a6:	4b1d      	ldr	r3, [pc, #116]	; (801441c <USBD_LL_Init+0xbc>)
 80143a8:	2200      	movs	r2, #0
 80143aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80143ac:	481b      	ldr	r0, [pc, #108]	; (801441c <USBD_LL_Init+0xbc>)
 80143ae:	f7f4 fcff 	bl	8008db0 <HAL_PCD_Init>
 80143b2:	4603      	mov	r3, r0
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d001      	beq.n	80143bc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80143b8:	f7ed fb6f 	bl	8001a9a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80143c2:	2318      	movs	r3, #24
 80143c4:	2200      	movs	r2, #0
 80143c6:	2100      	movs	r1, #0
 80143c8:	f7f6 fa03 	bl	800a7d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80143d2:	2358      	movs	r3, #88	; 0x58
 80143d4:	2200      	movs	r2, #0
 80143d6:	2180      	movs	r1, #128	; 0x80
 80143d8:	f7f6 f9fb 	bl	800a7d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80143e2:	23c0      	movs	r3, #192	; 0xc0
 80143e4:	2200      	movs	r2, #0
 80143e6:	2181      	movs	r1, #129	; 0x81
 80143e8:	f7f6 f9f3 	bl	800a7d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80143f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80143f6:	2200      	movs	r2, #0
 80143f8:	2101      	movs	r1, #1
 80143fa:	f7f6 f9ea 	bl	800a7d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8014404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014408:	2200      	movs	r2, #0
 801440a:	2182      	movs	r1, #130	; 0x82
 801440c:	f7f6 f9e1 	bl	800a7d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8014410:	2300      	movs	r3, #0
}
 8014412:	4618      	mov	r0, r3
 8014414:	3708      	adds	r7, #8
 8014416:	46bd      	mov	sp, r7
 8014418:	bd80      	pop	{r7, pc}
 801441a:	bf00      	nop
 801441c:	20002050 	.word	0x20002050
 8014420:	40006800 	.word	0x40006800

08014424 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014424:	b580      	push	{r7, lr}
 8014426:	b084      	sub	sp, #16
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801442c:	2300      	movs	r3, #0
 801442e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014430:	2300      	movs	r3, #0
 8014432:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801443a:	4618      	mov	r0, r3
 801443c:	f7f4 fdbe 	bl	8008fbc <HAL_PCD_Start>
 8014440:	4603      	mov	r3, r0
 8014442:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014444:	7bbb      	ldrb	r3, [r7, #14]
 8014446:	2b03      	cmp	r3, #3
 8014448:	d816      	bhi.n	8014478 <USBD_LL_Start+0x54>
 801444a:	a201      	add	r2, pc, #4	; (adr r2, 8014450 <USBD_LL_Start+0x2c>)
 801444c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014450:	08014461 	.word	0x08014461
 8014454:	08014467 	.word	0x08014467
 8014458:	0801446d 	.word	0x0801446d
 801445c:	08014473 	.word	0x08014473
    case HAL_OK :
      usb_status = USBD_OK;
 8014460:	2300      	movs	r3, #0
 8014462:	73fb      	strb	r3, [r7, #15]
    break;
 8014464:	e00b      	b.n	801447e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014466:	2303      	movs	r3, #3
 8014468:	73fb      	strb	r3, [r7, #15]
    break;
 801446a:	e008      	b.n	801447e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801446c:	2301      	movs	r3, #1
 801446e:	73fb      	strb	r3, [r7, #15]
    break;
 8014470:	e005      	b.n	801447e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014472:	2303      	movs	r3, #3
 8014474:	73fb      	strb	r3, [r7, #15]
    break;
 8014476:	e002      	b.n	801447e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8014478:	2303      	movs	r3, #3
 801447a:	73fb      	strb	r3, [r7, #15]
    break;
 801447c:	bf00      	nop
  }
  return usb_status;
 801447e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014480:	4618      	mov	r0, r3
 8014482:	3710      	adds	r7, #16
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}

08014488 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b084      	sub	sp, #16
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
 8014490:	4608      	mov	r0, r1
 8014492:	4611      	mov	r1, r2
 8014494:	461a      	mov	r2, r3
 8014496:	4603      	mov	r3, r0
 8014498:	70fb      	strb	r3, [r7, #3]
 801449a:	460b      	mov	r3, r1
 801449c:	70bb      	strb	r3, [r7, #2]
 801449e:	4613      	mov	r3, r2
 80144a0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80144a2:	2300      	movs	r3, #0
 80144a4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80144a6:	2300      	movs	r3, #0
 80144a8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80144b0:	78bb      	ldrb	r3, [r7, #2]
 80144b2:	883a      	ldrh	r2, [r7, #0]
 80144b4:	78f9      	ldrb	r1, [r7, #3]
 80144b6:	f7f4 feef 	bl	8009298 <HAL_PCD_EP_Open>
 80144ba:	4603      	mov	r3, r0
 80144bc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80144be:	7bbb      	ldrb	r3, [r7, #14]
 80144c0:	2b03      	cmp	r3, #3
 80144c2:	d817      	bhi.n	80144f4 <USBD_LL_OpenEP+0x6c>
 80144c4:	a201      	add	r2, pc, #4	; (adr r2, 80144cc <USBD_LL_OpenEP+0x44>)
 80144c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144ca:	bf00      	nop
 80144cc:	080144dd 	.word	0x080144dd
 80144d0:	080144e3 	.word	0x080144e3
 80144d4:	080144e9 	.word	0x080144e9
 80144d8:	080144ef 	.word	0x080144ef
    case HAL_OK :
      usb_status = USBD_OK;
 80144dc:	2300      	movs	r3, #0
 80144de:	73fb      	strb	r3, [r7, #15]
    break;
 80144e0:	e00b      	b.n	80144fa <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80144e2:	2303      	movs	r3, #3
 80144e4:	73fb      	strb	r3, [r7, #15]
    break;
 80144e6:	e008      	b.n	80144fa <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80144e8:	2301      	movs	r3, #1
 80144ea:	73fb      	strb	r3, [r7, #15]
    break;
 80144ec:	e005      	b.n	80144fa <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80144ee:	2303      	movs	r3, #3
 80144f0:	73fb      	strb	r3, [r7, #15]
    break;
 80144f2:	e002      	b.n	80144fa <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80144f4:	2303      	movs	r3, #3
 80144f6:	73fb      	strb	r3, [r7, #15]
    break;
 80144f8:	bf00      	nop
  }
  return usb_status;
 80144fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80144fc:	4618      	mov	r0, r3
 80144fe:	3710      	adds	r7, #16
 8014500:	46bd      	mov	sp, r7
 8014502:	bd80      	pop	{r7, pc}

08014504 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b084      	sub	sp, #16
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
 801450c:	460b      	mov	r3, r1
 801450e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014510:	2300      	movs	r3, #0
 8014512:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014514:	2300      	movs	r3, #0
 8014516:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801451e:	78fa      	ldrb	r2, [r7, #3]
 8014520:	4611      	mov	r1, r2
 8014522:	4618      	mov	r0, r3
 8014524:	f7f4 ff15 	bl	8009352 <HAL_PCD_EP_Close>
 8014528:	4603      	mov	r3, r0
 801452a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801452c:	7bbb      	ldrb	r3, [r7, #14]
 801452e:	2b03      	cmp	r3, #3
 8014530:	d816      	bhi.n	8014560 <USBD_LL_CloseEP+0x5c>
 8014532:	a201      	add	r2, pc, #4	; (adr r2, 8014538 <USBD_LL_CloseEP+0x34>)
 8014534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014538:	08014549 	.word	0x08014549
 801453c:	0801454f 	.word	0x0801454f
 8014540:	08014555 	.word	0x08014555
 8014544:	0801455b 	.word	0x0801455b
    case HAL_OK :
      usb_status = USBD_OK;
 8014548:	2300      	movs	r3, #0
 801454a:	73fb      	strb	r3, [r7, #15]
    break;
 801454c:	e00b      	b.n	8014566 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801454e:	2303      	movs	r3, #3
 8014550:	73fb      	strb	r3, [r7, #15]
    break;
 8014552:	e008      	b.n	8014566 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014554:	2301      	movs	r3, #1
 8014556:	73fb      	strb	r3, [r7, #15]
    break;
 8014558:	e005      	b.n	8014566 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801455a:	2303      	movs	r3, #3
 801455c:	73fb      	strb	r3, [r7, #15]
    break;
 801455e:	e002      	b.n	8014566 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014560:	2303      	movs	r3, #3
 8014562:	73fb      	strb	r3, [r7, #15]
    break;
 8014564:	bf00      	nop
  }
  return usb_status;
 8014566:	7bfb      	ldrb	r3, [r7, #15]
}
 8014568:	4618      	mov	r0, r3
 801456a:	3710      	adds	r7, #16
 801456c:	46bd      	mov	sp, r7
 801456e:	bd80      	pop	{r7, pc}

08014570 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b084      	sub	sp, #16
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
 8014578:	460b      	mov	r3, r1
 801457a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801457c:	2300      	movs	r3, #0
 801457e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014580:	2300      	movs	r3, #0
 8014582:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801458a:	78fa      	ldrb	r2, [r7, #3]
 801458c:	4611      	mov	r1, r2
 801458e:	4618      	mov	r0, r3
 8014590:	f7f4 ffa7 	bl	80094e2 <HAL_PCD_EP_SetStall>
 8014594:	4603      	mov	r3, r0
 8014596:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014598:	7bbb      	ldrb	r3, [r7, #14]
 801459a:	2b03      	cmp	r3, #3
 801459c:	d816      	bhi.n	80145cc <USBD_LL_StallEP+0x5c>
 801459e:	a201      	add	r2, pc, #4	; (adr r2, 80145a4 <USBD_LL_StallEP+0x34>)
 80145a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145a4:	080145b5 	.word	0x080145b5
 80145a8:	080145bb 	.word	0x080145bb
 80145ac:	080145c1 	.word	0x080145c1
 80145b0:	080145c7 	.word	0x080145c7
    case HAL_OK :
      usb_status = USBD_OK;
 80145b4:	2300      	movs	r3, #0
 80145b6:	73fb      	strb	r3, [r7, #15]
    break;
 80145b8:	e00b      	b.n	80145d2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80145ba:	2303      	movs	r3, #3
 80145bc:	73fb      	strb	r3, [r7, #15]
    break;
 80145be:	e008      	b.n	80145d2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80145c0:	2301      	movs	r3, #1
 80145c2:	73fb      	strb	r3, [r7, #15]
    break;
 80145c4:	e005      	b.n	80145d2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80145c6:	2303      	movs	r3, #3
 80145c8:	73fb      	strb	r3, [r7, #15]
    break;
 80145ca:	e002      	b.n	80145d2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80145cc:	2303      	movs	r3, #3
 80145ce:	73fb      	strb	r3, [r7, #15]
    break;
 80145d0:	bf00      	nop
  }
  return usb_status;
 80145d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80145d4:	4618      	mov	r0, r3
 80145d6:	3710      	adds	r7, #16
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}

080145dc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b084      	sub	sp, #16
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
 80145e4:	460b      	mov	r3, r1
 80145e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80145e8:	2300      	movs	r3, #0
 80145ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80145ec:	2300      	movs	r3, #0
 80145ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80145f6:	78fa      	ldrb	r2, [r7, #3]
 80145f8:	4611      	mov	r1, r2
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7f4 ffd1 	bl	80095a2 <HAL_PCD_EP_ClrStall>
 8014600:	4603      	mov	r3, r0
 8014602:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8014604:	7bbb      	ldrb	r3, [r7, #14]
 8014606:	2b03      	cmp	r3, #3
 8014608:	d816      	bhi.n	8014638 <USBD_LL_ClearStallEP+0x5c>
 801460a:	a201      	add	r2, pc, #4	; (adr r2, 8014610 <USBD_LL_ClearStallEP+0x34>)
 801460c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014610:	08014621 	.word	0x08014621
 8014614:	08014627 	.word	0x08014627
 8014618:	0801462d 	.word	0x0801462d
 801461c:	08014633 	.word	0x08014633
    case HAL_OK :
      usb_status = USBD_OK;
 8014620:	2300      	movs	r3, #0
 8014622:	73fb      	strb	r3, [r7, #15]
    break;
 8014624:	e00b      	b.n	801463e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014626:	2303      	movs	r3, #3
 8014628:	73fb      	strb	r3, [r7, #15]
    break;
 801462a:	e008      	b.n	801463e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801462c:	2301      	movs	r3, #1
 801462e:	73fb      	strb	r3, [r7, #15]
    break;
 8014630:	e005      	b.n	801463e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014632:	2303      	movs	r3, #3
 8014634:	73fb      	strb	r3, [r7, #15]
    break;
 8014636:	e002      	b.n	801463e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8014638:	2303      	movs	r3, #3
 801463a:	73fb      	strb	r3, [r7, #15]
    break;
 801463c:	bf00      	nop
  }
  return usb_status;
 801463e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014640:	4618      	mov	r0, r3
 8014642:	3710      	adds	r7, #16
 8014644:	46bd      	mov	sp, r7
 8014646:	bd80      	pop	{r7, pc}

08014648 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014648:	b480      	push	{r7}
 801464a:	b085      	sub	sp, #20
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
 8014650:	460b      	mov	r3, r1
 8014652:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801465a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801465c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014660:	2b00      	cmp	r3, #0
 8014662:	da0c      	bge.n	801467e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014664:	78fb      	ldrb	r3, [r7, #3]
 8014666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801466a:	68f9      	ldr	r1, [r7, #12]
 801466c:	1c5a      	adds	r2, r3, #1
 801466e:	4613      	mov	r3, r2
 8014670:	009b      	lsls	r3, r3, #2
 8014672:	4413      	add	r3, r2
 8014674:	00db      	lsls	r3, r3, #3
 8014676:	440b      	add	r3, r1
 8014678:	3302      	adds	r3, #2
 801467a:	781b      	ldrb	r3, [r3, #0]
 801467c:	e00b      	b.n	8014696 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801467e:	78fb      	ldrb	r3, [r7, #3]
 8014680:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014684:	68f9      	ldr	r1, [r7, #12]
 8014686:	4613      	mov	r3, r2
 8014688:	009b      	lsls	r3, r3, #2
 801468a:	4413      	add	r3, r2
 801468c:	00db      	lsls	r3, r3, #3
 801468e:	440b      	add	r3, r1
 8014690:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8014694:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014696:	4618      	mov	r0, r3
 8014698:	3714      	adds	r7, #20
 801469a:	46bd      	mov	sp, r7
 801469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a0:	4770      	bx	lr
	...

080146a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b084      	sub	sp, #16
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	460b      	mov	r3, r1
 80146ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80146b0:	2300      	movs	r3, #0
 80146b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80146b4:	2300      	movs	r3, #0
 80146b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80146be:	78fa      	ldrb	r2, [r7, #3]
 80146c0:	4611      	mov	r1, r2
 80146c2:	4618      	mov	r0, r3
 80146c4:	f7f4 fdc3 	bl	800924e <HAL_PCD_SetAddress>
 80146c8:	4603      	mov	r3, r0
 80146ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80146cc:	7bbb      	ldrb	r3, [r7, #14]
 80146ce:	2b03      	cmp	r3, #3
 80146d0:	d816      	bhi.n	8014700 <USBD_LL_SetUSBAddress+0x5c>
 80146d2:	a201      	add	r2, pc, #4	; (adr r2, 80146d8 <USBD_LL_SetUSBAddress+0x34>)
 80146d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146d8:	080146e9 	.word	0x080146e9
 80146dc:	080146ef 	.word	0x080146ef
 80146e0:	080146f5 	.word	0x080146f5
 80146e4:	080146fb 	.word	0x080146fb
    case HAL_OK :
      usb_status = USBD_OK;
 80146e8:	2300      	movs	r3, #0
 80146ea:	73fb      	strb	r3, [r7, #15]
    break;
 80146ec:	e00b      	b.n	8014706 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80146ee:	2303      	movs	r3, #3
 80146f0:	73fb      	strb	r3, [r7, #15]
    break;
 80146f2:	e008      	b.n	8014706 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80146f4:	2301      	movs	r3, #1
 80146f6:	73fb      	strb	r3, [r7, #15]
    break;
 80146f8:	e005      	b.n	8014706 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80146fa:	2303      	movs	r3, #3
 80146fc:	73fb      	strb	r3, [r7, #15]
    break;
 80146fe:	e002      	b.n	8014706 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8014700:	2303      	movs	r3, #3
 8014702:	73fb      	strb	r3, [r7, #15]
    break;
 8014704:	bf00      	nop
  }
  return usb_status;
 8014706:	7bfb      	ldrb	r3, [r7, #15]
}
 8014708:	4618      	mov	r0, r3
 801470a:	3710      	adds	r7, #16
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}

08014710 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b086      	sub	sp, #24
 8014714:	af00      	add	r7, sp, #0
 8014716:	60f8      	str	r0, [r7, #12]
 8014718:	607a      	str	r2, [r7, #4]
 801471a:	603b      	str	r3, [r7, #0]
 801471c:	460b      	mov	r3, r1
 801471e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014720:	2300      	movs	r3, #0
 8014722:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014724:	2300      	movs	r3, #0
 8014726:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801472e:	7af9      	ldrb	r1, [r7, #11]
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	687a      	ldr	r2, [r7, #4]
 8014734:	f7f4 fe9e 	bl	8009474 <HAL_PCD_EP_Transmit>
 8014738:	4603      	mov	r3, r0
 801473a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 801473c:	7dbb      	ldrb	r3, [r7, #22]
 801473e:	2b03      	cmp	r3, #3
 8014740:	d816      	bhi.n	8014770 <USBD_LL_Transmit+0x60>
 8014742:	a201      	add	r2, pc, #4	; (adr r2, 8014748 <USBD_LL_Transmit+0x38>)
 8014744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014748:	08014759 	.word	0x08014759
 801474c:	0801475f 	.word	0x0801475f
 8014750:	08014765 	.word	0x08014765
 8014754:	0801476b 	.word	0x0801476b
    case HAL_OK :
      usb_status = USBD_OK;
 8014758:	2300      	movs	r3, #0
 801475a:	75fb      	strb	r3, [r7, #23]
    break;
 801475c:	e00b      	b.n	8014776 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801475e:	2303      	movs	r3, #3
 8014760:	75fb      	strb	r3, [r7, #23]
    break;
 8014762:	e008      	b.n	8014776 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014764:	2301      	movs	r3, #1
 8014766:	75fb      	strb	r3, [r7, #23]
    break;
 8014768:	e005      	b.n	8014776 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801476a:	2303      	movs	r3, #3
 801476c:	75fb      	strb	r3, [r7, #23]
    break;
 801476e:	e002      	b.n	8014776 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8014770:	2303      	movs	r3, #3
 8014772:	75fb      	strb	r3, [r7, #23]
    break;
 8014774:	bf00      	nop
  }
  return usb_status;
 8014776:	7dfb      	ldrb	r3, [r7, #23]
}
 8014778:	4618      	mov	r0, r3
 801477a:	3718      	adds	r7, #24
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}

08014780 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b086      	sub	sp, #24
 8014784:	af00      	add	r7, sp, #0
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	607a      	str	r2, [r7, #4]
 801478a:	603b      	str	r3, [r7, #0]
 801478c:	460b      	mov	r3, r1
 801478e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014790:	2300      	movs	r3, #0
 8014792:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014794:	2300      	movs	r3, #0
 8014796:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801479e:	7af9      	ldrb	r1, [r7, #11]
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	687a      	ldr	r2, [r7, #4]
 80147a4:	f7f4 fe1d 	bl	80093e2 <HAL_PCD_EP_Receive>
 80147a8:	4603      	mov	r3, r0
 80147aa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80147ac:	7dbb      	ldrb	r3, [r7, #22]
 80147ae:	2b03      	cmp	r3, #3
 80147b0:	d816      	bhi.n	80147e0 <USBD_LL_PrepareReceive+0x60>
 80147b2:	a201      	add	r2, pc, #4	; (adr r2, 80147b8 <USBD_LL_PrepareReceive+0x38>)
 80147b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147b8:	080147c9 	.word	0x080147c9
 80147bc:	080147cf 	.word	0x080147cf
 80147c0:	080147d5 	.word	0x080147d5
 80147c4:	080147db 	.word	0x080147db
    case HAL_OK :
      usb_status = USBD_OK;
 80147c8:	2300      	movs	r3, #0
 80147ca:	75fb      	strb	r3, [r7, #23]
    break;
 80147cc:	e00b      	b.n	80147e6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80147ce:	2303      	movs	r3, #3
 80147d0:	75fb      	strb	r3, [r7, #23]
    break;
 80147d2:	e008      	b.n	80147e6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80147d4:	2301      	movs	r3, #1
 80147d6:	75fb      	strb	r3, [r7, #23]
    break;
 80147d8:	e005      	b.n	80147e6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80147da:	2303      	movs	r3, #3
 80147dc:	75fb      	strb	r3, [r7, #23]
    break;
 80147de:	e002      	b.n	80147e6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80147e0:	2303      	movs	r3, #3
 80147e2:	75fb      	strb	r3, [r7, #23]
    break;
 80147e4:	bf00      	nop
  }
  return usb_status;
 80147e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80147e8:	4618      	mov	r0, r3
 80147ea:	3718      	adds	r7, #24
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd80      	pop	{r7, pc}

080147f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b082      	sub	sp, #8
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
 80147f8:	460b      	mov	r3, r1
 80147fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014802:	78fa      	ldrb	r2, [r7, #3]
 8014804:	4611      	mov	r1, r2
 8014806:	4618      	mov	r0, r3
 8014808:	f7f4 fe1c 	bl	8009444 <HAL_PCD_EP_GetRxCount>
 801480c:	4603      	mov	r3, r0
}
 801480e:	4618      	mov	r0, r3
 8014810:	3708      	adds	r7, #8
 8014812:	46bd      	mov	sp, r7
 8014814:	bd80      	pop	{r7, pc}
	...

08014818 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
 8014820:	460b      	mov	r3, r1
 8014822:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8014824:	78fb      	ldrb	r3, [r7, #3]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d002      	beq.n	8014830 <HAL_PCDEx_LPM_Callback+0x18>
 801482a:	2b01      	cmp	r3, #1
 801482c:	d013      	beq.n	8014856 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801482e:	e023      	b.n	8014878 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	699b      	ldr	r3, [r3, #24]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d007      	beq.n	8014848 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8014838:	f000 f83c 	bl	80148b4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801483c:	4b10      	ldr	r3, [pc, #64]	; (8014880 <HAL_PCDEx_LPM_Callback+0x68>)
 801483e:	691b      	ldr	r3, [r3, #16]
 8014840:	4a0f      	ldr	r2, [pc, #60]	; (8014880 <HAL_PCDEx_LPM_Callback+0x68>)
 8014842:	f023 0306 	bic.w	r3, r3, #6
 8014846:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801484e:	4618      	mov	r0, r3
 8014850:	f7fd fd99 	bl	8012386 <USBD_LL_Resume>
    break;
 8014854:	e010      	b.n	8014878 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 801485c:	4618      	mov	r0, r3
 801485e:	f7fd fd76 	bl	801234e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	699b      	ldr	r3, [r3, #24]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d005      	beq.n	8014876 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801486a:	4b05      	ldr	r3, [pc, #20]	; (8014880 <HAL_PCDEx_LPM_Callback+0x68>)
 801486c:	691b      	ldr	r3, [r3, #16]
 801486e:	4a04      	ldr	r2, [pc, #16]	; (8014880 <HAL_PCDEx_LPM_Callback+0x68>)
 8014870:	f043 0306 	orr.w	r3, r3, #6
 8014874:	6113      	str	r3, [r2, #16]
    break;
 8014876:	bf00      	nop
}
 8014878:	bf00      	nop
 801487a:	3708      	adds	r7, #8
 801487c:	46bd      	mov	sp, r7
 801487e:	bd80      	pop	{r7, pc}
 8014880:	e000ed00 	.word	0xe000ed00

08014884 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014884:	b480      	push	{r7}
 8014886:	b083      	sub	sp, #12
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801488c:	4b03      	ldr	r3, [pc, #12]	; (801489c <USBD_static_malloc+0x18>)
}
 801488e:	4618      	mov	r0, r3
 8014890:	370c      	adds	r7, #12
 8014892:	46bd      	mov	sp, r7
 8014894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014898:	4770      	bx	lr
 801489a:	bf00      	nop
 801489c:	20002348 	.word	0x20002348

080148a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80148a0:	b480      	push	{r7}
 80148a2:	b083      	sub	sp, #12
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]

}
 80148a8:	bf00      	nop
 80148aa:	370c      	adds	r7, #12
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr

080148b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80148b8:	f7ed f86e 	bl	8001998 <SystemClock_Config>
}
 80148bc:	bf00      	nop
 80148be:	bd80      	pop	{r7, pc}

080148c0 <atoi>:
 80148c0:	220a      	movs	r2, #10
 80148c2:	2100      	movs	r1, #0
 80148c4:	f000 bfb8 	b.w	8015838 <strtol>

080148c8 <malloc>:
 80148c8:	4b02      	ldr	r3, [pc, #8]	; (80148d4 <malloc+0xc>)
 80148ca:	4601      	mov	r1, r0
 80148cc:	6818      	ldr	r0, [r3, #0]
 80148ce:	f000 b82b 	b.w	8014928 <_malloc_r>
 80148d2:	bf00      	nop
 80148d4:	200002f4 	.word	0x200002f4

080148d8 <free>:
 80148d8:	4b02      	ldr	r3, [pc, #8]	; (80148e4 <free+0xc>)
 80148da:	4601      	mov	r1, r0
 80148dc:	6818      	ldr	r0, [r3, #0]
 80148de:	f002 bf55 	b.w	801778c <_free_r>
 80148e2:	bf00      	nop
 80148e4:	200002f4 	.word	0x200002f4

080148e8 <sbrk_aligned>:
 80148e8:	b570      	push	{r4, r5, r6, lr}
 80148ea:	4e0e      	ldr	r6, [pc, #56]	; (8014924 <sbrk_aligned+0x3c>)
 80148ec:	460c      	mov	r4, r1
 80148ee:	6831      	ldr	r1, [r6, #0]
 80148f0:	4605      	mov	r5, r0
 80148f2:	b911      	cbnz	r1, 80148fa <sbrk_aligned+0x12>
 80148f4:	f002 f83e 	bl	8016974 <_sbrk_r>
 80148f8:	6030      	str	r0, [r6, #0]
 80148fa:	4621      	mov	r1, r4
 80148fc:	4628      	mov	r0, r5
 80148fe:	f002 f839 	bl	8016974 <_sbrk_r>
 8014902:	1c43      	adds	r3, r0, #1
 8014904:	d00a      	beq.n	801491c <sbrk_aligned+0x34>
 8014906:	1cc4      	adds	r4, r0, #3
 8014908:	f024 0403 	bic.w	r4, r4, #3
 801490c:	42a0      	cmp	r0, r4
 801490e:	d007      	beq.n	8014920 <sbrk_aligned+0x38>
 8014910:	1a21      	subs	r1, r4, r0
 8014912:	4628      	mov	r0, r5
 8014914:	f002 f82e 	bl	8016974 <_sbrk_r>
 8014918:	3001      	adds	r0, #1
 801491a:	d101      	bne.n	8014920 <sbrk_aligned+0x38>
 801491c:	f04f 34ff 	mov.w	r4, #4294967295
 8014920:	4620      	mov	r0, r4
 8014922:	bd70      	pop	{r4, r5, r6, pc}
 8014924:	2000256c 	.word	0x2000256c

08014928 <_malloc_r>:
 8014928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801492c:	1ccd      	adds	r5, r1, #3
 801492e:	f025 0503 	bic.w	r5, r5, #3
 8014932:	3508      	adds	r5, #8
 8014934:	2d0c      	cmp	r5, #12
 8014936:	bf38      	it	cc
 8014938:	250c      	movcc	r5, #12
 801493a:	2d00      	cmp	r5, #0
 801493c:	4607      	mov	r7, r0
 801493e:	db01      	blt.n	8014944 <_malloc_r+0x1c>
 8014940:	42a9      	cmp	r1, r5
 8014942:	d905      	bls.n	8014950 <_malloc_r+0x28>
 8014944:	230c      	movs	r3, #12
 8014946:	603b      	str	r3, [r7, #0]
 8014948:	2600      	movs	r6, #0
 801494a:	4630      	mov	r0, r6
 801494c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014950:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014a24 <_malloc_r+0xfc>
 8014954:	f000 f868 	bl	8014a28 <__malloc_lock>
 8014958:	f8d8 3000 	ldr.w	r3, [r8]
 801495c:	461c      	mov	r4, r3
 801495e:	bb5c      	cbnz	r4, 80149b8 <_malloc_r+0x90>
 8014960:	4629      	mov	r1, r5
 8014962:	4638      	mov	r0, r7
 8014964:	f7ff ffc0 	bl	80148e8 <sbrk_aligned>
 8014968:	1c43      	adds	r3, r0, #1
 801496a:	4604      	mov	r4, r0
 801496c:	d155      	bne.n	8014a1a <_malloc_r+0xf2>
 801496e:	f8d8 4000 	ldr.w	r4, [r8]
 8014972:	4626      	mov	r6, r4
 8014974:	2e00      	cmp	r6, #0
 8014976:	d145      	bne.n	8014a04 <_malloc_r+0xdc>
 8014978:	2c00      	cmp	r4, #0
 801497a:	d048      	beq.n	8014a0e <_malloc_r+0xe6>
 801497c:	6823      	ldr	r3, [r4, #0]
 801497e:	4631      	mov	r1, r6
 8014980:	4638      	mov	r0, r7
 8014982:	eb04 0903 	add.w	r9, r4, r3
 8014986:	f001 fff5 	bl	8016974 <_sbrk_r>
 801498a:	4581      	cmp	r9, r0
 801498c:	d13f      	bne.n	8014a0e <_malloc_r+0xe6>
 801498e:	6821      	ldr	r1, [r4, #0]
 8014990:	1a6d      	subs	r5, r5, r1
 8014992:	4629      	mov	r1, r5
 8014994:	4638      	mov	r0, r7
 8014996:	f7ff ffa7 	bl	80148e8 <sbrk_aligned>
 801499a:	3001      	adds	r0, #1
 801499c:	d037      	beq.n	8014a0e <_malloc_r+0xe6>
 801499e:	6823      	ldr	r3, [r4, #0]
 80149a0:	442b      	add	r3, r5
 80149a2:	6023      	str	r3, [r4, #0]
 80149a4:	f8d8 3000 	ldr.w	r3, [r8]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d038      	beq.n	8014a1e <_malloc_r+0xf6>
 80149ac:	685a      	ldr	r2, [r3, #4]
 80149ae:	42a2      	cmp	r2, r4
 80149b0:	d12b      	bne.n	8014a0a <_malloc_r+0xe2>
 80149b2:	2200      	movs	r2, #0
 80149b4:	605a      	str	r2, [r3, #4]
 80149b6:	e00f      	b.n	80149d8 <_malloc_r+0xb0>
 80149b8:	6822      	ldr	r2, [r4, #0]
 80149ba:	1b52      	subs	r2, r2, r5
 80149bc:	d41f      	bmi.n	80149fe <_malloc_r+0xd6>
 80149be:	2a0b      	cmp	r2, #11
 80149c0:	d917      	bls.n	80149f2 <_malloc_r+0xca>
 80149c2:	1961      	adds	r1, r4, r5
 80149c4:	42a3      	cmp	r3, r4
 80149c6:	6025      	str	r5, [r4, #0]
 80149c8:	bf18      	it	ne
 80149ca:	6059      	strne	r1, [r3, #4]
 80149cc:	6863      	ldr	r3, [r4, #4]
 80149ce:	bf08      	it	eq
 80149d0:	f8c8 1000 	streq.w	r1, [r8]
 80149d4:	5162      	str	r2, [r4, r5]
 80149d6:	604b      	str	r3, [r1, #4]
 80149d8:	4638      	mov	r0, r7
 80149da:	f104 060b 	add.w	r6, r4, #11
 80149de:	f000 f829 	bl	8014a34 <__malloc_unlock>
 80149e2:	f026 0607 	bic.w	r6, r6, #7
 80149e6:	1d23      	adds	r3, r4, #4
 80149e8:	1af2      	subs	r2, r6, r3
 80149ea:	d0ae      	beq.n	801494a <_malloc_r+0x22>
 80149ec:	1b9b      	subs	r3, r3, r6
 80149ee:	50a3      	str	r3, [r4, r2]
 80149f0:	e7ab      	b.n	801494a <_malloc_r+0x22>
 80149f2:	42a3      	cmp	r3, r4
 80149f4:	6862      	ldr	r2, [r4, #4]
 80149f6:	d1dd      	bne.n	80149b4 <_malloc_r+0x8c>
 80149f8:	f8c8 2000 	str.w	r2, [r8]
 80149fc:	e7ec      	b.n	80149d8 <_malloc_r+0xb0>
 80149fe:	4623      	mov	r3, r4
 8014a00:	6864      	ldr	r4, [r4, #4]
 8014a02:	e7ac      	b.n	801495e <_malloc_r+0x36>
 8014a04:	4634      	mov	r4, r6
 8014a06:	6876      	ldr	r6, [r6, #4]
 8014a08:	e7b4      	b.n	8014974 <_malloc_r+0x4c>
 8014a0a:	4613      	mov	r3, r2
 8014a0c:	e7cc      	b.n	80149a8 <_malloc_r+0x80>
 8014a0e:	230c      	movs	r3, #12
 8014a10:	603b      	str	r3, [r7, #0]
 8014a12:	4638      	mov	r0, r7
 8014a14:	f000 f80e 	bl	8014a34 <__malloc_unlock>
 8014a18:	e797      	b.n	801494a <_malloc_r+0x22>
 8014a1a:	6025      	str	r5, [r4, #0]
 8014a1c:	e7dc      	b.n	80149d8 <_malloc_r+0xb0>
 8014a1e:	605b      	str	r3, [r3, #4]
 8014a20:	deff      	udf	#255	; 0xff
 8014a22:	bf00      	nop
 8014a24:	20002568 	.word	0x20002568

08014a28 <__malloc_lock>:
 8014a28:	4801      	ldr	r0, [pc, #4]	; (8014a30 <__malloc_lock+0x8>)
 8014a2a:	f001 bff0 	b.w	8016a0e <__retarget_lock_acquire_recursive>
 8014a2e:	bf00      	nop
 8014a30:	200026b0 	.word	0x200026b0

08014a34 <__malloc_unlock>:
 8014a34:	4801      	ldr	r0, [pc, #4]	; (8014a3c <__malloc_unlock+0x8>)
 8014a36:	f001 bfeb 	b.w	8016a10 <__retarget_lock_release_recursive>
 8014a3a:	bf00      	nop
 8014a3c:	200026b0 	.word	0x200026b0

08014a40 <sulp>:
 8014a40:	b570      	push	{r4, r5, r6, lr}
 8014a42:	4604      	mov	r4, r0
 8014a44:	460d      	mov	r5, r1
 8014a46:	ec45 4b10 	vmov	d0, r4, r5
 8014a4a:	4616      	mov	r6, r2
 8014a4c:	f003 fdc0 	bl	80185d0 <__ulp>
 8014a50:	ec51 0b10 	vmov	r0, r1, d0
 8014a54:	b17e      	cbz	r6, 8014a76 <sulp+0x36>
 8014a56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014a5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	dd09      	ble.n	8014a76 <sulp+0x36>
 8014a62:	051b      	lsls	r3, r3, #20
 8014a64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014a68:	2400      	movs	r4, #0
 8014a6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014a6e:	4622      	mov	r2, r4
 8014a70:	462b      	mov	r3, r5
 8014a72:	f7eb fdc1 	bl	80005f8 <__aeabi_dmul>
 8014a76:	bd70      	pop	{r4, r5, r6, pc}

08014a78 <_strtod_l>:
 8014a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a7c:	ed2d 8b02 	vpush	{d8}
 8014a80:	b09b      	sub	sp, #108	; 0x6c
 8014a82:	4604      	mov	r4, r0
 8014a84:	9213      	str	r2, [sp, #76]	; 0x4c
 8014a86:	2200      	movs	r2, #0
 8014a88:	9216      	str	r2, [sp, #88]	; 0x58
 8014a8a:	460d      	mov	r5, r1
 8014a8c:	f04f 0800 	mov.w	r8, #0
 8014a90:	f04f 0900 	mov.w	r9, #0
 8014a94:	460a      	mov	r2, r1
 8014a96:	9215      	str	r2, [sp, #84]	; 0x54
 8014a98:	7811      	ldrb	r1, [r2, #0]
 8014a9a:	292b      	cmp	r1, #43	; 0x2b
 8014a9c:	d04c      	beq.n	8014b38 <_strtod_l+0xc0>
 8014a9e:	d83a      	bhi.n	8014b16 <_strtod_l+0x9e>
 8014aa0:	290d      	cmp	r1, #13
 8014aa2:	d834      	bhi.n	8014b0e <_strtod_l+0x96>
 8014aa4:	2908      	cmp	r1, #8
 8014aa6:	d834      	bhi.n	8014b12 <_strtod_l+0x9a>
 8014aa8:	2900      	cmp	r1, #0
 8014aaa:	d03d      	beq.n	8014b28 <_strtod_l+0xb0>
 8014aac:	2200      	movs	r2, #0
 8014aae:	920a      	str	r2, [sp, #40]	; 0x28
 8014ab0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014ab2:	7832      	ldrb	r2, [r6, #0]
 8014ab4:	2a30      	cmp	r2, #48	; 0x30
 8014ab6:	f040 80b4 	bne.w	8014c22 <_strtod_l+0x1aa>
 8014aba:	7872      	ldrb	r2, [r6, #1]
 8014abc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014ac0:	2a58      	cmp	r2, #88	; 0x58
 8014ac2:	d170      	bne.n	8014ba6 <_strtod_l+0x12e>
 8014ac4:	9302      	str	r3, [sp, #8]
 8014ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ac8:	9301      	str	r3, [sp, #4]
 8014aca:	ab16      	add	r3, sp, #88	; 0x58
 8014acc:	9300      	str	r3, [sp, #0]
 8014ace:	4a8e      	ldr	r2, [pc, #568]	; (8014d08 <_strtod_l+0x290>)
 8014ad0:	ab17      	add	r3, sp, #92	; 0x5c
 8014ad2:	a915      	add	r1, sp, #84	; 0x54
 8014ad4:	4620      	mov	r0, r4
 8014ad6:	f002 ff0d 	bl	80178f4 <__gethex>
 8014ada:	f010 070f 	ands.w	r7, r0, #15
 8014ade:	4605      	mov	r5, r0
 8014ae0:	d005      	beq.n	8014aee <_strtod_l+0x76>
 8014ae2:	2f06      	cmp	r7, #6
 8014ae4:	d12a      	bne.n	8014b3c <_strtod_l+0xc4>
 8014ae6:	3601      	adds	r6, #1
 8014ae8:	2300      	movs	r3, #0
 8014aea:	9615      	str	r6, [sp, #84]	; 0x54
 8014aec:	930a      	str	r3, [sp, #40]	; 0x28
 8014aee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	f040 857f 	bne.w	80155f4 <_strtod_l+0xb7c>
 8014af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014af8:	b1db      	cbz	r3, 8014b32 <_strtod_l+0xba>
 8014afa:	4642      	mov	r2, r8
 8014afc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014b00:	ec43 2b10 	vmov	d0, r2, r3
 8014b04:	b01b      	add	sp, #108	; 0x6c
 8014b06:	ecbd 8b02 	vpop	{d8}
 8014b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b0e:	2920      	cmp	r1, #32
 8014b10:	d1cc      	bne.n	8014aac <_strtod_l+0x34>
 8014b12:	3201      	adds	r2, #1
 8014b14:	e7bf      	b.n	8014a96 <_strtod_l+0x1e>
 8014b16:	292d      	cmp	r1, #45	; 0x2d
 8014b18:	d1c8      	bne.n	8014aac <_strtod_l+0x34>
 8014b1a:	2101      	movs	r1, #1
 8014b1c:	910a      	str	r1, [sp, #40]	; 0x28
 8014b1e:	1c51      	adds	r1, r2, #1
 8014b20:	9115      	str	r1, [sp, #84]	; 0x54
 8014b22:	7852      	ldrb	r2, [r2, #1]
 8014b24:	2a00      	cmp	r2, #0
 8014b26:	d1c3      	bne.n	8014ab0 <_strtod_l+0x38>
 8014b28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b2a:	9515      	str	r5, [sp, #84]	; 0x54
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	f040 855f 	bne.w	80155f0 <_strtod_l+0xb78>
 8014b32:	4642      	mov	r2, r8
 8014b34:	464b      	mov	r3, r9
 8014b36:	e7e3      	b.n	8014b00 <_strtod_l+0x88>
 8014b38:	2100      	movs	r1, #0
 8014b3a:	e7ef      	b.n	8014b1c <_strtod_l+0xa4>
 8014b3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014b3e:	b13a      	cbz	r2, 8014b50 <_strtod_l+0xd8>
 8014b40:	2135      	movs	r1, #53	; 0x35
 8014b42:	a818      	add	r0, sp, #96	; 0x60
 8014b44:	f003 fe41 	bl	80187ca <__copybits>
 8014b48:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014b4a:	4620      	mov	r0, r4
 8014b4c:	f003 fa14 	bl	8017f78 <_Bfree>
 8014b50:	3f01      	subs	r7, #1
 8014b52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014b54:	2f04      	cmp	r7, #4
 8014b56:	d806      	bhi.n	8014b66 <_strtod_l+0xee>
 8014b58:	e8df f007 	tbb	[pc, r7]
 8014b5c:	201d0314 	.word	0x201d0314
 8014b60:	14          	.byte	0x14
 8014b61:	00          	.byte	0x00
 8014b62:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8014b66:	05e9      	lsls	r1, r5, #23
 8014b68:	bf48      	it	mi
 8014b6a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8014b6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014b72:	0d1b      	lsrs	r3, r3, #20
 8014b74:	051b      	lsls	r3, r3, #20
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d1b9      	bne.n	8014aee <_strtod_l+0x76>
 8014b7a:	f001 ff1d 	bl	80169b8 <__errno>
 8014b7e:	2322      	movs	r3, #34	; 0x22
 8014b80:	6003      	str	r3, [r0, #0]
 8014b82:	e7b4      	b.n	8014aee <_strtod_l+0x76>
 8014b84:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8014b88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014b8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014b90:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014b94:	e7e7      	b.n	8014b66 <_strtod_l+0xee>
 8014b96:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014d10 <_strtod_l+0x298>
 8014b9a:	e7e4      	b.n	8014b66 <_strtod_l+0xee>
 8014b9c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014ba0:	f04f 38ff 	mov.w	r8, #4294967295
 8014ba4:	e7df      	b.n	8014b66 <_strtod_l+0xee>
 8014ba6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014ba8:	1c5a      	adds	r2, r3, #1
 8014baa:	9215      	str	r2, [sp, #84]	; 0x54
 8014bac:	785b      	ldrb	r3, [r3, #1]
 8014bae:	2b30      	cmp	r3, #48	; 0x30
 8014bb0:	d0f9      	beq.n	8014ba6 <_strtod_l+0x12e>
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d09b      	beq.n	8014aee <_strtod_l+0x76>
 8014bb6:	2301      	movs	r3, #1
 8014bb8:	f04f 0a00 	mov.w	sl, #0
 8014bbc:	9304      	str	r3, [sp, #16]
 8014bbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8014bc2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014bc6:	46d3      	mov	fp, sl
 8014bc8:	220a      	movs	r2, #10
 8014bca:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014bcc:	7806      	ldrb	r6, [r0, #0]
 8014bce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014bd2:	b2d9      	uxtb	r1, r3
 8014bd4:	2909      	cmp	r1, #9
 8014bd6:	d926      	bls.n	8014c26 <_strtod_l+0x1ae>
 8014bd8:	494c      	ldr	r1, [pc, #304]	; (8014d0c <_strtod_l+0x294>)
 8014bda:	2201      	movs	r2, #1
 8014bdc:	f001 fe0d 	bl	80167fa <strncmp>
 8014be0:	2800      	cmp	r0, #0
 8014be2:	d030      	beq.n	8014c46 <_strtod_l+0x1ce>
 8014be4:	2000      	movs	r0, #0
 8014be6:	4632      	mov	r2, r6
 8014be8:	9005      	str	r0, [sp, #20]
 8014bea:	465e      	mov	r6, fp
 8014bec:	4603      	mov	r3, r0
 8014bee:	2a65      	cmp	r2, #101	; 0x65
 8014bf0:	d001      	beq.n	8014bf6 <_strtod_l+0x17e>
 8014bf2:	2a45      	cmp	r2, #69	; 0x45
 8014bf4:	d113      	bne.n	8014c1e <_strtod_l+0x1a6>
 8014bf6:	b91e      	cbnz	r6, 8014c00 <_strtod_l+0x188>
 8014bf8:	9a04      	ldr	r2, [sp, #16]
 8014bfa:	4302      	orrs	r2, r0
 8014bfc:	d094      	beq.n	8014b28 <_strtod_l+0xb0>
 8014bfe:	2600      	movs	r6, #0
 8014c00:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014c02:	1c6a      	adds	r2, r5, #1
 8014c04:	9215      	str	r2, [sp, #84]	; 0x54
 8014c06:	786a      	ldrb	r2, [r5, #1]
 8014c08:	2a2b      	cmp	r2, #43	; 0x2b
 8014c0a:	d074      	beq.n	8014cf6 <_strtod_l+0x27e>
 8014c0c:	2a2d      	cmp	r2, #45	; 0x2d
 8014c0e:	d078      	beq.n	8014d02 <_strtod_l+0x28a>
 8014c10:	f04f 0c00 	mov.w	ip, #0
 8014c14:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014c18:	2909      	cmp	r1, #9
 8014c1a:	d97f      	bls.n	8014d1c <_strtod_l+0x2a4>
 8014c1c:	9515      	str	r5, [sp, #84]	; 0x54
 8014c1e:	2700      	movs	r7, #0
 8014c20:	e09e      	b.n	8014d60 <_strtod_l+0x2e8>
 8014c22:	2300      	movs	r3, #0
 8014c24:	e7c8      	b.n	8014bb8 <_strtod_l+0x140>
 8014c26:	f1bb 0f08 	cmp.w	fp, #8
 8014c2a:	bfd8      	it	le
 8014c2c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014c2e:	f100 0001 	add.w	r0, r0, #1
 8014c32:	bfda      	itte	le
 8014c34:	fb02 3301 	mlale	r3, r2, r1, r3
 8014c38:	9309      	strle	r3, [sp, #36]	; 0x24
 8014c3a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014c3e:	f10b 0b01 	add.w	fp, fp, #1
 8014c42:	9015      	str	r0, [sp, #84]	; 0x54
 8014c44:	e7c1      	b.n	8014bca <_strtod_l+0x152>
 8014c46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c48:	1c5a      	adds	r2, r3, #1
 8014c4a:	9215      	str	r2, [sp, #84]	; 0x54
 8014c4c:	785a      	ldrb	r2, [r3, #1]
 8014c4e:	f1bb 0f00 	cmp.w	fp, #0
 8014c52:	d037      	beq.n	8014cc4 <_strtod_l+0x24c>
 8014c54:	9005      	str	r0, [sp, #20]
 8014c56:	465e      	mov	r6, fp
 8014c58:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014c5c:	2b09      	cmp	r3, #9
 8014c5e:	d912      	bls.n	8014c86 <_strtod_l+0x20e>
 8014c60:	2301      	movs	r3, #1
 8014c62:	e7c4      	b.n	8014bee <_strtod_l+0x176>
 8014c64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c66:	1c5a      	adds	r2, r3, #1
 8014c68:	9215      	str	r2, [sp, #84]	; 0x54
 8014c6a:	785a      	ldrb	r2, [r3, #1]
 8014c6c:	3001      	adds	r0, #1
 8014c6e:	2a30      	cmp	r2, #48	; 0x30
 8014c70:	d0f8      	beq.n	8014c64 <_strtod_l+0x1ec>
 8014c72:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014c76:	2b08      	cmp	r3, #8
 8014c78:	f200 84c1 	bhi.w	80155fe <_strtod_l+0xb86>
 8014c7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c7e:	9005      	str	r0, [sp, #20]
 8014c80:	2000      	movs	r0, #0
 8014c82:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c84:	4606      	mov	r6, r0
 8014c86:	3a30      	subs	r2, #48	; 0x30
 8014c88:	f100 0301 	add.w	r3, r0, #1
 8014c8c:	d014      	beq.n	8014cb8 <_strtod_l+0x240>
 8014c8e:	9905      	ldr	r1, [sp, #20]
 8014c90:	4419      	add	r1, r3
 8014c92:	9105      	str	r1, [sp, #20]
 8014c94:	4633      	mov	r3, r6
 8014c96:	eb00 0c06 	add.w	ip, r0, r6
 8014c9a:	210a      	movs	r1, #10
 8014c9c:	4563      	cmp	r3, ip
 8014c9e:	d113      	bne.n	8014cc8 <_strtod_l+0x250>
 8014ca0:	1833      	adds	r3, r6, r0
 8014ca2:	2b08      	cmp	r3, #8
 8014ca4:	f106 0601 	add.w	r6, r6, #1
 8014ca8:	4406      	add	r6, r0
 8014caa:	dc1a      	bgt.n	8014ce2 <_strtod_l+0x26a>
 8014cac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014cae:	230a      	movs	r3, #10
 8014cb0:	fb03 2301 	mla	r3, r3, r1, r2
 8014cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014cba:	1c51      	adds	r1, r2, #1
 8014cbc:	9115      	str	r1, [sp, #84]	; 0x54
 8014cbe:	7852      	ldrb	r2, [r2, #1]
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	e7c9      	b.n	8014c58 <_strtod_l+0x1e0>
 8014cc4:	4658      	mov	r0, fp
 8014cc6:	e7d2      	b.n	8014c6e <_strtod_l+0x1f6>
 8014cc8:	2b08      	cmp	r3, #8
 8014cca:	f103 0301 	add.w	r3, r3, #1
 8014cce:	dc03      	bgt.n	8014cd8 <_strtod_l+0x260>
 8014cd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014cd2:	434f      	muls	r7, r1
 8014cd4:	9709      	str	r7, [sp, #36]	; 0x24
 8014cd6:	e7e1      	b.n	8014c9c <_strtod_l+0x224>
 8014cd8:	2b10      	cmp	r3, #16
 8014cda:	bfd8      	it	le
 8014cdc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8014ce0:	e7dc      	b.n	8014c9c <_strtod_l+0x224>
 8014ce2:	2e10      	cmp	r6, #16
 8014ce4:	bfdc      	itt	le
 8014ce6:	230a      	movle	r3, #10
 8014ce8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8014cec:	e7e3      	b.n	8014cb6 <_strtod_l+0x23e>
 8014cee:	2300      	movs	r3, #0
 8014cf0:	9305      	str	r3, [sp, #20]
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	e780      	b.n	8014bf8 <_strtod_l+0x180>
 8014cf6:	f04f 0c00 	mov.w	ip, #0
 8014cfa:	1caa      	adds	r2, r5, #2
 8014cfc:	9215      	str	r2, [sp, #84]	; 0x54
 8014cfe:	78aa      	ldrb	r2, [r5, #2]
 8014d00:	e788      	b.n	8014c14 <_strtod_l+0x19c>
 8014d02:	f04f 0c01 	mov.w	ip, #1
 8014d06:	e7f8      	b.n	8014cfa <_strtod_l+0x282>
 8014d08:	0801ccec 	.word	0x0801ccec
 8014d0c:	0801cce8 	.word	0x0801cce8
 8014d10:	7ff00000 	.word	0x7ff00000
 8014d14:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d16:	1c51      	adds	r1, r2, #1
 8014d18:	9115      	str	r1, [sp, #84]	; 0x54
 8014d1a:	7852      	ldrb	r2, [r2, #1]
 8014d1c:	2a30      	cmp	r2, #48	; 0x30
 8014d1e:	d0f9      	beq.n	8014d14 <_strtod_l+0x29c>
 8014d20:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014d24:	2908      	cmp	r1, #8
 8014d26:	f63f af7a 	bhi.w	8014c1e <_strtod_l+0x1a6>
 8014d2a:	3a30      	subs	r2, #48	; 0x30
 8014d2c:	9208      	str	r2, [sp, #32]
 8014d2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d30:	920c      	str	r2, [sp, #48]	; 0x30
 8014d32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014d34:	1c57      	adds	r7, r2, #1
 8014d36:	9715      	str	r7, [sp, #84]	; 0x54
 8014d38:	7852      	ldrb	r2, [r2, #1]
 8014d3a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014d3e:	f1be 0f09 	cmp.w	lr, #9
 8014d42:	d938      	bls.n	8014db6 <_strtod_l+0x33e>
 8014d44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014d46:	1a7f      	subs	r7, r7, r1
 8014d48:	2f08      	cmp	r7, #8
 8014d4a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014d4e:	dc03      	bgt.n	8014d58 <_strtod_l+0x2e0>
 8014d50:	9908      	ldr	r1, [sp, #32]
 8014d52:	428f      	cmp	r7, r1
 8014d54:	bfa8      	it	ge
 8014d56:	460f      	movge	r7, r1
 8014d58:	f1bc 0f00 	cmp.w	ip, #0
 8014d5c:	d000      	beq.n	8014d60 <_strtod_l+0x2e8>
 8014d5e:	427f      	negs	r7, r7
 8014d60:	2e00      	cmp	r6, #0
 8014d62:	d14f      	bne.n	8014e04 <_strtod_l+0x38c>
 8014d64:	9904      	ldr	r1, [sp, #16]
 8014d66:	4301      	orrs	r1, r0
 8014d68:	f47f aec1 	bne.w	8014aee <_strtod_l+0x76>
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	f47f aedb 	bne.w	8014b28 <_strtod_l+0xb0>
 8014d72:	2a69      	cmp	r2, #105	; 0x69
 8014d74:	d029      	beq.n	8014dca <_strtod_l+0x352>
 8014d76:	dc26      	bgt.n	8014dc6 <_strtod_l+0x34e>
 8014d78:	2a49      	cmp	r2, #73	; 0x49
 8014d7a:	d026      	beq.n	8014dca <_strtod_l+0x352>
 8014d7c:	2a4e      	cmp	r2, #78	; 0x4e
 8014d7e:	f47f aed3 	bne.w	8014b28 <_strtod_l+0xb0>
 8014d82:	499b      	ldr	r1, [pc, #620]	; (8014ff0 <_strtod_l+0x578>)
 8014d84:	a815      	add	r0, sp, #84	; 0x54
 8014d86:	f002 fff5 	bl	8017d74 <__match>
 8014d8a:	2800      	cmp	r0, #0
 8014d8c:	f43f aecc 	beq.w	8014b28 <_strtod_l+0xb0>
 8014d90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	2b28      	cmp	r3, #40	; 0x28
 8014d96:	d12f      	bne.n	8014df8 <_strtod_l+0x380>
 8014d98:	4996      	ldr	r1, [pc, #600]	; (8014ff4 <_strtod_l+0x57c>)
 8014d9a:	aa18      	add	r2, sp, #96	; 0x60
 8014d9c:	a815      	add	r0, sp, #84	; 0x54
 8014d9e:	f002 fffd 	bl	8017d9c <__hexnan>
 8014da2:	2805      	cmp	r0, #5
 8014da4:	d128      	bne.n	8014df8 <_strtod_l+0x380>
 8014da6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014da8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014dac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014db0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014db4:	e69b      	b.n	8014aee <_strtod_l+0x76>
 8014db6:	9f08      	ldr	r7, [sp, #32]
 8014db8:	210a      	movs	r1, #10
 8014dba:	fb01 2107 	mla	r1, r1, r7, r2
 8014dbe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014dc2:	9208      	str	r2, [sp, #32]
 8014dc4:	e7b5      	b.n	8014d32 <_strtod_l+0x2ba>
 8014dc6:	2a6e      	cmp	r2, #110	; 0x6e
 8014dc8:	e7d9      	b.n	8014d7e <_strtod_l+0x306>
 8014dca:	498b      	ldr	r1, [pc, #556]	; (8014ff8 <_strtod_l+0x580>)
 8014dcc:	a815      	add	r0, sp, #84	; 0x54
 8014dce:	f002 ffd1 	bl	8017d74 <__match>
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	f43f aea8 	beq.w	8014b28 <_strtod_l+0xb0>
 8014dd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014dda:	4988      	ldr	r1, [pc, #544]	; (8014ffc <_strtod_l+0x584>)
 8014ddc:	3b01      	subs	r3, #1
 8014dde:	a815      	add	r0, sp, #84	; 0x54
 8014de0:	9315      	str	r3, [sp, #84]	; 0x54
 8014de2:	f002 ffc7 	bl	8017d74 <__match>
 8014de6:	b910      	cbnz	r0, 8014dee <_strtod_l+0x376>
 8014de8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014dea:	3301      	adds	r3, #1
 8014dec:	9315      	str	r3, [sp, #84]	; 0x54
 8014dee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801500c <_strtod_l+0x594>
 8014df2:	f04f 0800 	mov.w	r8, #0
 8014df6:	e67a      	b.n	8014aee <_strtod_l+0x76>
 8014df8:	4881      	ldr	r0, [pc, #516]	; (8015000 <_strtod_l+0x588>)
 8014dfa:	f001 fe21 	bl	8016a40 <nan>
 8014dfe:	ec59 8b10 	vmov	r8, r9, d0
 8014e02:	e674      	b.n	8014aee <_strtod_l+0x76>
 8014e04:	9b05      	ldr	r3, [sp, #20]
 8014e06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e08:	1afb      	subs	r3, r7, r3
 8014e0a:	f1bb 0f00 	cmp.w	fp, #0
 8014e0e:	bf08      	it	eq
 8014e10:	46b3      	moveq	fp, r6
 8014e12:	2e10      	cmp	r6, #16
 8014e14:	9308      	str	r3, [sp, #32]
 8014e16:	4635      	mov	r5, r6
 8014e18:	bfa8      	it	ge
 8014e1a:	2510      	movge	r5, #16
 8014e1c:	f7eb fb72 	bl	8000504 <__aeabi_ui2d>
 8014e20:	2e09      	cmp	r6, #9
 8014e22:	4680      	mov	r8, r0
 8014e24:	4689      	mov	r9, r1
 8014e26:	dd13      	ble.n	8014e50 <_strtod_l+0x3d8>
 8014e28:	4b76      	ldr	r3, [pc, #472]	; (8015004 <_strtod_l+0x58c>)
 8014e2a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014e2e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014e32:	f7eb fbe1 	bl	80005f8 <__aeabi_dmul>
 8014e36:	4680      	mov	r8, r0
 8014e38:	4650      	mov	r0, sl
 8014e3a:	4689      	mov	r9, r1
 8014e3c:	f7eb fb62 	bl	8000504 <__aeabi_ui2d>
 8014e40:	4602      	mov	r2, r0
 8014e42:	460b      	mov	r3, r1
 8014e44:	4640      	mov	r0, r8
 8014e46:	4649      	mov	r1, r9
 8014e48:	f7eb fa20 	bl	800028c <__adddf3>
 8014e4c:	4680      	mov	r8, r0
 8014e4e:	4689      	mov	r9, r1
 8014e50:	2e0f      	cmp	r6, #15
 8014e52:	dc38      	bgt.n	8014ec6 <_strtod_l+0x44e>
 8014e54:	9b08      	ldr	r3, [sp, #32]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	f43f ae49 	beq.w	8014aee <_strtod_l+0x76>
 8014e5c:	dd24      	ble.n	8014ea8 <_strtod_l+0x430>
 8014e5e:	2b16      	cmp	r3, #22
 8014e60:	dc0b      	bgt.n	8014e7a <_strtod_l+0x402>
 8014e62:	4968      	ldr	r1, [pc, #416]	; (8015004 <_strtod_l+0x58c>)
 8014e64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e6c:	4642      	mov	r2, r8
 8014e6e:	464b      	mov	r3, r9
 8014e70:	f7eb fbc2 	bl	80005f8 <__aeabi_dmul>
 8014e74:	4680      	mov	r8, r0
 8014e76:	4689      	mov	r9, r1
 8014e78:	e639      	b.n	8014aee <_strtod_l+0x76>
 8014e7a:	9a08      	ldr	r2, [sp, #32]
 8014e7c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8014e80:	4293      	cmp	r3, r2
 8014e82:	db20      	blt.n	8014ec6 <_strtod_l+0x44e>
 8014e84:	4c5f      	ldr	r4, [pc, #380]	; (8015004 <_strtod_l+0x58c>)
 8014e86:	f1c6 060f 	rsb	r6, r6, #15
 8014e8a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8014e8e:	4642      	mov	r2, r8
 8014e90:	464b      	mov	r3, r9
 8014e92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e96:	f7eb fbaf 	bl	80005f8 <__aeabi_dmul>
 8014e9a:	9b08      	ldr	r3, [sp, #32]
 8014e9c:	1b9e      	subs	r6, r3, r6
 8014e9e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8014ea2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014ea6:	e7e3      	b.n	8014e70 <_strtod_l+0x3f8>
 8014ea8:	9b08      	ldr	r3, [sp, #32]
 8014eaa:	3316      	adds	r3, #22
 8014eac:	db0b      	blt.n	8014ec6 <_strtod_l+0x44e>
 8014eae:	9b05      	ldr	r3, [sp, #20]
 8014eb0:	1bdf      	subs	r7, r3, r7
 8014eb2:	4b54      	ldr	r3, [pc, #336]	; (8015004 <_strtod_l+0x58c>)
 8014eb4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ebc:	4640      	mov	r0, r8
 8014ebe:	4649      	mov	r1, r9
 8014ec0:	f7eb fcc4 	bl	800084c <__aeabi_ddiv>
 8014ec4:	e7d6      	b.n	8014e74 <_strtod_l+0x3fc>
 8014ec6:	9b08      	ldr	r3, [sp, #32]
 8014ec8:	1b75      	subs	r5, r6, r5
 8014eca:	441d      	add	r5, r3
 8014ecc:	2d00      	cmp	r5, #0
 8014ece:	dd70      	ble.n	8014fb2 <_strtod_l+0x53a>
 8014ed0:	f015 030f 	ands.w	r3, r5, #15
 8014ed4:	d00a      	beq.n	8014eec <_strtod_l+0x474>
 8014ed6:	494b      	ldr	r1, [pc, #300]	; (8015004 <_strtod_l+0x58c>)
 8014ed8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014edc:	4642      	mov	r2, r8
 8014ede:	464b      	mov	r3, r9
 8014ee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ee4:	f7eb fb88 	bl	80005f8 <__aeabi_dmul>
 8014ee8:	4680      	mov	r8, r0
 8014eea:	4689      	mov	r9, r1
 8014eec:	f035 050f 	bics.w	r5, r5, #15
 8014ef0:	d04d      	beq.n	8014f8e <_strtod_l+0x516>
 8014ef2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8014ef6:	dd22      	ble.n	8014f3e <_strtod_l+0x4c6>
 8014ef8:	2500      	movs	r5, #0
 8014efa:	46ab      	mov	fp, r5
 8014efc:	9509      	str	r5, [sp, #36]	; 0x24
 8014efe:	9505      	str	r5, [sp, #20]
 8014f00:	2322      	movs	r3, #34	; 0x22
 8014f02:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801500c <_strtod_l+0x594>
 8014f06:	6023      	str	r3, [r4, #0]
 8014f08:	f04f 0800 	mov.w	r8, #0
 8014f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	f43f aded 	beq.w	8014aee <_strtod_l+0x76>
 8014f14:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014f16:	4620      	mov	r0, r4
 8014f18:	f003 f82e 	bl	8017f78 <_Bfree>
 8014f1c:	9905      	ldr	r1, [sp, #20]
 8014f1e:	4620      	mov	r0, r4
 8014f20:	f003 f82a 	bl	8017f78 <_Bfree>
 8014f24:	4659      	mov	r1, fp
 8014f26:	4620      	mov	r0, r4
 8014f28:	f003 f826 	bl	8017f78 <_Bfree>
 8014f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014f2e:	4620      	mov	r0, r4
 8014f30:	f003 f822 	bl	8017f78 <_Bfree>
 8014f34:	4629      	mov	r1, r5
 8014f36:	4620      	mov	r0, r4
 8014f38:	f003 f81e 	bl	8017f78 <_Bfree>
 8014f3c:	e5d7      	b.n	8014aee <_strtod_l+0x76>
 8014f3e:	4b32      	ldr	r3, [pc, #200]	; (8015008 <_strtod_l+0x590>)
 8014f40:	9304      	str	r3, [sp, #16]
 8014f42:	2300      	movs	r3, #0
 8014f44:	112d      	asrs	r5, r5, #4
 8014f46:	4640      	mov	r0, r8
 8014f48:	4649      	mov	r1, r9
 8014f4a:	469a      	mov	sl, r3
 8014f4c:	2d01      	cmp	r5, #1
 8014f4e:	dc21      	bgt.n	8014f94 <_strtod_l+0x51c>
 8014f50:	b10b      	cbz	r3, 8014f56 <_strtod_l+0x4de>
 8014f52:	4680      	mov	r8, r0
 8014f54:	4689      	mov	r9, r1
 8014f56:	492c      	ldr	r1, [pc, #176]	; (8015008 <_strtod_l+0x590>)
 8014f58:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014f5c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014f60:	4642      	mov	r2, r8
 8014f62:	464b      	mov	r3, r9
 8014f64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f68:	f7eb fb46 	bl	80005f8 <__aeabi_dmul>
 8014f6c:	4b27      	ldr	r3, [pc, #156]	; (801500c <_strtod_l+0x594>)
 8014f6e:	460a      	mov	r2, r1
 8014f70:	400b      	ands	r3, r1
 8014f72:	4927      	ldr	r1, [pc, #156]	; (8015010 <_strtod_l+0x598>)
 8014f74:	428b      	cmp	r3, r1
 8014f76:	4680      	mov	r8, r0
 8014f78:	d8be      	bhi.n	8014ef8 <_strtod_l+0x480>
 8014f7a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014f7e:	428b      	cmp	r3, r1
 8014f80:	bf86      	itte	hi
 8014f82:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8015014 <_strtod_l+0x59c>
 8014f86:	f04f 38ff 	movhi.w	r8, #4294967295
 8014f8a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8014f8e:	2300      	movs	r3, #0
 8014f90:	9304      	str	r3, [sp, #16]
 8014f92:	e07b      	b.n	801508c <_strtod_l+0x614>
 8014f94:	07ea      	lsls	r2, r5, #31
 8014f96:	d505      	bpl.n	8014fa4 <_strtod_l+0x52c>
 8014f98:	9b04      	ldr	r3, [sp, #16]
 8014f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f9e:	f7eb fb2b 	bl	80005f8 <__aeabi_dmul>
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	9a04      	ldr	r2, [sp, #16]
 8014fa6:	3208      	adds	r2, #8
 8014fa8:	f10a 0a01 	add.w	sl, sl, #1
 8014fac:	106d      	asrs	r5, r5, #1
 8014fae:	9204      	str	r2, [sp, #16]
 8014fb0:	e7cc      	b.n	8014f4c <_strtod_l+0x4d4>
 8014fb2:	d0ec      	beq.n	8014f8e <_strtod_l+0x516>
 8014fb4:	426d      	negs	r5, r5
 8014fb6:	f015 020f 	ands.w	r2, r5, #15
 8014fba:	d00a      	beq.n	8014fd2 <_strtod_l+0x55a>
 8014fbc:	4b11      	ldr	r3, [pc, #68]	; (8015004 <_strtod_l+0x58c>)
 8014fbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014fc2:	4640      	mov	r0, r8
 8014fc4:	4649      	mov	r1, r9
 8014fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fca:	f7eb fc3f 	bl	800084c <__aeabi_ddiv>
 8014fce:	4680      	mov	r8, r0
 8014fd0:	4689      	mov	r9, r1
 8014fd2:	112d      	asrs	r5, r5, #4
 8014fd4:	d0db      	beq.n	8014f8e <_strtod_l+0x516>
 8014fd6:	2d1f      	cmp	r5, #31
 8014fd8:	dd1e      	ble.n	8015018 <_strtod_l+0x5a0>
 8014fda:	2500      	movs	r5, #0
 8014fdc:	46ab      	mov	fp, r5
 8014fde:	9509      	str	r5, [sp, #36]	; 0x24
 8014fe0:	9505      	str	r5, [sp, #20]
 8014fe2:	2322      	movs	r3, #34	; 0x22
 8014fe4:	f04f 0800 	mov.w	r8, #0
 8014fe8:	f04f 0900 	mov.w	r9, #0
 8014fec:	6023      	str	r3, [r4, #0]
 8014fee:	e78d      	b.n	8014f0c <_strtod_l+0x494>
 8014ff0:	0801ce4e 	.word	0x0801ce4e
 8014ff4:	0801cd00 	.word	0x0801cd00
 8014ff8:	0801ce46 	.word	0x0801ce46
 8014ffc:	0801cf32 	.word	0x0801cf32
 8015000:	0801cf2e 	.word	0x0801cf2e
 8015004:	0801d088 	.word	0x0801d088
 8015008:	0801d060 	.word	0x0801d060
 801500c:	7ff00000 	.word	0x7ff00000
 8015010:	7ca00000 	.word	0x7ca00000
 8015014:	7fefffff 	.word	0x7fefffff
 8015018:	f015 0310 	ands.w	r3, r5, #16
 801501c:	bf18      	it	ne
 801501e:	236a      	movne	r3, #106	; 0x6a
 8015020:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80153c4 <_strtod_l+0x94c>
 8015024:	9304      	str	r3, [sp, #16]
 8015026:	4640      	mov	r0, r8
 8015028:	4649      	mov	r1, r9
 801502a:	2300      	movs	r3, #0
 801502c:	07ea      	lsls	r2, r5, #31
 801502e:	d504      	bpl.n	801503a <_strtod_l+0x5c2>
 8015030:	e9da 2300 	ldrd	r2, r3, [sl]
 8015034:	f7eb fae0 	bl	80005f8 <__aeabi_dmul>
 8015038:	2301      	movs	r3, #1
 801503a:	106d      	asrs	r5, r5, #1
 801503c:	f10a 0a08 	add.w	sl, sl, #8
 8015040:	d1f4      	bne.n	801502c <_strtod_l+0x5b4>
 8015042:	b10b      	cbz	r3, 8015048 <_strtod_l+0x5d0>
 8015044:	4680      	mov	r8, r0
 8015046:	4689      	mov	r9, r1
 8015048:	9b04      	ldr	r3, [sp, #16]
 801504a:	b1bb      	cbz	r3, 801507c <_strtod_l+0x604>
 801504c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8015050:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015054:	2b00      	cmp	r3, #0
 8015056:	4649      	mov	r1, r9
 8015058:	dd10      	ble.n	801507c <_strtod_l+0x604>
 801505a:	2b1f      	cmp	r3, #31
 801505c:	f340 811e 	ble.w	801529c <_strtod_l+0x824>
 8015060:	2b34      	cmp	r3, #52	; 0x34
 8015062:	bfde      	ittt	le
 8015064:	f04f 33ff 	movle.w	r3, #4294967295
 8015068:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801506c:	4093      	lslle	r3, r2
 801506e:	f04f 0800 	mov.w	r8, #0
 8015072:	bfcc      	ite	gt
 8015074:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8015078:	ea03 0901 	andle.w	r9, r3, r1
 801507c:	2200      	movs	r2, #0
 801507e:	2300      	movs	r3, #0
 8015080:	4640      	mov	r0, r8
 8015082:	4649      	mov	r1, r9
 8015084:	f7eb fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 8015088:	2800      	cmp	r0, #0
 801508a:	d1a6      	bne.n	8014fda <_strtod_l+0x562>
 801508c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801508e:	9300      	str	r3, [sp, #0]
 8015090:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015092:	4633      	mov	r3, r6
 8015094:	465a      	mov	r2, fp
 8015096:	4620      	mov	r0, r4
 8015098:	f002 ffd6 	bl	8018048 <__s2b>
 801509c:	9009      	str	r0, [sp, #36]	; 0x24
 801509e:	2800      	cmp	r0, #0
 80150a0:	f43f af2a 	beq.w	8014ef8 <_strtod_l+0x480>
 80150a4:	9a08      	ldr	r2, [sp, #32]
 80150a6:	9b05      	ldr	r3, [sp, #20]
 80150a8:	2a00      	cmp	r2, #0
 80150aa:	eba3 0307 	sub.w	r3, r3, r7
 80150ae:	bfa8      	it	ge
 80150b0:	2300      	movge	r3, #0
 80150b2:	930c      	str	r3, [sp, #48]	; 0x30
 80150b4:	2500      	movs	r5, #0
 80150b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80150ba:	9312      	str	r3, [sp, #72]	; 0x48
 80150bc:	46ab      	mov	fp, r5
 80150be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150c0:	4620      	mov	r0, r4
 80150c2:	6859      	ldr	r1, [r3, #4]
 80150c4:	f002 ff18 	bl	8017ef8 <_Balloc>
 80150c8:	9005      	str	r0, [sp, #20]
 80150ca:	2800      	cmp	r0, #0
 80150cc:	f43f af18 	beq.w	8014f00 <_strtod_l+0x488>
 80150d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150d2:	691a      	ldr	r2, [r3, #16]
 80150d4:	3202      	adds	r2, #2
 80150d6:	f103 010c 	add.w	r1, r3, #12
 80150da:	0092      	lsls	r2, r2, #2
 80150dc:	300c      	adds	r0, #12
 80150de:	f001 fca0 	bl	8016a22 <memcpy>
 80150e2:	ec49 8b10 	vmov	d0, r8, r9
 80150e6:	aa18      	add	r2, sp, #96	; 0x60
 80150e8:	a917      	add	r1, sp, #92	; 0x5c
 80150ea:	4620      	mov	r0, r4
 80150ec:	f003 fae0 	bl	80186b0 <__d2b>
 80150f0:	ec49 8b18 	vmov	d8, r8, r9
 80150f4:	9016      	str	r0, [sp, #88]	; 0x58
 80150f6:	2800      	cmp	r0, #0
 80150f8:	f43f af02 	beq.w	8014f00 <_strtod_l+0x488>
 80150fc:	2101      	movs	r1, #1
 80150fe:	4620      	mov	r0, r4
 8015100:	f003 f83a 	bl	8018178 <__i2b>
 8015104:	4683      	mov	fp, r0
 8015106:	2800      	cmp	r0, #0
 8015108:	f43f aefa 	beq.w	8014f00 <_strtod_l+0x488>
 801510c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801510e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015110:	2e00      	cmp	r6, #0
 8015112:	bfab      	itete	ge
 8015114:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8015116:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8015118:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801511a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801511e:	bfac      	ite	ge
 8015120:	eb06 0a03 	addge.w	sl, r6, r3
 8015124:	1b9f      	sublt	r7, r3, r6
 8015126:	9b04      	ldr	r3, [sp, #16]
 8015128:	1af6      	subs	r6, r6, r3
 801512a:	4416      	add	r6, r2
 801512c:	4ba0      	ldr	r3, [pc, #640]	; (80153b0 <_strtod_l+0x938>)
 801512e:	3e01      	subs	r6, #1
 8015130:	429e      	cmp	r6, r3
 8015132:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015136:	f280 80c4 	bge.w	80152c2 <_strtod_l+0x84a>
 801513a:	1b9b      	subs	r3, r3, r6
 801513c:	2b1f      	cmp	r3, #31
 801513e:	eba2 0203 	sub.w	r2, r2, r3
 8015142:	f04f 0101 	mov.w	r1, #1
 8015146:	f300 80b0 	bgt.w	80152aa <_strtod_l+0x832>
 801514a:	fa01 f303 	lsl.w	r3, r1, r3
 801514e:	930e      	str	r3, [sp, #56]	; 0x38
 8015150:	2300      	movs	r3, #0
 8015152:	930d      	str	r3, [sp, #52]	; 0x34
 8015154:	eb0a 0602 	add.w	r6, sl, r2
 8015158:	9b04      	ldr	r3, [sp, #16]
 801515a:	45b2      	cmp	sl, r6
 801515c:	4417      	add	r7, r2
 801515e:	441f      	add	r7, r3
 8015160:	4653      	mov	r3, sl
 8015162:	bfa8      	it	ge
 8015164:	4633      	movge	r3, r6
 8015166:	42bb      	cmp	r3, r7
 8015168:	bfa8      	it	ge
 801516a:	463b      	movge	r3, r7
 801516c:	2b00      	cmp	r3, #0
 801516e:	bfc2      	ittt	gt
 8015170:	1af6      	subgt	r6, r6, r3
 8015172:	1aff      	subgt	r7, r7, r3
 8015174:	ebaa 0a03 	subgt.w	sl, sl, r3
 8015178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801517a:	2b00      	cmp	r3, #0
 801517c:	dd17      	ble.n	80151ae <_strtod_l+0x736>
 801517e:	4659      	mov	r1, fp
 8015180:	461a      	mov	r2, r3
 8015182:	4620      	mov	r0, r4
 8015184:	f003 f8b8 	bl	80182f8 <__pow5mult>
 8015188:	4683      	mov	fp, r0
 801518a:	2800      	cmp	r0, #0
 801518c:	f43f aeb8 	beq.w	8014f00 <_strtod_l+0x488>
 8015190:	4601      	mov	r1, r0
 8015192:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015194:	4620      	mov	r0, r4
 8015196:	f003 f805 	bl	80181a4 <__multiply>
 801519a:	900b      	str	r0, [sp, #44]	; 0x2c
 801519c:	2800      	cmp	r0, #0
 801519e:	f43f aeaf 	beq.w	8014f00 <_strtod_l+0x488>
 80151a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80151a4:	4620      	mov	r0, r4
 80151a6:	f002 fee7 	bl	8017f78 <_Bfree>
 80151aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151ac:	9316      	str	r3, [sp, #88]	; 0x58
 80151ae:	2e00      	cmp	r6, #0
 80151b0:	f300 808c 	bgt.w	80152cc <_strtod_l+0x854>
 80151b4:	9b08      	ldr	r3, [sp, #32]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	dd08      	ble.n	80151cc <_strtod_l+0x754>
 80151ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80151bc:	9905      	ldr	r1, [sp, #20]
 80151be:	4620      	mov	r0, r4
 80151c0:	f003 f89a 	bl	80182f8 <__pow5mult>
 80151c4:	9005      	str	r0, [sp, #20]
 80151c6:	2800      	cmp	r0, #0
 80151c8:	f43f ae9a 	beq.w	8014f00 <_strtod_l+0x488>
 80151cc:	2f00      	cmp	r7, #0
 80151ce:	dd08      	ble.n	80151e2 <_strtod_l+0x76a>
 80151d0:	9905      	ldr	r1, [sp, #20]
 80151d2:	463a      	mov	r2, r7
 80151d4:	4620      	mov	r0, r4
 80151d6:	f003 f8e9 	bl	80183ac <__lshift>
 80151da:	9005      	str	r0, [sp, #20]
 80151dc:	2800      	cmp	r0, #0
 80151de:	f43f ae8f 	beq.w	8014f00 <_strtod_l+0x488>
 80151e2:	f1ba 0f00 	cmp.w	sl, #0
 80151e6:	dd08      	ble.n	80151fa <_strtod_l+0x782>
 80151e8:	4659      	mov	r1, fp
 80151ea:	4652      	mov	r2, sl
 80151ec:	4620      	mov	r0, r4
 80151ee:	f003 f8dd 	bl	80183ac <__lshift>
 80151f2:	4683      	mov	fp, r0
 80151f4:	2800      	cmp	r0, #0
 80151f6:	f43f ae83 	beq.w	8014f00 <_strtod_l+0x488>
 80151fa:	9a05      	ldr	r2, [sp, #20]
 80151fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80151fe:	4620      	mov	r0, r4
 8015200:	f003 f95c 	bl	80184bc <__mdiff>
 8015204:	4605      	mov	r5, r0
 8015206:	2800      	cmp	r0, #0
 8015208:	f43f ae7a 	beq.w	8014f00 <_strtod_l+0x488>
 801520c:	68c3      	ldr	r3, [r0, #12]
 801520e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015210:	2300      	movs	r3, #0
 8015212:	60c3      	str	r3, [r0, #12]
 8015214:	4659      	mov	r1, fp
 8015216:	f003 f935 	bl	8018484 <__mcmp>
 801521a:	2800      	cmp	r0, #0
 801521c:	da60      	bge.n	80152e0 <_strtod_l+0x868>
 801521e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015220:	ea53 0308 	orrs.w	r3, r3, r8
 8015224:	f040 8084 	bne.w	8015330 <_strtod_l+0x8b8>
 8015228:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801522c:	2b00      	cmp	r3, #0
 801522e:	d17f      	bne.n	8015330 <_strtod_l+0x8b8>
 8015230:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015234:	0d1b      	lsrs	r3, r3, #20
 8015236:	051b      	lsls	r3, r3, #20
 8015238:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801523c:	d978      	bls.n	8015330 <_strtod_l+0x8b8>
 801523e:	696b      	ldr	r3, [r5, #20]
 8015240:	b913      	cbnz	r3, 8015248 <_strtod_l+0x7d0>
 8015242:	692b      	ldr	r3, [r5, #16]
 8015244:	2b01      	cmp	r3, #1
 8015246:	dd73      	ble.n	8015330 <_strtod_l+0x8b8>
 8015248:	4629      	mov	r1, r5
 801524a:	2201      	movs	r2, #1
 801524c:	4620      	mov	r0, r4
 801524e:	f003 f8ad 	bl	80183ac <__lshift>
 8015252:	4659      	mov	r1, fp
 8015254:	4605      	mov	r5, r0
 8015256:	f003 f915 	bl	8018484 <__mcmp>
 801525a:	2800      	cmp	r0, #0
 801525c:	dd68      	ble.n	8015330 <_strtod_l+0x8b8>
 801525e:	9904      	ldr	r1, [sp, #16]
 8015260:	4a54      	ldr	r2, [pc, #336]	; (80153b4 <_strtod_l+0x93c>)
 8015262:	464b      	mov	r3, r9
 8015264:	2900      	cmp	r1, #0
 8015266:	f000 8084 	beq.w	8015372 <_strtod_l+0x8fa>
 801526a:	ea02 0109 	and.w	r1, r2, r9
 801526e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015272:	dc7e      	bgt.n	8015372 <_strtod_l+0x8fa>
 8015274:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015278:	f77f aeb3 	ble.w	8014fe2 <_strtod_l+0x56a>
 801527c:	4b4e      	ldr	r3, [pc, #312]	; (80153b8 <_strtod_l+0x940>)
 801527e:	4640      	mov	r0, r8
 8015280:	4649      	mov	r1, r9
 8015282:	2200      	movs	r2, #0
 8015284:	f7eb f9b8 	bl	80005f8 <__aeabi_dmul>
 8015288:	4b4a      	ldr	r3, [pc, #296]	; (80153b4 <_strtod_l+0x93c>)
 801528a:	400b      	ands	r3, r1
 801528c:	4680      	mov	r8, r0
 801528e:	4689      	mov	r9, r1
 8015290:	2b00      	cmp	r3, #0
 8015292:	f47f ae3f 	bne.w	8014f14 <_strtod_l+0x49c>
 8015296:	2322      	movs	r3, #34	; 0x22
 8015298:	6023      	str	r3, [r4, #0]
 801529a:	e63b      	b.n	8014f14 <_strtod_l+0x49c>
 801529c:	f04f 32ff 	mov.w	r2, #4294967295
 80152a0:	fa02 f303 	lsl.w	r3, r2, r3
 80152a4:	ea03 0808 	and.w	r8, r3, r8
 80152a8:	e6e8      	b.n	801507c <_strtod_l+0x604>
 80152aa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80152ae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80152b2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80152b6:	36e2      	adds	r6, #226	; 0xe2
 80152b8:	fa01 f306 	lsl.w	r3, r1, r6
 80152bc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80152c0:	e748      	b.n	8015154 <_strtod_l+0x6dc>
 80152c2:	2100      	movs	r1, #0
 80152c4:	2301      	movs	r3, #1
 80152c6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80152ca:	e743      	b.n	8015154 <_strtod_l+0x6dc>
 80152cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80152ce:	4632      	mov	r2, r6
 80152d0:	4620      	mov	r0, r4
 80152d2:	f003 f86b 	bl	80183ac <__lshift>
 80152d6:	9016      	str	r0, [sp, #88]	; 0x58
 80152d8:	2800      	cmp	r0, #0
 80152da:	f47f af6b 	bne.w	80151b4 <_strtod_l+0x73c>
 80152de:	e60f      	b.n	8014f00 <_strtod_l+0x488>
 80152e0:	46ca      	mov	sl, r9
 80152e2:	d171      	bne.n	80153c8 <_strtod_l+0x950>
 80152e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80152ea:	b352      	cbz	r2, 8015342 <_strtod_l+0x8ca>
 80152ec:	4a33      	ldr	r2, [pc, #204]	; (80153bc <_strtod_l+0x944>)
 80152ee:	4293      	cmp	r3, r2
 80152f0:	d12a      	bne.n	8015348 <_strtod_l+0x8d0>
 80152f2:	9b04      	ldr	r3, [sp, #16]
 80152f4:	4641      	mov	r1, r8
 80152f6:	b1fb      	cbz	r3, 8015338 <_strtod_l+0x8c0>
 80152f8:	4b2e      	ldr	r3, [pc, #184]	; (80153b4 <_strtod_l+0x93c>)
 80152fa:	ea09 0303 	and.w	r3, r9, r3
 80152fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015302:	f04f 32ff 	mov.w	r2, #4294967295
 8015306:	d81a      	bhi.n	801533e <_strtod_l+0x8c6>
 8015308:	0d1b      	lsrs	r3, r3, #20
 801530a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801530e:	fa02 f303 	lsl.w	r3, r2, r3
 8015312:	4299      	cmp	r1, r3
 8015314:	d118      	bne.n	8015348 <_strtod_l+0x8d0>
 8015316:	4b2a      	ldr	r3, [pc, #168]	; (80153c0 <_strtod_l+0x948>)
 8015318:	459a      	cmp	sl, r3
 801531a:	d102      	bne.n	8015322 <_strtod_l+0x8aa>
 801531c:	3101      	adds	r1, #1
 801531e:	f43f adef 	beq.w	8014f00 <_strtod_l+0x488>
 8015322:	4b24      	ldr	r3, [pc, #144]	; (80153b4 <_strtod_l+0x93c>)
 8015324:	ea0a 0303 	and.w	r3, sl, r3
 8015328:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801532c:	f04f 0800 	mov.w	r8, #0
 8015330:	9b04      	ldr	r3, [sp, #16]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d1a2      	bne.n	801527c <_strtod_l+0x804>
 8015336:	e5ed      	b.n	8014f14 <_strtod_l+0x49c>
 8015338:	f04f 33ff 	mov.w	r3, #4294967295
 801533c:	e7e9      	b.n	8015312 <_strtod_l+0x89a>
 801533e:	4613      	mov	r3, r2
 8015340:	e7e7      	b.n	8015312 <_strtod_l+0x89a>
 8015342:	ea53 0308 	orrs.w	r3, r3, r8
 8015346:	d08a      	beq.n	801525e <_strtod_l+0x7e6>
 8015348:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801534a:	b1e3      	cbz	r3, 8015386 <_strtod_l+0x90e>
 801534c:	ea13 0f0a 	tst.w	r3, sl
 8015350:	d0ee      	beq.n	8015330 <_strtod_l+0x8b8>
 8015352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015354:	9a04      	ldr	r2, [sp, #16]
 8015356:	4640      	mov	r0, r8
 8015358:	4649      	mov	r1, r9
 801535a:	b1c3      	cbz	r3, 801538e <_strtod_l+0x916>
 801535c:	f7ff fb70 	bl	8014a40 <sulp>
 8015360:	4602      	mov	r2, r0
 8015362:	460b      	mov	r3, r1
 8015364:	ec51 0b18 	vmov	r0, r1, d8
 8015368:	f7ea ff90 	bl	800028c <__adddf3>
 801536c:	4680      	mov	r8, r0
 801536e:	4689      	mov	r9, r1
 8015370:	e7de      	b.n	8015330 <_strtod_l+0x8b8>
 8015372:	4013      	ands	r3, r2
 8015374:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015378:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801537c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015380:	f04f 38ff 	mov.w	r8, #4294967295
 8015384:	e7d4      	b.n	8015330 <_strtod_l+0x8b8>
 8015386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015388:	ea13 0f08 	tst.w	r3, r8
 801538c:	e7e0      	b.n	8015350 <_strtod_l+0x8d8>
 801538e:	f7ff fb57 	bl	8014a40 <sulp>
 8015392:	4602      	mov	r2, r0
 8015394:	460b      	mov	r3, r1
 8015396:	ec51 0b18 	vmov	r0, r1, d8
 801539a:	f7ea ff75 	bl	8000288 <__aeabi_dsub>
 801539e:	2200      	movs	r2, #0
 80153a0:	2300      	movs	r3, #0
 80153a2:	4680      	mov	r8, r0
 80153a4:	4689      	mov	r9, r1
 80153a6:	f7eb fb8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80153aa:	2800      	cmp	r0, #0
 80153ac:	d0c0      	beq.n	8015330 <_strtod_l+0x8b8>
 80153ae:	e618      	b.n	8014fe2 <_strtod_l+0x56a>
 80153b0:	fffffc02 	.word	0xfffffc02
 80153b4:	7ff00000 	.word	0x7ff00000
 80153b8:	39500000 	.word	0x39500000
 80153bc:	000fffff 	.word	0x000fffff
 80153c0:	7fefffff 	.word	0x7fefffff
 80153c4:	0801cd18 	.word	0x0801cd18
 80153c8:	4659      	mov	r1, fp
 80153ca:	4628      	mov	r0, r5
 80153cc:	f003 f9ca 	bl	8018764 <__ratio>
 80153d0:	ec57 6b10 	vmov	r6, r7, d0
 80153d4:	ee10 0a10 	vmov	r0, s0
 80153d8:	2200      	movs	r2, #0
 80153da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80153de:	4639      	mov	r1, r7
 80153e0:	f7eb fb86 	bl	8000af0 <__aeabi_dcmple>
 80153e4:	2800      	cmp	r0, #0
 80153e6:	d071      	beq.n	80154cc <_strtod_l+0xa54>
 80153e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d17c      	bne.n	80154e8 <_strtod_l+0xa70>
 80153ee:	f1b8 0f00 	cmp.w	r8, #0
 80153f2:	d15a      	bne.n	80154aa <_strtod_l+0xa32>
 80153f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d15d      	bne.n	80154b8 <_strtod_l+0xa40>
 80153fc:	4b90      	ldr	r3, [pc, #576]	; (8015640 <_strtod_l+0xbc8>)
 80153fe:	2200      	movs	r2, #0
 8015400:	4630      	mov	r0, r6
 8015402:	4639      	mov	r1, r7
 8015404:	f7eb fb6a 	bl	8000adc <__aeabi_dcmplt>
 8015408:	2800      	cmp	r0, #0
 801540a:	d15c      	bne.n	80154c6 <_strtod_l+0xa4e>
 801540c:	4630      	mov	r0, r6
 801540e:	4639      	mov	r1, r7
 8015410:	4b8c      	ldr	r3, [pc, #560]	; (8015644 <_strtod_l+0xbcc>)
 8015412:	2200      	movs	r2, #0
 8015414:	f7eb f8f0 	bl	80005f8 <__aeabi_dmul>
 8015418:	4606      	mov	r6, r0
 801541a:	460f      	mov	r7, r1
 801541c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015420:	9606      	str	r6, [sp, #24]
 8015422:	9307      	str	r3, [sp, #28]
 8015424:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015428:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801542c:	4b86      	ldr	r3, [pc, #536]	; (8015648 <_strtod_l+0xbd0>)
 801542e:	ea0a 0303 	and.w	r3, sl, r3
 8015432:	930d      	str	r3, [sp, #52]	; 0x34
 8015434:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015436:	4b85      	ldr	r3, [pc, #532]	; (801564c <_strtod_l+0xbd4>)
 8015438:	429a      	cmp	r2, r3
 801543a:	f040 8090 	bne.w	801555e <_strtod_l+0xae6>
 801543e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8015442:	ec49 8b10 	vmov	d0, r8, r9
 8015446:	f003 f8c3 	bl	80185d0 <__ulp>
 801544a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801544e:	ec51 0b10 	vmov	r0, r1, d0
 8015452:	f7eb f8d1 	bl	80005f8 <__aeabi_dmul>
 8015456:	4642      	mov	r2, r8
 8015458:	464b      	mov	r3, r9
 801545a:	f7ea ff17 	bl	800028c <__adddf3>
 801545e:	460b      	mov	r3, r1
 8015460:	4979      	ldr	r1, [pc, #484]	; (8015648 <_strtod_l+0xbd0>)
 8015462:	4a7b      	ldr	r2, [pc, #492]	; (8015650 <_strtod_l+0xbd8>)
 8015464:	4019      	ands	r1, r3
 8015466:	4291      	cmp	r1, r2
 8015468:	4680      	mov	r8, r0
 801546a:	d944      	bls.n	80154f6 <_strtod_l+0xa7e>
 801546c:	ee18 2a90 	vmov	r2, s17
 8015470:	4b78      	ldr	r3, [pc, #480]	; (8015654 <_strtod_l+0xbdc>)
 8015472:	429a      	cmp	r2, r3
 8015474:	d104      	bne.n	8015480 <_strtod_l+0xa08>
 8015476:	ee18 3a10 	vmov	r3, s16
 801547a:	3301      	adds	r3, #1
 801547c:	f43f ad40 	beq.w	8014f00 <_strtod_l+0x488>
 8015480:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8015654 <_strtod_l+0xbdc>
 8015484:	f04f 38ff 	mov.w	r8, #4294967295
 8015488:	9916      	ldr	r1, [sp, #88]	; 0x58
 801548a:	4620      	mov	r0, r4
 801548c:	f002 fd74 	bl	8017f78 <_Bfree>
 8015490:	9905      	ldr	r1, [sp, #20]
 8015492:	4620      	mov	r0, r4
 8015494:	f002 fd70 	bl	8017f78 <_Bfree>
 8015498:	4659      	mov	r1, fp
 801549a:	4620      	mov	r0, r4
 801549c:	f002 fd6c 	bl	8017f78 <_Bfree>
 80154a0:	4629      	mov	r1, r5
 80154a2:	4620      	mov	r0, r4
 80154a4:	f002 fd68 	bl	8017f78 <_Bfree>
 80154a8:	e609      	b.n	80150be <_strtod_l+0x646>
 80154aa:	f1b8 0f01 	cmp.w	r8, #1
 80154ae:	d103      	bne.n	80154b8 <_strtod_l+0xa40>
 80154b0:	f1b9 0f00 	cmp.w	r9, #0
 80154b4:	f43f ad95 	beq.w	8014fe2 <_strtod_l+0x56a>
 80154b8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8015610 <_strtod_l+0xb98>
 80154bc:	4f60      	ldr	r7, [pc, #384]	; (8015640 <_strtod_l+0xbc8>)
 80154be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80154c2:	2600      	movs	r6, #0
 80154c4:	e7ae      	b.n	8015424 <_strtod_l+0x9ac>
 80154c6:	4f5f      	ldr	r7, [pc, #380]	; (8015644 <_strtod_l+0xbcc>)
 80154c8:	2600      	movs	r6, #0
 80154ca:	e7a7      	b.n	801541c <_strtod_l+0x9a4>
 80154cc:	4b5d      	ldr	r3, [pc, #372]	; (8015644 <_strtod_l+0xbcc>)
 80154ce:	4630      	mov	r0, r6
 80154d0:	4639      	mov	r1, r7
 80154d2:	2200      	movs	r2, #0
 80154d4:	f7eb f890 	bl	80005f8 <__aeabi_dmul>
 80154d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154da:	4606      	mov	r6, r0
 80154dc:	460f      	mov	r7, r1
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d09c      	beq.n	801541c <_strtod_l+0x9a4>
 80154e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80154e6:	e79d      	b.n	8015424 <_strtod_l+0x9ac>
 80154e8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8015618 <_strtod_l+0xba0>
 80154ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 80154f0:	ec57 6b17 	vmov	r6, r7, d7
 80154f4:	e796      	b.n	8015424 <_strtod_l+0x9ac>
 80154f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80154fa:	9b04      	ldr	r3, [sp, #16]
 80154fc:	46ca      	mov	sl, r9
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d1c2      	bne.n	8015488 <_strtod_l+0xa10>
 8015502:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015506:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015508:	0d1b      	lsrs	r3, r3, #20
 801550a:	051b      	lsls	r3, r3, #20
 801550c:	429a      	cmp	r2, r3
 801550e:	d1bb      	bne.n	8015488 <_strtod_l+0xa10>
 8015510:	4630      	mov	r0, r6
 8015512:	4639      	mov	r1, r7
 8015514:	f7eb fbd0 	bl	8000cb8 <__aeabi_d2lz>
 8015518:	f7eb f840 	bl	800059c <__aeabi_l2d>
 801551c:	4602      	mov	r2, r0
 801551e:	460b      	mov	r3, r1
 8015520:	4630      	mov	r0, r6
 8015522:	4639      	mov	r1, r7
 8015524:	f7ea feb0 	bl	8000288 <__aeabi_dsub>
 8015528:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801552a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801552e:	ea43 0308 	orr.w	r3, r3, r8
 8015532:	4313      	orrs	r3, r2
 8015534:	4606      	mov	r6, r0
 8015536:	460f      	mov	r7, r1
 8015538:	d054      	beq.n	80155e4 <_strtod_l+0xb6c>
 801553a:	a339      	add	r3, pc, #228	; (adr r3, 8015620 <_strtod_l+0xba8>)
 801553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015540:	f7eb facc 	bl	8000adc <__aeabi_dcmplt>
 8015544:	2800      	cmp	r0, #0
 8015546:	f47f ace5 	bne.w	8014f14 <_strtod_l+0x49c>
 801554a:	a337      	add	r3, pc, #220	; (adr r3, 8015628 <_strtod_l+0xbb0>)
 801554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015550:	4630      	mov	r0, r6
 8015552:	4639      	mov	r1, r7
 8015554:	f7eb fae0 	bl	8000b18 <__aeabi_dcmpgt>
 8015558:	2800      	cmp	r0, #0
 801555a:	d095      	beq.n	8015488 <_strtod_l+0xa10>
 801555c:	e4da      	b.n	8014f14 <_strtod_l+0x49c>
 801555e:	9b04      	ldr	r3, [sp, #16]
 8015560:	b333      	cbz	r3, 80155b0 <_strtod_l+0xb38>
 8015562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015564:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015568:	d822      	bhi.n	80155b0 <_strtod_l+0xb38>
 801556a:	a331      	add	r3, pc, #196	; (adr r3, 8015630 <_strtod_l+0xbb8>)
 801556c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015570:	4630      	mov	r0, r6
 8015572:	4639      	mov	r1, r7
 8015574:	f7eb fabc 	bl	8000af0 <__aeabi_dcmple>
 8015578:	b1a0      	cbz	r0, 80155a4 <_strtod_l+0xb2c>
 801557a:	4639      	mov	r1, r7
 801557c:	4630      	mov	r0, r6
 801557e:	f7eb fb13 	bl	8000ba8 <__aeabi_d2uiz>
 8015582:	2801      	cmp	r0, #1
 8015584:	bf38      	it	cc
 8015586:	2001      	movcc	r0, #1
 8015588:	f7ea ffbc 	bl	8000504 <__aeabi_ui2d>
 801558c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801558e:	4606      	mov	r6, r0
 8015590:	460f      	mov	r7, r1
 8015592:	bb23      	cbnz	r3, 80155de <_strtod_l+0xb66>
 8015594:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015598:	9010      	str	r0, [sp, #64]	; 0x40
 801559a:	9311      	str	r3, [sp, #68]	; 0x44
 801559c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80155a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80155a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80155a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80155a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80155ac:	1a9b      	subs	r3, r3, r2
 80155ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80155b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80155b4:	eeb0 0a48 	vmov.f32	s0, s16
 80155b8:	eef0 0a68 	vmov.f32	s1, s17
 80155bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80155c0:	f003 f806 	bl	80185d0 <__ulp>
 80155c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80155c8:	ec53 2b10 	vmov	r2, r3, d0
 80155cc:	f7eb f814 	bl	80005f8 <__aeabi_dmul>
 80155d0:	ec53 2b18 	vmov	r2, r3, d8
 80155d4:	f7ea fe5a 	bl	800028c <__adddf3>
 80155d8:	4680      	mov	r8, r0
 80155da:	4689      	mov	r9, r1
 80155dc:	e78d      	b.n	80154fa <_strtod_l+0xa82>
 80155de:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80155e2:	e7db      	b.n	801559c <_strtod_l+0xb24>
 80155e4:	a314      	add	r3, pc, #80	; (adr r3, 8015638 <_strtod_l+0xbc0>)
 80155e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ea:	f7eb fa77 	bl	8000adc <__aeabi_dcmplt>
 80155ee:	e7b3      	b.n	8015558 <_strtod_l+0xae0>
 80155f0:	2300      	movs	r3, #0
 80155f2:	930a      	str	r3, [sp, #40]	; 0x28
 80155f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80155f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80155f8:	6013      	str	r3, [r2, #0]
 80155fa:	f7ff ba7c 	b.w	8014af6 <_strtod_l+0x7e>
 80155fe:	2a65      	cmp	r2, #101	; 0x65
 8015600:	f43f ab75 	beq.w	8014cee <_strtod_l+0x276>
 8015604:	2a45      	cmp	r2, #69	; 0x45
 8015606:	f43f ab72 	beq.w	8014cee <_strtod_l+0x276>
 801560a:	2301      	movs	r3, #1
 801560c:	f7ff bbaa 	b.w	8014d64 <_strtod_l+0x2ec>
 8015610:	00000000 	.word	0x00000000
 8015614:	bff00000 	.word	0xbff00000
 8015618:	00000000 	.word	0x00000000
 801561c:	3ff00000 	.word	0x3ff00000
 8015620:	94a03595 	.word	0x94a03595
 8015624:	3fdfffff 	.word	0x3fdfffff
 8015628:	35afe535 	.word	0x35afe535
 801562c:	3fe00000 	.word	0x3fe00000
 8015630:	ffc00000 	.word	0xffc00000
 8015634:	41dfffff 	.word	0x41dfffff
 8015638:	94a03595 	.word	0x94a03595
 801563c:	3fcfffff 	.word	0x3fcfffff
 8015640:	3ff00000 	.word	0x3ff00000
 8015644:	3fe00000 	.word	0x3fe00000
 8015648:	7ff00000 	.word	0x7ff00000
 801564c:	7fe00000 	.word	0x7fe00000
 8015650:	7c9fffff 	.word	0x7c9fffff
 8015654:	7fefffff 	.word	0x7fefffff

08015658 <_strtod_r>:
 8015658:	4b01      	ldr	r3, [pc, #4]	; (8015660 <_strtod_r+0x8>)
 801565a:	f7ff ba0d 	b.w	8014a78 <_strtod_l>
 801565e:	bf00      	nop
 8015660:	2000013c 	.word	0x2000013c

08015664 <strtof>:
 8015664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015668:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801572c <strtof+0xc8>
 801566c:	4b2a      	ldr	r3, [pc, #168]	; (8015718 <strtof+0xb4>)
 801566e:	460a      	mov	r2, r1
 8015670:	ed2d 8b02 	vpush	{d8}
 8015674:	4601      	mov	r1, r0
 8015676:	f8d8 0000 	ldr.w	r0, [r8]
 801567a:	f7ff f9fd 	bl	8014a78 <_strtod_l>
 801567e:	ec55 4b10 	vmov	r4, r5, d0
 8015682:	ee10 2a10 	vmov	r2, s0
 8015686:	ee10 0a10 	vmov	r0, s0
 801568a:	462b      	mov	r3, r5
 801568c:	4629      	mov	r1, r5
 801568e:	f7eb fa4d 	bl	8000b2c <__aeabi_dcmpun>
 8015692:	b190      	cbz	r0, 80156ba <strtof+0x56>
 8015694:	2d00      	cmp	r5, #0
 8015696:	4821      	ldr	r0, [pc, #132]	; (801571c <strtof+0xb8>)
 8015698:	da09      	bge.n	80156ae <strtof+0x4a>
 801569a:	f001 f9d9 	bl	8016a50 <nanf>
 801569e:	eeb1 8a40 	vneg.f32	s16, s0
 80156a2:	eeb0 0a48 	vmov.f32	s0, s16
 80156a6:	ecbd 8b02 	vpop	{d8}
 80156aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156ae:	ecbd 8b02 	vpop	{d8}
 80156b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80156b6:	f001 b9cb 	b.w	8016a50 <nanf>
 80156ba:	4620      	mov	r0, r4
 80156bc:	4629      	mov	r1, r5
 80156be:	f7eb fa93 	bl	8000be8 <__aeabi_d2f>
 80156c2:	ee08 0a10 	vmov	s16, r0
 80156c6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8015720 <strtof+0xbc>
 80156ca:	eeb0 7ac8 	vabs.f32	s14, s16
 80156ce:	eeb4 7a67 	vcmp.f32	s14, s15
 80156d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156d6:	dd11      	ble.n	80156fc <strtof+0x98>
 80156d8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80156dc:	4b11      	ldr	r3, [pc, #68]	; (8015724 <strtof+0xc0>)
 80156de:	f04f 32ff 	mov.w	r2, #4294967295
 80156e2:	4620      	mov	r0, r4
 80156e4:	4639      	mov	r1, r7
 80156e6:	f7eb fa21 	bl	8000b2c <__aeabi_dcmpun>
 80156ea:	b980      	cbnz	r0, 801570e <strtof+0xaa>
 80156ec:	4b0d      	ldr	r3, [pc, #52]	; (8015724 <strtof+0xc0>)
 80156ee:	f04f 32ff 	mov.w	r2, #4294967295
 80156f2:	4620      	mov	r0, r4
 80156f4:	4639      	mov	r1, r7
 80156f6:	f7eb f9fb 	bl	8000af0 <__aeabi_dcmple>
 80156fa:	b940      	cbnz	r0, 801570e <strtof+0xaa>
 80156fc:	ee18 3a10 	vmov	r3, s16
 8015700:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8015704:	d1cd      	bne.n	80156a2 <strtof+0x3e>
 8015706:	4b08      	ldr	r3, [pc, #32]	; (8015728 <strtof+0xc4>)
 8015708:	402b      	ands	r3, r5
 801570a:	2b00      	cmp	r3, #0
 801570c:	d0c9      	beq.n	80156a2 <strtof+0x3e>
 801570e:	f8d8 3000 	ldr.w	r3, [r8]
 8015712:	2222      	movs	r2, #34	; 0x22
 8015714:	601a      	str	r2, [r3, #0]
 8015716:	e7c4      	b.n	80156a2 <strtof+0x3e>
 8015718:	2000013c 	.word	0x2000013c
 801571c:	0801cf2e 	.word	0x0801cf2e
 8015720:	7f7fffff 	.word	0x7f7fffff
 8015724:	7fefffff 	.word	0x7fefffff
 8015728:	7ff00000 	.word	0x7ff00000
 801572c:	200002f4 	.word	0x200002f4

08015730 <_strtol_l.constprop.0>:
 8015730:	2b01      	cmp	r3, #1
 8015732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015736:	d001      	beq.n	801573c <_strtol_l.constprop.0+0xc>
 8015738:	2b24      	cmp	r3, #36	; 0x24
 801573a:	d906      	bls.n	801574a <_strtol_l.constprop.0+0x1a>
 801573c:	f001 f93c 	bl	80169b8 <__errno>
 8015740:	2316      	movs	r3, #22
 8015742:	6003      	str	r3, [r0, #0]
 8015744:	2000      	movs	r0, #0
 8015746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801574a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8015830 <_strtol_l.constprop.0+0x100>
 801574e:	460d      	mov	r5, r1
 8015750:	462e      	mov	r6, r5
 8015752:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015756:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801575a:	f017 0708 	ands.w	r7, r7, #8
 801575e:	d1f7      	bne.n	8015750 <_strtol_l.constprop.0+0x20>
 8015760:	2c2d      	cmp	r4, #45	; 0x2d
 8015762:	d132      	bne.n	80157ca <_strtol_l.constprop.0+0x9a>
 8015764:	782c      	ldrb	r4, [r5, #0]
 8015766:	2701      	movs	r7, #1
 8015768:	1cb5      	adds	r5, r6, #2
 801576a:	2b00      	cmp	r3, #0
 801576c:	d05b      	beq.n	8015826 <_strtol_l.constprop.0+0xf6>
 801576e:	2b10      	cmp	r3, #16
 8015770:	d109      	bne.n	8015786 <_strtol_l.constprop.0+0x56>
 8015772:	2c30      	cmp	r4, #48	; 0x30
 8015774:	d107      	bne.n	8015786 <_strtol_l.constprop.0+0x56>
 8015776:	782c      	ldrb	r4, [r5, #0]
 8015778:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801577c:	2c58      	cmp	r4, #88	; 0x58
 801577e:	d14d      	bne.n	801581c <_strtol_l.constprop.0+0xec>
 8015780:	786c      	ldrb	r4, [r5, #1]
 8015782:	2310      	movs	r3, #16
 8015784:	3502      	adds	r5, #2
 8015786:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801578a:	f108 38ff 	add.w	r8, r8, #4294967295
 801578e:	f04f 0e00 	mov.w	lr, #0
 8015792:	fbb8 f9f3 	udiv	r9, r8, r3
 8015796:	4676      	mov	r6, lr
 8015798:	fb03 8a19 	mls	sl, r3, r9, r8
 801579c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80157a0:	f1bc 0f09 	cmp.w	ip, #9
 80157a4:	d816      	bhi.n	80157d4 <_strtol_l.constprop.0+0xa4>
 80157a6:	4664      	mov	r4, ip
 80157a8:	42a3      	cmp	r3, r4
 80157aa:	dd24      	ble.n	80157f6 <_strtol_l.constprop.0+0xc6>
 80157ac:	f1be 3fff 	cmp.w	lr, #4294967295
 80157b0:	d008      	beq.n	80157c4 <_strtol_l.constprop.0+0x94>
 80157b2:	45b1      	cmp	r9, r6
 80157b4:	d31c      	bcc.n	80157f0 <_strtol_l.constprop.0+0xc0>
 80157b6:	d101      	bne.n	80157bc <_strtol_l.constprop.0+0x8c>
 80157b8:	45a2      	cmp	sl, r4
 80157ba:	db19      	blt.n	80157f0 <_strtol_l.constprop.0+0xc0>
 80157bc:	fb06 4603 	mla	r6, r6, r3, r4
 80157c0:	f04f 0e01 	mov.w	lr, #1
 80157c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80157c8:	e7e8      	b.n	801579c <_strtol_l.constprop.0+0x6c>
 80157ca:	2c2b      	cmp	r4, #43	; 0x2b
 80157cc:	bf04      	itt	eq
 80157ce:	782c      	ldrbeq	r4, [r5, #0]
 80157d0:	1cb5      	addeq	r5, r6, #2
 80157d2:	e7ca      	b.n	801576a <_strtol_l.constprop.0+0x3a>
 80157d4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80157d8:	f1bc 0f19 	cmp.w	ip, #25
 80157dc:	d801      	bhi.n	80157e2 <_strtol_l.constprop.0+0xb2>
 80157de:	3c37      	subs	r4, #55	; 0x37
 80157e0:	e7e2      	b.n	80157a8 <_strtol_l.constprop.0+0x78>
 80157e2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80157e6:	f1bc 0f19 	cmp.w	ip, #25
 80157ea:	d804      	bhi.n	80157f6 <_strtol_l.constprop.0+0xc6>
 80157ec:	3c57      	subs	r4, #87	; 0x57
 80157ee:	e7db      	b.n	80157a8 <_strtol_l.constprop.0+0x78>
 80157f0:	f04f 3eff 	mov.w	lr, #4294967295
 80157f4:	e7e6      	b.n	80157c4 <_strtol_l.constprop.0+0x94>
 80157f6:	f1be 3fff 	cmp.w	lr, #4294967295
 80157fa:	d105      	bne.n	8015808 <_strtol_l.constprop.0+0xd8>
 80157fc:	2322      	movs	r3, #34	; 0x22
 80157fe:	6003      	str	r3, [r0, #0]
 8015800:	4646      	mov	r6, r8
 8015802:	b942      	cbnz	r2, 8015816 <_strtol_l.constprop.0+0xe6>
 8015804:	4630      	mov	r0, r6
 8015806:	e79e      	b.n	8015746 <_strtol_l.constprop.0+0x16>
 8015808:	b107      	cbz	r7, 801580c <_strtol_l.constprop.0+0xdc>
 801580a:	4276      	negs	r6, r6
 801580c:	2a00      	cmp	r2, #0
 801580e:	d0f9      	beq.n	8015804 <_strtol_l.constprop.0+0xd4>
 8015810:	f1be 0f00 	cmp.w	lr, #0
 8015814:	d000      	beq.n	8015818 <_strtol_l.constprop.0+0xe8>
 8015816:	1e69      	subs	r1, r5, #1
 8015818:	6011      	str	r1, [r2, #0]
 801581a:	e7f3      	b.n	8015804 <_strtol_l.constprop.0+0xd4>
 801581c:	2430      	movs	r4, #48	; 0x30
 801581e:	2b00      	cmp	r3, #0
 8015820:	d1b1      	bne.n	8015786 <_strtol_l.constprop.0+0x56>
 8015822:	2308      	movs	r3, #8
 8015824:	e7af      	b.n	8015786 <_strtol_l.constprop.0+0x56>
 8015826:	2c30      	cmp	r4, #48	; 0x30
 8015828:	d0a5      	beq.n	8015776 <_strtol_l.constprop.0+0x46>
 801582a:	230a      	movs	r3, #10
 801582c:	e7ab      	b.n	8015786 <_strtol_l.constprop.0+0x56>
 801582e:	bf00      	nop
 8015830:	0801cd41 	.word	0x0801cd41

08015834 <_strtol_r>:
 8015834:	f7ff bf7c 	b.w	8015730 <_strtol_l.constprop.0>

08015838 <strtol>:
 8015838:	4613      	mov	r3, r2
 801583a:	460a      	mov	r2, r1
 801583c:	4601      	mov	r1, r0
 801583e:	4802      	ldr	r0, [pc, #8]	; (8015848 <strtol+0x10>)
 8015840:	6800      	ldr	r0, [r0, #0]
 8015842:	f7ff bf75 	b.w	8015730 <_strtol_l.constprop.0>
 8015846:	bf00      	nop
 8015848:	200002f4 	.word	0x200002f4

0801584c <__cvt>:
 801584c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015850:	ec55 4b10 	vmov	r4, r5, d0
 8015854:	2d00      	cmp	r5, #0
 8015856:	460e      	mov	r6, r1
 8015858:	4619      	mov	r1, r3
 801585a:	462b      	mov	r3, r5
 801585c:	bfbb      	ittet	lt
 801585e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015862:	461d      	movlt	r5, r3
 8015864:	2300      	movge	r3, #0
 8015866:	232d      	movlt	r3, #45	; 0x2d
 8015868:	700b      	strb	r3, [r1, #0]
 801586a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801586c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015870:	4691      	mov	r9, r2
 8015872:	f023 0820 	bic.w	r8, r3, #32
 8015876:	bfbc      	itt	lt
 8015878:	4622      	movlt	r2, r4
 801587a:	4614      	movlt	r4, r2
 801587c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015880:	d005      	beq.n	801588e <__cvt+0x42>
 8015882:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015886:	d100      	bne.n	801588a <__cvt+0x3e>
 8015888:	3601      	adds	r6, #1
 801588a:	2102      	movs	r1, #2
 801588c:	e000      	b.n	8015890 <__cvt+0x44>
 801588e:	2103      	movs	r1, #3
 8015890:	ab03      	add	r3, sp, #12
 8015892:	9301      	str	r3, [sp, #4]
 8015894:	ab02      	add	r3, sp, #8
 8015896:	9300      	str	r3, [sp, #0]
 8015898:	ec45 4b10 	vmov	d0, r4, r5
 801589c:	4653      	mov	r3, sl
 801589e:	4632      	mov	r2, r6
 80158a0:	f001 f982 	bl	8016ba8 <_dtoa_r>
 80158a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80158a8:	4607      	mov	r7, r0
 80158aa:	d102      	bne.n	80158b2 <__cvt+0x66>
 80158ac:	f019 0f01 	tst.w	r9, #1
 80158b0:	d022      	beq.n	80158f8 <__cvt+0xac>
 80158b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80158b6:	eb07 0906 	add.w	r9, r7, r6
 80158ba:	d110      	bne.n	80158de <__cvt+0x92>
 80158bc:	783b      	ldrb	r3, [r7, #0]
 80158be:	2b30      	cmp	r3, #48	; 0x30
 80158c0:	d10a      	bne.n	80158d8 <__cvt+0x8c>
 80158c2:	2200      	movs	r2, #0
 80158c4:	2300      	movs	r3, #0
 80158c6:	4620      	mov	r0, r4
 80158c8:	4629      	mov	r1, r5
 80158ca:	f7eb f8fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80158ce:	b918      	cbnz	r0, 80158d8 <__cvt+0x8c>
 80158d0:	f1c6 0601 	rsb	r6, r6, #1
 80158d4:	f8ca 6000 	str.w	r6, [sl]
 80158d8:	f8da 3000 	ldr.w	r3, [sl]
 80158dc:	4499      	add	r9, r3
 80158de:	2200      	movs	r2, #0
 80158e0:	2300      	movs	r3, #0
 80158e2:	4620      	mov	r0, r4
 80158e4:	4629      	mov	r1, r5
 80158e6:	f7eb f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80158ea:	b108      	cbz	r0, 80158f0 <__cvt+0xa4>
 80158ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80158f0:	2230      	movs	r2, #48	; 0x30
 80158f2:	9b03      	ldr	r3, [sp, #12]
 80158f4:	454b      	cmp	r3, r9
 80158f6:	d307      	bcc.n	8015908 <__cvt+0xbc>
 80158f8:	9b03      	ldr	r3, [sp, #12]
 80158fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80158fc:	1bdb      	subs	r3, r3, r7
 80158fe:	4638      	mov	r0, r7
 8015900:	6013      	str	r3, [r2, #0]
 8015902:	b004      	add	sp, #16
 8015904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015908:	1c59      	adds	r1, r3, #1
 801590a:	9103      	str	r1, [sp, #12]
 801590c:	701a      	strb	r2, [r3, #0]
 801590e:	e7f0      	b.n	80158f2 <__cvt+0xa6>

08015910 <__exponent>:
 8015910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015912:	4603      	mov	r3, r0
 8015914:	2900      	cmp	r1, #0
 8015916:	bfb8      	it	lt
 8015918:	4249      	neglt	r1, r1
 801591a:	f803 2b02 	strb.w	r2, [r3], #2
 801591e:	bfb4      	ite	lt
 8015920:	222d      	movlt	r2, #45	; 0x2d
 8015922:	222b      	movge	r2, #43	; 0x2b
 8015924:	2909      	cmp	r1, #9
 8015926:	7042      	strb	r2, [r0, #1]
 8015928:	dd2a      	ble.n	8015980 <__exponent+0x70>
 801592a:	f10d 0207 	add.w	r2, sp, #7
 801592e:	4617      	mov	r7, r2
 8015930:	260a      	movs	r6, #10
 8015932:	4694      	mov	ip, r2
 8015934:	fb91 f5f6 	sdiv	r5, r1, r6
 8015938:	fb06 1415 	mls	r4, r6, r5, r1
 801593c:	3430      	adds	r4, #48	; 0x30
 801593e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8015942:	460c      	mov	r4, r1
 8015944:	2c63      	cmp	r4, #99	; 0x63
 8015946:	f102 32ff 	add.w	r2, r2, #4294967295
 801594a:	4629      	mov	r1, r5
 801594c:	dcf1      	bgt.n	8015932 <__exponent+0x22>
 801594e:	3130      	adds	r1, #48	; 0x30
 8015950:	f1ac 0402 	sub.w	r4, ip, #2
 8015954:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015958:	1c41      	adds	r1, r0, #1
 801595a:	4622      	mov	r2, r4
 801595c:	42ba      	cmp	r2, r7
 801595e:	d30a      	bcc.n	8015976 <__exponent+0x66>
 8015960:	f10d 0209 	add.w	r2, sp, #9
 8015964:	eba2 020c 	sub.w	r2, r2, ip
 8015968:	42bc      	cmp	r4, r7
 801596a:	bf88      	it	hi
 801596c:	2200      	movhi	r2, #0
 801596e:	4413      	add	r3, r2
 8015970:	1a18      	subs	r0, r3, r0
 8015972:	b003      	add	sp, #12
 8015974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015976:	f812 5b01 	ldrb.w	r5, [r2], #1
 801597a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801597e:	e7ed      	b.n	801595c <__exponent+0x4c>
 8015980:	2330      	movs	r3, #48	; 0x30
 8015982:	3130      	adds	r1, #48	; 0x30
 8015984:	7083      	strb	r3, [r0, #2]
 8015986:	70c1      	strb	r1, [r0, #3]
 8015988:	1d03      	adds	r3, r0, #4
 801598a:	e7f1      	b.n	8015970 <__exponent+0x60>

0801598c <_printf_float>:
 801598c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015990:	ed2d 8b02 	vpush	{d8}
 8015994:	b08d      	sub	sp, #52	; 0x34
 8015996:	460c      	mov	r4, r1
 8015998:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801599c:	4616      	mov	r6, r2
 801599e:	461f      	mov	r7, r3
 80159a0:	4605      	mov	r5, r0
 80159a2:	f000 ffaf 	bl	8016904 <_localeconv_r>
 80159a6:	f8d0 a000 	ldr.w	sl, [r0]
 80159aa:	4650      	mov	r0, sl
 80159ac:	f7ea fc60 	bl	8000270 <strlen>
 80159b0:	2300      	movs	r3, #0
 80159b2:	930a      	str	r3, [sp, #40]	; 0x28
 80159b4:	6823      	ldr	r3, [r4, #0]
 80159b6:	9305      	str	r3, [sp, #20]
 80159b8:	f8d8 3000 	ldr.w	r3, [r8]
 80159bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80159c0:	3307      	adds	r3, #7
 80159c2:	f023 0307 	bic.w	r3, r3, #7
 80159c6:	f103 0208 	add.w	r2, r3, #8
 80159ca:	f8c8 2000 	str.w	r2, [r8]
 80159ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80159d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80159d6:	9307      	str	r3, [sp, #28]
 80159d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80159dc:	ee08 0a10 	vmov	s16, r0
 80159e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80159e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80159e8:	4b9e      	ldr	r3, [pc, #632]	; (8015c64 <_printf_float+0x2d8>)
 80159ea:	f04f 32ff 	mov.w	r2, #4294967295
 80159ee:	f7eb f89d 	bl	8000b2c <__aeabi_dcmpun>
 80159f2:	bb88      	cbnz	r0, 8015a58 <_printf_float+0xcc>
 80159f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80159f8:	4b9a      	ldr	r3, [pc, #616]	; (8015c64 <_printf_float+0x2d8>)
 80159fa:	f04f 32ff 	mov.w	r2, #4294967295
 80159fe:	f7eb f877 	bl	8000af0 <__aeabi_dcmple>
 8015a02:	bb48      	cbnz	r0, 8015a58 <_printf_float+0xcc>
 8015a04:	2200      	movs	r2, #0
 8015a06:	2300      	movs	r3, #0
 8015a08:	4640      	mov	r0, r8
 8015a0a:	4649      	mov	r1, r9
 8015a0c:	f7eb f866 	bl	8000adc <__aeabi_dcmplt>
 8015a10:	b110      	cbz	r0, 8015a18 <_printf_float+0x8c>
 8015a12:	232d      	movs	r3, #45	; 0x2d
 8015a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a18:	4a93      	ldr	r2, [pc, #588]	; (8015c68 <_printf_float+0x2dc>)
 8015a1a:	4b94      	ldr	r3, [pc, #592]	; (8015c6c <_printf_float+0x2e0>)
 8015a1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015a20:	bf94      	ite	ls
 8015a22:	4690      	movls	r8, r2
 8015a24:	4698      	movhi	r8, r3
 8015a26:	2303      	movs	r3, #3
 8015a28:	6123      	str	r3, [r4, #16]
 8015a2a:	9b05      	ldr	r3, [sp, #20]
 8015a2c:	f023 0304 	bic.w	r3, r3, #4
 8015a30:	6023      	str	r3, [r4, #0]
 8015a32:	f04f 0900 	mov.w	r9, #0
 8015a36:	9700      	str	r7, [sp, #0]
 8015a38:	4633      	mov	r3, r6
 8015a3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8015a3c:	4621      	mov	r1, r4
 8015a3e:	4628      	mov	r0, r5
 8015a40:	f000 f9da 	bl	8015df8 <_printf_common>
 8015a44:	3001      	adds	r0, #1
 8015a46:	f040 8090 	bne.w	8015b6a <_printf_float+0x1de>
 8015a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8015a4e:	b00d      	add	sp, #52	; 0x34
 8015a50:	ecbd 8b02 	vpop	{d8}
 8015a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a58:	4642      	mov	r2, r8
 8015a5a:	464b      	mov	r3, r9
 8015a5c:	4640      	mov	r0, r8
 8015a5e:	4649      	mov	r1, r9
 8015a60:	f7eb f864 	bl	8000b2c <__aeabi_dcmpun>
 8015a64:	b140      	cbz	r0, 8015a78 <_printf_float+0xec>
 8015a66:	464b      	mov	r3, r9
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	bfbc      	itt	lt
 8015a6c:	232d      	movlt	r3, #45	; 0x2d
 8015a6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015a72:	4a7f      	ldr	r2, [pc, #508]	; (8015c70 <_printf_float+0x2e4>)
 8015a74:	4b7f      	ldr	r3, [pc, #508]	; (8015c74 <_printf_float+0x2e8>)
 8015a76:	e7d1      	b.n	8015a1c <_printf_float+0x90>
 8015a78:	6863      	ldr	r3, [r4, #4]
 8015a7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015a7e:	9206      	str	r2, [sp, #24]
 8015a80:	1c5a      	adds	r2, r3, #1
 8015a82:	d13f      	bne.n	8015b04 <_printf_float+0x178>
 8015a84:	2306      	movs	r3, #6
 8015a86:	6063      	str	r3, [r4, #4]
 8015a88:	9b05      	ldr	r3, [sp, #20]
 8015a8a:	6861      	ldr	r1, [r4, #4]
 8015a8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015a90:	2300      	movs	r3, #0
 8015a92:	9303      	str	r3, [sp, #12]
 8015a94:	ab0a      	add	r3, sp, #40	; 0x28
 8015a96:	e9cd b301 	strd	fp, r3, [sp, #4]
 8015a9a:	ab09      	add	r3, sp, #36	; 0x24
 8015a9c:	ec49 8b10 	vmov	d0, r8, r9
 8015aa0:	9300      	str	r3, [sp, #0]
 8015aa2:	6022      	str	r2, [r4, #0]
 8015aa4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015aa8:	4628      	mov	r0, r5
 8015aaa:	f7ff fecf 	bl	801584c <__cvt>
 8015aae:	9b06      	ldr	r3, [sp, #24]
 8015ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ab2:	2b47      	cmp	r3, #71	; 0x47
 8015ab4:	4680      	mov	r8, r0
 8015ab6:	d108      	bne.n	8015aca <_printf_float+0x13e>
 8015ab8:	1cc8      	adds	r0, r1, #3
 8015aba:	db02      	blt.n	8015ac2 <_printf_float+0x136>
 8015abc:	6863      	ldr	r3, [r4, #4]
 8015abe:	4299      	cmp	r1, r3
 8015ac0:	dd41      	ble.n	8015b46 <_printf_float+0x1ba>
 8015ac2:	f1ab 0302 	sub.w	r3, fp, #2
 8015ac6:	fa5f fb83 	uxtb.w	fp, r3
 8015aca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015ace:	d820      	bhi.n	8015b12 <_printf_float+0x186>
 8015ad0:	3901      	subs	r1, #1
 8015ad2:	465a      	mov	r2, fp
 8015ad4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015ad8:	9109      	str	r1, [sp, #36]	; 0x24
 8015ada:	f7ff ff19 	bl	8015910 <__exponent>
 8015ade:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ae0:	1813      	adds	r3, r2, r0
 8015ae2:	2a01      	cmp	r2, #1
 8015ae4:	4681      	mov	r9, r0
 8015ae6:	6123      	str	r3, [r4, #16]
 8015ae8:	dc02      	bgt.n	8015af0 <_printf_float+0x164>
 8015aea:	6822      	ldr	r2, [r4, #0]
 8015aec:	07d2      	lsls	r2, r2, #31
 8015aee:	d501      	bpl.n	8015af4 <_printf_float+0x168>
 8015af0:	3301      	adds	r3, #1
 8015af2:	6123      	str	r3, [r4, #16]
 8015af4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d09c      	beq.n	8015a36 <_printf_float+0xaa>
 8015afc:	232d      	movs	r3, #45	; 0x2d
 8015afe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b02:	e798      	b.n	8015a36 <_printf_float+0xaa>
 8015b04:	9a06      	ldr	r2, [sp, #24]
 8015b06:	2a47      	cmp	r2, #71	; 0x47
 8015b08:	d1be      	bne.n	8015a88 <_printf_float+0xfc>
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d1bc      	bne.n	8015a88 <_printf_float+0xfc>
 8015b0e:	2301      	movs	r3, #1
 8015b10:	e7b9      	b.n	8015a86 <_printf_float+0xfa>
 8015b12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015b16:	d118      	bne.n	8015b4a <_printf_float+0x1be>
 8015b18:	2900      	cmp	r1, #0
 8015b1a:	6863      	ldr	r3, [r4, #4]
 8015b1c:	dd0b      	ble.n	8015b36 <_printf_float+0x1aa>
 8015b1e:	6121      	str	r1, [r4, #16]
 8015b20:	b913      	cbnz	r3, 8015b28 <_printf_float+0x19c>
 8015b22:	6822      	ldr	r2, [r4, #0]
 8015b24:	07d0      	lsls	r0, r2, #31
 8015b26:	d502      	bpl.n	8015b2e <_printf_float+0x1a2>
 8015b28:	3301      	adds	r3, #1
 8015b2a:	440b      	add	r3, r1
 8015b2c:	6123      	str	r3, [r4, #16]
 8015b2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8015b30:	f04f 0900 	mov.w	r9, #0
 8015b34:	e7de      	b.n	8015af4 <_printf_float+0x168>
 8015b36:	b913      	cbnz	r3, 8015b3e <_printf_float+0x1b2>
 8015b38:	6822      	ldr	r2, [r4, #0]
 8015b3a:	07d2      	lsls	r2, r2, #31
 8015b3c:	d501      	bpl.n	8015b42 <_printf_float+0x1b6>
 8015b3e:	3302      	adds	r3, #2
 8015b40:	e7f4      	b.n	8015b2c <_printf_float+0x1a0>
 8015b42:	2301      	movs	r3, #1
 8015b44:	e7f2      	b.n	8015b2c <_printf_float+0x1a0>
 8015b46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b4c:	4299      	cmp	r1, r3
 8015b4e:	db05      	blt.n	8015b5c <_printf_float+0x1d0>
 8015b50:	6823      	ldr	r3, [r4, #0]
 8015b52:	6121      	str	r1, [r4, #16]
 8015b54:	07d8      	lsls	r0, r3, #31
 8015b56:	d5ea      	bpl.n	8015b2e <_printf_float+0x1a2>
 8015b58:	1c4b      	adds	r3, r1, #1
 8015b5a:	e7e7      	b.n	8015b2c <_printf_float+0x1a0>
 8015b5c:	2900      	cmp	r1, #0
 8015b5e:	bfd4      	ite	le
 8015b60:	f1c1 0202 	rsble	r2, r1, #2
 8015b64:	2201      	movgt	r2, #1
 8015b66:	4413      	add	r3, r2
 8015b68:	e7e0      	b.n	8015b2c <_printf_float+0x1a0>
 8015b6a:	6823      	ldr	r3, [r4, #0]
 8015b6c:	055a      	lsls	r2, r3, #21
 8015b6e:	d407      	bmi.n	8015b80 <_printf_float+0x1f4>
 8015b70:	6923      	ldr	r3, [r4, #16]
 8015b72:	4642      	mov	r2, r8
 8015b74:	4631      	mov	r1, r6
 8015b76:	4628      	mov	r0, r5
 8015b78:	47b8      	blx	r7
 8015b7a:	3001      	adds	r0, #1
 8015b7c:	d12c      	bne.n	8015bd8 <_printf_float+0x24c>
 8015b7e:	e764      	b.n	8015a4a <_printf_float+0xbe>
 8015b80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015b84:	f240 80e0 	bls.w	8015d48 <_printf_float+0x3bc>
 8015b88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	2300      	movs	r3, #0
 8015b90:	f7ea ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8015b94:	2800      	cmp	r0, #0
 8015b96:	d034      	beq.n	8015c02 <_printf_float+0x276>
 8015b98:	4a37      	ldr	r2, [pc, #220]	; (8015c78 <_printf_float+0x2ec>)
 8015b9a:	2301      	movs	r3, #1
 8015b9c:	4631      	mov	r1, r6
 8015b9e:	4628      	mov	r0, r5
 8015ba0:	47b8      	blx	r7
 8015ba2:	3001      	adds	r0, #1
 8015ba4:	f43f af51 	beq.w	8015a4a <_printf_float+0xbe>
 8015ba8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015bac:	429a      	cmp	r2, r3
 8015bae:	db02      	blt.n	8015bb6 <_printf_float+0x22a>
 8015bb0:	6823      	ldr	r3, [r4, #0]
 8015bb2:	07d8      	lsls	r0, r3, #31
 8015bb4:	d510      	bpl.n	8015bd8 <_printf_float+0x24c>
 8015bb6:	ee18 3a10 	vmov	r3, s16
 8015bba:	4652      	mov	r2, sl
 8015bbc:	4631      	mov	r1, r6
 8015bbe:	4628      	mov	r0, r5
 8015bc0:	47b8      	blx	r7
 8015bc2:	3001      	adds	r0, #1
 8015bc4:	f43f af41 	beq.w	8015a4a <_printf_float+0xbe>
 8015bc8:	f04f 0800 	mov.w	r8, #0
 8015bcc:	f104 091a 	add.w	r9, r4, #26
 8015bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bd2:	3b01      	subs	r3, #1
 8015bd4:	4543      	cmp	r3, r8
 8015bd6:	dc09      	bgt.n	8015bec <_printf_float+0x260>
 8015bd8:	6823      	ldr	r3, [r4, #0]
 8015bda:	079b      	lsls	r3, r3, #30
 8015bdc:	f100 8107 	bmi.w	8015dee <_printf_float+0x462>
 8015be0:	68e0      	ldr	r0, [r4, #12]
 8015be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015be4:	4298      	cmp	r0, r3
 8015be6:	bfb8      	it	lt
 8015be8:	4618      	movlt	r0, r3
 8015bea:	e730      	b.n	8015a4e <_printf_float+0xc2>
 8015bec:	2301      	movs	r3, #1
 8015bee:	464a      	mov	r2, r9
 8015bf0:	4631      	mov	r1, r6
 8015bf2:	4628      	mov	r0, r5
 8015bf4:	47b8      	blx	r7
 8015bf6:	3001      	adds	r0, #1
 8015bf8:	f43f af27 	beq.w	8015a4a <_printf_float+0xbe>
 8015bfc:	f108 0801 	add.w	r8, r8, #1
 8015c00:	e7e6      	b.n	8015bd0 <_printf_float+0x244>
 8015c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	dc39      	bgt.n	8015c7c <_printf_float+0x2f0>
 8015c08:	4a1b      	ldr	r2, [pc, #108]	; (8015c78 <_printf_float+0x2ec>)
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	4631      	mov	r1, r6
 8015c0e:	4628      	mov	r0, r5
 8015c10:	47b8      	blx	r7
 8015c12:	3001      	adds	r0, #1
 8015c14:	f43f af19 	beq.w	8015a4a <_printf_float+0xbe>
 8015c18:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015c1c:	4313      	orrs	r3, r2
 8015c1e:	d102      	bne.n	8015c26 <_printf_float+0x29a>
 8015c20:	6823      	ldr	r3, [r4, #0]
 8015c22:	07d9      	lsls	r1, r3, #31
 8015c24:	d5d8      	bpl.n	8015bd8 <_printf_float+0x24c>
 8015c26:	ee18 3a10 	vmov	r3, s16
 8015c2a:	4652      	mov	r2, sl
 8015c2c:	4631      	mov	r1, r6
 8015c2e:	4628      	mov	r0, r5
 8015c30:	47b8      	blx	r7
 8015c32:	3001      	adds	r0, #1
 8015c34:	f43f af09 	beq.w	8015a4a <_printf_float+0xbe>
 8015c38:	f04f 0900 	mov.w	r9, #0
 8015c3c:	f104 0a1a 	add.w	sl, r4, #26
 8015c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c42:	425b      	negs	r3, r3
 8015c44:	454b      	cmp	r3, r9
 8015c46:	dc01      	bgt.n	8015c4c <_printf_float+0x2c0>
 8015c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c4a:	e792      	b.n	8015b72 <_printf_float+0x1e6>
 8015c4c:	2301      	movs	r3, #1
 8015c4e:	4652      	mov	r2, sl
 8015c50:	4631      	mov	r1, r6
 8015c52:	4628      	mov	r0, r5
 8015c54:	47b8      	blx	r7
 8015c56:	3001      	adds	r0, #1
 8015c58:	f43f aef7 	beq.w	8015a4a <_printf_float+0xbe>
 8015c5c:	f109 0901 	add.w	r9, r9, #1
 8015c60:	e7ee      	b.n	8015c40 <_printf_float+0x2b4>
 8015c62:	bf00      	nop
 8015c64:	7fefffff 	.word	0x7fefffff
 8015c68:	0801ce41 	.word	0x0801ce41
 8015c6c:	0801ce45 	.word	0x0801ce45
 8015c70:	0801ce49 	.word	0x0801ce49
 8015c74:	0801ce4d 	.word	0x0801ce4d
 8015c78:	0801ce51 	.word	0x0801ce51
 8015c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015c80:	429a      	cmp	r2, r3
 8015c82:	bfa8      	it	ge
 8015c84:	461a      	movge	r2, r3
 8015c86:	2a00      	cmp	r2, #0
 8015c88:	4691      	mov	r9, r2
 8015c8a:	dc37      	bgt.n	8015cfc <_printf_float+0x370>
 8015c8c:	f04f 0b00 	mov.w	fp, #0
 8015c90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015c94:	f104 021a 	add.w	r2, r4, #26
 8015c98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015c9a:	9305      	str	r3, [sp, #20]
 8015c9c:	eba3 0309 	sub.w	r3, r3, r9
 8015ca0:	455b      	cmp	r3, fp
 8015ca2:	dc33      	bgt.n	8015d0c <_printf_float+0x380>
 8015ca4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015ca8:	429a      	cmp	r2, r3
 8015caa:	db3b      	blt.n	8015d24 <_printf_float+0x398>
 8015cac:	6823      	ldr	r3, [r4, #0]
 8015cae:	07da      	lsls	r2, r3, #31
 8015cb0:	d438      	bmi.n	8015d24 <_printf_float+0x398>
 8015cb2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015cb6:	eba2 0903 	sub.w	r9, r2, r3
 8015cba:	9b05      	ldr	r3, [sp, #20]
 8015cbc:	1ad2      	subs	r2, r2, r3
 8015cbe:	4591      	cmp	r9, r2
 8015cc0:	bfa8      	it	ge
 8015cc2:	4691      	movge	r9, r2
 8015cc4:	f1b9 0f00 	cmp.w	r9, #0
 8015cc8:	dc35      	bgt.n	8015d36 <_printf_float+0x3aa>
 8015cca:	f04f 0800 	mov.w	r8, #0
 8015cce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015cd2:	f104 0a1a 	add.w	sl, r4, #26
 8015cd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015cda:	1a9b      	subs	r3, r3, r2
 8015cdc:	eba3 0309 	sub.w	r3, r3, r9
 8015ce0:	4543      	cmp	r3, r8
 8015ce2:	f77f af79 	ble.w	8015bd8 <_printf_float+0x24c>
 8015ce6:	2301      	movs	r3, #1
 8015ce8:	4652      	mov	r2, sl
 8015cea:	4631      	mov	r1, r6
 8015cec:	4628      	mov	r0, r5
 8015cee:	47b8      	blx	r7
 8015cf0:	3001      	adds	r0, #1
 8015cf2:	f43f aeaa 	beq.w	8015a4a <_printf_float+0xbe>
 8015cf6:	f108 0801 	add.w	r8, r8, #1
 8015cfa:	e7ec      	b.n	8015cd6 <_printf_float+0x34a>
 8015cfc:	4613      	mov	r3, r2
 8015cfe:	4631      	mov	r1, r6
 8015d00:	4642      	mov	r2, r8
 8015d02:	4628      	mov	r0, r5
 8015d04:	47b8      	blx	r7
 8015d06:	3001      	adds	r0, #1
 8015d08:	d1c0      	bne.n	8015c8c <_printf_float+0x300>
 8015d0a:	e69e      	b.n	8015a4a <_printf_float+0xbe>
 8015d0c:	2301      	movs	r3, #1
 8015d0e:	4631      	mov	r1, r6
 8015d10:	4628      	mov	r0, r5
 8015d12:	9205      	str	r2, [sp, #20]
 8015d14:	47b8      	blx	r7
 8015d16:	3001      	adds	r0, #1
 8015d18:	f43f ae97 	beq.w	8015a4a <_printf_float+0xbe>
 8015d1c:	9a05      	ldr	r2, [sp, #20]
 8015d1e:	f10b 0b01 	add.w	fp, fp, #1
 8015d22:	e7b9      	b.n	8015c98 <_printf_float+0x30c>
 8015d24:	ee18 3a10 	vmov	r3, s16
 8015d28:	4652      	mov	r2, sl
 8015d2a:	4631      	mov	r1, r6
 8015d2c:	4628      	mov	r0, r5
 8015d2e:	47b8      	blx	r7
 8015d30:	3001      	adds	r0, #1
 8015d32:	d1be      	bne.n	8015cb2 <_printf_float+0x326>
 8015d34:	e689      	b.n	8015a4a <_printf_float+0xbe>
 8015d36:	9a05      	ldr	r2, [sp, #20]
 8015d38:	464b      	mov	r3, r9
 8015d3a:	4442      	add	r2, r8
 8015d3c:	4631      	mov	r1, r6
 8015d3e:	4628      	mov	r0, r5
 8015d40:	47b8      	blx	r7
 8015d42:	3001      	adds	r0, #1
 8015d44:	d1c1      	bne.n	8015cca <_printf_float+0x33e>
 8015d46:	e680      	b.n	8015a4a <_printf_float+0xbe>
 8015d48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d4a:	2a01      	cmp	r2, #1
 8015d4c:	dc01      	bgt.n	8015d52 <_printf_float+0x3c6>
 8015d4e:	07db      	lsls	r3, r3, #31
 8015d50:	d53a      	bpl.n	8015dc8 <_printf_float+0x43c>
 8015d52:	2301      	movs	r3, #1
 8015d54:	4642      	mov	r2, r8
 8015d56:	4631      	mov	r1, r6
 8015d58:	4628      	mov	r0, r5
 8015d5a:	47b8      	blx	r7
 8015d5c:	3001      	adds	r0, #1
 8015d5e:	f43f ae74 	beq.w	8015a4a <_printf_float+0xbe>
 8015d62:	ee18 3a10 	vmov	r3, s16
 8015d66:	4652      	mov	r2, sl
 8015d68:	4631      	mov	r1, r6
 8015d6a:	4628      	mov	r0, r5
 8015d6c:	47b8      	blx	r7
 8015d6e:	3001      	adds	r0, #1
 8015d70:	f43f ae6b 	beq.w	8015a4a <_printf_float+0xbe>
 8015d74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015d78:	2200      	movs	r2, #0
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8015d80:	f7ea fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 8015d84:	b9d8      	cbnz	r0, 8015dbe <_printf_float+0x432>
 8015d86:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015d8a:	f108 0201 	add.w	r2, r8, #1
 8015d8e:	4631      	mov	r1, r6
 8015d90:	4628      	mov	r0, r5
 8015d92:	47b8      	blx	r7
 8015d94:	3001      	adds	r0, #1
 8015d96:	d10e      	bne.n	8015db6 <_printf_float+0x42a>
 8015d98:	e657      	b.n	8015a4a <_printf_float+0xbe>
 8015d9a:	2301      	movs	r3, #1
 8015d9c:	4652      	mov	r2, sl
 8015d9e:	4631      	mov	r1, r6
 8015da0:	4628      	mov	r0, r5
 8015da2:	47b8      	blx	r7
 8015da4:	3001      	adds	r0, #1
 8015da6:	f43f ae50 	beq.w	8015a4a <_printf_float+0xbe>
 8015daa:	f108 0801 	add.w	r8, r8, #1
 8015dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015db0:	3b01      	subs	r3, #1
 8015db2:	4543      	cmp	r3, r8
 8015db4:	dcf1      	bgt.n	8015d9a <_printf_float+0x40e>
 8015db6:	464b      	mov	r3, r9
 8015db8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015dbc:	e6da      	b.n	8015b74 <_printf_float+0x1e8>
 8015dbe:	f04f 0800 	mov.w	r8, #0
 8015dc2:	f104 0a1a 	add.w	sl, r4, #26
 8015dc6:	e7f2      	b.n	8015dae <_printf_float+0x422>
 8015dc8:	2301      	movs	r3, #1
 8015dca:	4642      	mov	r2, r8
 8015dcc:	e7df      	b.n	8015d8e <_printf_float+0x402>
 8015dce:	2301      	movs	r3, #1
 8015dd0:	464a      	mov	r2, r9
 8015dd2:	4631      	mov	r1, r6
 8015dd4:	4628      	mov	r0, r5
 8015dd6:	47b8      	blx	r7
 8015dd8:	3001      	adds	r0, #1
 8015dda:	f43f ae36 	beq.w	8015a4a <_printf_float+0xbe>
 8015dde:	f108 0801 	add.w	r8, r8, #1
 8015de2:	68e3      	ldr	r3, [r4, #12]
 8015de4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015de6:	1a5b      	subs	r3, r3, r1
 8015de8:	4543      	cmp	r3, r8
 8015dea:	dcf0      	bgt.n	8015dce <_printf_float+0x442>
 8015dec:	e6f8      	b.n	8015be0 <_printf_float+0x254>
 8015dee:	f04f 0800 	mov.w	r8, #0
 8015df2:	f104 0919 	add.w	r9, r4, #25
 8015df6:	e7f4      	b.n	8015de2 <_printf_float+0x456>

08015df8 <_printf_common>:
 8015df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015dfc:	4616      	mov	r6, r2
 8015dfe:	4699      	mov	r9, r3
 8015e00:	688a      	ldr	r2, [r1, #8]
 8015e02:	690b      	ldr	r3, [r1, #16]
 8015e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015e08:	4293      	cmp	r3, r2
 8015e0a:	bfb8      	it	lt
 8015e0c:	4613      	movlt	r3, r2
 8015e0e:	6033      	str	r3, [r6, #0]
 8015e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015e14:	4607      	mov	r7, r0
 8015e16:	460c      	mov	r4, r1
 8015e18:	b10a      	cbz	r2, 8015e1e <_printf_common+0x26>
 8015e1a:	3301      	adds	r3, #1
 8015e1c:	6033      	str	r3, [r6, #0]
 8015e1e:	6823      	ldr	r3, [r4, #0]
 8015e20:	0699      	lsls	r1, r3, #26
 8015e22:	bf42      	ittt	mi
 8015e24:	6833      	ldrmi	r3, [r6, #0]
 8015e26:	3302      	addmi	r3, #2
 8015e28:	6033      	strmi	r3, [r6, #0]
 8015e2a:	6825      	ldr	r5, [r4, #0]
 8015e2c:	f015 0506 	ands.w	r5, r5, #6
 8015e30:	d106      	bne.n	8015e40 <_printf_common+0x48>
 8015e32:	f104 0a19 	add.w	sl, r4, #25
 8015e36:	68e3      	ldr	r3, [r4, #12]
 8015e38:	6832      	ldr	r2, [r6, #0]
 8015e3a:	1a9b      	subs	r3, r3, r2
 8015e3c:	42ab      	cmp	r3, r5
 8015e3e:	dc26      	bgt.n	8015e8e <_printf_common+0x96>
 8015e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015e44:	1e13      	subs	r3, r2, #0
 8015e46:	6822      	ldr	r2, [r4, #0]
 8015e48:	bf18      	it	ne
 8015e4a:	2301      	movne	r3, #1
 8015e4c:	0692      	lsls	r2, r2, #26
 8015e4e:	d42b      	bmi.n	8015ea8 <_printf_common+0xb0>
 8015e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015e54:	4649      	mov	r1, r9
 8015e56:	4638      	mov	r0, r7
 8015e58:	47c0      	blx	r8
 8015e5a:	3001      	adds	r0, #1
 8015e5c:	d01e      	beq.n	8015e9c <_printf_common+0xa4>
 8015e5e:	6823      	ldr	r3, [r4, #0]
 8015e60:	6922      	ldr	r2, [r4, #16]
 8015e62:	f003 0306 	and.w	r3, r3, #6
 8015e66:	2b04      	cmp	r3, #4
 8015e68:	bf02      	ittt	eq
 8015e6a:	68e5      	ldreq	r5, [r4, #12]
 8015e6c:	6833      	ldreq	r3, [r6, #0]
 8015e6e:	1aed      	subeq	r5, r5, r3
 8015e70:	68a3      	ldr	r3, [r4, #8]
 8015e72:	bf0c      	ite	eq
 8015e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e78:	2500      	movne	r5, #0
 8015e7a:	4293      	cmp	r3, r2
 8015e7c:	bfc4      	itt	gt
 8015e7e:	1a9b      	subgt	r3, r3, r2
 8015e80:	18ed      	addgt	r5, r5, r3
 8015e82:	2600      	movs	r6, #0
 8015e84:	341a      	adds	r4, #26
 8015e86:	42b5      	cmp	r5, r6
 8015e88:	d11a      	bne.n	8015ec0 <_printf_common+0xc8>
 8015e8a:	2000      	movs	r0, #0
 8015e8c:	e008      	b.n	8015ea0 <_printf_common+0xa8>
 8015e8e:	2301      	movs	r3, #1
 8015e90:	4652      	mov	r2, sl
 8015e92:	4649      	mov	r1, r9
 8015e94:	4638      	mov	r0, r7
 8015e96:	47c0      	blx	r8
 8015e98:	3001      	adds	r0, #1
 8015e9a:	d103      	bne.n	8015ea4 <_printf_common+0xac>
 8015e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8015ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ea4:	3501      	adds	r5, #1
 8015ea6:	e7c6      	b.n	8015e36 <_printf_common+0x3e>
 8015ea8:	18e1      	adds	r1, r4, r3
 8015eaa:	1c5a      	adds	r2, r3, #1
 8015eac:	2030      	movs	r0, #48	; 0x30
 8015eae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015eb2:	4422      	add	r2, r4
 8015eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015ebc:	3302      	adds	r3, #2
 8015ebe:	e7c7      	b.n	8015e50 <_printf_common+0x58>
 8015ec0:	2301      	movs	r3, #1
 8015ec2:	4622      	mov	r2, r4
 8015ec4:	4649      	mov	r1, r9
 8015ec6:	4638      	mov	r0, r7
 8015ec8:	47c0      	blx	r8
 8015eca:	3001      	adds	r0, #1
 8015ecc:	d0e6      	beq.n	8015e9c <_printf_common+0xa4>
 8015ece:	3601      	adds	r6, #1
 8015ed0:	e7d9      	b.n	8015e86 <_printf_common+0x8e>
	...

08015ed4 <_printf_i>:
 8015ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015ed8:	7e0f      	ldrb	r7, [r1, #24]
 8015eda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015edc:	2f78      	cmp	r7, #120	; 0x78
 8015ede:	4691      	mov	r9, r2
 8015ee0:	4680      	mov	r8, r0
 8015ee2:	460c      	mov	r4, r1
 8015ee4:	469a      	mov	sl, r3
 8015ee6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015eea:	d807      	bhi.n	8015efc <_printf_i+0x28>
 8015eec:	2f62      	cmp	r7, #98	; 0x62
 8015eee:	d80a      	bhi.n	8015f06 <_printf_i+0x32>
 8015ef0:	2f00      	cmp	r7, #0
 8015ef2:	f000 80d4 	beq.w	801609e <_printf_i+0x1ca>
 8015ef6:	2f58      	cmp	r7, #88	; 0x58
 8015ef8:	f000 80c0 	beq.w	801607c <_printf_i+0x1a8>
 8015efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015f04:	e03a      	b.n	8015f7c <_printf_i+0xa8>
 8015f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015f0a:	2b15      	cmp	r3, #21
 8015f0c:	d8f6      	bhi.n	8015efc <_printf_i+0x28>
 8015f0e:	a101      	add	r1, pc, #4	; (adr r1, 8015f14 <_printf_i+0x40>)
 8015f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015f14:	08015f6d 	.word	0x08015f6d
 8015f18:	08015f81 	.word	0x08015f81
 8015f1c:	08015efd 	.word	0x08015efd
 8015f20:	08015efd 	.word	0x08015efd
 8015f24:	08015efd 	.word	0x08015efd
 8015f28:	08015efd 	.word	0x08015efd
 8015f2c:	08015f81 	.word	0x08015f81
 8015f30:	08015efd 	.word	0x08015efd
 8015f34:	08015efd 	.word	0x08015efd
 8015f38:	08015efd 	.word	0x08015efd
 8015f3c:	08015efd 	.word	0x08015efd
 8015f40:	08016085 	.word	0x08016085
 8015f44:	08015fad 	.word	0x08015fad
 8015f48:	0801603f 	.word	0x0801603f
 8015f4c:	08015efd 	.word	0x08015efd
 8015f50:	08015efd 	.word	0x08015efd
 8015f54:	080160a7 	.word	0x080160a7
 8015f58:	08015efd 	.word	0x08015efd
 8015f5c:	08015fad 	.word	0x08015fad
 8015f60:	08015efd 	.word	0x08015efd
 8015f64:	08015efd 	.word	0x08015efd
 8015f68:	08016047 	.word	0x08016047
 8015f6c:	682b      	ldr	r3, [r5, #0]
 8015f6e:	1d1a      	adds	r2, r3, #4
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	602a      	str	r2, [r5, #0]
 8015f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015f7c:	2301      	movs	r3, #1
 8015f7e:	e09f      	b.n	80160c0 <_printf_i+0x1ec>
 8015f80:	6820      	ldr	r0, [r4, #0]
 8015f82:	682b      	ldr	r3, [r5, #0]
 8015f84:	0607      	lsls	r7, r0, #24
 8015f86:	f103 0104 	add.w	r1, r3, #4
 8015f8a:	6029      	str	r1, [r5, #0]
 8015f8c:	d501      	bpl.n	8015f92 <_printf_i+0xbe>
 8015f8e:	681e      	ldr	r6, [r3, #0]
 8015f90:	e003      	b.n	8015f9a <_printf_i+0xc6>
 8015f92:	0646      	lsls	r6, r0, #25
 8015f94:	d5fb      	bpl.n	8015f8e <_printf_i+0xba>
 8015f96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015f9a:	2e00      	cmp	r6, #0
 8015f9c:	da03      	bge.n	8015fa6 <_printf_i+0xd2>
 8015f9e:	232d      	movs	r3, #45	; 0x2d
 8015fa0:	4276      	negs	r6, r6
 8015fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015fa6:	485a      	ldr	r0, [pc, #360]	; (8016110 <_printf_i+0x23c>)
 8015fa8:	230a      	movs	r3, #10
 8015faa:	e012      	b.n	8015fd2 <_printf_i+0xfe>
 8015fac:	682b      	ldr	r3, [r5, #0]
 8015fae:	6820      	ldr	r0, [r4, #0]
 8015fb0:	1d19      	adds	r1, r3, #4
 8015fb2:	6029      	str	r1, [r5, #0]
 8015fb4:	0605      	lsls	r5, r0, #24
 8015fb6:	d501      	bpl.n	8015fbc <_printf_i+0xe8>
 8015fb8:	681e      	ldr	r6, [r3, #0]
 8015fba:	e002      	b.n	8015fc2 <_printf_i+0xee>
 8015fbc:	0641      	lsls	r1, r0, #25
 8015fbe:	d5fb      	bpl.n	8015fb8 <_printf_i+0xe4>
 8015fc0:	881e      	ldrh	r6, [r3, #0]
 8015fc2:	4853      	ldr	r0, [pc, #332]	; (8016110 <_printf_i+0x23c>)
 8015fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8015fc6:	bf0c      	ite	eq
 8015fc8:	2308      	moveq	r3, #8
 8015fca:	230a      	movne	r3, #10
 8015fcc:	2100      	movs	r1, #0
 8015fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015fd2:	6865      	ldr	r5, [r4, #4]
 8015fd4:	60a5      	str	r5, [r4, #8]
 8015fd6:	2d00      	cmp	r5, #0
 8015fd8:	bfa2      	ittt	ge
 8015fda:	6821      	ldrge	r1, [r4, #0]
 8015fdc:	f021 0104 	bicge.w	r1, r1, #4
 8015fe0:	6021      	strge	r1, [r4, #0]
 8015fe2:	b90e      	cbnz	r6, 8015fe8 <_printf_i+0x114>
 8015fe4:	2d00      	cmp	r5, #0
 8015fe6:	d04b      	beq.n	8016080 <_printf_i+0x1ac>
 8015fe8:	4615      	mov	r5, r2
 8015fea:	fbb6 f1f3 	udiv	r1, r6, r3
 8015fee:	fb03 6711 	mls	r7, r3, r1, r6
 8015ff2:	5dc7      	ldrb	r7, [r0, r7]
 8015ff4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015ff8:	4637      	mov	r7, r6
 8015ffa:	42bb      	cmp	r3, r7
 8015ffc:	460e      	mov	r6, r1
 8015ffe:	d9f4      	bls.n	8015fea <_printf_i+0x116>
 8016000:	2b08      	cmp	r3, #8
 8016002:	d10b      	bne.n	801601c <_printf_i+0x148>
 8016004:	6823      	ldr	r3, [r4, #0]
 8016006:	07de      	lsls	r6, r3, #31
 8016008:	d508      	bpl.n	801601c <_printf_i+0x148>
 801600a:	6923      	ldr	r3, [r4, #16]
 801600c:	6861      	ldr	r1, [r4, #4]
 801600e:	4299      	cmp	r1, r3
 8016010:	bfde      	ittt	le
 8016012:	2330      	movle	r3, #48	; 0x30
 8016014:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016018:	f105 35ff 	addle.w	r5, r5, #4294967295
 801601c:	1b52      	subs	r2, r2, r5
 801601e:	6122      	str	r2, [r4, #16]
 8016020:	f8cd a000 	str.w	sl, [sp]
 8016024:	464b      	mov	r3, r9
 8016026:	aa03      	add	r2, sp, #12
 8016028:	4621      	mov	r1, r4
 801602a:	4640      	mov	r0, r8
 801602c:	f7ff fee4 	bl	8015df8 <_printf_common>
 8016030:	3001      	adds	r0, #1
 8016032:	d14a      	bne.n	80160ca <_printf_i+0x1f6>
 8016034:	f04f 30ff 	mov.w	r0, #4294967295
 8016038:	b004      	add	sp, #16
 801603a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801603e:	6823      	ldr	r3, [r4, #0]
 8016040:	f043 0320 	orr.w	r3, r3, #32
 8016044:	6023      	str	r3, [r4, #0]
 8016046:	4833      	ldr	r0, [pc, #204]	; (8016114 <_printf_i+0x240>)
 8016048:	2778      	movs	r7, #120	; 0x78
 801604a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801604e:	6823      	ldr	r3, [r4, #0]
 8016050:	6829      	ldr	r1, [r5, #0]
 8016052:	061f      	lsls	r7, r3, #24
 8016054:	f851 6b04 	ldr.w	r6, [r1], #4
 8016058:	d402      	bmi.n	8016060 <_printf_i+0x18c>
 801605a:	065f      	lsls	r7, r3, #25
 801605c:	bf48      	it	mi
 801605e:	b2b6      	uxthmi	r6, r6
 8016060:	07df      	lsls	r7, r3, #31
 8016062:	bf48      	it	mi
 8016064:	f043 0320 	orrmi.w	r3, r3, #32
 8016068:	6029      	str	r1, [r5, #0]
 801606a:	bf48      	it	mi
 801606c:	6023      	strmi	r3, [r4, #0]
 801606e:	b91e      	cbnz	r6, 8016078 <_printf_i+0x1a4>
 8016070:	6823      	ldr	r3, [r4, #0]
 8016072:	f023 0320 	bic.w	r3, r3, #32
 8016076:	6023      	str	r3, [r4, #0]
 8016078:	2310      	movs	r3, #16
 801607a:	e7a7      	b.n	8015fcc <_printf_i+0xf8>
 801607c:	4824      	ldr	r0, [pc, #144]	; (8016110 <_printf_i+0x23c>)
 801607e:	e7e4      	b.n	801604a <_printf_i+0x176>
 8016080:	4615      	mov	r5, r2
 8016082:	e7bd      	b.n	8016000 <_printf_i+0x12c>
 8016084:	682b      	ldr	r3, [r5, #0]
 8016086:	6826      	ldr	r6, [r4, #0]
 8016088:	6961      	ldr	r1, [r4, #20]
 801608a:	1d18      	adds	r0, r3, #4
 801608c:	6028      	str	r0, [r5, #0]
 801608e:	0635      	lsls	r5, r6, #24
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	d501      	bpl.n	8016098 <_printf_i+0x1c4>
 8016094:	6019      	str	r1, [r3, #0]
 8016096:	e002      	b.n	801609e <_printf_i+0x1ca>
 8016098:	0670      	lsls	r0, r6, #25
 801609a:	d5fb      	bpl.n	8016094 <_printf_i+0x1c0>
 801609c:	8019      	strh	r1, [r3, #0]
 801609e:	2300      	movs	r3, #0
 80160a0:	6123      	str	r3, [r4, #16]
 80160a2:	4615      	mov	r5, r2
 80160a4:	e7bc      	b.n	8016020 <_printf_i+0x14c>
 80160a6:	682b      	ldr	r3, [r5, #0]
 80160a8:	1d1a      	adds	r2, r3, #4
 80160aa:	602a      	str	r2, [r5, #0]
 80160ac:	681d      	ldr	r5, [r3, #0]
 80160ae:	6862      	ldr	r2, [r4, #4]
 80160b0:	2100      	movs	r1, #0
 80160b2:	4628      	mov	r0, r5
 80160b4:	f7ea f88c 	bl	80001d0 <memchr>
 80160b8:	b108      	cbz	r0, 80160be <_printf_i+0x1ea>
 80160ba:	1b40      	subs	r0, r0, r5
 80160bc:	6060      	str	r0, [r4, #4]
 80160be:	6863      	ldr	r3, [r4, #4]
 80160c0:	6123      	str	r3, [r4, #16]
 80160c2:	2300      	movs	r3, #0
 80160c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160c8:	e7aa      	b.n	8016020 <_printf_i+0x14c>
 80160ca:	6923      	ldr	r3, [r4, #16]
 80160cc:	462a      	mov	r2, r5
 80160ce:	4649      	mov	r1, r9
 80160d0:	4640      	mov	r0, r8
 80160d2:	47d0      	blx	sl
 80160d4:	3001      	adds	r0, #1
 80160d6:	d0ad      	beq.n	8016034 <_printf_i+0x160>
 80160d8:	6823      	ldr	r3, [r4, #0]
 80160da:	079b      	lsls	r3, r3, #30
 80160dc:	d413      	bmi.n	8016106 <_printf_i+0x232>
 80160de:	68e0      	ldr	r0, [r4, #12]
 80160e0:	9b03      	ldr	r3, [sp, #12]
 80160e2:	4298      	cmp	r0, r3
 80160e4:	bfb8      	it	lt
 80160e6:	4618      	movlt	r0, r3
 80160e8:	e7a6      	b.n	8016038 <_printf_i+0x164>
 80160ea:	2301      	movs	r3, #1
 80160ec:	4632      	mov	r2, r6
 80160ee:	4649      	mov	r1, r9
 80160f0:	4640      	mov	r0, r8
 80160f2:	47d0      	blx	sl
 80160f4:	3001      	adds	r0, #1
 80160f6:	d09d      	beq.n	8016034 <_printf_i+0x160>
 80160f8:	3501      	adds	r5, #1
 80160fa:	68e3      	ldr	r3, [r4, #12]
 80160fc:	9903      	ldr	r1, [sp, #12]
 80160fe:	1a5b      	subs	r3, r3, r1
 8016100:	42ab      	cmp	r3, r5
 8016102:	dcf2      	bgt.n	80160ea <_printf_i+0x216>
 8016104:	e7eb      	b.n	80160de <_printf_i+0x20a>
 8016106:	2500      	movs	r5, #0
 8016108:	f104 0619 	add.w	r6, r4, #25
 801610c:	e7f5      	b.n	80160fa <_printf_i+0x226>
 801610e:	bf00      	nop
 8016110:	0801ce53 	.word	0x0801ce53
 8016114:	0801ce64 	.word	0x0801ce64

08016118 <_scanf_float>:
 8016118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801611c:	b087      	sub	sp, #28
 801611e:	4617      	mov	r7, r2
 8016120:	9303      	str	r3, [sp, #12]
 8016122:	688b      	ldr	r3, [r1, #8]
 8016124:	1e5a      	subs	r2, r3, #1
 8016126:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801612a:	bf83      	ittte	hi
 801612c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016130:	195b      	addhi	r3, r3, r5
 8016132:	9302      	strhi	r3, [sp, #8]
 8016134:	2300      	movls	r3, #0
 8016136:	bf86      	itte	hi
 8016138:	f240 135d 	movwhi	r3, #349	; 0x15d
 801613c:	608b      	strhi	r3, [r1, #8]
 801613e:	9302      	strls	r3, [sp, #8]
 8016140:	680b      	ldr	r3, [r1, #0]
 8016142:	468b      	mov	fp, r1
 8016144:	2500      	movs	r5, #0
 8016146:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801614a:	f84b 3b1c 	str.w	r3, [fp], #28
 801614e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016152:	4680      	mov	r8, r0
 8016154:	460c      	mov	r4, r1
 8016156:	465e      	mov	r6, fp
 8016158:	46aa      	mov	sl, r5
 801615a:	46a9      	mov	r9, r5
 801615c:	9501      	str	r5, [sp, #4]
 801615e:	68a2      	ldr	r2, [r4, #8]
 8016160:	b152      	cbz	r2, 8016178 <_scanf_float+0x60>
 8016162:	683b      	ldr	r3, [r7, #0]
 8016164:	781b      	ldrb	r3, [r3, #0]
 8016166:	2b4e      	cmp	r3, #78	; 0x4e
 8016168:	d864      	bhi.n	8016234 <_scanf_float+0x11c>
 801616a:	2b40      	cmp	r3, #64	; 0x40
 801616c:	d83c      	bhi.n	80161e8 <_scanf_float+0xd0>
 801616e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016172:	b2c8      	uxtb	r0, r1
 8016174:	280e      	cmp	r0, #14
 8016176:	d93a      	bls.n	80161ee <_scanf_float+0xd6>
 8016178:	f1b9 0f00 	cmp.w	r9, #0
 801617c:	d003      	beq.n	8016186 <_scanf_float+0x6e>
 801617e:	6823      	ldr	r3, [r4, #0]
 8016180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016184:	6023      	str	r3, [r4, #0]
 8016186:	f10a 3aff 	add.w	sl, sl, #4294967295
 801618a:	f1ba 0f01 	cmp.w	sl, #1
 801618e:	f200 8113 	bhi.w	80163b8 <_scanf_float+0x2a0>
 8016192:	455e      	cmp	r6, fp
 8016194:	f200 8105 	bhi.w	80163a2 <_scanf_float+0x28a>
 8016198:	2501      	movs	r5, #1
 801619a:	4628      	mov	r0, r5
 801619c:	b007      	add	sp, #28
 801619e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80161a6:	2a0d      	cmp	r2, #13
 80161a8:	d8e6      	bhi.n	8016178 <_scanf_float+0x60>
 80161aa:	a101      	add	r1, pc, #4	; (adr r1, 80161b0 <_scanf_float+0x98>)
 80161ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80161b0:	080162ef 	.word	0x080162ef
 80161b4:	08016179 	.word	0x08016179
 80161b8:	08016179 	.word	0x08016179
 80161bc:	08016179 	.word	0x08016179
 80161c0:	0801634f 	.word	0x0801634f
 80161c4:	08016327 	.word	0x08016327
 80161c8:	08016179 	.word	0x08016179
 80161cc:	08016179 	.word	0x08016179
 80161d0:	080162fd 	.word	0x080162fd
 80161d4:	08016179 	.word	0x08016179
 80161d8:	08016179 	.word	0x08016179
 80161dc:	08016179 	.word	0x08016179
 80161e0:	08016179 	.word	0x08016179
 80161e4:	080162b5 	.word	0x080162b5
 80161e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80161ec:	e7db      	b.n	80161a6 <_scanf_float+0x8e>
 80161ee:	290e      	cmp	r1, #14
 80161f0:	d8c2      	bhi.n	8016178 <_scanf_float+0x60>
 80161f2:	a001      	add	r0, pc, #4	; (adr r0, 80161f8 <_scanf_float+0xe0>)
 80161f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80161f8:	080162a7 	.word	0x080162a7
 80161fc:	08016179 	.word	0x08016179
 8016200:	080162a7 	.word	0x080162a7
 8016204:	0801633b 	.word	0x0801633b
 8016208:	08016179 	.word	0x08016179
 801620c:	08016255 	.word	0x08016255
 8016210:	08016291 	.word	0x08016291
 8016214:	08016291 	.word	0x08016291
 8016218:	08016291 	.word	0x08016291
 801621c:	08016291 	.word	0x08016291
 8016220:	08016291 	.word	0x08016291
 8016224:	08016291 	.word	0x08016291
 8016228:	08016291 	.word	0x08016291
 801622c:	08016291 	.word	0x08016291
 8016230:	08016291 	.word	0x08016291
 8016234:	2b6e      	cmp	r3, #110	; 0x6e
 8016236:	d809      	bhi.n	801624c <_scanf_float+0x134>
 8016238:	2b60      	cmp	r3, #96	; 0x60
 801623a:	d8b2      	bhi.n	80161a2 <_scanf_float+0x8a>
 801623c:	2b54      	cmp	r3, #84	; 0x54
 801623e:	d077      	beq.n	8016330 <_scanf_float+0x218>
 8016240:	2b59      	cmp	r3, #89	; 0x59
 8016242:	d199      	bne.n	8016178 <_scanf_float+0x60>
 8016244:	2d07      	cmp	r5, #7
 8016246:	d197      	bne.n	8016178 <_scanf_float+0x60>
 8016248:	2508      	movs	r5, #8
 801624a:	e029      	b.n	80162a0 <_scanf_float+0x188>
 801624c:	2b74      	cmp	r3, #116	; 0x74
 801624e:	d06f      	beq.n	8016330 <_scanf_float+0x218>
 8016250:	2b79      	cmp	r3, #121	; 0x79
 8016252:	e7f6      	b.n	8016242 <_scanf_float+0x12a>
 8016254:	6821      	ldr	r1, [r4, #0]
 8016256:	05c8      	lsls	r0, r1, #23
 8016258:	d51a      	bpl.n	8016290 <_scanf_float+0x178>
 801625a:	9b02      	ldr	r3, [sp, #8]
 801625c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016260:	6021      	str	r1, [r4, #0]
 8016262:	f109 0901 	add.w	r9, r9, #1
 8016266:	b11b      	cbz	r3, 8016270 <_scanf_float+0x158>
 8016268:	3b01      	subs	r3, #1
 801626a:	3201      	adds	r2, #1
 801626c:	9302      	str	r3, [sp, #8]
 801626e:	60a2      	str	r2, [r4, #8]
 8016270:	68a3      	ldr	r3, [r4, #8]
 8016272:	3b01      	subs	r3, #1
 8016274:	60a3      	str	r3, [r4, #8]
 8016276:	6923      	ldr	r3, [r4, #16]
 8016278:	3301      	adds	r3, #1
 801627a:	6123      	str	r3, [r4, #16]
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	3b01      	subs	r3, #1
 8016280:	2b00      	cmp	r3, #0
 8016282:	607b      	str	r3, [r7, #4]
 8016284:	f340 8084 	ble.w	8016390 <_scanf_float+0x278>
 8016288:	683b      	ldr	r3, [r7, #0]
 801628a:	3301      	adds	r3, #1
 801628c:	603b      	str	r3, [r7, #0]
 801628e:	e766      	b.n	801615e <_scanf_float+0x46>
 8016290:	eb1a 0f05 	cmn.w	sl, r5
 8016294:	f47f af70 	bne.w	8016178 <_scanf_float+0x60>
 8016298:	6822      	ldr	r2, [r4, #0]
 801629a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801629e:	6022      	str	r2, [r4, #0]
 80162a0:	f806 3b01 	strb.w	r3, [r6], #1
 80162a4:	e7e4      	b.n	8016270 <_scanf_float+0x158>
 80162a6:	6822      	ldr	r2, [r4, #0]
 80162a8:	0610      	lsls	r0, r2, #24
 80162aa:	f57f af65 	bpl.w	8016178 <_scanf_float+0x60>
 80162ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80162b2:	e7f4      	b.n	801629e <_scanf_float+0x186>
 80162b4:	f1ba 0f00 	cmp.w	sl, #0
 80162b8:	d10e      	bne.n	80162d8 <_scanf_float+0x1c0>
 80162ba:	f1b9 0f00 	cmp.w	r9, #0
 80162be:	d10e      	bne.n	80162de <_scanf_float+0x1c6>
 80162c0:	6822      	ldr	r2, [r4, #0]
 80162c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80162c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80162ca:	d108      	bne.n	80162de <_scanf_float+0x1c6>
 80162cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80162d0:	6022      	str	r2, [r4, #0]
 80162d2:	f04f 0a01 	mov.w	sl, #1
 80162d6:	e7e3      	b.n	80162a0 <_scanf_float+0x188>
 80162d8:	f1ba 0f02 	cmp.w	sl, #2
 80162dc:	d055      	beq.n	801638a <_scanf_float+0x272>
 80162de:	2d01      	cmp	r5, #1
 80162e0:	d002      	beq.n	80162e8 <_scanf_float+0x1d0>
 80162e2:	2d04      	cmp	r5, #4
 80162e4:	f47f af48 	bne.w	8016178 <_scanf_float+0x60>
 80162e8:	3501      	adds	r5, #1
 80162ea:	b2ed      	uxtb	r5, r5
 80162ec:	e7d8      	b.n	80162a0 <_scanf_float+0x188>
 80162ee:	f1ba 0f01 	cmp.w	sl, #1
 80162f2:	f47f af41 	bne.w	8016178 <_scanf_float+0x60>
 80162f6:	f04f 0a02 	mov.w	sl, #2
 80162fa:	e7d1      	b.n	80162a0 <_scanf_float+0x188>
 80162fc:	b97d      	cbnz	r5, 801631e <_scanf_float+0x206>
 80162fe:	f1b9 0f00 	cmp.w	r9, #0
 8016302:	f47f af3c 	bne.w	801617e <_scanf_float+0x66>
 8016306:	6822      	ldr	r2, [r4, #0]
 8016308:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801630c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016310:	f47f af39 	bne.w	8016186 <_scanf_float+0x6e>
 8016314:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016318:	6022      	str	r2, [r4, #0]
 801631a:	2501      	movs	r5, #1
 801631c:	e7c0      	b.n	80162a0 <_scanf_float+0x188>
 801631e:	2d03      	cmp	r5, #3
 8016320:	d0e2      	beq.n	80162e8 <_scanf_float+0x1d0>
 8016322:	2d05      	cmp	r5, #5
 8016324:	e7de      	b.n	80162e4 <_scanf_float+0x1cc>
 8016326:	2d02      	cmp	r5, #2
 8016328:	f47f af26 	bne.w	8016178 <_scanf_float+0x60>
 801632c:	2503      	movs	r5, #3
 801632e:	e7b7      	b.n	80162a0 <_scanf_float+0x188>
 8016330:	2d06      	cmp	r5, #6
 8016332:	f47f af21 	bne.w	8016178 <_scanf_float+0x60>
 8016336:	2507      	movs	r5, #7
 8016338:	e7b2      	b.n	80162a0 <_scanf_float+0x188>
 801633a:	6822      	ldr	r2, [r4, #0]
 801633c:	0591      	lsls	r1, r2, #22
 801633e:	f57f af1b 	bpl.w	8016178 <_scanf_float+0x60>
 8016342:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016346:	6022      	str	r2, [r4, #0]
 8016348:	f8cd 9004 	str.w	r9, [sp, #4]
 801634c:	e7a8      	b.n	80162a0 <_scanf_float+0x188>
 801634e:	6822      	ldr	r2, [r4, #0]
 8016350:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016354:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016358:	d006      	beq.n	8016368 <_scanf_float+0x250>
 801635a:	0550      	lsls	r0, r2, #21
 801635c:	f57f af0c 	bpl.w	8016178 <_scanf_float+0x60>
 8016360:	f1b9 0f00 	cmp.w	r9, #0
 8016364:	f43f af0f 	beq.w	8016186 <_scanf_float+0x6e>
 8016368:	0591      	lsls	r1, r2, #22
 801636a:	bf58      	it	pl
 801636c:	9901      	ldrpl	r1, [sp, #4]
 801636e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016372:	bf58      	it	pl
 8016374:	eba9 0101 	subpl.w	r1, r9, r1
 8016378:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801637c:	bf58      	it	pl
 801637e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016382:	6022      	str	r2, [r4, #0]
 8016384:	f04f 0900 	mov.w	r9, #0
 8016388:	e78a      	b.n	80162a0 <_scanf_float+0x188>
 801638a:	f04f 0a03 	mov.w	sl, #3
 801638e:	e787      	b.n	80162a0 <_scanf_float+0x188>
 8016390:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016394:	4639      	mov	r1, r7
 8016396:	4640      	mov	r0, r8
 8016398:	4798      	blx	r3
 801639a:	2800      	cmp	r0, #0
 801639c:	f43f aedf 	beq.w	801615e <_scanf_float+0x46>
 80163a0:	e6ea      	b.n	8016178 <_scanf_float+0x60>
 80163a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80163aa:	463a      	mov	r2, r7
 80163ac:	4640      	mov	r0, r8
 80163ae:	4798      	blx	r3
 80163b0:	6923      	ldr	r3, [r4, #16]
 80163b2:	3b01      	subs	r3, #1
 80163b4:	6123      	str	r3, [r4, #16]
 80163b6:	e6ec      	b.n	8016192 <_scanf_float+0x7a>
 80163b8:	1e6b      	subs	r3, r5, #1
 80163ba:	2b06      	cmp	r3, #6
 80163bc:	d825      	bhi.n	801640a <_scanf_float+0x2f2>
 80163be:	2d02      	cmp	r5, #2
 80163c0:	d836      	bhi.n	8016430 <_scanf_float+0x318>
 80163c2:	455e      	cmp	r6, fp
 80163c4:	f67f aee8 	bls.w	8016198 <_scanf_float+0x80>
 80163c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80163d0:	463a      	mov	r2, r7
 80163d2:	4640      	mov	r0, r8
 80163d4:	4798      	blx	r3
 80163d6:	6923      	ldr	r3, [r4, #16]
 80163d8:	3b01      	subs	r3, #1
 80163da:	6123      	str	r3, [r4, #16]
 80163dc:	e7f1      	b.n	80163c2 <_scanf_float+0x2aa>
 80163de:	9802      	ldr	r0, [sp, #8]
 80163e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80163e8:	9002      	str	r0, [sp, #8]
 80163ea:	463a      	mov	r2, r7
 80163ec:	4640      	mov	r0, r8
 80163ee:	4798      	blx	r3
 80163f0:	6923      	ldr	r3, [r4, #16]
 80163f2:	3b01      	subs	r3, #1
 80163f4:	6123      	str	r3, [r4, #16]
 80163f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80163fa:	fa5f fa8a 	uxtb.w	sl, sl
 80163fe:	f1ba 0f02 	cmp.w	sl, #2
 8016402:	d1ec      	bne.n	80163de <_scanf_float+0x2c6>
 8016404:	3d03      	subs	r5, #3
 8016406:	b2ed      	uxtb	r5, r5
 8016408:	1b76      	subs	r6, r6, r5
 801640a:	6823      	ldr	r3, [r4, #0]
 801640c:	05da      	lsls	r2, r3, #23
 801640e:	d52f      	bpl.n	8016470 <_scanf_float+0x358>
 8016410:	055b      	lsls	r3, r3, #21
 8016412:	d510      	bpl.n	8016436 <_scanf_float+0x31e>
 8016414:	455e      	cmp	r6, fp
 8016416:	f67f aebf 	bls.w	8016198 <_scanf_float+0x80>
 801641a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801641e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016422:	463a      	mov	r2, r7
 8016424:	4640      	mov	r0, r8
 8016426:	4798      	blx	r3
 8016428:	6923      	ldr	r3, [r4, #16]
 801642a:	3b01      	subs	r3, #1
 801642c:	6123      	str	r3, [r4, #16]
 801642e:	e7f1      	b.n	8016414 <_scanf_float+0x2fc>
 8016430:	46aa      	mov	sl, r5
 8016432:	9602      	str	r6, [sp, #8]
 8016434:	e7df      	b.n	80163f6 <_scanf_float+0x2de>
 8016436:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801643a:	6923      	ldr	r3, [r4, #16]
 801643c:	2965      	cmp	r1, #101	; 0x65
 801643e:	f103 33ff 	add.w	r3, r3, #4294967295
 8016442:	f106 35ff 	add.w	r5, r6, #4294967295
 8016446:	6123      	str	r3, [r4, #16]
 8016448:	d00c      	beq.n	8016464 <_scanf_float+0x34c>
 801644a:	2945      	cmp	r1, #69	; 0x45
 801644c:	d00a      	beq.n	8016464 <_scanf_float+0x34c>
 801644e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016452:	463a      	mov	r2, r7
 8016454:	4640      	mov	r0, r8
 8016456:	4798      	blx	r3
 8016458:	6923      	ldr	r3, [r4, #16]
 801645a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801645e:	3b01      	subs	r3, #1
 8016460:	1eb5      	subs	r5, r6, #2
 8016462:	6123      	str	r3, [r4, #16]
 8016464:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016468:	463a      	mov	r2, r7
 801646a:	4640      	mov	r0, r8
 801646c:	4798      	blx	r3
 801646e:	462e      	mov	r6, r5
 8016470:	6825      	ldr	r5, [r4, #0]
 8016472:	f015 0510 	ands.w	r5, r5, #16
 8016476:	d158      	bne.n	801652a <_scanf_float+0x412>
 8016478:	7035      	strb	r5, [r6, #0]
 801647a:	6823      	ldr	r3, [r4, #0]
 801647c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016484:	d11c      	bne.n	80164c0 <_scanf_float+0x3a8>
 8016486:	9b01      	ldr	r3, [sp, #4]
 8016488:	454b      	cmp	r3, r9
 801648a:	eba3 0209 	sub.w	r2, r3, r9
 801648e:	d124      	bne.n	80164da <_scanf_float+0x3c2>
 8016490:	2200      	movs	r2, #0
 8016492:	4659      	mov	r1, fp
 8016494:	4640      	mov	r0, r8
 8016496:	f7ff f8df 	bl	8015658 <_strtod_r>
 801649a:	9b03      	ldr	r3, [sp, #12]
 801649c:	6821      	ldr	r1, [r4, #0]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	f011 0f02 	tst.w	r1, #2
 80164a4:	ec57 6b10 	vmov	r6, r7, d0
 80164a8:	f103 0204 	add.w	r2, r3, #4
 80164ac:	d020      	beq.n	80164f0 <_scanf_float+0x3d8>
 80164ae:	9903      	ldr	r1, [sp, #12]
 80164b0:	600a      	str	r2, [r1, #0]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	e9c3 6700 	strd	r6, r7, [r3]
 80164b8:	68e3      	ldr	r3, [r4, #12]
 80164ba:	3301      	adds	r3, #1
 80164bc:	60e3      	str	r3, [r4, #12]
 80164be:	e66c      	b.n	801619a <_scanf_float+0x82>
 80164c0:	9b04      	ldr	r3, [sp, #16]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d0e4      	beq.n	8016490 <_scanf_float+0x378>
 80164c6:	9905      	ldr	r1, [sp, #20]
 80164c8:	230a      	movs	r3, #10
 80164ca:	462a      	mov	r2, r5
 80164cc:	3101      	adds	r1, #1
 80164ce:	4640      	mov	r0, r8
 80164d0:	f7ff f9b0 	bl	8015834 <_strtol_r>
 80164d4:	9b04      	ldr	r3, [sp, #16]
 80164d6:	9e05      	ldr	r6, [sp, #20]
 80164d8:	1ac2      	subs	r2, r0, r3
 80164da:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80164de:	429e      	cmp	r6, r3
 80164e0:	bf28      	it	cs
 80164e2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80164e6:	4912      	ldr	r1, [pc, #72]	; (8016530 <_scanf_float+0x418>)
 80164e8:	4630      	mov	r0, r6
 80164ea:	f000 f91b 	bl	8016724 <siprintf>
 80164ee:	e7cf      	b.n	8016490 <_scanf_float+0x378>
 80164f0:	f011 0f04 	tst.w	r1, #4
 80164f4:	9903      	ldr	r1, [sp, #12]
 80164f6:	600a      	str	r2, [r1, #0]
 80164f8:	d1db      	bne.n	80164b2 <_scanf_float+0x39a>
 80164fa:	f8d3 8000 	ldr.w	r8, [r3]
 80164fe:	ee10 2a10 	vmov	r2, s0
 8016502:	ee10 0a10 	vmov	r0, s0
 8016506:	463b      	mov	r3, r7
 8016508:	4639      	mov	r1, r7
 801650a:	f7ea fb0f 	bl	8000b2c <__aeabi_dcmpun>
 801650e:	b128      	cbz	r0, 801651c <_scanf_float+0x404>
 8016510:	4808      	ldr	r0, [pc, #32]	; (8016534 <_scanf_float+0x41c>)
 8016512:	f000 fa9d 	bl	8016a50 <nanf>
 8016516:	ed88 0a00 	vstr	s0, [r8]
 801651a:	e7cd      	b.n	80164b8 <_scanf_float+0x3a0>
 801651c:	4630      	mov	r0, r6
 801651e:	4639      	mov	r1, r7
 8016520:	f7ea fb62 	bl	8000be8 <__aeabi_d2f>
 8016524:	f8c8 0000 	str.w	r0, [r8]
 8016528:	e7c6      	b.n	80164b8 <_scanf_float+0x3a0>
 801652a:	2500      	movs	r5, #0
 801652c:	e635      	b.n	801619a <_scanf_float+0x82>
 801652e:	bf00      	nop
 8016530:	0801ce75 	.word	0x0801ce75
 8016534:	0801cf2e 	.word	0x0801cf2e

08016538 <std>:
 8016538:	2300      	movs	r3, #0
 801653a:	b510      	push	{r4, lr}
 801653c:	4604      	mov	r4, r0
 801653e:	e9c0 3300 	strd	r3, r3, [r0]
 8016542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016546:	6083      	str	r3, [r0, #8]
 8016548:	8181      	strh	r1, [r0, #12]
 801654a:	6643      	str	r3, [r0, #100]	; 0x64
 801654c:	81c2      	strh	r2, [r0, #14]
 801654e:	6183      	str	r3, [r0, #24]
 8016550:	4619      	mov	r1, r3
 8016552:	2208      	movs	r2, #8
 8016554:	305c      	adds	r0, #92	; 0x5c
 8016556:	f000 f948 	bl	80167ea <memset>
 801655a:	4b0d      	ldr	r3, [pc, #52]	; (8016590 <std+0x58>)
 801655c:	6263      	str	r3, [r4, #36]	; 0x24
 801655e:	4b0d      	ldr	r3, [pc, #52]	; (8016594 <std+0x5c>)
 8016560:	62a3      	str	r3, [r4, #40]	; 0x28
 8016562:	4b0d      	ldr	r3, [pc, #52]	; (8016598 <std+0x60>)
 8016564:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016566:	4b0d      	ldr	r3, [pc, #52]	; (801659c <std+0x64>)
 8016568:	6323      	str	r3, [r4, #48]	; 0x30
 801656a:	4b0d      	ldr	r3, [pc, #52]	; (80165a0 <std+0x68>)
 801656c:	6224      	str	r4, [r4, #32]
 801656e:	429c      	cmp	r4, r3
 8016570:	d006      	beq.n	8016580 <std+0x48>
 8016572:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016576:	4294      	cmp	r4, r2
 8016578:	d002      	beq.n	8016580 <std+0x48>
 801657a:	33d0      	adds	r3, #208	; 0xd0
 801657c:	429c      	cmp	r4, r3
 801657e:	d105      	bne.n	801658c <std+0x54>
 8016580:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016588:	f000 ba40 	b.w	8016a0c <__retarget_lock_init_recursive>
 801658c:	bd10      	pop	{r4, pc}
 801658e:	bf00      	nop
 8016590:	08016765 	.word	0x08016765
 8016594:	08016787 	.word	0x08016787
 8016598:	080167bf 	.word	0x080167bf
 801659c:	080167e3 	.word	0x080167e3
 80165a0:	20002570 	.word	0x20002570

080165a4 <stdio_exit_handler>:
 80165a4:	4a02      	ldr	r2, [pc, #8]	; (80165b0 <stdio_exit_handler+0xc>)
 80165a6:	4903      	ldr	r1, [pc, #12]	; (80165b4 <stdio_exit_handler+0x10>)
 80165a8:	4803      	ldr	r0, [pc, #12]	; (80165b8 <stdio_exit_handler+0x14>)
 80165aa:	f000 b869 	b.w	8016680 <_fwalk_sglue>
 80165ae:	bf00      	nop
 80165b0:	20000130 	.word	0x20000130
 80165b4:	08018c29 	.word	0x08018c29
 80165b8:	200002a8 	.word	0x200002a8

080165bc <cleanup_stdio>:
 80165bc:	6841      	ldr	r1, [r0, #4]
 80165be:	4b0c      	ldr	r3, [pc, #48]	; (80165f0 <cleanup_stdio+0x34>)
 80165c0:	4299      	cmp	r1, r3
 80165c2:	b510      	push	{r4, lr}
 80165c4:	4604      	mov	r4, r0
 80165c6:	d001      	beq.n	80165cc <cleanup_stdio+0x10>
 80165c8:	f002 fb2e 	bl	8018c28 <_fflush_r>
 80165cc:	68a1      	ldr	r1, [r4, #8]
 80165ce:	4b09      	ldr	r3, [pc, #36]	; (80165f4 <cleanup_stdio+0x38>)
 80165d0:	4299      	cmp	r1, r3
 80165d2:	d002      	beq.n	80165da <cleanup_stdio+0x1e>
 80165d4:	4620      	mov	r0, r4
 80165d6:	f002 fb27 	bl	8018c28 <_fflush_r>
 80165da:	68e1      	ldr	r1, [r4, #12]
 80165dc:	4b06      	ldr	r3, [pc, #24]	; (80165f8 <cleanup_stdio+0x3c>)
 80165de:	4299      	cmp	r1, r3
 80165e0:	d004      	beq.n	80165ec <cleanup_stdio+0x30>
 80165e2:	4620      	mov	r0, r4
 80165e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165e8:	f002 bb1e 	b.w	8018c28 <_fflush_r>
 80165ec:	bd10      	pop	{r4, pc}
 80165ee:	bf00      	nop
 80165f0:	20002570 	.word	0x20002570
 80165f4:	200025d8 	.word	0x200025d8
 80165f8:	20002640 	.word	0x20002640

080165fc <global_stdio_init.part.0>:
 80165fc:	b510      	push	{r4, lr}
 80165fe:	4b0b      	ldr	r3, [pc, #44]	; (801662c <global_stdio_init.part.0+0x30>)
 8016600:	4c0b      	ldr	r4, [pc, #44]	; (8016630 <global_stdio_init.part.0+0x34>)
 8016602:	4a0c      	ldr	r2, [pc, #48]	; (8016634 <global_stdio_init.part.0+0x38>)
 8016604:	601a      	str	r2, [r3, #0]
 8016606:	4620      	mov	r0, r4
 8016608:	2200      	movs	r2, #0
 801660a:	2104      	movs	r1, #4
 801660c:	f7ff ff94 	bl	8016538 <std>
 8016610:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016614:	2201      	movs	r2, #1
 8016616:	2109      	movs	r1, #9
 8016618:	f7ff ff8e 	bl	8016538 <std>
 801661c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016620:	2202      	movs	r2, #2
 8016622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016626:	2112      	movs	r1, #18
 8016628:	f7ff bf86 	b.w	8016538 <std>
 801662c:	200026a8 	.word	0x200026a8
 8016630:	20002570 	.word	0x20002570
 8016634:	080165a5 	.word	0x080165a5

08016638 <__sfp_lock_acquire>:
 8016638:	4801      	ldr	r0, [pc, #4]	; (8016640 <__sfp_lock_acquire+0x8>)
 801663a:	f000 b9e8 	b.w	8016a0e <__retarget_lock_acquire_recursive>
 801663e:	bf00      	nop
 8016640:	200026b1 	.word	0x200026b1

08016644 <__sfp_lock_release>:
 8016644:	4801      	ldr	r0, [pc, #4]	; (801664c <__sfp_lock_release+0x8>)
 8016646:	f000 b9e3 	b.w	8016a10 <__retarget_lock_release_recursive>
 801664a:	bf00      	nop
 801664c:	200026b1 	.word	0x200026b1

08016650 <__sinit>:
 8016650:	b510      	push	{r4, lr}
 8016652:	4604      	mov	r4, r0
 8016654:	f7ff fff0 	bl	8016638 <__sfp_lock_acquire>
 8016658:	6a23      	ldr	r3, [r4, #32]
 801665a:	b11b      	cbz	r3, 8016664 <__sinit+0x14>
 801665c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016660:	f7ff bff0 	b.w	8016644 <__sfp_lock_release>
 8016664:	4b04      	ldr	r3, [pc, #16]	; (8016678 <__sinit+0x28>)
 8016666:	6223      	str	r3, [r4, #32]
 8016668:	4b04      	ldr	r3, [pc, #16]	; (801667c <__sinit+0x2c>)
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d1f5      	bne.n	801665c <__sinit+0xc>
 8016670:	f7ff ffc4 	bl	80165fc <global_stdio_init.part.0>
 8016674:	e7f2      	b.n	801665c <__sinit+0xc>
 8016676:	bf00      	nop
 8016678:	080165bd 	.word	0x080165bd
 801667c:	200026a8 	.word	0x200026a8

08016680 <_fwalk_sglue>:
 8016680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016684:	4607      	mov	r7, r0
 8016686:	4688      	mov	r8, r1
 8016688:	4614      	mov	r4, r2
 801668a:	2600      	movs	r6, #0
 801668c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016690:	f1b9 0901 	subs.w	r9, r9, #1
 8016694:	d505      	bpl.n	80166a2 <_fwalk_sglue+0x22>
 8016696:	6824      	ldr	r4, [r4, #0]
 8016698:	2c00      	cmp	r4, #0
 801669a:	d1f7      	bne.n	801668c <_fwalk_sglue+0xc>
 801669c:	4630      	mov	r0, r6
 801669e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166a2:	89ab      	ldrh	r3, [r5, #12]
 80166a4:	2b01      	cmp	r3, #1
 80166a6:	d907      	bls.n	80166b8 <_fwalk_sglue+0x38>
 80166a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80166ac:	3301      	adds	r3, #1
 80166ae:	d003      	beq.n	80166b8 <_fwalk_sglue+0x38>
 80166b0:	4629      	mov	r1, r5
 80166b2:	4638      	mov	r0, r7
 80166b4:	47c0      	blx	r8
 80166b6:	4306      	orrs	r6, r0
 80166b8:	3568      	adds	r5, #104	; 0x68
 80166ba:	e7e9      	b.n	8016690 <_fwalk_sglue+0x10>

080166bc <sniprintf>:
 80166bc:	b40c      	push	{r2, r3}
 80166be:	b530      	push	{r4, r5, lr}
 80166c0:	4b17      	ldr	r3, [pc, #92]	; (8016720 <sniprintf+0x64>)
 80166c2:	1e0c      	subs	r4, r1, #0
 80166c4:	681d      	ldr	r5, [r3, #0]
 80166c6:	b09d      	sub	sp, #116	; 0x74
 80166c8:	da08      	bge.n	80166dc <sniprintf+0x20>
 80166ca:	238b      	movs	r3, #139	; 0x8b
 80166cc:	602b      	str	r3, [r5, #0]
 80166ce:	f04f 30ff 	mov.w	r0, #4294967295
 80166d2:	b01d      	add	sp, #116	; 0x74
 80166d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80166d8:	b002      	add	sp, #8
 80166da:	4770      	bx	lr
 80166dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80166e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80166e4:	bf14      	ite	ne
 80166e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80166ea:	4623      	moveq	r3, r4
 80166ec:	9304      	str	r3, [sp, #16]
 80166ee:	9307      	str	r3, [sp, #28]
 80166f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80166f4:	9002      	str	r0, [sp, #8]
 80166f6:	9006      	str	r0, [sp, #24]
 80166f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80166fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80166fe:	ab21      	add	r3, sp, #132	; 0x84
 8016700:	a902      	add	r1, sp, #8
 8016702:	4628      	mov	r0, r5
 8016704:	9301      	str	r3, [sp, #4]
 8016706:	f002 f90b 	bl	8018920 <_svfiprintf_r>
 801670a:	1c43      	adds	r3, r0, #1
 801670c:	bfbc      	itt	lt
 801670e:	238b      	movlt	r3, #139	; 0x8b
 8016710:	602b      	strlt	r3, [r5, #0]
 8016712:	2c00      	cmp	r4, #0
 8016714:	d0dd      	beq.n	80166d2 <sniprintf+0x16>
 8016716:	9b02      	ldr	r3, [sp, #8]
 8016718:	2200      	movs	r2, #0
 801671a:	701a      	strb	r2, [r3, #0]
 801671c:	e7d9      	b.n	80166d2 <sniprintf+0x16>
 801671e:	bf00      	nop
 8016720:	200002f4 	.word	0x200002f4

08016724 <siprintf>:
 8016724:	b40e      	push	{r1, r2, r3}
 8016726:	b500      	push	{lr}
 8016728:	b09c      	sub	sp, #112	; 0x70
 801672a:	ab1d      	add	r3, sp, #116	; 0x74
 801672c:	9002      	str	r0, [sp, #8]
 801672e:	9006      	str	r0, [sp, #24]
 8016730:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016734:	4809      	ldr	r0, [pc, #36]	; (801675c <siprintf+0x38>)
 8016736:	9107      	str	r1, [sp, #28]
 8016738:	9104      	str	r1, [sp, #16]
 801673a:	4909      	ldr	r1, [pc, #36]	; (8016760 <siprintf+0x3c>)
 801673c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016740:	9105      	str	r1, [sp, #20]
 8016742:	6800      	ldr	r0, [r0, #0]
 8016744:	9301      	str	r3, [sp, #4]
 8016746:	a902      	add	r1, sp, #8
 8016748:	f002 f8ea 	bl	8018920 <_svfiprintf_r>
 801674c:	9b02      	ldr	r3, [sp, #8]
 801674e:	2200      	movs	r2, #0
 8016750:	701a      	strb	r2, [r3, #0]
 8016752:	b01c      	add	sp, #112	; 0x70
 8016754:	f85d eb04 	ldr.w	lr, [sp], #4
 8016758:	b003      	add	sp, #12
 801675a:	4770      	bx	lr
 801675c:	200002f4 	.word	0x200002f4
 8016760:	ffff0208 	.word	0xffff0208

08016764 <__sread>:
 8016764:	b510      	push	{r4, lr}
 8016766:	460c      	mov	r4, r1
 8016768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801676c:	f000 f8f0 	bl	8016950 <_read_r>
 8016770:	2800      	cmp	r0, #0
 8016772:	bfab      	itete	ge
 8016774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016776:	89a3      	ldrhlt	r3, [r4, #12]
 8016778:	181b      	addge	r3, r3, r0
 801677a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801677e:	bfac      	ite	ge
 8016780:	6563      	strge	r3, [r4, #84]	; 0x54
 8016782:	81a3      	strhlt	r3, [r4, #12]
 8016784:	bd10      	pop	{r4, pc}

08016786 <__swrite>:
 8016786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801678a:	461f      	mov	r7, r3
 801678c:	898b      	ldrh	r3, [r1, #12]
 801678e:	05db      	lsls	r3, r3, #23
 8016790:	4605      	mov	r5, r0
 8016792:	460c      	mov	r4, r1
 8016794:	4616      	mov	r6, r2
 8016796:	d505      	bpl.n	80167a4 <__swrite+0x1e>
 8016798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801679c:	2302      	movs	r3, #2
 801679e:	2200      	movs	r2, #0
 80167a0:	f000 f8c4 	bl	801692c <_lseek_r>
 80167a4:	89a3      	ldrh	r3, [r4, #12]
 80167a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80167aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80167ae:	81a3      	strh	r3, [r4, #12]
 80167b0:	4632      	mov	r2, r6
 80167b2:	463b      	mov	r3, r7
 80167b4:	4628      	mov	r0, r5
 80167b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80167ba:	f000 b8eb 	b.w	8016994 <_write_r>

080167be <__sseek>:
 80167be:	b510      	push	{r4, lr}
 80167c0:	460c      	mov	r4, r1
 80167c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167c6:	f000 f8b1 	bl	801692c <_lseek_r>
 80167ca:	1c43      	adds	r3, r0, #1
 80167cc:	89a3      	ldrh	r3, [r4, #12]
 80167ce:	bf15      	itete	ne
 80167d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80167d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80167d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80167da:	81a3      	strheq	r3, [r4, #12]
 80167dc:	bf18      	it	ne
 80167de:	81a3      	strhne	r3, [r4, #12]
 80167e0:	bd10      	pop	{r4, pc}

080167e2 <__sclose>:
 80167e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167e6:	f000 b891 	b.w	801690c <_close_r>

080167ea <memset>:
 80167ea:	4402      	add	r2, r0
 80167ec:	4603      	mov	r3, r0
 80167ee:	4293      	cmp	r3, r2
 80167f0:	d100      	bne.n	80167f4 <memset+0xa>
 80167f2:	4770      	bx	lr
 80167f4:	f803 1b01 	strb.w	r1, [r3], #1
 80167f8:	e7f9      	b.n	80167ee <memset+0x4>

080167fa <strncmp>:
 80167fa:	b510      	push	{r4, lr}
 80167fc:	b16a      	cbz	r2, 801681a <strncmp+0x20>
 80167fe:	3901      	subs	r1, #1
 8016800:	1884      	adds	r4, r0, r2
 8016802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016806:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801680a:	429a      	cmp	r2, r3
 801680c:	d103      	bne.n	8016816 <strncmp+0x1c>
 801680e:	42a0      	cmp	r0, r4
 8016810:	d001      	beq.n	8016816 <strncmp+0x1c>
 8016812:	2a00      	cmp	r2, #0
 8016814:	d1f5      	bne.n	8016802 <strncmp+0x8>
 8016816:	1ad0      	subs	r0, r2, r3
 8016818:	bd10      	pop	{r4, pc}
 801681a:	4610      	mov	r0, r2
 801681c:	e7fc      	b.n	8016818 <strncmp+0x1e>
	...

08016820 <strtok>:
 8016820:	4b16      	ldr	r3, [pc, #88]	; (801687c <strtok+0x5c>)
 8016822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016824:	681e      	ldr	r6, [r3, #0]
 8016826:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8016828:	4605      	mov	r5, r0
 801682a:	b9fc      	cbnz	r4, 801686c <strtok+0x4c>
 801682c:	2050      	movs	r0, #80	; 0x50
 801682e:	9101      	str	r1, [sp, #4]
 8016830:	f7fe f84a 	bl	80148c8 <malloc>
 8016834:	9901      	ldr	r1, [sp, #4]
 8016836:	6470      	str	r0, [r6, #68]	; 0x44
 8016838:	4602      	mov	r2, r0
 801683a:	b920      	cbnz	r0, 8016846 <strtok+0x26>
 801683c:	4b10      	ldr	r3, [pc, #64]	; (8016880 <strtok+0x60>)
 801683e:	4811      	ldr	r0, [pc, #68]	; (8016884 <strtok+0x64>)
 8016840:	215b      	movs	r1, #91	; 0x5b
 8016842:	f000 f90b 	bl	8016a5c <__assert_func>
 8016846:	e9c0 4400 	strd	r4, r4, [r0]
 801684a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801684e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8016852:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8016856:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801685a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801685e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8016862:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8016866:	6184      	str	r4, [r0, #24]
 8016868:	7704      	strb	r4, [r0, #28]
 801686a:	6244      	str	r4, [r0, #36]	; 0x24
 801686c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801686e:	2301      	movs	r3, #1
 8016870:	4628      	mov	r0, r5
 8016872:	b002      	add	sp, #8
 8016874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016878:	f000 b806 	b.w	8016888 <__strtok_r>
 801687c:	200002f4 	.word	0x200002f4
 8016880:	0801ce7a 	.word	0x0801ce7a
 8016884:	0801ce91 	.word	0x0801ce91

08016888 <__strtok_r>:
 8016888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801688a:	b908      	cbnz	r0, 8016890 <__strtok_r+0x8>
 801688c:	6810      	ldr	r0, [r2, #0]
 801688e:	b188      	cbz	r0, 80168b4 <__strtok_r+0x2c>
 8016890:	4604      	mov	r4, r0
 8016892:	4620      	mov	r0, r4
 8016894:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016898:	460f      	mov	r7, r1
 801689a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801689e:	b91e      	cbnz	r6, 80168a8 <__strtok_r+0x20>
 80168a0:	b965      	cbnz	r5, 80168bc <__strtok_r+0x34>
 80168a2:	6015      	str	r5, [r2, #0]
 80168a4:	4628      	mov	r0, r5
 80168a6:	e005      	b.n	80168b4 <__strtok_r+0x2c>
 80168a8:	42b5      	cmp	r5, r6
 80168aa:	d1f6      	bne.n	801689a <__strtok_r+0x12>
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d1f0      	bne.n	8016892 <__strtok_r+0xa>
 80168b0:	6014      	str	r4, [r2, #0]
 80168b2:	7003      	strb	r3, [r0, #0]
 80168b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168b6:	461c      	mov	r4, r3
 80168b8:	e00c      	b.n	80168d4 <__strtok_r+0x4c>
 80168ba:	b915      	cbnz	r5, 80168c2 <__strtok_r+0x3a>
 80168bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80168c0:	460e      	mov	r6, r1
 80168c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80168c6:	42ab      	cmp	r3, r5
 80168c8:	d1f7      	bne.n	80168ba <__strtok_r+0x32>
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d0f3      	beq.n	80168b6 <__strtok_r+0x2e>
 80168ce:	2300      	movs	r3, #0
 80168d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80168d4:	6014      	str	r4, [r2, #0]
 80168d6:	e7ed      	b.n	80168b4 <__strtok_r+0x2c>

080168d8 <strstr>:
 80168d8:	780a      	ldrb	r2, [r1, #0]
 80168da:	b570      	push	{r4, r5, r6, lr}
 80168dc:	b96a      	cbnz	r2, 80168fa <strstr+0x22>
 80168de:	bd70      	pop	{r4, r5, r6, pc}
 80168e0:	429a      	cmp	r2, r3
 80168e2:	d109      	bne.n	80168f8 <strstr+0x20>
 80168e4:	460c      	mov	r4, r1
 80168e6:	4605      	mov	r5, r0
 80168e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d0f6      	beq.n	80168de <strstr+0x6>
 80168f0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80168f4:	429e      	cmp	r6, r3
 80168f6:	d0f7      	beq.n	80168e8 <strstr+0x10>
 80168f8:	3001      	adds	r0, #1
 80168fa:	7803      	ldrb	r3, [r0, #0]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d1ef      	bne.n	80168e0 <strstr+0x8>
 8016900:	4618      	mov	r0, r3
 8016902:	e7ec      	b.n	80168de <strstr+0x6>

08016904 <_localeconv_r>:
 8016904:	4800      	ldr	r0, [pc, #0]	; (8016908 <_localeconv_r+0x4>)
 8016906:	4770      	bx	lr
 8016908:	2000022c 	.word	0x2000022c

0801690c <_close_r>:
 801690c:	b538      	push	{r3, r4, r5, lr}
 801690e:	4d06      	ldr	r5, [pc, #24]	; (8016928 <_close_r+0x1c>)
 8016910:	2300      	movs	r3, #0
 8016912:	4604      	mov	r4, r0
 8016914:	4608      	mov	r0, r1
 8016916:	602b      	str	r3, [r5, #0]
 8016918:	f7ee ff5f 	bl	80057da <_close>
 801691c:	1c43      	adds	r3, r0, #1
 801691e:	d102      	bne.n	8016926 <_close_r+0x1a>
 8016920:	682b      	ldr	r3, [r5, #0]
 8016922:	b103      	cbz	r3, 8016926 <_close_r+0x1a>
 8016924:	6023      	str	r3, [r4, #0]
 8016926:	bd38      	pop	{r3, r4, r5, pc}
 8016928:	200026ac 	.word	0x200026ac

0801692c <_lseek_r>:
 801692c:	b538      	push	{r3, r4, r5, lr}
 801692e:	4d07      	ldr	r5, [pc, #28]	; (801694c <_lseek_r+0x20>)
 8016930:	4604      	mov	r4, r0
 8016932:	4608      	mov	r0, r1
 8016934:	4611      	mov	r1, r2
 8016936:	2200      	movs	r2, #0
 8016938:	602a      	str	r2, [r5, #0]
 801693a:	461a      	mov	r2, r3
 801693c:	f7ee ff74 	bl	8005828 <_lseek>
 8016940:	1c43      	adds	r3, r0, #1
 8016942:	d102      	bne.n	801694a <_lseek_r+0x1e>
 8016944:	682b      	ldr	r3, [r5, #0]
 8016946:	b103      	cbz	r3, 801694a <_lseek_r+0x1e>
 8016948:	6023      	str	r3, [r4, #0]
 801694a:	bd38      	pop	{r3, r4, r5, pc}
 801694c:	200026ac 	.word	0x200026ac

08016950 <_read_r>:
 8016950:	b538      	push	{r3, r4, r5, lr}
 8016952:	4d07      	ldr	r5, [pc, #28]	; (8016970 <_read_r+0x20>)
 8016954:	4604      	mov	r4, r0
 8016956:	4608      	mov	r0, r1
 8016958:	4611      	mov	r1, r2
 801695a:	2200      	movs	r2, #0
 801695c:	602a      	str	r2, [r5, #0]
 801695e:	461a      	mov	r2, r3
 8016960:	f7ee ff02 	bl	8005768 <_read>
 8016964:	1c43      	adds	r3, r0, #1
 8016966:	d102      	bne.n	801696e <_read_r+0x1e>
 8016968:	682b      	ldr	r3, [r5, #0]
 801696a:	b103      	cbz	r3, 801696e <_read_r+0x1e>
 801696c:	6023      	str	r3, [r4, #0]
 801696e:	bd38      	pop	{r3, r4, r5, pc}
 8016970:	200026ac 	.word	0x200026ac

08016974 <_sbrk_r>:
 8016974:	b538      	push	{r3, r4, r5, lr}
 8016976:	4d06      	ldr	r5, [pc, #24]	; (8016990 <_sbrk_r+0x1c>)
 8016978:	2300      	movs	r3, #0
 801697a:	4604      	mov	r4, r0
 801697c:	4608      	mov	r0, r1
 801697e:	602b      	str	r3, [r5, #0]
 8016980:	f7ee ff60 	bl	8005844 <_sbrk>
 8016984:	1c43      	adds	r3, r0, #1
 8016986:	d102      	bne.n	801698e <_sbrk_r+0x1a>
 8016988:	682b      	ldr	r3, [r5, #0]
 801698a:	b103      	cbz	r3, 801698e <_sbrk_r+0x1a>
 801698c:	6023      	str	r3, [r4, #0]
 801698e:	bd38      	pop	{r3, r4, r5, pc}
 8016990:	200026ac 	.word	0x200026ac

08016994 <_write_r>:
 8016994:	b538      	push	{r3, r4, r5, lr}
 8016996:	4d07      	ldr	r5, [pc, #28]	; (80169b4 <_write_r+0x20>)
 8016998:	4604      	mov	r4, r0
 801699a:	4608      	mov	r0, r1
 801699c:	4611      	mov	r1, r2
 801699e:	2200      	movs	r2, #0
 80169a0:	602a      	str	r2, [r5, #0]
 80169a2:	461a      	mov	r2, r3
 80169a4:	f7ee fefd 	bl	80057a2 <_write>
 80169a8:	1c43      	adds	r3, r0, #1
 80169aa:	d102      	bne.n	80169b2 <_write_r+0x1e>
 80169ac:	682b      	ldr	r3, [r5, #0]
 80169ae:	b103      	cbz	r3, 80169b2 <_write_r+0x1e>
 80169b0:	6023      	str	r3, [r4, #0]
 80169b2:	bd38      	pop	{r3, r4, r5, pc}
 80169b4:	200026ac 	.word	0x200026ac

080169b8 <__errno>:
 80169b8:	4b01      	ldr	r3, [pc, #4]	; (80169c0 <__errno+0x8>)
 80169ba:	6818      	ldr	r0, [r3, #0]
 80169bc:	4770      	bx	lr
 80169be:	bf00      	nop
 80169c0:	200002f4 	.word	0x200002f4

080169c4 <__libc_init_array>:
 80169c4:	b570      	push	{r4, r5, r6, lr}
 80169c6:	4d0d      	ldr	r5, [pc, #52]	; (80169fc <__libc_init_array+0x38>)
 80169c8:	4c0d      	ldr	r4, [pc, #52]	; (8016a00 <__libc_init_array+0x3c>)
 80169ca:	1b64      	subs	r4, r4, r5
 80169cc:	10a4      	asrs	r4, r4, #2
 80169ce:	2600      	movs	r6, #0
 80169d0:	42a6      	cmp	r6, r4
 80169d2:	d109      	bne.n	80169e8 <__libc_init_array+0x24>
 80169d4:	4d0b      	ldr	r5, [pc, #44]	; (8016a04 <__libc_init_array+0x40>)
 80169d6:	4c0c      	ldr	r4, [pc, #48]	; (8016a08 <__libc_init_array+0x44>)
 80169d8:	f004 fa02 	bl	801ade0 <_init>
 80169dc:	1b64      	subs	r4, r4, r5
 80169de:	10a4      	asrs	r4, r4, #2
 80169e0:	2600      	movs	r6, #0
 80169e2:	42a6      	cmp	r6, r4
 80169e4:	d105      	bne.n	80169f2 <__libc_init_array+0x2e>
 80169e6:	bd70      	pop	{r4, r5, r6, pc}
 80169e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80169ec:	4798      	blx	r3
 80169ee:	3601      	adds	r6, #1
 80169f0:	e7ee      	b.n	80169d0 <__libc_init_array+0xc>
 80169f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80169f6:	4798      	blx	r3
 80169f8:	3601      	adds	r6, #1
 80169fa:	e7f2      	b.n	80169e2 <__libc_init_array+0x1e>
 80169fc:	0801d368 	.word	0x0801d368
 8016a00:	0801d368 	.word	0x0801d368
 8016a04:	0801d368 	.word	0x0801d368
 8016a08:	0801d36c 	.word	0x0801d36c

08016a0c <__retarget_lock_init_recursive>:
 8016a0c:	4770      	bx	lr

08016a0e <__retarget_lock_acquire_recursive>:
 8016a0e:	4770      	bx	lr

08016a10 <__retarget_lock_release_recursive>:
 8016a10:	4770      	bx	lr

08016a12 <strcpy>:
 8016a12:	4603      	mov	r3, r0
 8016a14:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016a18:	f803 2b01 	strb.w	r2, [r3], #1
 8016a1c:	2a00      	cmp	r2, #0
 8016a1e:	d1f9      	bne.n	8016a14 <strcpy+0x2>
 8016a20:	4770      	bx	lr

08016a22 <memcpy>:
 8016a22:	440a      	add	r2, r1
 8016a24:	4291      	cmp	r1, r2
 8016a26:	f100 33ff 	add.w	r3, r0, #4294967295
 8016a2a:	d100      	bne.n	8016a2e <memcpy+0xc>
 8016a2c:	4770      	bx	lr
 8016a2e:	b510      	push	{r4, lr}
 8016a30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016a34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016a38:	4291      	cmp	r1, r2
 8016a3a:	d1f9      	bne.n	8016a30 <memcpy+0xe>
 8016a3c:	bd10      	pop	{r4, pc}
	...

08016a40 <nan>:
 8016a40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016a48 <nan+0x8>
 8016a44:	4770      	bx	lr
 8016a46:	bf00      	nop
 8016a48:	00000000 	.word	0x00000000
 8016a4c:	7ff80000 	.word	0x7ff80000

08016a50 <nanf>:
 8016a50:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016a58 <nanf+0x8>
 8016a54:	4770      	bx	lr
 8016a56:	bf00      	nop
 8016a58:	7fc00000 	.word	0x7fc00000

08016a5c <__assert_func>:
 8016a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a5e:	4614      	mov	r4, r2
 8016a60:	461a      	mov	r2, r3
 8016a62:	4b09      	ldr	r3, [pc, #36]	; (8016a88 <__assert_func+0x2c>)
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	4605      	mov	r5, r0
 8016a68:	68d8      	ldr	r0, [r3, #12]
 8016a6a:	b14c      	cbz	r4, 8016a80 <__assert_func+0x24>
 8016a6c:	4b07      	ldr	r3, [pc, #28]	; (8016a8c <__assert_func+0x30>)
 8016a6e:	9100      	str	r1, [sp, #0]
 8016a70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016a74:	4906      	ldr	r1, [pc, #24]	; (8016a90 <__assert_func+0x34>)
 8016a76:	462b      	mov	r3, r5
 8016a78:	f002 f8fe 	bl	8018c78 <fiprintf>
 8016a7c:	f002 f928 	bl	8018cd0 <abort>
 8016a80:	4b04      	ldr	r3, [pc, #16]	; (8016a94 <__assert_func+0x38>)
 8016a82:	461c      	mov	r4, r3
 8016a84:	e7f3      	b.n	8016a6e <__assert_func+0x12>
 8016a86:	bf00      	nop
 8016a88:	200002f4 	.word	0x200002f4
 8016a8c:	0801cef3 	.word	0x0801cef3
 8016a90:	0801cf00 	.word	0x0801cf00
 8016a94:	0801cf2e 	.word	0x0801cf2e

08016a98 <quorem>:
 8016a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a9c:	6903      	ldr	r3, [r0, #16]
 8016a9e:	690c      	ldr	r4, [r1, #16]
 8016aa0:	42a3      	cmp	r3, r4
 8016aa2:	4607      	mov	r7, r0
 8016aa4:	db7e      	blt.n	8016ba4 <quorem+0x10c>
 8016aa6:	3c01      	subs	r4, #1
 8016aa8:	f101 0814 	add.w	r8, r1, #20
 8016aac:	f100 0514 	add.w	r5, r0, #20
 8016ab0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016ab4:	9301      	str	r3, [sp, #4]
 8016ab6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016aba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016abe:	3301      	adds	r3, #1
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016ac6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016aca:	fbb2 f6f3 	udiv	r6, r2, r3
 8016ace:	d331      	bcc.n	8016b34 <quorem+0x9c>
 8016ad0:	f04f 0e00 	mov.w	lr, #0
 8016ad4:	4640      	mov	r0, r8
 8016ad6:	46ac      	mov	ip, r5
 8016ad8:	46f2      	mov	sl, lr
 8016ada:	f850 2b04 	ldr.w	r2, [r0], #4
 8016ade:	b293      	uxth	r3, r2
 8016ae0:	fb06 e303 	mla	r3, r6, r3, lr
 8016ae4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016ae8:	0c1a      	lsrs	r2, r3, #16
 8016aea:	b29b      	uxth	r3, r3
 8016aec:	ebaa 0303 	sub.w	r3, sl, r3
 8016af0:	f8dc a000 	ldr.w	sl, [ip]
 8016af4:	fa13 f38a 	uxtah	r3, r3, sl
 8016af8:	fb06 220e 	mla	r2, r6, lr, r2
 8016afc:	9300      	str	r3, [sp, #0]
 8016afe:	9b00      	ldr	r3, [sp, #0]
 8016b00:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016b04:	b292      	uxth	r2, r2
 8016b06:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016b0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016b0e:	f8bd 3000 	ldrh.w	r3, [sp]
 8016b12:	4581      	cmp	r9, r0
 8016b14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016b18:	f84c 3b04 	str.w	r3, [ip], #4
 8016b1c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016b20:	d2db      	bcs.n	8016ada <quorem+0x42>
 8016b22:	f855 300b 	ldr.w	r3, [r5, fp]
 8016b26:	b92b      	cbnz	r3, 8016b34 <quorem+0x9c>
 8016b28:	9b01      	ldr	r3, [sp, #4]
 8016b2a:	3b04      	subs	r3, #4
 8016b2c:	429d      	cmp	r5, r3
 8016b2e:	461a      	mov	r2, r3
 8016b30:	d32c      	bcc.n	8016b8c <quorem+0xf4>
 8016b32:	613c      	str	r4, [r7, #16]
 8016b34:	4638      	mov	r0, r7
 8016b36:	f001 fca5 	bl	8018484 <__mcmp>
 8016b3a:	2800      	cmp	r0, #0
 8016b3c:	db22      	blt.n	8016b84 <quorem+0xec>
 8016b3e:	3601      	adds	r6, #1
 8016b40:	4629      	mov	r1, r5
 8016b42:	2000      	movs	r0, #0
 8016b44:	f858 2b04 	ldr.w	r2, [r8], #4
 8016b48:	f8d1 c000 	ldr.w	ip, [r1]
 8016b4c:	b293      	uxth	r3, r2
 8016b4e:	1ac3      	subs	r3, r0, r3
 8016b50:	0c12      	lsrs	r2, r2, #16
 8016b52:	fa13 f38c 	uxtah	r3, r3, ip
 8016b56:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8016b5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016b5e:	b29b      	uxth	r3, r3
 8016b60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016b64:	45c1      	cmp	r9, r8
 8016b66:	f841 3b04 	str.w	r3, [r1], #4
 8016b6a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016b6e:	d2e9      	bcs.n	8016b44 <quorem+0xac>
 8016b70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016b74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016b78:	b922      	cbnz	r2, 8016b84 <quorem+0xec>
 8016b7a:	3b04      	subs	r3, #4
 8016b7c:	429d      	cmp	r5, r3
 8016b7e:	461a      	mov	r2, r3
 8016b80:	d30a      	bcc.n	8016b98 <quorem+0x100>
 8016b82:	613c      	str	r4, [r7, #16]
 8016b84:	4630      	mov	r0, r6
 8016b86:	b003      	add	sp, #12
 8016b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b8c:	6812      	ldr	r2, [r2, #0]
 8016b8e:	3b04      	subs	r3, #4
 8016b90:	2a00      	cmp	r2, #0
 8016b92:	d1ce      	bne.n	8016b32 <quorem+0x9a>
 8016b94:	3c01      	subs	r4, #1
 8016b96:	e7c9      	b.n	8016b2c <quorem+0x94>
 8016b98:	6812      	ldr	r2, [r2, #0]
 8016b9a:	3b04      	subs	r3, #4
 8016b9c:	2a00      	cmp	r2, #0
 8016b9e:	d1f0      	bne.n	8016b82 <quorem+0xea>
 8016ba0:	3c01      	subs	r4, #1
 8016ba2:	e7eb      	b.n	8016b7c <quorem+0xe4>
 8016ba4:	2000      	movs	r0, #0
 8016ba6:	e7ee      	b.n	8016b86 <quorem+0xee>

08016ba8 <_dtoa_r>:
 8016ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bac:	ed2d 8b04 	vpush	{d8-d9}
 8016bb0:	69c5      	ldr	r5, [r0, #28]
 8016bb2:	b093      	sub	sp, #76	; 0x4c
 8016bb4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016bb8:	ec57 6b10 	vmov	r6, r7, d0
 8016bbc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016bc0:	9107      	str	r1, [sp, #28]
 8016bc2:	4604      	mov	r4, r0
 8016bc4:	920a      	str	r2, [sp, #40]	; 0x28
 8016bc6:	930d      	str	r3, [sp, #52]	; 0x34
 8016bc8:	b975      	cbnz	r5, 8016be8 <_dtoa_r+0x40>
 8016bca:	2010      	movs	r0, #16
 8016bcc:	f7fd fe7c 	bl	80148c8 <malloc>
 8016bd0:	4602      	mov	r2, r0
 8016bd2:	61e0      	str	r0, [r4, #28]
 8016bd4:	b920      	cbnz	r0, 8016be0 <_dtoa_r+0x38>
 8016bd6:	4bae      	ldr	r3, [pc, #696]	; (8016e90 <_dtoa_r+0x2e8>)
 8016bd8:	21ef      	movs	r1, #239	; 0xef
 8016bda:	48ae      	ldr	r0, [pc, #696]	; (8016e94 <_dtoa_r+0x2ec>)
 8016bdc:	f7ff ff3e 	bl	8016a5c <__assert_func>
 8016be0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016be4:	6005      	str	r5, [r0, #0]
 8016be6:	60c5      	str	r5, [r0, #12]
 8016be8:	69e3      	ldr	r3, [r4, #28]
 8016bea:	6819      	ldr	r1, [r3, #0]
 8016bec:	b151      	cbz	r1, 8016c04 <_dtoa_r+0x5c>
 8016bee:	685a      	ldr	r2, [r3, #4]
 8016bf0:	604a      	str	r2, [r1, #4]
 8016bf2:	2301      	movs	r3, #1
 8016bf4:	4093      	lsls	r3, r2
 8016bf6:	608b      	str	r3, [r1, #8]
 8016bf8:	4620      	mov	r0, r4
 8016bfa:	f001 f9bd 	bl	8017f78 <_Bfree>
 8016bfe:	69e3      	ldr	r3, [r4, #28]
 8016c00:	2200      	movs	r2, #0
 8016c02:	601a      	str	r2, [r3, #0]
 8016c04:	1e3b      	subs	r3, r7, #0
 8016c06:	bfbb      	ittet	lt
 8016c08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016c0c:	9303      	strlt	r3, [sp, #12]
 8016c0e:	2300      	movge	r3, #0
 8016c10:	2201      	movlt	r2, #1
 8016c12:	bfac      	ite	ge
 8016c14:	f8c8 3000 	strge.w	r3, [r8]
 8016c18:	f8c8 2000 	strlt.w	r2, [r8]
 8016c1c:	4b9e      	ldr	r3, [pc, #632]	; (8016e98 <_dtoa_r+0x2f0>)
 8016c1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8016c22:	ea33 0308 	bics.w	r3, r3, r8
 8016c26:	d11b      	bne.n	8016c60 <_dtoa_r+0xb8>
 8016c28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8016c2e:	6013      	str	r3, [r2, #0]
 8016c30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8016c34:	4333      	orrs	r3, r6
 8016c36:	f000 8593 	beq.w	8017760 <_dtoa_r+0xbb8>
 8016c3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016c3c:	b963      	cbnz	r3, 8016c58 <_dtoa_r+0xb0>
 8016c3e:	4b97      	ldr	r3, [pc, #604]	; (8016e9c <_dtoa_r+0x2f4>)
 8016c40:	e027      	b.n	8016c92 <_dtoa_r+0xea>
 8016c42:	4b97      	ldr	r3, [pc, #604]	; (8016ea0 <_dtoa_r+0x2f8>)
 8016c44:	9300      	str	r3, [sp, #0]
 8016c46:	3308      	adds	r3, #8
 8016c48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016c4a:	6013      	str	r3, [r2, #0]
 8016c4c:	9800      	ldr	r0, [sp, #0]
 8016c4e:	b013      	add	sp, #76	; 0x4c
 8016c50:	ecbd 8b04 	vpop	{d8-d9}
 8016c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c58:	4b90      	ldr	r3, [pc, #576]	; (8016e9c <_dtoa_r+0x2f4>)
 8016c5a:	9300      	str	r3, [sp, #0]
 8016c5c:	3303      	adds	r3, #3
 8016c5e:	e7f3      	b.n	8016c48 <_dtoa_r+0xa0>
 8016c60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016c64:	2200      	movs	r2, #0
 8016c66:	ec51 0b17 	vmov	r0, r1, d7
 8016c6a:	eeb0 8a47 	vmov.f32	s16, s14
 8016c6e:	eef0 8a67 	vmov.f32	s17, s15
 8016c72:	2300      	movs	r3, #0
 8016c74:	f7e9 ff28 	bl	8000ac8 <__aeabi_dcmpeq>
 8016c78:	4681      	mov	r9, r0
 8016c7a:	b160      	cbz	r0, 8016c96 <_dtoa_r+0xee>
 8016c7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c7e:	2301      	movs	r3, #1
 8016c80:	6013      	str	r3, [r2, #0]
 8016c82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	f000 8568 	beq.w	801775a <_dtoa_r+0xbb2>
 8016c8a:	4b86      	ldr	r3, [pc, #536]	; (8016ea4 <_dtoa_r+0x2fc>)
 8016c8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016c8e:	6013      	str	r3, [r2, #0]
 8016c90:	3b01      	subs	r3, #1
 8016c92:	9300      	str	r3, [sp, #0]
 8016c94:	e7da      	b.n	8016c4c <_dtoa_r+0xa4>
 8016c96:	aa10      	add	r2, sp, #64	; 0x40
 8016c98:	a911      	add	r1, sp, #68	; 0x44
 8016c9a:	4620      	mov	r0, r4
 8016c9c:	eeb0 0a48 	vmov.f32	s0, s16
 8016ca0:	eef0 0a68 	vmov.f32	s1, s17
 8016ca4:	f001 fd04 	bl	80186b0 <__d2b>
 8016ca8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016cac:	4682      	mov	sl, r0
 8016cae:	2d00      	cmp	r5, #0
 8016cb0:	d07f      	beq.n	8016db2 <_dtoa_r+0x20a>
 8016cb2:	ee18 3a90 	vmov	r3, s17
 8016cb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016cba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016cbe:	ec51 0b18 	vmov	r0, r1, d8
 8016cc2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016cc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016cca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016cce:	4619      	mov	r1, r3
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	4b75      	ldr	r3, [pc, #468]	; (8016ea8 <_dtoa_r+0x300>)
 8016cd4:	f7e9 fad8 	bl	8000288 <__aeabi_dsub>
 8016cd8:	a367      	add	r3, pc, #412	; (adr r3, 8016e78 <_dtoa_r+0x2d0>)
 8016cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cde:	f7e9 fc8b 	bl	80005f8 <__aeabi_dmul>
 8016ce2:	a367      	add	r3, pc, #412	; (adr r3, 8016e80 <_dtoa_r+0x2d8>)
 8016ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ce8:	f7e9 fad0 	bl	800028c <__adddf3>
 8016cec:	4606      	mov	r6, r0
 8016cee:	4628      	mov	r0, r5
 8016cf0:	460f      	mov	r7, r1
 8016cf2:	f7e9 fc17 	bl	8000524 <__aeabi_i2d>
 8016cf6:	a364      	add	r3, pc, #400	; (adr r3, 8016e88 <_dtoa_r+0x2e0>)
 8016cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cfc:	f7e9 fc7c 	bl	80005f8 <__aeabi_dmul>
 8016d00:	4602      	mov	r2, r0
 8016d02:	460b      	mov	r3, r1
 8016d04:	4630      	mov	r0, r6
 8016d06:	4639      	mov	r1, r7
 8016d08:	f7e9 fac0 	bl	800028c <__adddf3>
 8016d0c:	4606      	mov	r6, r0
 8016d0e:	460f      	mov	r7, r1
 8016d10:	f7e9 ff22 	bl	8000b58 <__aeabi_d2iz>
 8016d14:	2200      	movs	r2, #0
 8016d16:	4683      	mov	fp, r0
 8016d18:	2300      	movs	r3, #0
 8016d1a:	4630      	mov	r0, r6
 8016d1c:	4639      	mov	r1, r7
 8016d1e:	f7e9 fedd 	bl	8000adc <__aeabi_dcmplt>
 8016d22:	b148      	cbz	r0, 8016d38 <_dtoa_r+0x190>
 8016d24:	4658      	mov	r0, fp
 8016d26:	f7e9 fbfd 	bl	8000524 <__aeabi_i2d>
 8016d2a:	4632      	mov	r2, r6
 8016d2c:	463b      	mov	r3, r7
 8016d2e:	f7e9 fecb 	bl	8000ac8 <__aeabi_dcmpeq>
 8016d32:	b908      	cbnz	r0, 8016d38 <_dtoa_r+0x190>
 8016d34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016d38:	f1bb 0f16 	cmp.w	fp, #22
 8016d3c:	d857      	bhi.n	8016dee <_dtoa_r+0x246>
 8016d3e:	4b5b      	ldr	r3, [pc, #364]	; (8016eac <_dtoa_r+0x304>)
 8016d40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d48:	ec51 0b18 	vmov	r0, r1, d8
 8016d4c:	f7e9 fec6 	bl	8000adc <__aeabi_dcmplt>
 8016d50:	2800      	cmp	r0, #0
 8016d52:	d04e      	beq.n	8016df2 <_dtoa_r+0x24a>
 8016d54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016d58:	2300      	movs	r3, #0
 8016d5a:	930c      	str	r3, [sp, #48]	; 0x30
 8016d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d5e:	1b5b      	subs	r3, r3, r5
 8016d60:	1e5a      	subs	r2, r3, #1
 8016d62:	bf45      	ittet	mi
 8016d64:	f1c3 0301 	rsbmi	r3, r3, #1
 8016d68:	9305      	strmi	r3, [sp, #20]
 8016d6a:	2300      	movpl	r3, #0
 8016d6c:	2300      	movmi	r3, #0
 8016d6e:	9206      	str	r2, [sp, #24]
 8016d70:	bf54      	ite	pl
 8016d72:	9305      	strpl	r3, [sp, #20]
 8016d74:	9306      	strmi	r3, [sp, #24]
 8016d76:	f1bb 0f00 	cmp.w	fp, #0
 8016d7a:	db3c      	blt.n	8016df6 <_dtoa_r+0x24e>
 8016d7c:	9b06      	ldr	r3, [sp, #24]
 8016d7e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8016d82:	445b      	add	r3, fp
 8016d84:	9306      	str	r3, [sp, #24]
 8016d86:	2300      	movs	r3, #0
 8016d88:	9308      	str	r3, [sp, #32]
 8016d8a:	9b07      	ldr	r3, [sp, #28]
 8016d8c:	2b09      	cmp	r3, #9
 8016d8e:	d868      	bhi.n	8016e62 <_dtoa_r+0x2ba>
 8016d90:	2b05      	cmp	r3, #5
 8016d92:	bfc4      	itt	gt
 8016d94:	3b04      	subgt	r3, #4
 8016d96:	9307      	strgt	r3, [sp, #28]
 8016d98:	9b07      	ldr	r3, [sp, #28]
 8016d9a:	f1a3 0302 	sub.w	r3, r3, #2
 8016d9e:	bfcc      	ite	gt
 8016da0:	2500      	movgt	r5, #0
 8016da2:	2501      	movle	r5, #1
 8016da4:	2b03      	cmp	r3, #3
 8016da6:	f200 8085 	bhi.w	8016eb4 <_dtoa_r+0x30c>
 8016daa:	e8df f003 	tbb	[pc, r3]
 8016dae:	3b2e      	.short	0x3b2e
 8016db0:	5839      	.short	0x5839
 8016db2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016db6:	441d      	add	r5, r3
 8016db8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016dbc:	2b20      	cmp	r3, #32
 8016dbe:	bfc1      	itttt	gt
 8016dc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016dc4:	fa08 f803 	lslgt.w	r8, r8, r3
 8016dc8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8016dcc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8016dd0:	bfd6      	itet	le
 8016dd2:	f1c3 0320 	rsble	r3, r3, #32
 8016dd6:	ea48 0003 	orrgt.w	r0, r8, r3
 8016dda:	fa06 f003 	lslle.w	r0, r6, r3
 8016dde:	f7e9 fb91 	bl	8000504 <__aeabi_ui2d>
 8016de2:	2201      	movs	r2, #1
 8016de4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8016de8:	3d01      	subs	r5, #1
 8016dea:	920e      	str	r2, [sp, #56]	; 0x38
 8016dec:	e76f      	b.n	8016cce <_dtoa_r+0x126>
 8016dee:	2301      	movs	r3, #1
 8016df0:	e7b3      	b.n	8016d5a <_dtoa_r+0x1b2>
 8016df2:	900c      	str	r0, [sp, #48]	; 0x30
 8016df4:	e7b2      	b.n	8016d5c <_dtoa_r+0x1b4>
 8016df6:	9b05      	ldr	r3, [sp, #20]
 8016df8:	eba3 030b 	sub.w	r3, r3, fp
 8016dfc:	9305      	str	r3, [sp, #20]
 8016dfe:	f1cb 0300 	rsb	r3, fp, #0
 8016e02:	9308      	str	r3, [sp, #32]
 8016e04:	2300      	movs	r3, #0
 8016e06:	930b      	str	r3, [sp, #44]	; 0x2c
 8016e08:	e7bf      	b.n	8016d8a <_dtoa_r+0x1e2>
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	dc52      	bgt.n	8016eba <_dtoa_r+0x312>
 8016e14:	2301      	movs	r3, #1
 8016e16:	9301      	str	r3, [sp, #4]
 8016e18:	9304      	str	r3, [sp, #16]
 8016e1a:	461a      	mov	r2, r3
 8016e1c:	920a      	str	r2, [sp, #40]	; 0x28
 8016e1e:	e00b      	b.n	8016e38 <_dtoa_r+0x290>
 8016e20:	2301      	movs	r3, #1
 8016e22:	e7f3      	b.n	8016e0c <_dtoa_r+0x264>
 8016e24:	2300      	movs	r3, #0
 8016e26:	9309      	str	r3, [sp, #36]	; 0x24
 8016e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e2a:	445b      	add	r3, fp
 8016e2c:	9301      	str	r3, [sp, #4]
 8016e2e:	3301      	adds	r3, #1
 8016e30:	2b01      	cmp	r3, #1
 8016e32:	9304      	str	r3, [sp, #16]
 8016e34:	bfb8      	it	lt
 8016e36:	2301      	movlt	r3, #1
 8016e38:	69e0      	ldr	r0, [r4, #28]
 8016e3a:	2100      	movs	r1, #0
 8016e3c:	2204      	movs	r2, #4
 8016e3e:	f102 0614 	add.w	r6, r2, #20
 8016e42:	429e      	cmp	r6, r3
 8016e44:	d93d      	bls.n	8016ec2 <_dtoa_r+0x31a>
 8016e46:	6041      	str	r1, [r0, #4]
 8016e48:	4620      	mov	r0, r4
 8016e4a:	f001 f855 	bl	8017ef8 <_Balloc>
 8016e4e:	9000      	str	r0, [sp, #0]
 8016e50:	2800      	cmp	r0, #0
 8016e52:	d139      	bne.n	8016ec8 <_dtoa_r+0x320>
 8016e54:	4b16      	ldr	r3, [pc, #88]	; (8016eb0 <_dtoa_r+0x308>)
 8016e56:	4602      	mov	r2, r0
 8016e58:	f240 11af 	movw	r1, #431	; 0x1af
 8016e5c:	e6bd      	b.n	8016bda <_dtoa_r+0x32>
 8016e5e:	2301      	movs	r3, #1
 8016e60:	e7e1      	b.n	8016e26 <_dtoa_r+0x27e>
 8016e62:	2501      	movs	r5, #1
 8016e64:	2300      	movs	r3, #0
 8016e66:	9307      	str	r3, [sp, #28]
 8016e68:	9509      	str	r5, [sp, #36]	; 0x24
 8016e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8016e6e:	9301      	str	r3, [sp, #4]
 8016e70:	9304      	str	r3, [sp, #16]
 8016e72:	2200      	movs	r2, #0
 8016e74:	2312      	movs	r3, #18
 8016e76:	e7d1      	b.n	8016e1c <_dtoa_r+0x274>
 8016e78:	636f4361 	.word	0x636f4361
 8016e7c:	3fd287a7 	.word	0x3fd287a7
 8016e80:	8b60c8b3 	.word	0x8b60c8b3
 8016e84:	3fc68a28 	.word	0x3fc68a28
 8016e88:	509f79fb 	.word	0x509f79fb
 8016e8c:	3fd34413 	.word	0x3fd34413
 8016e90:	0801ce7a 	.word	0x0801ce7a
 8016e94:	0801cf3c 	.word	0x0801cf3c
 8016e98:	7ff00000 	.word	0x7ff00000
 8016e9c:	0801cf38 	.word	0x0801cf38
 8016ea0:	0801cf2f 	.word	0x0801cf2f
 8016ea4:	0801ce52 	.word	0x0801ce52
 8016ea8:	3ff80000 	.word	0x3ff80000
 8016eac:	0801d088 	.word	0x0801d088
 8016eb0:	0801cf94 	.word	0x0801cf94
 8016eb4:	2301      	movs	r3, #1
 8016eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8016eb8:	e7d7      	b.n	8016e6a <_dtoa_r+0x2c2>
 8016eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ebc:	9301      	str	r3, [sp, #4]
 8016ebe:	9304      	str	r3, [sp, #16]
 8016ec0:	e7ba      	b.n	8016e38 <_dtoa_r+0x290>
 8016ec2:	3101      	adds	r1, #1
 8016ec4:	0052      	lsls	r2, r2, #1
 8016ec6:	e7ba      	b.n	8016e3e <_dtoa_r+0x296>
 8016ec8:	69e3      	ldr	r3, [r4, #28]
 8016eca:	9a00      	ldr	r2, [sp, #0]
 8016ecc:	601a      	str	r2, [r3, #0]
 8016ece:	9b04      	ldr	r3, [sp, #16]
 8016ed0:	2b0e      	cmp	r3, #14
 8016ed2:	f200 80a8 	bhi.w	8017026 <_dtoa_r+0x47e>
 8016ed6:	2d00      	cmp	r5, #0
 8016ed8:	f000 80a5 	beq.w	8017026 <_dtoa_r+0x47e>
 8016edc:	f1bb 0f00 	cmp.w	fp, #0
 8016ee0:	dd38      	ble.n	8016f54 <_dtoa_r+0x3ac>
 8016ee2:	4bc0      	ldr	r3, [pc, #768]	; (80171e4 <_dtoa_r+0x63c>)
 8016ee4:	f00b 020f 	and.w	r2, fp, #15
 8016ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016eec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016ef0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016ef4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8016ef8:	d019      	beq.n	8016f2e <_dtoa_r+0x386>
 8016efa:	4bbb      	ldr	r3, [pc, #748]	; (80171e8 <_dtoa_r+0x640>)
 8016efc:	ec51 0b18 	vmov	r0, r1, d8
 8016f00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016f04:	f7e9 fca2 	bl	800084c <__aeabi_ddiv>
 8016f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f0c:	f008 080f 	and.w	r8, r8, #15
 8016f10:	2503      	movs	r5, #3
 8016f12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80171e8 <_dtoa_r+0x640>
 8016f16:	f1b8 0f00 	cmp.w	r8, #0
 8016f1a:	d10a      	bne.n	8016f32 <_dtoa_r+0x38a>
 8016f1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016f20:	4632      	mov	r2, r6
 8016f22:	463b      	mov	r3, r7
 8016f24:	f7e9 fc92 	bl	800084c <__aeabi_ddiv>
 8016f28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f2c:	e02b      	b.n	8016f86 <_dtoa_r+0x3de>
 8016f2e:	2502      	movs	r5, #2
 8016f30:	e7ef      	b.n	8016f12 <_dtoa_r+0x36a>
 8016f32:	f018 0f01 	tst.w	r8, #1
 8016f36:	d008      	beq.n	8016f4a <_dtoa_r+0x3a2>
 8016f38:	4630      	mov	r0, r6
 8016f3a:	4639      	mov	r1, r7
 8016f3c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016f40:	f7e9 fb5a 	bl	80005f8 <__aeabi_dmul>
 8016f44:	3501      	adds	r5, #1
 8016f46:	4606      	mov	r6, r0
 8016f48:	460f      	mov	r7, r1
 8016f4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016f4e:	f109 0908 	add.w	r9, r9, #8
 8016f52:	e7e0      	b.n	8016f16 <_dtoa_r+0x36e>
 8016f54:	f000 809f 	beq.w	8017096 <_dtoa_r+0x4ee>
 8016f58:	f1cb 0600 	rsb	r6, fp, #0
 8016f5c:	4ba1      	ldr	r3, [pc, #644]	; (80171e4 <_dtoa_r+0x63c>)
 8016f5e:	4fa2      	ldr	r7, [pc, #648]	; (80171e8 <_dtoa_r+0x640>)
 8016f60:	f006 020f 	and.w	r2, r6, #15
 8016f64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f6c:	ec51 0b18 	vmov	r0, r1, d8
 8016f70:	f7e9 fb42 	bl	80005f8 <__aeabi_dmul>
 8016f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f78:	1136      	asrs	r6, r6, #4
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	2502      	movs	r5, #2
 8016f7e:	2e00      	cmp	r6, #0
 8016f80:	d17e      	bne.n	8017080 <_dtoa_r+0x4d8>
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d1d0      	bne.n	8016f28 <_dtoa_r+0x380>
 8016f86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	f000 8084 	beq.w	801709a <_dtoa_r+0x4f2>
 8016f92:	4b96      	ldr	r3, [pc, #600]	; (80171ec <_dtoa_r+0x644>)
 8016f94:	2200      	movs	r2, #0
 8016f96:	4640      	mov	r0, r8
 8016f98:	4649      	mov	r1, r9
 8016f9a:	f7e9 fd9f 	bl	8000adc <__aeabi_dcmplt>
 8016f9e:	2800      	cmp	r0, #0
 8016fa0:	d07b      	beq.n	801709a <_dtoa_r+0x4f2>
 8016fa2:	9b04      	ldr	r3, [sp, #16]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d078      	beq.n	801709a <_dtoa_r+0x4f2>
 8016fa8:	9b01      	ldr	r3, [sp, #4]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	dd39      	ble.n	8017022 <_dtoa_r+0x47a>
 8016fae:	4b90      	ldr	r3, [pc, #576]	; (80171f0 <_dtoa_r+0x648>)
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	4640      	mov	r0, r8
 8016fb4:	4649      	mov	r1, r9
 8016fb6:	f7e9 fb1f 	bl	80005f8 <__aeabi_dmul>
 8016fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016fbe:	9e01      	ldr	r6, [sp, #4]
 8016fc0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8016fc4:	3501      	adds	r5, #1
 8016fc6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016fca:	4628      	mov	r0, r5
 8016fcc:	f7e9 faaa 	bl	8000524 <__aeabi_i2d>
 8016fd0:	4642      	mov	r2, r8
 8016fd2:	464b      	mov	r3, r9
 8016fd4:	f7e9 fb10 	bl	80005f8 <__aeabi_dmul>
 8016fd8:	4b86      	ldr	r3, [pc, #536]	; (80171f4 <_dtoa_r+0x64c>)
 8016fda:	2200      	movs	r2, #0
 8016fdc:	f7e9 f956 	bl	800028c <__adddf3>
 8016fe0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8016fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016fe8:	9303      	str	r3, [sp, #12]
 8016fea:	2e00      	cmp	r6, #0
 8016fec:	d158      	bne.n	80170a0 <_dtoa_r+0x4f8>
 8016fee:	4b82      	ldr	r3, [pc, #520]	; (80171f8 <_dtoa_r+0x650>)
 8016ff0:	2200      	movs	r2, #0
 8016ff2:	4640      	mov	r0, r8
 8016ff4:	4649      	mov	r1, r9
 8016ff6:	f7e9 f947 	bl	8000288 <__aeabi_dsub>
 8016ffa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016ffe:	4680      	mov	r8, r0
 8017000:	4689      	mov	r9, r1
 8017002:	f7e9 fd89 	bl	8000b18 <__aeabi_dcmpgt>
 8017006:	2800      	cmp	r0, #0
 8017008:	f040 8296 	bne.w	8017538 <_dtoa_r+0x990>
 801700c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017010:	4640      	mov	r0, r8
 8017012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017016:	4649      	mov	r1, r9
 8017018:	f7e9 fd60 	bl	8000adc <__aeabi_dcmplt>
 801701c:	2800      	cmp	r0, #0
 801701e:	f040 8289 	bne.w	8017534 <_dtoa_r+0x98c>
 8017022:	ed8d 8b02 	vstr	d8, [sp, #8]
 8017026:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017028:	2b00      	cmp	r3, #0
 801702a:	f2c0 814e 	blt.w	80172ca <_dtoa_r+0x722>
 801702e:	f1bb 0f0e 	cmp.w	fp, #14
 8017032:	f300 814a 	bgt.w	80172ca <_dtoa_r+0x722>
 8017036:	4b6b      	ldr	r3, [pc, #428]	; (80171e4 <_dtoa_r+0x63c>)
 8017038:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801703c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017042:	2b00      	cmp	r3, #0
 8017044:	f280 80dc 	bge.w	8017200 <_dtoa_r+0x658>
 8017048:	9b04      	ldr	r3, [sp, #16]
 801704a:	2b00      	cmp	r3, #0
 801704c:	f300 80d8 	bgt.w	8017200 <_dtoa_r+0x658>
 8017050:	f040 826f 	bne.w	8017532 <_dtoa_r+0x98a>
 8017054:	4b68      	ldr	r3, [pc, #416]	; (80171f8 <_dtoa_r+0x650>)
 8017056:	2200      	movs	r2, #0
 8017058:	4640      	mov	r0, r8
 801705a:	4649      	mov	r1, r9
 801705c:	f7e9 facc 	bl	80005f8 <__aeabi_dmul>
 8017060:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017064:	f7e9 fd4e 	bl	8000b04 <__aeabi_dcmpge>
 8017068:	9e04      	ldr	r6, [sp, #16]
 801706a:	4637      	mov	r7, r6
 801706c:	2800      	cmp	r0, #0
 801706e:	f040 8245 	bne.w	80174fc <_dtoa_r+0x954>
 8017072:	9d00      	ldr	r5, [sp, #0]
 8017074:	2331      	movs	r3, #49	; 0x31
 8017076:	f805 3b01 	strb.w	r3, [r5], #1
 801707a:	f10b 0b01 	add.w	fp, fp, #1
 801707e:	e241      	b.n	8017504 <_dtoa_r+0x95c>
 8017080:	07f2      	lsls	r2, r6, #31
 8017082:	d505      	bpl.n	8017090 <_dtoa_r+0x4e8>
 8017084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017088:	f7e9 fab6 	bl	80005f8 <__aeabi_dmul>
 801708c:	3501      	adds	r5, #1
 801708e:	2301      	movs	r3, #1
 8017090:	1076      	asrs	r6, r6, #1
 8017092:	3708      	adds	r7, #8
 8017094:	e773      	b.n	8016f7e <_dtoa_r+0x3d6>
 8017096:	2502      	movs	r5, #2
 8017098:	e775      	b.n	8016f86 <_dtoa_r+0x3de>
 801709a:	9e04      	ldr	r6, [sp, #16]
 801709c:	465f      	mov	r7, fp
 801709e:	e792      	b.n	8016fc6 <_dtoa_r+0x41e>
 80170a0:	9900      	ldr	r1, [sp, #0]
 80170a2:	4b50      	ldr	r3, [pc, #320]	; (80171e4 <_dtoa_r+0x63c>)
 80170a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80170a8:	4431      	add	r1, r6
 80170aa:	9102      	str	r1, [sp, #8]
 80170ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80170ae:	eeb0 9a47 	vmov.f32	s18, s14
 80170b2:	eef0 9a67 	vmov.f32	s19, s15
 80170b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80170ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80170be:	2900      	cmp	r1, #0
 80170c0:	d044      	beq.n	801714c <_dtoa_r+0x5a4>
 80170c2:	494e      	ldr	r1, [pc, #312]	; (80171fc <_dtoa_r+0x654>)
 80170c4:	2000      	movs	r0, #0
 80170c6:	f7e9 fbc1 	bl	800084c <__aeabi_ddiv>
 80170ca:	ec53 2b19 	vmov	r2, r3, d9
 80170ce:	f7e9 f8db 	bl	8000288 <__aeabi_dsub>
 80170d2:	9d00      	ldr	r5, [sp, #0]
 80170d4:	ec41 0b19 	vmov	d9, r0, r1
 80170d8:	4649      	mov	r1, r9
 80170da:	4640      	mov	r0, r8
 80170dc:	f7e9 fd3c 	bl	8000b58 <__aeabi_d2iz>
 80170e0:	4606      	mov	r6, r0
 80170e2:	f7e9 fa1f 	bl	8000524 <__aeabi_i2d>
 80170e6:	4602      	mov	r2, r0
 80170e8:	460b      	mov	r3, r1
 80170ea:	4640      	mov	r0, r8
 80170ec:	4649      	mov	r1, r9
 80170ee:	f7e9 f8cb 	bl	8000288 <__aeabi_dsub>
 80170f2:	3630      	adds	r6, #48	; 0x30
 80170f4:	f805 6b01 	strb.w	r6, [r5], #1
 80170f8:	ec53 2b19 	vmov	r2, r3, d9
 80170fc:	4680      	mov	r8, r0
 80170fe:	4689      	mov	r9, r1
 8017100:	f7e9 fcec 	bl	8000adc <__aeabi_dcmplt>
 8017104:	2800      	cmp	r0, #0
 8017106:	d164      	bne.n	80171d2 <_dtoa_r+0x62a>
 8017108:	4642      	mov	r2, r8
 801710a:	464b      	mov	r3, r9
 801710c:	4937      	ldr	r1, [pc, #220]	; (80171ec <_dtoa_r+0x644>)
 801710e:	2000      	movs	r0, #0
 8017110:	f7e9 f8ba 	bl	8000288 <__aeabi_dsub>
 8017114:	ec53 2b19 	vmov	r2, r3, d9
 8017118:	f7e9 fce0 	bl	8000adc <__aeabi_dcmplt>
 801711c:	2800      	cmp	r0, #0
 801711e:	f040 80b6 	bne.w	801728e <_dtoa_r+0x6e6>
 8017122:	9b02      	ldr	r3, [sp, #8]
 8017124:	429d      	cmp	r5, r3
 8017126:	f43f af7c 	beq.w	8017022 <_dtoa_r+0x47a>
 801712a:	4b31      	ldr	r3, [pc, #196]	; (80171f0 <_dtoa_r+0x648>)
 801712c:	ec51 0b19 	vmov	r0, r1, d9
 8017130:	2200      	movs	r2, #0
 8017132:	f7e9 fa61 	bl	80005f8 <__aeabi_dmul>
 8017136:	4b2e      	ldr	r3, [pc, #184]	; (80171f0 <_dtoa_r+0x648>)
 8017138:	ec41 0b19 	vmov	d9, r0, r1
 801713c:	2200      	movs	r2, #0
 801713e:	4640      	mov	r0, r8
 8017140:	4649      	mov	r1, r9
 8017142:	f7e9 fa59 	bl	80005f8 <__aeabi_dmul>
 8017146:	4680      	mov	r8, r0
 8017148:	4689      	mov	r9, r1
 801714a:	e7c5      	b.n	80170d8 <_dtoa_r+0x530>
 801714c:	ec51 0b17 	vmov	r0, r1, d7
 8017150:	f7e9 fa52 	bl	80005f8 <__aeabi_dmul>
 8017154:	9b02      	ldr	r3, [sp, #8]
 8017156:	9d00      	ldr	r5, [sp, #0]
 8017158:	930f      	str	r3, [sp, #60]	; 0x3c
 801715a:	ec41 0b19 	vmov	d9, r0, r1
 801715e:	4649      	mov	r1, r9
 8017160:	4640      	mov	r0, r8
 8017162:	f7e9 fcf9 	bl	8000b58 <__aeabi_d2iz>
 8017166:	4606      	mov	r6, r0
 8017168:	f7e9 f9dc 	bl	8000524 <__aeabi_i2d>
 801716c:	3630      	adds	r6, #48	; 0x30
 801716e:	4602      	mov	r2, r0
 8017170:	460b      	mov	r3, r1
 8017172:	4640      	mov	r0, r8
 8017174:	4649      	mov	r1, r9
 8017176:	f7e9 f887 	bl	8000288 <__aeabi_dsub>
 801717a:	f805 6b01 	strb.w	r6, [r5], #1
 801717e:	9b02      	ldr	r3, [sp, #8]
 8017180:	429d      	cmp	r5, r3
 8017182:	4680      	mov	r8, r0
 8017184:	4689      	mov	r9, r1
 8017186:	f04f 0200 	mov.w	r2, #0
 801718a:	d124      	bne.n	80171d6 <_dtoa_r+0x62e>
 801718c:	4b1b      	ldr	r3, [pc, #108]	; (80171fc <_dtoa_r+0x654>)
 801718e:	ec51 0b19 	vmov	r0, r1, d9
 8017192:	f7e9 f87b 	bl	800028c <__adddf3>
 8017196:	4602      	mov	r2, r0
 8017198:	460b      	mov	r3, r1
 801719a:	4640      	mov	r0, r8
 801719c:	4649      	mov	r1, r9
 801719e:	f7e9 fcbb 	bl	8000b18 <__aeabi_dcmpgt>
 80171a2:	2800      	cmp	r0, #0
 80171a4:	d173      	bne.n	801728e <_dtoa_r+0x6e6>
 80171a6:	ec53 2b19 	vmov	r2, r3, d9
 80171aa:	4914      	ldr	r1, [pc, #80]	; (80171fc <_dtoa_r+0x654>)
 80171ac:	2000      	movs	r0, #0
 80171ae:	f7e9 f86b 	bl	8000288 <__aeabi_dsub>
 80171b2:	4602      	mov	r2, r0
 80171b4:	460b      	mov	r3, r1
 80171b6:	4640      	mov	r0, r8
 80171b8:	4649      	mov	r1, r9
 80171ba:	f7e9 fc8f 	bl	8000adc <__aeabi_dcmplt>
 80171be:	2800      	cmp	r0, #0
 80171c0:	f43f af2f 	beq.w	8017022 <_dtoa_r+0x47a>
 80171c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80171c6:	1e6b      	subs	r3, r5, #1
 80171c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80171ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80171ce:	2b30      	cmp	r3, #48	; 0x30
 80171d0:	d0f8      	beq.n	80171c4 <_dtoa_r+0x61c>
 80171d2:	46bb      	mov	fp, r7
 80171d4:	e04a      	b.n	801726c <_dtoa_r+0x6c4>
 80171d6:	4b06      	ldr	r3, [pc, #24]	; (80171f0 <_dtoa_r+0x648>)
 80171d8:	f7e9 fa0e 	bl	80005f8 <__aeabi_dmul>
 80171dc:	4680      	mov	r8, r0
 80171de:	4689      	mov	r9, r1
 80171e0:	e7bd      	b.n	801715e <_dtoa_r+0x5b6>
 80171e2:	bf00      	nop
 80171e4:	0801d088 	.word	0x0801d088
 80171e8:	0801d060 	.word	0x0801d060
 80171ec:	3ff00000 	.word	0x3ff00000
 80171f0:	40240000 	.word	0x40240000
 80171f4:	401c0000 	.word	0x401c0000
 80171f8:	40140000 	.word	0x40140000
 80171fc:	3fe00000 	.word	0x3fe00000
 8017200:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017204:	9d00      	ldr	r5, [sp, #0]
 8017206:	4642      	mov	r2, r8
 8017208:	464b      	mov	r3, r9
 801720a:	4630      	mov	r0, r6
 801720c:	4639      	mov	r1, r7
 801720e:	f7e9 fb1d 	bl	800084c <__aeabi_ddiv>
 8017212:	f7e9 fca1 	bl	8000b58 <__aeabi_d2iz>
 8017216:	9001      	str	r0, [sp, #4]
 8017218:	f7e9 f984 	bl	8000524 <__aeabi_i2d>
 801721c:	4642      	mov	r2, r8
 801721e:	464b      	mov	r3, r9
 8017220:	f7e9 f9ea 	bl	80005f8 <__aeabi_dmul>
 8017224:	4602      	mov	r2, r0
 8017226:	460b      	mov	r3, r1
 8017228:	4630      	mov	r0, r6
 801722a:	4639      	mov	r1, r7
 801722c:	f7e9 f82c 	bl	8000288 <__aeabi_dsub>
 8017230:	9e01      	ldr	r6, [sp, #4]
 8017232:	9f04      	ldr	r7, [sp, #16]
 8017234:	3630      	adds	r6, #48	; 0x30
 8017236:	f805 6b01 	strb.w	r6, [r5], #1
 801723a:	9e00      	ldr	r6, [sp, #0]
 801723c:	1bae      	subs	r6, r5, r6
 801723e:	42b7      	cmp	r7, r6
 8017240:	4602      	mov	r2, r0
 8017242:	460b      	mov	r3, r1
 8017244:	d134      	bne.n	80172b0 <_dtoa_r+0x708>
 8017246:	f7e9 f821 	bl	800028c <__adddf3>
 801724a:	4642      	mov	r2, r8
 801724c:	464b      	mov	r3, r9
 801724e:	4606      	mov	r6, r0
 8017250:	460f      	mov	r7, r1
 8017252:	f7e9 fc61 	bl	8000b18 <__aeabi_dcmpgt>
 8017256:	b9c8      	cbnz	r0, 801728c <_dtoa_r+0x6e4>
 8017258:	4642      	mov	r2, r8
 801725a:	464b      	mov	r3, r9
 801725c:	4630      	mov	r0, r6
 801725e:	4639      	mov	r1, r7
 8017260:	f7e9 fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 8017264:	b110      	cbz	r0, 801726c <_dtoa_r+0x6c4>
 8017266:	9b01      	ldr	r3, [sp, #4]
 8017268:	07db      	lsls	r3, r3, #31
 801726a:	d40f      	bmi.n	801728c <_dtoa_r+0x6e4>
 801726c:	4651      	mov	r1, sl
 801726e:	4620      	mov	r0, r4
 8017270:	f000 fe82 	bl	8017f78 <_Bfree>
 8017274:	2300      	movs	r3, #0
 8017276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017278:	702b      	strb	r3, [r5, #0]
 801727a:	f10b 0301 	add.w	r3, fp, #1
 801727e:	6013      	str	r3, [r2, #0]
 8017280:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017282:	2b00      	cmp	r3, #0
 8017284:	f43f ace2 	beq.w	8016c4c <_dtoa_r+0xa4>
 8017288:	601d      	str	r5, [r3, #0]
 801728a:	e4df      	b.n	8016c4c <_dtoa_r+0xa4>
 801728c:	465f      	mov	r7, fp
 801728e:	462b      	mov	r3, r5
 8017290:	461d      	mov	r5, r3
 8017292:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017296:	2a39      	cmp	r2, #57	; 0x39
 8017298:	d106      	bne.n	80172a8 <_dtoa_r+0x700>
 801729a:	9a00      	ldr	r2, [sp, #0]
 801729c:	429a      	cmp	r2, r3
 801729e:	d1f7      	bne.n	8017290 <_dtoa_r+0x6e8>
 80172a0:	9900      	ldr	r1, [sp, #0]
 80172a2:	2230      	movs	r2, #48	; 0x30
 80172a4:	3701      	adds	r7, #1
 80172a6:	700a      	strb	r2, [r1, #0]
 80172a8:	781a      	ldrb	r2, [r3, #0]
 80172aa:	3201      	adds	r2, #1
 80172ac:	701a      	strb	r2, [r3, #0]
 80172ae:	e790      	b.n	80171d2 <_dtoa_r+0x62a>
 80172b0:	4ba3      	ldr	r3, [pc, #652]	; (8017540 <_dtoa_r+0x998>)
 80172b2:	2200      	movs	r2, #0
 80172b4:	f7e9 f9a0 	bl	80005f8 <__aeabi_dmul>
 80172b8:	2200      	movs	r2, #0
 80172ba:	2300      	movs	r3, #0
 80172bc:	4606      	mov	r6, r0
 80172be:	460f      	mov	r7, r1
 80172c0:	f7e9 fc02 	bl	8000ac8 <__aeabi_dcmpeq>
 80172c4:	2800      	cmp	r0, #0
 80172c6:	d09e      	beq.n	8017206 <_dtoa_r+0x65e>
 80172c8:	e7d0      	b.n	801726c <_dtoa_r+0x6c4>
 80172ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172cc:	2a00      	cmp	r2, #0
 80172ce:	f000 80ca 	beq.w	8017466 <_dtoa_r+0x8be>
 80172d2:	9a07      	ldr	r2, [sp, #28]
 80172d4:	2a01      	cmp	r2, #1
 80172d6:	f300 80ad 	bgt.w	8017434 <_dtoa_r+0x88c>
 80172da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80172dc:	2a00      	cmp	r2, #0
 80172de:	f000 80a5 	beq.w	801742c <_dtoa_r+0x884>
 80172e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80172e6:	9e08      	ldr	r6, [sp, #32]
 80172e8:	9d05      	ldr	r5, [sp, #20]
 80172ea:	9a05      	ldr	r2, [sp, #20]
 80172ec:	441a      	add	r2, r3
 80172ee:	9205      	str	r2, [sp, #20]
 80172f0:	9a06      	ldr	r2, [sp, #24]
 80172f2:	2101      	movs	r1, #1
 80172f4:	441a      	add	r2, r3
 80172f6:	4620      	mov	r0, r4
 80172f8:	9206      	str	r2, [sp, #24]
 80172fa:	f000 ff3d 	bl	8018178 <__i2b>
 80172fe:	4607      	mov	r7, r0
 8017300:	b165      	cbz	r5, 801731c <_dtoa_r+0x774>
 8017302:	9b06      	ldr	r3, [sp, #24]
 8017304:	2b00      	cmp	r3, #0
 8017306:	dd09      	ble.n	801731c <_dtoa_r+0x774>
 8017308:	42ab      	cmp	r3, r5
 801730a:	9a05      	ldr	r2, [sp, #20]
 801730c:	bfa8      	it	ge
 801730e:	462b      	movge	r3, r5
 8017310:	1ad2      	subs	r2, r2, r3
 8017312:	9205      	str	r2, [sp, #20]
 8017314:	9a06      	ldr	r2, [sp, #24]
 8017316:	1aed      	subs	r5, r5, r3
 8017318:	1ad3      	subs	r3, r2, r3
 801731a:	9306      	str	r3, [sp, #24]
 801731c:	9b08      	ldr	r3, [sp, #32]
 801731e:	b1f3      	cbz	r3, 801735e <_dtoa_r+0x7b6>
 8017320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017322:	2b00      	cmp	r3, #0
 8017324:	f000 80a3 	beq.w	801746e <_dtoa_r+0x8c6>
 8017328:	2e00      	cmp	r6, #0
 801732a:	dd10      	ble.n	801734e <_dtoa_r+0x7a6>
 801732c:	4639      	mov	r1, r7
 801732e:	4632      	mov	r2, r6
 8017330:	4620      	mov	r0, r4
 8017332:	f000 ffe1 	bl	80182f8 <__pow5mult>
 8017336:	4652      	mov	r2, sl
 8017338:	4601      	mov	r1, r0
 801733a:	4607      	mov	r7, r0
 801733c:	4620      	mov	r0, r4
 801733e:	f000 ff31 	bl	80181a4 <__multiply>
 8017342:	4651      	mov	r1, sl
 8017344:	4680      	mov	r8, r0
 8017346:	4620      	mov	r0, r4
 8017348:	f000 fe16 	bl	8017f78 <_Bfree>
 801734c:	46c2      	mov	sl, r8
 801734e:	9b08      	ldr	r3, [sp, #32]
 8017350:	1b9a      	subs	r2, r3, r6
 8017352:	d004      	beq.n	801735e <_dtoa_r+0x7b6>
 8017354:	4651      	mov	r1, sl
 8017356:	4620      	mov	r0, r4
 8017358:	f000 ffce 	bl	80182f8 <__pow5mult>
 801735c:	4682      	mov	sl, r0
 801735e:	2101      	movs	r1, #1
 8017360:	4620      	mov	r0, r4
 8017362:	f000 ff09 	bl	8018178 <__i2b>
 8017366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017368:	2b00      	cmp	r3, #0
 801736a:	4606      	mov	r6, r0
 801736c:	f340 8081 	ble.w	8017472 <_dtoa_r+0x8ca>
 8017370:	461a      	mov	r2, r3
 8017372:	4601      	mov	r1, r0
 8017374:	4620      	mov	r0, r4
 8017376:	f000 ffbf 	bl	80182f8 <__pow5mult>
 801737a:	9b07      	ldr	r3, [sp, #28]
 801737c:	2b01      	cmp	r3, #1
 801737e:	4606      	mov	r6, r0
 8017380:	dd7a      	ble.n	8017478 <_dtoa_r+0x8d0>
 8017382:	f04f 0800 	mov.w	r8, #0
 8017386:	6933      	ldr	r3, [r6, #16]
 8017388:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801738c:	6918      	ldr	r0, [r3, #16]
 801738e:	f000 fea5 	bl	80180dc <__hi0bits>
 8017392:	f1c0 0020 	rsb	r0, r0, #32
 8017396:	9b06      	ldr	r3, [sp, #24]
 8017398:	4418      	add	r0, r3
 801739a:	f010 001f 	ands.w	r0, r0, #31
 801739e:	f000 8094 	beq.w	80174ca <_dtoa_r+0x922>
 80173a2:	f1c0 0320 	rsb	r3, r0, #32
 80173a6:	2b04      	cmp	r3, #4
 80173a8:	f340 8085 	ble.w	80174b6 <_dtoa_r+0x90e>
 80173ac:	9b05      	ldr	r3, [sp, #20]
 80173ae:	f1c0 001c 	rsb	r0, r0, #28
 80173b2:	4403      	add	r3, r0
 80173b4:	9305      	str	r3, [sp, #20]
 80173b6:	9b06      	ldr	r3, [sp, #24]
 80173b8:	4403      	add	r3, r0
 80173ba:	4405      	add	r5, r0
 80173bc:	9306      	str	r3, [sp, #24]
 80173be:	9b05      	ldr	r3, [sp, #20]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	dd05      	ble.n	80173d0 <_dtoa_r+0x828>
 80173c4:	4651      	mov	r1, sl
 80173c6:	461a      	mov	r2, r3
 80173c8:	4620      	mov	r0, r4
 80173ca:	f000 ffef 	bl	80183ac <__lshift>
 80173ce:	4682      	mov	sl, r0
 80173d0:	9b06      	ldr	r3, [sp, #24]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	dd05      	ble.n	80173e2 <_dtoa_r+0x83a>
 80173d6:	4631      	mov	r1, r6
 80173d8:	461a      	mov	r2, r3
 80173da:	4620      	mov	r0, r4
 80173dc:	f000 ffe6 	bl	80183ac <__lshift>
 80173e0:	4606      	mov	r6, r0
 80173e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d072      	beq.n	80174ce <_dtoa_r+0x926>
 80173e8:	4631      	mov	r1, r6
 80173ea:	4650      	mov	r0, sl
 80173ec:	f001 f84a 	bl	8018484 <__mcmp>
 80173f0:	2800      	cmp	r0, #0
 80173f2:	da6c      	bge.n	80174ce <_dtoa_r+0x926>
 80173f4:	2300      	movs	r3, #0
 80173f6:	4651      	mov	r1, sl
 80173f8:	220a      	movs	r2, #10
 80173fa:	4620      	mov	r0, r4
 80173fc:	f000 fdde 	bl	8017fbc <__multadd>
 8017400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017402:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017406:	4682      	mov	sl, r0
 8017408:	2b00      	cmp	r3, #0
 801740a:	f000 81b0 	beq.w	801776e <_dtoa_r+0xbc6>
 801740e:	2300      	movs	r3, #0
 8017410:	4639      	mov	r1, r7
 8017412:	220a      	movs	r2, #10
 8017414:	4620      	mov	r0, r4
 8017416:	f000 fdd1 	bl	8017fbc <__multadd>
 801741a:	9b01      	ldr	r3, [sp, #4]
 801741c:	2b00      	cmp	r3, #0
 801741e:	4607      	mov	r7, r0
 8017420:	f300 8096 	bgt.w	8017550 <_dtoa_r+0x9a8>
 8017424:	9b07      	ldr	r3, [sp, #28]
 8017426:	2b02      	cmp	r3, #2
 8017428:	dc59      	bgt.n	80174de <_dtoa_r+0x936>
 801742a:	e091      	b.n	8017550 <_dtoa_r+0x9a8>
 801742c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801742e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017432:	e758      	b.n	80172e6 <_dtoa_r+0x73e>
 8017434:	9b04      	ldr	r3, [sp, #16]
 8017436:	1e5e      	subs	r6, r3, #1
 8017438:	9b08      	ldr	r3, [sp, #32]
 801743a:	42b3      	cmp	r3, r6
 801743c:	bfbf      	itttt	lt
 801743e:	9b08      	ldrlt	r3, [sp, #32]
 8017440:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8017442:	9608      	strlt	r6, [sp, #32]
 8017444:	1af3      	sublt	r3, r6, r3
 8017446:	bfb4      	ite	lt
 8017448:	18d2      	addlt	r2, r2, r3
 801744a:	1b9e      	subge	r6, r3, r6
 801744c:	9b04      	ldr	r3, [sp, #16]
 801744e:	bfbc      	itt	lt
 8017450:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8017452:	2600      	movlt	r6, #0
 8017454:	2b00      	cmp	r3, #0
 8017456:	bfb7      	itett	lt
 8017458:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801745c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8017460:	1a9d      	sublt	r5, r3, r2
 8017462:	2300      	movlt	r3, #0
 8017464:	e741      	b.n	80172ea <_dtoa_r+0x742>
 8017466:	9e08      	ldr	r6, [sp, #32]
 8017468:	9d05      	ldr	r5, [sp, #20]
 801746a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801746c:	e748      	b.n	8017300 <_dtoa_r+0x758>
 801746e:	9a08      	ldr	r2, [sp, #32]
 8017470:	e770      	b.n	8017354 <_dtoa_r+0x7ac>
 8017472:	9b07      	ldr	r3, [sp, #28]
 8017474:	2b01      	cmp	r3, #1
 8017476:	dc19      	bgt.n	80174ac <_dtoa_r+0x904>
 8017478:	9b02      	ldr	r3, [sp, #8]
 801747a:	b9bb      	cbnz	r3, 80174ac <_dtoa_r+0x904>
 801747c:	9b03      	ldr	r3, [sp, #12]
 801747e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017482:	b99b      	cbnz	r3, 80174ac <_dtoa_r+0x904>
 8017484:	9b03      	ldr	r3, [sp, #12]
 8017486:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801748a:	0d1b      	lsrs	r3, r3, #20
 801748c:	051b      	lsls	r3, r3, #20
 801748e:	b183      	cbz	r3, 80174b2 <_dtoa_r+0x90a>
 8017490:	9b05      	ldr	r3, [sp, #20]
 8017492:	3301      	adds	r3, #1
 8017494:	9305      	str	r3, [sp, #20]
 8017496:	9b06      	ldr	r3, [sp, #24]
 8017498:	3301      	adds	r3, #1
 801749a:	9306      	str	r3, [sp, #24]
 801749c:	f04f 0801 	mov.w	r8, #1
 80174a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	f47f af6f 	bne.w	8017386 <_dtoa_r+0x7de>
 80174a8:	2001      	movs	r0, #1
 80174aa:	e774      	b.n	8017396 <_dtoa_r+0x7ee>
 80174ac:	f04f 0800 	mov.w	r8, #0
 80174b0:	e7f6      	b.n	80174a0 <_dtoa_r+0x8f8>
 80174b2:	4698      	mov	r8, r3
 80174b4:	e7f4      	b.n	80174a0 <_dtoa_r+0x8f8>
 80174b6:	d082      	beq.n	80173be <_dtoa_r+0x816>
 80174b8:	9a05      	ldr	r2, [sp, #20]
 80174ba:	331c      	adds	r3, #28
 80174bc:	441a      	add	r2, r3
 80174be:	9205      	str	r2, [sp, #20]
 80174c0:	9a06      	ldr	r2, [sp, #24]
 80174c2:	441a      	add	r2, r3
 80174c4:	441d      	add	r5, r3
 80174c6:	9206      	str	r2, [sp, #24]
 80174c8:	e779      	b.n	80173be <_dtoa_r+0x816>
 80174ca:	4603      	mov	r3, r0
 80174cc:	e7f4      	b.n	80174b8 <_dtoa_r+0x910>
 80174ce:	9b04      	ldr	r3, [sp, #16]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	dc37      	bgt.n	8017544 <_dtoa_r+0x99c>
 80174d4:	9b07      	ldr	r3, [sp, #28]
 80174d6:	2b02      	cmp	r3, #2
 80174d8:	dd34      	ble.n	8017544 <_dtoa_r+0x99c>
 80174da:	9b04      	ldr	r3, [sp, #16]
 80174dc:	9301      	str	r3, [sp, #4]
 80174de:	9b01      	ldr	r3, [sp, #4]
 80174e0:	b963      	cbnz	r3, 80174fc <_dtoa_r+0x954>
 80174e2:	4631      	mov	r1, r6
 80174e4:	2205      	movs	r2, #5
 80174e6:	4620      	mov	r0, r4
 80174e8:	f000 fd68 	bl	8017fbc <__multadd>
 80174ec:	4601      	mov	r1, r0
 80174ee:	4606      	mov	r6, r0
 80174f0:	4650      	mov	r0, sl
 80174f2:	f000 ffc7 	bl	8018484 <__mcmp>
 80174f6:	2800      	cmp	r0, #0
 80174f8:	f73f adbb 	bgt.w	8017072 <_dtoa_r+0x4ca>
 80174fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174fe:	9d00      	ldr	r5, [sp, #0]
 8017500:	ea6f 0b03 	mvn.w	fp, r3
 8017504:	f04f 0800 	mov.w	r8, #0
 8017508:	4631      	mov	r1, r6
 801750a:	4620      	mov	r0, r4
 801750c:	f000 fd34 	bl	8017f78 <_Bfree>
 8017510:	2f00      	cmp	r7, #0
 8017512:	f43f aeab 	beq.w	801726c <_dtoa_r+0x6c4>
 8017516:	f1b8 0f00 	cmp.w	r8, #0
 801751a:	d005      	beq.n	8017528 <_dtoa_r+0x980>
 801751c:	45b8      	cmp	r8, r7
 801751e:	d003      	beq.n	8017528 <_dtoa_r+0x980>
 8017520:	4641      	mov	r1, r8
 8017522:	4620      	mov	r0, r4
 8017524:	f000 fd28 	bl	8017f78 <_Bfree>
 8017528:	4639      	mov	r1, r7
 801752a:	4620      	mov	r0, r4
 801752c:	f000 fd24 	bl	8017f78 <_Bfree>
 8017530:	e69c      	b.n	801726c <_dtoa_r+0x6c4>
 8017532:	2600      	movs	r6, #0
 8017534:	4637      	mov	r7, r6
 8017536:	e7e1      	b.n	80174fc <_dtoa_r+0x954>
 8017538:	46bb      	mov	fp, r7
 801753a:	4637      	mov	r7, r6
 801753c:	e599      	b.n	8017072 <_dtoa_r+0x4ca>
 801753e:	bf00      	nop
 8017540:	40240000 	.word	0x40240000
 8017544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017546:	2b00      	cmp	r3, #0
 8017548:	f000 80c8 	beq.w	80176dc <_dtoa_r+0xb34>
 801754c:	9b04      	ldr	r3, [sp, #16]
 801754e:	9301      	str	r3, [sp, #4]
 8017550:	2d00      	cmp	r5, #0
 8017552:	dd05      	ble.n	8017560 <_dtoa_r+0x9b8>
 8017554:	4639      	mov	r1, r7
 8017556:	462a      	mov	r2, r5
 8017558:	4620      	mov	r0, r4
 801755a:	f000 ff27 	bl	80183ac <__lshift>
 801755e:	4607      	mov	r7, r0
 8017560:	f1b8 0f00 	cmp.w	r8, #0
 8017564:	d05b      	beq.n	801761e <_dtoa_r+0xa76>
 8017566:	6879      	ldr	r1, [r7, #4]
 8017568:	4620      	mov	r0, r4
 801756a:	f000 fcc5 	bl	8017ef8 <_Balloc>
 801756e:	4605      	mov	r5, r0
 8017570:	b928      	cbnz	r0, 801757e <_dtoa_r+0x9d6>
 8017572:	4b83      	ldr	r3, [pc, #524]	; (8017780 <_dtoa_r+0xbd8>)
 8017574:	4602      	mov	r2, r0
 8017576:	f240 21ef 	movw	r1, #751	; 0x2ef
 801757a:	f7ff bb2e 	b.w	8016bda <_dtoa_r+0x32>
 801757e:	693a      	ldr	r2, [r7, #16]
 8017580:	3202      	adds	r2, #2
 8017582:	0092      	lsls	r2, r2, #2
 8017584:	f107 010c 	add.w	r1, r7, #12
 8017588:	300c      	adds	r0, #12
 801758a:	f7ff fa4a 	bl	8016a22 <memcpy>
 801758e:	2201      	movs	r2, #1
 8017590:	4629      	mov	r1, r5
 8017592:	4620      	mov	r0, r4
 8017594:	f000 ff0a 	bl	80183ac <__lshift>
 8017598:	9b00      	ldr	r3, [sp, #0]
 801759a:	3301      	adds	r3, #1
 801759c:	9304      	str	r3, [sp, #16]
 801759e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80175a2:	4413      	add	r3, r2
 80175a4:	9308      	str	r3, [sp, #32]
 80175a6:	9b02      	ldr	r3, [sp, #8]
 80175a8:	f003 0301 	and.w	r3, r3, #1
 80175ac:	46b8      	mov	r8, r7
 80175ae:	9306      	str	r3, [sp, #24]
 80175b0:	4607      	mov	r7, r0
 80175b2:	9b04      	ldr	r3, [sp, #16]
 80175b4:	4631      	mov	r1, r6
 80175b6:	3b01      	subs	r3, #1
 80175b8:	4650      	mov	r0, sl
 80175ba:	9301      	str	r3, [sp, #4]
 80175bc:	f7ff fa6c 	bl	8016a98 <quorem>
 80175c0:	4641      	mov	r1, r8
 80175c2:	9002      	str	r0, [sp, #8]
 80175c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80175c8:	4650      	mov	r0, sl
 80175ca:	f000 ff5b 	bl	8018484 <__mcmp>
 80175ce:	463a      	mov	r2, r7
 80175d0:	9005      	str	r0, [sp, #20]
 80175d2:	4631      	mov	r1, r6
 80175d4:	4620      	mov	r0, r4
 80175d6:	f000 ff71 	bl	80184bc <__mdiff>
 80175da:	68c2      	ldr	r2, [r0, #12]
 80175dc:	4605      	mov	r5, r0
 80175de:	bb02      	cbnz	r2, 8017622 <_dtoa_r+0xa7a>
 80175e0:	4601      	mov	r1, r0
 80175e2:	4650      	mov	r0, sl
 80175e4:	f000 ff4e 	bl	8018484 <__mcmp>
 80175e8:	4602      	mov	r2, r0
 80175ea:	4629      	mov	r1, r5
 80175ec:	4620      	mov	r0, r4
 80175ee:	9209      	str	r2, [sp, #36]	; 0x24
 80175f0:	f000 fcc2 	bl	8017f78 <_Bfree>
 80175f4:	9b07      	ldr	r3, [sp, #28]
 80175f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80175f8:	9d04      	ldr	r5, [sp, #16]
 80175fa:	ea43 0102 	orr.w	r1, r3, r2
 80175fe:	9b06      	ldr	r3, [sp, #24]
 8017600:	4319      	orrs	r1, r3
 8017602:	d110      	bne.n	8017626 <_dtoa_r+0xa7e>
 8017604:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017608:	d029      	beq.n	801765e <_dtoa_r+0xab6>
 801760a:	9b05      	ldr	r3, [sp, #20]
 801760c:	2b00      	cmp	r3, #0
 801760e:	dd02      	ble.n	8017616 <_dtoa_r+0xa6e>
 8017610:	9b02      	ldr	r3, [sp, #8]
 8017612:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8017616:	9b01      	ldr	r3, [sp, #4]
 8017618:	f883 9000 	strb.w	r9, [r3]
 801761c:	e774      	b.n	8017508 <_dtoa_r+0x960>
 801761e:	4638      	mov	r0, r7
 8017620:	e7ba      	b.n	8017598 <_dtoa_r+0x9f0>
 8017622:	2201      	movs	r2, #1
 8017624:	e7e1      	b.n	80175ea <_dtoa_r+0xa42>
 8017626:	9b05      	ldr	r3, [sp, #20]
 8017628:	2b00      	cmp	r3, #0
 801762a:	db04      	blt.n	8017636 <_dtoa_r+0xa8e>
 801762c:	9907      	ldr	r1, [sp, #28]
 801762e:	430b      	orrs	r3, r1
 8017630:	9906      	ldr	r1, [sp, #24]
 8017632:	430b      	orrs	r3, r1
 8017634:	d120      	bne.n	8017678 <_dtoa_r+0xad0>
 8017636:	2a00      	cmp	r2, #0
 8017638:	dded      	ble.n	8017616 <_dtoa_r+0xa6e>
 801763a:	4651      	mov	r1, sl
 801763c:	2201      	movs	r2, #1
 801763e:	4620      	mov	r0, r4
 8017640:	f000 feb4 	bl	80183ac <__lshift>
 8017644:	4631      	mov	r1, r6
 8017646:	4682      	mov	sl, r0
 8017648:	f000 ff1c 	bl	8018484 <__mcmp>
 801764c:	2800      	cmp	r0, #0
 801764e:	dc03      	bgt.n	8017658 <_dtoa_r+0xab0>
 8017650:	d1e1      	bne.n	8017616 <_dtoa_r+0xa6e>
 8017652:	f019 0f01 	tst.w	r9, #1
 8017656:	d0de      	beq.n	8017616 <_dtoa_r+0xa6e>
 8017658:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801765c:	d1d8      	bne.n	8017610 <_dtoa_r+0xa68>
 801765e:	9a01      	ldr	r2, [sp, #4]
 8017660:	2339      	movs	r3, #57	; 0x39
 8017662:	7013      	strb	r3, [r2, #0]
 8017664:	462b      	mov	r3, r5
 8017666:	461d      	mov	r5, r3
 8017668:	3b01      	subs	r3, #1
 801766a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801766e:	2a39      	cmp	r2, #57	; 0x39
 8017670:	d06c      	beq.n	801774c <_dtoa_r+0xba4>
 8017672:	3201      	adds	r2, #1
 8017674:	701a      	strb	r2, [r3, #0]
 8017676:	e747      	b.n	8017508 <_dtoa_r+0x960>
 8017678:	2a00      	cmp	r2, #0
 801767a:	dd07      	ble.n	801768c <_dtoa_r+0xae4>
 801767c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017680:	d0ed      	beq.n	801765e <_dtoa_r+0xab6>
 8017682:	9a01      	ldr	r2, [sp, #4]
 8017684:	f109 0301 	add.w	r3, r9, #1
 8017688:	7013      	strb	r3, [r2, #0]
 801768a:	e73d      	b.n	8017508 <_dtoa_r+0x960>
 801768c:	9b04      	ldr	r3, [sp, #16]
 801768e:	9a08      	ldr	r2, [sp, #32]
 8017690:	f803 9c01 	strb.w	r9, [r3, #-1]
 8017694:	4293      	cmp	r3, r2
 8017696:	d043      	beq.n	8017720 <_dtoa_r+0xb78>
 8017698:	4651      	mov	r1, sl
 801769a:	2300      	movs	r3, #0
 801769c:	220a      	movs	r2, #10
 801769e:	4620      	mov	r0, r4
 80176a0:	f000 fc8c 	bl	8017fbc <__multadd>
 80176a4:	45b8      	cmp	r8, r7
 80176a6:	4682      	mov	sl, r0
 80176a8:	f04f 0300 	mov.w	r3, #0
 80176ac:	f04f 020a 	mov.w	r2, #10
 80176b0:	4641      	mov	r1, r8
 80176b2:	4620      	mov	r0, r4
 80176b4:	d107      	bne.n	80176c6 <_dtoa_r+0xb1e>
 80176b6:	f000 fc81 	bl	8017fbc <__multadd>
 80176ba:	4680      	mov	r8, r0
 80176bc:	4607      	mov	r7, r0
 80176be:	9b04      	ldr	r3, [sp, #16]
 80176c0:	3301      	adds	r3, #1
 80176c2:	9304      	str	r3, [sp, #16]
 80176c4:	e775      	b.n	80175b2 <_dtoa_r+0xa0a>
 80176c6:	f000 fc79 	bl	8017fbc <__multadd>
 80176ca:	4639      	mov	r1, r7
 80176cc:	4680      	mov	r8, r0
 80176ce:	2300      	movs	r3, #0
 80176d0:	220a      	movs	r2, #10
 80176d2:	4620      	mov	r0, r4
 80176d4:	f000 fc72 	bl	8017fbc <__multadd>
 80176d8:	4607      	mov	r7, r0
 80176da:	e7f0      	b.n	80176be <_dtoa_r+0xb16>
 80176dc:	9b04      	ldr	r3, [sp, #16]
 80176de:	9301      	str	r3, [sp, #4]
 80176e0:	9d00      	ldr	r5, [sp, #0]
 80176e2:	4631      	mov	r1, r6
 80176e4:	4650      	mov	r0, sl
 80176e6:	f7ff f9d7 	bl	8016a98 <quorem>
 80176ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80176ee:	9b00      	ldr	r3, [sp, #0]
 80176f0:	f805 9b01 	strb.w	r9, [r5], #1
 80176f4:	1aea      	subs	r2, r5, r3
 80176f6:	9b01      	ldr	r3, [sp, #4]
 80176f8:	4293      	cmp	r3, r2
 80176fa:	dd07      	ble.n	801770c <_dtoa_r+0xb64>
 80176fc:	4651      	mov	r1, sl
 80176fe:	2300      	movs	r3, #0
 8017700:	220a      	movs	r2, #10
 8017702:	4620      	mov	r0, r4
 8017704:	f000 fc5a 	bl	8017fbc <__multadd>
 8017708:	4682      	mov	sl, r0
 801770a:	e7ea      	b.n	80176e2 <_dtoa_r+0xb3a>
 801770c:	9b01      	ldr	r3, [sp, #4]
 801770e:	2b00      	cmp	r3, #0
 8017710:	bfc8      	it	gt
 8017712:	461d      	movgt	r5, r3
 8017714:	9b00      	ldr	r3, [sp, #0]
 8017716:	bfd8      	it	le
 8017718:	2501      	movle	r5, #1
 801771a:	441d      	add	r5, r3
 801771c:	f04f 0800 	mov.w	r8, #0
 8017720:	4651      	mov	r1, sl
 8017722:	2201      	movs	r2, #1
 8017724:	4620      	mov	r0, r4
 8017726:	f000 fe41 	bl	80183ac <__lshift>
 801772a:	4631      	mov	r1, r6
 801772c:	4682      	mov	sl, r0
 801772e:	f000 fea9 	bl	8018484 <__mcmp>
 8017732:	2800      	cmp	r0, #0
 8017734:	dc96      	bgt.n	8017664 <_dtoa_r+0xabc>
 8017736:	d102      	bne.n	801773e <_dtoa_r+0xb96>
 8017738:	f019 0f01 	tst.w	r9, #1
 801773c:	d192      	bne.n	8017664 <_dtoa_r+0xabc>
 801773e:	462b      	mov	r3, r5
 8017740:	461d      	mov	r5, r3
 8017742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017746:	2a30      	cmp	r2, #48	; 0x30
 8017748:	d0fa      	beq.n	8017740 <_dtoa_r+0xb98>
 801774a:	e6dd      	b.n	8017508 <_dtoa_r+0x960>
 801774c:	9a00      	ldr	r2, [sp, #0]
 801774e:	429a      	cmp	r2, r3
 8017750:	d189      	bne.n	8017666 <_dtoa_r+0xabe>
 8017752:	f10b 0b01 	add.w	fp, fp, #1
 8017756:	2331      	movs	r3, #49	; 0x31
 8017758:	e796      	b.n	8017688 <_dtoa_r+0xae0>
 801775a:	4b0a      	ldr	r3, [pc, #40]	; (8017784 <_dtoa_r+0xbdc>)
 801775c:	f7ff ba99 	b.w	8016c92 <_dtoa_r+0xea>
 8017760:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017762:	2b00      	cmp	r3, #0
 8017764:	f47f aa6d 	bne.w	8016c42 <_dtoa_r+0x9a>
 8017768:	4b07      	ldr	r3, [pc, #28]	; (8017788 <_dtoa_r+0xbe0>)
 801776a:	f7ff ba92 	b.w	8016c92 <_dtoa_r+0xea>
 801776e:	9b01      	ldr	r3, [sp, #4]
 8017770:	2b00      	cmp	r3, #0
 8017772:	dcb5      	bgt.n	80176e0 <_dtoa_r+0xb38>
 8017774:	9b07      	ldr	r3, [sp, #28]
 8017776:	2b02      	cmp	r3, #2
 8017778:	f73f aeb1 	bgt.w	80174de <_dtoa_r+0x936>
 801777c:	e7b0      	b.n	80176e0 <_dtoa_r+0xb38>
 801777e:	bf00      	nop
 8017780:	0801cf94 	.word	0x0801cf94
 8017784:	0801ce51 	.word	0x0801ce51
 8017788:	0801cf2f 	.word	0x0801cf2f

0801778c <_free_r>:
 801778c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801778e:	2900      	cmp	r1, #0
 8017790:	d044      	beq.n	801781c <_free_r+0x90>
 8017792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017796:	9001      	str	r0, [sp, #4]
 8017798:	2b00      	cmp	r3, #0
 801779a:	f1a1 0404 	sub.w	r4, r1, #4
 801779e:	bfb8      	it	lt
 80177a0:	18e4      	addlt	r4, r4, r3
 80177a2:	f7fd f941 	bl	8014a28 <__malloc_lock>
 80177a6:	4a1e      	ldr	r2, [pc, #120]	; (8017820 <_free_r+0x94>)
 80177a8:	9801      	ldr	r0, [sp, #4]
 80177aa:	6813      	ldr	r3, [r2, #0]
 80177ac:	b933      	cbnz	r3, 80177bc <_free_r+0x30>
 80177ae:	6063      	str	r3, [r4, #4]
 80177b0:	6014      	str	r4, [r2, #0]
 80177b2:	b003      	add	sp, #12
 80177b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80177b8:	f7fd b93c 	b.w	8014a34 <__malloc_unlock>
 80177bc:	42a3      	cmp	r3, r4
 80177be:	d908      	bls.n	80177d2 <_free_r+0x46>
 80177c0:	6825      	ldr	r5, [r4, #0]
 80177c2:	1961      	adds	r1, r4, r5
 80177c4:	428b      	cmp	r3, r1
 80177c6:	bf01      	itttt	eq
 80177c8:	6819      	ldreq	r1, [r3, #0]
 80177ca:	685b      	ldreq	r3, [r3, #4]
 80177cc:	1949      	addeq	r1, r1, r5
 80177ce:	6021      	streq	r1, [r4, #0]
 80177d0:	e7ed      	b.n	80177ae <_free_r+0x22>
 80177d2:	461a      	mov	r2, r3
 80177d4:	685b      	ldr	r3, [r3, #4]
 80177d6:	b10b      	cbz	r3, 80177dc <_free_r+0x50>
 80177d8:	42a3      	cmp	r3, r4
 80177da:	d9fa      	bls.n	80177d2 <_free_r+0x46>
 80177dc:	6811      	ldr	r1, [r2, #0]
 80177de:	1855      	adds	r5, r2, r1
 80177e0:	42a5      	cmp	r5, r4
 80177e2:	d10b      	bne.n	80177fc <_free_r+0x70>
 80177e4:	6824      	ldr	r4, [r4, #0]
 80177e6:	4421      	add	r1, r4
 80177e8:	1854      	adds	r4, r2, r1
 80177ea:	42a3      	cmp	r3, r4
 80177ec:	6011      	str	r1, [r2, #0]
 80177ee:	d1e0      	bne.n	80177b2 <_free_r+0x26>
 80177f0:	681c      	ldr	r4, [r3, #0]
 80177f2:	685b      	ldr	r3, [r3, #4]
 80177f4:	6053      	str	r3, [r2, #4]
 80177f6:	440c      	add	r4, r1
 80177f8:	6014      	str	r4, [r2, #0]
 80177fa:	e7da      	b.n	80177b2 <_free_r+0x26>
 80177fc:	d902      	bls.n	8017804 <_free_r+0x78>
 80177fe:	230c      	movs	r3, #12
 8017800:	6003      	str	r3, [r0, #0]
 8017802:	e7d6      	b.n	80177b2 <_free_r+0x26>
 8017804:	6825      	ldr	r5, [r4, #0]
 8017806:	1961      	adds	r1, r4, r5
 8017808:	428b      	cmp	r3, r1
 801780a:	bf04      	itt	eq
 801780c:	6819      	ldreq	r1, [r3, #0]
 801780e:	685b      	ldreq	r3, [r3, #4]
 8017810:	6063      	str	r3, [r4, #4]
 8017812:	bf04      	itt	eq
 8017814:	1949      	addeq	r1, r1, r5
 8017816:	6021      	streq	r1, [r4, #0]
 8017818:	6054      	str	r4, [r2, #4]
 801781a:	e7ca      	b.n	80177b2 <_free_r+0x26>
 801781c:	b003      	add	sp, #12
 801781e:	bd30      	pop	{r4, r5, pc}
 8017820:	20002568 	.word	0x20002568

08017824 <rshift>:
 8017824:	6903      	ldr	r3, [r0, #16]
 8017826:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801782a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801782e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017832:	f100 0414 	add.w	r4, r0, #20
 8017836:	dd45      	ble.n	80178c4 <rshift+0xa0>
 8017838:	f011 011f 	ands.w	r1, r1, #31
 801783c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017840:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017844:	d10c      	bne.n	8017860 <rshift+0x3c>
 8017846:	f100 0710 	add.w	r7, r0, #16
 801784a:	4629      	mov	r1, r5
 801784c:	42b1      	cmp	r1, r6
 801784e:	d334      	bcc.n	80178ba <rshift+0x96>
 8017850:	1a9b      	subs	r3, r3, r2
 8017852:	009b      	lsls	r3, r3, #2
 8017854:	1eea      	subs	r2, r5, #3
 8017856:	4296      	cmp	r6, r2
 8017858:	bf38      	it	cc
 801785a:	2300      	movcc	r3, #0
 801785c:	4423      	add	r3, r4
 801785e:	e015      	b.n	801788c <rshift+0x68>
 8017860:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017864:	f1c1 0820 	rsb	r8, r1, #32
 8017868:	40cf      	lsrs	r7, r1
 801786a:	f105 0e04 	add.w	lr, r5, #4
 801786e:	46a1      	mov	r9, r4
 8017870:	4576      	cmp	r6, lr
 8017872:	46f4      	mov	ip, lr
 8017874:	d815      	bhi.n	80178a2 <rshift+0x7e>
 8017876:	1a9a      	subs	r2, r3, r2
 8017878:	0092      	lsls	r2, r2, #2
 801787a:	3a04      	subs	r2, #4
 801787c:	3501      	adds	r5, #1
 801787e:	42ae      	cmp	r6, r5
 8017880:	bf38      	it	cc
 8017882:	2200      	movcc	r2, #0
 8017884:	18a3      	adds	r3, r4, r2
 8017886:	50a7      	str	r7, [r4, r2]
 8017888:	b107      	cbz	r7, 801788c <rshift+0x68>
 801788a:	3304      	adds	r3, #4
 801788c:	1b1a      	subs	r2, r3, r4
 801788e:	42a3      	cmp	r3, r4
 8017890:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017894:	bf08      	it	eq
 8017896:	2300      	moveq	r3, #0
 8017898:	6102      	str	r2, [r0, #16]
 801789a:	bf08      	it	eq
 801789c:	6143      	streq	r3, [r0, #20]
 801789e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178a2:	f8dc c000 	ldr.w	ip, [ip]
 80178a6:	fa0c fc08 	lsl.w	ip, ip, r8
 80178aa:	ea4c 0707 	orr.w	r7, ip, r7
 80178ae:	f849 7b04 	str.w	r7, [r9], #4
 80178b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80178b6:	40cf      	lsrs	r7, r1
 80178b8:	e7da      	b.n	8017870 <rshift+0x4c>
 80178ba:	f851 cb04 	ldr.w	ip, [r1], #4
 80178be:	f847 cf04 	str.w	ip, [r7, #4]!
 80178c2:	e7c3      	b.n	801784c <rshift+0x28>
 80178c4:	4623      	mov	r3, r4
 80178c6:	e7e1      	b.n	801788c <rshift+0x68>

080178c8 <__hexdig_fun>:
 80178c8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80178cc:	2b09      	cmp	r3, #9
 80178ce:	d802      	bhi.n	80178d6 <__hexdig_fun+0xe>
 80178d0:	3820      	subs	r0, #32
 80178d2:	b2c0      	uxtb	r0, r0
 80178d4:	4770      	bx	lr
 80178d6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80178da:	2b05      	cmp	r3, #5
 80178dc:	d801      	bhi.n	80178e2 <__hexdig_fun+0x1a>
 80178de:	3847      	subs	r0, #71	; 0x47
 80178e0:	e7f7      	b.n	80178d2 <__hexdig_fun+0xa>
 80178e2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80178e6:	2b05      	cmp	r3, #5
 80178e8:	d801      	bhi.n	80178ee <__hexdig_fun+0x26>
 80178ea:	3827      	subs	r0, #39	; 0x27
 80178ec:	e7f1      	b.n	80178d2 <__hexdig_fun+0xa>
 80178ee:	2000      	movs	r0, #0
 80178f0:	4770      	bx	lr
	...

080178f4 <__gethex>:
 80178f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178f8:	4617      	mov	r7, r2
 80178fa:	680a      	ldr	r2, [r1, #0]
 80178fc:	b085      	sub	sp, #20
 80178fe:	f102 0b02 	add.w	fp, r2, #2
 8017902:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017906:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801790a:	4681      	mov	r9, r0
 801790c:	468a      	mov	sl, r1
 801790e:	9302      	str	r3, [sp, #8]
 8017910:	32fe      	adds	r2, #254	; 0xfe
 8017912:	eb02 030b 	add.w	r3, r2, fp
 8017916:	46d8      	mov	r8, fp
 8017918:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801791c:	9301      	str	r3, [sp, #4]
 801791e:	2830      	cmp	r0, #48	; 0x30
 8017920:	d0f7      	beq.n	8017912 <__gethex+0x1e>
 8017922:	f7ff ffd1 	bl	80178c8 <__hexdig_fun>
 8017926:	4604      	mov	r4, r0
 8017928:	2800      	cmp	r0, #0
 801792a:	d138      	bne.n	801799e <__gethex+0xaa>
 801792c:	49a7      	ldr	r1, [pc, #668]	; (8017bcc <__gethex+0x2d8>)
 801792e:	2201      	movs	r2, #1
 8017930:	4640      	mov	r0, r8
 8017932:	f7fe ff62 	bl	80167fa <strncmp>
 8017936:	4606      	mov	r6, r0
 8017938:	2800      	cmp	r0, #0
 801793a:	d169      	bne.n	8017a10 <__gethex+0x11c>
 801793c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8017940:	465d      	mov	r5, fp
 8017942:	f7ff ffc1 	bl	80178c8 <__hexdig_fun>
 8017946:	2800      	cmp	r0, #0
 8017948:	d064      	beq.n	8017a14 <__gethex+0x120>
 801794a:	465a      	mov	r2, fp
 801794c:	7810      	ldrb	r0, [r2, #0]
 801794e:	2830      	cmp	r0, #48	; 0x30
 8017950:	4690      	mov	r8, r2
 8017952:	f102 0201 	add.w	r2, r2, #1
 8017956:	d0f9      	beq.n	801794c <__gethex+0x58>
 8017958:	f7ff ffb6 	bl	80178c8 <__hexdig_fun>
 801795c:	2301      	movs	r3, #1
 801795e:	fab0 f480 	clz	r4, r0
 8017962:	0964      	lsrs	r4, r4, #5
 8017964:	465e      	mov	r6, fp
 8017966:	9301      	str	r3, [sp, #4]
 8017968:	4642      	mov	r2, r8
 801796a:	4615      	mov	r5, r2
 801796c:	3201      	adds	r2, #1
 801796e:	7828      	ldrb	r0, [r5, #0]
 8017970:	f7ff ffaa 	bl	80178c8 <__hexdig_fun>
 8017974:	2800      	cmp	r0, #0
 8017976:	d1f8      	bne.n	801796a <__gethex+0x76>
 8017978:	4994      	ldr	r1, [pc, #592]	; (8017bcc <__gethex+0x2d8>)
 801797a:	2201      	movs	r2, #1
 801797c:	4628      	mov	r0, r5
 801797e:	f7fe ff3c 	bl	80167fa <strncmp>
 8017982:	b978      	cbnz	r0, 80179a4 <__gethex+0xb0>
 8017984:	b946      	cbnz	r6, 8017998 <__gethex+0xa4>
 8017986:	1c6e      	adds	r6, r5, #1
 8017988:	4632      	mov	r2, r6
 801798a:	4615      	mov	r5, r2
 801798c:	3201      	adds	r2, #1
 801798e:	7828      	ldrb	r0, [r5, #0]
 8017990:	f7ff ff9a 	bl	80178c8 <__hexdig_fun>
 8017994:	2800      	cmp	r0, #0
 8017996:	d1f8      	bne.n	801798a <__gethex+0x96>
 8017998:	1b73      	subs	r3, r6, r5
 801799a:	009e      	lsls	r6, r3, #2
 801799c:	e004      	b.n	80179a8 <__gethex+0xb4>
 801799e:	2400      	movs	r4, #0
 80179a0:	4626      	mov	r6, r4
 80179a2:	e7e1      	b.n	8017968 <__gethex+0x74>
 80179a4:	2e00      	cmp	r6, #0
 80179a6:	d1f7      	bne.n	8017998 <__gethex+0xa4>
 80179a8:	782b      	ldrb	r3, [r5, #0]
 80179aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80179ae:	2b50      	cmp	r3, #80	; 0x50
 80179b0:	d13d      	bne.n	8017a2e <__gethex+0x13a>
 80179b2:	786b      	ldrb	r3, [r5, #1]
 80179b4:	2b2b      	cmp	r3, #43	; 0x2b
 80179b6:	d02f      	beq.n	8017a18 <__gethex+0x124>
 80179b8:	2b2d      	cmp	r3, #45	; 0x2d
 80179ba:	d031      	beq.n	8017a20 <__gethex+0x12c>
 80179bc:	1c69      	adds	r1, r5, #1
 80179be:	f04f 0b00 	mov.w	fp, #0
 80179c2:	7808      	ldrb	r0, [r1, #0]
 80179c4:	f7ff ff80 	bl	80178c8 <__hexdig_fun>
 80179c8:	1e42      	subs	r2, r0, #1
 80179ca:	b2d2      	uxtb	r2, r2
 80179cc:	2a18      	cmp	r2, #24
 80179ce:	d82e      	bhi.n	8017a2e <__gethex+0x13a>
 80179d0:	f1a0 0210 	sub.w	r2, r0, #16
 80179d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80179d8:	f7ff ff76 	bl	80178c8 <__hexdig_fun>
 80179dc:	f100 3cff 	add.w	ip, r0, #4294967295
 80179e0:	fa5f fc8c 	uxtb.w	ip, ip
 80179e4:	f1bc 0f18 	cmp.w	ip, #24
 80179e8:	d91d      	bls.n	8017a26 <__gethex+0x132>
 80179ea:	f1bb 0f00 	cmp.w	fp, #0
 80179ee:	d000      	beq.n	80179f2 <__gethex+0xfe>
 80179f0:	4252      	negs	r2, r2
 80179f2:	4416      	add	r6, r2
 80179f4:	f8ca 1000 	str.w	r1, [sl]
 80179f8:	b1dc      	cbz	r4, 8017a32 <__gethex+0x13e>
 80179fa:	9b01      	ldr	r3, [sp, #4]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	bf14      	ite	ne
 8017a00:	f04f 0800 	movne.w	r8, #0
 8017a04:	f04f 0806 	moveq.w	r8, #6
 8017a08:	4640      	mov	r0, r8
 8017a0a:	b005      	add	sp, #20
 8017a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a10:	4645      	mov	r5, r8
 8017a12:	4626      	mov	r6, r4
 8017a14:	2401      	movs	r4, #1
 8017a16:	e7c7      	b.n	80179a8 <__gethex+0xb4>
 8017a18:	f04f 0b00 	mov.w	fp, #0
 8017a1c:	1ca9      	adds	r1, r5, #2
 8017a1e:	e7d0      	b.n	80179c2 <__gethex+0xce>
 8017a20:	f04f 0b01 	mov.w	fp, #1
 8017a24:	e7fa      	b.n	8017a1c <__gethex+0x128>
 8017a26:	230a      	movs	r3, #10
 8017a28:	fb03 0002 	mla	r0, r3, r2, r0
 8017a2c:	e7d0      	b.n	80179d0 <__gethex+0xdc>
 8017a2e:	4629      	mov	r1, r5
 8017a30:	e7e0      	b.n	80179f4 <__gethex+0x100>
 8017a32:	eba5 0308 	sub.w	r3, r5, r8
 8017a36:	3b01      	subs	r3, #1
 8017a38:	4621      	mov	r1, r4
 8017a3a:	2b07      	cmp	r3, #7
 8017a3c:	dc0a      	bgt.n	8017a54 <__gethex+0x160>
 8017a3e:	4648      	mov	r0, r9
 8017a40:	f000 fa5a 	bl	8017ef8 <_Balloc>
 8017a44:	4604      	mov	r4, r0
 8017a46:	b940      	cbnz	r0, 8017a5a <__gethex+0x166>
 8017a48:	4b61      	ldr	r3, [pc, #388]	; (8017bd0 <__gethex+0x2dc>)
 8017a4a:	4602      	mov	r2, r0
 8017a4c:	21e4      	movs	r1, #228	; 0xe4
 8017a4e:	4861      	ldr	r0, [pc, #388]	; (8017bd4 <__gethex+0x2e0>)
 8017a50:	f7ff f804 	bl	8016a5c <__assert_func>
 8017a54:	3101      	adds	r1, #1
 8017a56:	105b      	asrs	r3, r3, #1
 8017a58:	e7ef      	b.n	8017a3a <__gethex+0x146>
 8017a5a:	f100 0a14 	add.w	sl, r0, #20
 8017a5e:	2300      	movs	r3, #0
 8017a60:	495a      	ldr	r1, [pc, #360]	; (8017bcc <__gethex+0x2d8>)
 8017a62:	f8cd a004 	str.w	sl, [sp, #4]
 8017a66:	469b      	mov	fp, r3
 8017a68:	45a8      	cmp	r8, r5
 8017a6a:	d342      	bcc.n	8017af2 <__gethex+0x1fe>
 8017a6c:	9801      	ldr	r0, [sp, #4]
 8017a6e:	f840 bb04 	str.w	fp, [r0], #4
 8017a72:	eba0 000a 	sub.w	r0, r0, sl
 8017a76:	1080      	asrs	r0, r0, #2
 8017a78:	6120      	str	r0, [r4, #16]
 8017a7a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8017a7e:	4658      	mov	r0, fp
 8017a80:	f000 fb2c 	bl	80180dc <__hi0bits>
 8017a84:	683d      	ldr	r5, [r7, #0]
 8017a86:	eba8 0000 	sub.w	r0, r8, r0
 8017a8a:	42a8      	cmp	r0, r5
 8017a8c:	dd59      	ble.n	8017b42 <__gethex+0x24e>
 8017a8e:	eba0 0805 	sub.w	r8, r0, r5
 8017a92:	4641      	mov	r1, r8
 8017a94:	4620      	mov	r0, r4
 8017a96:	f000 febb 	bl	8018810 <__any_on>
 8017a9a:	4683      	mov	fp, r0
 8017a9c:	b1b8      	cbz	r0, 8017ace <__gethex+0x1da>
 8017a9e:	f108 33ff 	add.w	r3, r8, #4294967295
 8017aa2:	1159      	asrs	r1, r3, #5
 8017aa4:	f003 021f 	and.w	r2, r3, #31
 8017aa8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017aac:	f04f 0b01 	mov.w	fp, #1
 8017ab0:	fa0b f202 	lsl.w	r2, fp, r2
 8017ab4:	420a      	tst	r2, r1
 8017ab6:	d00a      	beq.n	8017ace <__gethex+0x1da>
 8017ab8:	455b      	cmp	r3, fp
 8017aba:	dd06      	ble.n	8017aca <__gethex+0x1d6>
 8017abc:	f1a8 0102 	sub.w	r1, r8, #2
 8017ac0:	4620      	mov	r0, r4
 8017ac2:	f000 fea5 	bl	8018810 <__any_on>
 8017ac6:	2800      	cmp	r0, #0
 8017ac8:	d138      	bne.n	8017b3c <__gethex+0x248>
 8017aca:	f04f 0b02 	mov.w	fp, #2
 8017ace:	4641      	mov	r1, r8
 8017ad0:	4620      	mov	r0, r4
 8017ad2:	f7ff fea7 	bl	8017824 <rshift>
 8017ad6:	4446      	add	r6, r8
 8017ad8:	68bb      	ldr	r3, [r7, #8]
 8017ada:	42b3      	cmp	r3, r6
 8017adc:	da41      	bge.n	8017b62 <__gethex+0x26e>
 8017ade:	4621      	mov	r1, r4
 8017ae0:	4648      	mov	r0, r9
 8017ae2:	f000 fa49 	bl	8017f78 <_Bfree>
 8017ae6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017ae8:	2300      	movs	r3, #0
 8017aea:	6013      	str	r3, [r2, #0]
 8017aec:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8017af0:	e78a      	b.n	8017a08 <__gethex+0x114>
 8017af2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8017af6:	2a2e      	cmp	r2, #46	; 0x2e
 8017af8:	d014      	beq.n	8017b24 <__gethex+0x230>
 8017afa:	2b20      	cmp	r3, #32
 8017afc:	d106      	bne.n	8017b0c <__gethex+0x218>
 8017afe:	9b01      	ldr	r3, [sp, #4]
 8017b00:	f843 bb04 	str.w	fp, [r3], #4
 8017b04:	f04f 0b00 	mov.w	fp, #0
 8017b08:	9301      	str	r3, [sp, #4]
 8017b0a:	465b      	mov	r3, fp
 8017b0c:	7828      	ldrb	r0, [r5, #0]
 8017b0e:	9303      	str	r3, [sp, #12]
 8017b10:	f7ff feda 	bl	80178c8 <__hexdig_fun>
 8017b14:	9b03      	ldr	r3, [sp, #12]
 8017b16:	f000 000f 	and.w	r0, r0, #15
 8017b1a:	4098      	lsls	r0, r3
 8017b1c:	ea4b 0b00 	orr.w	fp, fp, r0
 8017b20:	3304      	adds	r3, #4
 8017b22:	e7a1      	b.n	8017a68 <__gethex+0x174>
 8017b24:	45a8      	cmp	r8, r5
 8017b26:	d8e8      	bhi.n	8017afa <__gethex+0x206>
 8017b28:	2201      	movs	r2, #1
 8017b2a:	4628      	mov	r0, r5
 8017b2c:	9303      	str	r3, [sp, #12]
 8017b2e:	f7fe fe64 	bl	80167fa <strncmp>
 8017b32:	4926      	ldr	r1, [pc, #152]	; (8017bcc <__gethex+0x2d8>)
 8017b34:	9b03      	ldr	r3, [sp, #12]
 8017b36:	2800      	cmp	r0, #0
 8017b38:	d1df      	bne.n	8017afa <__gethex+0x206>
 8017b3a:	e795      	b.n	8017a68 <__gethex+0x174>
 8017b3c:	f04f 0b03 	mov.w	fp, #3
 8017b40:	e7c5      	b.n	8017ace <__gethex+0x1da>
 8017b42:	da0b      	bge.n	8017b5c <__gethex+0x268>
 8017b44:	eba5 0800 	sub.w	r8, r5, r0
 8017b48:	4621      	mov	r1, r4
 8017b4a:	4642      	mov	r2, r8
 8017b4c:	4648      	mov	r0, r9
 8017b4e:	f000 fc2d 	bl	80183ac <__lshift>
 8017b52:	eba6 0608 	sub.w	r6, r6, r8
 8017b56:	4604      	mov	r4, r0
 8017b58:	f100 0a14 	add.w	sl, r0, #20
 8017b5c:	f04f 0b00 	mov.w	fp, #0
 8017b60:	e7ba      	b.n	8017ad8 <__gethex+0x1e4>
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	42b3      	cmp	r3, r6
 8017b66:	dd73      	ble.n	8017c50 <__gethex+0x35c>
 8017b68:	1b9e      	subs	r6, r3, r6
 8017b6a:	42b5      	cmp	r5, r6
 8017b6c:	dc34      	bgt.n	8017bd8 <__gethex+0x2e4>
 8017b6e:	68fb      	ldr	r3, [r7, #12]
 8017b70:	2b02      	cmp	r3, #2
 8017b72:	d023      	beq.n	8017bbc <__gethex+0x2c8>
 8017b74:	2b03      	cmp	r3, #3
 8017b76:	d025      	beq.n	8017bc4 <__gethex+0x2d0>
 8017b78:	2b01      	cmp	r3, #1
 8017b7a:	d115      	bne.n	8017ba8 <__gethex+0x2b4>
 8017b7c:	42b5      	cmp	r5, r6
 8017b7e:	d113      	bne.n	8017ba8 <__gethex+0x2b4>
 8017b80:	2d01      	cmp	r5, #1
 8017b82:	d10b      	bne.n	8017b9c <__gethex+0x2a8>
 8017b84:	9a02      	ldr	r2, [sp, #8]
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	6013      	str	r3, [r2, #0]
 8017b8a:	2301      	movs	r3, #1
 8017b8c:	6123      	str	r3, [r4, #16]
 8017b8e:	f8ca 3000 	str.w	r3, [sl]
 8017b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b94:	f04f 0862 	mov.w	r8, #98	; 0x62
 8017b98:	601c      	str	r4, [r3, #0]
 8017b9a:	e735      	b.n	8017a08 <__gethex+0x114>
 8017b9c:	1e69      	subs	r1, r5, #1
 8017b9e:	4620      	mov	r0, r4
 8017ba0:	f000 fe36 	bl	8018810 <__any_on>
 8017ba4:	2800      	cmp	r0, #0
 8017ba6:	d1ed      	bne.n	8017b84 <__gethex+0x290>
 8017ba8:	4621      	mov	r1, r4
 8017baa:	4648      	mov	r0, r9
 8017bac:	f000 f9e4 	bl	8017f78 <_Bfree>
 8017bb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	6013      	str	r3, [r2, #0]
 8017bb6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8017bba:	e725      	b.n	8017a08 <__gethex+0x114>
 8017bbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d1f2      	bne.n	8017ba8 <__gethex+0x2b4>
 8017bc2:	e7df      	b.n	8017b84 <__gethex+0x290>
 8017bc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d1dc      	bne.n	8017b84 <__gethex+0x290>
 8017bca:	e7ed      	b.n	8017ba8 <__gethex+0x2b4>
 8017bcc:	0801cce8 	.word	0x0801cce8
 8017bd0:	0801cf94 	.word	0x0801cf94
 8017bd4:	0801cfa5 	.word	0x0801cfa5
 8017bd8:	f106 38ff 	add.w	r8, r6, #4294967295
 8017bdc:	f1bb 0f00 	cmp.w	fp, #0
 8017be0:	d133      	bne.n	8017c4a <__gethex+0x356>
 8017be2:	f1b8 0f00 	cmp.w	r8, #0
 8017be6:	d004      	beq.n	8017bf2 <__gethex+0x2fe>
 8017be8:	4641      	mov	r1, r8
 8017bea:	4620      	mov	r0, r4
 8017bec:	f000 fe10 	bl	8018810 <__any_on>
 8017bf0:	4683      	mov	fp, r0
 8017bf2:	ea4f 1268 	mov.w	r2, r8, asr #5
 8017bf6:	2301      	movs	r3, #1
 8017bf8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017bfc:	f008 081f 	and.w	r8, r8, #31
 8017c00:	fa03 f308 	lsl.w	r3, r3, r8
 8017c04:	4213      	tst	r3, r2
 8017c06:	4631      	mov	r1, r6
 8017c08:	4620      	mov	r0, r4
 8017c0a:	bf18      	it	ne
 8017c0c:	f04b 0b02 	orrne.w	fp, fp, #2
 8017c10:	1bad      	subs	r5, r5, r6
 8017c12:	f7ff fe07 	bl	8017824 <rshift>
 8017c16:	687e      	ldr	r6, [r7, #4]
 8017c18:	f04f 0802 	mov.w	r8, #2
 8017c1c:	f1bb 0f00 	cmp.w	fp, #0
 8017c20:	d04a      	beq.n	8017cb8 <__gethex+0x3c4>
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	2b02      	cmp	r3, #2
 8017c26:	d016      	beq.n	8017c56 <__gethex+0x362>
 8017c28:	2b03      	cmp	r3, #3
 8017c2a:	d018      	beq.n	8017c5e <__gethex+0x36a>
 8017c2c:	2b01      	cmp	r3, #1
 8017c2e:	d109      	bne.n	8017c44 <__gethex+0x350>
 8017c30:	f01b 0f02 	tst.w	fp, #2
 8017c34:	d006      	beq.n	8017c44 <__gethex+0x350>
 8017c36:	f8da 3000 	ldr.w	r3, [sl]
 8017c3a:	ea4b 0b03 	orr.w	fp, fp, r3
 8017c3e:	f01b 0f01 	tst.w	fp, #1
 8017c42:	d10f      	bne.n	8017c64 <__gethex+0x370>
 8017c44:	f048 0810 	orr.w	r8, r8, #16
 8017c48:	e036      	b.n	8017cb8 <__gethex+0x3c4>
 8017c4a:	f04f 0b01 	mov.w	fp, #1
 8017c4e:	e7d0      	b.n	8017bf2 <__gethex+0x2fe>
 8017c50:	f04f 0801 	mov.w	r8, #1
 8017c54:	e7e2      	b.n	8017c1c <__gethex+0x328>
 8017c56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c58:	f1c3 0301 	rsb	r3, r3, #1
 8017c5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8017c5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d0ef      	beq.n	8017c44 <__gethex+0x350>
 8017c64:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017c68:	f104 0214 	add.w	r2, r4, #20
 8017c6c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8017c70:	9301      	str	r3, [sp, #4]
 8017c72:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8017c76:	2300      	movs	r3, #0
 8017c78:	4694      	mov	ip, r2
 8017c7a:	f852 1b04 	ldr.w	r1, [r2], #4
 8017c7e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8017c82:	d01e      	beq.n	8017cc2 <__gethex+0x3ce>
 8017c84:	3101      	adds	r1, #1
 8017c86:	f8cc 1000 	str.w	r1, [ip]
 8017c8a:	f1b8 0f02 	cmp.w	r8, #2
 8017c8e:	f104 0214 	add.w	r2, r4, #20
 8017c92:	d13d      	bne.n	8017d10 <__gethex+0x41c>
 8017c94:	683b      	ldr	r3, [r7, #0]
 8017c96:	3b01      	subs	r3, #1
 8017c98:	42ab      	cmp	r3, r5
 8017c9a:	d10b      	bne.n	8017cb4 <__gethex+0x3c0>
 8017c9c:	1169      	asrs	r1, r5, #5
 8017c9e:	2301      	movs	r3, #1
 8017ca0:	f005 051f 	and.w	r5, r5, #31
 8017ca4:	fa03 f505 	lsl.w	r5, r3, r5
 8017ca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017cac:	421d      	tst	r5, r3
 8017cae:	bf18      	it	ne
 8017cb0:	f04f 0801 	movne.w	r8, #1
 8017cb4:	f048 0820 	orr.w	r8, r8, #32
 8017cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017cba:	601c      	str	r4, [r3, #0]
 8017cbc:	9b02      	ldr	r3, [sp, #8]
 8017cbe:	601e      	str	r6, [r3, #0]
 8017cc0:	e6a2      	b.n	8017a08 <__gethex+0x114>
 8017cc2:	4290      	cmp	r0, r2
 8017cc4:	f842 3c04 	str.w	r3, [r2, #-4]
 8017cc8:	d8d6      	bhi.n	8017c78 <__gethex+0x384>
 8017cca:	68a2      	ldr	r2, [r4, #8]
 8017ccc:	4593      	cmp	fp, r2
 8017cce:	db17      	blt.n	8017d00 <__gethex+0x40c>
 8017cd0:	6861      	ldr	r1, [r4, #4]
 8017cd2:	4648      	mov	r0, r9
 8017cd4:	3101      	adds	r1, #1
 8017cd6:	f000 f90f 	bl	8017ef8 <_Balloc>
 8017cda:	4682      	mov	sl, r0
 8017cdc:	b918      	cbnz	r0, 8017ce6 <__gethex+0x3f2>
 8017cde:	4b1b      	ldr	r3, [pc, #108]	; (8017d4c <__gethex+0x458>)
 8017ce0:	4602      	mov	r2, r0
 8017ce2:	2184      	movs	r1, #132	; 0x84
 8017ce4:	e6b3      	b.n	8017a4e <__gethex+0x15a>
 8017ce6:	6922      	ldr	r2, [r4, #16]
 8017ce8:	3202      	adds	r2, #2
 8017cea:	f104 010c 	add.w	r1, r4, #12
 8017cee:	0092      	lsls	r2, r2, #2
 8017cf0:	300c      	adds	r0, #12
 8017cf2:	f7fe fe96 	bl	8016a22 <memcpy>
 8017cf6:	4621      	mov	r1, r4
 8017cf8:	4648      	mov	r0, r9
 8017cfa:	f000 f93d 	bl	8017f78 <_Bfree>
 8017cfe:	4654      	mov	r4, sl
 8017d00:	6922      	ldr	r2, [r4, #16]
 8017d02:	1c51      	adds	r1, r2, #1
 8017d04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017d08:	6121      	str	r1, [r4, #16]
 8017d0a:	2101      	movs	r1, #1
 8017d0c:	6151      	str	r1, [r2, #20]
 8017d0e:	e7bc      	b.n	8017c8a <__gethex+0x396>
 8017d10:	6921      	ldr	r1, [r4, #16]
 8017d12:	4559      	cmp	r1, fp
 8017d14:	dd0b      	ble.n	8017d2e <__gethex+0x43a>
 8017d16:	2101      	movs	r1, #1
 8017d18:	4620      	mov	r0, r4
 8017d1a:	f7ff fd83 	bl	8017824 <rshift>
 8017d1e:	68bb      	ldr	r3, [r7, #8]
 8017d20:	3601      	adds	r6, #1
 8017d22:	42b3      	cmp	r3, r6
 8017d24:	f6ff aedb 	blt.w	8017ade <__gethex+0x1ea>
 8017d28:	f04f 0801 	mov.w	r8, #1
 8017d2c:	e7c2      	b.n	8017cb4 <__gethex+0x3c0>
 8017d2e:	f015 051f 	ands.w	r5, r5, #31
 8017d32:	d0f9      	beq.n	8017d28 <__gethex+0x434>
 8017d34:	9b01      	ldr	r3, [sp, #4]
 8017d36:	441a      	add	r2, r3
 8017d38:	f1c5 0520 	rsb	r5, r5, #32
 8017d3c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8017d40:	f000 f9cc 	bl	80180dc <__hi0bits>
 8017d44:	42a8      	cmp	r0, r5
 8017d46:	dbe6      	blt.n	8017d16 <__gethex+0x422>
 8017d48:	e7ee      	b.n	8017d28 <__gethex+0x434>
 8017d4a:	bf00      	nop
 8017d4c:	0801cf94 	.word	0x0801cf94

08017d50 <L_shift>:
 8017d50:	f1c2 0208 	rsb	r2, r2, #8
 8017d54:	0092      	lsls	r2, r2, #2
 8017d56:	b570      	push	{r4, r5, r6, lr}
 8017d58:	f1c2 0620 	rsb	r6, r2, #32
 8017d5c:	6843      	ldr	r3, [r0, #4]
 8017d5e:	6804      	ldr	r4, [r0, #0]
 8017d60:	fa03 f506 	lsl.w	r5, r3, r6
 8017d64:	432c      	orrs	r4, r5
 8017d66:	40d3      	lsrs	r3, r2
 8017d68:	6004      	str	r4, [r0, #0]
 8017d6a:	f840 3f04 	str.w	r3, [r0, #4]!
 8017d6e:	4288      	cmp	r0, r1
 8017d70:	d3f4      	bcc.n	8017d5c <L_shift+0xc>
 8017d72:	bd70      	pop	{r4, r5, r6, pc}

08017d74 <__match>:
 8017d74:	b530      	push	{r4, r5, lr}
 8017d76:	6803      	ldr	r3, [r0, #0]
 8017d78:	3301      	adds	r3, #1
 8017d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d7e:	b914      	cbnz	r4, 8017d86 <__match+0x12>
 8017d80:	6003      	str	r3, [r0, #0]
 8017d82:	2001      	movs	r0, #1
 8017d84:	bd30      	pop	{r4, r5, pc}
 8017d86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d8a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017d8e:	2d19      	cmp	r5, #25
 8017d90:	bf98      	it	ls
 8017d92:	3220      	addls	r2, #32
 8017d94:	42a2      	cmp	r2, r4
 8017d96:	d0f0      	beq.n	8017d7a <__match+0x6>
 8017d98:	2000      	movs	r0, #0
 8017d9a:	e7f3      	b.n	8017d84 <__match+0x10>

08017d9c <__hexnan>:
 8017d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017da0:	680b      	ldr	r3, [r1, #0]
 8017da2:	6801      	ldr	r1, [r0, #0]
 8017da4:	115e      	asrs	r6, r3, #5
 8017da6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017daa:	f013 031f 	ands.w	r3, r3, #31
 8017dae:	b087      	sub	sp, #28
 8017db0:	bf18      	it	ne
 8017db2:	3604      	addne	r6, #4
 8017db4:	2500      	movs	r5, #0
 8017db6:	1f37      	subs	r7, r6, #4
 8017db8:	4682      	mov	sl, r0
 8017dba:	4690      	mov	r8, r2
 8017dbc:	9301      	str	r3, [sp, #4]
 8017dbe:	f846 5c04 	str.w	r5, [r6, #-4]
 8017dc2:	46b9      	mov	r9, r7
 8017dc4:	463c      	mov	r4, r7
 8017dc6:	9502      	str	r5, [sp, #8]
 8017dc8:	46ab      	mov	fp, r5
 8017dca:	784a      	ldrb	r2, [r1, #1]
 8017dcc:	1c4b      	adds	r3, r1, #1
 8017dce:	9303      	str	r3, [sp, #12]
 8017dd0:	b342      	cbz	r2, 8017e24 <__hexnan+0x88>
 8017dd2:	4610      	mov	r0, r2
 8017dd4:	9105      	str	r1, [sp, #20]
 8017dd6:	9204      	str	r2, [sp, #16]
 8017dd8:	f7ff fd76 	bl	80178c8 <__hexdig_fun>
 8017ddc:	2800      	cmp	r0, #0
 8017dde:	d14f      	bne.n	8017e80 <__hexnan+0xe4>
 8017de0:	9a04      	ldr	r2, [sp, #16]
 8017de2:	9905      	ldr	r1, [sp, #20]
 8017de4:	2a20      	cmp	r2, #32
 8017de6:	d818      	bhi.n	8017e1a <__hexnan+0x7e>
 8017de8:	9b02      	ldr	r3, [sp, #8]
 8017dea:	459b      	cmp	fp, r3
 8017dec:	dd13      	ble.n	8017e16 <__hexnan+0x7a>
 8017dee:	454c      	cmp	r4, r9
 8017df0:	d206      	bcs.n	8017e00 <__hexnan+0x64>
 8017df2:	2d07      	cmp	r5, #7
 8017df4:	dc04      	bgt.n	8017e00 <__hexnan+0x64>
 8017df6:	462a      	mov	r2, r5
 8017df8:	4649      	mov	r1, r9
 8017dfa:	4620      	mov	r0, r4
 8017dfc:	f7ff ffa8 	bl	8017d50 <L_shift>
 8017e00:	4544      	cmp	r4, r8
 8017e02:	d950      	bls.n	8017ea6 <__hexnan+0x10a>
 8017e04:	2300      	movs	r3, #0
 8017e06:	f1a4 0904 	sub.w	r9, r4, #4
 8017e0a:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e0e:	f8cd b008 	str.w	fp, [sp, #8]
 8017e12:	464c      	mov	r4, r9
 8017e14:	461d      	mov	r5, r3
 8017e16:	9903      	ldr	r1, [sp, #12]
 8017e18:	e7d7      	b.n	8017dca <__hexnan+0x2e>
 8017e1a:	2a29      	cmp	r2, #41	; 0x29
 8017e1c:	d155      	bne.n	8017eca <__hexnan+0x12e>
 8017e1e:	3102      	adds	r1, #2
 8017e20:	f8ca 1000 	str.w	r1, [sl]
 8017e24:	f1bb 0f00 	cmp.w	fp, #0
 8017e28:	d04f      	beq.n	8017eca <__hexnan+0x12e>
 8017e2a:	454c      	cmp	r4, r9
 8017e2c:	d206      	bcs.n	8017e3c <__hexnan+0xa0>
 8017e2e:	2d07      	cmp	r5, #7
 8017e30:	dc04      	bgt.n	8017e3c <__hexnan+0xa0>
 8017e32:	462a      	mov	r2, r5
 8017e34:	4649      	mov	r1, r9
 8017e36:	4620      	mov	r0, r4
 8017e38:	f7ff ff8a 	bl	8017d50 <L_shift>
 8017e3c:	4544      	cmp	r4, r8
 8017e3e:	d934      	bls.n	8017eaa <__hexnan+0x10e>
 8017e40:	f1a8 0204 	sub.w	r2, r8, #4
 8017e44:	4623      	mov	r3, r4
 8017e46:	f853 1b04 	ldr.w	r1, [r3], #4
 8017e4a:	f842 1f04 	str.w	r1, [r2, #4]!
 8017e4e:	429f      	cmp	r7, r3
 8017e50:	d2f9      	bcs.n	8017e46 <__hexnan+0xaa>
 8017e52:	1b3b      	subs	r3, r7, r4
 8017e54:	f023 0303 	bic.w	r3, r3, #3
 8017e58:	3304      	adds	r3, #4
 8017e5a:	3e03      	subs	r6, #3
 8017e5c:	3401      	adds	r4, #1
 8017e5e:	42a6      	cmp	r6, r4
 8017e60:	bf38      	it	cc
 8017e62:	2304      	movcc	r3, #4
 8017e64:	4443      	add	r3, r8
 8017e66:	2200      	movs	r2, #0
 8017e68:	f843 2b04 	str.w	r2, [r3], #4
 8017e6c:	429f      	cmp	r7, r3
 8017e6e:	d2fb      	bcs.n	8017e68 <__hexnan+0xcc>
 8017e70:	683b      	ldr	r3, [r7, #0]
 8017e72:	b91b      	cbnz	r3, 8017e7c <__hexnan+0xe0>
 8017e74:	4547      	cmp	r7, r8
 8017e76:	d126      	bne.n	8017ec6 <__hexnan+0x12a>
 8017e78:	2301      	movs	r3, #1
 8017e7a:	603b      	str	r3, [r7, #0]
 8017e7c:	2005      	movs	r0, #5
 8017e7e:	e025      	b.n	8017ecc <__hexnan+0x130>
 8017e80:	3501      	adds	r5, #1
 8017e82:	2d08      	cmp	r5, #8
 8017e84:	f10b 0b01 	add.w	fp, fp, #1
 8017e88:	dd06      	ble.n	8017e98 <__hexnan+0xfc>
 8017e8a:	4544      	cmp	r4, r8
 8017e8c:	d9c3      	bls.n	8017e16 <__hexnan+0x7a>
 8017e8e:	2300      	movs	r3, #0
 8017e90:	f844 3c04 	str.w	r3, [r4, #-4]
 8017e94:	2501      	movs	r5, #1
 8017e96:	3c04      	subs	r4, #4
 8017e98:	6822      	ldr	r2, [r4, #0]
 8017e9a:	f000 000f 	and.w	r0, r0, #15
 8017e9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017ea2:	6020      	str	r0, [r4, #0]
 8017ea4:	e7b7      	b.n	8017e16 <__hexnan+0x7a>
 8017ea6:	2508      	movs	r5, #8
 8017ea8:	e7b5      	b.n	8017e16 <__hexnan+0x7a>
 8017eaa:	9b01      	ldr	r3, [sp, #4]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d0df      	beq.n	8017e70 <__hexnan+0xd4>
 8017eb0:	f1c3 0320 	rsb	r3, r3, #32
 8017eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8017eb8:	40da      	lsrs	r2, r3
 8017eba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017ebe:	4013      	ands	r3, r2
 8017ec0:	f846 3c04 	str.w	r3, [r6, #-4]
 8017ec4:	e7d4      	b.n	8017e70 <__hexnan+0xd4>
 8017ec6:	3f04      	subs	r7, #4
 8017ec8:	e7d2      	b.n	8017e70 <__hexnan+0xd4>
 8017eca:	2004      	movs	r0, #4
 8017ecc:	b007      	add	sp, #28
 8017ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017ed2 <__ascii_mbtowc>:
 8017ed2:	b082      	sub	sp, #8
 8017ed4:	b901      	cbnz	r1, 8017ed8 <__ascii_mbtowc+0x6>
 8017ed6:	a901      	add	r1, sp, #4
 8017ed8:	b142      	cbz	r2, 8017eec <__ascii_mbtowc+0x1a>
 8017eda:	b14b      	cbz	r3, 8017ef0 <__ascii_mbtowc+0x1e>
 8017edc:	7813      	ldrb	r3, [r2, #0]
 8017ede:	600b      	str	r3, [r1, #0]
 8017ee0:	7812      	ldrb	r2, [r2, #0]
 8017ee2:	1e10      	subs	r0, r2, #0
 8017ee4:	bf18      	it	ne
 8017ee6:	2001      	movne	r0, #1
 8017ee8:	b002      	add	sp, #8
 8017eea:	4770      	bx	lr
 8017eec:	4610      	mov	r0, r2
 8017eee:	e7fb      	b.n	8017ee8 <__ascii_mbtowc+0x16>
 8017ef0:	f06f 0001 	mvn.w	r0, #1
 8017ef4:	e7f8      	b.n	8017ee8 <__ascii_mbtowc+0x16>
	...

08017ef8 <_Balloc>:
 8017ef8:	b570      	push	{r4, r5, r6, lr}
 8017efa:	69c6      	ldr	r6, [r0, #28]
 8017efc:	4604      	mov	r4, r0
 8017efe:	460d      	mov	r5, r1
 8017f00:	b976      	cbnz	r6, 8017f20 <_Balloc+0x28>
 8017f02:	2010      	movs	r0, #16
 8017f04:	f7fc fce0 	bl	80148c8 <malloc>
 8017f08:	4602      	mov	r2, r0
 8017f0a:	61e0      	str	r0, [r4, #28]
 8017f0c:	b920      	cbnz	r0, 8017f18 <_Balloc+0x20>
 8017f0e:	4b18      	ldr	r3, [pc, #96]	; (8017f70 <_Balloc+0x78>)
 8017f10:	4818      	ldr	r0, [pc, #96]	; (8017f74 <_Balloc+0x7c>)
 8017f12:	216b      	movs	r1, #107	; 0x6b
 8017f14:	f7fe fda2 	bl	8016a5c <__assert_func>
 8017f18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017f1c:	6006      	str	r6, [r0, #0]
 8017f1e:	60c6      	str	r6, [r0, #12]
 8017f20:	69e6      	ldr	r6, [r4, #28]
 8017f22:	68f3      	ldr	r3, [r6, #12]
 8017f24:	b183      	cbz	r3, 8017f48 <_Balloc+0x50>
 8017f26:	69e3      	ldr	r3, [r4, #28]
 8017f28:	68db      	ldr	r3, [r3, #12]
 8017f2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017f2e:	b9b8      	cbnz	r0, 8017f60 <_Balloc+0x68>
 8017f30:	2101      	movs	r1, #1
 8017f32:	fa01 f605 	lsl.w	r6, r1, r5
 8017f36:	1d72      	adds	r2, r6, #5
 8017f38:	0092      	lsls	r2, r2, #2
 8017f3a:	4620      	mov	r0, r4
 8017f3c:	f000 fecf 	bl	8018cde <_calloc_r>
 8017f40:	b160      	cbz	r0, 8017f5c <_Balloc+0x64>
 8017f42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017f46:	e00e      	b.n	8017f66 <_Balloc+0x6e>
 8017f48:	2221      	movs	r2, #33	; 0x21
 8017f4a:	2104      	movs	r1, #4
 8017f4c:	4620      	mov	r0, r4
 8017f4e:	f000 fec6 	bl	8018cde <_calloc_r>
 8017f52:	69e3      	ldr	r3, [r4, #28]
 8017f54:	60f0      	str	r0, [r6, #12]
 8017f56:	68db      	ldr	r3, [r3, #12]
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d1e4      	bne.n	8017f26 <_Balloc+0x2e>
 8017f5c:	2000      	movs	r0, #0
 8017f5e:	bd70      	pop	{r4, r5, r6, pc}
 8017f60:	6802      	ldr	r2, [r0, #0]
 8017f62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017f66:	2300      	movs	r3, #0
 8017f68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017f6c:	e7f7      	b.n	8017f5e <_Balloc+0x66>
 8017f6e:	bf00      	nop
 8017f70:	0801ce7a 	.word	0x0801ce7a
 8017f74:	0801d005 	.word	0x0801d005

08017f78 <_Bfree>:
 8017f78:	b570      	push	{r4, r5, r6, lr}
 8017f7a:	69c6      	ldr	r6, [r0, #28]
 8017f7c:	4605      	mov	r5, r0
 8017f7e:	460c      	mov	r4, r1
 8017f80:	b976      	cbnz	r6, 8017fa0 <_Bfree+0x28>
 8017f82:	2010      	movs	r0, #16
 8017f84:	f7fc fca0 	bl	80148c8 <malloc>
 8017f88:	4602      	mov	r2, r0
 8017f8a:	61e8      	str	r0, [r5, #28]
 8017f8c:	b920      	cbnz	r0, 8017f98 <_Bfree+0x20>
 8017f8e:	4b09      	ldr	r3, [pc, #36]	; (8017fb4 <_Bfree+0x3c>)
 8017f90:	4809      	ldr	r0, [pc, #36]	; (8017fb8 <_Bfree+0x40>)
 8017f92:	218f      	movs	r1, #143	; 0x8f
 8017f94:	f7fe fd62 	bl	8016a5c <__assert_func>
 8017f98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017f9c:	6006      	str	r6, [r0, #0]
 8017f9e:	60c6      	str	r6, [r0, #12]
 8017fa0:	b13c      	cbz	r4, 8017fb2 <_Bfree+0x3a>
 8017fa2:	69eb      	ldr	r3, [r5, #28]
 8017fa4:	6862      	ldr	r2, [r4, #4]
 8017fa6:	68db      	ldr	r3, [r3, #12]
 8017fa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017fac:	6021      	str	r1, [r4, #0]
 8017fae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017fb2:	bd70      	pop	{r4, r5, r6, pc}
 8017fb4:	0801ce7a 	.word	0x0801ce7a
 8017fb8:	0801d005 	.word	0x0801d005

08017fbc <__multadd>:
 8017fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fc0:	690d      	ldr	r5, [r1, #16]
 8017fc2:	4607      	mov	r7, r0
 8017fc4:	460c      	mov	r4, r1
 8017fc6:	461e      	mov	r6, r3
 8017fc8:	f101 0c14 	add.w	ip, r1, #20
 8017fcc:	2000      	movs	r0, #0
 8017fce:	f8dc 3000 	ldr.w	r3, [ip]
 8017fd2:	b299      	uxth	r1, r3
 8017fd4:	fb02 6101 	mla	r1, r2, r1, r6
 8017fd8:	0c1e      	lsrs	r6, r3, #16
 8017fda:	0c0b      	lsrs	r3, r1, #16
 8017fdc:	fb02 3306 	mla	r3, r2, r6, r3
 8017fe0:	b289      	uxth	r1, r1
 8017fe2:	3001      	adds	r0, #1
 8017fe4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017fe8:	4285      	cmp	r5, r0
 8017fea:	f84c 1b04 	str.w	r1, [ip], #4
 8017fee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017ff2:	dcec      	bgt.n	8017fce <__multadd+0x12>
 8017ff4:	b30e      	cbz	r6, 801803a <__multadd+0x7e>
 8017ff6:	68a3      	ldr	r3, [r4, #8]
 8017ff8:	42ab      	cmp	r3, r5
 8017ffa:	dc19      	bgt.n	8018030 <__multadd+0x74>
 8017ffc:	6861      	ldr	r1, [r4, #4]
 8017ffe:	4638      	mov	r0, r7
 8018000:	3101      	adds	r1, #1
 8018002:	f7ff ff79 	bl	8017ef8 <_Balloc>
 8018006:	4680      	mov	r8, r0
 8018008:	b928      	cbnz	r0, 8018016 <__multadd+0x5a>
 801800a:	4602      	mov	r2, r0
 801800c:	4b0c      	ldr	r3, [pc, #48]	; (8018040 <__multadd+0x84>)
 801800e:	480d      	ldr	r0, [pc, #52]	; (8018044 <__multadd+0x88>)
 8018010:	21ba      	movs	r1, #186	; 0xba
 8018012:	f7fe fd23 	bl	8016a5c <__assert_func>
 8018016:	6922      	ldr	r2, [r4, #16]
 8018018:	3202      	adds	r2, #2
 801801a:	f104 010c 	add.w	r1, r4, #12
 801801e:	0092      	lsls	r2, r2, #2
 8018020:	300c      	adds	r0, #12
 8018022:	f7fe fcfe 	bl	8016a22 <memcpy>
 8018026:	4621      	mov	r1, r4
 8018028:	4638      	mov	r0, r7
 801802a:	f7ff ffa5 	bl	8017f78 <_Bfree>
 801802e:	4644      	mov	r4, r8
 8018030:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018034:	3501      	adds	r5, #1
 8018036:	615e      	str	r6, [r3, #20]
 8018038:	6125      	str	r5, [r4, #16]
 801803a:	4620      	mov	r0, r4
 801803c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018040:	0801cf94 	.word	0x0801cf94
 8018044:	0801d005 	.word	0x0801d005

08018048 <__s2b>:
 8018048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801804c:	460c      	mov	r4, r1
 801804e:	4615      	mov	r5, r2
 8018050:	461f      	mov	r7, r3
 8018052:	2209      	movs	r2, #9
 8018054:	3308      	adds	r3, #8
 8018056:	4606      	mov	r6, r0
 8018058:	fb93 f3f2 	sdiv	r3, r3, r2
 801805c:	2100      	movs	r1, #0
 801805e:	2201      	movs	r2, #1
 8018060:	429a      	cmp	r2, r3
 8018062:	db09      	blt.n	8018078 <__s2b+0x30>
 8018064:	4630      	mov	r0, r6
 8018066:	f7ff ff47 	bl	8017ef8 <_Balloc>
 801806a:	b940      	cbnz	r0, 801807e <__s2b+0x36>
 801806c:	4602      	mov	r2, r0
 801806e:	4b19      	ldr	r3, [pc, #100]	; (80180d4 <__s2b+0x8c>)
 8018070:	4819      	ldr	r0, [pc, #100]	; (80180d8 <__s2b+0x90>)
 8018072:	21d3      	movs	r1, #211	; 0xd3
 8018074:	f7fe fcf2 	bl	8016a5c <__assert_func>
 8018078:	0052      	lsls	r2, r2, #1
 801807a:	3101      	adds	r1, #1
 801807c:	e7f0      	b.n	8018060 <__s2b+0x18>
 801807e:	9b08      	ldr	r3, [sp, #32]
 8018080:	6143      	str	r3, [r0, #20]
 8018082:	2d09      	cmp	r5, #9
 8018084:	f04f 0301 	mov.w	r3, #1
 8018088:	6103      	str	r3, [r0, #16]
 801808a:	dd16      	ble.n	80180ba <__s2b+0x72>
 801808c:	f104 0909 	add.w	r9, r4, #9
 8018090:	46c8      	mov	r8, r9
 8018092:	442c      	add	r4, r5
 8018094:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018098:	4601      	mov	r1, r0
 801809a:	3b30      	subs	r3, #48	; 0x30
 801809c:	220a      	movs	r2, #10
 801809e:	4630      	mov	r0, r6
 80180a0:	f7ff ff8c 	bl	8017fbc <__multadd>
 80180a4:	45a0      	cmp	r8, r4
 80180a6:	d1f5      	bne.n	8018094 <__s2b+0x4c>
 80180a8:	f1a5 0408 	sub.w	r4, r5, #8
 80180ac:	444c      	add	r4, r9
 80180ae:	1b2d      	subs	r5, r5, r4
 80180b0:	1963      	adds	r3, r4, r5
 80180b2:	42bb      	cmp	r3, r7
 80180b4:	db04      	blt.n	80180c0 <__s2b+0x78>
 80180b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180ba:	340a      	adds	r4, #10
 80180bc:	2509      	movs	r5, #9
 80180be:	e7f6      	b.n	80180ae <__s2b+0x66>
 80180c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80180c4:	4601      	mov	r1, r0
 80180c6:	3b30      	subs	r3, #48	; 0x30
 80180c8:	220a      	movs	r2, #10
 80180ca:	4630      	mov	r0, r6
 80180cc:	f7ff ff76 	bl	8017fbc <__multadd>
 80180d0:	e7ee      	b.n	80180b0 <__s2b+0x68>
 80180d2:	bf00      	nop
 80180d4:	0801cf94 	.word	0x0801cf94
 80180d8:	0801d005 	.word	0x0801d005

080180dc <__hi0bits>:
 80180dc:	0c03      	lsrs	r3, r0, #16
 80180de:	041b      	lsls	r3, r3, #16
 80180e0:	b9d3      	cbnz	r3, 8018118 <__hi0bits+0x3c>
 80180e2:	0400      	lsls	r0, r0, #16
 80180e4:	2310      	movs	r3, #16
 80180e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80180ea:	bf04      	itt	eq
 80180ec:	0200      	lsleq	r0, r0, #8
 80180ee:	3308      	addeq	r3, #8
 80180f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80180f4:	bf04      	itt	eq
 80180f6:	0100      	lsleq	r0, r0, #4
 80180f8:	3304      	addeq	r3, #4
 80180fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80180fe:	bf04      	itt	eq
 8018100:	0080      	lsleq	r0, r0, #2
 8018102:	3302      	addeq	r3, #2
 8018104:	2800      	cmp	r0, #0
 8018106:	db05      	blt.n	8018114 <__hi0bits+0x38>
 8018108:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801810c:	f103 0301 	add.w	r3, r3, #1
 8018110:	bf08      	it	eq
 8018112:	2320      	moveq	r3, #32
 8018114:	4618      	mov	r0, r3
 8018116:	4770      	bx	lr
 8018118:	2300      	movs	r3, #0
 801811a:	e7e4      	b.n	80180e6 <__hi0bits+0xa>

0801811c <__lo0bits>:
 801811c:	6803      	ldr	r3, [r0, #0]
 801811e:	f013 0207 	ands.w	r2, r3, #7
 8018122:	d00c      	beq.n	801813e <__lo0bits+0x22>
 8018124:	07d9      	lsls	r1, r3, #31
 8018126:	d422      	bmi.n	801816e <__lo0bits+0x52>
 8018128:	079a      	lsls	r2, r3, #30
 801812a:	bf49      	itett	mi
 801812c:	085b      	lsrmi	r3, r3, #1
 801812e:	089b      	lsrpl	r3, r3, #2
 8018130:	6003      	strmi	r3, [r0, #0]
 8018132:	2201      	movmi	r2, #1
 8018134:	bf5c      	itt	pl
 8018136:	6003      	strpl	r3, [r0, #0]
 8018138:	2202      	movpl	r2, #2
 801813a:	4610      	mov	r0, r2
 801813c:	4770      	bx	lr
 801813e:	b299      	uxth	r1, r3
 8018140:	b909      	cbnz	r1, 8018146 <__lo0bits+0x2a>
 8018142:	0c1b      	lsrs	r3, r3, #16
 8018144:	2210      	movs	r2, #16
 8018146:	b2d9      	uxtb	r1, r3
 8018148:	b909      	cbnz	r1, 801814e <__lo0bits+0x32>
 801814a:	3208      	adds	r2, #8
 801814c:	0a1b      	lsrs	r3, r3, #8
 801814e:	0719      	lsls	r1, r3, #28
 8018150:	bf04      	itt	eq
 8018152:	091b      	lsreq	r3, r3, #4
 8018154:	3204      	addeq	r2, #4
 8018156:	0799      	lsls	r1, r3, #30
 8018158:	bf04      	itt	eq
 801815a:	089b      	lsreq	r3, r3, #2
 801815c:	3202      	addeq	r2, #2
 801815e:	07d9      	lsls	r1, r3, #31
 8018160:	d403      	bmi.n	801816a <__lo0bits+0x4e>
 8018162:	085b      	lsrs	r3, r3, #1
 8018164:	f102 0201 	add.w	r2, r2, #1
 8018168:	d003      	beq.n	8018172 <__lo0bits+0x56>
 801816a:	6003      	str	r3, [r0, #0]
 801816c:	e7e5      	b.n	801813a <__lo0bits+0x1e>
 801816e:	2200      	movs	r2, #0
 8018170:	e7e3      	b.n	801813a <__lo0bits+0x1e>
 8018172:	2220      	movs	r2, #32
 8018174:	e7e1      	b.n	801813a <__lo0bits+0x1e>
	...

08018178 <__i2b>:
 8018178:	b510      	push	{r4, lr}
 801817a:	460c      	mov	r4, r1
 801817c:	2101      	movs	r1, #1
 801817e:	f7ff febb 	bl	8017ef8 <_Balloc>
 8018182:	4602      	mov	r2, r0
 8018184:	b928      	cbnz	r0, 8018192 <__i2b+0x1a>
 8018186:	4b05      	ldr	r3, [pc, #20]	; (801819c <__i2b+0x24>)
 8018188:	4805      	ldr	r0, [pc, #20]	; (80181a0 <__i2b+0x28>)
 801818a:	f240 1145 	movw	r1, #325	; 0x145
 801818e:	f7fe fc65 	bl	8016a5c <__assert_func>
 8018192:	2301      	movs	r3, #1
 8018194:	6144      	str	r4, [r0, #20]
 8018196:	6103      	str	r3, [r0, #16]
 8018198:	bd10      	pop	{r4, pc}
 801819a:	bf00      	nop
 801819c:	0801cf94 	.word	0x0801cf94
 80181a0:	0801d005 	.word	0x0801d005

080181a4 <__multiply>:
 80181a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181a8:	4691      	mov	r9, r2
 80181aa:	690a      	ldr	r2, [r1, #16]
 80181ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80181b0:	429a      	cmp	r2, r3
 80181b2:	bfb8      	it	lt
 80181b4:	460b      	movlt	r3, r1
 80181b6:	460c      	mov	r4, r1
 80181b8:	bfbc      	itt	lt
 80181ba:	464c      	movlt	r4, r9
 80181bc:	4699      	movlt	r9, r3
 80181be:	6927      	ldr	r7, [r4, #16]
 80181c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80181c4:	68a3      	ldr	r3, [r4, #8]
 80181c6:	6861      	ldr	r1, [r4, #4]
 80181c8:	eb07 060a 	add.w	r6, r7, sl
 80181cc:	42b3      	cmp	r3, r6
 80181ce:	b085      	sub	sp, #20
 80181d0:	bfb8      	it	lt
 80181d2:	3101      	addlt	r1, #1
 80181d4:	f7ff fe90 	bl	8017ef8 <_Balloc>
 80181d8:	b930      	cbnz	r0, 80181e8 <__multiply+0x44>
 80181da:	4602      	mov	r2, r0
 80181dc:	4b44      	ldr	r3, [pc, #272]	; (80182f0 <__multiply+0x14c>)
 80181de:	4845      	ldr	r0, [pc, #276]	; (80182f4 <__multiply+0x150>)
 80181e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80181e4:	f7fe fc3a 	bl	8016a5c <__assert_func>
 80181e8:	f100 0514 	add.w	r5, r0, #20
 80181ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80181f0:	462b      	mov	r3, r5
 80181f2:	2200      	movs	r2, #0
 80181f4:	4543      	cmp	r3, r8
 80181f6:	d321      	bcc.n	801823c <__multiply+0x98>
 80181f8:	f104 0314 	add.w	r3, r4, #20
 80181fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018200:	f109 0314 	add.w	r3, r9, #20
 8018204:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018208:	9202      	str	r2, [sp, #8]
 801820a:	1b3a      	subs	r2, r7, r4
 801820c:	3a15      	subs	r2, #21
 801820e:	f022 0203 	bic.w	r2, r2, #3
 8018212:	3204      	adds	r2, #4
 8018214:	f104 0115 	add.w	r1, r4, #21
 8018218:	428f      	cmp	r7, r1
 801821a:	bf38      	it	cc
 801821c:	2204      	movcc	r2, #4
 801821e:	9201      	str	r2, [sp, #4]
 8018220:	9a02      	ldr	r2, [sp, #8]
 8018222:	9303      	str	r3, [sp, #12]
 8018224:	429a      	cmp	r2, r3
 8018226:	d80c      	bhi.n	8018242 <__multiply+0x9e>
 8018228:	2e00      	cmp	r6, #0
 801822a:	dd03      	ble.n	8018234 <__multiply+0x90>
 801822c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018230:	2b00      	cmp	r3, #0
 8018232:	d05b      	beq.n	80182ec <__multiply+0x148>
 8018234:	6106      	str	r6, [r0, #16]
 8018236:	b005      	add	sp, #20
 8018238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801823c:	f843 2b04 	str.w	r2, [r3], #4
 8018240:	e7d8      	b.n	80181f4 <__multiply+0x50>
 8018242:	f8b3 a000 	ldrh.w	sl, [r3]
 8018246:	f1ba 0f00 	cmp.w	sl, #0
 801824a:	d024      	beq.n	8018296 <__multiply+0xf2>
 801824c:	f104 0e14 	add.w	lr, r4, #20
 8018250:	46a9      	mov	r9, r5
 8018252:	f04f 0c00 	mov.w	ip, #0
 8018256:	f85e 2b04 	ldr.w	r2, [lr], #4
 801825a:	f8d9 1000 	ldr.w	r1, [r9]
 801825e:	fa1f fb82 	uxth.w	fp, r2
 8018262:	b289      	uxth	r1, r1
 8018264:	fb0a 110b 	mla	r1, sl, fp, r1
 8018268:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801826c:	f8d9 2000 	ldr.w	r2, [r9]
 8018270:	4461      	add	r1, ip
 8018272:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018276:	fb0a c20b 	mla	r2, sl, fp, ip
 801827a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801827e:	b289      	uxth	r1, r1
 8018280:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018284:	4577      	cmp	r7, lr
 8018286:	f849 1b04 	str.w	r1, [r9], #4
 801828a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801828e:	d8e2      	bhi.n	8018256 <__multiply+0xb2>
 8018290:	9a01      	ldr	r2, [sp, #4]
 8018292:	f845 c002 	str.w	ip, [r5, r2]
 8018296:	9a03      	ldr	r2, [sp, #12]
 8018298:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801829c:	3304      	adds	r3, #4
 801829e:	f1b9 0f00 	cmp.w	r9, #0
 80182a2:	d021      	beq.n	80182e8 <__multiply+0x144>
 80182a4:	6829      	ldr	r1, [r5, #0]
 80182a6:	f104 0c14 	add.w	ip, r4, #20
 80182aa:	46ae      	mov	lr, r5
 80182ac:	f04f 0a00 	mov.w	sl, #0
 80182b0:	f8bc b000 	ldrh.w	fp, [ip]
 80182b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80182b8:	fb09 220b 	mla	r2, r9, fp, r2
 80182bc:	4452      	add	r2, sl
 80182be:	b289      	uxth	r1, r1
 80182c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80182c4:	f84e 1b04 	str.w	r1, [lr], #4
 80182c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80182cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80182d0:	f8be 1000 	ldrh.w	r1, [lr]
 80182d4:	fb09 110a 	mla	r1, r9, sl, r1
 80182d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80182dc:	4567      	cmp	r7, ip
 80182de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80182e2:	d8e5      	bhi.n	80182b0 <__multiply+0x10c>
 80182e4:	9a01      	ldr	r2, [sp, #4]
 80182e6:	50a9      	str	r1, [r5, r2]
 80182e8:	3504      	adds	r5, #4
 80182ea:	e799      	b.n	8018220 <__multiply+0x7c>
 80182ec:	3e01      	subs	r6, #1
 80182ee:	e79b      	b.n	8018228 <__multiply+0x84>
 80182f0:	0801cf94 	.word	0x0801cf94
 80182f4:	0801d005 	.word	0x0801d005

080182f8 <__pow5mult>:
 80182f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182fc:	4615      	mov	r5, r2
 80182fe:	f012 0203 	ands.w	r2, r2, #3
 8018302:	4606      	mov	r6, r0
 8018304:	460f      	mov	r7, r1
 8018306:	d007      	beq.n	8018318 <__pow5mult+0x20>
 8018308:	4c25      	ldr	r4, [pc, #148]	; (80183a0 <__pow5mult+0xa8>)
 801830a:	3a01      	subs	r2, #1
 801830c:	2300      	movs	r3, #0
 801830e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018312:	f7ff fe53 	bl	8017fbc <__multadd>
 8018316:	4607      	mov	r7, r0
 8018318:	10ad      	asrs	r5, r5, #2
 801831a:	d03d      	beq.n	8018398 <__pow5mult+0xa0>
 801831c:	69f4      	ldr	r4, [r6, #28]
 801831e:	b97c      	cbnz	r4, 8018340 <__pow5mult+0x48>
 8018320:	2010      	movs	r0, #16
 8018322:	f7fc fad1 	bl	80148c8 <malloc>
 8018326:	4602      	mov	r2, r0
 8018328:	61f0      	str	r0, [r6, #28]
 801832a:	b928      	cbnz	r0, 8018338 <__pow5mult+0x40>
 801832c:	4b1d      	ldr	r3, [pc, #116]	; (80183a4 <__pow5mult+0xac>)
 801832e:	481e      	ldr	r0, [pc, #120]	; (80183a8 <__pow5mult+0xb0>)
 8018330:	f240 11b3 	movw	r1, #435	; 0x1b3
 8018334:	f7fe fb92 	bl	8016a5c <__assert_func>
 8018338:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801833c:	6004      	str	r4, [r0, #0]
 801833e:	60c4      	str	r4, [r0, #12]
 8018340:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8018344:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018348:	b94c      	cbnz	r4, 801835e <__pow5mult+0x66>
 801834a:	f240 2171 	movw	r1, #625	; 0x271
 801834e:	4630      	mov	r0, r6
 8018350:	f7ff ff12 	bl	8018178 <__i2b>
 8018354:	2300      	movs	r3, #0
 8018356:	f8c8 0008 	str.w	r0, [r8, #8]
 801835a:	4604      	mov	r4, r0
 801835c:	6003      	str	r3, [r0, #0]
 801835e:	f04f 0900 	mov.w	r9, #0
 8018362:	07eb      	lsls	r3, r5, #31
 8018364:	d50a      	bpl.n	801837c <__pow5mult+0x84>
 8018366:	4639      	mov	r1, r7
 8018368:	4622      	mov	r2, r4
 801836a:	4630      	mov	r0, r6
 801836c:	f7ff ff1a 	bl	80181a4 <__multiply>
 8018370:	4639      	mov	r1, r7
 8018372:	4680      	mov	r8, r0
 8018374:	4630      	mov	r0, r6
 8018376:	f7ff fdff 	bl	8017f78 <_Bfree>
 801837a:	4647      	mov	r7, r8
 801837c:	106d      	asrs	r5, r5, #1
 801837e:	d00b      	beq.n	8018398 <__pow5mult+0xa0>
 8018380:	6820      	ldr	r0, [r4, #0]
 8018382:	b938      	cbnz	r0, 8018394 <__pow5mult+0x9c>
 8018384:	4622      	mov	r2, r4
 8018386:	4621      	mov	r1, r4
 8018388:	4630      	mov	r0, r6
 801838a:	f7ff ff0b 	bl	80181a4 <__multiply>
 801838e:	6020      	str	r0, [r4, #0]
 8018390:	f8c0 9000 	str.w	r9, [r0]
 8018394:	4604      	mov	r4, r0
 8018396:	e7e4      	b.n	8018362 <__pow5mult+0x6a>
 8018398:	4638      	mov	r0, r7
 801839a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801839e:	bf00      	nop
 80183a0:	0801d150 	.word	0x0801d150
 80183a4:	0801ce7a 	.word	0x0801ce7a
 80183a8:	0801d005 	.word	0x0801d005

080183ac <__lshift>:
 80183ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183b0:	460c      	mov	r4, r1
 80183b2:	6849      	ldr	r1, [r1, #4]
 80183b4:	6923      	ldr	r3, [r4, #16]
 80183b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80183ba:	68a3      	ldr	r3, [r4, #8]
 80183bc:	4607      	mov	r7, r0
 80183be:	4691      	mov	r9, r2
 80183c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80183c4:	f108 0601 	add.w	r6, r8, #1
 80183c8:	42b3      	cmp	r3, r6
 80183ca:	db0b      	blt.n	80183e4 <__lshift+0x38>
 80183cc:	4638      	mov	r0, r7
 80183ce:	f7ff fd93 	bl	8017ef8 <_Balloc>
 80183d2:	4605      	mov	r5, r0
 80183d4:	b948      	cbnz	r0, 80183ea <__lshift+0x3e>
 80183d6:	4602      	mov	r2, r0
 80183d8:	4b28      	ldr	r3, [pc, #160]	; (801847c <__lshift+0xd0>)
 80183da:	4829      	ldr	r0, [pc, #164]	; (8018480 <__lshift+0xd4>)
 80183dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80183e0:	f7fe fb3c 	bl	8016a5c <__assert_func>
 80183e4:	3101      	adds	r1, #1
 80183e6:	005b      	lsls	r3, r3, #1
 80183e8:	e7ee      	b.n	80183c8 <__lshift+0x1c>
 80183ea:	2300      	movs	r3, #0
 80183ec:	f100 0114 	add.w	r1, r0, #20
 80183f0:	f100 0210 	add.w	r2, r0, #16
 80183f4:	4618      	mov	r0, r3
 80183f6:	4553      	cmp	r3, sl
 80183f8:	db33      	blt.n	8018462 <__lshift+0xb6>
 80183fa:	6920      	ldr	r0, [r4, #16]
 80183fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018400:	f104 0314 	add.w	r3, r4, #20
 8018404:	f019 091f 	ands.w	r9, r9, #31
 8018408:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801840c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018410:	d02b      	beq.n	801846a <__lshift+0xbe>
 8018412:	f1c9 0e20 	rsb	lr, r9, #32
 8018416:	468a      	mov	sl, r1
 8018418:	2200      	movs	r2, #0
 801841a:	6818      	ldr	r0, [r3, #0]
 801841c:	fa00 f009 	lsl.w	r0, r0, r9
 8018420:	4310      	orrs	r0, r2
 8018422:	f84a 0b04 	str.w	r0, [sl], #4
 8018426:	f853 2b04 	ldr.w	r2, [r3], #4
 801842a:	459c      	cmp	ip, r3
 801842c:	fa22 f20e 	lsr.w	r2, r2, lr
 8018430:	d8f3      	bhi.n	801841a <__lshift+0x6e>
 8018432:	ebac 0304 	sub.w	r3, ip, r4
 8018436:	3b15      	subs	r3, #21
 8018438:	f023 0303 	bic.w	r3, r3, #3
 801843c:	3304      	adds	r3, #4
 801843e:	f104 0015 	add.w	r0, r4, #21
 8018442:	4584      	cmp	ip, r0
 8018444:	bf38      	it	cc
 8018446:	2304      	movcc	r3, #4
 8018448:	50ca      	str	r2, [r1, r3]
 801844a:	b10a      	cbz	r2, 8018450 <__lshift+0xa4>
 801844c:	f108 0602 	add.w	r6, r8, #2
 8018450:	3e01      	subs	r6, #1
 8018452:	4638      	mov	r0, r7
 8018454:	612e      	str	r6, [r5, #16]
 8018456:	4621      	mov	r1, r4
 8018458:	f7ff fd8e 	bl	8017f78 <_Bfree>
 801845c:	4628      	mov	r0, r5
 801845e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018462:	f842 0f04 	str.w	r0, [r2, #4]!
 8018466:	3301      	adds	r3, #1
 8018468:	e7c5      	b.n	80183f6 <__lshift+0x4a>
 801846a:	3904      	subs	r1, #4
 801846c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018470:	f841 2f04 	str.w	r2, [r1, #4]!
 8018474:	459c      	cmp	ip, r3
 8018476:	d8f9      	bhi.n	801846c <__lshift+0xc0>
 8018478:	e7ea      	b.n	8018450 <__lshift+0xa4>
 801847a:	bf00      	nop
 801847c:	0801cf94 	.word	0x0801cf94
 8018480:	0801d005 	.word	0x0801d005

08018484 <__mcmp>:
 8018484:	b530      	push	{r4, r5, lr}
 8018486:	6902      	ldr	r2, [r0, #16]
 8018488:	690c      	ldr	r4, [r1, #16]
 801848a:	1b12      	subs	r2, r2, r4
 801848c:	d10e      	bne.n	80184ac <__mcmp+0x28>
 801848e:	f100 0314 	add.w	r3, r0, #20
 8018492:	3114      	adds	r1, #20
 8018494:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018498:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801849c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80184a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80184a4:	42a5      	cmp	r5, r4
 80184a6:	d003      	beq.n	80184b0 <__mcmp+0x2c>
 80184a8:	d305      	bcc.n	80184b6 <__mcmp+0x32>
 80184aa:	2201      	movs	r2, #1
 80184ac:	4610      	mov	r0, r2
 80184ae:	bd30      	pop	{r4, r5, pc}
 80184b0:	4283      	cmp	r3, r0
 80184b2:	d3f3      	bcc.n	801849c <__mcmp+0x18>
 80184b4:	e7fa      	b.n	80184ac <__mcmp+0x28>
 80184b6:	f04f 32ff 	mov.w	r2, #4294967295
 80184ba:	e7f7      	b.n	80184ac <__mcmp+0x28>

080184bc <__mdiff>:
 80184bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184c0:	460c      	mov	r4, r1
 80184c2:	4606      	mov	r6, r0
 80184c4:	4611      	mov	r1, r2
 80184c6:	4620      	mov	r0, r4
 80184c8:	4690      	mov	r8, r2
 80184ca:	f7ff ffdb 	bl	8018484 <__mcmp>
 80184ce:	1e05      	subs	r5, r0, #0
 80184d0:	d110      	bne.n	80184f4 <__mdiff+0x38>
 80184d2:	4629      	mov	r1, r5
 80184d4:	4630      	mov	r0, r6
 80184d6:	f7ff fd0f 	bl	8017ef8 <_Balloc>
 80184da:	b930      	cbnz	r0, 80184ea <__mdiff+0x2e>
 80184dc:	4b3a      	ldr	r3, [pc, #232]	; (80185c8 <__mdiff+0x10c>)
 80184de:	4602      	mov	r2, r0
 80184e0:	f240 2137 	movw	r1, #567	; 0x237
 80184e4:	4839      	ldr	r0, [pc, #228]	; (80185cc <__mdiff+0x110>)
 80184e6:	f7fe fab9 	bl	8016a5c <__assert_func>
 80184ea:	2301      	movs	r3, #1
 80184ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80184f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184f4:	bfa4      	itt	ge
 80184f6:	4643      	movge	r3, r8
 80184f8:	46a0      	movge	r8, r4
 80184fa:	4630      	mov	r0, r6
 80184fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018500:	bfa6      	itte	ge
 8018502:	461c      	movge	r4, r3
 8018504:	2500      	movge	r5, #0
 8018506:	2501      	movlt	r5, #1
 8018508:	f7ff fcf6 	bl	8017ef8 <_Balloc>
 801850c:	b920      	cbnz	r0, 8018518 <__mdiff+0x5c>
 801850e:	4b2e      	ldr	r3, [pc, #184]	; (80185c8 <__mdiff+0x10c>)
 8018510:	4602      	mov	r2, r0
 8018512:	f240 2145 	movw	r1, #581	; 0x245
 8018516:	e7e5      	b.n	80184e4 <__mdiff+0x28>
 8018518:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801851c:	6926      	ldr	r6, [r4, #16]
 801851e:	60c5      	str	r5, [r0, #12]
 8018520:	f104 0914 	add.w	r9, r4, #20
 8018524:	f108 0514 	add.w	r5, r8, #20
 8018528:	f100 0e14 	add.w	lr, r0, #20
 801852c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018530:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018534:	f108 0210 	add.w	r2, r8, #16
 8018538:	46f2      	mov	sl, lr
 801853a:	2100      	movs	r1, #0
 801853c:	f859 3b04 	ldr.w	r3, [r9], #4
 8018540:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018544:	fa11 f88b 	uxtah	r8, r1, fp
 8018548:	b299      	uxth	r1, r3
 801854a:	0c1b      	lsrs	r3, r3, #16
 801854c:	eba8 0801 	sub.w	r8, r8, r1
 8018550:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8018554:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8018558:	fa1f f888 	uxth.w	r8, r8
 801855c:	1419      	asrs	r1, r3, #16
 801855e:	454e      	cmp	r6, r9
 8018560:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8018564:	f84a 3b04 	str.w	r3, [sl], #4
 8018568:	d8e8      	bhi.n	801853c <__mdiff+0x80>
 801856a:	1b33      	subs	r3, r6, r4
 801856c:	3b15      	subs	r3, #21
 801856e:	f023 0303 	bic.w	r3, r3, #3
 8018572:	3304      	adds	r3, #4
 8018574:	3415      	adds	r4, #21
 8018576:	42a6      	cmp	r6, r4
 8018578:	bf38      	it	cc
 801857a:	2304      	movcc	r3, #4
 801857c:	441d      	add	r5, r3
 801857e:	4473      	add	r3, lr
 8018580:	469e      	mov	lr, r3
 8018582:	462e      	mov	r6, r5
 8018584:	4566      	cmp	r6, ip
 8018586:	d30e      	bcc.n	80185a6 <__mdiff+0xea>
 8018588:	f10c 0203 	add.w	r2, ip, #3
 801858c:	1b52      	subs	r2, r2, r5
 801858e:	f022 0203 	bic.w	r2, r2, #3
 8018592:	3d03      	subs	r5, #3
 8018594:	45ac      	cmp	ip, r5
 8018596:	bf38      	it	cc
 8018598:	2200      	movcc	r2, #0
 801859a:	4413      	add	r3, r2
 801859c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80185a0:	b17a      	cbz	r2, 80185c2 <__mdiff+0x106>
 80185a2:	6107      	str	r7, [r0, #16]
 80185a4:	e7a4      	b.n	80184f0 <__mdiff+0x34>
 80185a6:	f856 8b04 	ldr.w	r8, [r6], #4
 80185aa:	fa11 f288 	uxtah	r2, r1, r8
 80185ae:	1414      	asrs	r4, r2, #16
 80185b0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80185b4:	b292      	uxth	r2, r2
 80185b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80185ba:	f84e 2b04 	str.w	r2, [lr], #4
 80185be:	1421      	asrs	r1, r4, #16
 80185c0:	e7e0      	b.n	8018584 <__mdiff+0xc8>
 80185c2:	3f01      	subs	r7, #1
 80185c4:	e7ea      	b.n	801859c <__mdiff+0xe0>
 80185c6:	bf00      	nop
 80185c8:	0801cf94 	.word	0x0801cf94
 80185cc:	0801d005 	.word	0x0801d005

080185d0 <__ulp>:
 80185d0:	b082      	sub	sp, #8
 80185d2:	ed8d 0b00 	vstr	d0, [sp]
 80185d6:	9a01      	ldr	r2, [sp, #4]
 80185d8:	4b0f      	ldr	r3, [pc, #60]	; (8018618 <__ulp+0x48>)
 80185da:	4013      	ands	r3, r2
 80185dc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	dc08      	bgt.n	80185f6 <__ulp+0x26>
 80185e4:	425b      	negs	r3, r3
 80185e6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80185ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 80185ee:	da04      	bge.n	80185fa <__ulp+0x2a>
 80185f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80185f4:	4113      	asrs	r3, r2
 80185f6:	2200      	movs	r2, #0
 80185f8:	e008      	b.n	801860c <__ulp+0x3c>
 80185fa:	f1a2 0314 	sub.w	r3, r2, #20
 80185fe:	2b1e      	cmp	r3, #30
 8018600:	bfda      	itte	le
 8018602:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8018606:	40da      	lsrle	r2, r3
 8018608:	2201      	movgt	r2, #1
 801860a:	2300      	movs	r3, #0
 801860c:	4619      	mov	r1, r3
 801860e:	4610      	mov	r0, r2
 8018610:	ec41 0b10 	vmov	d0, r0, r1
 8018614:	b002      	add	sp, #8
 8018616:	4770      	bx	lr
 8018618:	7ff00000 	.word	0x7ff00000

0801861c <__b2d>:
 801861c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018620:	6906      	ldr	r6, [r0, #16]
 8018622:	f100 0814 	add.w	r8, r0, #20
 8018626:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801862a:	1f37      	subs	r7, r6, #4
 801862c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018630:	4610      	mov	r0, r2
 8018632:	f7ff fd53 	bl	80180dc <__hi0bits>
 8018636:	f1c0 0320 	rsb	r3, r0, #32
 801863a:	280a      	cmp	r0, #10
 801863c:	600b      	str	r3, [r1, #0]
 801863e:	491b      	ldr	r1, [pc, #108]	; (80186ac <__b2d+0x90>)
 8018640:	dc15      	bgt.n	801866e <__b2d+0x52>
 8018642:	f1c0 0c0b 	rsb	ip, r0, #11
 8018646:	fa22 f30c 	lsr.w	r3, r2, ip
 801864a:	45b8      	cmp	r8, r7
 801864c:	ea43 0501 	orr.w	r5, r3, r1
 8018650:	bf34      	ite	cc
 8018652:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018656:	2300      	movcs	r3, #0
 8018658:	3015      	adds	r0, #21
 801865a:	fa02 f000 	lsl.w	r0, r2, r0
 801865e:	fa23 f30c 	lsr.w	r3, r3, ip
 8018662:	4303      	orrs	r3, r0
 8018664:	461c      	mov	r4, r3
 8018666:	ec45 4b10 	vmov	d0, r4, r5
 801866a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801866e:	45b8      	cmp	r8, r7
 8018670:	bf3a      	itte	cc
 8018672:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018676:	f1a6 0708 	subcc.w	r7, r6, #8
 801867a:	2300      	movcs	r3, #0
 801867c:	380b      	subs	r0, #11
 801867e:	d012      	beq.n	80186a6 <__b2d+0x8a>
 8018680:	f1c0 0120 	rsb	r1, r0, #32
 8018684:	fa23 f401 	lsr.w	r4, r3, r1
 8018688:	4082      	lsls	r2, r0
 801868a:	4322      	orrs	r2, r4
 801868c:	4547      	cmp	r7, r8
 801868e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8018692:	bf8c      	ite	hi
 8018694:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018698:	2200      	movls	r2, #0
 801869a:	4083      	lsls	r3, r0
 801869c:	40ca      	lsrs	r2, r1
 801869e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80186a2:	4313      	orrs	r3, r2
 80186a4:	e7de      	b.n	8018664 <__b2d+0x48>
 80186a6:	ea42 0501 	orr.w	r5, r2, r1
 80186aa:	e7db      	b.n	8018664 <__b2d+0x48>
 80186ac:	3ff00000 	.word	0x3ff00000

080186b0 <__d2b>:
 80186b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80186b4:	460f      	mov	r7, r1
 80186b6:	2101      	movs	r1, #1
 80186b8:	ec59 8b10 	vmov	r8, r9, d0
 80186bc:	4616      	mov	r6, r2
 80186be:	f7ff fc1b 	bl	8017ef8 <_Balloc>
 80186c2:	4604      	mov	r4, r0
 80186c4:	b930      	cbnz	r0, 80186d4 <__d2b+0x24>
 80186c6:	4602      	mov	r2, r0
 80186c8:	4b24      	ldr	r3, [pc, #144]	; (801875c <__d2b+0xac>)
 80186ca:	4825      	ldr	r0, [pc, #148]	; (8018760 <__d2b+0xb0>)
 80186cc:	f240 310f 	movw	r1, #783	; 0x30f
 80186d0:	f7fe f9c4 	bl	8016a5c <__assert_func>
 80186d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80186d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80186dc:	bb2d      	cbnz	r5, 801872a <__d2b+0x7a>
 80186de:	9301      	str	r3, [sp, #4]
 80186e0:	f1b8 0300 	subs.w	r3, r8, #0
 80186e4:	d026      	beq.n	8018734 <__d2b+0x84>
 80186e6:	4668      	mov	r0, sp
 80186e8:	9300      	str	r3, [sp, #0]
 80186ea:	f7ff fd17 	bl	801811c <__lo0bits>
 80186ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80186f2:	b1e8      	cbz	r0, 8018730 <__d2b+0x80>
 80186f4:	f1c0 0320 	rsb	r3, r0, #32
 80186f8:	fa02 f303 	lsl.w	r3, r2, r3
 80186fc:	430b      	orrs	r3, r1
 80186fe:	40c2      	lsrs	r2, r0
 8018700:	6163      	str	r3, [r4, #20]
 8018702:	9201      	str	r2, [sp, #4]
 8018704:	9b01      	ldr	r3, [sp, #4]
 8018706:	61a3      	str	r3, [r4, #24]
 8018708:	2b00      	cmp	r3, #0
 801870a:	bf14      	ite	ne
 801870c:	2202      	movne	r2, #2
 801870e:	2201      	moveq	r2, #1
 8018710:	6122      	str	r2, [r4, #16]
 8018712:	b1bd      	cbz	r5, 8018744 <__d2b+0x94>
 8018714:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018718:	4405      	add	r5, r0
 801871a:	603d      	str	r5, [r7, #0]
 801871c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018720:	6030      	str	r0, [r6, #0]
 8018722:	4620      	mov	r0, r4
 8018724:	b003      	add	sp, #12
 8018726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801872a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801872e:	e7d6      	b.n	80186de <__d2b+0x2e>
 8018730:	6161      	str	r1, [r4, #20]
 8018732:	e7e7      	b.n	8018704 <__d2b+0x54>
 8018734:	a801      	add	r0, sp, #4
 8018736:	f7ff fcf1 	bl	801811c <__lo0bits>
 801873a:	9b01      	ldr	r3, [sp, #4]
 801873c:	6163      	str	r3, [r4, #20]
 801873e:	3020      	adds	r0, #32
 8018740:	2201      	movs	r2, #1
 8018742:	e7e5      	b.n	8018710 <__d2b+0x60>
 8018744:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018748:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801874c:	6038      	str	r0, [r7, #0]
 801874e:	6918      	ldr	r0, [r3, #16]
 8018750:	f7ff fcc4 	bl	80180dc <__hi0bits>
 8018754:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018758:	e7e2      	b.n	8018720 <__d2b+0x70>
 801875a:	bf00      	nop
 801875c:	0801cf94 	.word	0x0801cf94
 8018760:	0801d005 	.word	0x0801d005

08018764 <__ratio>:
 8018764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018768:	4688      	mov	r8, r1
 801876a:	4669      	mov	r1, sp
 801876c:	4681      	mov	r9, r0
 801876e:	f7ff ff55 	bl	801861c <__b2d>
 8018772:	a901      	add	r1, sp, #4
 8018774:	4640      	mov	r0, r8
 8018776:	ec55 4b10 	vmov	r4, r5, d0
 801877a:	f7ff ff4f 	bl	801861c <__b2d>
 801877e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018782:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018786:	eba3 0c02 	sub.w	ip, r3, r2
 801878a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801878e:	1a9b      	subs	r3, r3, r2
 8018790:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018794:	ec51 0b10 	vmov	r0, r1, d0
 8018798:	2b00      	cmp	r3, #0
 801879a:	bfd6      	itet	le
 801879c:	460a      	movle	r2, r1
 801879e:	462a      	movgt	r2, r5
 80187a0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80187a4:	468b      	mov	fp, r1
 80187a6:	462f      	mov	r7, r5
 80187a8:	bfd4      	ite	le
 80187aa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80187ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80187b2:	4620      	mov	r0, r4
 80187b4:	ee10 2a10 	vmov	r2, s0
 80187b8:	465b      	mov	r3, fp
 80187ba:	4639      	mov	r1, r7
 80187bc:	f7e8 f846 	bl	800084c <__aeabi_ddiv>
 80187c0:	ec41 0b10 	vmov	d0, r0, r1
 80187c4:	b003      	add	sp, #12
 80187c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080187ca <__copybits>:
 80187ca:	3901      	subs	r1, #1
 80187cc:	b570      	push	{r4, r5, r6, lr}
 80187ce:	1149      	asrs	r1, r1, #5
 80187d0:	6914      	ldr	r4, [r2, #16]
 80187d2:	3101      	adds	r1, #1
 80187d4:	f102 0314 	add.w	r3, r2, #20
 80187d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80187dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80187e0:	1f05      	subs	r5, r0, #4
 80187e2:	42a3      	cmp	r3, r4
 80187e4:	d30c      	bcc.n	8018800 <__copybits+0x36>
 80187e6:	1aa3      	subs	r3, r4, r2
 80187e8:	3b11      	subs	r3, #17
 80187ea:	f023 0303 	bic.w	r3, r3, #3
 80187ee:	3211      	adds	r2, #17
 80187f0:	42a2      	cmp	r2, r4
 80187f2:	bf88      	it	hi
 80187f4:	2300      	movhi	r3, #0
 80187f6:	4418      	add	r0, r3
 80187f8:	2300      	movs	r3, #0
 80187fa:	4288      	cmp	r0, r1
 80187fc:	d305      	bcc.n	801880a <__copybits+0x40>
 80187fe:	bd70      	pop	{r4, r5, r6, pc}
 8018800:	f853 6b04 	ldr.w	r6, [r3], #4
 8018804:	f845 6f04 	str.w	r6, [r5, #4]!
 8018808:	e7eb      	b.n	80187e2 <__copybits+0x18>
 801880a:	f840 3b04 	str.w	r3, [r0], #4
 801880e:	e7f4      	b.n	80187fa <__copybits+0x30>

08018810 <__any_on>:
 8018810:	f100 0214 	add.w	r2, r0, #20
 8018814:	6900      	ldr	r0, [r0, #16]
 8018816:	114b      	asrs	r3, r1, #5
 8018818:	4298      	cmp	r0, r3
 801881a:	b510      	push	{r4, lr}
 801881c:	db11      	blt.n	8018842 <__any_on+0x32>
 801881e:	dd0a      	ble.n	8018836 <__any_on+0x26>
 8018820:	f011 011f 	ands.w	r1, r1, #31
 8018824:	d007      	beq.n	8018836 <__any_on+0x26>
 8018826:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801882a:	fa24 f001 	lsr.w	r0, r4, r1
 801882e:	fa00 f101 	lsl.w	r1, r0, r1
 8018832:	428c      	cmp	r4, r1
 8018834:	d10b      	bne.n	801884e <__any_on+0x3e>
 8018836:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801883a:	4293      	cmp	r3, r2
 801883c:	d803      	bhi.n	8018846 <__any_on+0x36>
 801883e:	2000      	movs	r0, #0
 8018840:	bd10      	pop	{r4, pc}
 8018842:	4603      	mov	r3, r0
 8018844:	e7f7      	b.n	8018836 <__any_on+0x26>
 8018846:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801884a:	2900      	cmp	r1, #0
 801884c:	d0f5      	beq.n	801883a <__any_on+0x2a>
 801884e:	2001      	movs	r0, #1
 8018850:	e7f6      	b.n	8018840 <__any_on+0x30>

08018852 <__ascii_wctomb>:
 8018852:	b149      	cbz	r1, 8018868 <__ascii_wctomb+0x16>
 8018854:	2aff      	cmp	r2, #255	; 0xff
 8018856:	bf85      	ittet	hi
 8018858:	238a      	movhi	r3, #138	; 0x8a
 801885a:	6003      	strhi	r3, [r0, #0]
 801885c:	700a      	strbls	r2, [r1, #0]
 801885e:	f04f 30ff 	movhi.w	r0, #4294967295
 8018862:	bf98      	it	ls
 8018864:	2001      	movls	r0, #1
 8018866:	4770      	bx	lr
 8018868:	4608      	mov	r0, r1
 801886a:	4770      	bx	lr

0801886c <__ssputs_r>:
 801886c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018870:	688e      	ldr	r6, [r1, #8]
 8018872:	461f      	mov	r7, r3
 8018874:	42be      	cmp	r6, r7
 8018876:	680b      	ldr	r3, [r1, #0]
 8018878:	4682      	mov	sl, r0
 801887a:	460c      	mov	r4, r1
 801887c:	4690      	mov	r8, r2
 801887e:	d82c      	bhi.n	80188da <__ssputs_r+0x6e>
 8018880:	898a      	ldrh	r2, [r1, #12]
 8018882:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018886:	d026      	beq.n	80188d6 <__ssputs_r+0x6a>
 8018888:	6965      	ldr	r5, [r4, #20]
 801888a:	6909      	ldr	r1, [r1, #16]
 801888c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018890:	eba3 0901 	sub.w	r9, r3, r1
 8018894:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018898:	1c7b      	adds	r3, r7, #1
 801889a:	444b      	add	r3, r9
 801889c:	106d      	asrs	r5, r5, #1
 801889e:	429d      	cmp	r5, r3
 80188a0:	bf38      	it	cc
 80188a2:	461d      	movcc	r5, r3
 80188a4:	0553      	lsls	r3, r2, #21
 80188a6:	d527      	bpl.n	80188f8 <__ssputs_r+0x8c>
 80188a8:	4629      	mov	r1, r5
 80188aa:	f7fc f83d 	bl	8014928 <_malloc_r>
 80188ae:	4606      	mov	r6, r0
 80188b0:	b360      	cbz	r0, 801890c <__ssputs_r+0xa0>
 80188b2:	6921      	ldr	r1, [r4, #16]
 80188b4:	464a      	mov	r2, r9
 80188b6:	f7fe f8b4 	bl	8016a22 <memcpy>
 80188ba:	89a3      	ldrh	r3, [r4, #12]
 80188bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80188c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80188c4:	81a3      	strh	r3, [r4, #12]
 80188c6:	6126      	str	r6, [r4, #16]
 80188c8:	6165      	str	r5, [r4, #20]
 80188ca:	444e      	add	r6, r9
 80188cc:	eba5 0509 	sub.w	r5, r5, r9
 80188d0:	6026      	str	r6, [r4, #0]
 80188d2:	60a5      	str	r5, [r4, #8]
 80188d4:	463e      	mov	r6, r7
 80188d6:	42be      	cmp	r6, r7
 80188d8:	d900      	bls.n	80188dc <__ssputs_r+0x70>
 80188da:	463e      	mov	r6, r7
 80188dc:	6820      	ldr	r0, [r4, #0]
 80188de:	4632      	mov	r2, r6
 80188e0:	4641      	mov	r1, r8
 80188e2:	f000 f9db 	bl	8018c9c <memmove>
 80188e6:	68a3      	ldr	r3, [r4, #8]
 80188e8:	1b9b      	subs	r3, r3, r6
 80188ea:	60a3      	str	r3, [r4, #8]
 80188ec:	6823      	ldr	r3, [r4, #0]
 80188ee:	4433      	add	r3, r6
 80188f0:	6023      	str	r3, [r4, #0]
 80188f2:	2000      	movs	r0, #0
 80188f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188f8:	462a      	mov	r2, r5
 80188fa:	f000 fa06 	bl	8018d0a <_realloc_r>
 80188fe:	4606      	mov	r6, r0
 8018900:	2800      	cmp	r0, #0
 8018902:	d1e0      	bne.n	80188c6 <__ssputs_r+0x5a>
 8018904:	6921      	ldr	r1, [r4, #16]
 8018906:	4650      	mov	r0, sl
 8018908:	f7fe ff40 	bl	801778c <_free_r>
 801890c:	230c      	movs	r3, #12
 801890e:	f8ca 3000 	str.w	r3, [sl]
 8018912:	89a3      	ldrh	r3, [r4, #12]
 8018914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018918:	81a3      	strh	r3, [r4, #12]
 801891a:	f04f 30ff 	mov.w	r0, #4294967295
 801891e:	e7e9      	b.n	80188f4 <__ssputs_r+0x88>

08018920 <_svfiprintf_r>:
 8018920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018924:	4698      	mov	r8, r3
 8018926:	898b      	ldrh	r3, [r1, #12]
 8018928:	061b      	lsls	r3, r3, #24
 801892a:	b09d      	sub	sp, #116	; 0x74
 801892c:	4607      	mov	r7, r0
 801892e:	460d      	mov	r5, r1
 8018930:	4614      	mov	r4, r2
 8018932:	d50e      	bpl.n	8018952 <_svfiprintf_r+0x32>
 8018934:	690b      	ldr	r3, [r1, #16]
 8018936:	b963      	cbnz	r3, 8018952 <_svfiprintf_r+0x32>
 8018938:	2140      	movs	r1, #64	; 0x40
 801893a:	f7fb fff5 	bl	8014928 <_malloc_r>
 801893e:	6028      	str	r0, [r5, #0]
 8018940:	6128      	str	r0, [r5, #16]
 8018942:	b920      	cbnz	r0, 801894e <_svfiprintf_r+0x2e>
 8018944:	230c      	movs	r3, #12
 8018946:	603b      	str	r3, [r7, #0]
 8018948:	f04f 30ff 	mov.w	r0, #4294967295
 801894c:	e0d0      	b.n	8018af0 <_svfiprintf_r+0x1d0>
 801894e:	2340      	movs	r3, #64	; 0x40
 8018950:	616b      	str	r3, [r5, #20]
 8018952:	2300      	movs	r3, #0
 8018954:	9309      	str	r3, [sp, #36]	; 0x24
 8018956:	2320      	movs	r3, #32
 8018958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801895c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018960:	2330      	movs	r3, #48	; 0x30
 8018962:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018b08 <_svfiprintf_r+0x1e8>
 8018966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801896a:	f04f 0901 	mov.w	r9, #1
 801896e:	4623      	mov	r3, r4
 8018970:	469a      	mov	sl, r3
 8018972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018976:	b10a      	cbz	r2, 801897c <_svfiprintf_r+0x5c>
 8018978:	2a25      	cmp	r2, #37	; 0x25
 801897a:	d1f9      	bne.n	8018970 <_svfiprintf_r+0x50>
 801897c:	ebba 0b04 	subs.w	fp, sl, r4
 8018980:	d00b      	beq.n	801899a <_svfiprintf_r+0x7a>
 8018982:	465b      	mov	r3, fp
 8018984:	4622      	mov	r2, r4
 8018986:	4629      	mov	r1, r5
 8018988:	4638      	mov	r0, r7
 801898a:	f7ff ff6f 	bl	801886c <__ssputs_r>
 801898e:	3001      	adds	r0, #1
 8018990:	f000 80a9 	beq.w	8018ae6 <_svfiprintf_r+0x1c6>
 8018994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018996:	445a      	add	r2, fp
 8018998:	9209      	str	r2, [sp, #36]	; 0x24
 801899a:	f89a 3000 	ldrb.w	r3, [sl]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	f000 80a1 	beq.w	8018ae6 <_svfiprintf_r+0x1c6>
 80189a4:	2300      	movs	r3, #0
 80189a6:	f04f 32ff 	mov.w	r2, #4294967295
 80189aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80189ae:	f10a 0a01 	add.w	sl, sl, #1
 80189b2:	9304      	str	r3, [sp, #16]
 80189b4:	9307      	str	r3, [sp, #28]
 80189b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80189ba:	931a      	str	r3, [sp, #104]	; 0x68
 80189bc:	4654      	mov	r4, sl
 80189be:	2205      	movs	r2, #5
 80189c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189c4:	4850      	ldr	r0, [pc, #320]	; (8018b08 <_svfiprintf_r+0x1e8>)
 80189c6:	f7e7 fc03 	bl	80001d0 <memchr>
 80189ca:	9a04      	ldr	r2, [sp, #16]
 80189cc:	b9d8      	cbnz	r0, 8018a06 <_svfiprintf_r+0xe6>
 80189ce:	06d0      	lsls	r0, r2, #27
 80189d0:	bf44      	itt	mi
 80189d2:	2320      	movmi	r3, #32
 80189d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80189d8:	0711      	lsls	r1, r2, #28
 80189da:	bf44      	itt	mi
 80189dc:	232b      	movmi	r3, #43	; 0x2b
 80189de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80189e2:	f89a 3000 	ldrb.w	r3, [sl]
 80189e6:	2b2a      	cmp	r3, #42	; 0x2a
 80189e8:	d015      	beq.n	8018a16 <_svfiprintf_r+0xf6>
 80189ea:	9a07      	ldr	r2, [sp, #28]
 80189ec:	4654      	mov	r4, sl
 80189ee:	2000      	movs	r0, #0
 80189f0:	f04f 0c0a 	mov.w	ip, #10
 80189f4:	4621      	mov	r1, r4
 80189f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80189fa:	3b30      	subs	r3, #48	; 0x30
 80189fc:	2b09      	cmp	r3, #9
 80189fe:	d94d      	bls.n	8018a9c <_svfiprintf_r+0x17c>
 8018a00:	b1b0      	cbz	r0, 8018a30 <_svfiprintf_r+0x110>
 8018a02:	9207      	str	r2, [sp, #28]
 8018a04:	e014      	b.n	8018a30 <_svfiprintf_r+0x110>
 8018a06:	eba0 0308 	sub.w	r3, r0, r8
 8018a0a:	fa09 f303 	lsl.w	r3, r9, r3
 8018a0e:	4313      	orrs	r3, r2
 8018a10:	9304      	str	r3, [sp, #16]
 8018a12:	46a2      	mov	sl, r4
 8018a14:	e7d2      	b.n	80189bc <_svfiprintf_r+0x9c>
 8018a16:	9b03      	ldr	r3, [sp, #12]
 8018a18:	1d19      	adds	r1, r3, #4
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	9103      	str	r1, [sp, #12]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	bfbb      	ittet	lt
 8018a22:	425b      	neglt	r3, r3
 8018a24:	f042 0202 	orrlt.w	r2, r2, #2
 8018a28:	9307      	strge	r3, [sp, #28]
 8018a2a:	9307      	strlt	r3, [sp, #28]
 8018a2c:	bfb8      	it	lt
 8018a2e:	9204      	strlt	r2, [sp, #16]
 8018a30:	7823      	ldrb	r3, [r4, #0]
 8018a32:	2b2e      	cmp	r3, #46	; 0x2e
 8018a34:	d10c      	bne.n	8018a50 <_svfiprintf_r+0x130>
 8018a36:	7863      	ldrb	r3, [r4, #1]
 8018a38:	2b2a      	cmp	r3, #42	; 0x2a
 8018a3a:	d134      	bne.n	8018aa6 <_svfiprintf_r+0x186>
 8018a3c:	9b03      	ldr	r3, [sp, #12]
 8018a3e:	1d1a      	adds	r2, r3, #4
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	9203      	str	r2, [sp, #12]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	bfb8      	it	lt
 8018a48:	f04f 33ff 	movlt.w	r3, #4294967295
 8018a4c:	3402      	adds	r4, #2
 8018a4e:	9305      	str	r3, [sp, #20]
 8018a50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018b18 <_svfiprintf_r+0x1f8>
 8018a54:	7821      	ldrb	r1, [r4, #0]
 8018a56:	2203      	movs	r2, #3
 8018a58:	4650      	mov	r0, sl
 8018a5a:	f7e7 fbb9 	bl	80001d0 <memchr>
 8018a5e:	b138      	cbz	r0, 8018a70 <_svfiprintf_r+0x150>
 8018a60:	9b04      	ldr	r3, [sp, #16]
 8018a62:	eba0 000a 	sub.w	r0, r0, sl
 8018a66:	2240      	movs	r2, #64	; 0x40
 8018a68:	4082      	lsls	r2, r0
 8018a6a:	4313      	orrs	r3, r2
 8018a6c:	3401      	adds	r4, #1
 8018a6e:	9304      	str	r3, [sp, #16]
 8018a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a74:	4825      	ldr	r0, [pc, #148]	; (8018b0c <_svfiprintf_r+0x1ec>)
 8018a76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018a7a:	2206      	movs	r2, #6
 8018a7c:	f7e7 fba8 	bl	80001d0 <memchr>
 8018a80:	2800      	cmp	r0, #0
 8018a82:	d038      	beq.n	8018af6 <_svfiprintf_r+0x1d6>
 8018a84:	4b22      	ldr	r3, [pc, #136]	; (8018b10 <_svfiprintf_r+0x1f0>)
 8018a86:	bb1b      	cbnz	r3, 8018ad0 <_svfiprintf_r+0x1b0>
 8018a88:	9b03      	ldr	r3, [sp, #12]
 8018a8a:	3307      	adds	r3, #7
 8018a8c:	f023 0307 	bic.w	r3, r3, #7
 8018a90:	3308      	adds	r3, #8
 8018a92:	9303      	str	r3, [sp, #12]
 8018a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a96:	4433      	add	r3, r6
 8018a98:	9309      	str	r3, [sp, #36]	; 0x24
 8018a9a:	e768      	b.n	801896e <_svfiprintf_r+0x4e>
 8018a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018aa0:	460c      	mov	r4, r1
 8018aa2:	2001      	movs	r0, #1
 8018aa4:	e7a6      	b.n	80189f4 <_svfiprintf_r+0xd4>
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	3401      	adds	r4, #1
 8018aaa:	9305      	str	r3, [sp, #20]
 8018aac:	4619      	mov	r1, r3
 8018aae:	f04f 0c0a 	mov.w	ip, #10
 8018ab2:	4620      	mov	r0, r4
 8018ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ab8:	3a30      	subs	r2, #48	; 0x30
 8018aba:	2a09      	cmp	r2, #9
 8018abc:	d903      	bls.n	8018ac6 <_svfiprintf_r+0x1a6>
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d0c6      	beq.n	8018a50 <_svfiprintf_r+0x130>
 8018ac2:	9105      	str	r1, [sp, #20]
 8018ac4:	e7c4      	b.n	8018a50 <_svfiprintf_r+0x130>
 8018ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8018aca:	4604      	mov	r4, r0
 8018acc:	2301      	movs	r3, #1
 8018ace:	e7f0      	b.n	8018ab2 <_svfiprintf_r+0x192>
 8018ad0:	ab03      	add	r3, sp, #12
 8018ad2:	9300      	str	r3, [sp, #0]
 8018ad4:	462a      	mov	r2, r5
 8018ad6:	4b0f      	ldr	r3, [pc, #60]	; (8018b14 <_svfiprintf_r+0x1f4>)
 8018ad8:	a904      	add	r1, sp, #16
 8018ada:	4638      	mov	r0, r7
 8018adc:	f7fc ff56 	bl	801598c <_printf_float>
 8018ae0:	1c42      	adds	r2, r0, #1
 8018ae2:	4606      	mov	r6, r0
 8018ae4:	d1d6      	bne.n	8018a94 <_svfiprintf_r+0x174>
 8018ae6:	89ab      	ldrh	r3, [r5, #12]
 8018ae8:	065b      	lsls	r3, r3, #25
 8018aea:	f53f af2d 	bmi.w	8018948 <_svfiprintf_r+0x28>
 8018aee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018af0:	b01d      	add	sp, #116	; 0x74
 8018af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018af6:	ab03      	add	r3, sp, #12
 8018af8:	9300      	str	r3, [sp, #0]
 8018afa:	462a      	mov	r2, r5
 8018afc:	4b05      	ldr	r3, [pc, #20]	; (8018b14 <_svfiprintf_r+0x1f4>)
 8018afe:	a904      	add	r1, sp, #16
 8018b00:	4638      	mov	r0, r7
 8018b02:	f7fd f9e7 	bl	8015ed4 <_printf_i>
 8018b06:	e7eb      	b.n	8018ae0 <_svfiprintf_r+0x1c0>
 8018b08:	0801d15c 	.word	0x0801d15c
 8018b0c:	0801d166 	.word	0x0801d166
 8018b10:	0801598d 	.word	0x0801598d
 8018b14:	0801886d 	.word	0x0801886d
 8018b18:	0801d162 	.word	0x0801d162

08018b1c <__sflush_r>:
 8018b1c:	898a      	ldrh	r2, [r1, #12]
 8018b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b22:	4605      	mov	r5, r0
 8018b24:	0710      	lsls	r0, r2, #28
 8018b26:	460c      	mov	r4, r1
 8018b28:	d458      	bmi.n	8018bdc <__sflush_r+0xc0>
 8018b2a:	684b      	ldr	r3, [r1, #4]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	dc05      	bgt.n	8018b3c <__sflush_r+0x20>
 8018b30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	dc02      	bgt.n	8018b3c <__sflush_r+0x20>
 8018b36:	2000      	movs	r0, #0
 8018b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b3e:	2e00      	cmp	r6, #0
 8018b40:	d0f9      	beq.n	8018b36 <__sflush_r+0x1a>
 8018b42:	2300      	movs	r3, #0
 8018b44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018b48:	682f      	ldr	r7, [r5, #0]
 8018b4a:	6a21      	ldr	r1, [r4, #32]
 8018b4c:	602b      	str	r3, [r5, #0]
 8018b4e:	d032      	beq.n	8018bb6 <__sflush_r+0x9a>
 8018b50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018b52:	89a3      	ldrh	r3, [r4, #12]
 8018b54:	075a      	lsls	r2, r3, #29
 8018b56:	d505      	bpl.n	8018b64 <__sflush_r+0x48>
 8018b58:	6863      	ldr	r3, [r4, #4]
 8018b5a:	1ac0      	subs	r0, r0, r3
 8018b5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018b5e:	b10b      	cbz	r3, 8018b64 <__sflush_r+0x48>
 8018b60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b62:	1ac0      	subs	r0, r0, r3
 8018b64:	2300      	movs	r3, #0
 8018b66:	4602      	mov	r2, r0
 8018b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018b6a:	6a21      	ldr	r1, [r4, #32]
 8018b6c:	4628      	mov	r0, r5
 8018b6e:	47b0      	blx	r6
 8018b70:	1c43      	adds	r3, r0, #1
 8018b72:	89a3      	ldrh	r3, [r4, #12]
 8018b74:	d106      	bne.n	8018b84 <__sflush_r+0x68>
 8018b76:	6829      	ldr	r1, [r5, #0]
 8018b78:	291d      	cmp	r1, #29
 8018b7a:	d82b      	bhi.n	8018bd4 <__sflush_r+0xb8>
 8018b7c:	4a29      	ldr	r2, [pc, #164]	; (8018c24 <__sflush_r+0x108>)
 8018b7e:	410a      	asrs	r2, r1
 8018b80:	07d6      	lsls	r6, r2, #31
 8018b82:	d427      	bmi.n	8018bd4 <__sflush_r+0xb8>
 8018b84:	2200      	movs	r2, #0
 8018b86:	6062      	str	r2, [r4, #4]
 8018b88:	04d9      	lsls	r1, r3, #19
 8018b8a:	6922      	ldr	r2, [r4, #16]
 8018b8c:	6022      	str	r2, [r4, #0]
 8018b8e:	d504      	bpl.n	8018b9a <__sflush_r+0x7e>
 8018b90:	1c42      	adds	r2, r0, #1
 8018b92:	d101      	bne.n	8018b98 <__sflush_r+0x7c>
 8018b94:	682b      	ldr	r3, [r5, #0]
 8018b96:	b903      	cbnz	r3, 8018b9a <__sflush_r+0x7e>
 8018b98:	6560      	str	r0, [r4, #84]	; 0x54
 8018b9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b9c:	602f      	str	r7, [r5, #0]
 8018b9e:	2900      	cmp	r1, #0
 8018ba0:	d0c9      	beq.n	8018b36 <__sflush_r+0x1a>
 8018ba2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ba6:	4299      	cmp	r1, r3
 8018ba8:	d002      	beq.n	8018bb0 <__sflush_r+0x94>
 8018baa:	4628      	mov	r0, r5
 8018bac:	f7fe fdee 	bl	801778c <_free_r>
 8018bb0:	2000      	movs	r0, #0
 8018bb2:	6360      	str	r0, [r4, #52]	; 0x34
 8018bb4:	e7c0      	b.n	8018b38 <__sflush_r+0x1c>
 8018bb6:	2301      	movs	r3, #1
 8018bb8:	4628      	mov	r0, r5
 8018bba:	47b0      	blx	r6
 8018bbc:	1c41      	adds	r1, r0, #1
 8018bbe:	d1c8      	bne.n	8018b52 <__sflush_r+0x36>
 8018bc0:	682b      	ldr	r3, [r5, #0]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d0c5      	beq.n	8018b52 <__sflush_r+0x36>
 8018bc6:	2b1d      	cmp	r3, #29
 8018bc8:	d001      	beq.n	8018bce <__sflush_r+0xb2>
 8018bca:	2b16      	cmp	r3, #22
 8018bcc:	d101      	bne.n	8018bd2 <__sflush_r+0xb6>
 8018bce:	602f      	str	r7, [r5, #0]
 8018bd0:	e7b1      	b.n	8018b36 <__sflush_r+0x1a>
 8018bd2:	89a3      	ldrh	r3, [r4, #12]
 8018bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018bd8:	81a3      	strh	r3, [r4, #12]
 8018bda:	e7ad      	b.n	8018b38 <__sflush_r+0x1c>
 8018bdc:	690f      	ldr	r7, [r1, #16]
 8018bde:	2f00      	cmp	r7, #0
 8018be0:	d0a9      	beq.n	8018b36 <__sflush_r+0x1a>
 8018be2:	0793      	lsls	r3, r2, #30
 8018be4:	680e      	ldr	r6, [r1, #0]
 8018be6:	bf08      	it	eq
 8018be8:	694b      	ldreq	r3, [r1, #20]
 8018bea:	600f      	str	r7, [r1, #0]
 8018bec:	bf18      	it	ne
 8018bee:	2300      	movne	r3, #0
 8018bf0:	eba6 0807 	sub.w	r8, r6, r7
 8018bf4:	608b      	str	r3, [r1, #8]
 8018bf6:	f1b8 0f00 	cmp.w	r8, #0
 8018bfa:	dd9c      	ble.n	8018b36 <__sflush_r+0x1a>
 8018bfc:	6a21      	ldr	r1, [r4, #32]
 8018bfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018c00:	4643      	mov	r3, r8
 8018c02:	463a      	mov	r2, r7
 8018c04:	4628      	mov	r0, r5
 8018c06:	47b0      	blx	r6
 8018c08:	2800      	cmp	r0, #0
 8018c0a:	dc06      	bgt.n	8018c1a <__sflush_r+0xfe>
 8018c0c:	89a3      	ldrh	r3, [r4, #12]
 8018c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c12:	81a3      	strh	r3, [r4, #12]
 8018c14:	f04f 30ff 	mov.w	r0, #4294967295
 8018c18:	e78e      	b.n	8018b38 <__sflush_r+0x1c>
 8018c1a:	4407      	add	r7, r0
 8018c1c:	eba8 0800 	sub.w	r8, r8, r0
 8018c20:	e7e9      	b.n	8018bf6 <__sflush_r+0xda>
 8018c22:	bf00      	nop
 8018c24:	dfbffffe 	.word	0xdfbffffe

08018c28 <_fflush_r>:
 8018c28:	b538      	push	{r3, r4, r5, lr}
 8018c2a:	690b      	ldr	r3, [r1, #16]
 8018c2c:	4605      	mov	r5, r0
 8018c2e:	460c      	mov	r4, r1
 8018c30:	b913      	cbnz	r3, 8018c38 <_fflush_r+0x10>
 8018c32:	2500      	movs	r5, #0
 8018c34:	4628      	mov	r0, r5
 8018c36:	bd38      	pop	{r3, r4, r5, pc}
 8018c38:	b118      	cbz	r0, 8018c42 <_fflush_r+0x1a>
 8018c3a:	6a03      	ldr	r3, [r0, #32]
 8018c3c:	b90b      	cbnz	r3, 8018c42 <_fflush_r+0x1a>
 8018c3e:	f7fd fd07 	bl	8016650 <__sinit>
 8018c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d0f3      	beq.n	8018c32 <_fflush_r+0xa>
 8018c4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018c4c:	07d0      	lsls	r0, r2, #31
 8018c4e:	d404      	bmi.n	8018c5a <_fflush_r+0x32>
 8018c50:	0599      	lsls	r1, r3, #22
 8018c52:	d402      	bmi.n	8018c5a <_fflush_r+0x32>
 8018c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c56:	f7fd feda 	bl	8016a0e <__retarget_lock_acquire_recursive>
 8018c5a:	4628      	mov	r0, r5
 8018c5c:	4621      	mov	r1, r4
 8018c5e:	f7ff ff5d 	bl	8018b1c <__sflush_r>
 8018c62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018c64:	07da      	lsls	r2, r3, #31
 8018c66:	4605      	mov	r5, r0
 8018c68:	d4e4      	bmi.n	8018c34 <_fflush_r+0xc>
 8018c6a:	89a3      	ldrh	r3, [r4, #12]
 8018c6c:	059b      	lsls	r3, r3, #22
 8018c6e:	d4e1      	bmi.n	8018c34 <_fflush_r+0xc>
 8018c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018c72:	f7fd fecd 	bl	8016a10 <__retarget_lock_release_recursive>
 8018c76:	e7dd      	b.n	8018c34 <_fflush_r+0xc>

08018c78 <fiprintf>:
 8018c78:	b40e      	push	{r1, r2, r3}
 8018c7a:	b503      	push	{r0, r1, lr}
 8018c7c:	4601      	mov	r1, r0
 8018c7e:	ab03      	add	r3, sp, #12
 8018c80:	4805      	ldr	r0, [pc, #20]	; (8018c98 <fiprintf+0x20>)
 8018c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c86:	6800      	ldr	r0, [r0, #0]
 8018c88:	9301      	str	r3, [sp, #4]
 8018c8a:	f000 f897 	bl	8018dbc <_vfiprintf_r>
 8018c8e:	b002      	add	sp, #8
 8018c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8018c94:	b003      	add	sp, #12
 8018c96:	4770      	bx	lr
 8018c98:	200002f4 	.word	0x200002f4

08018c9c <memmove>:
 8018c9c:	4288      	cmp	r0, r1
 8018c9e:	b510      	push	{r4, lr}
 8018ca0:	eb01 0402 	add.w	r4, r1, r2
 8018ca4:	d902      	bls.n	8018cac <memmove+0x10>
 8018ca6:	4284      	cmp	r4, r0
 8018ca8:	4623      	mov	r3, r4
 8018caa:	d807      	bhi.n	8018cbc <memmove+0x20>
 8018cac:	1e43      	subs	r3, r0, #1
 8018cae:	42a1      	cmp	r1, r4
 8018cb0:	d008      	beq.n	8018cc4 <memmove+0x28>
 8018cb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018cb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018cba:	e7f8      	b.n	8018cae <memmove+0x12>
 8018cbc:	4402      	add	r2, r0
 8018cbe:	4601      	mov	r1, r0
 8018cc0:	428a      	cmp	r2, r1
 8018cc2:	d100      	bne.n	8018cc6 <memmove+0x2a>
 8018cc4:	bd10      	pop	{r4, pc}
 8018cc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018cca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018cce:	e7f7      	b.n	8018cc0 <memmove+0x24>

08018cd0 <abort>:
 8018cd0:	b508      	push	{r3, lr}
 8018cd2:	2006      	movs	r0, #6
 8018cd4:	f000 fa4a 	bl	801916c <raise>
 8018cd8:	2001      	movs	r0, #1
 8018cda:	f7ec fd3b 	bl	8005754 <_exit>

08018cde <_calloc_r>:
 8018cde:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018ce0:	fba1 2402 	umull	r2, r4, r1, r2
 8018ce4:	b94c      	cbnz	r4, 8018cfa <_calloc_r+0x1c>
 8018ce6:	4611      	mov	r1, r2
 8018ce8:	9201      	str	r2, [sp, #4]
 8018cea:	f7fb fe1d 	bl	8014928 <_malloc_r>
 8018cee:	9a01      	ldr	r2, [sp, #4]
 8018cf0:	4605      	mov	r5, r0
 8018cf2:	b930      	cbnz	r0, 8018d02 <_calloc_r+0x24>
 8018cf4:	4628      	mov	r0, r5
 8018cf6:	b003      	add	sp, #12
 8018cf8:	bd30      	pop	{r4, r5, pc}
 8018cfa:	220c      	movs	r2, #12
 8018cfc:	6002      	str	r2, [r0, #0]
 8018cfe:	2500      	movs	r5, #0
 8018d00:	e7f8      	b.n	8018cf4 <_calloc_r+0x16>
 8018d02:	4621      	mov	r1, r4
 8018d04:	f7fd fd71 	bl	80167ea <memset>
 8018d08:	e7f4      	b.n	8018cf4 <_calloc_r+0x16>

08018d0a <_realloc_r>:
 8018d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d0e:	4680      	mov	r8, r0
 8018d10:	4614      	mov	r4, r2
 8018d12:	460e      	mov	r6, r1
 8018d14:	b921      	cbnz	r1, 8018d20 <_realloc_r+0x16>
 8018d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d1a:	4611      	mov	r1, r2
 8018d1c:	f7fb be04 	b.w	8014928 <_malloc_r>
 8018d20:	b92a      	cbnz	r2, 8018d2e <_realloc_r+0x24>
 8018d22:	f7fe fd33 	bl	801778c <_free_r>
 8018d26:	4625      	mov	r5, r4
 8018d28:	4628      	mov	r0, r5
 8018d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d2e:	f000 fa39 	bl	80191a4 <_malloc_usable_size_r>
 8018d32:	4284      	cmp	r4, r0
 8018d34:	4607      	mov	r7, r0
 8018d36:	d802      	bhi.n	8018d3e <_realloc_r+0x34>
 8018d38:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018d3c:	d812      	bhi.n	8018d64 <_realloc_r+0x5a>
 8018d3e:	4621      	mov	r1, r4
 8018d40:	4640      	mov	r0, r8
 8018d42:	f7fb fdf1 	bl	8014928 <_malloc_r>
 8018d46:	4605      	mov	r5, r0
 8018d48:	2800      	cmp	r0, #0
 8018d4a:	d0ed      	beq.n	8018d28 <_realloc_r+0x1e>
 8018d4c:	42bc      	cmp	r4, r7
 8018d4e:	4622      	mov	r2, r4
 8018d50:	4631      	mov	r1, r6
 8018d52:	bf28      	it	cs
 8018d54:	463a      	movcs	r2, r7
 8018d56:	f7fd fe64 	bl	8016a22 <memcpy>
 8018d5a:	4631      	mov	r1, r6
 8018d5c:	4640      	mov	r0, r8
 8018d5e:	f7fe fd15 	bl	801778c <_free_r>
 8018d62:	e7e1      	b.n	8018d28 <_realloc_r+0x1e>
 8018d64:	4635      	mov	r5, r6
 8018d66:	e7df      	b.n	8018d28 <_realloc_r+0x1e>

08018d68 <__sfputc_r>:
 8018d68:	6893      	ldr	r3, [r2, #8]
 8018d6a:	3b01      	subs	r3, #1
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	b410      	push	{r4}
 8018d70:	6093      	str	r3, [r2, #8]
 8018d72:	da08      	bge.n	8018d86 <__sfputc_r+0x1e>
 8018d74:	6994      	ldr	r4, [r2, #24]
 8018d76:	42a3      	cmp	r3, r4
 8018d78:	db01      	blt.n	8018d7e <__sfputc_r+0x16>
 8018d7a:	290a      	cmp	r1, #10
 8018d7c:	d103      	bne.n	8018d86 <__sfputc_r+0x1e>
 8018d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d82:	f000 b935 	b.w	8018ff0 <__swbuf_r>
 8018d86:	6813      	ldr	r3, [r2, #0]
 8018d88:	1c58      	adds	r0, r3, #1
 8018d8a:	6010      	str	r0, [r2, #0]
 8018d8c:	7019      	strb	r1, [r3, #0]
 8018d8e:	4608      	mov	r0, r1
 8018d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d94:	4770      	bx	lr

08018d96 <__sfputs_r>:
 8018d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d98:	4606      	mov	r6, r0
 8018d9a:	460f      	mov	r7, r1
 8018d9c:	4614      	mov	r4, r2
 8018d9e:	18d5      	adds	r5, r2, r3
 8018da0:	42ac      	cmp	r4, r5
 8018da2:	d101      	bne.n	8018da8 <__sfputs_r+0x12>
 8018da4:	2000      	movs	r0, #0
 8018da6:	e007      	b.n	8018db8 <__sfputs_r+0x22>
 8018da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018dac:	463a      	mov	r2, r7
 8018dae:	4630      	mov	r0, r6
 8018db0:	f7ff ffda 	bl	8018d68 <__sfputc_r>
 8018db4:	1c43      	adds	r3, r0, #1
 8018db6:	d1f3      	bne.n	8018da0 <__sfputs_r+0xa>
 8018db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018dbc <_vfiprintf_r>:
 8018dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dc0:	460d      	mov	r5, r1
 8018dc2:	b09d      	sub	sp, #116	; 0x74
 8018dc4:	4614      	mov	r4, r2
 8018dc6:	4698      	mov	r8, r3
 8018dc8:	4606      	mov	r6, r0
 8018dca:	b118      	cbz	r0, 8018dd4 <_vfiprintf_r+0x18>
 8018dcc:	6a03      	ldr	r3, [r0, #32]
 8018dce:	b90b      	cbnz	r3, 8018dd4 <_vfiprintf_r+0x18>
 8018dd0:	f7fd fc3e 	bl	8016650 <__sinit>
 8018dd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018dd6:	07d9      	lsls	r1, r3, #31
 8018dd8:	d405      	bmi.n	8018de6 <_vfiprintf_r+0x2a>
 8018dda:	89ab      	ldrh	r3, [r5, #12]
 8018ddc:	059a      	lsls	r2, r3, #22
 8018dde:	d402      	bmi.n	8018de6 <_vfiprintf_r+0x2a>
 8018de0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018de2:	f7fd fe14 	bl	8016a0e <__retarget_lock_acquire_recursive>
 8018de6:	89ab      	ldrh	r3, [r5, #12]
 8018de8:	071b      	lsls	r3, r3, #28
 8018dea:	d501      	bpl.n	8018df0 <_vfiprintf_r+0x34>
 8018dec:	692b      	ldr	r3, [r5, #16]
 8018dee:	b99b      	cbnz	r3, 8018e18 <_vfiprintf_r+0x5c>
 8018df0:	4629      	mov	r1, r5
 8018df2:	4630      	mov	r0, r6
 8018df4:	f000 f93a 	bl	801906c <__swsetup_r>
 8018df8:	b170      	cbz	r0, 8018e18 <_vfiprintf_r+0x5c>
 8018dfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018dfc:	07dc      	lsls	r4, r3, #31
 8018dfe:	d504      	bpl.n	8018e0a <_vfiprintf_r+0x4e>
 8018e00:	f04f 30ff 	mov.w	r0, #4294967295
 8018e04:	b01d      	add	sp, #116	; 0x74
 8018e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e0a:	89ab      	ldrh	r3, [r5, #12]
 8018e0c:	0598      	lsls	r0, r3, #22
 8018e0e:	d4f7      	bmi.n	8018e00 <_vfiprintf_r+0x44>
 8018e10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018e12:	f7fd fdfd 	bl	8016a10 <__retarget_lock_release_recursive>
 8018e16:	e7f3      	b.n	8018e00 <_vfiprintf_r+0x44>
 8018e18:	2300      	movs	r3, #0
 8018e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8018e1c:	2320      	movs	r3, #32
 8018e1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8018e26:	2330      	movs	r3, #48	; 0x30
 8018e28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018fdc <_vfiprintf_r+0x220>
 8018e2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018e30:	f04f 0901 	mov.w	r9, #1
 8018e34:	4623      	mov	r3, r4
 8018e36:	469a      	mov	sl, r3
 8018e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018e3c:	b10a      	cbz	r2, 8018e42 <_vfiprintf_r+0x86>
 8018e3e:	2a25      	cmp	r2, #37	; 0x25
 8018e40:	d1f9      	bne.n	8018e36 <_vfiprintf_r+0x7a>
 8018e42:	ebba 0b04 	subs.w	fp, sl, r4
 8018e46:	d00b      	beq.n	8018e60 <_vfiprintf_r+0xa4>
 8018e48:	465b      	mov	r3, fp
 8018e4a:	4622      	mov	r2, r4
 8018e4c:	4629      	mov	r1, r5
 8018e4e:	4630      	mov	r0, r6
 8018e50:	f7ff ffa1 	bl	8018d96 <__sfputs_r>
 8018e54:	3001      	adds	r0, #1
 8018e56:	f000 80a9 	beq.w	8018fac <_vfiprintf_r+0x1f0>
 8018e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018e5c:	445a      	add	r2, fp
 8018e5e:	9209      	str	r2, [sp, #36]	; 0x24
 8018e60:	f89a 3000 	ldrb.w	r3, [sl]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	f000 80a1 	beq.w	8018fac <_vfiprintf_r+0x1f0>
 8018e6a:	2300      	movs	r3, #0
 8018e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8018e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018e74:	f10a 0a01 	add.w	sl, sl, #1
 8018e78:	9304      	str	r3, [sp, #16]
 8018e7a:	9307      	str	r3, [sp, #28]
 8018e7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018e80:	931a      	str	r3, [sp, #104]	; 0x68
 8018e82:	4654      	mov	r4, sl
 8018e84:	2205      	movs	r2, #5
 8018e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e8a:	4854      	ldr	r0, [pc, #336]	; (8018fdc <_vfiprintf_r+0x220>)
 8018e8c:	f7e7 f9a0 	bl	80001d0 <memchr>
 8018e90:	9a04      	ldr	r2, [sp, #16]
 8018e92:	b9d8      	cbnz	r0, 8018ecc <_vfiprintf_r+0x110>
 8018e94:	06d1      	lsls	r1, r2, #27
 8018e96:	bf44      	itt	mi
 8018e98:	2320      	movmi	r3, #32
 8018e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018e9e:	0713      	lsls	r3, r2, #28
 8018ea0:	bf44      	itt	mi
 8018ea2:	232b      	movmi	r3, #43	; 0x2b
 8018ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8018eac:	2b2a      	cmp	r3, #42	; 0x2a
 8018eae:	d015      	beq.n	8018edc <_vfiprintf_r+0x120>
 8018eb0:	9a07      	ldr	r2, [sp, #28]
 8018eb2:	4654      	mov	r4, sl
 8018eb4:	2000      	movs	r0, #0
 8018eb6:	f04f 0c0a 	mov.w	ip, #10
 8018eba:	4621      	mov	r1, r4
 8018ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ec0:	3b30      	subs	r3, #48	; 0x30
 8018ec2:	2b09      	cmp	r3, #9
 8018ec4:	d94d      	bls.n	8018f62 <_vfiprintf_r+0x1a6>
 8018ec6:	b1b0      	cbz	r0, 8018ef6 <_vfiprintf_r+0x13a>
 8018ec8:	9207      	str	r2, [sp, #28]
 8018eca:	e014      	b.n	8018ef6 <_vfiprintf_r+0x13a>
 8018ecc:	eba0 0308 	sub.w	r3, r0, r8
 8018ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8018ed4:	4313      	orrs	r3, r2
 8018ed6:	9304      	str	r3, [sp, #16]
 8018ed8:	46a2      	mov	sl, r4
 8018eda:	e7d2      	b.n	8018e82 <_vfiprintf_r+0xc6>
 8018edc:	9b03      	ldr	r3, [sp, #12]
 8018ede:	1d19      	adds	r1, r3, #4
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	9103      	str	r1, [sp, #12]
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	bfbb      	ittet	lt
 8018ee8:	425b      	neglt	r3, r3
 8018eea:	f042 0202 	orrlt.w	r2, r2, #2
 8018eee:	9307      	strge	r3, [sp, #28]
 8018ef0:	9307      	strlt	r3, [sp, #28]
 8018ef2:	bfb8      	it	lt
 8018ef4:	9204      	strlt	r2, [sp, #16]
 8018ef6:	7823      	ldrb	r3, [r4, #0]
 8018ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8018efa:	d10c      	bne.n	8018f16 <_vfiprintf_r+0x15a>
 8018efc:	7863      	ldrb	r3, [r4, #1]
 8018efe:	2b2a      	cmp	r3, #42	; 0x2a
 8018f00:	d134      	bne.n	8018f6c <_vfiprintf_r+0x1b0>
 8018f02:	9b03      	ldr	r3, [sp, #12]
 8018f04:	1d1a      	adds	r2, r3, #4
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	9203      	str	r2, [sp, #12]
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	bfb8      	it	lt
 8018f0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8018f12:	3402      	adds	r4, #2
 8018f14:	9305      	str	r3, [sp, #20]
 8018f16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018fec <_vfiprintf_r+0x230>
 8018f1a:	7821      	ldrb	r1, [r4, #0]
 8018f1c:	2203      	movs	r2, #3
 8018f1e:	4650      	mov	r0, sl
 8018f20:	f7e7 f956 	bl	80001d0 <memchr>
 8018f24:	b138      	cbz	r0, 8018f36 <_vfiprintf_r+0x17a>
 8018f26:	9b04      	ldr	r3, [sp, #16]
 8018f28:	eba0 000a 	sub.w	r0, r0, sl
 8018f2c:	2240      	movs	r2, #64	; 0x40
 8018f2e:	4082      	lsls	r2, r0
 8018f30:	4313      	orrs	r3, r2
 8018f32:	3401      	adds	r4, #1
 8018f34:	9304      	str	r3, [sp, #16]
 8018f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f3a:	4829      	ldr	r0, [pc, #164]	; (8018fe0 <_vfiprintf_r+0x224>)
 8018f3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018f40:	2206      	movs	r2, #6
 8018f42:	f7e7 f945 	bl	80001d0 <memchr>
 8018f46:	2800      	cmp	r0, #0
 8018f48:	d03f      	beq.n	8018fca <_vfiprintf_r+0x20e>
 8018f4a:	4b26      	ldr	r3, [pc, #152]	; (8018fe4 <_vfiprintf_r+0x228>)
 8018f4c:	bb1b      	cbnz	r3, 8018f96 <_vfiprintf_r+0x1da>
 8018f4e:	9b03      	ldr	r3, [sp, #12]
 8018f50:	3307      	adds	r3, #7
 8018f52:	f023 0307 	bic.w	r3, r3, #7
 8018f56:	3308      	adds	r3, #8
 8018f58:	9303      	str	r3, [sp, #12]
 8018f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f5c:	443b      	add	r3, r7
 8018f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8018f60:	e768      	b.n	8018e34 <_vfiprintf_r+0x78>
 8018f62:	fb0c 3202 	mla	r2, ip, r2, r3
 8018f66:	460c      	mov	r4, r1
 8018f68:	2001      	movs	r0, #1
 8018f6a:	e7a6      	b.n	8018eba <_vfiprintf_r+0xfe>
 8018f6c:	2300      	movs	r3, #0
 8018f6e:	3401      	adds	r4, #1
 8018f70:	9305      	str	r3, [sp, #20]
 8018f72:	4619      	mov	r1, r3
 8018f74:	f04f 0c0a 	mov.w	ip, #10
 8018f78:	4620      	mov	r0, r4
 8018f7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f7e:	3a30      	subs	r2, #48	; 0x30
 8018f80:	2a09      	cmp	r2, #9
 8018f82:	d903      	bls.n	8018f8c <_vfiprintf_r+0x1d0>
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d0c6      	beq.n	8018f16 <_vfiprintf_r+0x15a>
 8018f88:	9105      	str	r1, [sp, #20]
 8018f8a:	e7c4      	b.n	8018f16 <_vfiprintf_r+0x15a>
 8018f8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8018f90:	4604      	mov	r4, r0
 8018f92:	2301      	movs	r3, #1
 8018f94:	e7f0      	b.n	8018f78 <_vfiprintf_r+0x1bc>
 8018f96:	ab03      	add	r3, sp, #12
 8018f98:	9300      	str	r3, [sp, #0]
 8018f9a:	462a      	mov	r2, r5
 8018f9c:	4b12      	ldr	r3, [pc, #72]	; (8018fe8 <_vfiprintf_r+0x22c>)
 8018f9e:	a904      	add	r1, sp, #16
 8018fa0:	4630      	mov	r0, r6
 8018fa2:	f7fc fcf3 	bl	801598c <_printf_float>
 8018fa6:	4607      	mov	r7, r0
 8018fa8:	1c78      	adds	r0, r7, #1
 8018faa:	d1d6      	bne.n	8018f5a <_vfiprintf_r+0x19e>
 8018fac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018fae:	07d9      	lsls	r1, r3, #31
 8018fb0:	d405      	bmi.n	8018fbe <_vfiprintf_r+0x202>
 8018fb2:	89ab      	ldrh	r3, [r5, #12]
 8018fb4:	059a      	lsls	r2, r3, #22
 8018fb6:	d402      	bmi.n	8018fbe <_vfiprintf_r+0x202>
 8018fb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018fba:	f7fd fd29 	bl	8016a10 <__retarget_lock_release_recursive>
 8018fbe:	89ab      	ldrh	r3, [r5, #12]
 8018fc0:	065b      	lsls	r3, r3, #25
 8018fc2:	f53f af1d 	bmi.w	8018e00 <_vfiprintf_r+0x44>
 8018fc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018fc8:	e71c      	b.n	8018e04 <_vfiprintf_r+0x48>
 8018fca:	ab03      	add	r3, sp, #12
 8018fcc:	9300      	str	r3, [sp, #0]
 8018fce:	462a      	mov	r2, r5
 8018fd0:	4b05      	ldr	r3, [pc, #20]	; (8018fe8 <_vfiprintf_r+0x22c>)
 8018fd2:	a904      	add	r1, sp, #16
 8018fd4:	4630      	mov	r0, r6
 8018fd6:	f7fc ff7d 	bl	8015ed4 <_printf_i>
 8018fda:	e7e4      	b.n	8018fa6 <_vfiprintf_r+0x1ea>
 8018fdc:	0801d15c 	.word	0x0801d15c
 8018fe0:	0801d166 	.word	0x0801d166
 8018fe4:	0801598d 	.word	0x0801598d
 8018fe8:	08018d97 	.word	0x08018d97
 8018fec:	0801d162 	.word	0x0801d162

08018ff0 <__swbuf_r>:
 8018ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ff2:	460e      	mov	r6, r1
 8018ff4:	4614      	mov	r4, r2
 8018ff6:	4605      	mov	r5, r0
 8018ff8:	b118      	cbz	r0, 8019002 <__swbuf_r+0x12>
 8018ffa:	6a03      	ldr	r3, [r0, #32]
 8018ffc:	b90b      	cbnz	r3, 8019002 <__swbuf_r+0x12>
 8018ffe:	f7fd fb27 	bl	8016650 <__sinit>
 8019002:	69a3      	ldr	r3, [r4, #24]
 8019004:	60a3      	str	r3, [r4, #8]
 8019006:	89a3      	ldrh	r3, [r4, #12]
 8019008:	071a      	lsls	r2, r3, #28
 801900a:	d525      	bpl.n	8019058 <__swbuf_r+0x68>
 801900c:	6923      	ldr	r3, [r4, #16]
 801900e:	b31b      	cbz	r3, 8019058 <__swbuf_r+0x68>
 8019010:	6823      	ldr	r3, [r4, #0]
 8019012:	6922      	ldr	r2, [r4, #16]
 8019014:	1a98      	subs	r0, r3, r2
 8019016:	6963      	ldr	r3, [r4, #20]
 8019018:	b2f6      	uxtb	r6, r6
 801901a:	4283      	cmp	r3, r0
 801901c:	4637      	mov	r7, r6
 801901e:	dc04      	bgt.n	801902a <__swbuf_r+0x3a>
 8019020:	4621      	mov	r1, r4
 8019022:	4628      	mov	r0, r5
 8019024:	f7ff fe00 	bl	8018c28 <_fflush_r>
 8019028:	b9e0      	cbnz	r0, 8019064 <__swbuf_r+0x74>
 801902a:	68a3      	ldr	r3, [r4, #8]
 801902c:	3b01      	subs	r3, #1
 801902e:	60a3      	str	r3, [r4, #8]
 8019030:	6823      	ldr	r3, [r4, #0]
 8019032:	1c5a      	adds	r2, r3, #1
 8019034:	6022      	str	r2, [r4, #0]
 8019036:	701e      	strb	r6, [r3, #0]
 8019038:	6962      	ldr	r2, [r4, #20]
 801903a:	1c43      	adds	r3, r0, #1
 801903c:	429a      	cmp	r2, r3
 801903e:	d004      	beq.n	801904a <__swbuf_r+0x5a>
 8019040:	89a3      	ldrh	r3, [r4, #12]
 8019042:	07db      	lsls	r3, r3, #31
 8019044:	d506      	bpl.n	8019054 <__swbuf_r+0x64>
 8019046:	2e0a      	cmp	r6, #10
 8019048:	d104      	bne.n	8019054 <__swbuf_r+0x64>
 801904a:	4621      	mov	r1, r4
 801904c:	4628      	mov	r0, r5
 801904e:	f7ff fdeb 	bl	8018c28 <_fflush_r>
 8019052:	b938      	cbnz	r0, 8019064 <__swbuf_r+0x74>
 8019054:	4638      	mov	r0, r7
 8019056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019058:	4621      	mov	r1, r4
 801905a:	4628      	mov	r0, r5
 801905c:	f000 f806 	bl	801906c <__swsetup_r>
 8019060:	2800      	cmp	r0, #0
 8019062:	d0d5      	beq.n	8019010 <__swbuf_r+0x20>
 8019064:	f04f 37ff 	mov.w	r7, #4294967295
 8019068:	e7f4      	b.n	8019054 <__swbuf_r+0x64>
	...

0801906c <__swsetup_r>:
 801906c:	b538      	push	{r3, r4, r5, lr}
 801906e:	4b2a      	ldr	r3, [pc, #168]	; (8019118 <__swsetup_r+0xac>)
 8019070:	4605      	mov	r5, r0
 8019072:	6818      	ldr	r0, [r3, #0]
 8019074:	460c      	mov	r4, r1
 8019076:	b118      	cbz	r0, 8019080 <__swsetup_r+0x14>
 8019078:	6a03      	ldr	r3, [r0, #32]
 801907a:	b90b      	cbnz	r3, 8019080 <__swsetup_r+0x14>
 801907c:	f7fd fae8 	bl	8016650 <__sinit>
 8019080:	89a3      	ldrh	r3, [r4, #12]
 8019082:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019086:	0718      	lsls	r0, r3, #28
 8019088:	d422      	bmi.n	80190d0 <__swsetup_r+0x64>
 801908a:	06d9      	lsls	r1, r3, #27
 801908c:	d407      	bmi.n	801909e <__swsetup_r+0x32>
 801908e:	2309      	movs	r3, #9
 8019090:	602b      	str	r3, [r5, #0]
 8019092:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019096:	81a3      	strh	r3, [r4, #12]
 8019098:	f04f 30ff 	mov.w	r0, #4294967295
 801909c:	e034      	b.n	8019108 <__swsetup_r+0x9c>
 801909e:	0758      	lsls	r0, r3, #29
 80190a0:	d512      	bpl.n	80190c8 <__swsetup_r+0x5c>
 80190a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80190a4:	b141      	cbz	r1, 80190b8 <__swsetup_r+0x4c>
 80190a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80190aa:	4299      	cmp	r1, r3
 80190ac:	d002      	beq.n	80190b4 <__swsetup_r+0x48>
 80190ae:	4628      	mov	r0, r5
 80190b0:	f7fe fb6c 	bl	801778c <_free_r>
 80190b4:	2300      	movs	r3, #0
 80190b6:	6363      	str	r3, [r4, #52]	; 0x34
 80190b8:	89a3      	ldrh	r3, [r4, #12]
 80190ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80190be:	81a3      	strh	r3, [r4, #12]
 80190c0:	2300      	movs	r3, #0
 80190c2:	6063      	str	r3, [r4, #4]
 80190c4:	6923      	ldr	r3, [r4, #16]
 80190c6:	6023      	str	r3, [r4, #0]
 80190c8:	89a3      	ldrh	r3, [r4, #12]
 80190ca:	f043 0308 	orr.w	r3, r3, #8
 80190ce:	81a3      	strh	r3, [r4, #12]
 80190d0:	6923      	ldr	r3, [r4, #16]
 80190d2:	b94b      	cbnz	r3, 80190e8 <__swsetup_r+0x7c>
 80190d4:	89a3      	ldrh	r3, [r4, #12]
 80190d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80190da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80190de:	d003      	beq.n	80190e8 <__swsetup_r+0x7c>
 80190e0:	4621      	mov	r1, r4
 80190e2:	4628      	mov	r0, r5
 80190e4:	f000 f88c 	bl	8019200 <__smakebuf_r>
 80190e8:	89a0      	ldrh	r0, [r4, #12]
 80190ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80190ee:	f010 0301 	ands.w	r3, r0, #1
 80190f2:	d00a      	beq.n	801910a <__swsetup_r+0x9e>
 80190f4:	2300      	movs	r3, #0
 80190f6:	60a3      	str	r3, [r4, #8]
 80190f8:	6963      	ldr	r3, [r4, #20]
 80190fa:	425b      	negs	r3, r3
 80190fc:	61a3      	str	r3, [r4, #24]
 80190fe:	6923      	ldr	r3, [r4, #16]
 8019100:	b943      	cbnz	r3, 8019114 <__swsetup_r+0xa8>
 8019102:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019106:	d1c4      	bne.n	8019092 <__swsetup_r+0x26>
 8019108:	bd38      	pop	{r3, r4, r5, pc}
 801910a:	0781      	lsls	r1, r0, #30
 801910c:	bf58      	it	pl
 801910e:	6963      	ldrpl	r3, [r4, #20]
 8019110:	60a3      	str	r3, [r4, #8]
 8019112:	e7f4      	b.n	80190fe <__swsetup_r+0x92>
 8019114:	2000      	movs	r0, #0
 8019116:	e7f7      	b.n	8019108 <__swsetup_r+0x9c>
 8019118:	200002f4 	.word	0x200002f4

0801911c <_raise_r>:
 801911c:	291f      	cmp	r1, #31
 801911e:	b538      	push	{r3, r4, r5, lr}
 8019120:	4604      	mov	r4, r0
 8019122:	460d      	mov	r5, r1
 8019124:	d904      	bls.n	8019130 <_raise_r+0x14>
 8019126:	2316      	movs	r3, #22
 8019128:	6003      	str	r3, [r0, #0]
 801912a:	f04f 30ff 	mov.w	r0, #4294967295
 801912e:	bd38      	pop	{r3, r4, r5, pc}
 8019130:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019132:	b112      	cbz	r2, 801913a <_raise_r+0x1e>
 8019134:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019138:	b94b      	cbnz	r3, 801914e <_raise_r+0x32>
 801913a:	4620      	mov	r0, r4
 801913c:	f000 f830 	bl	80191a0 <_getpid_r>
 8019140:	462a      	mov	r2, r5
 8019142:	4601      	mov	r1, r0
 8019144:	4620      	mov	r0, r4
 8019146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801914a:	f000 b817 	b.w	801917c <_kill_r>
 801914e:	2b01      	cmp	r3, #1
 8019150:	d00a      	beq.n	8019168 <_raise_r+0x4c>
 8019152:	1c59      	adds	r1, r3, #1
 8019154:	d103      	bne.n	801915e <_raise_r+0x42>
 8019156:	2316      	movs	r3, #22
 8019158:	6003      	str	r3, [r0, #0]
 801915a:	2001      	movs	r0, #1
 801915c:	e7e7      	b.n	801912e <_raise_r+0x12>
 801915e:	2400      	movs	r4, #0
 8019160:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019164:	4628      	mov	r0, r5
 8019166:	4798      	blx	r3
 8019168:	2000      	movs	r0, #0
 801916a:	e7e0      	b.n	801912e <_raise_r+0x12>

0801916c <raise>:
 801916c:	4b02      	ldr	r3, [pc, #8]	; (8019178 <raise+0xc>)
 801916e:	4601      	mov	r1, r0
 8019170:	6818      	ldr	r0, [r3, #0]
 8019172:	f7ff bfd3 	b.w	801911c <_raise_r>
 8019176:	bf00      	nop
 8019178:	200002f4 	.word	0x200002f4

0801917c <_kill_r>:
 801917c:	b538      	push	{r3, r4, r5, lr}
 801917e:	4d07      	ldr	r5, [pc, #28]	; (801919c <_kill_r+0x20>)
 8019180:	2300      	movs	r3, #0
 8019182:	4604      	mov	r4, r0
 8019184:	4608      	mov	r0, r1
 8019186:	4611      	mov	r1, r2
 8019188:	602b      	str	r3, [r5, #0]
 801918a:	f7ec fad3 	bl	8005734 <_kill>
 801918e:	1c43      	adds	r3, r0, #1
 8019190:	d102      	bne.n	8019198 <_kill_r+0x1c>
 8019192:	682b      	ldr	r3, [r5, #0]
 8019194:	b103      	cbz	r3, 8019198 <_kill_r+0x1c>
 8019196:	6023      	str	r3, [r4, #0]
 8019198:	bd38      	pop	{r3, r4, r5, pc}
 801919a:	bf00      	nop
 801919c:	200026ac 	.word	0x200026ac

080191a0 <_getpid_r>:
 80191a0:	f7ec bac0 	b.w	8005724 <_getpid>

080191a4 <_malloc_usable_size_r>:
 80191a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80191a8:	1f18      	subs	r0, r3, #4
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	bfbc      	itt	lt
 80191ae:	580b      	ldrlt	r3, [r1, r0]
 80191b0:	18c0      	addlt	r0, r0, r3
 80191b2:	4770      	bx	lr

080191b4 <__swhatbuf_r>:
 80191b4:	b570      	push	{r4, r5, r6, lr}
 80191b6:	460c      	mov	r4, r1
 80191b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191bc:	2900      	cmp	r1, #0
 80191be:	b096      	sub	sp, #88	; 0x58
 80191c0:	4615      	mov	r5, r2
 80191c2:	461e      	mov	r6, r3
 80191c4:	da0d      	bge.n	80191e2 <__swhatbuf_r+0x2e>
 80191c6:	89a3      	ldrh	r3, [r4, #12]
 80191c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80191cc:	f04f 0100 	mov.w	r1, #0
 80191d0:	bf0c      	ite	eq
 80191d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80191d6:	2340      	movne	r3, #64	; 0x40
 80191d8:	2000      	movs	r0, #0
 80191da:	6031      	str	r1, [r6, #0]
 80191dc:	602b      	str	r3, [r5, #0]
 80191de:	b016      	add	sp, #88	; 0x58
 80191e0:	bd70      	pop	{r4, r5, r6, pc}
 80191e2:	466a      	mov	r2, sp
 80191e4:	f000 f848 	bl	8019278 <_fstat_r>
 80191e8:	2800      	cmp	r0, #0
 80191ea:	dbec      	blt.n	80191c6 <__swhatbuf_r+0x12>
 80191ec:	9901      	ldr	r1, [sp, #4]
 80191ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80191f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80191f6:	4259      	negs	r1, r3
 80191f8:	4159      	adcs	r1, r3
 80191fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80191fe:	e7eb      	b.n	80191d8 <__swhatbuf_r+0x24>

08019200 <__smakebuf_r>:
 8019200:	898b      	ldrh	r3, [r1, #12]
 8019202:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019204:	079d      	lsls	r5, r3, #30
 8019206:	4606      	mov	r6, r0
 8019208:	460c      	mov	r4, r1
 801920a:	d507      	bpl.n	801921c <__smakebuf_r+0x1c>
 801920c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019210:	6023      	str	r3, [r4, #0]
 8019212:	6123      	str	r3, [r4, #16]
 8019214:	2301      	movs	r3, #1
 8019216:	6163      	str	r3, [r4, #20]
 8019218:	b002      	add	sp, #8
 801921a:	bd70      	pop	{r4, r5, r6, pc}
 801921c:	ab01      	add	r3, sp, #4
 801921e:	466a      	mov	r2, sp
 8019220:	f7ff ffc8 	bl	80191b4 <__swhatbuf_r>
 8019224:	9900      	ldr	r1, [sp, #0]
 8019226:	4605      	mov	r5, r0
 8019228:	4630      	mov	r0, r6
 801922a:	f7fb fb7d 	bl	8014928 <_malloc_r>
 801922e:	b948      	cbnz	r0, 8019244 <__smakebuf_r+0x44>
 8019230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019234:	059a      	lsls	r2, r3, #22
 8019236:	d4ef      	bmi.n	8019218 <__smakebuf_r+0x18>
 8019238:	f023 0303 	bic.w	r3, r3, #3
 801923c:	f043 0302 	orr.w	r3, r3, #2
 8019240:	81a3      	strh	r3, [r4, #12]
 8019242:	e7e3      	b.n	801920c <__smakebuf_r+0xc>
 8019244:	89a3      	ldrh	r3, [r4, #12]
 8019246:	6020      	str	r0, [r4, #0]
 8019248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801924c:	81a3      	strh	r3, [r4, #12]
 801924e:	9b00      	ldr	r3, [sp, #0]
 8019250:	6163      	str	r3, [r4, #20]
 8019252:	9b01      	ldr	r3, [sp, #4]
 8019254:	6120      	str	r0, [r4, #16]
 8019256:	b15b      	cbz	r3, 8019270 <__smakebuf_r+0x70>
 8019258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801925c:	4630      	mov	r0, r6
 801925e:	f000 f81d 	bl	801929c <_isatty_r>
 8019262:	b128      	cbz	r0, 8019270 <__smakebuf_r+0x70>
 8019264:	89a3      	ldrh	r3, [r4, #12]
 8019266:	f023 0303 	bic.w	r3, r3, #3
 801926a:	f043 0301 	orr.w	r3, r3, #1
 801926e:	81a3      	strh	r3, [r4, #12]
 8019270:	89a3      	ldrh	r3, [r4, #12]
 8019272:	431d      	orrs	r5, r3
 8019274:	81a5      	strh	r5, [r4, #12]
 8019276:	e7cf      	b.n	8019218 <__smakebuf_r+0x18>

08019278 <_fstat_r>:
 8019278:	b538      	push	{r3, r4, r5, lr}
 801927a:	4d07      	ldr	r5, [pc, #28]	; (8019298 <_fstat_r+0x20>)
 801927c:	2300      	movs	r3, #0
 801927e:	4604      	mov	r4, r0
 8019280:	4608      	mov	r0, r1
 8019282:	4611      	mov	r1, r2
 8019284:	602b      	str	r3, [r5, #0]
 8019286:	f7ec fab4 	bl	80057f2 <_fstat>
 801928a:	1c43      	adds	r3, r0, #1
 801928c:	d102      	bne.n	8019294 <_fstat_r+0x1c>
 801928e:	682b      	ldr	r3, [r5, #0]
 8019290:	b103      	cbz	r3, 8019294 <_fstat_r+0x1c>
 8019292:	6023      	str	r3, [r4, #0]
 8019294:	bd38      	pop	{r3, r4, r5, pc}
 8019296:	bf00      	nop
 8019298:	200026ac 	.word	0x200026ac

0801929c <_isatty_r>:
 801929c:	b538      	push	{r3, r4, r5, lr}
 801929e:	4d06      	ldr	r5, [pc, #24]	; (80192b8 <_isatty_r+0x1c>)
 80192a0:	2300      	movs	r3, #0
 80192a2:	4604      	mov	r4, r0
 80192a4:	4608      	mov	r0, r1
 80192a6:	602b      	str	r3, [r5, #0]
 80192a8:	f7ec fab3 	bl	8005812 <_isatty>
 80192ac:	1c43      	adds	r3, r0, #1
 80192ae:	d102      	bne.n	80192b6 <_isatty_r+0x1a>
 80192b0:	682b      	ldr	r3, [r5, #0]
 80192b2:	b103      	cbz	r3, 80192b6 <_isatty_r+0x1a>
 80192b4:	6023      	str	r3, [r4, #0]
 80192b6:	bd38      	pop	{r3, r4, r5, pc}
 80192b8:	200026ac 	.word	0x200026ac
 80192bc:	00000000 	.word	0x00000000

080192c0 <cos>:
 80192c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80192c2:	ec53 2b10 	vmov	r2, r3, d0
 80192c6:	4826      	ldr	r0, [pc, #152]	; (8019360 <cos+0xa0>)
 80192c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80192cc:	4281      	cmp	r1, r0
 80192ce:	dc06      	bgt.n	80192de <cos+0x1e>
 80192d0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8019358 <cos+0x98>
 80192d4:	b005      	add	sp, #20
 80192d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80192da:	f000 b9b9 	b.w	8019650 <__kernel_cos>
 80192de:	4821      	ldr	r0, [pc, #132]	; (8019364 <cos+0xa4>)
 80192e0:	4281      	cmp	r1, r0
 80192e2:	dd09      	ble.n	80192f8 <cos+0x38>
 80192e4:	ee10 0a10 	vmov	r0, s0
 80192e8:	4619      	mov	r1, r3
 80192ea:	f7e6 ffcd 	bl	8000288 <__aeabi_dsub>
 80192ee:	ec41 0b10 	vmov	d0, r0, r1
 80192f2:	b005      	add	sp, #20
 80192f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80192f8:	4668      	mov	r0, sp
 80192fa:	f000 fb31 	bl	8019960 <__ieee754_rem_pio2>
 80192fe:	f000 0003 	and.w	r0, r0, #3
 8019302:	2801      	cmp	r0, #1
 8019304:	d00b      	beq.n	801931e <cos+0x5e>
 8019306:	2802      	cmp	r0, #2
 8019308:	d016      	beq.n	8019338 <cos+0x78>
 801930a:	b9e0      	cbnz	r0, 8019346 <cos+0x86>
 801930c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019310:	ed9d 0b00 	vldr	d0, [sp]
 8019314:	f000 f99c 	bl	8019650 <__kernel_cos>
 8019318:	ec51 0b10 	vmov	r0, r1, d0
 801931c:	e7e7      	b.n	80192ee <cos+0x2e>
 801931e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019322:	ed9d 0b00 	vldr	d0, [sp]
 8019326:	f000 fa5b 	bl	80197e0 <__kernel_sin>
 801932a:	ec53 2b10 	vmov	r2, r3, d0
 801932e:	ee10 0a10 	vmov	r0, s0
 8019332:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8019336:	e7da      	b.n	80192ee <cos+0x2e>
 8019338:	ed9d 1b02 	vldr	d1, [sp, #8]
 801933c:	ed9d 0b00 	vldr	d0, [sp]
 8019340:	f000 f986 	bl	8019650 <__kernel_cos>
 8019344:	e7f1      	b.n	801932a <cos+0x6a>
 8019346:	ed9d 1b02 	vldr	d1, [sp, #8]
 801934a:	ed9d 0b00 	vldr	d0, [sp]
 801934e:	2001      	movs	r0, #1
 8019350:	f000 fa46 	bl	80197e0 <__kernel_sin>
 8019354:	e7e0      	b.n	8019318 <cos+0x58>
 8019356:	bf00      	nop
	...
 8019360:	3fe921fb 	.word	0x3fe921fb
 8019364:	7fefffff 	.word	0x7fefffff

08019368 <sin>:
 8019368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801936a:	ec53 2b10 	vmov	r2, r3, d0
 801936e:	4828      	ldr	r0, [pc, #160]	; (8019410 <sin+0xa8>)
 8019370:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8019374:	4281      	cmp	r1, r0
 8019376:	dc07      	bgt.n	8019388 <sin+0x20>
 8019378:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8019408 <sin+0xa0>
 801937c:	2000      	movs	r0, #0
 801937e:	b005      	add	sp, #20
 8019380:	f85d eb04 	ldr.w	lr, [sp], #4
 8019384:	f000 ba2c 	b.w	80197e0 <__kernel_sin>
 8019388:	4822      	ldr	r0, [pc, #136]	; (8019414 <sin+0xac>)
 801938a:	4281      	cmp	r1, r0
 801938c:	dd09      	ble.n	80193a2 <sin+0x3a>
 801938e:	ee10 0a10 	vmov	r0, s0
 8019392:	4619      	mov	r1, r3
 8019394:	f7e6 ff78 	bl	8000288 <__aeabi_dsub>
 8019398:	ec41 0b10 	vmov	d0, r0, r1
 801939c:	b005      	add	sp, #20
 801939e:	f85d fb04 	ldr.w	pc, [sp], #4
 80193a2:	4668      	mov	r0, sp
 80193a4:	f000 fadc 	bl	8019960 <__ieee754_rem_pio2>
 80193a8:	f000 0003 	and.w	r0, r0, #3
 80193ac:	2801      	cmp	r0, #1
 80193ae:	d00c      	beq.n	80193ca <sin+0x62>
 80193b0:	2802      	cmp	r0, #2
 80193b2:	d011      	beq.n	80193d8 <sin+0x70>
 80193b4:	b9f0      	cbnz	r0, 80193f4 <sin+0x8c>
 80193b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80193ba:	ed9d 0b00 	vldr	d0, [sp]
 80193be:	2001      	movs	r0, #1
 80193c0:	f000 fa0e 	bl	80197e0 <__kernel_sin>
 80193c4:	ec51 0b10 	vmov	r0, r1, d0
 80193c8:	e7e6      	b.n	8019398 <sin+0x30>
 80193ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80193ce:	ed9d 0b00 	vldr	d0, [sp]
 80193d2:	f000 f93d 	bl	8019650 <__kernel_cos>
 80193d6:	e7f5      	b.n	80193c4 <sin+0x5c>
 80193d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80193dc:	ed9d 0b00 	vldr	d0, [sp]
 80193e0:	2001      	movs	r0, #1
 80193e2:	f000 f9fd 	bl	80197e0 <__kernel_sin>
 80193e6:	ec53 2b10 	vmov	r2, r3, d0
 80193ea:	ee10 0a10 	vmov	r0, s0
 80193ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80193f2:	e7d1      	b.n	8019398 <sin+0x30>
 80193f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80193f8:	ed9d 0b00 	vldr	d0, [sp]
 80193fc:	f000 f928 	bl	8019650 <__kernel_cos>
 8019400:	e7f1      	b.n	80193e6 <sin+0x7e>
 8019402:	bf00      	nop
 8019404:	f3af 8000 	nop.w
	...
 8019410:	3fe921fb 	.word	0x3fe921fb
 8019414:	7fefffff 	.word	0x7fefffff

08019418 <expf>:
 8019418:	b508      	push	{r3, lr}
 801941a:	ed2d 8b02 	vpush	{d8}
 801941e:	eef0 8a40 	vmov.f32	s17, s0
 8019422:	f000 fce1 	bl	8019de8 <__ieee754_expf>
 8019426:	eeb0 8a40 	vmov.f32	s16, s0
 801942a:	eeb0 0a68 	vmov.f32	s0, s17
 801942e:	f000 f87b 	bl	8019528 <finitef>
 8019432:	b160      	cbz	r0, 801944e <expf+0x36>
 8019434:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8019474 <expf+0x5c>
 8019438:	eef4 8ae7 	vcmpe.f32	s17, s15
 801943c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019440:	dd0a      	ble.n	8019458 <expf+0x40>
 8019442:	f7fd fab9 	bl	80169b8 <__errno>
 8019446:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8019478 <expf+0x60>
 801944a:	2322      	movs	r3, #34	; 0x22
 801944c:	6003      	str	r3, [r0, #0]
 801944e:	eeb0 0a48 	vmov.f32	s0, s16
 8019452:	ecbd 8b02 	vpop	{d8}
 8019456:	bd08      	pop	{r3, pc}
 8019458:	eddf 7a08 	vldr	s15, [pc, #32]	; 801947c <expf+0x64>
 801945c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019464:	d5f3      	bpl.n	801944e <expf+0x36>
 8019466:	f7fd faa7 	bl	80169b8 <__errno>
 801946a:	2322      	movs	r3, #34	; 0x22
 801946c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8019480 <expf+0x68>
 8019470:	6003      	str	r3, [r0, #0]
 8019472:	e7ec      	b.n	801944e <expf+0x36>
 8019474:	42b17217 	.word	0x42b17217
 8019478:	7f800000 	.word	0x7f800000
 801947c:	c2cff1b5 	.word	0xc2cff1b5
 8019480:	00000000 	.word	0x00000000

08019484 <fmin>:
 8019484:	b508      	push	{r3, lr}
 8019486:	ed2d 8b04 	vpush	{d8-d9}
 801948a:	eeb0 8a40 	vmov.f32	s16, s0
 801948e:	eef0 8a60 	vmov.f32	s17, s1
 8019492:	eeb0 9a41 	vmov.f32	s18, s2
 8019496:	eef0 9a61 	vmov.f32	s19, s3
 801949a:	f000 f81b 	bl	80194d4 <__fpclassifyd>
 801949e:	b168      	cbz	r0, 80194bc <fmin+0x38>
 80194a0:	eeb0 0a49 	vmov.f32	s0, s18
 80194a4:	eef0 0a69 	vmov.f32	s1, s19
 80194a8:	f000 f814 	bl	80194d4 <__fpclassifyd>
 80194ac:	b150      	cbz	r0, 80194c4 <fmin+0x40>
 80194ae:	ec53 2b19 	vmov	r2, r3, d9
 80194b2:	ec51 0b18 	vmov	r0, r1, d8
 80194b6:	f7e7 fb11 	bl	8000adc <__aeabi_dcmplt>
 80194ba:	b918      	cbnz	r0, 80194c4 <fmin+0x40>
 80194bc:	eeb0 8a49 	vmov.f32	s16, s18
 80194c0:	eef0 8a69 	vmov.f32	s17, s19
 80194c4:	eeb0 0a48 	vmov.f32	s0, s16
 80194c8:	eef0 0a68 	vmov.f32	s1, s17
 80194cc:	ecbd 8b04 	vpop	{d8-d9}
 80194d0:	bd08      	pop	{r3, pc}
	...

080194d4 <__fpclassifyd>:
 80194d4:	ec51 0b10 	vmov	r0, r1, d0
 80194d8:	b510      	push	{r4, lr}
 80194da:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80194de:	460b      	mov	r3, r1
 80194e0:	d019      	beq.n	8019516 <__fpclassifyd+0x42>
 80194e2:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80194e6:	490e      	ldr	r1, [pc, #56]	; (8019520 <__fpclassifyd+0x4c>)
 80194e8:	428a      	cmp	r2, r1
 80194ea:	d90e      	bls.n	801950a <__fpclassifyd+0x36>
 80194ec:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 80194f0:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 80194f4:	428a      	cmp	r2, r1
 80194f6:	d908      	bls.n	801950a <__fpclassifyd+0x36>
 80194f8:	4a0a      	ldr	r2, [pc, #40]	; (8019524 <__fpclassifyd+0x50>)
 80194fa:	4213      	tst	r3, r2
 80194fc:	d007      	beq.n	801950e <__fpclassifyd+0x3a>
 80194fe:	4294      	cmp	r4, r2
 8019500:	d107      	bne.n	8019512 <__fpclassifyd+0x3e>
 8019502:	fab0 f080 	clz	r0, r0
 8019506:	0940      	lsrs	r0, r0, #5
 8019508:	bd10      	pop	{r4, pc}
 801950a:	2004      	movs	r0, #4
 801950c:	e7fc      	b.n	8019508 <__fpclassifyd+0x34>
 801950e:	2003      	movs	r0, #3
 8019510:	e7fa      	b.n	8019508 <__fpclassifyd+0x34>
 8019512:	2000      	movs	r0, #0
 8019514:	e7f8      	b.n	8019508 <__fpclassifyd+0x34>
 8019516:	2800      	cmp	r0, #0
 8019518:	d1ee      	bne.n	80194f8 <__fpclassifyd+0x24>
 801951a:	2002      	movs	r0, #2
 801951c:	e7f4      	b.n	8019508 <__fpclassifyd+0x34>
 801951e:	bf00      	nop
 8019520:	7fdfffff 	.word	0x7fdfffff
 8019524:	7ff00000 	.word	0x7ff00000

08019528 <finitef>:
 8019528:	b082      	sub	sp, #8
 801952a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801952e:	9801      	ldr	r0, [sp, #4]
 8019530:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019534:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019538:	bfac      	ite	ge
 801953a:	2000      	movge	r0, #0
 801953c:	2001      	movlt	r0, #1
 801953e:	b002      	add	sp, #8
 8019540:	4770      	bx	lr

08019542 <cosl>:
 8019542:	f7ff bebd 	b.w	80192c0 <cos>

08019546 <sinl>:
 8019546:	f7ff bf0f 	b.w	8019368 <sin>

0801954a <acosl>:
 801954a:	f000 bc0f 	b.w	8019d6c <acos>
	...

08019550 <floor>:
 8019550:	ec51 0b10 	vmov	r0, r1, d0
 8019554:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801955c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8019560:	2e13      	cmp	r6, #19
 8019562:	ee10 5a10 	vmov	r5, s0
 8019566:	ee10 8a10 	vmov	r8, s0
 801956a:	460c      	mov	r4, r1
 801956c:	dc31      	bgt.n	80195d2 <floor+0x82>
 801956e:	2e00      	cmp	r6, #0
 8019570:	da14      	bge.n	801959c <floor+0x4c>
 8019572:	a333      	add	r3, pc, #204	; (adr r3, 8019640 <floor+0xf0>)
 8019574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019578:	f7e6 fe88 	bl	800028c <__adddf3>
 801957c:	2200      	movs	r2, #0
 801957e:	2300      	movs	r3, #0
 8019580:	f7e7 faca 	bl	8000b18 <__aeabi_dcmpgt>
 8019584:	b138      	cbz	r0, 8019596 <floor+0x46>
 8019586:	2c00      	cmp	r4, #0
 8019588:	da53      	bge.n	8019632 <floor+0xe2>
 801958a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801958e:	4325      	orrs	r5, r4
 8019590:	d052      	beq.n	8019638 <floor+0xe8>
 8019592:	4c2d      	ldr	r4, [pc, #180]	; (8019648 <floor+0xf8>)
 8019594:	2500      	movs	r5, #0
 8019596:	4621      	mov	r1, r4
 8019598:	4628      	mov	r0, r5
 801959a:	e024      	b.n	80195e6 <floor+0x96>
 801959c:	4f2b      	ldr	r7, [pc, #172]	; (801964c <floor+0xfc>)
 801959e:	4137      	asrs	r7, r6
 80195a0:	ea01 0307 	and.w	r3, r1, r7
 80195a4:	4303      	orrs	r3, r0
 80195a6:	d01e      	beq.n	80195e6 <floor+0x96>
 80195a8:	a325      	add	r3, pc, #148	; (adr r3, 8019640 <floor+0xf0>)
 80195aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195ae:	f7e6 fe6d 	bl	800028c <__adddf3>
 80195b2:	2200      	movs	r2, #0
 80195b4:	2300      	movs	r3, #0
 80195b6:	f7e7 faaf 	bl	8000b18 <__aeabi_dcmpgt>
 80195ba:	2800      	cmp	r0, #0
 80195bc:	d0eb      	beq.n	8019596 <floor+0x46>
 80195be:	2c00      	cmp	r4, #0
 80195c0:	bfbe      	ittt	lt
 80195c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80195c6:	4133      	asrlt	r3, r6
 80195c8:	18e4      	addlt	r4, r4, r3
 80195ca:	ea24 0407 	bic.w	r4, r4, r7
 80195ce:	2500      	movs	r5, #0
 80195d0:	e7e1      	b.n	8019596 <floor+0x46>
 80195d2:	2e33      	cmp	r6, #51	; 0x33
 80195d4:	dd0b      	ble.n	80195ee <floor+0x9e>
 80195d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80195da:	d104      	bne.n	80195e6 <floor+0x96>
 80195dc:	ee10 2a10 	vmov	r2, s0
 80195e0:	460b      	mov	r3, r1
 80195e2:	f7e6 fe53 	bl	800028c <__adddf3>
 80195e6:	ec41 0b10 	vmov	d0, r0, r1
 80195ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195ee:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80195f2:	f04f 37ff 	mov.w	r7, #4294967295
 80195f6:	40df      	lsrs	r7, r3
 80195f8:	4238      	tst	r0, r7
 80195fa:	d0f4      	beq.n	80195e6 <floor+0x96>
 80195fc:	a310      	add	r3, pc, #64	; (adr r3, 8019640 <floor+0xf0>)
 80195fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019602:	f7e6 fe43 	bl	800028c <__adddf3>
 8019606:	2200      	movs	r2, #0
 8019608:	2300      	movs	r3, #0
 801960a:	f7e7 fa85 	bl	8000b18 <__aeabi_dcmpgt>
 801960e:	2800      	cmp	r0, #0
 8019610:	d0c1      	beq.n	8019596 <floor+0x46>
 8019612:	2c00      	cmp	r4, #0
 8019614:	da0a      	bge.n	801962c <floor+0xdc>
 8019616:	2e14      	cmp	r6, #20
 8019618:	d101      	bne.n	801961e <floor+0xce>
 801961a:	3401      	adds	r4, #1
 801961c:	e006      	b.n	801962c <floor+0xdc>
 801961e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019622:	2301      	movs	r3, #1
 8019624:	40b3      	lsls	r3, r6
 8019626:	441d      	add	r5, r3
 8019628:	45a8      	cmp	r8, r5
 801962a:	d8f6      	bhi.n	801961a <floor+0xca>
 801962c:	ea25 0507 	bic.w	r5, r5, r7
 8019630:	e7b1      	b.n	8019596 <floor+0x46>
 8019632:	2500      	movs	r5, #0
 8019634:	462c      	mov	r4, r5
 8019636:	e7ae      	b.n	8019596 <floor+0x46>
 8019638:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801963c:	e7ab      	b.n	8019596 <floor+0x46>
 801963e:	bf00      	nop
 8019640:	8800759c 	.word	0x8800759c
 8019644:	7e37e43c 	.word	0x7e37e43c
 8019648:	bff00000 	.word	0xbff00000
 801964c:	000fffff 	.word	0x000fffff

08019650 <__kernel_cos>:
 8019650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019654:	ec57 6b10 	vmov	r6, r7, d0
 8019658:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801965c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8019660:	ed8d 1b00 	vstr	d1, [sp]
 8019664:	da07      	bge.n	8019676 <__kernel_cos+0x26>
 8019666:	ee10 0a10 	vmov	r0, s0
 801966a:	4639      	mov	r1, r7
 801966c:	f7e7 fa74 	bl	8000b58 <__aeabi_d2iz>
 8019670:	2800      	cmp	r0, #0
 8019672:	f000 8088 	beq.w	8019786 <__kernel_cos+0x136>
 8019676:	4632      	mov	r2, r6
 8019678:	463b      	mov	r3, r7
 801967a:	4630      	mov	r0, r6
 801967c:	4639      	mov	r1, r7
 801967e:	f7e6 ffbb 	bl	80005f8 <__aeabi_dmul>
 8019682:	4b51      	ldr	r3, [pc, #324]	; (80197c8 <__kernel_cos+0x178>)
 8019684:	2200      	movs	r2, #0
 8019686:	4604      	mov	r4, r0
 8019688:	460d      	mov	r5, r1
 801968a:	f7e6 ffb5 	bl	80005f8 <__aeabi_dmul>
 801968e:	a340      	add	r3, pc, #256	; (adr r3, 8019790 <__kernel_cos+0x140>)
 8019690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019694:	4682      	mov	sl, r0
 8019696:	468b      	mov	fp, r1
 8019698:	4620      	mov	r0, r4
 801969a:	4629      	mov	r1, r5
 801969c:	f7e6 ffac 	bl	80005f8 <__aeabi_dmul>
 80196a0:	a33d      	add	r3, pc, #244	; (adr r3, 8019798 <__kernel_cos+0x148>)
 80196a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196a6:	f7e6 fdf1 	bl	800028c <__adddf3>
 80196aa:	4622      	mov	r2, r4
 80196ac:	462b      	mov	r3, r5
 80196ae:	f7e6 ffa3 	bl	80005f8 <__aeabi_dmul>
 80196b2:	a33b      	add	r3, pc, #236	; (adr r3, 80197a0 <__kernel_cos+0x150>)
 80196b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196b8:	f7e6 fde6 	bl	8000288 <__aeabi_dsub>
 80196bc:	4622      	mov	r2, r4
 80196be:	462b      	mov	r3, r5
 80196c0:	f7e6 ff9a 	bl	80005f8 <__aeabi_dmul>
 80196c4:	a338      	add	r3, pc, #224	; (adr r3, 80197a8 <__kernel_cos+0x158>)
 80196c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196ca:	f7e6 fddf 	bl	800028c <__adddf3>
 80196ce:	4622      	mov	r2, r4
 80196d0:	462b      	mov	r3, r5
 80196d2:	f7e6 ff91 	bl	80005f8 <__aeabi_dmul>
 80196d6:	a336      	add	r3, pc, #216	; (adr r3, 80197b0 <__kernel_cos+0x160>)
 80196d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196dc:	f7e6 fdd4 	bl	8000288 <__aeabi_dsub>
 80196e0:	4622      	mov	r2, r4
 80196e2:	462b      	mov	r3, r5
 80196e4:	f7e6 ff88 	bl	80005f8 <__aeabi_dmul>
 80196e8:	a333      	add	r3, pc, #204	; (adr r3, 80197b8 <__kernel_cos+0x168>)
 80196ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196ee:	f7e6 fdcd 	bl	800028c <__adddf3>
 80196f2:	4622      	mov	r2, r4
 80196f4:	462b      	mov	r3, r5
 80196f6:	f7e6 ff7f 	bl	80005f8 <__aeabi_dmul>
 80196fa:	4622      	mov	r2, r4
 80196fc:	462b      	mov	r3, r5
 80196fe:	f7e6 ff7b 	bl	80005f8 <__aeabi_dmul>
 8019702:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019706:	4604      	mov	r4, r0
 8019708:	460d      	mov	r5, r1
 801970a:	4630      	mov	r0, r6
 801970c:	4639      	mov	r1, r7
 801970e:	f7e6 ff73 	bl	80005f8 <__aeabi_dmul>
 8019712:	460b      	mov	r3, r1
 8019714:	4602      	mov	r2, r0
 8019716:	4629      	mov	r1, r5
 8019718:	4620      	mov	r0, r4
 801971a:	f7e6 fdb5 	bl	8000288 <__aeabi_dsub>
 801971e:	4b2b      	ldr	r3, [pc, #172]	; (80197cc <__kernel_cos+0x17c>)
 8019720:	4598      	cmp	r8, r3
 8019722:	4606      	mov	r6, r0
 8019724:	460f      	mov	r7, r1
 8019726:	dc10      	bgt.n	801974a <__kernel_cos+0xfa>
 8019728:	4602      	mov	r2, r0
 801972a:	460b      	mov	r3, r1
 801972c:	4650      	mov	r0, sl
 801972e:	4659      	mov	r1, fp
 8019730:	f7e6 fdaa 	bl	8000288 <__aeabi_dsub>
 8019734:	460b      	mov	r3, r1
 8019736:	4926      	ldr	r1, [pc, #152]	; (80197d0 <__kernel_cos+0x180>)
 8019738:	4602      	mov	r2, r0
 801973a:	2000      	movs	r0, #0
 801973c:	f7e6 fda4 	bl	8000288 <__aeabi_dsub>
 8019740:	ec41 0b10 	vmov	d0, r0, r1
 8019744:	b003      	add	sp, #12
 8019746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801974a:	4b22      	ldr	r3, [pc, #136]	; (80197d4 <__kernel_cos+0x184>)
 801974c:	4920      	ldr	r1, [pc, #128]	; (80197d0 <__kernel_cos+0x180>)
 801974e:	4598      	cmp	r8, r3
 8019750:	bfcc      	ite	gt
 8019752:	4d21      	ldrgt	r5, [pc, #132]	; (80197d8 <__kernel_cos+0x188>)
 8019754:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8019758:	2400      	movs	r4, #0
 801975a:	4622      	mov	r2, r4
 801975c:	462b      	mov	r3, r5
 801975e:	2000      	movs	r0, #0
 8019760:	f7e6 fd92 	bl	8000288 <__aeabi_dsub>
 8019764:	4622      	mov	r2, r4
 8019766:	4680      	mov	r8, r0
 8019768:	4689      	mov	r9, r1
 801976a:	462b      	mov	r3, r5
 801976c:	4650      	mov	r0, sl
 801976e:	4659      	mov	r1, fp
 8019770:	f7e6 fd8a 	bl	8000288 <__aeabi_dsub>
 8019774:	4632      	mov	r2, r6
 8019776:	463b      	mov	r3, r7
 8019778:	f7e6 fd86 	bl	8000288 <__aeabi_dsub>
 801977c:	4602      	mov	r2, r0
 801977e:	460b      	mov	r3, r1
 8019780:	4640      	mov	r0, r8
 8019782:	4649      	mov	r1, r9
 8019784:	e7da      	b.n	801973c <__kernel_cos+0xec>
 8019786:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80197c0 <__kernel_cos+0x170>
 801978a:	e7db      	b.n	8019744 <__kernel_cos+0xf4>
 801978c:	f3af 8000 	nop.w
 8019790:	be8838d4 	.word	0xbe8838d4
 8019794:	bda8fae9 	.word	0xbda8fae9
 8019798:	bdb4b1c4 	.word	0xbdb4b1c4
 801979c:	3e21ee9e 	.word	0x3e21ee9e
 80197a0:	809c52ad 	.word	0x809c52ad
 80197a4:	3e927e4f 	.word	0x3e927e4f
 80197a8:	19cb1590 	.word	0x19cb1590
 80197ac:	3efa01a0 	.word	0x3efa01a0
 80197b0:	16c15177 	.word	0x16c15177
 80197b4:	3f56c16c 	.word	0x3f56c16c
 80197b8:	5555554c 	.word	0x5555554c
 80197bc:	3fa55555 	.word	0x3fa55555
 80197c0:	00000000 	.word	0x00000000
 80197c4:	3ff00000 	.word	0x3ff00000
 80197c8:	3fe00000 	.word	0x3fe00000
 80197cc:	3fd33332 	.word	0x3fd33332
 80197d0:	3ff00000 	.word	0x3ff00000
 80197d4:	3fe90000 	.word	0x3fe90000
 80197d8:	3fd20000 	.word	0x3fd20000
 80197dc:	00000000 	.word	0x00000000

080197e0 <__kernel_sin>:
 80197e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197e4:	ed2d 8b04 	vpush	{d8-d9}
 80197e8:	eeb0 8a41 	vmov.f32	s16, s2
 80197ec:	eef0 8a61 	vmov.f32	s17, s3
 80197f0:	ec55 4b10 	vmov	r4, r5, d0
 80197f4:	b083      	sub	sp, #12
 80197f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80197fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80197fe:	9001      	str	r0, [sp, #4]
 8019800:	da06      	bge.n	8019810 <__kernel_sin+0x30>
 8019802:	ee10 0a10 	vmov	r0, s0
 8019806:	4629      	mov	r1, r5
 8019808:	f7e7 f9a6 	bl	8000b58 <__aeabi_d2iz>
 801980c:	2800      	cmp	r0, #0
 801980e:	d051      	beq.n	80198b4 <__kernel_sin+0xd4>
 8019810:	4622      	mov	r2, r4
 8019812:	462b      	mov	r3, r5
 8019814:	4620      	mov	r0, r4
 8019816:	4629      	mov	r1, r5
 8019818:	f7e6 feee 	bl	80005f8 <__aeabi_dmul>
 801981c:	4682      	mov	sl, r0
 801981e:	468b      	mov	fp, r1
 8019820:	4602      	mov	r2, r0
 8019822:	460b      	mov	r3, r1
 8019824:	4620      	mov	r0, r4
 8019826:	4629      	mov	r1, r5
 8019828:	f7e6 fee6 	bl	80005f8 <__aeabi_dmul>
 801982c:	a341      	add	r3, pc, #260	; (adr r3, 8019934 <__kernel_sin+0x154>)
 801982e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019832:	4680      	mov	r8, r0
 8019834:	4689      	mov	r9, r1
 8019836:	4650      	mov	r0, sl
 8019838:	4659      	mov	r1, fp
 801983a:	f7e6 fedd 	bl	80005f8 <__aeabi_dmul>
 801983e:	a33f      	add	r3, pc, #252	; (adr r3, 801993c <__kernel_sin+0x15c>)
 8019840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019844:	f7e6 fd20 	bl	8000288 <__aeabi_dsub>
 8019848:	4652      	mov	r2, sl
 801984a:	465b      	mov	r3, fp
 801984c:	f7e6 fed4 	bl	80005f8 <__aeabi_dmul>
 8019850:	a33c      	add	r3, pc, #240	; (adr r3, 8019944 <__kernel_sin+0x164>)
 8019852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019856:	f7e6 fd19 	bl	800028c <__adddf3>
 801985a:	4652      	mov	r2, sl
 801985c:	465b      	mov	r3, fp
 801985e:	f7e6 fecb 	bl	80005f8 <__aeabi_dmul>
 8019862:	a33a      	add	r3, pc, #232	; (adr r3, 801994c <__kernel_sin+0x16c>)
 8019864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019868:	f7e6 fd0e 	bl	8000288 <__aeabi_dsub>
 801986c:	4652      	mov	r2, sl
 801986e:	465b      	mov	r3, fp
 8019870:	f7e6 fec2 	bl	80005f8 <__aeabi_dmul>
 8019874:	a337      	add	r3, pc, #220	; (adr r3, 8019954 <__kernel_sin+0x174>)
 8019876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801987a:	f7e6 fd07 	bl	800028c <__adddf3>
 801987e:	9b01      	ldr	r3, [sp, #4]
 8019880:	4606      	mov	r6, r0
 8019882:	460f      	mov	r7, r1
 8019884:	b9eb      	cbnz	r3, 80198c2 <__kernel_sin+0xe2>
 8019886:	4602      	mov	r2, r0
 8019888:	460b      	mov	r3, r1
 801988a:	4650      	mov	r0, sl
 801988c:	4659      	mov	r1, fp
 801988e:	f7e6 feb3 	bl	80005f8 <__aeabi_dmul>
 8019892:	a325      	add	r3, pc, #148	; (adr r3, 8019928 <__kernel_sin+0x148>)
 8019894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019898:	f7e6 fcf6 	bl	8000288 <__aeabi_dsub>
 801989c:	4642      	mov	r2, r8
 801989e:	464b      	mov	r3, r9
 80198a0:	f7e6 feaa 	bl	80005f8 <__aeabi_dmul>
 80198a4:	4602      	mov	r2, r0
 80198a6:	460b      	mov	r3, r1
 80198a8:	4620      	mov	r0, r4
 80198aa:	4629      	mov	r1, r5
 80198ac:	f7e6 fcee 	bl	800028c <__adddf3>
 80198b0:	4604      	mov	r4, r0
 80198b2:	460d      	mov	r5, r1
 80198b4:	ec45 4b10 	vmov	d0, r4, r5
 80198b8:	b003      	add	sp, #12
 80198ba:	ecbd 8b04 	vpop	{d8-d9}
 80198be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198c2:	4b1b      	ldr	r3, [pc, #108]	; (8019930 <__kernel_sin+0x150>)
 80198c4:	ec51 0b18 	vmov	r0, r1, d8
 80198c8:	2200      	movs	r2, #0
 80198ca:	f7e6 fe95 	bl	80005f8 <__aeabi_dmul>
 80198ce:	4632      	mov	r2, r6
 80198d0:	ec41 0b19 	vmov	d9, r0, r1
 80198d4:	463b      	mov	r3, r7
 80198d6:	4640      	mov	r0, r8
 80198d8:	4649      	mov	r1, r9
 80198da:	f7e6 fe8d 	bl	80005f8 <__aeabi_dmul>
 80198de:	4602      	mov	r2, r0
 80198e0:	460b      	mov	r3, r1
 80198e2:	ec51 0b19 	vmov	r0, r1, d9
 80198e6:	f7e6 fccf 	bl	8000288 <__aeabi_dsub>
 80198ea:	4652      	mov	r2, sl
 80198ec:	465b      	mov	r3, fp
 80198ee:	f7e6 fe83 	bl	80005f8 <__aeabi_dmul>
 80198f2:	ec53 2b18 	vmov	r2, r3, d8
 80198f6:	f7e6 fcc7 	bl	8000288 <__aeabi_dsub>
 80198fa:	a30b      	add	r3, pc, #44	; (adr r3, 8019928 <__kernel_sin+0x148>)
 80198fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019900:	4606      	mov	r6, r0
 8019902:	460f      	mov	r7, r1
 8019904:	4640      	mov	r0, r8
 8019906:	4649      	mov	r1, r9
 8019908:	f7e6 fe76 	bl	80005f8 <__aeabi_dmul>
 801990c:	4602      	mov	r2, r0
 801990e:	460b      	mov	r3, r1
 8019910:	4630      	mov	r0, r6
 8019912:	4639      	mov	r1, r7
 8019914:	f7e6 fcba 	bl	800028c <__adddf3>
 8019918:	4602      	mov	r2, r0
 801991a:	460b      	mov	r3, r1
 801991c:	4620      	mov	r0, r4
 801991e:	4629      	mov	r1, r5
 8019920:	f7e6 fcb2 	bl	8000288 <__aeabi_dsub>
 8019924:	e7c4      	b.n	80198b0 <__kernel_sin+0xd0>
 8019926:	bf00      	nop
 8019928:	55555549 	.word	0x55555549
 801992c:	3fc55555 	.word	0x3fc55555
 8019930:	3fe00000 	.word	0x3fe00000
 8019934:	5acfd57c 	.word	0x5acfd57c
 8019938:	3de5d93a 	.word	0x3de5d93a
 801993c:	8a2b9ceb 	.word	0x8a2b9ceb
 8019940:	3e5ae5e6 	.word	0x3e5ae5e6
 8019944:	57b1fe7d 	.word	0x57b1fe7d
 8019948:	3ec71de3 	.word	0x3ec71de3
 801994c:	19c161d5 	.word	0x19c161d5
 8019950:	3f2a01a0 	.word	0x3f2a01a0
 8019954:	1110f8a6 	.word	0x1110f8a6
 8019958:	3f811111 	.word	0x3f811111
 801995c:	00000000 	.word	0x00000000

08019960 <__ieee754_rem_pio2>:
 8019960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019964:	ed2d 8b02 	vpush	{d8}
 8019968:	ec55 4b10 	vmov	r4, r5, d0
 801996c:	4bca      	ldr	r3, [pc, #808]	; (8019c98 <__ieee754_rem_pio2+0x338>)
 801996e:	b08b      	sub	sp, #44	; 0x2c
 8019970:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8019974:	4598      	cmp	r8, r3
 8019976:	4682      	mov	sl, r0
 8019978:	9502      	str	r5, [sp, #8]
 801997a:	dc08      	bgt.n	801998e <__ieee754_rem_pio2+0x2e>
 801997c:	2200      	movs	r2, #0
 801997e:	2300      	movs	r3, #0
 8019980:	ed80 0b00 	vstr	d0, [r0]
 8019984:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019988:	f04f 0b00 	mov.w	fp, #0
 801998c:	e028      	b.n	80199e0 <__ieee754_rem_pio2+0x80>
 801998e:	4bc3      	ldr	r3, [pc, #780]	; (8019c9c <__ieee754_rem_pio2+0x33c>)
 8019990:	4598      	cmp	r8, r3
 8019992:	dc78      	bgt.n	8019a86 <__ieee754_rem_pio2+0x126>
 8019994:	9b02      	ldr	r3, [sp, #8]
 8019996:	4ec2      	ldr	r6, [pc, #776]	; (8019ca0 <__ieee754_rem_pio2+0x340>)
 8019998:	2b00      	cmp	r3, #0
 801999a:	ee10 0a10 	vmov	r0, s0
 801999e:	a3b0      	add	r3, pc, #704	; (adr r3, 8019c60 <__ieee754_rem_pio2+0x300>)
 80199a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199a4:	4629      	mov	r1, r5
 80199a6:	dd39      	ble.n	8019a1c <__ieee754_rem_pio2+0xbc>
 80199a8:	f7e6 fc6e 	bl	8000288 <__aeabi_dsub>
 80199ac:	45b0      	cmp	r8, r6
 80199ae:	4604      	mov	r4, r0
 80199b0:	460d      	mov	r5, r1
 80199b2:	d01b      	beq.n	80199ec <__ieee754_rem_pio2+0x8c>
 80199b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8019c68 <__ieee754_rem_pio2+0x308>)
 80199b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ba:	f7e6 fc65 	bl	8000288 <__aeabi_dsub>
 80199be:	4602      	mov	r2, r0
 80199c0:	460b      	mov	r3, r1
 80199c2:	e9ca 2300 	strd	r2, r3, [sl]
 80199c6:	4620      	mov	r0, r4
 80199c8:	4629      	mov	r1, r5
 80199ca:	f7e6 fc5d 	bl	8000288 <__aeabi_dsub>
 80199ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8019c68 <__ieee754_rem_pio2+0x308>)
 80199d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199d4:	f7e6 fc58 	bl	8000288 <__aeabi_dsub>
 80199d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80199dc:	f04f 0b01 	mov.w	fp, #1
 80199e0:	4658      	mov	r0, fp
 80199e2:	b00b      	add	sp, #44	; 0x2c
 80199e4:	ecbd 8b02 	vpop	{d8}
 80199e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8019c70 <__ieee754_rem_pio2+0x310>)
 80199ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199f2:	f7e6 fc49 	bl	8000288 <__aeabi_dsub>
 80199f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8019c78 <__ieee754_rem_pio2+0x318>)
 80199f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199fc:	4604      	mov	r4, r0
 80199fe:	460d      	mov	r5, r1
 8019a00:	f7e6 fc42 	bl	8000288 <__aeabi_dsub>
 8019a04:	4602      	mov	r2, r0
 8019a06:	460b      	mov	r3, r1
 8019a08:	e9ca 2300 	strd	r2, r3, [sl]
 8019a0c:	4620      	mov	r0, r4
 8019a0e:	4629      	mov	r1, r5
 8019a10:	f7e6 fc3a 	bl	8000288 <__aeabi_dsub>
 8019a14:	a398      	add	r3, pc, #608	; (adr r3, 8019c78 <__ieee754_rem_pio2+0x318>)
 8019a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a1a:	e7db      	b.n	80199d4 <__ieee754_rem_pio2+0x74>
 8019a1c:	f7e6 fc36 	bl	800028c <__adddf3>
 8019a20:	45b0      	cmp	r8, r6
 8019a22:	4604      	mov	r4, r0
 8019a24:	460d      	mov	r5, r1
 8019a26:	d016      	beq.n	8019a56 <__ieee754_rem_pio2+0xf6>
 8019a28:	a38f      	add	r3, pc, #572	; (adr r3, 8019c68 <__ieee754_rem_pio2+0x308>)
 8019a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a2e:	f7e6 fc2d 	bl	800028c <__adddf3>
 8019a32:	4602      	mov	r2, r0
 8019a34:	460b      	mov	r3, r1
 8019a36:	e9ca 2300 	strd	r2, r3, [sl]
 8019a3a:	4620      	mov	r0, r4
 8019a3c:	4629      	mov	r1, r5
 8019a3e:	f7e6 fc23 	bl	8000288 <__aeabi_dsub>
 8019a42:	a389      	add	r3, pc, #548	; (adr r3, 8019c68 <__ieee754_rem_pio2+0x308>)
 8019a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a48:	f7e6 fc20 	bl	800028c <__adddf3>
 8019a4c:	f04f 3bff 	mov.w	fp, #4294967295
 8019a50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019a54:	e7c4      	b.n	80199e0 <__ieee754_rem_pio2+0x80>
 8019a56:	a386      	add	r3, pc, #536	; (adr r3, 8019c70 <__ieee754_rem_pio2+0x310>)
 8019a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a5c:	f7e6 fc16 	bl	800028c <__adddf3>
 8019a60:	a385      	add	r3, pc, #532	; (adr r3, 8019c78 <__ieee754_rem_pio2+0x318>)
 8019a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a66:	4604      	mov	r4, r0
 8019a68:	460d      	mov	r5, r1
 8019a6a:	f7e6 fc0f 	bl	800028c <__adddf3>
 8019a6e:	4602      	mov	r2, r0
 8019a70:	460b      	mov	r3, r1
 8019a72:	e9ca 2300 	strd	r2, r3, [sl]
 8019a76:	4620      	mov	r0, r4
 8019a78:	4629      	mov	r1, r5
 8019a7a:	f7e6 fc05 	bl	8000288 <__aeabi_dsub>
 8019a7e:	a37e      	add	r3, pc, #504	; (adr r3, 8019c78 <__ieee754_rem_pio2+0x318>)
 8019a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a84:	e7e0      	b.n	8019a48 <__ieee754_rem_pio2+0xe8>
 8019a86:	4b87      	ldr	r3, [pc, #540]	; (8019ca4 <__ieee754_rem_pio2+0x344>)
 8019a88:	4598      	cmp	r8, r3
 8019a8a:	f300 80d8 	bgt.w	8019c3e <__ieee754_rem_pio2+0x2de>
 8019a8e:	f000 f9a1 	bl	8019dd4 <fabs>
 8019a92:	ec55 4b10 	vmov	r4, r5, d0
 8019a96:	ee10 0a10 	vmov	r0, s0
 8019a9a:	a379      	add	r3, pc, #484	; (adr r3, 8019c80 <__ieee754_rem_pio2+0x320>)
 8019a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019aa0:	4629      	mov	r1, r5
 8019aa2:	f7e6 fda9 	bl	80005f8 <__aeabi_dmul>
 8019aa6:	4b80      	ldr	r3, [pc, #512]	; (8019ca8 <__ieee754_rem_pio2+0x348>)
 8019aa8:	2200      	movs	r2, #0
 8019aaa:	f7e6 fbef 	bl	800028c <__adddf3>
 8019aae:	f7e7 f853 	bl	8000b58 <__aeabi_d2iz>
 8019ab2:	4683      	mov	fp, r0
 8019ab4:	f7e6 fd36 	bl	8000524 <__aeabi_i2d>
 8019ab8:	4602      	mov	r2, r0
 8019aba:	460b      	mov	r3, r1
 8019abc:	ec43 2b18 	vmov	d8, r2, r3
 8019ac0:	a367      	add	r3, pc, #412	; (adr r3, 8019c60 <__ieee754_rem_pio2+0x300>)
 8019ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ac6:	f7e6 fd97 	bl	80005f8 <__aeabi_dmul>
 8019aca:	4602      	mov	r2, r0
 8019acc:	460b      	mov	r3, r1
 8019ace:	4620      	mov	r0, r4
 8019ad0:	4629      	mov	r1, r5
 8019ad2:	f7e6 fbd9 	bl	8000288 <__aeabi_dsub>
 8019ad6:	a364      	add	r3, pc, #400	; (adr r3, 8019c68 <__ieee754_rem_pio2+0x308>)
 8019ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019adc:	4606      	mov	r6, r0
 8019ade:	460f      	mov	r7, r1
 8019ae0:	ec51 0b18 	vmov	r0, r1, d8
 8019ae4:	f7e6 fd88 	bl	80005f8 <__aeabi_dmul>
 8019ae8:	f1bb 0f1f 	cmp.w	fp, #31
 8019aec:	4604      	mov	r4, r0
 8019aee:	460d      	mov	r5, r1
 8019af0:	dc0d      	bgt.n	8019b0e <__ieee754_rem_pio2+0x1ae>
 8019af2:	4b6e      	ldr	r3, [pc, #440]	; (8019cac <__ieee754_rem_pio2+0x34c>)
 8019af4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8019af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019afc:	4543      	cmp	r3, r8
 8019afe:	d006      	beq.n	8019b0e <__ieee754_rem_pio2+0x1ae>
 8019b00:	4622      	mov	r2, r4
 8019b02:	462b      	mov	r3, r5
 8019b04:	4630      	mov	r0, r6
 8019b06:	4639      	mov	r1, r7
 8019b08:	f7e6 fbbe 	bl	8000288 <__aeabi_dsub>
 8019b0c:	e00e      	b.n	8019b2c <__ieee754_rem_pio2+0x1cc>
 8019b0e:	462b      	mov	r3, r5
 8019b10:	4622      	mov	r2, r4
 8019b12:	4630      	mov	r0, r6
 8019b14:	4639      	mov	r1, r7
 8019b16:	f7e6 fbb7 	bl	8000288 <__aeabi_dsub>
 8019b1a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019b1e:	9303      	str	r3, [sp, #12]
 8019b20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019b24:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8019b28:	2b10      	cmp	r3, #16
 8019b2a:	dc02      	bgt.n	8019b32 <__ieee754_rem_pio2+0x1d2>
 8019b2c:	e9ca 0100 	strd	r0, r1, [sl]
 8019b30:	e039      	b.n	8019ba6 <__ieee754_rem_pio2+0x246>
 8019b32:	a34f      	add	r3, pc, #316	; (adr r3, 8019c70 <__ieee754_rem_pio2+0x310>)
 8019b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b38:	ec51 0b18 	vmov	r0, r1, d8
 8019b3c:	f7e6 fd5c 	bl	80005f8 <__aeabi_dmul>
 8019b40:	4604      	mov	r4, r0
 8019b42:	460d      	mov	r5, r1
 8019b44:	4602      	mov	r2, r0
 8019b46:	460b      	mov	r3, r1
 8019b48:	4630      	mov	r0, r6
 8019b4a:	4639      	mov	r1, r7
 8019b4c:	f7e6 fb9c 	bl	8000288 <__aeabi_dsub>
 8019b50:	4602      	mov	r2, r0
 8019b52:	460b      	mov	r3, r1
 8019b54:	4680      	mov	r8, r0
 8019b56:	4689      	mov	r9, r1
 8019b58:	4630      	mov	r0, r6
 8019b5a:	4639      	mov	r1, r7
 8019b5c:	f7e6 fb94 	bl	8000288 <__aeabi_dsub>
 8019b60:	4622      	mov	r2, r4
 8019b62:	462b      	mov	r3, r5
 8019b64:	f7e6 fb90 	bl	8000288 <__aeabi_dsub>
 8019b68:	a343      	add	r3, pc, #268	; (adr r3, 8019c78 <__ieee754_rem_pio2+0x318>)
 8019b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b6e:	4604      	mov	r4, r0
 8019b70:	460d      	mov	r5, r1
 8019b72:	ec51 0b18 	vmov	r0, r1, d8
 8019b76:	f7e6 fd3f 	bl	80005f8 <__aeabi_dmul>
 8019b7a:	4622      	mov	r2, r4
 8019b7c:	462b      	mov	r3, r5
 8019b7e:	f7e6 fb83 	bl	8000288 <__aeabi_dsub>
 8019b82:	4602      	mov	r2, r0
 8019b84:	460b      	mov	r3, r1
 8019b86:	4604      	mov	r4, r0
 8019b88:	460d      	mov	r5, r1
 8019b8a:	4640      	mov	r0, r8
 8019b8c:	4649      	mov	r1, r9
 8019b8e:	f7e6 fb7b 	bl	8000288 <__aeabi_dsub>
 8019b92:	9a03      	ldr	r2, [sp, #12]
 8019b94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019b98:	1ad3      	subs	r3, r2, r3
 8019b9a:	2b31      	cmp	r3, #49	; 0x31
 8019b9c:	dc24      	bgt.n	8019be8 <__ieee754_rem_pio2+0x288>
 8019b9e:	e9ca 0100 	strd	r0, r1, [sl]
 8019ba2:	4646      	mov	r6, r8
 8019ba4:	464f      	mov	r7, r9
 8019ba6:	e9da 8900 	ldrd	r8, r9, [sl]
 8019baa:	4630      	mov	r0, r6
 8019bac:	4642      	mov	r2, r8
 8019bae:	464b      	mov	r3, r9
 8019bb0:	4639      	mov	r1, r7
 8019bb2:	f7e6 fb69 	bl	8000288 <__aeabi_dsub>
 8019bb6:	462b      	mov	r3, r5
 8019bb8:	4622      	mov	r2, r4
 8019bba:	f7e6 fb65 	bl	8000288 <__aeabi_dsub>
 8019bbe:	9b02      	ldr	r3, [sp, #8]
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019bc6:	f6bf af0b 	bge.w	80199e0 <__ieee754_rem_pio2+0x80>
 8019bca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019bce:	f8ca 3004 	str.w	r3, [sl, #4]
 8019bd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019bd6:	f8ca 8000 	str.w	r8, [sl]
 8019bda:	f8ca 0008 	str.w	r0, [sl, #8]
 8019bde:	f8ca 300c 	str.w	r3, [sl, #12]
 8019be2:	f1cb 0b00 	rsb	fp, fp, #0
 8019be6:	e6fb      	b.n	80199e0 <__ieee754_rem_pio2+0x80>
 8019be8:	a327      	add	r3, pc, #156	; (adr r3, 8019c88 <__ieee754_rem_pio2+0x328>)
 8019bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bee:	ec51 0b18 	vmov	r0, r1, d8
 8019bf2:	f7e6 fd01 	bl	80005f8 <__aeabi_dmul>
 8019bf6:	4604      	mov	r4, r0
 8019bf8:	460d      	mov	r5, r1
 8019bfa:	4602      	mov	r2, r0
 8019bfc:	460b      	mov	r3, r1
 8019bfe:	4640      	mov	r0, r8
 8019c00:	4649      	mov	r1, r9
 8019c02:	f7e6 fb41 	bl	8000288 <__aeabi_dsub>
 8019c06:	4602      	mov	r2, r0
 8019c08:	460b      	mov	r3, r1
 8019c0a:	4606      	mov	r6, r0
 8019c0c:	460f      	mov	r7, r1
 8019c0e:	4640      	mov	r0, r8
 8019c10:	4649      	mov	r1, r9
 8019c12:	f7e6 fb39 	bl	8000288 <__aeabi_dsub>
 8019c16:	4622      	mov	r2, r4
 8019c18:	462b      	mov	r3, r5
 8019c1a:	f7e6 fb35 	bl	8000288 <__aeabi_dsub>
 8019c1e:	a31c      	add	r3, pc, #112	; (adr r3, 8019c90 <__ieee754_rem_pio2+0x330>)
 8019c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c24:	4604      	mov	r4, r0
 8019c26:	460d      	mov	r5, r1
 8019c28:	ec51 0b18 	vmov	r0, r1, d8
 8019c2c:	f7e6 fce4 	bl	80005f8 <__aeabi_dmul>
 8019c30:	4622      	mov	r2, r4
 8019c32:	462b      	mov	r3, r5
 8019c34:	f7e6 fb28 	bl	8000288 <__aeabi_dsub>
 8019c38:	4604      	mov	r4, r0
 8019c3a:	460d      	mov	r5, r1
 8019c3c:	e760      	b.n	8019b00 <__ieee754_rem_pio2+0x1a0>
 8019c3e:	4b1c      	ldr	r3, [pc, #112]	; (8019cb0 <__ieee754_rem_pio2+0x350>)
 8019c40:	4598      	cmp	r8, r3
 8019c42:	dd37      	ble.n	8019cb4 <__ieee754_rem_pio2+0x354>
 8019c44:	ee10 2a10 	vmov	r2, s0
 8019c48:	462b      	mov	r3, r5
 8019c4a:	4620      	mov	r0, r4
 8019c4c:	4629      	mov	r1, r5
 8019c4e:	f7e6 fb1b 	bl	8000288 <__aeabi_dsub>
 8019c52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019c56:	e9ca 0100 	strd	r0, r1, [sl]
 8019c5a:	e695      	b.n	8019988 <__ieee754_rem_pio2+0x28>
 8019c5c:	f3af 8000 	nop.w
 8019c60:	54400000 	.word	0x54400000
 8019c64:	3ff921fb 	.word	0x3ff921fb
 8019c68:	1a626331 	.word	0x1a626331
 8019c6c:	3dd0b461 	.word	0x3dd0b461
 8019c70:	1a600000 	.word	0x1a600000
 8019c74:	3dd0b461 	.word	0x3dd0b461
 8019c78:	2e037073 	.word	0x2e037073
 8019c7c:	3ba3198a 	.word	0x3ba3198a
 8019c80:	6dc9c883 	.word	0x6dc9c883
 8019c84:	3fe45f30 	.word	0x3fe45f30
 8019c88:	2e000000 	.word	0x2e000000
 8019c8c:	3ba3198a 	.word	0x3ba3198a
 8019c90:	252049c1 	.word	0x252049c1
 8019c94:	397b839a 	.word	0x397b839a
 8019c98:	3fe921fb 	.word	0x3fe921fb
 8019c9c:	4002d97b 	.word	0x4002d97b
 8019ca0:	3ff921fb 	.word	0x3ff921fb
 8019ca4:	413921fb 	.word	0x413921fb
 8019ca8:	3fe00000 	.word	0x3fe00000
 8019cac:	0801d170 	.word	0x0801d170
 8019cb0:	7fefffff 	.word	0x7fefffff
 8019cb4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8019cb8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8019cbc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8019cc0:	4620      	mov	r0, r4
 8019cc2:	460d      	mov	r5, r1
 8019cc4:	f7e6 ff48 	bl	8000b58 <__aeabi_d2iz>
 8019cc8:	f7e6 fc2c 	bl	8000524 <__aeabi_i2d>
 8019ccc:	4602      	mov	r2, r0
 8019cce:	460b      	mov	r3, r1
 8019cd0:	4620      	mov	r0, r4
 8019cd2:	4629      	mov	r1, r5
 8019cd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019cd8:	f7e6 fad6 	bl	8000288 <__aeabi_dsub>
 8019cdc:	4b21      	ldr	r3, [pc, #132]	; (8019d64 <__ieee754_rem_pio2+0x404>)
 8019cde:	2200      	movs	r2, #0
 8019ce0:	f7e6 fc8a 	bl	80005f8 <__aeabi_dmul>
 8019ce4:	460d      	mov	r5, r1
 8019ce6:	4604      	mov	r4, r0
 8019ce8:	f7e6 ff36 	bl	8000b58 <__aeabi_d2iz>
 8019cec:	f7e6 fc1a 	bl	8000524 <__aeabi_i2d>
 8019cf0:	4602      	mov	r2, r0
 8019cf2:	460b      	mov	r3, r1
 8019cf4:	4620      	mov	r0, r4
 8019cf6:	4629      	mov	r1, r5
 8019cf8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019cfc:	f7e6 fac4 	bl	8000288 <__aeabi_dsub>
 8019d00:	4b18      	ldr	r3, [pc, #96]	; (8019d64 <__ieee754_rem_pio2+0x404>)
 8019d02:	2200      	movs	r2, #0
 8019d04:	f7e6 fc78 	bl	80005f8 <__aeabi_dmul>
 8019d08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019d0c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8019d10:	2703      	movs	r7, #3
 8019d12:	2400      	movs	r4, #0
 8019d14:	2500      	movs	r5, #0
 8019d16:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8019d1a:	4622      	mov	r2, r4
 8019d1c:	462b      	mov	r3, r5
 8019d1e:	46b9      	mov	r9, r7
 8019d20:	3f01      	subs	r7, #1
 8019d22:	f7e6 fed1 	bl	8000ac8 <__aeabi_dcmpeq>
 8019d26:	2800      	cmp	r0, #0
 8019d28:	d1f5      	bne.n	8019d16 <__ieee754_rem_pio2+0x3b6>
 8019d2a:	4b0f      	ldr	r3, [pc, #60]	; (8019d68 <__ieee754_rem_pio2+0x408>)
 8019d2c:	9301      	str	r3, [sp, #4]
 8019d2e:	2302      	movs	r3, #2
 8019d30:	9300      	str	r3, [sp, #0]
 8019d32:	4632      	mov	r2, r6
 8019d34:	464b      	mov	r3, r9
 8019d36:	4651      	mov	r1, sl
 8019d38:	a804      	add	r0, sp, #16
 8019d3a:	f000 faa1 	bl	801a280 <__kernel_rem_pio2>
 8019d3e:	9b02      	ldr	r3, [sp, #8]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	4683      	mov	fp, r0
 8019d44:	f6bf ae4c 	bge.w	80199e0 <__ieee754_rem_pio2+0x80>
 8019d48:	e9da 2100 	ldrd	r2, r1, [sl]
 8019d4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019d50:	e9ca 2300 	strd	r2, r3, [sl]
 8019d54:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8019d58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019d5c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8019d60:	e73f      	b.n	8019be2 <__ieee754_rem_pio2+0x282>
 8019d62:	bf00      	nop
 8019d64:	41700000 	.word	0x41700000
 8019d68:	0801d1f0 	.word	0x0801d1f0

08019d6c <acos>:
 8019d6c:	b538      	push	{r3, r4, r5, lr}
 8019d6e:	ed2d 8b02 	vpush	{d8}
 8019d72:	ec55 4b10 	vmov	r4, r5, d0
 8019d76:	f000 fdd3 	bl	801a920 <__ieee754_acos>
 8019d7a:	4622      	mov	r2, r4
 8019d7c:	462b      	mov	r3, r5
 8019d7e:	4620      	mov	r0, r4
 8019d80:	4629      	mov	r1, r5
 8019d82:	eeb0 8a40 	vmov.f32	s16, s0
 8019d86:	eef0 8a60 	vmov.f32	s17, s1
 8019d8a:	f7e6 fecf 	bl	8000b2c <__aeabi_dcmpun>
 8019d8e:	b9a8      	cbnz	r0, 8019dbc <acos+0x50>
 8019d90:	ec45 4b10 	vmov	d0, r4, r5
 8019d94:	f000 f81e 	bl	8019dd4 <fabs>
 8019d98:	4b0c      	ldr	r3, [pc, #48]	; (8019dcc <acos+0x60>)
 8019d9a:	ec51 0b10 	vmov	r0, r1, d0
 8019d9e:	2200      	movs	r2, #0
 8019da0:	f7e6 feba 	bl	8000b18 <__aeabi_dcmpgt>
 8019da4:	b150      	cbz	r0, 8019dbc <acos+0x50>
 8019da6:	f7fc fe07 	bl	80169b8 <__errno>
 8019daa:	ecbd 8b02 	vpop	{d8}
 8019dae:	2321      	movs	r3, #33	; 0x21
 8019db0:	6003      	str	r3, [r0, #0]
 8019db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019db6:	4806      	ldr	r0, [pc, #24]	; (8019dd0 <acos+0x64>)
 8019db8:	f7fc be42 	b.w	8016a40 <nan>
 8019dbc:	eeb0 0a48 	vmov.f32	s0, s16
 8019dc0:	eef0 0a68 	vmov.f32	s1, s17
 8019dc4:	ecbd 8b02 	vpop	{d8}
 8019dc8:	bd38      	pop	{r3, r4, r5, pc}
 8019dca:	bf00      	nop
 8019dcc:	3ff00000 	.word	0x3ff00000
 8019dd0:	0801cf2e 	.word	0x0801cf2e

08019dd4 <fabs>:
 8019dd4:	ec51 0b10 	vmov	r0, r1, d0
 8019dd8:	ee10 2a10 	vmov	r2, s0
 8019ddc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019de0:	ec43 2b10 	vmov	d0, r2, r3
 8019de4:	4770      	bx	lr
	...

08019de8 <__ieee754_expf>:
 8019de8:	ee10 2a10 	vmov	r2, s0
 8019dec:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8019df0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019df4:	d902      	bls.n	8019dfc <__ieee754_expf+0x14>
 8019df6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019dfa:	4770      	bx	lr
 8019dfc:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8019e00:	d106      	bne.n	8019e10 <__ieee754_expf+0x28>
 8019e02:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8019f3c <__ieee754_expf+0x154>
 8019e06:	2900      	cmp	r1, #0
 8019e08:	bf18      	it	ne
 8019e0a:	eeb0 0a67 	vmovne.f32	s0, s15
 8019e0e:	4770      	bx	lr
 8019e10:	484b      	ldr	r0, [pc, #300]	; (8019f40 <__ieee754_expf+0x158>)
 8019e12:	4282      	cmp	r2, r0
 8019e14:	dd02      	ble.n	8019e1c <__ieee754_expf+0x34>
 8019e16:	2000      	movs	r0, #0
 8019e18:	f000 b950 	b.w	801a0bc <__math_oflowf>
 8019e1c:	2a00      	cmp	r2, #0
 8019e1e:	da05      	bge.n	8019e2c <__ieee754_expf+0x44>
 8019e20:	4a48      	ldr	r2, [pc, #288]	; (8019f44 <__ieee754_expf+0x15c>)
 8019e22:	4293      	cmp	r3, r2
 8019e24:	d902      	bls.n	8019e2c <__ieee754_expf+0x44>
 8019e26:	2000      	movs	r0, #0
 8019e28:	f000 b942 	b.w	801a0b0 <__math_uflowf>
 8019e2c:	4a46      	ldr	r2, [pc, #280]	; (8019f48 <__ieee754_expf+0x160>)
 8019e2e:	4293      	cmp	r3, r2
 8019e30:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8019e34:	d952      	bls.n	8019edc <__ieee754_expf+0xf4>
 8019e36:	4a45      	ldr	r2, [pc, #276]	; (8019f4c <__ieee754_expf+0x164>)
 8019e38:	4293      	cmp	r3, r2
 8019e3a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8019e3e:	d834      	bhi.n	8019eaa <__ieee754_expf+0xc2>
 8019e40:	4b43      	ldr	r3, [pc, #268]	; (8019f50 <__ieee754_expf+0x168>)
 8019e42:	4413      	add	r3, r2
 8019e44:	ed93 7a00 	vldr	s14, [r3]
 8019e48:	4b42      	ldr	r3, [pc, #264]	; (8019f54 <__ieee754_expf+0x16c>)
 8019e4a:	4413      	add	r3, r2
 8019e4c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8019e50:	f1c1 0201 	rsb	r2, r1, #1
 8019e54:	edd3 7a00 	vldr	s15, [r3]
 8019e58:	1a52      	subs	r2, r2, r1
 8019e5a:	ee37 0a67 	vsub.f32	s0, s14, s15
 8019e5e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8019e62:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8019f58 <__ieee754_expf+0x170>
 8019e66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8019f5c <__ieee754_expf+0x174>
 8019e6a:	eee6 6a05 	vfma.f32	s13, s12, s10
 8019e6e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8019f60 <__ieee754_expf+0x178>
 8019e72:	eea6 5a86 	vfma.f32	s10, s13, s12
 8019e76:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8019f64 <__ieee754_expf+0x17c>
 8019e7a:	eee5 6a06 	vfma.f32	s13, s10, s12
 8019e7e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8019f68 <__ieee754_expf+0x180>
 8019e82:	eea6 5a86 	vfma.f32	s10, s13, s12
 8019e86:	eef0 6a40 	vmov.f32	s13, s0
 8019e8a:	eee5 6a46 	vfms.f32	s13, s10, s12
 8019e8e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8019e92:	ee20 5a26 	vmul.f32	s10, s0, s13
 8019e96:	bb92      	cbnz	r2, 8019efe <__ieee754_expf+0x116>
 8019e98:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8019e9c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8019ea0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019ea4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8019ea8:	4770      	bx	lr
 8019eaa:	4b30      	ldr	r3, [pc, #192]	; (8019f6c <__ieee754_expf+0x184>)
 8019eac:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8019f70 <__ieee754_expf+0x188>
 8019eb0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8019f74 <__ieee754_expf+0x18c>
 8019eb4:	4413      	add	r3, r2
 8019eb6:	edd3 7a00 	vldr	s15, [r3]
 8019eba:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019ebe:	eeb0 7a40 	vmov.f32	s14, s0
 8019ec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019ec6:	ee17 2a90 	vmov	r2, s15
 8019eca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019ece:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019ed2:	eddf 6a29 	vldr	s13, [pc, #164]	; 8019f78 <__ieee754_expf+0x190>
 8019ed6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019eda:	e7be      	b.n	8019e5a <__ieee754_expf+0x72>
 8019edc:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8019ee0:	d20b      	bcs.n	8019efa <__ieee754_expf+0x112>
 8019ee2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8019f7c <__ieee754_expf+0x194>
 8019ee6:	ee70 6a26 	vadd.f32	s13, s0, s13
 8019eea:	eef4 6ae5 	vcmpe.f32	s13, s11
 8019eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ef2:	dd02      	ble.n	8019efa <__ieee754_expf+0x112>
 8019ef4:	ee30 0a25 	vadd.f32	s0, s0, s11
 8019ef8:	4770      	bx	lr
 8019efa:	2200      	movs	r2, #0
 8019efc:	e7af      	b.n	8019e5e <__ieee754_expf+0x76>
 8019efe:	ee36 6a66 	vsub.f32	s12, s12, s13
 8019f02:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8019f06:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8019f0a:	bfb8      	it	lt
 8019f0c:	3264      	addlt	r2, #100	; 0x64
 8019f0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019f12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f16:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8019f1a:	ee17 3a90 	vmov	r3, s15
 8019f1e:	bfab      	itete	ge
 8019f20:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8019f24:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8019f28:	ee00 3a10 	vmovge	s0, r3
 8019f2c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8019f80 <__ieee754_expf+0x198>
 8019f30:	bfbc      	itt	lt
 8019f32:	ee00 3a10 	vmovlt	s0, r3
 8019f36:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8019f3a:	4770      	bx	lr
 8019f3c:	00000000 	.word	0x00000000
 8019f40:	42b17217 	.word	0x42b17217
 8019f44:	42cff1b5 	.word	0x42cff1b5
 8019f48:	3eb17218 	.word	0x3eb17218
 8019f4c:	3f851591 	.word	0x3f851591
 8019f50:	0801d300 	.word	0x0801d300
 8019f54:	0801d308 	.word	0x0801d308
 8019f58:	3331bb4c 	.word	0x3331bb4c
 8019f5c:	b5ddea0e 	.word	0xb5ddea0e
 8019f60:	388ab355 	.word	0x388ab355
 8019f64:	bb360b61 	.word	0xbb360b61
 8019f68:	3e2aaaab 	.word	0x3e2aaaab
 8019f6c:	0801d2f8 	.word	0x0801d2f8
 8019f70:	3fb8aa3b 	.word	0x3fb8aa3b
 8019f74:	3f317180 	.word	0x3f317180
 8019f78:	3717f7d1 	.word	0x3717f7d1
 8019f7c:	7149f2ca 	.word	0x7149f2ca
 8019f80:	0d800000 	.word	0x0d800000
 8019f84:	00000000 	.word	0x00000000

08019f88 <scalbn>:
 8019f88:	b570      	push	{r4, r5, r6, lr}
 8019f8a:	ec55 4b10 	vmov	r4, r5, d0
 8019f8e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8019f92:	4606      	mov	r6, r0
 8019f94:	462b      	mov	r3, r5
 8019f96:	b999      	cbnz	r1, 8019fc0 <scalbn+0x38>
 8019f98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019f9c:	4323      	orrs	r3, r4
 8019f9e:	d03f      	beq.n	801a020 <scalbn+0x98>
 8019fa0:	4b35      	ldr	r3, [pc, #212]	; (801a078 <scalbn+0xf0>)
 8019fa2:	4629      	mov	r1, r5
 8019fa4:	ee10 0a10 	vmov	r0, s0
 8019fa8:	2200      	movs	r2, #0
 8019faa:	f7e6 fb25 	bl	80005f8 <__aeabi_dmul>
 8019fae:	4b33      	ldr	r3, [pc, #204]	; (801a07c <scalbn+0xf4>)
 8019fb0:	429e      	cmp	r6, r3
 8019fb2:	4604      	mov	r4, r0
 8019fb4:	460d      	mov	r5, r1
 8019fb6:	da10      	bge.n	8019fda <scalbn+0x52>
 8019fb8:	a327      	add	r3, pc, #156	; (adr r3, 801a058 <scalbn+0xd0>)
 8019fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fbe:	e01f      	b.n	801a000 <scalbn+0x78>
 8019fc0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8019fc4:	4291      	cmp	r1, r2
 8019fc6:	d10c      	bne.n	8019fe2 <scalbn+0x5a>
 8019fc8:	ee10 2a10 	vmov	r2, s0
 8019fcc:	4620      	mov	r0, r4
 8019fce:	4629      	mov	r1, r5
 8019fd0:	f7e6 f95c 	bl	800028c <__adddf3>
 8019fd4:	4604      	mov	r4, r0
 8019fd6:	460d      	mov	r5, r1
 8019fd8:	e022      	b.n	801a020 <scalbn+0x98>
 8019fda:	460b      	mov	r3, r1
 8019fdc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8019fe0:	3936      	subs	r1, #54	; 0x36
 8019fe2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8019fe6:	4296      	cmp	r6, r2
 8019fe8:	dd0d      	ble.n	801a006 <scalbn+0x7e>
 8019fea:	2d00      	cmp	r5, #0
 8019fec:	a11c      	add	r1, pc, #112	; (adr r1, 801a060 <scalbn+0xd8>)
 8019fee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ff2:	da02      	bge.n	8019ffa <scalbn+0x72>
 8019ff4:	a11c      	add	r1, pc, #112	; (adr r1, 801a068 <scalbn+0xe0>)
 8019ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ffa:	a319      	add	r3, pc, #100	; (adr r3, 801a060 <scalbn+0xd8>)
 8019ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a000:	f7e6 fafa 	bl	80005f8 <__aeabi_dmul>
 801a004:	e7e6      	b.n	8019fd4 <scalbn+0x4c>
 801a006:	1872      	adds	r2, r6, r1
 801a008:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a00c:	428a      	cmp	r2, r1
 801a00e:	dcec      	bgt.n	8019fea <scalbn+0x62>
 801a010:	2a00      	cmp	r2, #0
 801a012:	dd08      	ble.n	801a026 <scalbn+0x9e>
 801a014:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a018:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a01c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a020:	ec45 4b10 	vmov	d0, r4, r5
 801a024:	bd70      	pop	{r4, r5, r6, pc}
 801a026:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a02a:	da08      	bge.n	801a03e <scalbn+0xb6>
 801a02c:	2d00      	cmp	r5, #0
 801a02e:	a10a      	add	r1, pc, #40	; (adr r1, 801a058 <scalbn+0xd0>)
 801a030:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a034:	dac0      	bge.n	8019fb8 <scalbn+0x30>
 801a036:	a10e      	add	r1, pc, #56	; (adr r1, 801a070 <scalbn+0xe8>)
 801a038:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a03c:	e7bc      	b.n	8019fb8 <scalbn+0x30>
 801a03e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a042:	3236      	adds	r2, #54	; 0x36
 801a044:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a048:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a04c:	4620      	mov	r0, r4
 801a04e:	4b0c      	ldr	r3, [pc, #48]	; (801a080 <scalbn+0xf8>)
 801a050:	2200      	movs	r2, #0
 801a052:	e7d5      	b.n	801a000 <scalbn+0x78>
 801a054:	f3af 8000 	nop.w
 801a058:	c2f8f359 	.word	0xc2f8f359
 801a05c:	01a56e1f 	.word	0x01a56e1f
 801a060:	8800759c 	.word	0x8800759c
 801a064:	7e37e43c 	.word	0x7e37e43c
 801a068:	8800759c 	.word	0x8800759c
 801a06c:	fe37e43c 	.word	0xfe37e43c
 801a070:	c2f8f359 	.word	0xc2f8f359
 801a074:	81a56e1f 	.word	0x81a56e1f
 801a078:	43500000 	.word	0x43500000
 801a07c:	ffff3cb0 	.word	0xffff3cb0
 801a080:	3c900000 	.word	0x3c900000

0801a084 <with_errnof>:
 801a084:	b513      	push	{r0, r1, r4, lr}
 801a086:	4604      	mov	r4, r0
 801a088:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a08c:	f7fc fc94 	bl	80169b8 <__errno>
 801a090:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a094:	6004      	str	r4, [r0, #0]
 801a096:	b002      	add	sp, #8
 801a098:	bd10      	pop	{r4, pc}

0801a09a <xflowf>:
 801a09a:	b130      	cbz	r0, 801a0aa <xflowf+0x10>
 801a09c:	eef1 7a40 	vneg.f32	s15, s0
 801a0a0:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a0a4:	2022      	movs	r0, #34	; 0x22
 801a0a6:	f7ff bfed 	b.w	801a084 <with_errnof>
 801a0aa:	eef0 7a40 	vmov.f32	s15, s0
 801a0ae:	e7f7      	b.n	801a0a0 <xflowf+0x6>

0801a0b0 <__math_uflowf>:
 801a0b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a0b8 <__math_uflowf+0x8>
 801a0b4:	f7ff bff1 	b.w	801a09a <xflowf>
 801a0b8:	10000000 	.word	0x10000000

0801a0bc <__math_oflowf>:
 801a0bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a0c4 <__math_oflowf+0x8>
 801a0c0:	f7ff bfeb 	b.w	801a09a <xflowf>
 801a0c4:	70000000 	.word	0x70000000

0801a0c8 <__ieee754_sqrt>:
 801a0c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0cc:	ec55 4b10 	vmov	r4, r5, d0
 801a0d0:	4e67      	ldr	r6, [pc, #412]	; (801a270 <__ieee754_sqrt+0x1a8>)
 801a0d2:	43ae      	bics	r6, r5
 801a0d4:	ee10 0a10 	vmov	r0, s0
 801a0d8:	ee10 2a10 	vmov	r2, s0
 801a0dc:	4629      	mov	r1, r5
 801a0de:	462b      	mov	r3, r5
 801a0e0:	d10d      	bne.n	801a0fe <__ieee754_sqrt+0x36>
 801a0e2:	f7e6 fa89 	bl	80005f8 <__aeabi_dmul>
 801a0e6:	4602      	mov	r2, r0
 801a0e8:	460b      	mov	r3, r1
 801a0ea:	4620      	mov	r0, r4
 801a0ec:	4629      	mov	r1, r5
 801a0ee:	f7e6 f8cd 	bl	800028c <__adddf3>
 801a0f2:	4604      	mov	r4, r0
 801a0f4:	460d      	mov	r5, r1
 801a0f6:	ec45 4b10 	vmov	d0, r4, r5
 801a0fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0fe:	2d00      	cmp	r5, #0
 801a100:	dc0b      	bgt.n	801a11a <__ieee754_sqrt+0x52>
 801a102:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a106:	4326      	orrs	r6, r4
 801a108:	d0f5      	beq.n	801a0f6 <__ieee754_sqrt+0x2e>
 801a10a:	b135      	cbz	r5, 801a11a <__ieee754_sqrt+0x52>
 801a10c:	f7e6 f8bc 	bl	8000288 <__aeabi_dsub>
 801a110:	4602      	mov	r2, r0
 801a112:	460b      	mov	r3, r1
 801a114:	f7e6 fb9a 	bl	800084c <__aeabi_ddiv>
 801a118:	e7eb      	b.n	801a0f2 <__ieee754_sqrt+0x2a>
 801a11a:	1509      	asrs	r1, r1, #20
 801a11c:	f000 808d 	beq.w	801a23a <__ieee754_sqrt+0x172>
 801a120:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a124:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801a128:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a12c:	07c9      	lsls	r1, r1, #31
 801a12e:	bf5c      	itt	pl
 801a130:	005b      	lslpl	r3, r3, #1
 801a132:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801a136:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a13a:	bf58      	it	pl
 801a13c:	0052      	lslpl	r2, r2, #1
 801a13e:	2500      	movs	r5, #0
 801a140:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a144:	1076      	asrs	r6, r6, #1
 801a146:	0052      	lsls	r2, r2, #1
 801a148:	f04f 0e16 	mov.w	lr, #22
 801a14c:	46ac      	mov	ip, r5
 801a14e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a152:	eb0c 0001 	add.w	r0, ip, r1
 801a156:	4298      	cmp	r0, r3
 801a158:	bfde      	ittt	le
 801a15a:	1a1b      	suble	r3, r3, r0
 801a15c:	eb00 0c01 	addle.w	ip, r0, r1
 801a160:	186d      	addle	r5, r5, r1
 801a162:	005b      	lsls	r3, r3, #1
 801a164:	f1be 0e01 	subs.w	lr, lr, #1
 801a168:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a16c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a170:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a174:	d1ed      	bne.n	801a152 <__ieee754_sqrt+0x8a>
 801a176:	4674      	mov	r4, lr
 801a178:	2720      	movs	r7, #32
 801a17a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801a17e:	4563      	cmp	r3, ip
 801a180:	eb01 000e 	add.w	r0, r1, lr
 801a184:	dc02      	bgt.n	801a18c <__ieee754_sqrt+0xc4>
 801a186:	d113      	bne.n	801a1b0 <__ieee754_sqrt+0xe8>
 801a188:	4290      	cmp	r0, r2
 801a18a:	d811      	bhi.n	801a1b0 <__ieee754_sqrt+0xe8>
 801a18c:	2800      	cmp	r0, #0
 801a18e:	eb00 0e01 	add.w	lr, r0, r1
 801a192:	da57      	bge.n	801a244 <__ieee754_sqrt+0x17c>
 801a194:	f1be 0f00 	cmp.w	lr, #0
 801a198:	db54      	blt.n	801a244 <__ieee754_sqrt+0x17c>
 801a19a:	f10c 0801 	add.w	r8, ip, #1
 801a19e:	eba3 030c 	sub.w	r3, r3, ip
 801a1a2:	4290      	cmp	r0, r2
 801a1a4:	bf88      	it	hi
 801a1a6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801a1aa:	1a12      	subs	r2, r2, r0
 801a1ac:	440c      	add	r4, r1
 801a1ae:	46c4      	mov	ip, r8
 801a1b0:	005b      	lsls	r3, r3, #1
 801a1b2:	3f01      	subs	r7, #1
 801a1b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a1b8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a1bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a1c0:	d1dd      	bne.n	801a17e <__ieee754_sqrt+0xb6>
 801a1c2:	4313      	orrs	r3, r2
 801a1c4:	d01b      	beq.n	801a1fe <__ieee754_sqrt+0x136>
 801a1c6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801a274 <__ieee754_sqrt+0x1ac>
 801a1ca:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801a278 <__ieee754_sqrt+0x1b0>
 801a1ce:	e9da 0100 	ldrd	r0, r1, [sl]
 801a1d2:	e9db 2300 	ldrd	r2, r3, [fp]
 801a1d6:	f7e6 f857 	bl	8000288 <__aeabi_dsub>
 801a1da:	e9da 8900 	ldrd	r8, r9, [sl]
 801a1de:	4602      	mov	r2, r0
 801a1e0:	460b      	mov	r3, r1
 801a1e2:	4640      	mov	r0, r8
 801a1e4:	4649      	mov	r1, r9
 801a1e6:	f7e6 fc83 	bl	8000af0 <__aeabi_dcmple>
 801a1ea:	b140      	cbz	r0, 801a1fe <__ieee754_sqrt+0x136>
 801a1ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 801a1f0:	e9da 0100 	ldrd	r0, r1, [sl]
 801a1f4:	e9db 2300 	ldrd	r2, r3, [fp]
 801a1f8:	d126      	bne.n	801a248 <__ieee754_sqrt+0x180>
 801a1fa:	3501      	adds	r5, #1
 801a1fc:	463c      	mov	r4, r7
 801a1fe:	106a      	asrs	r2, r5, #1
 801a200:	0863      	lsrs	r3, r4, #1
 801a202:	07e9      	lsls	r1, r5, #31
 801a204:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a208:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a20c:	bf48      	it	mi
 801a20e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a212:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801a216:	461c      	mov	r4, r3
 801a218:	e76d      	b.n	801a0f6 <__ieee754_sqrt+0x2e>
 801a21a:	0ad3      	lsrs	r3, r2, #11
 801a21c:	3815      	subs	r0, #21
 801a21e:	0552      	lsls	r2, r2, #21
 801a220:	2b00      	cmp	r3, #0
 801a222:	d0fa      	beq.n	801a21a <__ieee754_sqrt+0x152>
 801a224:	02dc      	lsls	r4, r3, #11
 801a226:	d50a      	bpl.n	801a23e <__ieee754_sqrt+0x176>
 801a228:	f1c1 0420 	rsb	r4, r1, #32
 801a22c:	fa22 f404 	lsr.w	r4, r2, r4
 801a230:	1e4d      	subs	r5, r1, #1
 801a232:	408a      	lsls	r2, r1
 801a234:	4323      	orrs	r3, r4
 801a236:	1b41      	subs	r1, r0, r5
 801a238:	e772      	b.n	801a120 <__ieee754_sqrt+0x58>
 801a23a:	4608      	mov	r0, r1
 801a23c:	e7f0      	b.n	801a220 <__ieee754_sqrt+0x158>
 801a23e:	005b      	lsls	r3, r3, #1
 801a240:	3101      	adds	r1, #1
 801a242:	e7ef      	b.n	801a224 <__ieee754_sqrt+0x15c>
 801a244:	46e0      	mov	r8, ip
 801a246:	e7aa      	b.n	801a19e <__ieee754_sqrt+0xd6>
 801a248:	f7e6 f820 	bl	800028c <__adddf3>
 801a24c:	e9da 8900 	ldrd	r8, r9, [sl]
 801a250:	4602      	mov	r2, r0
 801a252:	460b      	mov	r3, r1
 801a254:	4640      	mov	r0, r8
 801a256:	4649      	mov	r1, r9
 801a258:	f7e6 fc40 	bl	8000adc <__aeabi_dcmplt>
 801a25c:	b120      	cbz	r0, 801a268 <__ieee754_sqrt+0x1a0>
 801a25e:	1ca0      	adds	r0, r4, #2
 801a260:	bf08      	it	eq
 801a262:	3501      	addeq	r5, #1
 801a264:	3402      	adds	r4, #2
 801a266:	e7ca      	b.n	801a1fe <__ieee754_sqrt+0x136>
 801a268:	3401      	adds	r4, #1
 801a26a:	f024 0401 	bic.w	r4, r4, #1
 801a26e:	e7c6      	b.n	801a1fe <__ieee754_sqrt+0x136>
 801a270:	7ff00000 	.word	0x7ff00000
 801a274:	200002f8 	.word	0x200002f8
 801a278:	20000300 	.word	0x20000300
 801a27c:	00000000 	.word	0x00000000

0801a280 <__kernel_rem_pio2>:
 801a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a284:	ed2d 8b02 	vpush	{d8}
 801a288:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801a28c:	f112 0f14 	cmn.w	r2, #20
 801a290:	9306      	str	r3, [sp, #24]
 801a292:	9104      	str	r1, [sp, #16]
 801a294:	4bc2      	ldr	r3, [pc, #776]	; (801a5a0 <__kernel_rem_pio2+0x320>)
 801a296:	99a4      	ldr	r1, [sp, #656]	; 0x290
 801a298:	9009      	str	r0, [sp, #36]	; 0x24
 801a29a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a29e:	9300      	str	r3, [sp, #0]
 801a2a0:	9b06      	ldr	r3, [sp, #24]
 801a2a2:	f103 33ff 	add.w	r3, r3, #4294967295
 801a2a6:	bfa8      	it	ge
 801a2a8:	1ed4      	subge	r4, r2, #3
 801a2aa:	9305      	str	r3, [sp, #20]
 801a2ac:	bfb2      	itee	lt
 801a2ae:	2400      	movlt	r4, #0
 801a2b0:	2318      	movge	r3, #24
 801a2b2:	fb94 f4f3 	sdivge	r4, r4, r3
 801a2b6:	f06f 0317 	mvn.w	r3, #23
 801a2ba:	fb04 3303 	mla	r3, r4, r3, r3
 801a2be:	eb03 0a02 	add.w	sl, r3, r2
 801a2c2:	9b00      	ldr	r3, [sp, #0]
 801a2c4:	9a05      	ldr	r2, [sp, #20]
 801a2c6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 801a590 <__kernel_rem_pio2+0x310>
 801a2ca:	eb03 0802 	add.w	r8, r3, r2
 801a2ce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801a2d0:	1aa7      	subs	r7, r4, r2
 801a2d2:	ae20      	add	r6, sp, #128	; 0x80
 801a2d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801a2d8:	2500      	movs	r5, #0
 801a2da:	4545      	cmp	r5, r8
 801a2dc:	dd13      	ble.n	801a306 <__kernel_rem_pio2+0x86>
 801a2de:	9b06      	ldr	r3, [sp, #24]
 801a2e0:	aa20      	add	r2, sp, #128	; 0x80
 801a2e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801a2e6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801a2ea:	f04f 0800 	mov.w	r8, #0
 801a2ee:	9b00      	ldr	r3, [sp, #0]
 801a2f0:	4598      	cmp	r8, r3
 801a2f2:	dc31      	bgt.n	801a358 <__kernel_rem_pio2+0xd8>
 801a2f4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 801a590 <__kernel_rem_pio2+0x310>
 801a2f8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801a2fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a300:	462f      	mov	r7, r5
 801a302:	2600      	movs	r6, #0
 801a304:	e01b      	b.n	801a33e <__kernel_rem_pio2+0xbe>
 801a306:	42ef      	cmn	r7, r5
 801a308:	d407      	bmi.n	801a31a <__kernel_rem_pio2+0x9a>
 801a30a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801a30e:	f7e6 f909 	bl	8000524 <__aeabi_i2d>
 801a312:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a316:	3501      	adds	r5, #1
 801a318:	e7df      	b.n	801a2da <__kernel_rem_pio2+0x5a>
 801a31a:	ec51 0b18 	vmov	r0, r1, d8
 801a31e:	e7f8      	b.n	801a312 <__kernel_rem_pio2+0x92>
 801a320:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a324:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801a328:	f7e6 f966 	bl	80005f8 <__aeabi_dmul>
 801a32c:	4602      	mov	r2, r0
 801a32e:	460b      	mov	r3, r1
 801a330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a334:	f7e5 ffaa 	bl	800028c <__adddf3>
 801a338:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a33c:	3601      	adds	r6, #1
 801a33e:	9b05      	ldr	r3, [sp, #20]
 801a340:	429e      	cmp	r6, r3
 801a342:	f1a7 0708 	sub.w	r7, r7, #8
 801a346:	ddeb      	ble.n	801a320 <__kernel_rem_pio2+0xa0>
 801a348:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a34c:	f108 0801 	add.w	r8, r8, #1
 801a350:	ecab 7b02 	vstmia	fp!, {d7}
 801a354:	3508      	adds	r5, #8
 801a356:	e7ca      	b.n	801a2ee <__kernel_rem_pio2+0x6e>
 801a358:	9b00      	ldr	r3, [sp, #0]
 801a35a:	aa0c      	add	r2, sp, #48	; 0x30
 801a35c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a360:	930b      	str	r3, [sp, #44]	; 0x2c
 801a362:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801a364:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801a368:	9c00      	ldr	r4, [sp, #0]
 801a36a:	930a      	str	r3, [sp, #40]	; 0x28
 801a36c:	00e3      	lsls	r3, r4, #3
 801a36e:	9308      	str	r3, [sp, #32]
 801a370:	ab98      	add	r3, sp, #608	; 0x260
 801a372:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a376:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801a37a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801a37e:	ab70      	add	r3, sp, #448	; 0x1c0
 801a380:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801a384:	46c3      	mov	fp, r8
 801a386:	46a1      	mov	r9, r4
 801a388:	f1b9 0f00 	cmp.w	r9, #0
 801a38c:	f1a5 0508 	sub.w	r5, r5, #8
 801a390:	dc77      	bgt.n	801a482 <__kernel_rem_pio2+0x202>
 801a392:	ec47 6b10 	vmov	d0, r6, r7
 801a396:	4650      	mov	r0, sl
 801a398:	f7ff fdf6 	bl	8019f88 <scalbn>
 801a39c:	ec57 6b10 	vmov	r6, r7, d0
 801a3a0:	2200      	movs	r2, #0
 801a3a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801a3a6:	ee10 0a10 	vmov	r0, s0
 801a3aa:	4639      	mov	r1, r7
 801a3ac:	f7e6 f924 	bl	80005f8 <__aeabi_dmul>
 801a3b0:	ec41 0b10 	vmov	d0, r0, r1
 801a3b4:	f7ff f8cc 	bl	8019550 <floor>
 801a3b8:	4b7a      	ldr	r3, [pc, #488]	; (801a5a4 <__kernel_rem_pio2+0x324>)
 801a3ba:	ec51 0b10 	vmov	r0, r1, d0
 801a3be:	2200      	movs	r2, #0
 801a3c0:	f7e6 f91a 	bl	80005f8 <__aeabi_dmul>
 801a3c4:	4602      	mov	r2, r0
 801a3c6:	460b      	mov	r3, r1
 801a3c8:	4630      	mov	r0, r6
 801a3ca:	4639      	mov	r1, r7
 801a3cc:	f7e5 ff5c 	bl	8000288 <__aeabi_dsub>
 801a3d0:	460f      	mov	r7, r1
 801a3d2:	4606      	mov	r6, r0
 801a3d4:	f7e6 fbc0 	bl	8000b58 <__aeabi_d2iz>
 801a3d8:	9002      	str	r0, [sp, #8]
 801a3da:	f7e6 f8a3 	bl	8000524 <__aeabi_i2d>
 801a3de:	4602      	mov	r2, r0
 801a3e0:	460b      	mov	r3, r1
 801a3e2:	4630      	mov	r0, r6
 801a3e4:	4639      	mov	r1, r7
 801a3e6:	f7e5 ff4f 	bl	8000288 <__aeabi_dsub>
 801a3ea:	f1ba 0f00 	cmp.w	sl, #0
 801a3ee:	4606      	mov	r6, r0
 801a3f0:	460f      	mov	r7, r1
 801a3f2:	dd6d      	ble.n	801a4d0 <__kernel_rem_pio2+0x250>
 801a3f4:	1e61      	subs	r1, r4, #1
 801a3f6:	ab0c      	add	r3, sp, #48	; 0x30
 801a3f8:	9d02      	ldr	r5, [sp, #8]
 801a3fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a3fe:	f1ca 0018 	rsb	r0, sl, #24
 801a402:	fa43 f200 	asr.w	r2, r3, r0
 801a406:	4415      	add	r5, r2
 801a408:	4082      	lsls	r2, r0
 801a40a:	1a9b      	subs	r3, r3, r2
 801a40c:	aa0c      	add	r2, sp, #48	; 0x30
 801a40e:	9502      	str	r5, [sp, #8]
 801a410:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a414:	f1ca 0217 	rsb	r2, sl, #23
 801a418:	fa43 fb02 	asr.w	fp, r3, r2
 801a41c:	f1bb 0f00 	cmp.w	fp, #0
 801a420:	dd65      	ble.n	801a4ee <__kernel_rem_pio2+0x26e>
 801a422:	9b02      	ldr	r3, [sp, #8]
 801a424:	2200      	movs	r2, #0
 801a426:	3301      	adds	r3, #1
 801a428:	9302      	str	r3, [sp, #8]
 801a42a:	4615      	mov	r5, r2
 801a42c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801a430:	4294      	cmp	r4, r2
 801a432:	f300 809f 	bgt.w	801a574 <__kernel_rem_pio2+0x2f4>
 801a436:	f1ba 0f00 	cmp.w	sl, #0
 801a43a:	dd07      	ble.n	801a44c <__kernel_rem_pio2+0x1cc>
 801a43c:	f1ba 0f01 	cmp.w	sl, #1
 801a440:	f000 80c1 	beq.w	801a5c6 <__kernel_rem_pio2+0x346>
 801a444:	f1ba 0f02 	cmp.w	sl, #2
 801a448:	f000 80c7 	beq.w	801a5da <__kernel_rem_pio2+0x35a>
 801a44c:	f1bb 0f02 	cmp.w	fp, #2
 801a450:	d14d      	bne.n	801a4ee <__kernel_rem_pio2+0x26e>
 801a452:	4632      	mov	r2, r6
 801a454:	463b      	mov	r3, r7
 801a456:	4954      	ldr	r1, [pc, #336]	; (801a5a8 <__kernel_rem_pio2+0x328>)
 801a458:	2000      	movs	r0, #0
 801a45a:	f7e5 ff15 	bl	8000288 <__aeabi_dsub>
 801a45e:	4606      	mov	r6, r0
 801a460:	460f      	mov	r7, r1
 801a462:	2d00      	cmp	r5, #0
 801a464:	d043      	beq.n	801a4ee <__kernel_rem_pio2+0x26e>
 801a466:	4650      	mov	r0, sl
 801a468:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 801a598 <__kernel_rem_pio2+0x318>
 801a46c:	f7ff fd8c 	bl	8019f88 <scalbn>
 801a470:	4630      	mov	r0, r6
 801a472:	4639      	mov	r1, r7
 801a474:	ec53 2b10 	vmov	r2, r3, d0
 801a478:	f7e5 ff06 	bl	8000288 <__aeabi_dsub>
 801a47c:	4606      	mov	r6, r0
 801a47e:	460f      	mov	r7, r1
 801a480:	e035      	b.n	801a4ee <__kernel_rem_pio2+0x26e>
 801a482:	4b4a      	ldr	r3, [pc, #296]	; (801a5ac <__kernel_rem_pio2+0x32c>)
 801a484:	2200      	movs	r2, #0
 801a486:	4630      	mov	r0, r6
 801a488:	4639      	mov	r1, r7
 801a48a:	f7e6 f8b5 	bl	80005f8 <__aeabi_dmul>
 801a48e:	f7e6 fb63 	bl	8000b58 <__aeabi_d2iz>
 801a492:	f7e6 f847 	bl	8000524 <__aeabi_i2d>
 801a496:	4602      	mov	r2, r0
 801a498:	460b      	mov	r3, r1
 801a49a:	ec43 2b18 	vmov	d8, r2, r3
 801a49e:	4b44      	ldr	r3, [pc, #272]	; (801a5b0 <__kernel_rem_pio2+0x330>)
 801a4a0:	2200      	movs	r2, #0
 801a4a2:	f7e6 f8a9 	bl	80005f8 <__aeabi_dmul>
 801a4a6:	4602      	mov	r2, r0
 801a4a8:	460b      	mov	r3, r1
 801a4aa:	4630      	mov	r0, r6
 801a4ac:	4639      	mov	r1, r7
 801a4ae:	f7e5 feeb 	bl	8000288 <__aeabi_dsub>
 801a4b2:	f7e6 fb51 	bl	8000b58 <__aeabi_d2iz>
 801a4b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a4ba:	f84b 0b04 	str.w	r0, [fp], #4
 801a4be:	ec51 0b18 	vmov	r0, r1, d8
 801a4c2:	f7e5 fee3 	bl	800028c <__adddf3>
 801a4c6:	f109 39ff 	add.w	r9, r9, #4294967295
 801a4ca:	4606      	mov	r6, r0
 801a4cc:	460f      	mov	r7, r1
 801a4ce:	e75b      	b.n	801a388 <__kernel_rem_pio2+0x108>
 801a4d0:	d106      	bne.n	801a4e0 <__kernel_rem_pio2+0x260>
 801a4d2:	1e63      	subs	r3, r4, #1
 801a4d4:	aa0c      	add	r2, sp, #48	; 0x30
 801a4d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a4da:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801a4de:	e79d      	b.n	801a41c <__kernel_rem_pio2+0x19c>
 801a4e0:	4b34      	ldr	r3, [pc, #208]	; (801a5b4 <__kernel_rem_pio2+0x334>)
 801a4e2:	2200      	movs	r2, #0
 801a4e4:	f7e6 fb0e 	bl	8000b04 <__aeabi_dcmpge>
 801a4e8:	2800      	cmp	r0, #0
 801a4ea:	d140      	bne.n	801a56e <__kernel_rem_pio2+0x2ee>
 801a4ec:	4683      	mov	fp, r0
 801a4ee:	2200      	movs	r2, #0
 801a4f0:	2300      	movs	r3, #0
 801a4f2:	4630      	mov	r0, r6
 801a4f4:	4639      	mov	r1, r7
 801a4f6:	f7e6 fae7 	bl	8000ac8 <__aeabi_dcmpeq>
 801a4fa:	2800      	cmp	r0, #0
 801a4fc:	f000 80c1 	beq.w	801a682 <__kernel_rem_pio2+0x402>
 801a500:	1e65      	subs	r5, r4, #1
 801a502:	462b      	mov	r3, r5
 801a504:	2200      	movs	r2, #0
 801a506:	9900      	ldr	r1, [sp, #0]
 801a508:	428b      	cmp	r3, r1
 801a50a:	da6d      	bge.n	801a5e8 <__kernel_rem_pio2+0x368>
 801a50c:	2a00      	cmp	r2, #0
 801a50e:	f000 808a 	beq.w	801a626 <__kernel_rem_pio2+0x3a6>
 801a512:	ab0c      	add	r3, sp, #48	; 0x30
 801a514:	f1aa 0a18 	sub.w	sl, sl, #24
 801a518:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	f000 80ae 	beq.w	801a67e <__kernel_rem_pio2+0x3fe>
 801a522:	4650      	mov	r0, sl
 801a524:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 801a598 <__kernel_rem_pio2+0x318>
 801a528:	f7ff fd2e 	bl	8019f88 <scalbn>
 801a52c:	1c6b      	adds	r3, r5, #1
 801a52e:	00da      	lsls	r2, r3, #3
 801a530:	9205      	str	r2, [sp, #20]
 801a532:	ec57 6b10 	vmov	r6, r7, d0
 801a536:	aa70      	add	r2, sp, #448	; 0x1c0
 801a538:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801a5ac <__kernel_rem_pio2+0x32c>
 801a53c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 801a540:	462c      	mov	r4, r5
 801a542:	f04f 0800 	mov.w	r8, #0
 801a546:	2c00      	cmp	r4, #0
 801a548:	f280 80d4 	bge.w	801a6f4 <__kernel_rem_pio2+0x474>
 801a54c:	462c      	mov	r4, r5
 801a54e:	2c00      	cmp	r4, #0
 801a550:	f2c0 8102 	blt.w	801a758 <__kernel_rem_pio2+0x4d8>
 801a554:	4b18      	ldr	r3, [pc, #96]	; (801a5b8 <__kernel_rem_pio2+0x338>)
 801a556:	461e      	mov	r6, r3
 801a558:	ab70      	add	r3, sp, #448	; 0x1c0
 801a55a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801a55e:	1b2b      	subs	r3, r5, r4
 801a560:	f04f 0900 	mov.w	r9, #0
 801a564:	f04f 0a00 	mov.w	sl, #0
 801a568:	2700      	movs	r7, #0
 801a56a:	9306      	str	r3, [sp, #24]
 801a56c:	e0e6      	b.n	801a73c <__kernel_rem_pio2+0x4bc>
 801a56e:	f04f 0b02 	mov.w	fp, #2
 801a572:	e756      	b.n	801a422 <__kernel_rem_pio2+0x1a2>
 801a574:	f8d8 3000 	ldr.w	r3, [r8]
 801a578:	bb05      	cbnz	r5, 801a5bc <__kernel_rem_pio2+0x33c>
 801a57a:	b123      	cbz	r3, 801a586 <__kernel_rem_pio2+0x306>
 801a57c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a580:	f8c8 3000 	str.w	r3, [r8]
 801a584:	2301      	movs	r3, #1
 801a586:	3201      	adds	r2, #1
 801a588:	f108 0804 	add.w	r8, r8, #4
 801a58c:	461d      	mov	r5, r3
 801a58e:	e74f      	b.n	801a430 <__kernel_rem_pio2+0x1b0>
	...
 801a59c:	3ff00000 	.word	0x3ff00000
 801a5a0:	0801d350 	.word	0x0801d350
 801a5a4:	40200000 	.word	0x40200000
 801a5a8:	3ff00000 	.word	0x3ff00000
 801a5ac:	3e700000 	.word	0x3e700000
 801a5b0:	41700000 	.word	0x41700000
 801a5b4:	3fe00000 	.word	0x3fe00000
 801a5b8:	0801d310 	.word	0x0801d310
 801a5bc:	1acb      	subs	r3, r1, r3
 801a5be:	f8c8 3000 	str.w	r3, [r8]
 801a5c2:	462b      	mov	r3, r5
 801a5c4:	e7df      	b.n	801a586 <__kernel_rem_pio2+0x306>
 801a5c6:	1e62      	subs	r2, r4, #1
 801a5c8:	ab0c      	add	r3, sp, #48	; 0x30
 801a5ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a5ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a5d2:	a90c      	add	r1, sp, #48	; 0x30
 801a5d4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a5d8:	e738      	b.n	801a44c <__kernel_rem_pio2+0x1cc>
 801a5da:	1e62      	subs	r2, r4, #1
 801a5dc:	ab0c      	add	r3, sp, #48	; 0x30
 801a5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a5e2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a5e6:	e7f4      	b.n	801a5d2 <__kernel_rem_pio2+0x352>
 801a5e8:	a90c      	add	r1, sp, #48	; 0x30
 801a5ea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a5ee:	3b01      	subs	r3, #1
 801a5f0:	430a      	orrs	r2, r1
 801a5f2:	e788      	b.n	801a506 <__kernel_rem_pio2+0x286>
 801a5f4:	3301      	adds	r3, #1
 801a5f6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a5fa:	2900      	cmp	r1, #0
 801a5fc:	d0fa      	beq.n	801a5f4 <__kernel_rem_pio2+0x374>
 801a5fe:	9a08      	ldr	r2, [sp, #32]
 801a600:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801a604:	446a      	add	r2, sp
 801a606:	3a98      	subs	r2, #152	; 0x98
 801a608:	9208      	str	r2, [sp, #32]
 801a60a:	9a06      	ldr	r2, [sp, #24]
 801a60c:	a920      	add	r1, sp, #128	; 0x80
 801a60e:	18a2      	adds	r2, r4, r2
 801a610:	18e3      	adds	r3, r4, r3
 801a612:	f104 0801 	add.w	r8, r4, #1
 801a616:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801a61a:	9302      	str	r3, [sp, #8]
 801a61c:	9b02      	ldr	r3, [sp, #8]
 801a61e:	4543      	cmp	r3, r8
 801a620:	da04      	bge.n	801a62c <__kernel_rem_pio2+0x3ac>
 801a622:	461c      	mov	r4, r3
 801a624:	e6a2      	b.n	801a36c <__kernel_rem_pio2+0xec>
 801a626:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a628:	2301      	movs	r3, #1
 801a62a:	e7e4      	b.n	801a5f6 <__kernel_rem_pio2+0x376>
 801a62c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a62e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801a632:	f7e5 ff77 	bl	8000524 <__aeabi_i2d>
 801a636:	e8e5 0102 	strd	r0, r1, [r5], #8
 801a63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a63c:	46ab      	mov	fp, r5
 801a63e:	461c      	mov	r4, r3
 801a640:	f04f 0900 	mov.w	r9, #0
 801a644:	2600      	movs	r6, #0
 801a646:	2700      	movs	r7, #0
 801a648:	9b05      	ldr	r3, [sp, #20]
 801a64a:	4599      	cmp	r9, r3
 801a64c:	dd06      	ble.n	801a65c <__kernel_rem_pio2+0x3dc>
 801a64e:	9b08      	ldr	r3, [sp, #32]
 801a650:	e8e3 6702 	strd	r6, r7, [r3], #8
 801a654:	f108 0801 	add.w	r8, r8, #1
 801a658:	9308      	str	r3, [sp, #32]
 801a65a:	e7df      	b.n	801a61c <__kernel_rem_pio2+0x39c>
 801a65c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a660:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a664:	f7e5 ffc8 	bl	80005f8 <__aeabi_dmul>
 801a668:	4602      	mov	r2, r0
 801a66a:	460b      	mov	r3, r1
 801a66c:	4630      	mov	r0, r6
 801a66e:	4639      	mov	r1, r7
 801a670:	f7e5 fe0c 	bl	800028c <__adddf3>
 801a674:	f109 0901 	add.w	r9, r9, #1
 801a678:	4606      	mov	r6, r0
 801a67a:	460f      	mov	r7, r1
 801a67c:	e7e4      	b.n	801a648 <__kernel_rem_pio2+0x3c8>
 801a67e:	3d01      	subs	r5, #1
 801a680:	e747      	b.n	801a512 <__kernel_rem_pio2+0x292>
 801a682:	ec47 6b10 	vmov	d0, r6, r7
 801a686:	f1ca 0000 	rsb	r0, sl, #0
 801a68a:	f7ff fc7d 	bl	8019f88 <scalbn>
 801a68e:	ec57 6b10 	vmov	r6, r7, d0
 801a692:	4ba0      	ldr	r3, [pc, #640]	; (801a914 <__kernel_rem_pio2+0x694>)
 801a694:	ee10 0a10 	vmov	r0, s0
 801a698:	2200      	movs	r2, #0
 801a69a:	4639      	mov	r1, r7
 801a69c:	f7e6 fa32 	bl	8000b04 <__aeabi_dcmpge>
 801a6a0:	b1f8      	cbz	r0, 801a6e2 <__kernel_rem_pio2+0x462>
 801a6a2:	4b9d      	ldr	r3, [pc, #628]	; (801a918 <__kernel_rem_pio2+0x698>)
 801a6a4:	2200      	movs	r2, #0
 801a6a6:	4630      	mov	r0, r6
 801a6a8:	4639      	mov	r1, r7
 801a6aa:	f7e5 ffa5 	bl	80005f8 <__aeabi_dmul>
 801a6ae:	f7e6 fa53 	bl	8000b58 <__aeabi_d2iz>
 801a6b2:	4680      	mov	r8, r0
 801a6b4:	f7e5 ff36 	bl	8000524 <__aeabi_i2d>
 801a6b8:	4b96      	ldr	r3, [pc, #600]	; (801a914 <__kernel_rem_pio2+0x694>)
 801a6ba:	2200      	movs	r2, #0
 801a6bc:	f7e5 ff9c 	bl	80005f8 <__aeabi_dmul>
 801a6c0:	460b      	mov	r3, r1
 801a6c2:	4602      	mov	r2, r0
 801a6c4:	4639      	mov	r1, r7
 801a6c6:	4630      	mov	r0, r6
 801a6c8:	f7e5 fdde 	bl	8000288 <__aeabi_dsub>
 801a6cc:	f7e6 fa44 	bl	8000b58 <__aeabi_d2iz>
 801a6d0:	1c65      	adds	r5, r4, #1
 801a6d2:	ab0c      	add	r3, sp, #48	; 0x30
 801a6d4:	f10a 0a18 	add.w	sl, sl, #24
 801a6d8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a6dc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801a6e0:	e71f      	b.n	801a522 <__kernel_rem_pio2+0x2a2>
 801a6e2:	4630      	mov	r0, r6
 801a6e4:	4639      	mov	r1, r7
 801a6e6:	f7e6 fa37 	bl	8000b58 <__aeabi_d2iz>
 801a6ea:	ab0c      	add	r3, sp, #48	; 0x30
 801a6ec:	4625      	mov	r5, r4
 801a6ee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a6f2:	e716      	b.n	801a522 <__kernel_rem_pio2+0x2a2>
 801a6f4:	ab0c      	add	r3, sp, #48	; 0x30
 801a6f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a6fa:	f7e5 ff13 	bl	8000524 <__aeabi_i2d>
 801a6fe:	4632      	mov	r2, r6
 801a700:	463b      	mov	r3, r7
 801a702:	f7e5 ff79 	bl	80005f8 <__aeabi_dmul>
 801a706:	4642      	mov	r2, r8
 801a708:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801a70c:	464b      	mov	r3, r9
 801a70e:	4630      	mov	r0, r6
 801a710:	4639      	mov	r1, r7
 801a712:	f7e5 ff71 	bl	80005f8 <__aeabi_dmul>
 801a716:	3c01      	subs	r4, #1
 801a718:	4606      	mov	r6, r0
 801a71a:	460f      	mov	r7, r1
 801a71c:	e713      	b.n	801a546 <__kernel_rem_pio2+0x2c6>
 801a71e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801a722:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801a726:	f7e5 ff67 	bl	80005f8 <__aeabi_dmul>
 801a72a:	4602      	mov	r2, r0
 801a72c:	460b      	mov	r3, r1
 801a72e:	4648      	mov	r0, r9
 801a730:	4651      	mov	r1, sl
 801a732:	f7e5 fdab 	bl	800028c <__adddf3>
 801a736:	3701      	adds	r7, #1
 801a738:	4681      	mov	r9, r0
 801a73a:	468a      	mov	sl, r1
 801a73c:	9b00      	ldr	r3, [sp, #0]
 801a73e:	429f      	cmp	r7, r3
 801a740:	dc02      	bgt.n	801a748 <__kernel_rem_pio2+0x4c8>
 801a742:	9b06      	ldr	r3, [sp, #24]
 801a744:	429f      	cmp	r7, r3
 801a746:	ddea      	ble.n	801a71e <__kernel_rem_pio2+0x49e>
 801a748:	9a06      	ldr	r2, [sp, #24]
 801a74a:	ab48      	add	r3, sp, #288	; 0x120
 801a74c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 801a750:	e9c6 9a00 	strd	r9, sl, [r6]
 801a754:	3c01      	subs	r4, #1
 801a756:	e6fa      	b.n	801a54e <__kernel_rem_pio2+0x2ce>
 801a758:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801a75a:	2b02      	cmp	r3, #2
 801a75c:	dc0b      	bgt.n	801a776 <__kernel_rem_pio2+0x4f6>
 801a75e:	2b00      	cmp	r3, #0
 801a760:	dc39      	bgt.n	801a7d6 <__kernel_rem_pio2+0x556>
 801a762:	d05d      	beq.n	801a820 <__kernel_rem_pio2+0x5a0>
 801a764:	9b02      	ldr	r3, [sp, #8]
 801a766:	f003 0007 	and.w	r0, r3, #7
 801a76a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801a76e:	ecbd 8b02 	vpop	{d8}
 801a772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a776:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801a778:	2b03      	cmp	r3, #3
 801a77a:	d1f3      	bne.n	801a764 <__kernel_rem_pio2+0x4e4>
 801a77c:	9b05      	ldr	r3, [sp, #20]
 801a77e:	9500      	str	r5, [sp, #0]
 801a780:	f503 7318 	add.w	r3, r3, #608	; 0x260
 801a784:	eb0d 0403 	add.w	r4, sp, r3
 801a788:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 801a78c:	46a2      	mov	sl, r4
 801a78e:	9b00      	ldr	r3, [sp, #0]
 801a790:	2b00      	cmp	r3, #0
 801a792:	f1aa 0a08 	sub.w	sl, sl, #8
 801a796:	dc69      	bgt.n	801a86c <__kernel_rem_pio2+0x5ec>
 801a798:	46aa      	mov	sl, r5
 801a79a:	f1ba 0f01 	cmp.w	sl, #1
 801a79e:	f1a4 0408 	sub.w	r4, r4, #8
 801a7a2:	f300 8083 	bgt.w	801a8ac <__kernel_rem_pio2+0x62c>
 801a7a6:	9c05      	ldr	r4, [sp, #20]
 801a7a8:	ab48      	add	r3, sp, #288	; 0x120
 801a7aa:	441c      	add	r4, r3
 801a7ac:	2000      	movs	r0, #0
 801a7ae:	2100      	movs	r1, #0
 801a7b0:	2d01      	cmp	r5, #1
 801a7b2:	f300 809a 	bgt.w	801a8ea <__kernel_rem_pio2+0x66a>
 801a7b6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801a7ba:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801a7be:	f1bb 0f00 	cmp.w	fp, #0
 801a7c2:	f040 8098 	bne.w	801a8f6 <__kernel_rem_pio2+0x676>
 801a7c6:	9b04      	ldr	r3, [sp, #16]
 801a7c8:	e9c3 7800 	strd	r7, r8, [r3]
 801a7cc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801a7d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a7d4:	e7c6      	b.n	801a764 <__kernel_rem_pio2+0x4e4>
 801a7d6:	9e05      	ldr	r6, [sp, #20]
 801a7d8:	ab48      	add	r3, sp, #288	; 0x120
 801a7da:	441e      	add	r6, r3
 801a7dc:	462c      	mov	r4, r5
 801a7de:	2000      	movs	r0, #0
 801a7e0:	2100      	movs	r1, #0
 801a7e2:	2c00      	cmp	r4, #0
 801a7e4:	da33      	bge.n	801a84e <__kernel_rem_pio2+0x5ce>
 801a7e6:	f1bb 0f00 	cmp.w	fp, #0
 801a7ea:	d036      	beq.n	801a85a <__kernel_rem_pio2+0x5da>
 801a7ec:	4602      	mov	r2, r0
 801a7ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a7f2:	9c04      	ldr	r4, [sp, #16]
 801a7f4:	e9c4 2300 	strd	r2, r3, [r4]
 801a7f8:	4602      	mov	r2, r0
 801a7fa:	460b      	mov	r3, r1
 801a7fc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801a800:	f7e5 fd42 	bl	8000288 <__aeabi_dsub>
 801a804:	ae4a      	add	r6, sp, #296	; 0x128
 801a806:	2401      	movs	r4, #1
 801a808:	42a5      	cmp	r5, r4
 801a80a:	da29      	bge.n	801a860 <__kernel_rem_pio2+0x5e0>
 801a80c:	f1bb 0f00 	cmp.w	fp, #0
 801a810:	d002      	beq.n	801a818 <__kernel_rem_pio2+0x598>
 801a812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a816:	4619      	mov	r1, r3
 801a818:	9b04      	ldr	r3, [sp, #16]
 801a81a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a81e:	e7a1      	b.n	801a764 <__kernel_rem_pio2+0x4e4>
 801a820:	9c05      	ldr	r4, [sp, #20]
 801a822:	ab48      	add	r3, sp, #288	; 0x120
 801a824:	441c      	add	r4, r3
 801a826:	2000      	movs	r0, #0
 801a828:	2100      	movs	r1, #0
 801a82a:	2d00      	cmp	r5, #0
 801a82c:	da09      	bge.n	801a842 <__kernel_rem_pio2+0x5c2>
 801a82e:	f1bb 0f00 	cmp.w	fp, #0
 801a832:	d002      	beq.n	801a83a <__kernel_rem_pio2+0x5ba>
 801a834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a838:	4619      	mov	r1, r3
 801a83a:	9b04      	ldr	r3, [sp, #16]
 801a83c:	e9c3 0100 	strd	r0, r1, [r3]
 801a840:	e790      	b.n	801a764 <__kernel_rem_pio2+0x4e4>
 801a842:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a846:	f7e5 fd21 	bl	800028c <__adddf3>
 801a84a:	3d01      	subs	r5, #1
 801a84c:	e7ed      	b.n	801a82a <__kernel_rem_pio2+0x5aa>
 801a84e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801a852:	f7e5 fd1b 	bl	800028c <__adddf3>
 801a856:	3c01      	subs	r4, #1
 801a858:	e7c3      	b.n	801a7e2 <__kernel_rem_pio2+0x562>
 801a85a:	4602      	mov	r2, r0
 801a85c:	460b      	mov	r3, r1
 801a85e:	e7c8      	b.n	801a7f2 <__kernel_rem_pio2+0x572>
 801a860:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801a864:	f7e5 fd12 	bl	800028c <__adddf3>
 801a868:	3401      	adds	r4, #1
 801a86a:	e7cd      	b.n	801a808 <__kernel_rem_pio2+0x588>
 801a86c:	e9da 8900 	ldrd	r8, r9, [sl]
 801a870:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801a874:	9b00      	ldr	r3, [sp, #0]
 801a876:	3b01      	subs	r3, #1
 801a878:	9300      	str	r3, [sp, #0]
 801a87a:	4632      	mov	r2, r6
 801a87c:	463b      	mov	r3, r7
 801a87e:	4640      	mov	r0, r8
 801a880:	4649      	mov	r1, r9
 801a882:	f7e5 fd03 	bl	800028c <__adddf3>
 801a886:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a88a:	4602      	mov	r2, r0
 801a88c:	460b      	mov	r3, r1
 801a88e:	4640      	mov	r0, r8
 801a890:	4649      	mov	r1, r9
 801a892:	f7e5 fcf9 	bl	8000288 <__aeabi_dsub>
 801a896:	4632      	mov	r2, r6
 801a898:	463b      	mov	r3, r7
 801a89a:	f7e5 fcf7 	bl	800028c <__adddf3>
 801a89e:	ed9d 7b06 	vldr	d7, [sp, #24]
 801a8a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a8a6:	ed8a 7b00 	vstr	d7, [sl]
 801a8aa:	e770      	b.n	801a78e <__kernel_rem_pio2+0x50e>
 801a8ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a8b0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801a8b4:	4640      	mov	r0, r8
 801a8b6:	4632      	mov	r2, r6
 801a8b8:	463b      	mov	r3, r7
 801a8ba:	4649      	mov	r1, r9
 801a8bc:	f7e5 fce6 	bl	800028c <__adddf3>
 801a8c0:	e9cd 0100 	strd	r0, r1, [sp]
 801a8c4:	4602      	mov	r2, r0
 801a8c6:	460b      	mov	r3, r1
 801a8c8:	4640      	mov	r0, r8
 801a8ca:	4649      	mov	r1, r9
 801a8cc:	f7e5 fcdc 	bl	8000288 <__aeabi_dsub>
 801a8d0:	4632      	mov	r2, r6
 801a8d2:	463b      	mov	r3, r7
 801a8d4:	f7e5 fcda 	bl	800028c <__adddf3>
 801a8d8:	ed9d 7b00 	vldr	d7, [sp]
 801a8dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a8e0:	ed84 7b00 	vstr	d7, [r4]
 801a8e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a8e8:	e757      	b.n	801a79a <__kernel_rem_pio2+0x51a>
 801a8ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801a8ee:	f7e5 fccd 	bl	800028c <__adddf3>
 801a8f2:	3d01      	subs	r5, #1
 801a8f4:	e75c      	b.n	801a7b0 <__kernel_rem_pio2+0x530>
 801a8f6:	9b04      	ldr	r3, [sp, #16]
 801a8f8:	9a04      	ldr	r2, [sp, #16]
 801a8fa:	601f      	str	r7, [r3, #0]
 801a8fc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801a900:	605c      	str	r4, [r3, #4]
 801a902:	609d      	str	r5, [r3, #8]
 801a904:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801a908:	60d3      	str	r3, [r2, #12]
 801a90a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a90e:	6110      	str	r0, [r2, #16]
 801a910:	6153      	str	r3, [r2, #20]
 801a912:	e727      	b.n	801a764 <__kernel_rem_pio2+0x4e4>
 801a914:	41700000 	.word	0x41700000
 801a918:	3e700000 	.word	0x3e700000
 801a91c:	00000000 	.word	0x00000000

0801a920 <__ieee754_acos>:
 801a920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a924:	ec55 4b10 	vmov	r4, r5, d0
 801a928:	49b7      	ldr	r1, [pc, #732]	; (801ac08 <__ieee754_acos+0x2e8>)
 801a92a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a92e:	428b      	cmp	r3, r1
 801a930:	dd1b      	ble.n	801a96a <__ieee754_acos+0x4a>
 801a932:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 801a936:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a93a:	4323      	orrs	r3, r4
 801a93c:	d106      	bne.n	801a94c <__ieee754_acos+0x2c>
 801a93e:	2d00      	cmp	r5, #0
 801a940:	f300 8211 	bgt.w	801ad66 <__ieee754_acos+0x446>
 801a944:	ed9f 0b96 	vldr	d0, [pc, #600]	; 801aba0 <__ieee754_acos+0x280>
 801a948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a94c:	ee10 2a10 	vmov	r2, s0
 801a950:	462b      	mov	r3, r5
 801a952:	ee10 0a10 	vmov	r0, s0
 801a956:	4629      	mov	r1, r5
 801a958:	f7e5 fc96 	bl	8000288 <__aeabi_dsub>
 801a95c:	4602      	mov	r2, r0
 801a95e:	460b      	mov	r3, r1
 801a960:	f7e5 ff74 	bl	800084c <__aeabi_ddiv>
 801a964:	ec41 0b10 	vmov	d0, r0, r1
 801a968:	e7ee      	b.n	801a948 <__ieee754_acos+0x28>
 801a96a:	49a8      	ldr	r1, [pc, #672]	; (801ac0c <__ieee754_acos+0x2ec>)
 801a96c:	428b      	cmp	r3, r1
 801a96e:	f300 8087 	bgt.w	801aa80 <__ieee754_acos+0x160>
 801a972:	4aa7      	ldr	r2, [pc, #668]	; (801ac10 <__ieee754_acos+0x2f0>)
 801a974:	4293      	cmp	r3, r2
 801a976:	f340 81f9 	ble.w	801ad6c <__ieee754_acos+0x44c>
 801a97a:	ee10 2a10 	vmov	r2, s0
 801a97e:	ee10 0a10 	vmov	r0, s0
 801a982:	462b      	mov	r3, r5
 801a984:	4629      	mov	r1, r5
 801a986:	f7e5 fe37 	bl	80005f8 <__aeabi_dmul>
 801a98a:	a387      	add	r3, pc, #540	; (adr r3, 801aba8 <__ieee754_acos+0x288>)
 801a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a990:	4606      	mov	r6, r0
 801a992:	460f      	mov	r7, r1
 801a994:	f7e5 fe30 	bl	80005f8 <__aeabi_dmul>
 801a998:	a385      	add	r3, pc, #532	; (adr r3, 801abb0 <__ieee754_acos+0x290>)
 801a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a99e:	f7e5 fc75 	bl	800028c <__adddf3>
 801a9a2:	4632      	mov	r2, r6
 801a9a4:	463b      	mov	r3, r7
 801a9a6:	f7e5 fe27 	bl	80005f8 <__aeabi_dmul>
 801a9aa:	a383      	add	r3, pc, #524	; (adr r3, 801abb8 <__ieee754_acos+0x298>)
 801a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9b0:	f7e5 fc6a 	bl	8000288 <__aeabi_dsub>
 801a9b4:	4632      	mov	r2, r6
 801a9b6:	463b      	mov	r3, r7
 801a9b8:	f7e5 fe1e 	bl	80005f8 <__aeabi_dmul>
 801a9bc:	a380      	add	r3, pc, #512	; (adr r3, 801abc0 <__ieee754_acos+0x2a0>)
 801a9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9c2:	f7e5 fc63 	bl	800028c <__adddf3>
 801a9c6:	4632      	mov	r2, r6
 801a9c8:	463b      	mov	r3, r7
 801a9ca:	f7e5 fe15 	bl	80005f8 <__aeabi_dmul>
 801a9ce:	a37e      	add	r3, pc, #504	; (adr r3, 801abc8 <__ieee754_acos+0x2a8>)
 801a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9d4:	f7e5 fc58 	bl	8000288 <__aeabi_dsub>
 801a9d8:	4632      	mov	r2, r6
 801a9da:	463b      	mov	r3, r7
 801a9dc:	f7e5 fe0c 	bl	80005f8 <__aeabi_dmul>
 801a9e0:	a37b      	add	r3, pc, #492	; (adr r3, 801abd0 <__ieee754_acos+0x2b0>)
 801a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9e6:	f7e5 fc51 	bl	800028c <__adddf3>
 801a9ea:	4632      	mov	r2, r6
 801a9ec:	463b      	mov	r3, r7
 801a9ee:	f7e5 fe03 	bl	80005f8 <__aeabi_dmul>
 801a9f2:	a379      	add	r3, pc, #484	; (adr r3, 801abd8 <__ieee754_acos+0x2b8>)
 801a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9f8:	4680      	mov	r8, r0
 801a9fa:	4689      	mov	r9, r1
 801a9fc:	4630      	mov	r0, r6
 801a9fe:	4639      	mov	r1, r7
 801aa00:	f7e5 fdfa 	bl	80005f8 <__aeabi_dmul>
 801aa04:	a376      	add	r3, pc, #472	; (adr r3, 801abe0 <__ieee754_acos+0x2c0>)
 801aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa0a:	f7e5 fc3d 	bl	8000288 <__aeabi_dsub>
 801aa0e:	4632      	mov	r2, r6
 801aa10:	463b      	mov	r3, r7
 801aa12:	f7e5 fdf1 	bl	80005f8 <__aeabi_dmul>
 801aa16:	a374      	add	r3, pc, #464	; (adr r3, 801abe8 <__ieee754_acos+0x2c8>)
 801aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa1c:	f7e5 fc36 	bl	800028c <__adddf3>
 801aa20:	4632      	mov	r2, r6
 801aa22:	463b      	mov	r3, r7
 801aa24:	f7e5 fde8 	bl	80005f8 <__aeabi_dmul>
 801aa28:	a371      	add	r3, pc, #452	; (adr r3, 801abf0 <__ieee754_acos+0x2d0>)
 801aa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa2e:	f7e5 fc2b 	bl	8000288 <__aeabi_dsub>
 801aa32:	4632      	mov	r2, r6
 801aa34:	463b      	mov	r3, r7
 801aa36:	f7e5 fddf 	bl	80005f8 <__aeabi_dmul>
 801aa3a:	4b76      	ldr	r3, [pc, #472]	; (801ac14 <__ieee754_acos+0x2f4>)
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	f7e5 fc25 	bl	800028c <__adddf3>
 801aa42:	4602      	mov	r2, r0
 801aa44:	460b      	mov	r3, r1
 801aa46:	4640      	mov	r0, r8
 801aa48:	4649      	mov	r1, r9
 801aa4a:	f7e5 feff 	bl	800084c <__aeabi_ddiv>
 801aa4e:	4622      	mov	r2, r4
 801aa50:	462b      	mov	r3, r5
 801aa52:	f7e5 fdd1 	bl	80005f8 <__aeabi_dmul>
 801aa56:	4602      	mov	r2, r0
 801aa58:	460b      	mov	r3, r1
 801aa5a:	a167      	add	r1, pc, #412	; (adr r1, 801abf8 <__ieee754_acos+0x2d8>)
 801aa5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa60:	f7e5 fc12 	bl	8000288 <__aeabi_dsub>
 801aa64:	4602      	mov	r2, r0
 801aa66:	460b      	mov	r3, r1
 801aa68:	4620      	mov	r0, r4
 801aa6a:	4629      	mov	r1, r5
 801aa6c:	f7e5 fc0c 	bl	8000288 <__aeabi_dsub>
 801aa70:	4602      	mov	r2, r0
 801aa72:	460b      	mov	r3, r1
 801aa74:	a162      	add	r1, pc, #392	; (adr r1, 801ac00 <__ieee754_acos+0x2e0>)
 801aa76:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa7a:	f7e5 fc05 	bl	8000288 <__aeabi_dsub>
 801aa7e:	e771      	b.n	801a964 <__ieee754_acos+0x44>
 801aa80:	2d00      	cmp	r5, #0
 801aa82:	f280 80cb 	bge.w	801ac1c <__ieee754_acos+0x2fc>
 801aa86:	ee10 0a10 	vmov	r0, s0
 801aa8a:	4b62      	ldr	r3, [pc, #392]	; (801ac14 <__ieee754_acos+0x2f4>)
 801aa8c:	2200      	movs	r2, #0
 801aa8e:	4629      	mov	r1, r5
 801aa90:	f7e5 fbfc 	bl	800028c <__adddf3>
 801aa94:	4b60      	ldr	r3, [pc, #384]	; (801ac18 <__ieee754_acos+0x2f8>)
 801aa96:	2200      	movs	r2, #0
 801aa98:	f7e5 fdae 	bl	80005f8 <__aeabi_dmul>
 801aa9c:	a342      	add	r3, pc, #264	; (adr r3, 801aba8 <__ieee754_acos+0x288>)
 801aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaa2:	4604      	mov	r4, r0
 801aaa4:	460d      	mov	r5, r1
 801aaa6:	f7e5 fda7 	bl	80005f8 <__aeabi_dmul>
 801aaaa:	a341      	add	r3, pc, #260	; (adr r3, 801abb0 <__ieee754_acos+0x290>)
 801aaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aab0:	f7e5 fbec 	bl	800028c <__adddf3>
 801aab4:	4622      	mov	r2, r4
 801aab6:	462b      	mov	r3, r5
 801aab8:	f7e5 fd9e 	bl	80005f8 <__aeabi_dmul>
 801aabc:	a33e      	add	r3, pc, #248	; (adr r3, 801abb8 <__ieee754_acos+0x298>)
 801aabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aac2:	f7e5 fbe1 	bl	8000288 <__aeabi_dsub>
 801aac6:	4622      	mov	r2, r4
 801aac8:	462b      	mov	r3, r5
 801aaca:	f7e5 fd95 	bl	80005f8 <__aeabi_dmul>
 801aace:	a33c      	add	r3, pc, #240	; (adr r3, 801abc0 <__ieee754_acos+0x2a0>)
 801aad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aad4:	f7e5 fbda 	bl	800028c <__adddf3>
 801aad8:	4622      	mov	r2, r4
 801aada:	462b      	mov	r3, r5
 801aadc:	f7e5 fd8c 	bl	80005f8 <__aeabi_dmul>
 801aae0:	a339      	add	r3, pc, #228	; (adr r3, 801abc8 <__ieee754_acos+0x2a8>)
 801aae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aae6:	f7e5 fbcf 	bl	8000288 <__aeabi_dsub>
 801aaea:	4622      	mov	r2, r4
 801aaec:	462b      	mov	r3, r5
 801aaee:	f7e5 fd83 	bl	80005f8 <__aeabi_dmul>
 801aaf2:	a337      	add	r3, pc, #220	; (adr r3, 801abd0 <__ieee754_acos+0x2b0>)
 801aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aaf8:	f7e5 fbc8 	bl	800028c <__adddf3>
 801aafc:	4622      	mov	r2, r4
 801aafe:	462b      	mov	r3, r5
 801ab00:	f7e5 fd7a 	bl	80005f8 <__aeabi_dmul>
 801ab04:	ec45 4b10 	vmov	d0, r4, r5
 801ab08:	4680      	mov	r8, r0
 801ab0a:	4689      	mov	r9, r1
 801ab0c:	f7ff fadc 	bl	801a0c8 <__ieee754_sqrt>
 801ab10:	a331      	add	r3, pc, #196	; (adr r3, 801abd8 <__ieee754_acos+0x2b8>)
 801ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab16:	4620      	mov	r0, r4
 801ab18:	4629      	mov	r1, r5
 801ab1a:	ec57 6b10 	vmov	r6, r7, d0
 801ab1e:	f7e5 fd6b 	bl	80005f8 <__aeabi_dmul>
 801ab22:	a32f      	add	r3, pc, #188	; (adr r3, 801abe0 <__ieee754_acos+0x2c0>)
 801ab24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab28:	f7e5 fbae 	bl	8000288 <__aeabi_dsub>
 801ab2c:	4622      	mov	r2, r4
 801ab2e:	462b      	mov	r3, r5
 801ab30:	f7e5 fd62 	bl	80005f8 <__aeabi_dmul>
 801ab34:	a32c      	add	r3, pc, #176	; (adr r3, 801abe8 <__ieee754_acos+0x2c8>)
 801ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab3a:	f7e5 fba7 	bl	800028c <__adddf3>
 801ab3e:	4622      	mov	r2, r4
 801ab40:	462b      	mov	r3, r5
 801ab42:	f7e5 fd59 	bl	80005f8 <__aeabi_dmul>
 801ab46:	a32a      	add	r3, pc, #168	; (adr r3, 801abf0 <__ieee754_acos+0x2d0>)
 801ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab4c:	f7e5 fb9c 	bl	8000288 <__aeabi_dsub>
 801ab50:	4622      	mov	r2, r4
 801ab52:	462b      	mov	r3, r5
 801ab54:	f7e5 fd50 	bl	80005f8 <__aeabi_dmul>
 801ab58:	4b2e      	ldr	r3, [pc, #184]	; (801ac14 <__ieee754_acos+0x2f4>)
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	f7e5 fb96 	bl	800028c <__adddf3>
 801ab60:	4602      	mov	r2, r0
 801ab62:	460b      	mov	r3, r1
 801ab64:	4640      	mov	r0, r8
 801ab66:	4649      	mov	r1, r9
 801ab68:	f7e5 fe70 	bl	800084c <__aeabi_ddiv>
 801ab6c:	4632      	mov	r2, r6
 801ab6e:	463b      	mov	r3, r7
 801ab70:	f7e5 fd42 	bl	80005f8 <__aeabi_dmul>
 801ab74:	a320      	add	r3, pc, #128	; (adr r3, 801abf8 <__ieee754_acos+0x2d8>)
 801ab76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab7a:	f7e5 fb85 	bl	8000288 <__aeabi_dsub>
 801ab7e:	4632      	mov	r2, r6
 801ab80:	463b      	mov	r3, r7
 801ab82:	f7e5 fb83 	bl	800028c <__adddf3>
 801ab86:	4602      	mov	r2, r0
 801ab88:	460b      	mov	r3, r1
 801ab8a:	f7e5 fb7f 	bl	800028c <__adddf3>
 801ab8e:	4602      	mov	r2, r0
 801ab90:	460b      	mov	r3, r1
 801ab92:	a103      	add	r1, pc, #12	; (adr r1, 801aba0 <__ieee754_acos+0x280>)
 801ab94:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ab98:	e76f      	b.n	801aa7a <__ieee754_acos+0x15a>
 801ab9a:	bf00      	nop
 801ab9c:	f3af 8000 	nop.w
 801aba0:	54442d18 	.word	0x54442d18
 801aba4:	400921fb 	.word	0x400921fb
 801aba8:	0dfdf709 	.word	0x0dfdf709
 801abac:	3f023de1 	.word	0x3f023de1
 801abb0:	7501b288 	.word	0x7501b288
 801abb4:	3f49efe0 	.word	0x3f49efe0
 801abb8:	b5688f3b 	.word	0xb5688f3b
 801abbc:	3fa48228 	.word	0x3fa48228
 801abc0:	0e884455 	.word	0x0e884455
 801abc4:	3fc9c155 	.word	0x3fc9c155
 801abc8:	03eb6f7d 	.word	0x03eb6f7d
 801abcc:	3fd4d612 	.word	0x3fd4d612
 801abd0:	55555555 	.word	0x55555555
 801abd4:	3fc55555 	.word	0x3fc55555
 801abd8:	b12e9282 	.word	0xb12e9282
 801abdc:	3fb3b8c5 	.word	0x3fb3b8c5
 801abe0:	1b8d0159 	.word	0x1b8d0159
 801abe4:	3fe6066c 	.word	0x3fe6066c
 801abe8:	9c598ac8 	.word	0x9c598ac8
 801abec:	40002ae5 	.word	0x40002ae5
 801abf0:	1c8a2d4b 	.word	0x1c8a2d4b
 801abf4:	40033a27 	.word	0x40033a27
 801abf8:	33145c07 	.word	0x33145c07
 801abfc:	3c91a626 	.word	0x3c91a626
 801ac00:	54442d18 	.word	0x54442d18
 801ac04:	3ff921fb 	.word	0x3ff921fb
 801ac08:	3fefffff 	.word	0x3fefffff
 801ac0c:	3fdfffff 	.word	0x3fdfffff
 801ac10:	3c600000 	.word	0x3c600000
 801ac14:	3ff00000 	.word	0x3ff00000
 801ac18:	3fe00000 	.word	0x3fe00000
 801ac1c:	ee10 2a10 	vmov	r2, s0
 801ac20:	462b      	mov	r3, r5
 801ac22:	496d      	ldr	r1, [pc, #436]	; (801add8 <__ieee754_acos+0x4b8>)
 801ac24:	2000      	movs	r0, #0
 801ac26:	f7e5 fb2f 	bl	8000288 <__aeabi_dsub>
 801ac2a:	4b6c      	ldr	r3, [pc, #432]	; (801addc <__ieee754_acos+0x4bc>)
 801ac2c:	2200      	movs	r2, #0
 801ac2e:	f7e5 fce3 	bl	80005f8 <__aeabi_dmul>
 801ac32:	4604      	mov	r4, r0
 801ac34:	460d      	mov	r5, r1
 801ac36:	ec45 4b10 	vmov	d0, r4, r5
 801ac3a:	f7ff fa45 	bl	801a0c8 <__ieee754_sqrt>
 801ac3e:	a34e      	add	r3, pc, #312	; (adr r3, 801ad78 <__ieee754_acos+0x458>)
 801ac40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac44:	4620      	mov	r0, r4
 801ac46:	4629      	mov	r1, r5
 801ac48:	ec59 8b10 	vmov	r8, r9, d0
 801ac4c:	f7e5 fcd4 	bl	80005f8 <__aeabi_dmul>
 801ac50:	a34b      	add	r3, pc, #300	; (adr r3, 801ad80 <__ieee754_acos+0x460>)
 801ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac56:	f7e5 fb19 	bl	800028c <__adddf3>
 801ac5a:	4622      	mov	r2, r4
 801ac5c:	462b      	mov	r3, r5
 801ac5e:	f7e5 fccb 	bl	80005f8 <__aeabi_dmul>
 801ac62:	a349      	add	r3, pc, #292	; (adr r3, 801ad88 <__ieee754_acos+0x468>)
 801ac64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac68:	f7e5 fb0e 	bl	8000288 <__aeabi_dsub>
 801ac6c:	4622      	mov	r2, r4
 801ac6e:	462b      	mov	r3, r5
 801ac70:	f7e5 fcc2 	bl	80005f8 <__aeabi_dmul>
 801ac74:	a346      	add	r3, pc, #280	; (adr r3, 801ad90 <__ieee754_acos+0x470>)
 801ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac7a:	f7e5 fb07 	bl	800028c <__adddf3>
 801ac7e:	4622      	mov	r2, r4
 801ac80:	462b      	mov	r3, r5
 801ac82:	f7e5 fcb9 	bl	80005f8 <__aeabi_dmul>
 801ac86:	a344      	add	r3, pc, #272	; (adr r3, 801ad98 <__ieee754_acos+0x478>)
 801ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac8c:	f7e5 fafc 	bl	8000288 <__aeabi_dsub>
 801ac90:	4622      	mov	r2, r4
 801ac92:	462b      	mov	r3, r5
 801ac94:	f7e5 fcb0 	bl	80005f8 <__aeabi_dmul>
 801ac98:	a341      	add	r3, pc, #260	; (adr r3, 801ada0 <__ieee754_acos+0x480>)
 801ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac9e:	f7e5 faf5 	bl	800028c <__adddf3>
 801aca2:	4622      	mov	r2, r4
 801aca4:	462b      	mov	r3, r5
 801aca6:	f7e5 fca7 	bl	80005f8 <__aeabi_dmul>
 801acaa:	a33f      	add	r3, pc, #252	; (adr r3, 801ada8 <__ieee754_acos+0x488>)
 801acac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acb0:	4682      	mov	sl, r0
 801acb2:	468b      	mov	fp, r1
 801acb4:	4620      	mov	r0, r4
 801acb6:	4629      	mov	r1, r5
 801acb8:	f7e5 fc9e 	bl	80005f8 <__aeabi_dmul>
 801acbc:	a33c      	add	r3, pc, #240	; (adr r3, 801adb0 <__ieee754_acos+0x490>)
 801acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acc2:	f7e5 fae1 	bl	8000288 <__aeabi_dsub>
 801acc6:	4622      	mov	r2, r4
 801acc8:	462b      	mov	r3, r5
 801acca:	f7e5 fc95 	bl	80005f8 <__aeabi_dmul>
 801acce:	a33a      	add	r3, pc, #232	; (adr r3, 801adb8 <__ieee754_acos+0x498>)
 801acd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acd4:	f7e5 fada 	bl	800028c <__adddf3>
 801acd8:	4622      	mov	r2, r4
 801acda:	462b      	mov	r3, r5
 801acdc:	f7e5 fc8c 	bl	80005f8 <__aeabi_dmul>
 801ace0:	a337      	add	r3, pc, #220	; (adr r3, 801adc0 <__ieee754_acos+0x4a0>)
 801ace2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ace6:	f7e5 facf 	bl	8000288 <__aeabi_dsub>
 801acea:	4622      	mov	r2, r4
 801acec:	462b      	mov	r3, r5
 801acee:	f7e5 fc83 	bl	80005f8 <__aeabi_dmul>
 801acf2:	4b39      	ldr	r3, [pc, #228]	; (801add8 <__ieee754_acos+0x4b8>)
 801acf4:	2200      	movs	r2, #0
 801acf6:	f7e5 fac9 	bl	800028c <__adddf3>
 801acfa:	4602      	mov	r2, r0
 801acfc:	460b      	mov	r3, r1
 801acfe:	4650      	mov	r0, sl
 801ad00:	4659      	mov	r1, fp
 801ad02:	f7e5 fda3 	bl	800084c <__aeabi_ddiv>
 801ad06:	4642      	mov	r2, r8
 801ad08:	464b      	mov	r3, r9
 801ad0a:	f7e5 fc75 	bl	80005f8 <__aeabi_dmul>
 801ad0e:	2600      	movs	r6, #0
 801ad10:	4682      	mov	sl, r0
 801ad12:	468b      	mov	fp, r1
 801ad14:	4632      	mov	r2, r6
 801ad16:	464b      	mov	r3, r9
 801ad18:	4630      	mov	r0, r6
 801ad1a:	4649      	mov	r1, r9
 801ad1c:	f7e5 fc6c 	bl	80005f8 <__aeabi_dmul>
 801ad20:	4602      	mov	r2, r0
 801ad22:	460b      	mov	r3, r1
 801ad24:	4620      	mov	r0, r4
 801ad26:	4629      	mov	r1, r5
 801ad28:	f7e5 faae 	bl	8000288 <__aeabi_dsub>
 801ad2c:	4632      	mov	r2, r6
 801ad2e:	4604      	mov	r4, r0
 801ad30:	460d      	mov	r5, r1
 801ad32:	464b      	mov	r3, r9
 801ad34:	4640      	mov	r0, r8
 801ad36:	4649      	mov	r1, r9
 801ad38:	f7e5 faa8 	bl	800028c <__adddf3>
 801ad3c:	4602      	mov	r2, r0
 801ad3e:	460b      	mov	r3, r1
 801ad40:	4620      	mov	r0, r4
 801ad42:	4629      	mov	r1, r5
 801ad44:	f7e5 fd82 	bl	800084c <__aeabi_ddiv>
 801ad48:	4602      	mov	r2, r0
 801ad4a:	460b      	mov	r3, r1
 801ad4c:	4650      	mov	r0, sl
 801ad4e:	4659      	mov	r1, fp
 801ad50:	f7e5 fa9c 	bl	800028c <__adddf3>
 801ad54:	4632      	mov	r2, r6
 801ad56:	464b      	mov	r3, r9
 801ad58:	f7e5 fa98 	bl	800028c <__adddf3>
 801ad5c:	4602      	mov	r2, r0
 801ad5e:	460b      	mov	r3, r1
 801ad60:	f7e5 fa94 	bl	800028c <__adddf3>
 801ad64:	e5fe      	b.n	801a964 <__ieee754_acos+0x44>
 801ad66:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801adc8 <__ieee754_acos+0x4a8>
 801ad6a:	e5ed      	b.n	801a948 <__ieee754_acos+0x28>
 801ad6c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 801add0 <__ieee754_acos+0x4b0>
 801ad70:	e5ea      	b.n	801a948 <__ieee754_acos+0x28>
 801ad72:	bf00      	nop
 801ad74:	f3af 8000 	nop.w
 801ad78:	0dfdf709 	.word	0x0dfdf709
 801ad7c:	3f023de1 	.word	0x3f023de1
 801ad80:	7501b288 	.word	0x7501b288
 801ad84:	3f49efe0 	.word	0x3f49efe0
 801ad88:	b5688f3b 	.word	0xb5688f3b
 801ad8c:	3fa48228 	.word	0x3fa48228
 801ad90:	0e884455 	.word	0x0e884455
 801ad94:	3fc9c155 	.word	0x3fc9c155
 801ad98:	03eb6f7d 	.word	0x03eb6f7d
 801ad9c:	3fd4d612 	.word	0x3fd4d612
 801ada0:	55555555 	.word	0x55555555
 801ada4:	3fc55555 	.word	0x3fc55555
 801ada8:	b12e9282 	.word	0xb12e9282
 801adac:	3fb3b8c5 	.word	0x3fb3b8c5
 801adb0:	1b8d0159 	.word	0x1b8d0159
 801adb4:	3fe6066c 	.word	0x3fe6066c
 801adb8:	9c598ac8 	.word	0x9c598ac8
 801adbc:	40002ae5 	.word	0x40002ae5
 801adc0:	1c8a2d4b 	.word	0x1c8a2d4b
 801adc4:	40033a27 	.word	0x40033a27
	...
 801add0:	54442d18 	.word	0x54442d18
 801add4:	3ff921fb 	.word	0x3ff921fb
 801add8:	3ff00000 	.word	0x3ff00000
 801addc:	3fe00000 	.word	0x3fe00000

0801ade0 <_init>:
 801ade0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ade2:	bf00      	nop
 801ade4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ade6:	bc08      	pop	{r3}
 801ade8:	469e      	mov	lr, r3
 801adea:	4770      	bx	lr

0801adec <_fini>:
 801adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adee:	bf00      	nop
 801adf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801adf2:	bc08      	pop	{r3}
 801adf4:	469e      	mov	lr, r3
 801adf6:	4770      	bx	lr
